{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/LYPxXuPqse.txt","path":"LYPxXuPqse.txt","modified":0,"renderable":0},{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"source/assets/img/favicon.png","path":"assets/img/favicon.png","modified":0,"renderable":0},{"_id":"source/assets/img/head.jpeg","path":"assets/img/head.jpeg","modified":0,"renderable":0},{"_id":"source/assets/img/wxpay.jpg","path":"assets/img/wxpay.jpg","modified":0,"renderable":0},{"_id":"source/assets/img/alipay.jpg","path":"assets/img/alipay.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"themes/yilia/_config.yml","hash":"f8c175b01f9b7e9762ee825151df9cbd00cc6292","modified":1629443825245},{"_id":"themes/yilia/README.md","hash":"99985dc9f0f3473a26341245e436751bc42fd322","modified":1573006591000},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1573006591000},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1573006591000},{"_id":"source/.DS_Store","hash":"b993d507b6cde55ce3c38ad5697bc272c3a284eb","modified":1573042957000},{"_id":"source/CNAME","hash":"908d3d2462b08908c37439643c95193df6b2f969","modified":1573006591000},{"_id":"source/LYPxXuPqse.txt","hash":"20f4a810de14ff5b6fc3deba105d0ee7e9e603cf","modified":1573006591000},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1573006591000},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1573006591000},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1573006591000},{"_id":"themes/yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1573006591000},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1573006591000},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1573006591000},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1573006591000},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1573006591000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1573006591000},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1573006591000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1573006591000},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1573006591000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1573006591000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1573006591000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1573006591000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1573006591000},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1573006591000},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1573006591000},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1573006591000},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1573006591000},{"_id":"source/_posts/10-分钟理解-BFC-原理.md","hash":"04f538a51b28c1af2358109d5301cb12e7b65c05","modified":1573092820000},{"_id":"source/_posts/2019新目标-新里程.md","hash":"f16fa9b70f401ce7cabda20f83512fe963f91ec3","modified":1573093077000},{"_id":"source/_posts/20171012工作日记.md","hash":"f06fee68d822591d5a9c20439d9ef58cdc80cafa","modified":1573093077000},{"_id":"source/_posts/APICloud打包Vue单页应用.md","hash":"8b9612672324ea4dffce0917c6495d5affcd9293","modified":1573093077000},{"_id":"source/_posts/2019年中计划.md","hash":"e2e2be60bd5aab145c440769acc5f91b6b336ef9","modified":1573092820000},{"_id":"source/_posts/534-other-ways-to-reload-the-page-with-JavaScript.md","hash":"4edcd192910f23fe400245f8573886650f79a975","modified":1573092820000},{"_id":"source/_posts/APICloud开发实践-快速了解APICloud是什么.md","hash":"4986b3011ea3088121327425b563c8477520bffa","modified":1573093077000},{"_id":"source/_posts/CSS3实现波浪进度球.md","hash":"d640a92c3853de357df56704dcc57eccd2673cf0","modified":1573091954000},{"_id":"source/_posts/FE微前端架构实施.md","hash":"db8592a19794e845139bc2be1c8656b7b448d263","modified":1630922356289},{"_id":"source/_posts/Dnsmasq 安装配置.md","hash":"91c6879c7ae35824b0fbdf33bbc58e8e207fd399","modified":1573091954000},{"_id":"source/_posts/Git仓库完全迁移，包括所有的分支和标签，当然也包括日志.md","hash":"2550f527e01129712e7bc242d6f749b01bfc33e8","modified":1573093077000},{"_id":"source/_posts/CPU时间片.md","hash":"61d3ad9497029df1926f817e11991d0bc490d824","modified":1573091954000},{"_id":"source/_posts/How-To-Install-Jenkins-on-CentOS-7.md","hash":"4914ee8f72bdd3d93c045bd9783aad4d16e52cb6","modified":1573093077000},{"_id":"source/_posts/DNS原理及其解析过程.md","hash":"4a0a63cd9ada5180eb9f1884ed144eb0ffd09584","modified":1573091954000},{"_id":"source/_posts/JS中call-和apply.md","hash":"2efd2c3eaad6cf4fa4c2f8d40636171b579bc4e9","modified":1595489081000},{"_id":"source/_posts/JS中typeof的用法.md","hash":"b71082b155fef49fdfa0095039adad347d873184","modified":1594346112000},{"_id":"source/_posts/JS中的异步操作.md","hash":"1ea934a20cd15971e05060160256f82e8024dc10","modified":1595555812000},{"_id":"source/_posts/JS原始值转换算法-toPrimitive.md","hash":"767d7269fa47402d1acdb543f02a41ca80e796ab","modified":1594868324000},{"_id":"source/_posts/JavaScript判断知否支持h5-video标签.md","hash":"d3b40a55768c7966ef30648b2905b2474ce038e2","modified":1573093077000},{"_id":"source/_posts/Jenkins定时构建-轮询SCM设置.md","hash":"389e093d6f741ec3d01e2a0198b23dc263772352","modified":1573093077000},{"_id":"source/_posts/Linux-网络速度测试工具.md","hash":"f55ea4272436086ae4716246b7ff54eb35eb8053","modified":1573093077000},{"_id":"source/_posts/NGINX-SSH-Tunnel-把本地开发环境公布到互联网上.md","hash":"ce13b43e89116340b04d2a4ea3cc9d71194d039c","modified":1573093077000},{"_id":"source/_posts/Node-js-Sequelize如何实现数据库的读写分离.md","hash":"4208151d8efa514fe04ecd2bd69400f9f56016e4","modified":1573093077000},{"_id":"source/_posts/Nginx后端服务器组配置的5个指令.md","hash":"db43dfe4bf393595464bb6e7ed7f0aa9115ba074","modified":1573093077000},{"_id":"source/_posts/Let-s-Encrypt：用免费的-SSL-证书，让网站支持-HTTPS.md","hash":"a922642a2e353ae429d53c9042eb1c6da5240246","modified":1573093077000},{"_id":"source/_posts/PWA-入门-写个非常简单的-PWA-页面.md","hash":"36d57e3739288276842fcc2007c8ddb4f7087d5b","modified":1594623216000},{"_id":"source/_posts/SQL基础.md","hash":"c114c235e334562158774ccf42294b2f61a51083","modified":1573093077000},{"_id":"source/_posts/byte-数组与十六进制字符串与字符串的互相转换-java.md","hash":"7c7e579c860a659e1e3338522ee6951e6277fd2d","modified":1573093077000},{"_id":"source/_posts/adonis-websocket-client报错.md","hash":"c771279086df179c2776c803ebb841e81df62a7e","modified":1573093077000},{"_id":"source/_posts/Rewrite功能的配置（1）.md","hash":"9d5fe1dfa1524441d3e7f73fc62a23f641c6fcfe","modified":1573093077000},{"_id":"source/_posts/apicloud结合vue快速开发移动应用.md","hash":"01017904aaf0e3c6f941b9f5567b7f243e6390ae","modified":1573093077000},{"_id":"source/_posts/centos-6-安装n来控制node版本.md","hash":"483bf244b0a4a6fde6da6ca2ac4947eeed905343","modified":1573093077000},{"_id":"source/_posts/centos-安装-dig.md","hash":"4384fac37a2039a8b8fe7dd1a32462e44b340ce4","modified":1573092820000},{"_id":"source/_posts/centos7 安装 redis并配置开机启动.md","hash":"440af5f3e0eeb69f5432f5f3211583f6b8b18057","modified":1573092820000},{"_id":"source/_posts/centos6.7 安装 redis并配置开机启动.md","hash":"52c17cfd17f3828f15c41a141ecea0cd27609983","modified":1573092820000},{"_id":"source/_posts/centos7对普通用户授权sudo权限.md","hash":"6c42d4f5be4c54cc7e9a2c250a8491de1b09fadd","modified":1573093077000},{"_id":"source/_posts/centos7-安装nvm.md","hash":"e0aeaaa229c14cd6d602179cdd3e1d5d91827d31","modified":1573093077000},{"_id":"source/_posts/curl命令.md","hash":"3b84cbe355e8221063eca888acd8d59de8dfe700","modified":1573091954000},{"_id":"source/_posts/chown命令.md","hash":"d32180290d20c57487dbfd7923f70227b6f632bc","modified":1573092820000},{"_id":"source/_posts/dnsmasq.conf 配置.md","hash":"07d7943ab05ffb52698030f838feb64fe26e9cb9","modified":1573091954000},{"_id":"source/_posts/electron-vue项目实现打印小票功能.md","hash":"9140342d2d0baacb9a23e2308e0d9dd868db57a1","modified":1573091954000},{"_id":"source/_posts/electron开发实践-快速了解electron是什么.md","hash":"08d1d4f0de9daa96e71ddc858011acd13973a883","modified":1573091954000},{"_id":"source/_posts/export-default-和-export-区别.md","hash":"32864658c1512522088e1538eb7ede7367b5aba3","modified":1573093077000},{"_id":"source/_posts/electron静默打印不生效.md","hash":"5ee226f0079f1737c957743e841e0620a03d76e6","modified":1573092041000},{"_id":"source/_posts/dnsmasq官方文档.md","hash":"924baa99d6d4b61fed5dafa20fe9082cc3f3ffbc","modified":1573091954000},{"_id":"source/_posts/free命令.md","hash":"e8eff09616c913acd6ccafd6a6a2c01f9dd28f33","modified":1573093077000},{"_id":"source/_posts/koajs框架下创建二维码生成服务.md","hash":"a7a0e241a325cff6188a0dc9472df5b152545c9a","modified":1573093077000},{"_id":"source/_posts/linux下使用npm-install无法安装成功的问题.md","hash":"da8d98c611d58ed86fd409d0b01992f44f90064b","modified":1573093077000},{"_id":"source/_posts/java-lang-UnsatisfiedLinkError-dlopen-failed.md","hash":"19a573c079fc1f489c7955431e31328744799246","modified":1573093077000},{"_id":"source/_posts/mkdir-用法.md","hash":"b59a3b3a8533fbf0fdfd7fed0c76ab522338389d","modified":1573093077000},{"_id":"source/_posts/linux查看端口占用情况.md","hash":"34acc75ae17feb4ed525534ed28508a07d878fd0","modified":1573093077000},{"_id":"source/_posts/nginx单页应用基本配置.md","hash":"eef0137b0117ef73c1bd560b17f552d344f333f4","modified":1573093077000},{"_id":"source/_posts/getaddrinfo-ENOTFOUND-localhost解决办法.md","hash":"89d55763180ee37dcc3f539400a02662ad3629c9","modified":1615788354364},{"_id":"source/_posts/nginx设置cookie点滴感悟.md","hash":"069aa9e41f404c2045e5b08eafeac55822a04542","modified":1573093077000},{"_id":"source/_posts/nodejs-redis-doc.md","hash":"0a4a82e73eb2ece4806b5e04829c98a0ffa36c0c","modified":1573093077000},{"_id":"source/_posts/nodejs项目缓存策略.md","hash":"252b0b06b8ad241ac0cff10b75d1288a70483ee1","modified":1573093077000},{"_id":"source/_posts/nodejs+redis应用.md","hash":"606acb91ab53ffb18d79dbe05ed4ecc06cd8e96e","modified":1573093077000},{"_id":"source/_posts/nvm-切换node版本.md","hash":"dac5617a7d6d3fe075235c7a6eb1ef1cf516e033","modified":1573093077000},{"_id":"source/_posts/npm使用淘宝镜像.md","hash":"2f155e6bf3af0d8abd0e404530c57e2f7890ccc3","modified":1573093077000},{"_id":"source/_posts/pomelo之rpc坑.md","hash":"f2a59dc8bbbe60072d21bb934c8545a126033628","modified":1573093077000},{"_id":"source/_posts/pm2启动npm下服务的命令.md","hash":"1493443aa1af1a99bf2c662c48701dc793e78238","modified":1573093077000},{"_id":"source/_posts/vagrant-ssh-本机连接方式.md","hash":"903728c31c3f0a6a04ea534d02fa5eaa51a2726e","modified":1573093167000},{"_id":"source/_posts/pomelo的HelloWorld.md","hash":"fdda71e5b9ad94f900905c67da7ee400a742d15f","modified":1573093077000},{"_id":"source/_posts/uptime命令.md","hash":"c15ee1c99ac378ede1bb245f33a3f82c2e80f4ea","modified":1573093167000},{"_id":"source/_posts/vue源码中有ts语法，vscode查看提示错误问题.md","hash":"1925637fbc92e75175076df3d5f198b4d18bcb47","modified":1573093167000},{"_id":"source/_posts/vi命令.md","hash":"c0de03d94edbf2a64b0f8c6fb01c97ecc9fe94dc","modified":1573093167000},{"_id":"source/_posts/webpack之proxyTable设置跨域.md","hash":"4884786253ccfe77b295c5878b1651cffb76e1ab","modified":1573093167000},{"_id":"source/_posts/vue条形码和二维码.md","hash":"cc1becea26c553724f4d92dcefa5abb7750d0034","modified":1573093167000},{"_id":"source/_posts/web页面播放amr文件.md","hash":"3f62b6ae6a45f316b0edeb167f6db731c2eb78f2","modified":1573093167000},{"_id":"source/_posts/wget命令.md","hash":"4fa3ecdb1a0dabc4ec5178644a48c5118747eda3","modified":1573093167000},{"_id":"source/_posts/websocket-https-连接.md","hash":"e4cfe51d50808a1428f2cb11aec7648cbf8f2805","modified":1573093167000},{"_id":"source/_posts/“我在星巴克坐了3个月”：那些假装上班的被裁中年人.md","hash":"186c64456e03167c7e56cecdde1f0dc21aec59e5","modified":1573093173000},{"_id":"source/_posts/【Linuc-CentOS-】通过yum安装-指定版本的nodejs.md","hash":"d3eb59f22cad9b6e879cfbd806fc1344c5db4d45","modified":1573093484000},{"_id":"source/_posts/一个人逐渐变高级的3种迹象.md","hash":"80302bf129f761694315c93c76ab0d96299dc9d8","modified":1573093484000},{"_id":"source/_posts/一些职位的简写.md","hash":"e8cfb58f235057535cb29962149c00735c3dacf8","modified":1573093484000},{"_id":"source/_posts/【译】关于JavaScript-数组你应该知道的事情.md","hash":"e6edb203fea11ac3501ced5faa375651f862e8f6","modified":1573093484000},{"_id":"source/_posts/二分查找.md","hash":"ccea38848b7e26994851903923077e98cf44bb20","modified":1576595348000},{"_id":"source/_posts/七牛云存储文件夹上传webpack使用cdn资源地址.md","hash":"873b85f8a4b5308daa1278d56b3b8f8d910289e0","modified":1573093484000},{"_id":"source/_posts/什么叫ocpm、ocpc、ocpa？.md","hash":"786d4886d9df1c1464f1fae8e5eb6f0306975696","modified":1573092505000},{"_id":"source/_posts/什么时候会发送options请求.md","hash":"1b9f26b049c41e32541b92f1f833415a6aee1848","modified":1602573751000},{"_id":"source/_posts/一些广告术语汇总.md","hash":"00520c313f98479a11234d77d68980573ea735a0","modified":1573093484000},{"_id":"source/_posts/从零开始开发一个vue组件打包并发布到npm.md","hash":"98bae337fe67c23135fcabc45e9c2fba79d2f93d","modified":1573822225000},{"_id":"source/_posts/全景项目制作步骤.md","hash":"cdcaa7a4770ffca9b6c9b313cb34359d0ddaee67","modified":1573093484000},{"_id":"source/_posts/使用js判断浏览器.md","hash":"8ea1477c9247411618a66aff4eac9ebea033c1d1","modified":1573092025000},{"_id":"source/_posts/内建函数-原生函数.md","hash":"82d173134936b49797b037a437859e3c78e05a7b","modified":1594608967000},{"_id":"source/_posts/全网最详bpmn-js简介.md","hash":"ac17218584cbbc1044a7a637111482e1993c9f1e","modified":1595296276000},{"_id":"source/_posts/利用gitlab-ci将前端项目在gitlab上持续集成.md","hash":"34fe904d155ebd1c180164d6290c252925b6f10a","modified":1630899779332},{"_id":"source/_posts/升级Jenkins方法.md","hash":"fb0eda41072d8fbbd3f97aa1a42edd1b607d862e","modified":1573093484000},{"_id":"source/_posts/去掉页面的title标题，同时不显示默认链接.md","hash":"c5c00ba8a649c84521c6d87c515cd0a0499b749d","modified":1573093484000},{"_id":"source/_posts/前端面试题.md","hash":"1c78370cd5ec79236b5acba9f16943a4e19777a7","modified":1573093484000},{"_id":"source/_posts/在 CentOS 7 下安装配置 shadowsocks.md","hash":"4fb11a5313503997d08b0a115020ad4ff49e135b","modified":1573093484000},{"_id":"source/_posts/域名解析中A记录、CNAME、MX记录、NS记录的区别和联系.md","hash":"c3552be9d05a4e3f335180f646ad949ed78847eb","modified":1573093484000},{"_id":"source/_posts/如何使用electron自动更新功能.md","hash":"c6d17d9bf79d88cbbb3ab5ddf5e08d1fc9e37fec","modified":1573093484000},{"_id":"source/_posts/如何通过linux-ssh远程linux不用输入密码登入.md","hash":"e75e9b05a71d4dc2055cb29e2e612c6a3aff2a49","modified":1573093484000},{"_id":"source/_posts/安装pomelo.md","hash":"6b6b5d0e0b22819e09963e1d7694328e2a771931","modified":1573093484000},{"_id":"source/_posts/将静态资源放到七牛服务器上.md","hash":"45780f30353bd112ea3edbad5b5de83088a34a89","modified":1573093484000},{"_id":"source/_posts/工作记录-上传静态资源到服务器.md","hash":"ec75bf7580e6fade7dccc51922c6d75008d9ca39","modified":1573093484000},{"_id":"source/_posts/把一件事坚持30天（结果惊人）.md","hash":"4df071d89564df60efe1184366fee0a9fcde3d54","modified":1573093484000},{"_id":"source/_posts/提示错误：jenkins-不在-sudoers-文件中。此事将被报告。.md","hash":"d3ae8d48b4ce4e1630a11d2cf150c913c22b674d","modified":1573093484000},{"_id":"source/_posts/更改location的URI.md","hash":"39a0af802a9535539b608eabd18e221b3c09a78a","modified":1573093484000},{"_id":"source/_posts/本机连接vagrant虚拟机创建的mysql数据库.md","hash":"3d5a050d72749f4e43df0012902cb154e2a94670","modified":1573093484000},{"_id":"source/_posts/欢迎使用pomelo.md","hash":"1558270f149a02aa502c8f95d7d7a9f47ead0bd9","modified":1573093484000},{"_id":"source/_posts/每天读一遍，不就你就会有改变.md","hash":"2fb830b61f2886853dcb665b109a0297cc462535","modified":1573093484000},{"_id":"source/_posts/浏览器播放RTSP直播流.md","hash":"182949ea371028e9fe8c8701d3a585dd28077bc7","modified":1575594069000},{"_id":"source/_posts/每个人都背负这一个十字架.md","hash":"48f2b07363f4fc8b965050d0a7a202185d43ea73","modified":1573093484000},{"_id":"source/_posts/留不住的心就让他飞吧.md","hash":"bcd1b226e58317579a7a13b985f77717cfae748d","modified":1573093484000},{"_id":"source/_posts/看懂UML类图和时序图.md","hash":"a0a44462fb996789f56630985011c4b16fea3f1e","modified":1573093484000},{"_id":"source/_posts/科学上网配置服务器.md","hash":"c92f44e9a73df84710df9c4d05b3e8a61a2c43ca","modified":1573093484000},{"_id":"source/_posts/移动端开发调试工具神器-Weinre使用方法.md","hash":"9617bd4df86ae3dd6a73dcd2a68f0bb8783e5698","modified":1573093484000},{"_id":"source/_posts/移动设备上Touchmove获取当前触摸的Dom节点.md","hash":"9fa42075c841d4fb0c99abcb80fb7e95ccd15b12","modified":1573093484000},{"_id":"source/_posts/纪念大师贝聿铭-bei-yu-ming.md","hash":"e0c0402f3d7b7b312ea11b5d9e4ce934064b9ae0","modified":1573093484000},{"_id":"source/_posts/网页中常见的错误码.md","hash":"732feaffd391bb36ce02786d01ed1e4427b27d77","modified":1573093484000},{"_id":"source/_posts/自律，是一个人最好的修养.md","hash":"98073108045dc6139fd26999ef9acfa0864b75ca","modified":1573093484000},{"_id":"source/_posts/自定义服务日志.md","hash":"a5976b3fbecccac1997fdf2ea83f052fdb1b9485","modified":1573093484000},{"_id":"source/_posts/虚拟服务器.md","hash":"f859eefd40d078b9f87a68cd0c7cf7042eac376a","modified":1573093484000},{"_id":"source/_posts/解决在Centos系统中无法切换到jenkins用户.md","hash":"e66e29f2515c75f1acb0cf030c111be8d2af3903","modified":1573093484000},{"_id":"source/_posts/设置webstorm自动删除行尾分号.md","hash":"e133c020cd2031daaa7d47657f31d2960820039a","modified":1573093484000},{"_id":"source/_posts/设置网站的错误页面.md","hash":"03dadc44b0b92f200a92a7e6c48108de21ae8c3f","modified":1573093484000},{"_id":"source/_posts/被遗忘的Logrotate.md","hash":"da0b2dba0489f53083a5a49669bef6ed58a020a8","modified":1573093484000},{"_id":"source/_posts/设置网站的默认首页.md","hash":"26d4d459a117587c9ba7fbba0cd3a1288b4fa180","modified":1573093484000},{"_id":"source/_posts/译-JavaScript-如何工作：对引擎、运行时、调用堆栈的概述.md","hash":"e7821897799262ed1c5fd15f0aa09990a508118e","modified":1573093585000},{"_id":"source/_posts/要做的.md","hash":"1c8d0da2d75aa94d469171b9954cd2716adf8460","modified":1616131746893},{"_id":"source/_posts/详解事件循环与任务队列.md","hash":"7dc96c0d93226386ba463f4ed06d76666403e823","modified":1595592594000},{"_id":"source/_posts/这一次，彻底弄懂-JavaScript-执行机制.md","hash":"512a91ec6c9768af91f7c1d329c2b9d1480e41b3","modified":1573093585000},{"_id":"source/_posts/配置location块.md","hash":"190e120041dacae031265f2a90881f613674df34","modified":1573093585000},{"_id":"source/_posts/配置允许生成的worker-process数.md","hash":"513f8a13848a9b53e022515bc9cafac156b0fe8c","modified":1573093585000},{"_id":"source/_posts/配置最大连接数.md","hash":"28179fcdf7f10410e3b7d40230afc0106bf85bc6","modified":1573093585000},{"_id":"source/_posts/配置请求的根目录.md","hash":"5ec030a6b08b7121f9c6ca768c3656d7c6287d36","modified":1573093585000},{"_id":"source/_posts/配置运行Nginx服务用户（组）.md","hash":"5f023871bdf8aa73aa5f0c4a20b905c406ab37f9","modified":1573093585000},{"_id":"source/_posts/长时间Running-flutter-pub-get没反应.md","hash":"b8bfc3572d92a744a75e7d17701207a9db6f3829","modified":1597052974000},{"_id":"source/_posts/防抖与节流.md","hash":"2a2a4fd5fda40e657df8c3643a44173ea3b87903","modified":1573178513000},{"_id":"source/_posts/马云团队.md","hash":"d5e0f3cbec12eec905fd79b00b436b15b0039c8d","modified":1573093585000},{"_id":"source/_posts/高性能网站性能进阶指南-笔记.md","hash":"9e5cff55642a59d4ae270844f3268e09b49591bb","modified":1573093585000},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1573006591000},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1573006591000},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1573006591000},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1573006591000},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1573006591000},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"a5e9fe67e0604c24279281d9fdd2ce1f4536d3e5","modified":1573006591000},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1573006591000},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1573006591000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1573006591000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"630c6ec866d056657d3d91e34b4c64eb993c0654","modified":1573006591000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1573006591000},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1573006591000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1573006591000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1573006591000},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1573006591000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"9d982389f1cb0c5c6fa6ae789834bc0811dbdfc1","modified":1573006591000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1573006591000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1573006591000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1573006591000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1573006591000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1573006591000},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1573006591000},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1573006591000},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1573006591000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1573006591000},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1573006591000},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1573006591000},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1573006591000},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1573006591000},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1573006591000},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1573006591000},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1573006591000},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1573006591000},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1573006591000},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1573006591000},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1573006591000},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1573006591000},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1573006591000},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1573006591000},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1573006591000},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1573006591000},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1573006591000},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1573006591000},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1573006591000},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1573006591000},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1573006591000},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1573006591000},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1573006591000},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1573006591000},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1573006591000},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1573006591000},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1573006591000},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1573006591000},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1573006591000},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1573006591000},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1573006591000},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1573006591000},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1573006591000},{"_id":"themes/yilia/source-src/js/fix.js","hash":"d6782d53c992e712af39c84e804eccaf38830b94","modified":1573006591000},{"_id":"themes/yilia/source-src/js/report.js","hash":"b3171e1accc51fc3421d1830316658b4ec729034","modified":1573006591000},{"_id":"themes/yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1573006591000},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1573006591000},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"2577deb6a9fe4f5436360b2ce9afcc7f9a7f0116","modified":1573006591000},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1573006591000},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1573006591000},{"_id":"source/assets/img/favicon.png","hash":"01c39180f2afc68b5e801f95a0b2fb4f0272cb0a","modified":1573006591000},{"_id":"source/assets/img/head.jpeg","hash":"48e38533b47bebb7e37412c43ac769d97e5ad68c","modified":1573006591000},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"4cb685f07e89dd5175c2a576e73a1a957aec5637","modified":1573006591000},{"_id":"source/assets/img/wxpay.jpg","hash":"b4f20b97db937642f71776de1c83490b70f8970e","modified":1573006591000},{"_id":"source/assets/img/alipay.jpg","hash":"329b84bba584d559a644be593752160540eab3ef","modified":1573006591000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1573006591000},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1573006591000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1573006591000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1573006591000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1573006591000},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1573006591000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1573006591000},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1573006591000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1573006591000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"5dccfbe165b23a101f1333cc65ed8efbd197453c","modified":1573006591000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1573006591000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1573006591000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1573006591000},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1573006591000},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1573006591000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1573006591000},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1573006591000},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1573006591000},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1573006591000},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1573006591000},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1573006591000},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"a5e9fe67e0604c24279281d9fdd2ce1f4536d3e5","modified":1573006591000},{"_id":"public/content.json","hash":"6112ec1bf8c82260bfe02818bdd74cb1d4af4899","modified":1635246057883},{"_id":"public/2021/03/19/要做的/index.html","hash":"8150a0ffbfcd5ff58398fe2ce8d861b8f6458a85","modified":1629443853181},{"_id":"public/2021/03/15/getaddrinfo-ENOTFOUND-localhost解决办法/index.html","hash":"2c6debb6140779c4b2b2345399a1a4c67d1b8e70","modified":1629443853181},{"_id":"public/2021/03/12/FE微前端架构实施/index.html","hash":"9773cb9cde4bf11e9cde187ac556b9fa14a658c6","modified":1630922369989},{"_id":"public/2020/10/13/什么时候会发送options请求/index.html","hash":"d9476fcc9f76b94a8c11b7a95ab61ea177d86eca","modified":1629443853182},{"_id":"public/2020/08/10/长时间Running-flutter-pub-get没反应/index.html","hash":"b5a476a261d5688fb9dd492e5eaf2f02b3b6c4de","modified":1629443853182},{"_id":"public/2020/07/24/JS中的异步操作/index.html","hash":"43abdea7a6726e3eff2ecd1be6b34b0b6f8a90ba","modified":1629443853182},{"_id":"public/2020/07/24/详解事件循环与任务队列/index.html","hash":"9c6d2704334862e78fc1b84308c56841598f0165","modified":1629443853182},{"_id":"public/2020/07/23/JS中call-和apply/index.html","hash":"2d7dc30e8d518b69a3e4945702030545456cbe88","modified":1629443853182},{"_id":"public/2020/07/21/全网最详bpmn-js简介/index.html","hash":"01293667531cc4acb46c89b1aecc1a9426e7f378","modified":1629443853183},{"_id":"public/2020/07/16/JS原始值转换算法-toPrimitive/index.html","hash":"a75e97026736d93e7ac7b6125bfb1372e1bbea78","modified":1629443853183},{"_id":"public/2020/07/13/PWA-入门-写个非常简单的-PWA-页面/index.html","hash":"dab62b5e88f238e4882d3a0a3de059ee7977de7d","modified":1629443853183},{"_id":"public/2020/07/13/内建函数-原生函数/index.html","hash":"a6e74f8c9b0ddf326316270c2b010ef11d48497e","modified":1629443853183},{"_id":"public/2020/07/10/JS中typeof的用法/index.html","hash":"7daf7d16bcd2dd8edf27bf03f9fae6b1caa855bd","modified":1629443853184},{"_id":"public/2019/12/17/二分查找/index.html","hash":"7a295b8e9247fea6afba3459ab737435c7493e0b","modified":1629443853184},{"_id":"public/2019/12/03/浏览器播放RTSP直播流/index.html","hash":"8daffdff74cc285ca552bb696b81ea21ec6409f8","modified":1629443853184},{"_id":"public/2019/11/15/从零开始开发一个vue组件打包并发布到npm/index.html","hash":"8a0b0d90f51189eff08d06e8e5d00fd70f0fcd9e","modified":1629443853184},{"_id":"public/2019/11/07/利用gitlab-ci将前端项目在gitlab上持续集成/index.html","hash":"9ace1807d1d40b66810d9f45b53e9aa4a9d51743","modified":1630899791985},{"_id":"public/2019/09/04/防抖与节流/index.html","hash":"ab66afa5033022c3128c853201fcfa1529efb793","modified":1629443853185},{"_id":"public/2019/09/03/10-分钟理解-BFC-原理/index.html","hash":"268165d5b7d0b388eafd693bd02fb3db83b5229b","modified":1629443853185},{"_id":"public/2019/08/19/Jenkins定时构建-轮询SCM设置/index.html","hash":"01e68490dadf98027e08a389057e17dcccf45435","modified":1629443853185},{"_id":"public/2019/08/14/centos7对普通用户授权sudo权限/index.html","hash":"6dd95db325b83e7979cd1b1d2dd912d126e304f6","modified":1629443853185},{"_id":"public/2019/08/14/提示错误：jenkins-不在-sudoers-文件中。此事将被报告。/index.html","hash":"451c4ac06faf6c35e25a889a49e0bf2f207b519a","modified":1629443853186},{"_id":"public/2019/08/14/解决在Centos系统中无法切换到jenkins用户/index.html","hash":"f6982e10a109f88a0e83759b8ae83d105ba2486a","modified":1629443853186},{"_id":"public/2019/08/14/How-To-Install-Jenkins-on-CentOS-7/index.html","hash":"06a6f715aea8fc1cadfdc87845c45a190f98f5f9","modified":1629443853186},{"_id":"public/2019/08/13/linux下使用npm-install无法安装成功的问题/index.html","hash":"9a255b4fdd2f704d10164004093628de12594b08","modified":1629443853186},{"_id":"public/2019/08/13/【Linuc-CentOS-】通过yum安装-指定版本的nodejs/index.html","hash":"f0e3f6c26850bc43a7909ed04e07f3438062798e","modified":1629443853186},{"_id":"public/2019/08/07/去掉页面的title标题，同时不显示默认链接/index.html","hash":"a986da4dd9c9590c5ef36548e7a02de5fc845011","modified":1629443853187},{"_id":"public/2019/07/26/NGINX-SSH-Tunnel-把本地开发环境公布到互联网上/index.html","hash":"0f07dcbbd8134fbe53e2e3189c31eb367153eda3","modified":1629443853187},{"_id":"public/2019/07/23/CSS3实现波浪进度球/index.html","hash":"437dffc74fe2e130081aa4252d4999eac9953abb","modified":1629443853187},{"_id":"public/2019/07/18/移动设备上Touchmove获取当前触摸的Dom节点/index.html","hash":"31aae2a0d370586a2d156eea13bfc260ed99515d","modified":1629443853187},{"_id":"public/2019/07/05/“我在星巴克坐了3个月”：那些假装上班的被裁中年人/index.html","hash":"c36fc514a7b666d40f1869aaf0cc772af2cf760c","modified":1629443853187},{"_id":"public/2019/07/05/vue源码中有ts语法，vscode查看提示错误问题/index.html","hash":"26b9400c36eb60fb89bc638db73d642b1eeb63b6","modified":1629443853188},{"_id":"public/2019/07/04/export-default-和-export-区别/index.html","hash":"25753caebec1dc203c427707e4466b359602b7dd","modified":1629443853188},{"_id":"public/2019/07/03/把一件事坚持30天（结果惊人）/index.html","hash":"3425b3ea8f023baeed4629b6107d278beea13be8","modified":1629443853188},{"_id":"public/2019/07/02/electron开发实践-快速了解electron是什么/index.html","hash":"8dcd8f681e8567489f5e1b915d7e2b36509ed258","modified":1629443853188},{"_id":"public/2019/07/01/webpack之proxyTable设置跨域/index.html","hash":"e6366a293f9001543d096ba5b18116e2d96122e4","modified":1629443853188},{"_id":"public/2019/06/25/APICloud开发实践-快速了解APICloud是什么/index.html","hash":"e7f526db4ff793177088685e8c1a83c4fff0822b","modified":1629443853189},{"_id":"public/2019/06/19/七牛云存储文件夹上传webpack使用cdn资源地址/index.html","hash":"d5a3ac9850de2fb6cdf49c0925a4f1a167a6f6ef","modified":1629443853189},{"_id":"public/2019/06/13/adonis-websocket-client报错/index.html","hash":"e8c3b10e00cc041276714998031ad6f9636c083d","modified":1629443853189},{"_id":"public/2019/06/25/2019年中计划/index.html","hash":"c6841ec8ffe6fe9f1e8287d07075900c6f7e06ef","modified":1629443853189},{"_id":"public/2019/06/11/译-JavaScript-如何工作：对引擎、运行时、调用堆栈的概述/index.html","hash":"daedddb087b01f4a084235fb9f33204512311455","modified":1629443853190},{"_id":"public/2019/06/11/这一次，彻底弄懂-JavaScript-执行机制/index.html","hash":"fcd2f3a2f4e550434d38693fa8e3c736cf9fd393","modified":1629443853190},{"_id":"public/2019/06/14/534-other-ways-to-reload-the-page-with-JavaScript/index.html","hash":"d598626fb2841349115d4178766e0fd5ed95d990","modified":1629443853189},{"_id":"public/2019/05/17/纪念大师贝聿铭-bei-yu-ming/index.html","hash":"9307633ee647e2e33b5bcf4f0a0f5f87ed50f2f8","modified":1629443853190},{"_id":"public/2019/05/21/一个人逐渐变高级的3种迹象/index.html","hash":"99f643bab2b186f20e425cea6c8521cfae3ecd83","modified":1629443853190},{"_id":"public/2019/05/16/自律，是一个人最好的修养/index.html","hash":"97153a9d0a69e88a0a716878f50209dd7a2287ad","modified":1629443853190},{"_id":"public/2019/04/25/【译】关于JavaScript-数组你应该知道的事情/index.html","hash":"f92d937ea5b82ca46c5d6bd9b98ea9f2746e5b5f","modified":1629443853191},{"_id":"public/2019/04/21/前端面试题/index.html","hash":"c7a7bf522b4c7d01a38bf4cc1d63f8098448d0ec","modified":1629443853191},{"_id":"public/2019/04/18/web页面播放amr文件/index.html","hash":"a0acc1afa53be0a406f327325262d036ee65918c","modified":1629443853191},{"_id":"public/2019/04/09/byte-数组与十六进制字符串与字符串的互相转换-java/index.html","hash":"c31a93b4b4aa7a63c0fd9552ce5997dada122c94","modified":1629443853191},{"_id":"public/2019/04/04/工作记录-上传静态资源到服务器/index.html","hash":"6d95db89879e4fb80156cac5d8c56e7f12b26cfe","modified":1629443853192},{"_id":"public/2019/04/03/java-lang-UnsatisfiedLinkError-dlopen-failed/index.html","hash":"aeef44d456b129ddbd38d9b37dadbae2a1f1d6d4","modified":1629443853192},{"_id":"public/2019/03/30/APICloud打包Vue单页应用/index.html","hash":"25a62a5c874e3b94ee2c10370af4ee6022b47977","modified":1629443853192},{"_id":"public/2019/03/29/electron静默打印不生效/index.html","hash":"3d4095ea371a925a8c4278cbfc6dd802ba21a45e","modified":1629443853192},{"_id":"public/2019/03/28/vue条形码和二维码/index.html","hash":"592a7aa656ef1fb09a40c889bfeab48dd87baddd","modified":1629443853192},{"_id":"public/2019/03/27/electron-vue项目实现打印小票功能/index.html","hash":"39681a2b1ef7f41089b22919f50d1bbea3cbe41e","modified":1629443853202},{"_id":"public/2019/03/26/apicloud结合vue快速开发移动应用/index.html","hash":"283b26f0ee0cd3f10bc46537559062df94ee746c","modified":1629443853202},{"_id":"public/2019/03/26/科学上网配置服务器/index.html","hash":"a0d8a8b6fd1125699f60f00827ca0bb02b83c0b8","modified":1629443853202},{"_id":"public/2019/03/25/将静态资源放到七牛服务器上/index.html","hash":"68109e8603d62574d5ed036abe7c9820c1ca00cd","modified":1629443853203},{"_id":"public/2019/03/23/全景项目制作步骤/index.html","hash":"7ea32f8112ffd2becf1af64190dcd4df588da3b7","modified":1629443853203},{"_id":"public/2019/03/22/什么叫ocpm、ocpc、ocpa？/index.html","hash":"55fc3acc1aad770a562db6a3b8ee745d82d24eda","modified":1629443853203},{"_id":"public/2019/03/22/如何使用electron自动更新功能/index.html","hash":"d78485802fe75151cdd2b552b0f74d8f2af98d2f","modified":1629443853203},{"_id":"public/2019/01/03/2019新目标-新里程/index.html","hash":"732baa9402e599ab0524894058137f03199af41a","modified":1629443853203},{"_id":"public/2018/07/25/一些广告术语汇总/index.html","hash":"fc65dfb29ee969718406beaf1e98b4a489cbd60d","modified":1629443853204},{"_id":"public/2018/07/11/Git仓库完全迁移，包括所有的分支和标签，当然也包括日志/index.html","hash":"38d11b32ee93b4bcd0d28209b6654ea8a503d474","modified":1629443853204},{"_id":"public/2018/06/08/使用js判断浏览器/index.html","hash":"c9183c31e5dc19f08e39bfb15044ce30e48a6c84","modified":1629443853205},{"_id":"public/2018/04/17/移动端开发调试工具神器-Weinre使用方法/index.html","hash":"4eb94912903f8b7187d6b390a4ef7f8edc91ad4d","modified":1629443853205},{"_id":"public/2018/04/11/设置webstorm自动删除行尾分号/index.html","hash":"78de814f1f7b72eac9afa52d7eee3ccc886f4ecc","modified":1629443853205},{"_id":"public/2018/04/11/nginx设置cookie点滴感悟/index.html","hash":"6f23fed7dfb951d9fe9315c29c8af8117562c93b","modified":1629443853206},{"_id":"public/2018/04/11/Node-js-Sequelize如何实现数据库的读写分离/index.html","hash":"b00499a50e5d26567b8f7c8f5a87b8b0e20421ec","modified":1629443853206},{"_id":"public/2018/04/08/linux查看端口占用情况/index.html","hash":"717c8e9f5d952ca3579e3e9deaf97cc4e7bf5f1c","modified":1629443853206},{"_id":"public/2018/04/08/vagrant-ssh-本机连接方式/index.html","hash":"57b181197bb81b0347ae968e2f26b0a9edd00202","modified":1629443853206},{"_id":"public/2018/04/08/如何通过linux-ssh远程linux不用输入密码登入/index.html","hash":"07efdfca25a00c40c62c520e37267acc9f60e942","modified":1629443853207},{"_id":"public/2018/04/02/centos-6-安装n来控制node版本/index.html","hash":"59386d7ed220661539ccc05b63fb017a6313b085","modified":1629443853207},{"_id":"public/2018/04/02/websocket-https-连接/index.html","hash":"b584ac5116d5c80cf39929d0bddbeff283759d02","modified":1629443853207},{"_id":"public/2018/03/27/pm2启动npm下服务的命令/index.html","hash":"5fcc8f3f16096ae55c1e5e69b247737aedeeb819","modified":1629443853207},{"_id":"public/2018/03/25/nginx单页应用基本配置/index.html","hash":"b73043be46e5c4d5069e2792bf20c619a6e98fd3","modified":1629443853221},{"_id":"public/2018/03/12/pomelo之rpc坑/index.html","hash":"6ac526c0b2950dabbb173211bd62aaf24142c564","modified":1629443853231},{"_id":"public/2018/02/28/pomelo的HelloWorld/index.html","hash":"e61a13dc4827f6dae03b7749c021d4a8981ec3e1","modified":1629443853231},{"_id":"public/2018/02/28/安装pomelo/index.html","hash":"92377377db2b8a4111811d210c7faefd6e9beaee","modified":1629443853231},{"_id":"public/2018/02/28/欢迎使用pomelo/index.html","hash":"ce10805a7d8f44ebcdf53dedb7289b090d60a2c1","modified":1629443853231},{"_id":"public/2018/02/26/SQL基础/index.html","hash":"eb157ad3a975f0010dce7cd71cbb7c86e1d1e795","modified":1629443853232},{"_id":"public/2018/02/25/本机连接vagrant虚拟机创建的mysql数据库/index.html","hash":"6470a619272246678362412c3b803513d8df9094","modified":1629443853232},{"_id":"public/2018/02/02/看懂UML类图和时序图/index.html","hash":"805afaebbc915f68fcbe2a5708a928a1a4a949a8","modified":1629443853232},{"_id":"public/2018/01/24/一些职位的简写/index.html","hash":"d01039ebb296fa1e88c44e489a4e2567f8aff0c9","modified":1629443853232},{"_id":"public/2018/01/24/free命令/index.html","hash":"daf35e567829a86d245cda7c00ac9f4ff206c47c","modified":1629443853232},{"_id":"public/2018/01/24/uptime命令/index.html","hash":"4a59ab8849624d85c89b4c44a12438537e8895ed","modified":1629443853232},{"_id":"public/2018/01/23/vi命令/index.html","hash":"664e54e925846429a8d00b20b2b0eb2fa4f36021","modified":1629443853233},{"_id":"public/2018/01/18/curl命令/index.html","hash":"947b952f0193a8a0dafaf395767482c59278403c","modified":1629443853233},{"_id":"public/2018/01/17/wget命令/index.html","hash":"eb67198a62ddcb89e21548f23f3d35cfc396e317","modified":1629443853233},{"_id":"public/2018/01/11/DNS原理及其解析过程/index.html","hash":"9aa0d2c5ed8894398ec20893ea8dabe81f8b64ce","modified":1629443853233},{"_id":"public/2018/01/11/域名解析中A记录、CNAME、MX记录、NS记录的区别和联系/index.html","hash":"465d4ce19e16c061fa088e1c2da18ccc1cf869c3","modified":1629443853234},{"_id":"public/2018/01/11/centos-安装-dig/index.html","hash":"2344da431d76c3e57bb19966d2e41f860d7edf3a","modified":1629443853234},{"_id":"public/2018/01/10/nodejs项目缓存策略/index.html","hash":"a57009aeb88d980b6a4138e8d25e235a63062d22","modified":1629443853234},{"_id":"public/2018/01/10/dnsmasq.conf 配置/index.html","hash":"c3c8ad88f8aad9964023b708eabadd8d0d9eec85","modified":1629443853234},{"_id":"public/2018/01/10/Dnsmasq 安装配置/index.html","hash":"2830cceb996f024c8005f0d9f33dcecba8eaa348","modified":1629443853234},{"_id":"public/2018/01/07/dnsmasq官方文档/index.html","hash":"a4bb0d84fc5f341493dbff524d07d329c19b4dca","modified":1629443853234},{"_id":"public/2018/01/02/mkdir-用法/index.html","hash":"e3e2e0af93bc78137167dff5ee2cfb5c0a6a1649","modified":1629443853234},{"_id":"public/2017/12/31/Let-s-Encrypt：用免费的-SSL-证书，让网站支持-HTTPS/index.html","hash":"e95578a8b7f8cb42814b2751144178b612a30ce8","modified":1629443853235},{"_id":"public/2017/12/26/nvm-切换node版本/index.html","hash":"9969ee855d07789e1c559df9315dc55d6be8a5a7","modified":1629443853235},{"_id":"public/2017/12/26/Linux-网络速度测试工具/index.html","hash":"4c59a7840dd184748af99d416fbe87f03c8b5df1","modified":1629443853235},{"_id":"public/2017/12/04/centos7-安装nvm/index.html","hash":"20364e2c6b56eff58088eaee3037d0f2128aa0db","modified":1629443853235},{"_id":"public/2017/11/24/在 CentOS 7 下安装配置 shadowsocks/index.html","hash":"df79171fa9cdd0b63b6af0cf7f01650f18188a85","modified":1629443853235},{"_id":"public/2017/11/01/koajs框架下创建二维码生成服务/index.html","hash":"0a765bb86773e503f003696bb42c7be20a6bbbe9","modified":1629443853235},{"_id":"public/2017/10/27/JavaScript判断知否支持h5-video标签/index.html","hash":"eceddcf94d78b040825f1beb710765e865376c8c","modified":1629443853236},{"_id":"public/2017/10/13/每天读一遍，不就你就会有改变/index.html","hash":"4aa2c0555e6e274bd7903d529873f51e6e6124fa","modified":1629443853236},{"_id":"public/2017/10/13/留不住的心就让他飞吧/index.html","hash":"22257953209877974ab4a9634c997f39d3fa4de4","modified":1629443853236},{"_id":"public/2017/10/13/每个人都背负这一个十字架/index.html","hash":"f117f1e9feb94fb95dde75775447f01de366f9d4","modified":1629443853236},{"_id":"public/2017/10/13/马云团队/index.html","hash":"845863b0d4d2cc2cfbeda233c369dfd3d43cda67","modified":1629443853236},{"_id":"public/2017/10/12/20171012工作日记/index.html","hash":"1883bfcfa3d0c3d8cc154ae77e82530ab5e6adbd","modified":1629443853236},{"_id":"public/2017/10/10/nodejs-redis-doc/index.html","hash":"30670fa3c58d3f23a2ef4bbd63c55586427facbe","modified":1629443853236},{"_id":"public/2017/10/10/centos6.7 安装 redis并配置开机启动/index.html","hash":"28f4d528cd5a135d021bf550a8729ac0b02fa11d","modified":1629443853237},{"_id":"public/2017/10/10/centos7 安装 redis并配置开机启动/index.html","hash":"858896a8179e6c8e3ddd39fa97a3c2b18eb150a8","modified":1629443853237},{"_id":"public/2017/10/10/nodejs+redis应用/index.html","hash":"8baab75a6b839e62d55dbb935aedd7faa77180ac","modified":1629443853237},{"_id":"public/2017/10/09/高性能网站性能进阶指南-笔记/index.html","hash":"91e1d798d7743e6f1e9972bcb08249a9d8fbf639","modified":1629443853237},{"_id":"public/2017/10/09/被遗忘的Logrotate/index.html","hash":"e2c8726e2695ba39ee46cb920df4192a29cc622d","modified":1629443853238},{"_id":"public/2017/10/09/chown命令/index.html","hash":"73926d2f1a14ffaf5fbdf8c255dd802309b41e90","modified":1629443853238},{"_id":"public/2017/09/22/npm使用淘宝镜像/index.html","hash":"72972be2bda2217490cff843dd6cee6f97ee7906","modified":1629443853238},{"_id":"public/2017/09/02/Rewrite功能的配置（1）/index.html","hash":"f907fc0ad88f7278d45850b6dc00d31b5448aa3c","modified":1629443853238},{"_id":"public/2017/09/02/Nginx后端服务器组配置的5个指令/index.html","hash":"2e8d5bb1a8c6ad600997f88c3d53db542a44080f","modified":1629443853238},{"_id":"public/2017/08/27/设置网站的错误页面/index.html","hash":"a33cb2c0c0b5e1348c899d6f86f2092821c31072","modified":1629443853238},{"_id":"public/2017/08/27/设置网站的默认首页/index.html","hash":"f556d056fbb48ce2830bf2a5642b2d22e22df60e","modified":1629443853238},{"_id":"public/2017/08/27/更改location的URI/index.html","hash":"0518fd262923e628d3c1f08f886ea74dd92a300a","modified":1629443853238},{"_id":"public/2017/08/27/配置请求的根目录/index.html","hash":"0cbdf2c09e6bdfa3b039848adb20ad7a0f8a3050","modified":1629443853239},{"_id":"public/2017/08/27/配置location块/index.html","hash":"1b9fbcf1e45b1f9aece3c94e42243a09c851f456","modified":1629443853239},{"_id":"public/2017/08/27/自定义服务日志/index.html","hash":"ffb8dd5bd7b214bdec9243a5eb43d913940f0902","modified":1629443853239},{"_id":"public/2017/08/27/配置最大连接数/index.html","hash":"29b681db57a0203f94acfb87f0f199ca29909e86","modified":1629443853239},{"_id":"public/2017/08/27/配置允许生成的worker-process数/index.html","hash":"92c6185cc014abfab610c4137dd2bf3dc9b71a52","modified":1629443853239},{"_id":"public/2017/08/27/升级Jenkins方法/index.html","hash":"ba88b7ddb9e820ea40cf7c191dbfc2784e7309a1","modified":1629443853239},{"_id":"public/2017/08/26/配置运行Nginx服务用户（组）/index.html","hash":"7040ab863ebac36f49698ed82cfea2431d84035b","modified":1629443853239},{"_id":"public/2017/08/26/虚拟服务器/index.html","hash":"364e745052079a3b47671351295a566de73d4a35","modified":1629443853239},{"_id":"public/2017/07/20/网页中常见的错误码/index.html","hash":"a258c42750b66db2935e7765f129692fd0a60077","modified":1629443853239},{"_id":"public/2017/07/19/CPU时间片/index.html","hash":"39c50e7787e3f7d031735991858322e93ed4dd2b","modified":1629443853240},{"_id":"public/archives/index.html","hash":"d2f8c8cdda6e4a95c2bb852b03d2b6ce5339324b","modified":1635246065031},{"_id":"public/archives/page/2/index.html","hash":"75020070d14262e29f72c013e312ca19aafe75e0","modified":1635246065031},{"_id":"public/archives/page/3/index.html","hash":"ed8893471fa9e34222b112d16b7c7d1c98f75399","modified":1635246065031},{"_id":"public/archives/page/4/index.html","hash":"7d6c791618960ddb0f708927954f0db3caaab22d","modified":1635246065031},{"_id":"public/archives/page/5/index.html","hash":"869d3cb4a51377344dce404359c115425813e06b","modified":1635246065031},{"_id":"public/archives/page/6/index.html","hash":"5ca49464d55f39513a53225b2eed7a701e34fd66","modified":1635246065031},{"_id":"public/archives/page/7/index.html","hash":"19f8270d51bab2613d8ecab57431aae124e60b16","modified":1635246065032},{"_id":"public/archives/page/8/index.html","hash":"1155ae4cff66c85dd308214dfd2f1d3205439ef4","modified":1635246065032},{"_id":"public/archives/page/9/index.html","hash":"8fa6c94a4556e223344f2a8fdcc61c53f0dbb9fb","modified":1635246065033},{"_id":"public/archives/page/10/index.html","hash":"6aa225ced0fd394f0a3b2c9f3376e413da9ced06","modified":1635246065032},{"_id":"public/archives/page/11/index.html","hash":"51dbad2d8456fdc3d7bd9d996546150903c1a2b9","modified":1635246065032},{"_id":"public/archives/page/12/index.html","hash":"5778352e5abb9b72b79a0a34443f76a1287a7aec","modified":1635246065032},{"_id":"public/archives/page/13/index.html","hash":"5e7fde23a66d677f9f7f73799aa6a41efb72d138","modified":1635246065032},{"_id":"public/archives/page/14/index.html","hash":"da5abf56b83a499bf5db76a6228e1b6c443fc977","modified":1635246065033},{"_id":"public/archives/2017/index.html","hash":"b19151dc42cf557c28fca4e2aaf4be2f1277c3ab","modified":1629443853245},{"_id":"public/archives/2017/page/2/index.html","hash":"92823c525fc4376e42b7d07ba05410def74c7eba","modified":1629443853245},{"_id":"public/archives/2017/page/3/index.html","hash":"12bd3bb68e34a0a310456372b015e47a4be95b07","modified":1629443853245},{"_id":"public/archives/2017/page/4/index.html","hash":"522ec51e5c9ba93d1708772341c3a040257560b6","modified":1629443853245},{"_id":"public/archives/2017/07/index.html","hash":"8375e18873fd6c1eb8f754e798589fc16ced1375","modified":1629443853245},{"_id":"public/archives/2017/08/index.html","hash":"9e4f64df1c769e53e588d684bcf54bdd56eb75e3","modified":1629443853245},{"_id":"public/archives/2017/08/page/2/index.html","hash":"efb985a1bcb301b966cb427ce9de0d16688bb16f","modified":1629443853246},{"_id":"public/archives/2017/09/index.html","hash":"7b7cc09fae02c4e90243143fc792c91d3f3a5f4c","modified":1629443853246},{"_id":"public/archives/2017/10/index.html","hash":"2f82c4afe9a8405b72f2945c901b08b5b2cafbe6","modified":1629443853246},{"_id":"public/archives/2017/11/index.html","hash":"51f0364c387bdc67285799e713aac473cbb7fd66","modified":1629443853246},{"_id":"public/archives/2017/10/page/2/index.html","hash":"3d88e5987499316fc52b6eb17e1c6ecba2cd2dae","modified":1629443853246},{"_id":"public/archives/2018/index.html","hash":"f866d5eaa15f92618582f3b7d6b5803e6ec276a6","modified":1629443853246},{"_id":"public/archives/2017/12/index.html","hash":"31b2a5390a42efa05efe7fb8e09de4d07a984415","modified":1629443853246},{"_id":"public/archives/2018/page/2/index.html","hash":"2028eced1cd245c8d371aca9637a87b6e8aa47d2","modified":1629443853247},{"_id":"public/archives/2018/page/3/index.html","hash":"3b057f64ddb0d6295aa49d7dc97fa06ab1ca7843","modified":1629443853247},{"_id":"public/archives/2018/page/4/index.html","hash":"22fccc7cefaf66eb53fb8d3972c877b76a3bc88a","modified":1629443853247},{"_id":"public/archives/2018/01/index.html","hash":"9789810851d347648c5d0a35110c7f6854170529","modified":1629443853247},{"_id":"public/archives/2018/01/page/2/index.html","hash":"1821721d7f1e618f75fe3702ab0f65c6068ce631","modified":1629443853247},{"_id":"public/archives/2018/02/index.html","hash":"0cd342fd365b7a1c97edf441d955b110d97951f2","modified":1629443853248},{"_id":"public/archives/2018/03/index.html","hash":"a3fe6c77c572fd73e1f7bb486f15ee1deba54134","modified":1629443853248},{"_id":"public/archives/2018/04/index.html","hash":"46f6826200b68d62c505ce51866f96db4e21c239","modified":1629443853248},{"_id":"public/archives/2018/06/index.html","hash":"c8665d9caf2f96251b48393fccc9a061dfebb832","modified":1629443853248},{"_id":"public/archives/2019/index.html","hash":"fc8244c092f8475c34d1e8eba582a5082b361047","modified":1629443853248},{"_id":"public/archives/2018/07/index.html","hash":"d13739023d56685a22fe7c4b429f20c87f93495c","modified":1629443853248},{"_id":"public/archives/2019/page/2/index.html","hash":"3d96487b2e18a453b88deadda070daa70571716d","modified":1629443853249},{"_id":"public/archives/2019/page/3/index.html","hash":"246836640778d8f1d634a039caf7bf882d406c84","modified":1629443853249},{"_id":"public/archives/2019/page/4/index.html","hash":"80bcf97b73087b22223174790a71226c91b5ebd3","modified":1629443853249},{"_id":"public/archives/2019/page/5/index.html","hash":"98c635a9cb6f6b6963b3bda4b876370b8650723f","modified":1629443853249},{"_id":"public/archives/2019/01/index.html","hash":"d0385131fd6391329f98bc7d717fe7552c720536","modified":1629443853249},{"_id":"public/archives/2019/03/index.html","hash":"c7bba7a63922d76085ba4ef9b3fc3b0bf7883a61","modified":1629443853249},{"_id":"public/archives/2019/04/index.html","hash":"e9d634f6bf2d16c836d15504a3341ae4a4b09621","modified":1629443853250},{"_id":"public/archives/2019/05/index.html","hash":"b66d22e75ffc2de2febdfb206321e2453fd8f991","modified":1629443853250},{"_id":"public/archives/2019/06/index.html","hash":"11af0bd454d81d86c17cd14596151a79f69b5463","modified":1629443853250},{"_id":"public/archives/2019/07/index.html","hash":"899c4a39579b1dc1de96f418973ee523fbb192a3","modified":1629443853250},{"_id":"public/archives/2019/08/index.html","hash":"2b4bc1ba6281354f25a46bda97cf56a809eaaadb","modified":1629443853250},{"_id":"public/archives/2019/09/index.html","hash":"fc094cc11e1629ce8bb6a610a9b5431e17f29206","modified":1629443853250},{"_id":"public/archives/2019/11/index.html","hash":"64df3a0745ebb6b0990ffae37828efdd426db8bf","modified":1629443853251},{"_id":"public/archives/2019/12/index.html","hash":"450b228fe0d9a3e2fa6825b39e93173485539692","modified":1629443853251},{"_id":"public/archives/2020/index.html","hash":"71a951b352afc8459f41dd238050499e1104df39","modified":1629443853251},{"_id":"public/archives/2020/07/index.html","hash":"57bdffb239b088937087ed6c35cef683725d5c94","modified":1629443853252},{"_id":"public/archives/2020/08/index.html","hash":"9c0590c28588888bf90f46b6cfe3ec520cf506f6","modified":1629443853252},{"_id":"public/archives/2020/10/index.html","hash":"69d8aa9d7f40ee32b8533b8c8924bf61bdfefe71","modified":1629443853252},{"_id":"public/archives/2021/index.html","hash":"459c4bb2856e50b180e4d39cbef6f2454132a6e4","modified":1635246065033},{"_id":"public/archives/2021/03/index.html","hash":"36a2aff23c96d37ea46f77f55baf1eaf907fdc87","modified":1629443853253},{"_id":"public/categories/Web开发/index.html","hash":"a72e4c7d833388f28a6dfbd65d0219ba50a94ff7","modified":1635246065030},{"_id":"public/categories/Web开发/page/2/index.html","hash":"22a0e75e5195a40fdf81752fe7b82afefbb10ab8","modified":1635246065030},{"_id":"public/categories/Web开发/page/3/index.html","hash":"cbc58d86333facefca3faf6a5c93fa14a179939d","modified":1635246065030},{"_id":"public/categories/Web开发/page/4/index.html","hash":"0f35f23faae3ca2c100b509304f1ec9bd6b32fae","modified":1635246065030},{"_id":"public/categories/Web开发/page/5/index.html","hash":"67d7ad1294c25735d1b50f466e5ba569f34d3516","modified":1635246065030},{"_id":"public/categories/项目总结/index.html","hash":"f31938f0d5845964b164459e840e79fdf9ab0428","modified":1629443853241},{"_id":"public/categories/项目总结/page/2/index.html","hash":"fe6a7c30ed3ad1c39aa1dc07c567856378d8d533","modified":1629443853241},{"_id":"public/categories/移动开发/index.html","hash":"3759e1bd70e947d4d7f7685f38f880b6f1475bb8","modified":1629443853241},{"_id":"public/categories/H5开发/index.html","hash":"84859908e1f750d9159a557dcbbba845bcfc580f","modified":1629443853241},{"_id":"public/categories/Web开发/性能优化/index.html","hash":"2a2373aaf475577c79b966badd25b5dcb756791c","modified":1629443853241},{"_id":"public/categories/后端开发/index.html","hash":"dbe7f4e00361b7ead29a2d6ffb638baad8f94d1f","modified":1629443853241},{"_id":"public/categories/后端开发/page/2/index.html","hash":"ba89e07b4d3aa96089b3a50b95ef233f74ccb3f5","modified":1629443853241},{"_id":"public/categories/后端开发/page/3/index.html","hash":"557f102b59453989d59e33794858db51e3517f08","modified":1629443853241},{"_id":"public/categories/后端开发/page/4/index.html","hash":"acdba51459181a308e62ee41361a73792dd355bd","modified":1629443853242},{"_id":"public/categories/后端开发/page/5/index.html","hash":"42db648cc1f09902ba62c9ad175342c068f0c808","modified":1629443853242},{"_id":"public/categories/H5开发/Web开发/index.html","hash":"da873c3572a3c79b2fb92593e3f7b99fe33093bf","modified":1629443853242},{"_id":"public/categories/NodeJS/index.html","hash":"7febc11b6407fa7020d9efd830e4e81585e75b85","modified":1629443853242},{"_id":"public/categories/NodeJS/page/2/index.html","hash":"3e45072e1bd6a0d70893fa63850acfdcbb40b6ad","modified":1629443853242},{"_id":"public/categories/生活玩乐/index.html","hash":"a76aa09f6cb99443450c850ab45c7378fcd5065d","modified":1629443853242},{"_id":"public/categories/移动开发/Web开发/index.html","hash":"eb4a8856ee29139b1eee52c740a31ce7b7cf97ee","modified":1629443853242},{"_id":"public/categories/移动开发/H5开发/index.html","hash":"f8cfde45bc72f37be7f6ef381113e63575223a7b","modified":1629443853242},{"_id":"public/categories/性能优化/index.html","hash":"36c41e556ccc016ebd53e287f19ce939be5c0390","modified":1629443853243},{"_id":"public/index.html","hash":"4f6918898a44be390682b99274b1c877ab56505e","modified":1635246065034},{"_id":"public/page/2/index.html","hash":"7b93185744b894b1fde692bd9af99a096861ed9d","modified":1635246065034},{"_id":"public/page/3/index.html","hash":"d1eb0fd6a6fec9baf144e38958148f81fb1970c5","modified":1635246065034},{"_id":"public/page/4/index.html","hash":"ca40b31f4336230ac77ea6c5cf9f75eb111e2307","modified":1635246065035},{"_id":"public/page/5/index.html","hash":"88ece2a26e85e3d05ca187ba4d3bd056c99be277","modified":1635246065035},{"_id":"public/page/6/index.html","hash":"f53841edcdbdb39fd1c8580cc59253eb67475113","modified":1635246065035},{"_id":"public/page/7/index.html","hash":"32455862d0bbc8394473fd9b149969ada09aea4e","modified":1635246065035},{"_id":"public/page/8/index.html","hash":"8e5e19143d9f28234525ebd10ed0f84dd3b08ca4","modified":1635246065035},{"_id":"public/page/9/index.html","hash":"fb3cc4a6e31e23877d94e4c6e773c313855d2783","modified":1635246065035},{"_id":"public/page/10/index.html","hash":"fd0fc5f9f55c8f058469e502fdf02de1351e1b70","modified":1635246065036},{"_id":"public/page/11/index.html","hash":"9bb6f63e4f3ee8e207fca376ebdb76d06e23bafd","modified":1635246065036},{"_id":"public/page/12/index.html","hash":"38b3da31d3a900f18be280593f4d31d8199acd05","modified":1635246065036},{"_id":"public/page/13/index.html","hash":"e20285673ca042606492484cfeef7fe64841a1cc","modified":1635246065036},{"_id":"public/page/14/index.html","hash":"4f15443fc08b120adc91c1da784a95f5d64168ff","modified":1635246065036},{"_id":"public/tags/知识点备忘/index.html","hash":"f2d8d710edcb3eab57b3301de192b1e36ad92fe6","modified":1634801092345},{"_id":"public/tags/知识点备忘/page/2/index.html","hash":"cb7e2e9128c965d2719af57d32d7c9a4c4d78bd7","modified":1634801092345},{"_id":"public/tags/知识点备忘/page/3/index.html","hash":"c7a5de30b64ea75cb82da5706e56209765c4fc23","modified":1634801092345},{"_id":"public/tags/nginx/index.html","hash":"b91ed0b0e470f22d04588ac796e1dfe00e864ec8","modified":1629443853257},{"_id":"public/tags/nginx/page/2/index.html","hash":"102ec0bfffc5af2fad149b0c78daa8279e52bcbc","modified":1629443853258},{"_id":"public/tags/apicloud/index.html","hash":"4dcb7725585eb4b90c100c889478f8558e5d092d","modified":1629443853258},{"_id":"public/tags/vue/index.html","hash":"76d7bfc323231af2f47934a7736f22ffe08b499b","modified":1629443853258},{"_id":"public/tags/javascript/index.html","hash":"1756cd0a6710b16402d05f1fa5232cc0bc4d46bc","modified":1629443853258},{"_id":"public/tags/javascript/page/2/index.html","hash":"e681e2c5e5dd2a9c29eeaf358ff9c80050bbe107","modified":1629443853258},{"_id":"public/tags/Web开发/index.html","hash":"ebece9fdde863bc7165a3f9df6cac1b971720eba","modified":1634107466007},{"_id":"public/tags/计划/index.html","hash":"fd71a56e34612ddba0b51569b6f70a8e378f4cd8","modified":1629443853258},{"_id":"public/tags/微前端/index.html","hash":"d1f4b46c0aaed742412c37b10154756116a8fa89","modified":1629443853258},{"_id":"public/tags/运维/index.html","hash":"dabc17735ec8a82020a6b34f346cf017059dc897","modified":1629443853259},{"_id":"public/tags/git迁移/index.html","hash":"5deb2eb6864cf222a2611bdec495cd1c435e37c7","modified":1629443853259},{"_id":"public/tags/基本知识/index.html","hash":"f26eb72f7445185bd177e4565dca592e0811945f","modified":1629443853259},{"_id":"public/tags/jenkins/index.html","hash":"7c31198a5738cd0f5275a56a4bacd42b3426aa3a","modified":1629443853259},{"_id":"public/tags/广告/index.html","hash":"5c6a5d872d20297e870cfbb133b44cfd008ee2c2","modified":1629443853259},{"_id":"public/tags/linux/index.html","hash":"d5dd011abec65cd180b4b0a83b57e08e0a109f9b","modified":1632894977216},{"_id":"public/tags/linux/page/2/index.html","hash":"534668fa09e29418e1117d46c0939799a57c0ca6","modified":1632894977216},{"_id":"public/tags/mysql/index.html","hash":"c11edb32183628373cdc718a74f088aa4e4e7ab7","modified":1629443853259},{"_id":"public/tags/域名/index.html","hash":"d830c67f7171b5e5769f030200656ba5e843e237","modified":1629443853260},{"_id":"public/tags/PWA/index.html","hash":"7363eed866a0f512047a1730a65695a2c67495d5","modified":1629443853260},{"_id":"public/tags/java/index.html","hash":"7f991a2cdf95dcd78ece741f7ae1e718569b5872","modified":1629443853260},{"_id":"public/tags/nodejs/index.html","hash":"3f4ff312d4d36b0fcc439cea345374e1633e0660","modified":1629443853260},{"_id":"public/tags/redis/index.html","hash":"167ebe5853102a42e04f6815f991fb83cffe2d1c","modified":1629443853260},{"_id":"public/tags/electron/index.html","hash":"f6baa536b27edadc63874a51fd85e9c046027b93","modified":1629443853260},{"_id":"public/tags/pomelo/index.html","hash":"a62d929e8165dbbefa90ab24591ba90064a5919a","modified":1629443853261},{"_id":"public/tags/vagrant/index.html","hash":"566cc3651a49065d87666cec24856fa3735c4c37","modified":1629443853261},{"_id":"public/tags/意义/index.html","hash":"975f7e062074c465d3287799ecfbe9f8f91dc83d","modified":1629443853261},{"_id":"public/tags/websocket/index.html","hash":"425750c8ac708c2a0da31203ea79f69b3d79205d","modified":1629443853261},{"_id":"public/tags/全景/index.html","hash":"354c9a5c62b6b14161befd7e556327161bb04835","modified":1629443853261},{"_id":"public/tags/开发调试/index.html","hash":"e6d1c25195398fb9fe95049d3d4a0abbac0e0e2e","modified":1635246065037},{"_id":"public/tags/docker/index.html","hash":"1f8b38f928a1fe5574deb47c3b0d924738e0edf6","modified":1629443853261},{"_id":"public/tags/科学上网/index.html","hash":"ea90c30660a2d994fc387bec8659c08c5e6d4381","modified":1629443853262},{"_id":"public/tags/plan/index.html","hash":"abc96fbe3e75626e439aae6db20a294767b05c95","modified":1629443853262},{"_id":"public/tags/UML/index.html","hash":"32539897cd6e7965d1ebe66b97a7571f00923c8e","modified":1629443853262},{"_id":"public/CNAME","hash":"908d3d2462b08908c37439643c95193df6b2f969","modified":1620286916531},{"_id":"public/LYPxXuPqse.txt","hash":"20f4a810de14ff5b6fc3deba105d0ee7e9e603cf","modified":1620286916531},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1620286916531},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"a5e9fe67e0604c24279281d9fdd2ce1f4536d3e5","modified":1620286916531},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1620286916531},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1620286916531},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1620286916531},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1620286916531},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1620286916531},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1620286916531},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1620286916531},{"_id":"public/assets/img/favicon.png","hash":"01c39180f2afc68b5e801f95a0b2fb4f0272cb0a","modified":1620286916531},{"_id":"public/assets/img/head.jpeg","hash":"48e38533b47bebb7e37412c43ac769d97e5ad68c","modified":1620286916532},{"_id":"public/assets/img/alipay.jpg","hash":"329b84bba584d559a644be593752160540eab3ef","modified":1620286916535},{"_id":"public/assets/img/wxpay.jpg","hash":"b4f20b97db937642f71776de1c83490b70f8970e","modified":1620286916536},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1620286916537},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1620286916537},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1620286916537},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1620286916537},{"_id":"source/_posts/微前端架构下腾讯云K8S的部署方式.md","hash":"682de88d1b18d432c4ad6cee9ccfdae98ddaa12e","modified":1620292382705},{"_id":"public/2021/05/06/微前端架构下腾讯云K8S的部署方式/index.html","hash":"0d65640a8e8b4d562696da7043b401243947b255","modified":1629443853180},{"_id":"public/archives/2021/05/index.html","hash":"57d924b55d0c1e4434130a71691d178637e6491c","modified":1629443853253},{"_id":"source/_posts/公共组件库实施.md","hash":"e2fc347e01c13fb449ea04d62b6fabd9141b64ca","modified":1620376538138},{"_id":"public/2021/05/07/公共组件库实施/index.html","hash":"739c984fbd14aef150093f0513979da5bd98d322","modified":1629443853180},{"_id":"source/_posts/当我们遇到一个需求不明确，高度定制化的需求的时候～.md","hash":"289d8fec27b9537cd06f2f0cb3da13729e9a001e","modified":1621912301278},{"_id":"public/2021/05/25/当我们遇到一个需求不明确，高度定制化的需求的时候～/index.html","hash":"1b811e93cc138512254f3c121d165b5da21c9d33","modified":1629443853180},{"_id":"source/_posts/vue单页面项目返回上一页无效，链接变化了，但是页面没有变化.md","hash":"a7e3a0648ea115f252458f7ae79b9757948c11a6","modified":1624114633825},{"_id":"public/2021/06/19/vue单页面项目返回上一页无效，链接变化了，但是页面没有变化/index.html","hash":"87f957889c0789e99dc86df47338852d89d8b1e8","modified":1629443853180},{"_id":"public/archives/2021/06/index.html","hash":"cb879633c472c72c77b82e2f33574e293c2db3aa","modified":1629443853253},{"_id":"source/_posts/useless-files-webpack-plugin删除多余项目文件.md","hash":"95586269fc3f24980e0358e2e9dc96c3353950a9","modified":1625111709152},{"_id":"public/2021/07/01/useless-files-webpack-plugin删除多余项目文件/index.html","hash":"c06ffc920e36defe1d3400aec9e4dc569fe1386d","modified":1629443853179},{"_id":"public/archives/2021/07/index.html","hash":"dfe6ba8a1fad0c3bb2d8e824892596d6333feaa6","modified":1629443853254},{"_id":"source/_posts/如何通过容器创建镜像-创建符合需求的打包镜像.md","hash":"0875bf83bdf019f72acce82815c68ea669ac87d9","modified":1626243575351},{"_id":"public/2021/07/14/如何通过容器创建镜像-创建符合需求的打包镜像/index.html","hash":"e6893a1270d2032e8cdf9e4c464c636e608429fa","modified":1629443853179},{"_id":"source/_posts/老板的话～可以被奉为经典的话.md","hash":"b00109cfab975a2af07429d77383cd4f3af91222","modified":1626243554268},{"_id":"public/2021/07/14/老板的话～可以被奉为经典的话/index.html","hash":"08caa306c144f9371b0946614a7cfc7e135e5f1d","modified":1630917346775},{"_id":"public/categories/Web开发/page/6/index.html","hash":"533d2c748a8399c1b5ed71f1b4678f9cb08b9597","modified":1635246065031},{"_id":"source/_posts/开发排期及开发过程的一些思考.md","hash":"b065d1a0165394e11a2e9d39f97de7de301aea42","modified":1630917333385},{"_id":"public/2021/09/06/开发排期及开发过程的一些思考/index.html","hash":"3c542919fb15bc476716ff3ba9550bcc14954224","modified":1631850415534},{"_id":"public/archives/page/15/index.html","hash":"3b8930dcde54d511aa0401effd823a543e71a88a","modified":1635246065033},{"_id":"public/archives/2021/page/2/index.html","hash":"03a23e1f73eb7fd443a361d779a8d4bb1e18c6da","modified":1635246065034},{"_id":"public/archives/2021/09/index.html","hash":"2d98abab096e583ca53b22a399b6e26bfb8d5bc5","modified":1632894977221},{"_id":"public/page/15/index.html","hash":"7ad1d938d78809fb35141043778db84a2e8080c1","modified":1635246065036},{"_id":"public/categories/Web开发/项目总结/index.html","hash":"68bb55decb4074dff2b37625e863060bf77d4cc1","modified":1630917348401},{"_id":"source/_posts/Cypress端到端自动化测试学习笔记.md","hash":"a6f99e88d044bdcf1f5e09716bc841f2de2f2ac6","modified":1631850404502},{"_id":"public/2021/09/17/Cypress端到端自动化测试学习笔记/index.html","hash":"68f17a20f6439246049563d741d2e33018b4a5de","modified":1631856712312},{"_id":"public/categories/自动化测试/index.html","hash":"1fa183ba289148579ccd434fd9ace3e855e7b765","modified":1631861538852},{"_id":"source/_posts/Cypress-页面元素基本操作方式.md","hash":"76a1f6d724ba40178a3cb3ee7e114669fa4f334e","modified":1631852874238},{"_id":"source/_posts/Cypress-获取table内容动态tr和td.md","hash":"82688dbc1572191576d457ff11fcdb9197519a1f","modified":1631855372917},{"_id":"source/_posts/Cypress-元素定位.md","hash":"ab7f196a413425bdecae09c34e8eee05959cf4f6","modified":1631853214523},{"_id":"public/2021/09/17/Cypress-获取table内容动态tr和td/index.html","hash":"6fe2ef81e09df79ba24a22583c6ef99d15db9a80","modified":1631861538852},{"_id":"public/2021/09/17/Cypress-页面元素基本操作方式/index.html","hash":"b3079b62beba4cd57a22c1d0b40b7e2b39347bd6","modified":1631856713705},{"_id":"public/2021/09/17/Cypress-元素定位/index.html","hash":"c21f3c87ae5598412f1774fdc1ca1adc69aa82ad","modified":1631856713720},{"_id":"public/tags/Web开发/page/2/index.html","hash":"4919356bbf6fa5b3d044bc79a5b4213d6b066c04","modified":1634107466007},{"_id":"source/_posts/Cypress-常见操作.md","hash":"975d99e081e71802a78c26b50276732d30c1ed12","modified":1632292866149},{"_id":"source/_posts/Cypress-可操作事件.md","hash":"e1acd15206ac4cc74c1388af5254620e99d5c50e","modified":1632292806266},{"_id":"source/_posts/Cypress执行测试并邮寄发送测试报告.md","hash":"e8929c72062855c840529012241f7392331526d2","modified":1631857009927},{"_id":"source/_posts/Cypress测试断言的使用.md","hash":"83e0140a5d57c9779851eee9d682d458759e8ef9","modified":1631859155574},{"_id":"source/_posts/Cypress录制自动化脚本.md","hash":"1a583f41b34ee1ddaf9dd40394fe9ca5f0d5ff43","modified":1632281252065},{"_id":"source/_posts/Cypress测试用例的编写学习笔记.md","hash":"7ba4689f812e8034ba81bb5b26e32f6f4ad53740","modified":1631860177847},{"_id":"source/_posts/cypress-自动化测试（文件上传）.md","hash":"40ca4479c35a082124eddbbeb274cb53681a3c03","modified":1631861524841},{"_id":"public/2021/09/17/Cypress测试用例的编写学习笔记/index.html","hash":"9dde92fd0fc4771fd994da587135460ecf7540e2","modified":1631861538986},{"_id":"public/2021/09/17/Cypress测试断言的使用/index.html","hash":"29c04922e25745dd12b46686b4197345af8d8d4b","modified":1631861538986},{"_id":"public/2021/09/17/Cypress录制自动化脚本/index.html","hash":"f12d666dd9f816c1b4b45db1fb9f3460bb709bfd","modified":1632281262968},{"_id":"public/2021/09/17/cypress-自动化测试（文件上传）/index.html","hash":"16a94981ca7be307a05783fc671b2a5548e94f70","modified":1632894975092},{"_id":"public/2021/09/17/Cypress-可操作事件/index.html","hash":"8b9972b1dfbc509d906a12d3f9fbbb4691bd5178","modified":1632292819536},{"_id":"public/2021/09/17/Cypress执行测试并邮寄发送测试报告/index.html","hash":"485dff6201d37bad408c7d50c86bf5583dda0596","modified":1631861538986},{"_id":"public/2021/09/17/Cypress-常见操作/index.html","hash":"cbe623fefdfb5a8cbd25bbf812e4238a27b8fc57","modified":1632292880282},{"_id":"public/categories/自动化测试/page/2/index.html","hash":"5135296eed58143e0f688caf1952e0605e36b6af","modified":1631861538987},{"_id":"public/archives/page/16/index.html","hash":"47443dfdfbff9c0c287743b20359e5f6b9ee8147","modified":1635246065033},{"_id":"public/archives/2021/page/3/index.html","hash":"bf69762a85274f9cb46799ab6f8c824c39071a64","modified":1635246065034},{"_id":"public/archives/2021/09/page/2/index.html","hash":"b6dfafb7070dc52f3944727da7f602e8b07b0818","modified":1632894977221},{"_id":"public/page/16/index.html","hash":"5a7a7e1b002251dffd988114b1c2a9967ea1101b","modified":1635246065036},{"_id":"source/_posts/通过scp上传文件-文件夹到服务器.md","hash":"719f76e30e3f971e0bcf83843a833dbf8c310a4d","modified":1632894963473},{"_id":"public/2021/09/29/通过scp上传文件-文件夹到服务器/index.html","hash":"205eecd1b339677bf9e20e2c1510b48f6dd73dae","modified":1634107463313},{"_id":"source/_posts/VSCode-配置上传与下载.md","hash":"238554afb57088848aa99a8dedf80211dd734ea8","modified":1634107453753},{"_id":"public/2021/10/13/VSCode-配置上传与下载/index.html","hash":"6b58f45ac318c25143e2183d5477221996833264","modified":1634801089460},{"_id":"public/archives/2021/10/index.html","hash":"ed0026654e1778760d6267747c75bfd03385ac1b","modified":1635246065034},{"_id":"source/_posts/浅谈Vue中的虚拟DOM.md","hash":"187916bfb4ff78511a89cbbc0bc4cdfb1cb5a15d","modified":1634801076788},{"_id":"public/2021/10/21/浅谈Vue中的虚拟DOM/index.html","hash":"a97d5b2efa82cefa98ff352fea1d93e5b2928593","modified":1635246060943},{"_id":"public/tags/知识点备忘/page/4/index.html","hash":"fbbfc3ed4567ccd1d19b302da067dc4f9766cb82","modified":1634801092349},{"_id":"source/_posts/解决Electron-安装慢问题.md","hash":"32e9a653aa83f2888bc748f52fe8588a1790ecc0","modified":1635246050152},{"_id":"public/2021/10/26/解决Electron-安装慢问题/index.html","hash":"b35da836eb281bec37e9b38eb56610e5cad886b0","modified":1635246065029}],"Category":[{"name":"Web开发","_id":"ckockznw30002h5s64mesxmim"},{"name":"项目总结","_id":"ckockznwb0007h5s648ulx6wk"},{"name":"移动开发","_id":"ckockznwh000dh5s6d1tozxg4"},{"name":"H5开发","_id":"ckockznww000vh5s6doox1bqs"},{"name":"性能优化","parent":"ckockznw30002h5s64mesxmim","_id":"ckockznwy0013h5s69seti2lh"},{"name":"后端开发","_id":"ckockznx4001ch5s6teu9vbs0"},{"name":"Web开发","parent":"ckockznww000vh5s6doox1bqs","_id":"ckockznxa001kh5s6obf5aicu"},{"name":"NodeJS","_id":"ckockznxz002wh5s6xpbkrcw8"},{"name":"生活玩乐","_id":"ckockzo0a006wh5s69vqthxj4"},{"name":"Web开发","parent":"ckockznwh000dh5s6d1tozxg4","_id":"ckockzo13008ih5s6estkkb0m"},{"name":"H5开发","parent":"ckockznwh000dh5s6d1tozxg4","_id":"ckockzo1z00akh5s6g19vv8c6"},{"name":"性能优化","_id":"ckockzo2s00cbh5s6p0o3ryy7"},{"name":"项目总结","parent":"ckockznw30002h5s64mesxmim","_id":"ckt8e2rua0002xybsa7ijkbdy"},{"name":"自动化测试","_id":"cktntlocy0001vrfy60z25db3"}],"Data":[],"Page":[],"Post":[{"title":"10 分钟理解 BFC 原理","toc":false,"date":"2019-09-03T10:32:54.000Z","_content":"\n![image.png](http://blogimage.houjiyi.com/FrrAxLwA48BYSAzFn79bOmBnIvUX)\n\n## 一、常见定位方案\n在讲 BFC 之前，我们先来了解一下常见的定位方案，定位方案是控制元素的布局，有三种常见方案:\n\n普通流 (normal flow)\n\n> 在普通流中，元素按照其在 HTML 中的先后位置至上而下布局，在这个过程中，行内元素水平排列，直到当行被占满然后换行，块级元素则会被渲染为完整的一个新行，除非另外指定，否则所有元素默认都是普通流定位，也可以说，普通流中元素的位置由该元素在 HTML 文档中的位置决定。\n\n浮动 (float)\n> 在浮动布局中，元素首先按照普通流的位置出现，然后根据浮动的方向尽可能的向左边或右边偏移，其效果与印刷排版中的文本环绕相似。\n\n绝对定位 (absolute positioning)\n\n> 在绝对定位布局中，元素会整体脱离普通流，因此绝对定位元素不会对其兄弟元素造成影响，而元素具体的位置由绝对定位的坐标决定。\n\n<!-- more -->\n\n## 二、BFC 概念\nFormatting context(格式化上下文) 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。\n\n\n那么 BFC 是什么呢？\n\nBFC 即 Block Formatting Contexts (块级格式化上下文)，它属于上述定位方案的普通流。\n\n**具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 BFC 具有普通容器所没有的一些特性。**\n\n通俗一点来讲，可以把 BFC 理解为一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部。\n\n## 三、触发 BFC\n只要元素满足下面任一条件即可触发 BFC 特性：\n\n1. body 根元素\n2. 浮动元素：float 除 none 以外的值\n3. 绝对定位元素：position (absolute、fixed)\n4. display 为 inline-block、table-cells、flex\n5. overflow 除了 visible 以外的值 (hidden、auto、scroll)\n\n## 四、BFC 特性及应用\n1. 同一个 BFC 下外边距会发生折叠\n```html\n<head>\ndiv{\n    width: 100px;\n    height: 100px;\n    background: lightblue;\n    margin: 100px;\n}\n</head>\n<body>\n    <div></div>\n    <div></div>\n</body>\n\n```\n\n![image.png](http://blogimage.houjiyi.com/FoSbOQBFYy8WxJ0GdKxrMjZwU21j)\n\n从效果上看，因为两个 div 元素都处于同一个 BFC 容器下 (这里指 body 元素) 所以第一个 div 的下边距和第二个 div 的上边距发生了重叠，所以两个盒子之间距离只有 100px，而不是 200px。\n\n首先这不是 CSS 的 bug，我们可以理解为一种规范，如果想要避免外边距的重叠，可以将其放在不同的 BFC 容器中。\n\n```html\n<div class=\"container\">\n    <p></p>\n</div>\n<div class=\"container\">\n    <p></p>\n</div>\n.container {\n    overflow: hidden;\n}\np {\n    width: 100px;\n    height: 100px;\n    background: lightblue;\n    margin: 100px;\n}\n\n```\n\n这时候，两个盒子边距就变成了 200px \n![image.png](http://blogimage.houjiyi.com/Fj-eRazvvuqU8bfxCGh18Q4GuLgM)\n\n2. BFC 可以包含浮动的元素（清除浮动）\n我们都知道，浮动的元素会脱离普通文档流，来看下下面一个例子\n\n```html\n<div style=\"border: 1px solid #000;\">\n    <div style=\"width: 100px;height: 100px;background: #eee;float: left;\"></div>\n</div>\n\n```\n![image.png](http://blogimage.houjiyi.com/FpeiM_bvsKCpzDrl52pL1B1m2WK0)\n\n由于容器内元素浮动，脱离了文档流，所以容器只剩下 2px 的边距高度。如果使触发容器的 BFC，那么容器将会包裹着浮动元素。\n```html\n<div style=\"border: 1px solid #000;overflow: hidden\">\n    <div style=\"width: 100px;height: 100px;background: #eee;float: left;\"></div>\n</div>\n```\n\n效果如图：\n![image.png](http://blogimage.houjiyi.com/FpzQucYCs9ea4Pc9jLdHjXnfm-da)\n\n3. BFC 可以阻止元素被浮动元素覆盖\n先来看一个文字环绕效果：\n\n```html\n<div style=\"height: 100px;width: 100px;float: left;background: lightblue\">我是一个左浮动的元素</div>\n<div style=\"width: 200px; height: 200px;background: #eee\">我是一个没有设置浮动, \n也没有触发 BFC 元素, width: 200px; height:200px; background: #eee;</div>\n```\n![image.png](http://blogimage.houjiyi.com/Fjw89t5ZQxtJCM6J_EtL4wPk_yo_)\n\n这时候其实第二个元素有部分被浮动元素所覆盖，(但是文本信息不会被浮动元素所覆盖) 如果想避免元素被覆盖，可触第二个元素的 BFC 特性，在第二个元素中加入 overflow: hidden，就会变成：\n![image.png](http://blogimage.houjiyi.com/FqHnK0sHHu2WHbQU5ao0L6PnEbwn)\n\n这个方法可以用来实现两列自适应布局，效果不错，这时候左边的宽度固定，右边的内容自适应宽度(去掉上面右边内容的宽度)。\n","source":"_posts/10-分钟理解-BFC-原理.md","raw":"---\ntitle: 10 分钟理解 BFC 原理\ntags:\n  - 知识点备忘\ncategories:\n  - Web开发\ntoc: false\ndate: 2019-09-03 18:32:54\n---\n\n![image.png](http://blogimage.houjiyi.com/FrrAxLwA48BYSAzFn79bOmBnIvUX)\n\n## 一、常见定位方案\n在讲 BFC 之前，我们先来了解一下常见的定位方案，定位方案是控制元素的布局，有三种常见方案:\n\n普通流 (normal flow)\n\n> 在普通流中，元素按照其在 HTML 中的先后位置至上而下布局，在这个过程中，行内元素水平排列，直到当行被占满然后换行，块级元素则会被渲染为完整的一个新行，除非另外指定，否则所有元素默认都是普通流定位，也可以说，普通流中元素的位置由该元素在 HTML 文档中的位置决定。\n\n浮动 (float)\n> 在浮动布局中，元素首先按照普通流的位置出现，然后根据浮动的方向尽可能的向左边或右边偏移，其效果与印刷排版中的文本环绕相似。\n\n绝对定位 (absolute positioning)\n\n> 在绝对定位布局中，元素会整体脱离普通流，因此绝对定位元素不会对其兄弟元素造成影响，而元素具体的位置由绝对定位的坐标决定。\n\n<!-- more -->\n\n## 二、BFC 概念\nFormatting context(格式化上下文) 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。\n\n\n那么 BFC 是什么呢？\n\nBFC 即 Block Formatting Contexts (块级格式化上下文)，它属于上述定位方案的普通流。\n\n**具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 BFC 具有普通容器所没有的一些特性。**\n\n通俗一点来讲，可以把 BFC 理解为一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部。\n\n## 三、触发 BFC\n只要元素满足下面任一条件即可触发 BFC 特性：\n\n1. body 根元素\n2. 浮动元素：float 除 none 以外的值\n3. 绝对定位元素：position (absolute、fixed)\n4. display 为 inline-block、table-cells、flex\n5. overflow 除了 visible 以外的值 (hidden、auto、scroll)\n\n## 四、BFC 特性及应用\n1. 同一个 BFC 下外边距会发生折叠\n```html\n<head>\ndiv{\n    width: 100px;\n    height: 100px;\n    background: lightblue;\n    margin: 100px;\n}\n</head>\n<body>\n    <div></div>\n    <div></div>\n</body>\n\n```\n\n![image.png](http://blogimage.houjiyi.com/FoSbOQBFYy8WxJ0GdKxrMjZwU21j)\n\n从效果上看，因为两个 div 元素都处于同一个 BFC 容器下 (这里指 body 元素) 所以第一个 div 的下边距和第二个 div 的上边距发生了重叠，所以两个盒子之间距离只有 100px，而不是 200px。\n\n首先这不是 CSS 的 bug，我们可以理解为一种规范，如果想要避免外边距的重叠，可以将其放在不同的 BFC 容器中。\n\n```html\n<div class=\"container\">\n    <p></p>\n</div>\n<div class=\"container\">\n    <p></p>\n</div>\n.container {\n    overflow: hidden;\n}\np {\n    width: 100px;\n    height: 100px;\n    background: lightblue;\n    margin: 100px;\n}\n\n```\n\n这时候，两个盒子边距就变成了 200px \n![image.png](http://blogimage.houjiyi.com/Fj-eRazvvuqU8bfxCGh18Q4GuLgM)\n\n2. BFC 可以包含浮动的元素（清除浮动）\n我们都知道，浮动的元素会脱离普通文档流，来看下下面一个例子\n\n```html\n<div style=\"border: 1px solid #000;\">\n    <div style=\"width: 100px;height: 100px;background: #eee;float: left;\"></div>\n</div>\n\n```\n![image.png](http://blogimage.houjiyi.com/FpeiM_bvsKCpzDrl52pL1B1m2WK0)\n\n由于容器内元素浮动，脱离了文档流，所以容器只剩下 2px 的边距高度。如果使触发容器的 BFC，那么容器将会包裹着浮动元素。\n```html\n<div style=\"border: 1px solid #000;overflow: hidden\">\n    <div style=\"width: 100px;height: 100px;background: #eee;float: left;\"></div>\n</div>\n```\n\n效果如图：\n![image.png](http://blogimage.houjiyi.com/FpzQucYCs9ea4Pc9jLdHjXnfm-da)\n\n3. BFC 可以阻止元素被浮动元素覆盖\n先来看一个文字环绕效果：\n\n```html\n<div style=\"height: 100px;width: 100px;float: left;background: lightblue\">我是一个左浮动的元素</div>\n<div style=\"width: 200px; height: 200px;background: #eee\">我是一个没有设置浮动, \n也没有触发 BFC 元素, width: 200px; height:200px; background: #eee;</div>\n```\n![image.png](http://blogimage.houjiyi.com/Fjw89t5ZQxtJCM6J_EtL4wPk_yo_)\n\n这时候其实第二个元素有部分被浮动元素所覆盖，(但是文本信息不会被浮动元素所覆盖) 如果想避免元素被覆盖，可触第二个元素的 BFC 特性，在第二个元素中加入 overflow: hidden，就会变成：\n![image.png](http://blogimage.houjiyi.com/FqHnK0sHHu2WHbQU5ao0L6PnEbwn)\n\n这个方法可以用来实现两列自适应布局，效果不错，这时候左边的宽度固定，右边的内容自适应宽度(去掉上面右边内容的宽度)。\n","slug":"10-分钟理解-BFC-原理","published":1,"updated":"2019-11-07T02:13:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznvx0000h5s6ysyvcv2i","content":"<p><img src=\"http://blogimage.houjiyi.com/FrrAxLwA48BYSAzFn79bOmBnIvUX\" alt=\"image.png\"></p>\n<h2 id=\"一、常见定位方案\"><a href=\"#一、常见定位方案\" class=\"headerlink\" title=\"一、常见定位方案\"></a>一、常见定位方案</h2><p>在讲 BFC 之前，我们先来了解一下常见的定位方案，定位方案是控制元素的布局，有三种常见方案:</p>\n<p>普通流 (normal flow)</p>\n<blockquote>\n<p>在普通流中，元素按照其在 HTML 中的先后位置至上而下布局，在这个过程中，行内元素水平排列，直到当行被占满然后换行，块级元素则会被渲染为完整的一个新行，除非另外指定，否则所有元素默认都是普通流定位，也可以说，普通流中元素的位置由该元素在 HTML 文档中的位置决定。</p>\n</blockquote>\n<p>浮动 (float)</p>\n<blockquote>\n<p>在浮动布局中，元素首先按照普通流的位置出现，然后根据浮动的方向尽可能的向左边或右边偏移，其效果与印刷排版中的文本环绕相似。</p>\n</blockquote>\n<p>绝对定位 (absolute positioning)</p>\n<blockquote>\n<p>在绝对定位布局中，元素会整体脱离普通流，因此绝对定位元素不会对其兄弟元素造成影响，而元素具体的位置由绝对定位的坐标决定。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"二、BFC-概念\"><a href=\"#二、BFC-概念\" class=\"headerlink\" title=\"二、BFC 概念\"></a>二、BFC 概念</h2><p>Formatting context(格式化上下文) 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。</p>\n<p>那么 BFC 是什么呢？</p>\n<p>BFC 即 Block Formatting Contexts (块级格式化上下文)，它属于上述定位方案的普通流。</p>\n<p><strong>具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 BFC 具有普通容器所没有的一些特性。</strong></p>\n<p>通俗一点来讲，可以把 BFC 理解为一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部。</p>\n<h2 id=\"三、触发-BFC\"><a href=\"#三、触发-BFC\" class=\"headerlink\" title=\"三、触发 BFC\"></a>三、触发 BFC</h2><p>只要元素满足下面任一条件即可触发 BFC 特性：</p>\n<ol>\n<li>body 根元素</li>\n<li>浮动元素：float 除 none 以外的值</li>\n<li>绝对定位元素：position (absolute、fixed)</li>\n<li>display 为 inline-block、table-cells、flex</li>\n<li>overflow 除了 visible 以外的值 (hidden、auto、scroll)</li>\n</ol>\n<h2 id=\"四、BFC-特性及应用\"><a href=\"#四、BFC-特性及应用\" class=\"headerlink\" title=\"四、BFC 特性及应用\"></a>四、BFC 特性及应用</h2><ol>\n<li>同一个 BFC 下外边距会发生折叠<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">div&#123;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    background: lightblue;</span><br><span class=\"line\">    margin: 100px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><img src=\"http://blogimage.houjiyi.com/FoSbOQBFYy8WxJ0GdKxrMjZwU21j\" alt=\"image.png\"></p>\n<p>从效果上看，因为两个 div 元素都处于同一个 BFC 容器下 (这里指 body 元素) 所以第一个 div 的下边距和第二个 div 的上边距发生了重叠，所以两个盒子之间距离只有 100px，而不是 200px。</p>\n<p>首先这不是 CSS 的 bug，我们可以理解为一种规范，如果想要避免外边距的重叠，可以将其放在不同的 BFC 容器中。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">.container &#123;</span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">p &#123;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    background: lightblue;</span><br><span class=\"line\">    margin: 100px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这时候，两个盒子边距就变成了 200px<br><img src=\"http://blogimage.houjiyi.com/Fj-eRazvvuqU8bfxCGh18Q4GuLgM\" alt=\"image.png\"></p>\n<ol start=\"2\">\n<li>BFC 可以包含浮动的元素（清除浮动）<br>我们都知道，浮动的元素会脱离普通文档流，来看下下面一个例子</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"border: 1px solid #000;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 100px;height: 100px;background: #eee;float: left;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"http://blogimage.houjiyi.com/FpeiM_bvsKCpzDrl52pL1B1m2WK0\" alt=\"image.png\"></p>\n<p>由于容器内元素浮动，脱离了文档流，所以容器只剩下 2px 的边距高度。如果使触发容器的 BFC，那么容器将会包裹着浮动元素。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"border: 1px solid #000;overflow: hidden\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 100px;height: 100px;background: #eee;float: left;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>效果如图：<br><img src=\"http://blogimage.houjiyi.com/FpzQucYCs9ea4Pc9jLdHjXnfm-da\" alt=\"image.png\"></p>\n<ol start=\"3\">\n<li>BFC 可以阻止元素被浮动元素覆盖<br>先来看一个文字环绕效果：</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height: 100px;width: 100px;float: left;background: lightblue\"</span>&gt;</span>我是一个左浮动的元素<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 200px; height: 200px;background: #eee\"</span>&gt;</span>我是一个没有设置浮动, </span><br><span class=\"line\">也没有触发 BFC 元素, width: 200px; height:200px; background: #eee;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"http://blogimage.houjiyi.com/Fjw89t5ZQxtJCM6J_EtL4wPk_yo_\" alt=\"image.png\"></p>\n<p>这时候其实第二个元素有部分被浮动元素所覆盖，(但是文本信息不会被浮动元素所覆盖) 如果想避免元素被覆盖，可触第二个元素的 BFC 特性，在第二个元素中加入 overflow: hidden，就会变成：<br><img src=\"http://blogimage.houjiyi.com/FqHnK0sHHu2WHbQU5ao0L6PnEbwn\" alt=\"image.png\"></p>\n<p>这个方法可以用来实现两列自适应布局，效果不错，这时候左边的宽度固定，右边的内容自适应宽度(去掉上面右边内容的宽度)。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://blogimage.houjiyi.com/FrrAxLwA48BYSAzFn79bOmBnIvUX\" alt=\"image.png\"></p>\n<h2 id=\"一、常见定位方案\"><a href=\"#一、常见定位方案\" class=\"headerlink\" title=\"一、常见定位方案\"></a>一、常见定位方案</h2><p>在讲 BFC 之前，我们先来了解一下常见的定位方案，定位方案是控制元素的布局，有三种常见方案:</p>\n<p>普通流 (normal flow)</p>\n<blockquote>\n<p>在普通流中，元素按照其在 HTML 中的先后位置至上而下布局，在这个过程中，行内元素水平排列，直到当行被占满然后换行，块级元素则会被渲染为完整的一个新行，除非另外指定，否则所有元素默认都是普通流定位，也可以说，普通流中元素的位置由该元素在 HTML 文档中的位置决定。</p>\n</blockquote>\n<p>浮动 (float)</p>\n<blockquote>\n<p>在浮动布局中，元素首先按照普通流的位置出现，然后根据浮动的方向尽可能的向左边或右边偏移，其效果与印刷排版中的文本环绕相似。</p>\n</blockquote>\n<p>绝对定位 (absolute positioning)</p>\n<blockquote>\n<p>在绝对定位布局中，元素会整体脱离普通流，因此绝对定位元素不会对其兄弟元素造成影响，而元素具体的位置由绝对定位的坐标决定。</p>\n</blockquote>","more":"<h2 id=\"二、BFC-概念\"><a href=\"#二、BFC-概念\" class=\"headerlink\" title=\"二、BFC 概念\"></a>二、BFC 概念</h2><p>Formatting context(格式化上下文) 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。</p>\n<p>那么 BFC 是什么呢？</p>\n<p>BFC 即 Block Formatting Contexts (块级格式化上下文)，它属于上述定位方案的普通流。</p>\n<p><strong>具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 BFC 具有普通容器所没有的一些特性。</strong></p>\n<p>通俗一点来讲，可以把 BFC 理解为一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部。</p>\n<h2 id=\"三、触发-BFC\"><a href=\"#三、触发-BFC\" class=\"headerlink\" title=\"三、触发 BFC\"></a>三、触发 BFC</h2><p>只要元素满足下面任一条件即可触发 BFC 特性：</p>\n<ol>\n<li>body 根元素</li>\n<li>浮动元素：float 除 none 以外的值</li>\n<li>绝对定位元素：position (absolute、fixed)</li>\n<li>display 为 inline-block、table-cells、flex</li>\n<li>overflow 除了 visible 以外的值 (hidden、auto、scroll)</li>\n</ol>\n<h2 id=\"四、BFC-特性及应用\"><a href=\"#四、BFC-特性及应用\" class=\"headerlink\" title=\"四、BFC 特性及应用\"></a>四、BFC 特性及应用</h2><ol>\n<li>同一个 BFC 下外边距会发生折叠<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">div&#123;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    background: lightblue;</span><br><span class=\"line\">    margin: 100px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><img src=\"http://blogimage.houjiyi.com/FoSbOQBFYy8WxJ0GdKxrMjZwU21j\" alt=\"image.png\"></p>\n<p>从效果上看，因为两个 div 元素都处于同一个 BFC 容器下 (这里指 body 元素) 所以第一个 div 的下边距和第二个 div 的上边距发生了重叠，所以两个盒子之间距离只有 100px，而不是 200px。</p>\n<p>首先这不是 CSS 的 bug，我们可以理解为一种规范，如果想要避免外边距的重叠，可以将其放在不同的 BFC 容器中。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">.container &#123;</span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">p &#123;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    background: lightblue;</span><br><span class=\"line\">    margin: 100px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这时候，两个盒子边距就变成了 200px<br><img src=\"http://blogimage.houjiyi.com/Fj-eRazvvuqU8bfxCGh18Q4GuLgM\" alt=\"image.png\"></p>\n<ol start=\"2\">\n<li>BFC 可以包含浮动的元素（清除浮动）<br>我们都知道，浮动的元素会脱离普通文档流，来看下下面一个例子</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"border: 1px solid #000;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 100px;height: 100px;background: #eee;float: left;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"http://blogimage.houjiyi.com/FpeiM_bvsKCpzDrl52pL1B1m2WK0\" alt=\"image.png\"></p>\n<p>由于容器内元素浮动，脱离了文档流，所以容器只剩下 2px 的边距高度。如果使触发容器的 BFC，那么容器将会包裹着浮动元素。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"border: 1px solid #000;overflow: hidden\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 100px;height: 100px;background: #eee;float: left;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>效果如图：<br><img src=\"http://blogimage.houjiyi.com/FpzQucYCs9ea4Pc9jLdHjXnfm-da\" alt=\"image.png\"></p>\n<ol start=\"3\">\n<li>BFC 可以阻止元素被浮动元素覆盖<br>先来看一个文字环绕效果：</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height: 100px;width: 100px;float: left;background: lightblue\"</span>&gt;</span>我是一个左浮动的元素<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 200px; height: 200px;background: #eee\"</span>&gt;</span>我是一个没有设置浮动, </span><br><span class=\"line\">也没有触发 BFC 元素, width: 200px; height:200px; background: #eee;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"http://blogimage.houjiyi.com/Fjw89t5ZQxtJCM6J_EtL4wPk_yo_\" alt=\"image.png\"></p>\n<p>这时候其实第二个元素有部分被浮动元素所覆盖，(但是文本信息不会被浮动元素所覆盖) 如果想避免元素被覆盖，可触第二个元素的 BFC 特性，在第二个元素中加入 overflow: hidden，就会变成：<br><img src=\"http://blogimage.houjiyi.com/FqHnK0sHHu2WHbQU5ao0L6PnEbwn\" alt=\"image.png\"></p>\n<p>这个方法可以用来实现两列自适应布局，效果不错，这时候左边的宽度固定，右边的内容自适应宽度(去掉上面右边内容的宽度)。</p>"},{"title":"20171012工作日记","toc":false,"date":"2017-10-12T06:22:24.000Z","_content":"\n今天给广告部门做一个代理层接口，目的是为了记录第三方接口请求日志，由于第三方与我们以及百度统计到的数据都不同，因此需要通过增加代理层验证准确性。\n\n<!-- more -->\n\n思路必然是通过某台服务器，然后记录日志，怎样做比较简单呢？\n\n1. 部署到pc播放页服务器上，直接通过nginx代理转发，发现有问题，第三方接口是https，而代理转发不支持https的转发\n2. nginx rewrite，也不行，请求得到结果会出现302状态码，这个不是我们想要的\n3. 只能通过node做一个逻辑处理了，我们在node里边增加了https发送模块，将返回的结果通过console.info记录在日志里边\n4. 部署上线的时候pc发现新问题，pc会走cdn缓存，这样很多请求打不到我们的服务器上，也就无法记录日志\n5. 放在M站服务器上，由于M站没有走cdn所以这里可以直接配置修改。\n6. 修改M站的时候我们发现一级uri会有问题，因为M站会把一级uri作为频道页重写\n7. 最终接口请求为**.**.com/proxy/ad\n8. 好了 下边就是收集日志分析日志的工作了\n\n然后问题基本结束了，但是下午沟通发现又有新问题了，代理转发的第三方接口并不是固定的，之前讨论是固定的是把问题简单化了，为了避免麻烦，我们重新做了处理\n\n1. 支持通过send参数将第三方接口传递给我们代理层\n2. 传递给代理层以后，要判断第三方请求是http还是https，决定下一步的请求方式\n3. 同时需要把header原样带给第三方接口，这里有个小插曲，代理接口header里边的host要删掉后才能再传给第三方接口才不会报错，理由很简单，那个host是代理的host，而第三方不需要也不识别。\n\n最后就上线了……\n","source":"_posts/20171012工作日记.md","raw":"---\ntitle: 20171012工作日记\ntags:\n  - nginx\ncategories:\n  - 项目总结\ntoc: false\ndate: 2017-10-12 14:22:24\n---\n\n今天给广告部门做一个代理层接口，目的是为了记录第三方接口请求日志，由于第三方与我们以及百度统计到的数据都不同，因此需要通过增加代理层验证准确性。\n\n<!-- more -->\n\n思路必然是通过某台服务器，然后记录日志，怎样做比较简单呢？\n\n1. 部署到pc播放页服务器上，直接通过nginx代理转发，发现有问题，第三方接口是https，而代理转发不支持https的转发\n2. nginx rewrite，也不行，请求得到结果会出现302状态码，这个不是我们想要的\n3. 只能通过node做一个逻辑处理了，我们在node里边增加了https发送模块，将返回的结果通过console.info记录在日志里边\n4. 部署上线的时候pc发现新问题，pc会走cdn缓存，这样很多请求打不到我们的服务器上，也就无法记录日志\n5. 放在M站服务器上，由于M站没有走cdn所以这里可以直接配置修改。\n6. 修改M站的时候我们发现一级uri会有问题，因为M站会把一级uri作为频道页重写\n7. 最终接口请求为**.**.com/proxy/ad\n8. 好了 下边就是收集日志分析日志的工作了\n\n然后问题基本结束了，但是下午沟通发现又有新问题了，代理转发的第三方接口并不是固定的，之前讨论是固定的是把问题简单化了，为了避免麻烦，我们重新做了处理\n\n1. 支持通过send参数将第三方接口传递给我们代理层\n2. 传递给代理层以后，要判断第三方请求是http还是https，决定下一步的请求方式\n3. 同时需要把header原样带给第三方接口，这里有个小插曲，代理接口header里边的host要删掉后才能再传给第三方接口才不会报错，理由很简单，那个host是代理的host，而第三方不需要也不识别。\n\n最后就上线了……\n","slug":"20171012工作日记","published":1,"updated":"2019-11-07T02:17:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznw10001h5s6plye6q0v","content":"<p>今天给广告部门做一个代理层接口，目的是为了记录第三方接口请求日志，由于第三方与我们以及百度统计到的数据都不同，因此需要通过增加代理层验证准确性。</p>\n<a id=\"more\"></a>\n<p>思路必然是通过某台服务器，然后记录日志，怎样做比较简单呢？</p>\n<ol>\n<li>部署到pc播放页服务器上，直接通过nginx代理转发，发现有问题，第三方接口是https，而代理转发不支持https的转发</li>\n<li>nginx rewrite，也不行，请求得到结果会出现302状态码，这个不是我们想要的</li>\n<li>只能通过node做一个逻辑处理了，我们在node里边增加了https发送模块，将返回的结果通过console.info记录在日志里边</li>\n<li>部署上线的时候pc发现新问题，pc会走cdn缓存，这样很多请求打不到我们的服务器上，也就无法记录日志</li>\n<li>放在M站服务器上，由于M站没有走cdn所以这里可以直接配置修改。</li>\n<li>修改M站的时候我们发现一级uri会有问题，因为M站会把一级uri作为频道页重写</li>\n<li>最终接口请求为<strong>.</strong>.com/proxy/ad</li>\n<li>好了 下边就是收集日志分析日志的工作了</li>\n</ol>\n<p>然后问题基本结束了，但是下午沟通发现又有新问题了，代理转发的第三方接口并不是固定的，之前讨论是固定的是把问题简单化了，为了避免麻烦，我们重新做了处理</p>\n<ol>\n<li>支持通过send参数将第三方接口传递给我们代理层</li>\n<li>传递给代理层以后，要判断第三方请求是http还是https，决定下一步的请求方式</li>\n<li>同时需要把header原样带给第三方接口，这里有个小插曲，代理接口header里边的host要删掉后才能再传给第三方接口才不会报错，理由很简单，那个host是代理的host，而第三方不需要也不识别。</li>\n</ol>\n<p>最后就上线了……</p>\n","site":{"data":{}},"excerpt":"<p>今天给广告部门做一个代理层接口，目的是为了记录第三方接口请求日志，由于第三方与我们以及百度统计到的数据都不同，因此需要通过增加代理层验证准确性。</p>","more":"<p>思路必然是通过某台服务器，然后记录日志，怎样做比较简单呢？</p>\n<ol>\n<li>部署到pc播放页服务器上，直接通过nginx代理转发，发现有问题，第三方接口是https，而代理转发不支持https的转发</li>\n<li>nginx rewrite，也不行，请求得到结果会出现302状态码，这个不是我们想要的</li>\n<li>只能通过node做一个逻辑处理了，我们在node里边增加了https发送模块，将返回的结果通过console.info记录在日志里边</li>\n<li>部署上线的时候pc发现新问题，pc会走cdn缓存，这样很多请求打不到我们的服务器上，也就无法记录日志</li>\n<li>放在M站服务器上，由于M站没有走cdn所以这里可以直接配置修改。</li>\n<li>修改M站的时候我们发现一级uri会有问题，因为M站会把一级uri作为频道页重写</li>\n<li>最终接口请求为<strong>.</strong>.com/proxy/ad</li>\n<li>好了 下边就是收集日志分析日志的工作了</li>\n</ol>\n<p>然后问题基本结束了，但是下午沟通发现又有新问题了，代理转发的第三方接口并不是固定的，之前讨论是固定的是把问题简单化了，为了避免麻烦，我们重新做了处理</p>\n<ol>\n<li>支持通过send参数将第三方接口传递给我们代理层</li>\n<li>传递给代理层以后，要判断第三方请求是http还是https，决定下一步的请求方式</li>\n<li>同时需要把header原样带给第三方接口，这里有个小插曲，代理接口header里边的host要删掉后才能再传给第三方接口才不会报错，理由很简单，那个host是代理的host，而第三方不需要也不识别。</li>\n</ol>\n<p>最后就上线了……</p>"},{"title":"APICloud打包Vue单页应用","toc":false,"date":"2019-03-30T06:05:29.000Z","_content":"\nAPICloud新建项目后，会生成以下目录结构\n\n![image.png](http://blogimage.houjiyi.com/Fr2qGfMeERsyzXVXNvD2fKfBvoXV)\n\n其中index.html是入口文件，而vue-cli打包生成的文件是在dist目录下\n```bash\n├─dist\n│ └─static\n│ 　　 ├─css\n│ 　　 └─js\n│ └─index.html\n```\n\n把dist目录中的static文件夹和index.html复制到apicloud的项目文件中即可，覆盖原来的index.html。最终apicloud的目录结构只是比原来多了一个static目录。\n\n <!-- more -->\n\nvue项目中需要做如下配置，config/index.js中需要把build的assetsPublicPath属性由原来的 /改成 ./，\n\nindex.html添加一些代码用于处理物理返回键：\n```html\n<!--引用apicloud的脚本(可以不加)-->\n<script src=\"script/api.js\"></script>\n\n<div id=\"app\"></div>\n<!-- built files will be auto injected -->\n\n<script>\n  //这里处理物理返回键，避免打包后点击一次直接退出应用\n  window.apiready = function () {\n    var timer = 0\n    api.addEventListener({\n      name: 'keyback'\n    }, function (ret, err) {\n      var currentTime = +new Date()\n      api.historyBack(function (ret, err) {\n        if (!ret.status) {\n          if ((currentTime - timer) > 2000) {\n            timer = currentTime\n            api.toast({\n              msg: '再按一次返回键退出app',\n              duration: 2000,\n              location: 'bottom'\n            })\n          } else {\n            api.closeWidget({\n              id: 'A6089289836112', //这里改成自己的应用ID\n              retData: {name: 'closeWidget'},\n              silent: true\n            })\n          }\n        }\n      })\n    })\n  }\n</script>\n\n```\n\n这样打包以后代码还存在index.html里，引用脚本的路径也是apicloud目录下的。之后把dist目录下的文件复制过去就行了。如此一来就能畅享vue带来的高效开发了。\n\n \n\n最后，如果想调用apicloud的组件，可以在vue的组件中这样写：\n```html\n　　<button @click=\"clickHandler\">点击试试</button>\n\n    mounted() {\n\n    },\n    methods: {\n      clickHandler() {\n        //调用apicloud的组件\n        var photoSelect = api.require('photoSelect');\n        photoSelect.openAblum({\n          permitnum: '9'\n        }, function (ret, err) {\n          if (ret) {\n            alert(JSON.stringify(ret));\n          } else {\n            alert(JSON.stringify(err));\n          }\n        });\n      }\n    },\n    created() {\n\n    }\n\n```\n\n原文地址：https://www.cnblogs.com/undefined000/p/9559694.html\n","source":"_posts/APICloud打包Vue单页应用.md","raw":"---\ntitle: APICloud打包Vue单页应用\ntags:\n  - apicloud\n  - vue\ncategories:\n  - 移动开发\ntoc: false\ndate: 2019-03-30 14:05:29\n---\n\nAPICloud新建项目后，会生成以下目录结构\n\n![image.png](http://blogimage.houjiyi.com/Fr2qGfMeERsyzXVXNvD2fKfBvoXV)\n\n其中index.html是入口文件，而vue-cli打包生成的文件是在dist目录下\n```bash\n├─dist\n│ └─static\n│ 　　 ├─css\n│ 　　 └─js\n│ └─index.html\n```\n\n把dist目录中的static文件夹和index.html复制到apicloud的项目文件中即可，覆盖原来的index.html。最终apicloud的目录结构只是比原来多了一个static目录。\n\n <!-- more -->\n\nvue项目中需要做如下配置，config/index.js中需要把build的assetsPublicPath属性由原来的 /改成 ./，\n\nindex.html添加一些代码用于处理物理返回键：\n```html\n<!--引用apicloud的脚本(可以不加)-->\n<script src=\"script/api.js\"></script>\n\n<div id=\"app\"></div>\n<!-- built files will be auto injected -->\n\n<script>\n  //这里处理物理返回键，避免打包后点击一次直接退出应用\n  window.apiready = function () {\n    var timer = 0\n    api.addEventListener({\n      name: 'keyback'\n    }, function (ret, err) {\n      var currentTime = +new Date()\n      api.historyBack(function (ret, err) {\n        if (!ret.status) {\n          if ((currentTime - timer) > 2000) {\n            timer = currentTime\n            api.toast({\n              msg: '再按一次返回键退出app',\n              duration: 2000,\n              location: 'bottom'\n            })\n          } else {\n            api.closeWidget({\n              id: 'A6089289836112', //这里改成自己的应用ID\n              retData: {name: 'closeWidget'},\n              silent: true\n            })\n          }\n        }\n      })\n    })\n  }\n</script>\n\n```\n\n这样打包以后代码还存在index.html里，引用脚本的路径也是apicloud目录下的。之后把dist目录下的文件复制过去就行了。如此一来就能畅享vue带来的高效开发了。\n\n \n\n最后，如果想调用apicloud的组件，可以在vue的组件中这样写：\n```html\n　　<button @click=\"clickHandler\">点击试试</button>\n\n    mounted() {\n\n    },\n    methods: {\n      clickHandler() {\n        //调用apicloud的组件\n        var photoSelect = api.require('photoSelect');\n        photoSelect.openAblum({\n          permitnum: '9'\n        }, function (ret, err) {\n          if (ret) {\n            alert(JSON.stringify(ret));\n          } else {\n            alert(JSON.stringify(err));\n          }\n        });\n      }\n    },\n    created() {\n\n    }\n\n```\n\n原文地址：https://www.cnblogs.com/undefined000/p/9559694.html\n","slug":"APICloud打包Vue单页应用","published":1,"updated":"2019-11-07T02:17:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznw60004h5s68hw6tmmi","content":"<p>APICloud新建项目后，会生成以下目录结构</p>\n<p><img src=\"http://blogimage.houjiyi.com/Fr2qGfMeERsyzXVXNvD2fKfBvoXV\" alt=\"image.png\"></p>\n<p>其中index.html是入口文件，而vue-cli打包生成的文件是在dist目录下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├─dist</span><br><span class=\"line\">│ └─static</span><br><span class=\"line\">│ 　　 ├─css</span><br><span class=\"line\">│ 　　 └─js</span><br><span class=\"line\">│ └─index.html</span><br></pre></td></tr></table></figure></p>\n<p>把dist目录中的static文件夹和index.html复制到apicloud的项目文件中即可，覆盖原来的index.html。最终apicloud的目录结构只是比原来多了一个static目录。</p>\n <a id=\"more\"></a>\n<p>vue项目中需要做如下配置，config/index.js中需要把build的assetsPublicPath属性由原来的 /改成 ./，</p>\n<p>index.html添加一些代码用于处理物理返回键：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--引用apicloud的脚本(可以不加)--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"script/api.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  //这里处理物理返回键，避免打包后点击一次直接退出应用</span><br><span class=\"line\">  window.apiready = function () &#123;</span><br><span class=\"line\">    var timer = 0</span><br><span class=\"line\">    api.addEventListener(&#123;</span><br><span class=\"line\">      name: 'keyback'</span><br><span class=\"line\">    &#125;, function (ret, err) &#123;</span><br><span class=\"line\">      var currentTime = +new Date()</span><br><span class=\"line\">      api.historyBack(function (ret, err) &#123;</span><br><span class=\"line\">        if (!ret.status) &#123;</span><br><span class=\"line\">          if ((currentTime - timer) &gt; 2000) &#123;</span><br><span class=\"line\">            timer = currentTime</span><br><span class=\"line\">            api.toast(&#123;</span><br><span class=\"line\">              msg: '再按一次返回键退出app',</span><br><span class=\"line\">              duration: 2000,</span><br><span class=\"line\">              location: 'bottom'</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125; else &#123;</span><br><span class=\"line\">            api.closeWidget(&#123;</span><br><span class=\"line\">              id: 'A6089289836112', //这里改成自己的应用ID</span><br><span class=\"line\">              retData: &#123;name: 'closeWidget'&#125;,</span><br><span class=\"line\">              silent: true</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这样打包以后代码还存在index.html里，引用脚本的路径也是apicloud目录下的。之后把dist目录下的文件复制过去就行了。如此一来就能畅享vue带来的高效开发了。</p>\n<p>最后，如果想调用apicloud的组件，可以在vue的组件中这样写：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　<span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"clickHandler\"</span>&gt;</span>点击试试<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">mounted() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  clickHandler() &#123;</span><br><span class=\"line\">    //调用apicloud的组件</span><br><span class=\"line\">    var photoSelect = api.require('photoSelect');</span><br><span class=\"line\">    photoSelect.openAblum(&#123;</span><br><span class=\"line\">      permitnum: '9'</span><br><span class=\"line\">    &#125;, function (ret, err) &#123;</span><br><span class=\"line\">      if (ret) &#123;</span><br><span class=\"line\">        alert(JSON.stringify(ret));</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        alert(JSON.stringify(err));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">created() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>原文地址：<a href=\"https://www.cnblogs.com/undefined000/p/9559694.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/undefined000/p/9559694.html</a></p>\n","site":{"data":{}},"excerpt":"<p>APICloud新建项目后，会生成以下目录结构</p>\n<p><img src=\"http://blogimage.houjiyi.com/Fr2qGfMeERsyzXVXNvD2fKfBvoXV\" alt=\"image.png\"></p>\n<p>其中index.html是入口文件，而vue-cli打包生成的文件是在dist目录下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├─dist</span><br><span class=\"line\">│ └─static</span><br><span class=\"line\">│ 　　 ├─css</span><br><span class=\"line\">│ 　　 └─js</span><br><span class=\"line\">│ └─index.html</span><br></pre></td></tr></table></figure></p>\n<p>把dist目录中的static文件夹和index.html复制到apicloud的项目文件中即可，覆盖原来的index.html。最终apicloud的目录结构只是比原来多了一个static目录。</p>","more":"<p>vue项目中需要做如下配置，config/index.js中需要把build的assetsPublicPath属性由原来的 /改成 ./，</p>\n<p>index.html添加一些代码用于处理物理返回键：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--引用apicloud的脚本(可以不加)--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"script/api.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  //这里处理物理返回键，避免打包后点击一次直接退出应用</span><br><span class=\"line\">  window.apiready = function () &#123;</span><br><span class=\"line\">    var timer = 0</span><br><span class=\"line\">    api.addEventListener(&#123;</span><br><span class=\"line\">      name: 'keyback'</span><br><span class=\"line\">    &#125;, function (ret, err) &#123;</span><br><span class=\"line\">      var currentTime = +new Date()</span><br><span class=\"line\">      api.historyBack(function (ret, err) &#123;</span><br><span class=\"line\">        if (!ret.status) &#123;</span><br><span class=\"line\">          if ((currentTime - timer) &gt; 2000) &#123;</span><br><span class=\"line\">            timer = currentTime</span><br><span class=\"line\">            api.toast(&#123;</span><br><span class=\"line\">              msg: '再按一次返回键退出app',</span><br><span class=\"line\">              duration: 2000,</span><br><span class=\"line\">              location: 'bottom'</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125; else &#123;</span><br><span class=\"line\">            api.closeWidget(&#123;</span><br><span class=\"line\">              id: 'A6089289836112', //这里改成自己的应用ID</span><br><span class=\"line\">              retData: &#123;name: 'closeWidget'&#125;,</span><br><span class=\"line\">              silent: true</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这样打包以后代码还存在index.html里，引用脚本的路径也是apicloud目录下的。之后把dist目录下的文件复制过去就行了。如此一来就能畅享vue带来的高效开发了。</p>\n<p>最后，如果想调用apicloud的组件，可以在vue的组件中这样写：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　<span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"clickHandler\"</span>&gt;</span>点击试试<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">mounted() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  clickHandler() &#123;</span><br><span class=\"line\">    //调用apicloud的组件</span><br><span class=\"line\">    var photoSelect = api.require('photoSelect');</span><br><span class=\"line\">    photoSelect.openAblum(&#123;</span><br><span class=\"line\">      permitnum: '9'</span><br><span class=\"line\">    &#125;, function (ret, err) &#123;</span><br><span class=\"line\">      if (ret) &#123;</span><br><span class=\"line\">        alert(JSON.stringify(ret));</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        alert(JSON.stringify(err));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">created() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>原文地址：<a href=\"https://www.cnblogs.com/undefined000/p/9559694.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/undefined000/p/9559694.html</a></p>"},{"title":"534 other ways to reload the page with JavaScript","toc":false,"date":"2019-06-14T10:34:45.000Z","_content":"\n```javascript\nlocation = location\nlocation = location.href\nlocation = window.location\nlocation = self.location\nlocation = window.location.href\nlocation = self.location.href\nlocation = location['href']\nlocation = window['location']\nlocation = window['location'].href\nlocation = window['location']['href']\nlocation = window.location['href']\nlocation = self['location']\nlocation = self['location'].href\nlocation = self['location']['href']\nlocation = self.location['href']\nlocation.assign(location)\nlocation.replace(location)\nwindow.location.assign(location)\nwindow.location.replace(location)\nself.location.assign(location)\nself.location.replace(location)\nlocation['assign'](location)\nlocation['replace'](location)\nwindow.location['assign'](location)\nwindow.location['replace'](location)\nwindow['location'].assign(location)\nwindow['location'].replace(location)\nwindow['location']['assign'](location)\nwindow['location']['replace'](location)\nself.location['assign'](location)\nself.location['replace'](location)\nself['location'].assign(location)\nself['location'].replace(location)\nself['location']['assign'](location)\nself['location']['replace'](location)\nlocation.href = location\nlocation.href = location.href\nlocation.href = window.location\nlocation.href = self.location\nlocation.href = window.location.href\nlocation.href = self.location.href\nlocation.href = location['href']\nlocation.href = window['location']\nlocation.href = window['location'].href\nlocation.href = window['location']['href']\nlocation.href = window.location['href']\nlocation.href = self['location']\nlocation.href = self['location'].href\nlocation.href = self['location']['href']\nlocation.href = self.location['href']\nlocation.assign(location.href)\nlocation.replace(location.href)\nwindow.location.assign(location.href)\nwindow.location.replace(location.href)\nself.location.assign(location.href)\nself.location.replace(location.href)\nlocation['assign'](location.href)\nlocation['replace'](location.href)\nwindow.location['assign'](location.href)\nwindow.location['replace'](location.href)\nwindow['location'].assign(location.href)\nwindow['location'].replace(location.href)\nwindow['location']['assign'](location.href)\nwindow['location']['replace'](location.href)\nself.location['assign'](location.href)\nself.location['replace'](location.href)\nself['location'].assign(location.href)\nself['location'].replace(location.href)\nself['location']['assign'](location.href)\nself['location']['replace'](location.href)\nwindow.location = location\nwindow.location = location.href\nwindow.location = window.location\nwindow.location = self.location\nwindow.location = window.location.href\nwindow.location = self.location.href\nwindow.location = location['href']\nwindow.location = window['location']\nwindow.location = window['location'].href\nwindow.location = window['location']['href']\nwindow.location = window.location['href']\nwindow.location = self['location']\nwindow.location = self['location'].href\nwindow.location = self['location']['href']\nwindow.location = self.location['href']\nlocation.assign(window.location)\nlocation.replace(window.location)\nwindow.location.assign(window.location)\nwindow.location.replace(window.location)\nself.location.assign(window.location)\nself.location.replace(window.location)\nlocation['assign'](window.location)\nlocation['replace'](window.location)\nwindow.location['assign'](window.location)\nwindow.location['replace'](window.location)\nwindow['location'].assign(window.location)\nwindow['location'].replace(window.location)\nwindow['location']['assign'](window.location)\nwindow['location']['replace'](window.location)\nself.location['assign'](window.location)\nself.location['replace'](window.location)\nself['location'].assign(window.location)\nself['location'].replace(window.location)\nself['location']['assign'](window.location)\nself['location']['replace'](window.location)\nself.location = location\nself.location = location.href\nself.location = window.location\nself.location = self.location\nself.location = window.location.href\nself.location = self.location.href\nself.location = location['href']\nself.location = window['location']\nself.location = window['location'].href\nself.location = window['location']['href']\nself.location = window.location['href']\nself.location = self['location']\nself.location = self['location'].href\nself.location = self['location']['href']\nself.location = self.location['href']\nlocation.assign(self.location)\nlocation.replace(self.location)\nwindow.location.assign(self.location)\nwindow.location.replace(self.location)\nself.location.assign(self.location)\nself.location.replace(self.location)\nlocation['assign'](self.location)\nlocation['replace'](self.location)\nwindow.location['assign'](self.location)\nwindow.location['replace'](self.location)\nwindow['location'].assign(self.location)\nwindow['location'].replace(self.location)\nwindow['location']['assign'](self.location)\nwindow['location']['replace'](self.location)\nself.location['assign'](self.location)\nself.location['replace'](self.location)\nself['location'].assign(self.location)\nself['location'].replace(self.location)\nself['location']['assign'](self.location)\nself['location']['replace'](self.location)\nwindow.location.href = location\nwindow.location.href = location.href\nwindow.location.href = window.location\nwindow.location.href = self.location\nwindow.location.href = window.location.href\nwindow.location.href = self.location.href\nwindow.location.href = location['href']\nwindow.location.href = window['location']\nwindow.location.href = window['location'].href\nwindow.location.href = window['location']['href']\nwindow.location.href = window.location['href']\nwindow.location.href = self['location']\nwindow.location.href = self['location'].href\nwindow.location.href = self['location']['href']\nwindow.location.href = self.location['href']\nlocation.assign(window.location.href)\nlocation.replace(window.location.href)\nwindow.location.assign(window.location.href)\nwindow.location.replace(window.location.href)\nself.location.assign(window.location.href)\nself.location.replace(window.location.href)\nlocation['assign'](window.location.href)\nlocation['replace'](window.location.href)\nwindow.location['assign'](window.location.href)\nwindow.location['replace'](window.location.href)\nwindow['location'].assign(window.location.href)\nwindow['location'].replace(window.location.href)\nwindow['location']['assign'](window.location.href)\nwindow['location']['replace'](window.location.href)\nself.location['assign'](window.location.href)\nself.location['replace'](window.location.href)\nself['location'].assign(window.location.href)\nself['location'].replace(window.location.href)\nself['location']['assign'](window.location.href)\nself['location']['replace'](window.location.href)\nself.location.href = location\nself.location.href = location.href\nself.location.href = window.location\nself.location.href = self.location\nself.location.href = window.location.href\nself.location.href = self.location.href\nself.location.href = location['href']\nself.location.href = window['location']\nself.location.href = window['location'].href\nself.location.href = window['location']['href']\nself.location.href = window.location['href']\nself.location.href = self['location']\nself.location.href = self['location'].href\nself.location.href = self['location']['href']\nself.location.href = self.location['href']\nlocation.assign(self.location.href)\nlocation.replace(self.location.href)\nwindow.location.assign(self.location.href)\nwindow.location.replace(self.location.href)\nself.location.assign(self.location.href)\nself.location.replace(self.location.href)\nlocation['assign'](self.location.href)\nlocation['replace'](self.location.href)\nwindow.location['assign'](self.location.href)\nwindow.location['replace'](self.location.href)\nwindow['location'].assign(self.location.href)\nwindow['location'].replace(self.location.href)\nwindow['location']['assign'](self.location.href)\nwindow['location']['replace'](self.location.href)\nself.location['assign'](self.location.href)\nself.location['replace'](self.location.href)\nself['location'].assign(self.location.href)\nself['location'].replace(self.location.href)\nself['location']['assign'](self.location.href)\nself['location']['replace'](self.location.href)\nlocation['href'] = location\nlocation['href'] = location.href\nlocation['href'] = window.location\nlocation['href'] = self.location\nlocation['href'] = window.location.href\nlocation['href'] = self.location.href\nlocation['href'] = location['href']\nlocation['href'] = window['location']\nlocation['href'] = window['location'].href\nlocation['href'] = window['location']['href']\nlocation['href'] = window.location['href']\nlocation['href'] = self['location']\nlocation['href'] = self['location'].href\nlocation['href'] = self['location']['href']\nlocation['href'] = self.location['href']\nlocation.assign(location['href'])\nlocation.replace(location['href'])\nwindow.location.assign(location['href'])\nwindow.location.replace(location['href'])\nself.location.assign(location['href'])\nself.location.replace(location['href'])\nlocation['assign'](location['href'])\nlocation['replace'](location['href'])\nwindow.location['assign'](location['href'])\nwindow.location['replace'](location['href'])\nwindow['location'].assign(location['href'])\nwindow['location'].replace(location['href'])\nwindow['location']['assign'](location['href'])\nwindow['location']['replace'](location['href'])\nself.location['assign'](location['href'])\nself.location['replace'](location['href'])\nself['location'].assign(location['href'])\nself['location'].replace(location['href'])\nself['location']['assign'](location['href'])\nself['location']['replace'](location['href'])\nwindow['location'] = location\nwindow['location'] = location.href\nwindow['location'] = window.location\nwindow['location'] = self.location\nwindow['location'] = window.location.href\nwindow['location'] = self.location.href\nwindow['location'] = location['href']\nwindow['location'] = window['location']\nwindow['location'] = window['location'].href\nwindow['location'] = window['location']['href']\nwindow['location'] = window.location['href']\nwindow['location'] = self['location']\nwindow['location'] = self['location'].href\nwindow['location'] = self['location']['href']\nwindow['location'] = self.location['href']\nlocation.assign(window['location'])\nlocation.replace(window['location'])\nwindow.location.assign(window['location'])\nwindow.location.replace(window['location'])\nself.location.assign(window['location'])\nself.location.replace(window['location'])\nlocation['assign'](window['location'])\nlocation['replace'](window['location'])\nwindow.location['assign'](window['location'])\nwindow.location['replace'](window['location'])\nwindow['location'].assign(window['location'])\nwindow['location'].replace(window['location'])\nwindow['location']['assign'](window['location'])\nwindow['location']['replace'](window['location'])\nself.location['assign'](window['location'])\nself.location['replace'](window['location'])\nself['location'].assign(window['location'])\nself['location'].replace(window['location'])\nself['location']['assign'](window['location'])\nself['location']['replace'](window['location'])\nwindow['location'].href = location\nwindow['location'].href = location.href\nwindow['location'].href = window.location\nwindow['location'].href = self.location\nwindow['location'].href = window.location.href\nwindow['location'].href = self.location.href\nwindow['location'].href = location['href']\nwindow['location'].href = window['location']\nwindow['location'].href = window['location'].href\nwindow['location'].href = window['location']['href']\nwindow['location'].href = window.location['href']\nwindow['location'].href = self['location']\nwindow['location'].href = self['location'].href\nwindow['location'].href = self['location']['href']\nwindow['location'].href = self.location['href']\nlocation.assign(window['location'].href)\nlocation.replace(window['location'].href)\nwindow.location.assign(window['location'].href)\nwindow.location.replace(window['location'].href)\nself.location.assign(window['location'].href)\nself.location.replace(window['location'].href)\nlocation['assign'](window['location'].href)\nlocation['replace'](window['location'].href)\nwindow.location['assign'](window['location'].href)\nwindow.location['replace'](window['location'].href)\nwindow['location'].assign(window['location'].href)\nwindow['location'].replace(window['location'].href)\nwindow['location']['assign'](window['location'].href)\nwindow['location']['replace'](window['location'].href)\nself.location['assign'](window['location'].href)\nself.location['replace'](window['location'].href)\nself['location'].assign(window['location'].href)\nself['location'].replace(window['location'].href)\nself['location']['assign'](window['location'].href)\nself['location']['replace'](window['location'].href)\nwindow['location']['href'] = location\nwindow['location']['href'] = location.href\nwindow['location']['href'] = window.location\nwindow['location']['href'] = self.location\nwindow['location']['href'] = window.location.href\nwindow['location']['href'] = self.location.href\nwindow['location']['href'] = location['href']\nwindow['location']['href'] = window['location']\nwindow['location']['href'] = window['location'].href\nwindow['location']['href'] = window['location']['href']\nwindow['location']['href'] = window.location['href']\nwindow['location']['href'] = self['location']\nwindow['location']['href'] = self['location'].href\nwindow['location']['href'] = self['location']['href']\nwindow['location']['href'] = self.location['href']\nlocation.assign(window['location']['href'])\nlocation.replace(window['location']['href'])\nwindow.location.assign(window['location']['href'])\nwindow.location.replace(window['location']['href'])\nself.location.assign(window['location']['href'])\nself.location.replace(window['location']['href'])\nlocation['assign'](window['location']['href'])\nlocation['replace'](window['location']['href'])\nwindow.location['assign'](window['location']['href'])\nwindow.location['replace'](window['location']['href'])\nwindow['location'].assign(window['location']['href'])\nwindow['location'].replace(window['location']['href'])\nwindow['location']['assign'](window['location']['href'])\nwindow['location']['replace'](window['location']['href'])\nself.location['assign'](window['location']['href'])\nself.location['replace'](window['location']['href'])\nself['location'].assign(window['location']['href'])\nself['location'].replace(window['location']['href'])\nself['location']['assign'](window['location']['href'])\nself['location']['replace'](window['location']['href'])\nwindow.location['href'] = location\nwindow.location['href'] = location.href\nwindow.location['href'] = window.location\nwindow.location['href'] = self.location\nwindow.location['href'] = window.location.href\nwindow.location['href'] = self.location.href\nwindow.location['href'] = location['href']\nwindow.location['href'] = window['location']\nwindow.location['href'] = window['location'].href\nwindow.location['href'] = window['location']['href']\nwindow.location['href'] = window.location['href']\nwindow.location['href'] = self['location']\nwindow.location['href'] = self['location'].href\nwindow.location['href'] = self['location']['href']\nwindow.location['href'] = self.location['href']\nlocation.assign(window.location['href'])\nlocation.replace(window.location['href'])\nwindow.location.assign(window.location['href'])\nwindow.location.replace(window.location['href'])\nself.location.assign(window.location['href'])\nself.location.replace(window.location['href'])\nlocation['assign'](window.location['href'])\nlocation['replace'](window.location['href'])\nwindow.location['assign'](window.location['href'])\nwindow.location['replace'](window.location['href'])\nwindow['location'].assign(window.location['href'])\nwindow['location'].replace(window.location['href'])\nwindow['location']['assign'](window.location['href'])\nwindow['location']['replace'](window.location['href'])\nself.location['assign'](window.location['href'])\nself.location['replace'](window.location['href'])\nself['location'].assign(window.location['href'])\nself['location'].replace(window.location['href'])\nself['location']['assign'](window.location['href'])\nself['location']['replace'](window.location['href'])\nself['location'] = location\nself['location'] = location.href\nself['location'] = window.location\nself['location'] = self.location\nself['location'] = window.location.href\nself['location'] = self.location.href\nself['location'] = location['href']\nself['location'] = window['location']\nself['location'] = window['location'].href\nself['location'] = window['location']['href']\nself['location'] = window.location['href']\nself['location'] = self['location']\nself['location'] = self['location'].href\nself['location'] = self['location']['href']\nself['location'] = self.location['href']\nlocation.assign(self['location'])\nlocation.replace(self['location'])\nwindow.location.assign(self['location'])\nwindow.location.replace(self['location'])\nself.location.assign(self['location'])\nself.location.replace(self['location'])\nlocation['assign'](self['location'])\nlocation['replace'](self['location'])\nwindow.location['assign'](self['location'])\nwindow.location['replace'](self['location'])\nwindow['location'].assign(self['location'])\nwindow['location'].replace(self['location'])\nwindow['location']['assign'](self['location'])\nwindow['location']['replace'](self['location'])\nself.location['assign'](self['location'])\nself.location['replace'](self['location'])\nself['location'].assign(self['location'])\nself['location'].replace(self['location'])\nself['location']['assign'](self['location'])\nself['location']['replace'](self['location'])\nself['location'].href = location\nself['location'].href = location.href\nself['location'].href = window.location\nself['location'].href = self.location\nself['location'].href = window.location.href\nself['location'].href = self.location.href\nself['location'].href = location['href']\nself['location'].href = window['location']\nself['location'].href = window['location'].href\nself['location'].href = window['location']['href']\nself['location'].href = window.location['href']\nself['location'].href = self['location']\nself['location'].href = self['location'].href\nself['location'].href = self['location']['href']\nself['location'].href = self.location['href']\nlocation.assign(self['location'].href)\nlocation.replace(self['location'].href)\nwindow.location.assign(self['location'].href)\nwindow.location.replace(self['location'].href)\nself.location.assign(self['location'].href)\nself.location.replace(self['location'].href)\nlocation['assign'](self['location'].href)\nlocation['replace'](self['location'].href)\nwindow.location['assign'](self['location'].href)\nwindow.location['replace'](self['location'].href)\nwindow['location'].assign(self['location'].href)\nwindow['location'].replace(self['location'].href)\nwindow['location']['assign'](self['location'].href)\nwindow['location']['replace'](self['location'].href)\nself.location['assign'](self['location'].href)\nself.location['replace'](self['location'].href)\nself['location'].assign(self['location'].href)\nself['location'].replace(self['location'].href)\nself['location']['assign'](self['location'].href)\nself['location']['replace'](self['location'].href)\nself['location']['href'] = location\nself['location']['href'] = location.href\nself['location']['href'] = window.location\nself['location']['href'] = self.location\nself['location']['href'] = window.location.href\nself['location']['href'] = self.location.href\nself['location']['href'] = location['href']\nself['location']['href'] = window['location']\nself['location']['href'] = window['location'].href\nself['location']['href'] = window['location']['href']\nself['location']['href'] = window.location['href']\nself['location']['href'] = self['location']\nself['location']['href'] = self['location'].href\nself['location']['href'] = self['location']['href']\nself['location']['href'] = self.location['href']\nlocation.assign(self['location']['href'])\nlocation.replace(self['location']['href'])\nwindow.location.assign(self['location']['href'])\nwindow.location.replace(self['location']['href'])\nself.location.assign(self['location']['href'])\nself.location.replace(self['location']['href'])\nlocation['assign'](self['location']['href'])\nlocation['replace'](self['location']['href'])\nwindow.location['assign'](self['location']['href'])\nwindow.location['replace'](self['location']['href'])\nwindow['location'].assign(self['location']['href'])\nwindow['location'].replace(self['location']['href'])\nwindow['location']['assign'](self['location']['href'])\nwindow['location']['replace'](self['location']['href'])\nself.location['assign'](self['location']['href'])\nself.location['replace'](self['location']['href'])\nself['location'].assign(self['location']['href'])\nself['location'].replace(self['location']['href'])\nself['location']['assign'](self['location']['href'])\nself['location']['replace'](self['location']['href'])\nself.location['href'] = location\nself.location['href'] = location.href\nself.location['href'] = window.location\nself.location['href'] = self.location\nself.location['href'] = window.location.href\nself.location['href'] = self.location.href\nself.location['href'] = location['href']\nself.location['href'] = window['location']\nself.location['href'] = window['location'].href\nself.location['href'] = window['location']['href']\nself.location['href'] = window.location['href']\nself.location['href'] = self['location']\nself.location['href'] = self['location'].href\nself.location['href'] = self['location']['href']\nself.location['href'] = self.location['href']\nlocation.assign(self.location['href'])\nlocation.replace(self.location['href'])\nwindow.location.assign(self.location['href'])\nwindow.location.replace(self.location['href'])\nself.location.assign(self.location['href'])\nself.location.replace(self.location['href'])\nlocation['assign'](self.location['href'])\nlocation['replace'](self.location['href'])\nwindow.location['assign'](self.location['href'])\nwindow.location['replace'](self.location['href'])\nwindow['location'].assign(self.location['href'])\nwindow['location'].replace(self.location['href'])\nwindow['location']['assign'](self.location['href'])\nwindow['location']['replace'](self.location['href'])\nself.location['assign'](self.location['href'])\nself.location['replace'](self.location['href'])\nself['location'].assign(self.location['href'])\nself['location'].replace(self.location['href'])\nself['location']['assign'](self.location['href'])\nself['location']['replace'](self.location['href'])\nlocation.reload()\nlocation['reload']()\nwindow.location.reload()\nwindow['location'].reload()\nwindow.location['reload']()\nwindow['location']['reload']()\nself.location.reload()\nself['location'].reload()\nself.location['reload']()\nself['location']['reload']()\n```\n","source":"_posts/534-other-ways-to-reload-the-page-with-JavaScript.md","raw":"---\ntitle: 534 other ways to reload the page with JavaScript\ntags:\n  - javascript\n  - Web开发\ntoc: false\ndate: 2019-06-14 18:34:45\n---\n\n```javascript\nlocation = location\nlocation = location.href\nlocation = window.location\nlocation = self.location\nlocation = window.location.href\nlocation = self.location.href\nlocation = location['href']\nlocation = window['location']\nlocation = window['location'].href\nlocation = window['location']['href']\nlocation = window.location['href']\nlocation = self['location']\nlocation = self['location'].href\nlocation = self['location']['href']\nlocation = self.location['href']\nlocation.assign(location)\nlocation.replace(location)\nwindow.location.assign(location)\nwindow.location.replace(location)\nself.location.assign(location)\nself.location.replace(location)\nlocation['assign'](location)\nlocation['replace'](location)\nwindow.location['assign'](location)\nwindow.location['replace'](location)\nwindow['location'].assign(location)\nwindow['location'].replace(location)\nwindow['location']['assign'](location)\nwindow['location']['replace'](location)\nself.location['assign'](location)\nself.location['replace'](location)\nself['location'].assign(location)\nself['location'].replace(location)\nself['location']['assign'](location)\nself['location']['replace'](location)\nlocation.href = location\nlocation.href = location.href\nlocation.href = window.location\nlocation.href = self.location\nlocation.href = window.location.href\nlocation.href = self.location.href\nlocation.href = location['href']\nlocation.href = window['location']\nlocation.href = window['location'].href\nlocation.href = window['location']['href']\nlocation.href = window.location['href']\nlocation.href = self['location']\nlocation.href = self['location'].href\nlocation.href = self['location']['href']\nlocation.href = self.location['href']\nlocation.assign(location.href)\nlocation.replace(location.href)\nwindow.location.assign(location.href)\nwindow.location.replace(location.href)\nself.location.assign(location.href)\nself.location.replace(location.href)\nlocation['assign'](location.href)\nlocation['replace'](location.href)\nwindow.location['assign'](location.href)\nwindow.location['replace'](location.href)\nwindow['location'].assign(location.href)\nwindow['location'].replace(location.href)\nwindow['location']['assign'](location.href)\nwindow['location']['replace'](location.href)\nself.location['assign'](location.href)\nself.location['replace'](location.href)\nself['location'].assign(location.href)\nself['location'].replace(location.href)\nself['location']['assign'](location.href)\nself['location']['replace'](location.href)\nwindow.location = location\nwindow.location = location.href\nwindow.location = window.location\nwindow.location = self.location\nwindow.location = window.location.href\nwindow.location = self.location.href\nwindow.location = location['href']\nwindow.location = window['location']\nwindow.location = window['location'].href\nwindow.location = window['location']['href']\nwindow.location = window.location['href']\nwindow.location = self['location']\nwindow.location = self['location'].href\nwindow.location = self['location']['href']\nwindow.location = self.location['href']\nlocation.assign(window.location)\nlocation.replace(window.location)\nwindow.location.assign(window.location)\nwindow.location.replace(window.location)\nself.location.assign(window.location)\nself.location.replace(window.location)\nlocation['assign'](window.location)\nlocation['replace'](window.location)\nwindow.location['assign'](window.location)\nwindow.location['replace'](window.location)\nwindow['location'].assign(window.location)\nwindow['location'].replace(window.location)\nwindow['location']['assign'](window.location)\nwindow['location']['replace'](window.location)\nself.location['assign'](window.location)\nself.location['replace'](window.location)\nself['location'].assign(window.location)\nself['location'].replace(window.location)\nself['location']['assign'](window.location)\nself['location']['replace'](window.location)\nself.location = location\nself.location = location.href\nself.location = window.location\nself.location = self.location\nself.location = window.location.href\nself.location = self.location.href\nself.location = location['href']\nself.location = window['location']\nself.location = window['location'].href\nself.location = window['location']['href']\nself.location = window.location['href']\nself.location = self['location']\nself.location = self['location'].href\nself.location = self['location']['href']\nself.location = self.location['href']\nlocation.assign(self.location)\nlocation.replace(self.location)\nwindow.location.assign(self.location)\nwindow.location.replace(self.location)\nself.location.assign(self.location)\nself.location.replace(self.location)\nlocation['assign'](self.location)\nlocation['replace'](self.location)\nwindow.location['assign'](self.location)\nwindow.location['replace'](self.location)\nwindow['location'].assign(self.location)\nwindow['location'].replace(self.location)\nwindow['location']['assign'](self.location)\nwindow['location']['replace'](self.location)\nself.location['assign'](self.location)\nself.location['replace'](self.location)\nself['location'].assign(self.location)\nself['location'].replace(self.location)\nself['location']['assign'](self.location)\nself['location']['replace'](self.location)\nwindow.location.href = location\nwindow.location.href = location.href\nwindow.location.href = window.location\nwindow.location.href = self.location\nwindow.location.href = window.location.href\nwindow.location.href = self.location.href\nwindow.location.href = location['href']\nwindow.location.href = window['location']\nwindow.location.href = window['location'].href\nwindow.location.href = window['location']['href']\nwindow.location.href = window.location['href']\nwindow.location.href = self['location']\nwindow.location.href = self['location'].href\nwindow.location.href = self['location']['href']\nwindow.location.href = self.location['href']\nlocation.assign(window.location.href)\nlocation.replace(window.location.href)\nwindow.location.assign(window.location.href)\nwindow.location.replace(window.location.href)\nself.location.assign(window.location.href)\nself.location.replace(window.location.href)\nlocation['assign'](window.location.href)\nlocation['replace'](window.location.href)\nwindow.location['assign'](window.location.href)\nwindow.location['replace'](window.location.href)\nwindow['location'].assign(window.location.href)\nwindow['location'].replace(window.location.href)\nwindow['location']['assign'](window.location.href)\nwindow['location']['replace'](window.location.href)\nself.location['assign'](window.location.href)\nself.location['replace'](window.location.href)\nself['location'].assign(window.location.href)\nself['location'].replace(window.location.href)\nself['location']['assign'](window.location.href)\nself['location']['replace'](window.location.href)\nself.location.href = location\nself.location.href = location.href\nself.location.href = window.location\nself.location.href = self.location\nself.location.href = window.location.href\nself.location.href = self.location.href\nself.location.href = location['href']\nself.location.href = window['location']\nself.location.href = window['location'].href\nself.location.href = window['location']['href']\nself.location.href = window.location['href']\nself.location.href = self['location']\nself.location.href = self['location'].href\nself.location.href = self['location']['href']\nself.location.href = self.location['href']\nlocation.assign(self.location.href)\nlocation.replace(self.location.href)\nwindow.location.assign(self.location.href)\nwindow.location.replace(self.location.href)\nself.location.assign(self.location.href)\nself.location.replace(self.location.href)\nlocation['assign'](self.location.href)\nlocation['replace'](self.location.href)\nwindow.location['assign'](self.location.href)\nwindow.location['replace'](self.location.href)\nwindow['location'].assign(self.location.href)\nwindow['location'].replace(self.location.href)\nwindow['location']['assign'](self.location.href)\nwindow['location']['replace'](self.location.href)\nself.location['assign'](self.location.href)\nself.location['replace'](self.location.href)\nself['location'].assign(self.location.href)\nself['location'].replace(self.location.href)\nself['location']['assign'](self.location.href)\nself['location']['replace'](self.location.href)\nlocation['href'] = location\nlocation['href'] = location.href\nlocation['href'] = window.location\nlocation['href'] = self.location\nlocation['href'] = window.location.href\nlocation['href'] = self.location.href\nlocation['href'] = location['href']\nlocation['href'] = window['location']\nlocation['href'] = window['location'].href\nlocation['href'] = window['location']['href']\nlocation['href'] = window.location['href']\nlocation['href'] = self['location']\nlocation['href'] = self['location'].href\nlocation['href'] = self['location']['href']\nlocation['href'] = self.location['href']\nlocation.assign(location['href'])\nlocation.replace(location['href'])\nwindow.location.assign(location['href'])\nwindow.location.replace(location['href'])\nself.location.assign(location['href'])\nself.location.replace(location['href'])\nlocation['assign'](location['href'])\nlocation['replace'](location['href'])\nwindow.location['assign'](location['href'])\nwindow.location['replace'](location['href'])\nwindow['location'].assign(location['href'])\nwindow['location'].replace(location['href'])\nwindow['location']['assign'](location['href'])\nwindow['location']['replace'](location['href'])\nself.location['assign'](location['href'])\nself.location['replace'](location['href'])\nself['location'].assign(location['href'])\nself['location'].replace(location['href'])\nself['location']['assign'](location['href'])\nself['location']['replace'](location['href'])\nwindow['location'] = location\nwindow['location'] = location.href\nwindow['location'] = window.location\nwindow['location'] = self.location\nwindow['location'] = window.location.href\nwindow['location'] = self.location.href\nwindow['location'] = location['href']\nwindow['location'] = window['location']\nwindow['location'] = window['location'].href\nwindow['location'] = window['location']['href']\nwindow['location'] = window.location['href']\nwindow['location'] = self['location']\nwindow['location'] = self['location'].href\nwindow['location'] = self['location']['href']\nwindow['location'] = self.location['href']\nlocation.assign(window['location'])\nlocation.replace(window['location'])\nwindow.location.assign(window['location'])\nwindow.location.replace(window['location'])\nself.location.assign(window['location'])\nself.location.replace(window['location'])\nlocation['assign'](window['location'])\nlocation['replace'](window['location'])\nwindow.location['assign'](window['location'])\nwindow.location['replace'](window['location'])\nwindow['location'].assign(window['location'])\nwindow['location'].replace(window['location'])\nwindow['location']['assign'](window['location'])\nwindow['location']['replace'](window['location'])\nself.location['assign'](window['location'])\nself.location['replace'](window['location'])\nself['location'].assign(window['location'])\nself['location'].replace(window['location'])\nself['location']['assign'](window['location'])\nself['location']['replace'](window['location'])\nwindow['location'].href = location\nwindow['location'].href = location.href\nwindow['location'].href = window.location\nwindow['location'].href = self.location\nwindow['location'].href = window.location.href\nwindow['location'].href = self.location.href\nwindow['location'].href = location['href']\nwindow['location'].href = window['location']\nwindow['location'].href = window['location'].href\nwindow['location'].href = window['location']['href']\nwindow['location'].href = window.location['href']\nwindow['location'].href = self['location']\nwindow['location'].href = self['location'].href\nwindow['location'].href = self['location']['href']\nwindow['location'].href = self.location['href']\nlocation.assign(window['location'].href)\nlocation.replace(window['location'].href)\nwindow.location.assign(window['location'].href)\nwindow.location.replace(window['location'].href)\nself.location.assign(window['location'].href)\nself.location.replace(window['location'].href)\nlocation['assign'](window['location'].href)\nlocation['replace'](window['location'].href)\nwindow.location['assign'](window['location'].href)\nwindow.location['replace'](window['location'].href)\nwindow['location'].assign(window['location'].href)\nwindow['location'].replace(window['location'].href)\nwindow['location']['assign'](window['location'].href)\nwindow['location']['replace'](window['location'].href)\nself.location['assign'](window['location'].href)\nself.location['replace'](window['location'].href)\nself['location'].assign(window['location'].href)\nself['location'].replace(window['location'].href)\nself['location']['assign'](window['location'].href)\nself['location']['replace'](window['location'].href)\nwindow['location']['href'] = location\nwindow['location']['href'] = location.href\nwindow['location']['href'] = window.location\nwindow['location']['href'] = self.location\nwindow['location']['href'] = window.location.href\nwindow['location']['href'] = self.location.href\nwindow['location']['href'] = location['href']\nwindow['location']['href'] = window['location']\nwindow['location']['href'] = window['location'].href\nwindow['location']['href'] = window['location']['href']\nwindow['location']['href'] = window.location['href']\nwindow['location']['href'] = self['location']\nwindow['location']['href'] = self['location'].href\nwindow['location']['href'] = self['location']['href']\nwindow['location']['href'] = self.location['href']\nlocation.assign(window['location']['href'])\nlocation.replace(window['location']['href'])\nwindow.location.assign(window['location']['href'])\nwindow.location.replace(window['location']['href'])\nself.location.assign(window['location']['href'])\nself.location.replace(window['location']['href'])\nlocation['assign'](window['location']['href'])\nlocation['replace'](window['location']['href'])\nwindow.location['assign'](window['location']['href'])\nwindow.location['replace'](window['location']['href'])\nwindow['location'].assign(window['location']['href'])\nwindow['location'].replace(window['location']['href'])\nwindow['location']['assign'](window['location']['href'])\nwindow['location']['replace'](window['location']['href'])\nself.location['assign'](window['location']['href'])\nself.location['replace'](window['location']['href'])\nself['location'].assign(window['location']['href'])\nself['location'].replace(window['location']['href'])\nself['location']['assign'](window['location']['href'])\nself['location']['replace'](window['location']['href'])\nwindow.location['href'] = location\nwindow.location['href'] = location.href\nwindow.location['href'] = window.location\nwindow.location['href'] = self.location\nwindow.location['href'] = window.location.href\nwindow.location['href'] = self.location.href\nwindow.location['href'] = location['href']\nwindow.location['href'] = window['location']\nwindow.location['href'] = window['location'].href\nwindow.location['href'] = window['location']['href']\nwindow.location['href'] = window.location['href']\nwindow.location['href'] = self['location']\nwindow.location['href'] = self['location'].href\nwindow.location['href'] = self['location']['href']\nwindow.location['href'] = self.location['href']\nlocation.assign(window.location['href'])\nlocation.replace(window.location['href'])\nwindow.location.assign(window.location['href'])\nwindow.location.replace(window.location['href'])\nself.location.assign(window.location['href'])\nself.location.replace(window.location['href'])\nlocation['assign'](window.location['href'])\nlocation['replace'](window.location['href'])\nwindow.location['assign'](window.location['href'])\nwindow.location['replace'](window.location['href'])\nwindow['location'].assign(window.location['href'])\nwindow['location'].replace(window.location['href'])\nwindow['location']['assign'](window.location['href'])\nwindow['location']['replace'](window.location['href'])\nself.location['assign'](window.location['href'])\nself.location['replace'](window.location['href'])\nself['location'].assign(window.location['href'])\nself['location'].replace(window.location['href'])\nself['location']['assign'](window.location['href'])\nself['location']['replace'](window.location['href'])\nself['location'] = location\nself['location'] = location.href\nself['location'] = window.location\nself['location'] = self.location\nself['location'] = window.location.href\nself['location'] = self.location.href\nself['location'] = location['href']\nself['location'] = window['location']\nself['location'] = window['location'].href\nself['location'] = window['location']['href']\nself['location'] = window.location['href']\nself['location'] = self['location']\nself['location'] = self['location'].href\nself['location'] = self['location']['href']\nself['location'] = self.location['href']\nlocation.assign(self['location'])\nlocation.replace(self['location'])\nwindow.location.assign(self['location'])\nwindow.location.replace(self['location'])\nself.location.assign(self['location'])\nself.location.replace(self['location'])\nlocation['assign'](self['location'])\nlocation['replace'](self['location'])\nwindow.location['assign'](self['location'])\nwindow.location['replace'](self['location'])\nwindow['location'].assign(self['location'])\nwindow['location'].replace(self['location'])\nwindow['location']['assign'](self['location'])\nwindow['location']['replace'](self['location'])\nself.location['assign'](self['location'])\nself.location['replace'](self['location'])\nself['location'].assign(self['location'])\nself['location'].replace(self['location'])\nself['location']['assign'](self['location'])\nself['location']['replace'](self['location'])\nself['location'].href = location\nself['location'].href = location.href\nself['location'].href = window.location\nself['location'].href = self.location\nself['location'].href = window.location.href\nself['location'].href = self.location.href\nself['location'].href = location['href']\nself['location'].href = window['location']\nself['location'].href = window['location'].href\nself['location'].href = window['location']['href']\nself['location'].href = window.location['href']\nself['location'].href = self['location']\nself['location'].href = self['location'].href\nself['location'].href = self['location']['href']\nself['location'].href = self.location['href']\nlocation.assign(self['location'].href)\nlocation.replace(self['location'].href)\nwindow.location.assign(self['location'].href)\nwindow.location.replace(self['location'].href)\nself.location.assign(self['location'].href)\nself.location.replace(self['location'].href)\nlocation['assign'](self['location'].href)\nlocation['replace'](self['location'].href)\nwindow.location['assign'](self['location'].href)\nwindow.location['replace'](self['location'].href)\nwindow['location'].assign(self['location'].href)\nwindow['location'].replace(self['location'].href)\nwindow['location']['assign'](self['location'].href)\nwindow['location']['replace'](self['location'].href)\nself.location['assign'](self['location'].href)\nself.location['replace'](self['location'].href)\nself['location'].assign(self['location'].href)\nself['location'].replace(self['location'].href)\nself['location']['assign'](self['location'].href)\nself['location']['replace'](self['location'].href)\nself['location']['href'] = location\nself['location']['href'] = location.href\nself['location']['href'] = window.location\nself['location']['href'] = self.location\nself['location']['href'] = window.location.href\nself['location']['href'] = self.location.href\nself['location']['href'] = location['href']\nself['location']['href'] = window['location']\nself['location']['href'] = window['location'].href\nself['location']['href'] = window['location']['href']\nself['location']['href'] = window.location['href']\nself['location']['href'] = self['location']\nself['location']['href'] = self['location'].href\nself['location']['href'] = self['location']['href']\nself['location']['href'] = self.location['href']\nlocation.assign(self['location']['href'])\nlocation.replace(self['location']['href'])\nwindow.location.assign(self['location']['href'])\nwindow.location.replace(self['location']['href'])\nself.location.assign(self['location']['href'])\nself.location.replace(self['location']['href'])\nlocation['assign'](self['location']['href'])\nlocation['replace'](self['location']['href'])\nwindow.location['assign'](self['location']['href'])\nwindow.location['replace'](self['location']['href'])\nwindow['location'].assign(self['location']['href'])\nwindow['location'].replace(self['location']['href'])\nwindow['location']['assign'](self['location']['href'])\nwindow['location']['replace'](self['location']['href'])\nself.location['assign'](self['location']['href'])\nself.location['replace'](self['location']['href'])\nself['location'].assign(self['location']['href'])\nself['location'].replace(self['location']['href'])\nself['location']['assign'](self['location']['href'])\nself['location']['replace'](self['location']['href'])\nself.location['href'] = location\nself.location['href'] = location.href\nself.location['href'] = window.location\nself.location['href'] = self.location\nself.location['href'] = window.location.href\nself.location['href'] = self.location.href\nself.location['href'] = location['href']\nself.location['href'] = window['location']\nself.location['href'] = window['location'].href\nself.location['href'] = window['location']['href']\nself.location['href'] = window.location['href']\nself.location['href'] = self['location']\nself.location['href'] = self['location'].href\nself.location['href'] = self['location']['href']\nself.location['href'] = self.location['href']\nlocation.assign(self.location['href'])\nlocation.replace(self.location['href'])\nwindow.location.assign(self.location['href'])\nwindow.location.replace(self.location['href'])\nself.location.assign(self.location['href'])\nself.location.replace(self.location['href'])\nlocation['assign'](self.location['href'])\nlocation['replace'](self.location['href'])\nwindow.location['assign'](self.location['href'])\nwindow.location['replace'](self.location['href'])\nwindow['location'].assign(self.location['href'])\nwindow['location'].replace(self.location['href'])\nwindow['location']['assign'](self.location['href'])\nwindow['location']['replace'](self.location['href'])\nself.location['assign'](self.location['href'])\nself.location['replace'](self.location['href'])\nself['location'].assign(self.location['href'])\nself['location'].replace(self.location['href'])\nself['location']['assign'](self.location['href'])\nself['location']['replace'](self.location['href'])\nlocation.reload()\nlocation['reload']()\nwindow.location.reload()\nwindow['location'].reload()\nwindow.location['reload']()\nwindow['location']['reload']()\nself.location.reload()\nself['location'].reload()\nself.location['reload']()\nself['location']['reload']()\n```\n","slug":"534-other-ways-to-reload-the-page-with-JavaScript","published":1,"updated":"2019-11-07T02:13:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznw80005h5s6t6yetmah","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location = location</span><br><span class=\"line\">location = location.href</span><br><span class=\"line\">location = <span class=\"built_in\">window</span>.location</span><br><span class=\"line\">location = self.location</span><br><span class=\"line\">location = <span class=\"built_in\">window</span>.location.href</span><br><span class=\"line\">location = self.location.href</span><br><span class=\"line\">location = location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>]</span><br><span class=\"line\">location = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\">location = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location = <span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location = self[<span class=\"string\">'location'</span>]</span><br><span class=\"line\">location = self[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\">location = self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location = self.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location.assign(location)</span><br><span class=\"line\">location.replace(location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.assign(location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.replace(location)</span><br><span class=\"line\">self.location.assign(location)</span><br><span class=\"line\">self.location.replace(location)</span><br><span class=\"line\">location[<span class=\"string\">'assign'</span>](location)</span><br><span class=\"line\">location[<span class=\"string\">'replace'</span>](location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'assign'</span>](location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'replace'</span>](location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].assign(location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].replace(location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](location)</span><br><span class=\"line\">self.location[<span class=\"string\">'assign'</span>](location)</span><br><span class=\"line\">self.location[<span class=\"string\">'replace'</span>](location)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].assign(location)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].replace(location)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](location)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](location)</span><br><span class=\"line\">location.href = location</span><br><span class=\"line\">location.href = location.href</span><br><span class=\"line\">location.href = <span class=\"built_in\">window</span>.location</span><br><span class=\"line\">location.href = self.location</span><br><span class=\"line\">location.href = <span class=\"built_in\">window</span>.location.href</span><br><span class=\"line\">location.href = self.location.href</span><br><span class=\"line\">location.href = location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location.href = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>]</span><br><span class=\"line\">location.href = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\">location.href = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location.href = <span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location.href = self[<span class=\"string\">'location'</span>]</span><br><span class=\"line\">location.href = self[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\">location.href = self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location.href = self.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location.assign(location.href)</span><br><span class=\"line\">location.replace(location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.assign(location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.replace(location.href)</span><br><span class=\"line\">self.location.assign(location.href)</span><br><span class=\"line\">self.location.replace(location.href)</span><br><span class=\"line\">location[<span class=\"string\">'assign'</span>](location.href)</span><br><span class=\"line\">location[<span class=\"string\">'replace'</span>](location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'assign'</span>](location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'replace'</span>](location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].assign(location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].replace(location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](location.href)</span><br><span class=\"line\">self.location[<span class=\"string\">'assign'</span>](location.href)</span><br><span class=\"line\">self.location[<span class=\"string\">'replace'</span>](location.href)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].assign(location.href)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].replace(location.href)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](location.href)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location = location</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location = location.href</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location = <span class=\"built_in\">window</span>.location</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location = self.location</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location = <span class=\"built_in\">window</span>.location.href</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location = self.location.href</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location = location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location = <span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location = self[<span class=\"string\">'location'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location = self[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location = self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location = self.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location.assign(<span class=\"built_in\">window</span>.location)</span><br><span class=\"line\">location.replace(<span class=\"built_in\">window</span>.location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.assign(<span class=\"built_in\">window</span>.location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.replace(<span class=\"built_in\">window</span>.location)</span><br><span class=\"line\">self.location.assign(<span class=\"built_in\">window</span>.location)</span><br><span class=\"line\">self.location.replace(<span class=\"built_in\">window</span>.location)</span><br><span class=\"line\">location[<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>.location)</span><br><span class=\"line\">location[<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>.location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>.location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>.location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].assign(<span class=\"built_in\">window</span>.location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].replace(<span class=\"built_in\">window</span>.location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>.location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>.location)</span><br><span class=\"line\">self.location[<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>.location)</span><br><span class=\"line\">self.location[<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>.location)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].assign(<span class=\"built_in\">window</span>.location)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].replace(<span class=\"built_in\">window</span>.location)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>.location)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>.location)</span><br><span class=\"line\">self.location = location</span><br><span class=\"line\">self.location = location.href</span><br><span class=\"line\">self.location = <span class=\"built_in\">window</span>.location</span><br><span class=\"line\">self.location = self.location</span><br><span class=\"line\">self.location = <span class=\"built_in\">window</span>.location.href</span><br><span class=\"line\">self.location = self.location.href</span><br><span class=\"line\">self.location = location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self.location = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>]</span><br><span class=\"line\">self.location = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\">self.location = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self.location = <span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self.location = self[<span class=\"string\">'location'</span>]</span><br><span class=\"line\">self.location = self[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\">self.location = self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self.location = self.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location.assign(self.location)</span><br><span class=\"line\">location.replace(self.location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.assign(self.location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.replace(self.location)</span><br><span class=\"line\">self.location.assign(self.location)</span><br><span class=\"line\">self.location.replace(self.location)</span><br><span class=\"line\">location[<span class=\"string\">'assign'</span>](self.location)</span><br><span class=\"line\">location[<span class=\"string\">'replace'</span>](self.location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'assign'</span>](self.location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'replace'</span>](self.location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].assign(self.location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].replace(self.location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](self.location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](self.location)</span><br><span class=\"line\">self.location[<span class=\"string\">'assign'</span>](self.location)</span><br><span class=\"line\">self.location[<span class=\"string\">'replace'</span>](self.location)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].assign(self.location)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].replace(self.location)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](self.location)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](self.location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.href = location</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.href = location.href</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.href = <span class=\"built_in\">window</span>.location</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.href = self.location</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.href = <span class=\"built_in\">window</span>.location.href</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.href = self.location.href</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.href = location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.href = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.href = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.href = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.href = <span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.href = self[<span class=\"string\">'location'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.href = self[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.href = self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.href = self.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location.assign(<span class=\"built_in\">window</span>.location.href)</span><br><span class=\"line\">location.replace(<span class=\"built_in\">window</span>.location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.assign(<span class=\"built_in\">window</span>.location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.replace(<span class=\"built_in\">window</span>.location.href)</span><br><span class=\"line\">self.location.assign(<span class=\"built_in\">window</span>.location.href)</span><br><span class=\"line\">self.location.replace(<span class=\"built_in\">window</span>.location.href)</span><br><span class=\"line\">location[<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>.location.href)</span><br><span class=\"line\">location[<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>.location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>.location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>.location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].assign(<span class=\"built_in\">window</span>.location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].replace(<span class=\"built_in\">window</span>.location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>.location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>.location.href)</span><br><span class=\"line\">self.location[<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>.location.href)</span><br><span class=\"line\">self.location[<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>.location.href)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].assign(<span class=\"built_in\">window</span>.location.href)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].replace(<span class=\"built_in\">window</span>.location.href)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>.location.href)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>.location.href)</span><br><span class=\"line\">self.location.href = location</span><br><span class=\"line\">self.location.href = location.href</span><br><span class=\"line\">self.location.href = <span class=\"built_in\">window</span>.location</span><br><span class=\"line\">self.location.href = self.location</span><br><span class=\"line\">self.location.href = <span class=\"built_in\">window</span>.location.href</span><br><span class=\"line\">self.location.href = self.location.href</span><br><span class=\"line\">self.location.href = location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self.location.href = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>]</span><br><span class=\"line\">self.location.href = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\">self.location.href = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self.location.href = <span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self.location.href = self[<span class=\"string\">'location'</span>]</span><br><span class=\"line\">self.location.href = self[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\">self.location.href = self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self.location.href = self.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location.assign(self.location.href)</span><br><span class=\"line\">location.replace(self.location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.assign(self.location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.replace(self.location.href)</span><br><span class=\"line\">self.location.assign(self.location.href)</span><br><span class=\"line\">self.location.replace(self.location.href)</span><br><span class=\"line\">location[<span class=\"string\">'assign'</span>](self.location.href)</span><br><span class=\"line\">location[<span class=\"string\">'replace'</span>](self.location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'assign'</span>](self.location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'replace'</span>](self.location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].assign(self.location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].replace(self.location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](self.location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](self.location.href)</span><br><span class=\"line\">self.location[<span class=\"string\">'assign'</span>](self.location.href)</span><br><span class=\"line\">self.location[<span class=\"string\">'replace'</span>](self.location.href)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].assign(self.location.href)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].replace(self.location.href)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](self.location.href)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](self.location.href)</span><br><span class=\"line\">location[<span class=\"string\">'href'</span>] = location</span><br><span class=\"line\">location[<span class=\"string\">'href'</span>] = location.href</span><br><span class=\"line\">location[<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>.location</span><br><span class=\"line\">location[<span class=\"string\">'href'</span>] = self.location</span><br><span class=\"line\">location[<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>.location.href</span><br><span class=\"line\">location[<span class=\"string\">'href'</span>] = self.location.href</span><br><span class=\"line\">location[<span class=\"string\">'href'</span>] = location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location[<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>]</span><br><span class=\"line\">location[<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\">location[<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location[<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location[<span class=\"string\">'href'</span>] = self[<span class=\"string\">'location'</span>]</span><br><span class=\"line\">location[<span class=\"string\">'href'</span>] = self[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\">location[<span class=\"string\">'href'</span>] = self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location[<span class=\"string\">'href'</span>] = self.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location.assign(location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">location.replace(location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.assign(location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.replace(location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self.location.assign(location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self.location.replace(location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">location[<span class=\"string\">'assign'</span>](location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">location[<span class=\"string\">'replace'</span>](location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'assign'</span>](location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'replace'</span>](location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].assign(location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].replace(location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self.location[<span class=\"string\">'assign'</span>](location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self.location[<span class=\"string\">'replace'</span>](location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].assign(location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].replace(location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>] = location</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>] = location.href</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>] = <span class=\"built_in\">window</span>.location</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>] = self.location</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>] = <span class=\"built_in\">window</span>.location.href</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>] = self.location.href</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>] = location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>] = <span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>] = self[<span class=\"string\">'location'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>] = self[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>] = self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>] = self.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location.assign(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">location.replace(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.assign(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.replace(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">self.location.assign(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">self.location.replace(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">location[<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">location[<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].assign(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].replace(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">self.location[<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">self.location[<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].assign(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].replace(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href = location</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href = location.href</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href = <span class=\"built_in\">window</span>.location</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href = self.location</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href = <span class=\"built_in\">window</span>.location.href</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href = self.location.href</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href = location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href = <span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href = self[<span class=\"string\">'location'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href = self[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href = self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href = self.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location.assign(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">location.replace(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.assign(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.replace(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">self.location.assign(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">self.location.replace(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">location[<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">location[<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].assign(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].replace(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">self.location[<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">self.location[<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].assign(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].replace(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = location</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = location.href</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>.location</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = self.location</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>.location.href</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = self.location.href</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = self[<span class=\"string\">'location'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = self[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = self.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location.assign(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">location.replace(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.assign(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.replace(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self.location.assign(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self.location.replace(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">location[<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">location[<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].assign(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].replace(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self.location[<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self.location[<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].assign(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].replace(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>] = location</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>] = location.href</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>.location</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>] = self.location</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>.location.href</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>] = self.location.href</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>] = location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>] = self[<span class=\"string\">'location'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>] = self[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>] = self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>] = self.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location.assign(<span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">location.replace(<span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.assign(<span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.replace(<span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self.location.assign(<span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self.location.replace(<span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">location[<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">location[<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].assign(<span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].replace(<span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self.location[<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self.location[<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].assign(<span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].replace(<span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>] = location</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>] = location.href</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>] = <span class=\"built_in\">window</span>.location</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>] = self.location</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>] = <span class=\"built_in\">window</span>.location.href</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>] = self.location.href</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>] = location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>]</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>] = <span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>] = self[<span class=\"string\">'location'</span>]</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>] = self[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>] = self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>] = self.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location.assign(self[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">location.replace(self[<span class=\"string\">'location'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.assign(self[<span class=\"string\">'location'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.replace(self[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">self.location.assign(self[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">self.location.replace(self[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">location[<span class=\"string\">'assign'</span>](self[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">location[<span class=\"string\">'replace'</span>](self[<span class=\"string\">'location'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'assign'</span>](self[<span class=\"string\">'location'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'replace'</span>](self[<span class=\"string\">'location'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].assign(self[<span class=\"string\">'location'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].replace(self[<span class=\"string\">'location'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](self[<span class=\"string\">'location'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](self[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">self.location[<span class=\"string\">'assign'</span>](self[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">self.location[<span class=\"string\">'replace'</span>](self[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].assign(self[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].replace(self[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](self[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](self[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].href = location</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].href = location.href</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].href = <span class=\"built_in\">window</span>.location</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].href = self.location</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].href = <span class=\"built_in\">window</span>.location.href</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].href = self.location.href</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].href = location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].href = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>]</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].href = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].href = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].href = <span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].href = self[<span class=\"string\">'location'</span>]</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].href = self[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].href = self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].href = self.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location.assign(self[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">location.replace(self[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.assign(self[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.replace(self[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">self.location.assign(self[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">self.location.replace(self[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">location[<span class=\"string\">'assign'</span>](self[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">location[<span class=\"string\">'replace'</span>](self[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'assign'</span>](self[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'replace'</span>](self[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].assign(self[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].replace(self[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](self[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](self[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">self.location[<span class=\"string\">'assign'</span>](self[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">self.location[<span class=\"string\">'replace'</span>](self[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].assign(self[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].replace(self[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](self[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](self[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = location</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = location.href</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>.location</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = self.location</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>.location.href</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = self.location.href</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>]</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = self[<span class=\"string\">'location'</span>]</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = self[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = self.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location.assign(self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">location.replace(self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.assign(self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.replace(self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self.location.assign(self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self.location.replace(self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">location[<span class=\"string\">'assign'</span>](self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">location[<span class=\"string\">'replace'</span>](self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'assign'</span>](self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'replace'</span>](self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].assign(self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].replace(self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self.location[<span class=\"string\">'assign'</span>](self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self.location[<span class=\"string\">'replace'</span>](self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].assign(self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].replace(self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self.location[<span class=\"string\">'href'</span>] = location</span><br><span class=\"line\">self.location[<span class=\"string\">'href'</span>] = location.href</span><br><span class=\"line\">self.location[<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>.location</span><br><span class=\"line\">self.location[<span class=\"string\">'href'</span>] = self.location</span><br><span class=\"line\">self.location[<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>.location.href</span><br><span class=\"line\">self.location[<span class=\"string\">'href'</span>] = self.location.href</span><br><span class=\"line\">self.location[<span class=\"string\">'href'</span>] = location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self.location[<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>]</span><br><span class=\"line\">self.location[<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\">self.location[<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self.location[<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self.location[<span class=\"string\">'href'</span>] = self[<span class=\"string\">'location'</span>]</span><br><span class=\"line\">self.location[<span class=\"string\">'href'</span>] = self[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\">self.location[<span class=\"string\">'href'</span>] = self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self.location[<span class=\"string\">'href'</span>] = self.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location.assign(self.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">location.replace(self.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.assign(self.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.replace(self.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self.location.assign(self.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self.location.replace(self.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">location[<span class=\"string\">'assign'</span>](self.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">location[<span class=\"string\">'replace'</span>](self.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'assign'</span>](self.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'replace'</span>](self.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].assign(self.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].replace(self.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](self.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](self.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self.location[<span class=\"string\">'assign'</span>](self.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self.location[<span class=\"string\">'replace'</span>](self.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].assign(self.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].replace(self.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](self.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](self.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">location.reload()</span><br><span class=\"line\">location[<span class=\"string\">'reload'</span>]()</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.reload()</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].reload()</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'reload'</span>]()</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'reload'</span>]()</span><br><span class=\"line\">self.location.reload()</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].reload()</span><br><span class=\"line\">self.location[<span class=\"string\">'reload'</span>]()</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'reload'</span>]()</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location = location</span><br><span class=\"line\">location = location.href</span><br><span class=\"line\">location = <span class=\"built_in\">window</span>.location</span><br><span class=\"line\">location = self.location</span><br><span class=\"line\">location = <span class=\"built_in\">window</span>.location.href</span><br><span class=\"line\">location = self.location.href</span><br><span class=\"line\">location = location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>]</span><br><span class=\"line\">location = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\">location = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location = <span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location = self[<span class=\"string\">'location'</span>]</span><br><span class=\"line\">location = self[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\">location = self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location = self.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location.assign(location)</span><br><span class=\"line\">location.replace(location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.assign(location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.replace(location)</span><br><span class=\"line\">self.location.assign(location)</span><br><span class=\"line\">self.location.replace(location)</span><br><span class=\"line\">location[<span class=\"string\">'assign'</span>](location)</span><br><span class=\"line\">location[<span class=\"string\">'replace'</span>](location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'assign'</span>](location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'replace'</span>](location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].assign(location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].replace(location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](location)</span><br><span class=\"line\">self.location[<span class=\"string\">'assign'</span>](location)</span><br><span class=\"line\">self.location[<span class=\"string\">'replace'</span>](location)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].assign(location)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].replace(location)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](location)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](location)</span><br><span class=\"line\">location.href = location</span><br><span class=\"line\">location.href = location.href</span><br><span class=\"line\">location.href = <span class=\"built_in\">window</span>.location</span><br><span class=\"line\">location.href = self.location</span><br><span class=\"line\">location.href = <span class=\"built_in\">window</span>.location.href</span><br><span class=\"line\">location.href = self.location.href</span><br><span class=\"line\">location.href = location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location.href = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>]</span><br><span class=\"line\">location.href = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\">location.href = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location.href = <span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location.href = self[<span class=\"string\">'location'</span>]</span><br><span class=\"line\">location.href = self[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\">location.href = self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location.href = self.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location.assign(location.href)</span><br><span class=\"line\">location.replace(location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.assign(location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.replace(location.href)</span><br><span class=\"line\">self.location.assign(location.href)</span><br><span class=\"line\">self.location.replace(location.href)</span><br><span class=\"line\">location[<span class=\"string\">'assign'</span>](location.href)</span><br><span class=\"line\">location[<span class=\"string\">'replace'</span>](location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'assign'</span>](location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'replace'</span>](location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].assign(location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].replace(location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](location.href)</span><br><span class=\"line\">self.location[<span class=\"string\">'assign'</span>](location.href)</span><br><span class=\"line\">self.location[<span class=\"string\">'replace'</span>](location.href)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].assign(location.href)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].replace(location.href)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](location.href)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location = location</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location = location.href</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location = <span class=\"built_in\">window</span>.location</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location = self.location</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location = <span class=\"built_in\">window</span>.location.href</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location = self.location.href</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location = location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location = <span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location = self[<span class=\"string\">'location'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location = self[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location = self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location = self.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location.assign(<span class=\"built_in\">window</span>.location)</span><br><span class=\"line\">location.replace(<span class=\"built_in\">window</span>.location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.assign(<span class=\"built_in\">window</span>.location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.replace(<span class=\"built_in\">window</span>.location)</span><br><span class=\"line\">self.location.assign(<span class=\"built_in\">window</span>.location)</span><br><span class=\"line\">self.location.replace(<span class=\"built_in\">window</span>.location)</span><br><span class=\"line\">location[<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>.location)</span><br><span class=\"line\">location[<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>.location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>.location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>.location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].assign(<span class=\"built_in\">window</span>.location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].replace(<span class=\"built_in\">window</span>.location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>.location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>.location)</span><br><span class=\"line\">self.location[<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>.location)</span><br><span class=\"line\">self.location[<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>.location)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].assign(<span class=\"built_in\">window</span>.location)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].replace(<span class=\"built_in\">window</span>.location)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>.location)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>.location)</span><br><span class=\"line\">self.location = location</span><br><span class=\"line\">self.location = location.href</span><br><span class=\"line\">self.location = <span class=\"built_in\">window</span>.location</span><br><span class=\"line\">self.location = self.location</span><br><span class=\"line\">self.location = <span class=\"built_in\">window</span>.location.href</span><br><span class=\"line\">self.location = self.location.href</span><br><span class=\"line\">self.location = location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self.location = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>]</span><br><span class=\"line\">self.location = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\">self.location = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self.location = <span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self.location = self[<span class=\"string\">'location'</span>]</span><br><span class=\"line\">self.location = self[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\">self.location = self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self.location = self.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location.assign(self.location)</span><br><span class=\"line\">location.replace(self.location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.assign(self.location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.replace(self.location)</span><br><span class=\"line\">self.location.assign(self.location)</span><br><span class=\"line\">self.location.replace(self.location)</span><br><span class=\"line\">location[<span class=\"string\">'assign'</span>](self.location)</span><br><span class=\"line\">location[<span class=\"string\">'replace'</span>](self.location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'assign'</span>](self.location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'replace'</span>](self.location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].assign(self.location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].replace(self.location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](self.location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](self.location)</span><br><span class=\"line\">self.location[<span class=\"string\">'assign'</span>](self.location)</span><br><span class=\"line\">self.location[<span class=\"string\">'replace'</span>](self.location)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].assign(self.location)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].replace(self.location)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](self.location)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](self.location)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.href = location</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.href = location.href</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.href = <span class=\"built_in\">window</span>.location</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.href = self.location</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.href = <span class=\"built_in\">window</span>.location.href</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.href = self.location.href</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.href = location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.href = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.href = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.href = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.href = <span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.href = self[<span class=\"string\">'location'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.href = self[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.href = self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.href = self.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location.assign(<span class=\"built_in\">window</span>.location.href)</span><br><span class=\"line\">location.replace(<span class=\"built_in\">window</span>.location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.assign(<span class=\"built_in\">window</span>.location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.replace(<span class=\"built_in\">window</span>.location.href)</span><br><span class=\"line\">self.location.assign(<span class=\"built_in\">window</span>.location.href)</span><br><span class=\"line\">self.location.replace(<span class=\"built_in\">window</span>.location.href)</span><br><span class=\"line\">location[<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>.location.href)</span><br><span class=\"line\">location[<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>.location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>.location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>.location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].assign(<span class=\"built_in\">window</span>.location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].replace(<span class=\"built_in\">window</span>.location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>.location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>.location.href)</span><br><span class=\"line\">self.location[<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>.location.href)</span><br><span class=\"line\">self.location[<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>.location.href)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].assign(<span class=\"built_in\">window</span>.location.href)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].replace(<span class=\"built_in\">window</span>.location.href)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>.location.href)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>.location.href)</span><br><span class=\"line\">self.location.href = location</span><br><span class=\"line\">self.location.href = location.href</span><br><span class=\"line\">self.location.href = <span class=\"built_in\">window</span>.location</span><br><span class=\"line\">self.location.href = self.location</span><br><span class=\"line\">self.location.href = <span class=\"built_in\">window</span>.location.href</span><br><span class=\"line\">self.location.href = self.location.href</span><br><span class=\"line\">self.location.href = location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self.location.href = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>]</span><br><span class=\"line\">self.location.href = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\">self.location.href = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self.location.href = <span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self.location.href = self[<span class=\"string\">'location'</span>]</span><br><span class=\"line\">self.location.href = self[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\">self.location.href = self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self.location.href = self.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location.assign(self.location.href)</span><br><span class=\"line\">location.replace(self.location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.assign(self.location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.replace(self.location.href)</span><br><span class=\"line\">self.location.assign(self.location.href)</span><br><span class=\"line\">self.location.replace(self.location.href)</span><br><span class=\"line\">location[<span class=\"string\">'assign'</span>](self.location.href)</span><br><span class=\"line\">location[<span class=\"string\">'replace'</span>](self.location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'assign'</span>](self.location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'replace'</span>](self.location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].assign(self.location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].replace(self.location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](self.location.href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](self.location.href)</span><br><span class=\"line\">self.location[<span class=\"string\">'assign'</span>](self.location.href)</span><br><span class=\"line\">self.location[<span class=\"string\">'replace'</span>](self.location.href)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].assign(self.location.href)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].replace(self.location.href)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](self.location.href)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](self.location.href)</span><br><span class=\"line\">location[<span class=\"string\">'href'</span>] = location</span><br><span class=\"line\">location[<span class=\"string\">'href'</span>] = location.href</span><br><span class=\"line\">location[<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>.location</span><br><span class=\"line\">location[<span class=\"string\">'href'</span>] = self.location</span><br><span class=\"line\">location[<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>.location.href</span><br><span class=\"line\">location[<span class=\"string\">'href'</span>] = self.location.href</span><br><span class=\"line\">location[<span class=\"string\">'href'</span>] = location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location[<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>]</span><br><span class=\"line\">location[<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\">location[<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location[<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location[<span class=\"string\">'href'</span>] = self[<span class=\"string\">'location'</span>]</span><br><span class=\"line\">location[<span class=\"string\">'href'</span>] = self[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\">location[<span class=\"string\">'href'</span>] = self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location[<span class=\"string\">'href'</span>] = self.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location.assign(location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">location.replace(location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.assign(location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.replace(location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self.location.assign(location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self.location.replace(location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">location[<span class=\"string\">'assign'</span>](location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">location[<span class=\"string\">'replace'</span>](location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'assign'</span>](location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'replace'</span>](location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].assign(location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].replace(location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self.location[<span class=\"string\">'assign'</span>](location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self.location[<span class=\"string\">'replace'</span>](location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].assign(location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].replace(location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>] = location</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>] = location.href</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>] = <span class=\"built_in\">window</span>.location</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>] = self.location</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>] = <span class=\"built_in\">window</span>.location.href</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>] = self.location.href</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>] = location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>] = <span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>] = self[<span class=\"string\">'location'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>] = self[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>] = self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>] = self.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location.assign(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">location.replace(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.assign(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.replace(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">self.location.assign(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">self.location.replace(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">location[<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">location[<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].assign(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].replace(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">self.location[<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">self.location[<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].assign(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].replace(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href = location</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href = location.href</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href = <span class=\"built_in\">window</span>.location</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href = self.location</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href = <span class=\"built_in\">window</span>.location.href</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href = self.location.href</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href = location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href = <span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href = self[<span class=\"string\">'location'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href = self[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href = self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href = self.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location.assign(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">location.replace(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.assign(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.replace(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">self.location.assign(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">self.location.replace(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">location[<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">location[<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].assign(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].replace(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">self.location[<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">self.location[<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].assign(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].replace(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = location</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = location.href</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>.location</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = self.location</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>.location.href</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = self.location.href</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = self[<span class=\"string\">'location'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = self[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = self.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location.assign(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">location.replace(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.assign(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.replace(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self.location.assign(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self.location.replace(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">location[<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">location[<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].assign(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].replace(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self.location[<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self.location[<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].assign(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].replace(<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>] = location</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>] = location.href</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>.location</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>] = self.location</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>.location.href</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>] = self.location.href</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>] = location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>] = self[<span class=\"string\">'location'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>] = self[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>] = self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>] = self.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location.assign(<span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">location.replace(<span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.assign(<span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.replace(<span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self.location.assign(<span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self.location.replace(<span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">location[<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">location[<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].assign(<span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].replace(<span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self.location[<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self.location[<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].assign(<span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].replace(<span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](<span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](<span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>] = location</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>] = location.href</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>] = <span class=\"built_in\">window</span>.location</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>] = self.location</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>] = <span class=\"built_in\">window</span>.location.href</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>] = self.location.href</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>] = location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>]</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>] = <span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>] = self[<span class=\"string\">'location'</span>]</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>] = self[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>] = self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>] = self.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location.assign(self[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">location.replace(self[<span class=\"string\">'location'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.assign(self[<span class=\"string\">'location'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.replace(self[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">self.location.assign(self[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">self.location.replace(self[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">location[<span class=\"string\">'assign'</span>](self[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">location[<span class=\"string\">'replace'</span>](self[<span class=\"string\">'location'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'assign'</span>](self[<span class=\"string\">'location'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'replace'</span>](self[<span class=\"string\">'location'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].assign(self[<span class=\"string\">'location'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].replace(self[<span class=\"string\">'location'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](self[<span class=\"string\">'location'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](self[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">self.location[<span class=\"string\">'assign'</span>](self[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">self.location[<span class=\"string\">'replace'</span>](self[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].assign(self[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].replace(self[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](self[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](self[<span class=\"string\">'location'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].href = location</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].href = location.href</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].href = <span class=\"built_in\">window</span>.location</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].href = self.location</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].href = <span class=\"built_in\">window</span>.location.href</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].href = self.location.href</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].href = location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].href = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>]</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].href = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].href = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].href = <span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].href = self[<span class=\"string\">'location'</span>]</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].href = self[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].href = self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].href = self.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location.assign(self[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">location.replace(self[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.assign(self[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.replace(self[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">self.location.assign(self[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">self.location.replace(self[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">location[<span class=\"string\">'assign'</span>](self[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">location[<span class=\"string\">'replace'</span>](self[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'assign'</span>](self[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'replace'</span>](self[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].assign(self[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].replace(self[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](self[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](self[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">self.location[<span class=\"string\">'assign'</span>](self[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">self.location[<span class=\"string\">'replace'</span>](self[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].assign(self[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].replace(self[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](self[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](self[<span class=\"string\">'location'</span>].href)</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = location</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = location.href</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>.location</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = self.location</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>.location.href</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = self.location.href</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>]</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = self[<span class=\"string\">'location'</span>]</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = self[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>] = self.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location.assign(self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">location.replace(self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.assign(self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.replace(self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self.location.assign(self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self.location.replace(self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">location[<span class=\"string\">'assign'</span>](self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">location[<span class=\"string\">'replace'</span>](self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'assign'</span>](self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'replace'</span>](self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].assign(self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].replace(self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self.location[<span class=\"string\">'assign'</span>](self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self.location[<span class=\"string\">'replace'</span>](self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].assign(self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].replace(self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self.location[<span class=\"string\">'href'</span>] = location</span><br><span class=\"line\">self.location[<span class=\"string\">'href'</span>] = location.href</span><br><span class=\"line\">self.location[<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>.location</span><br><span class=\"line\">self.location[<span class=\"string\">'href'</span>] = self.location</span><br><span class=\"line\">self.location[<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>.location.href</span><br><span class=\"line\">self.location[<span class=\"string\">'href'</span>] = self.location.href</span><br><span class=\"line\">self.location[<span class=\"string\">'href'</span>] = location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self.location[<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>]</span><br><span class=\"line\">self.location[<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\">self.location[<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self.location[<span class=\"string\">'href'</span>] = <span class=\"built_in\">window</span>.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self.location[<span class=\"string\">'href'</span>] = self[<span class=\"string\">'location'</span>]</span><br><span class=\"line\">self.location[<span class=\"string\">'href'</span>] = self[<span class=\"string\">'location'</span>].href</span><br><span class=\"line\">self.location[<span class=\"string\">'href'</span>] = self[<span class=\"string\">'location'</span>][<span class=\"string\">'href'</span>]</span><br><span class=\"line\">self.location[<span class=\"string\">'href'</span>] = self.location[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">location.assign(self.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">location.replace(self.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.assign(self.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.replace(self.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self.location.assign(self.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self.location.replace(self.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">location[<span class=\"string\">'assign'</span>](self.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">location[<span class=\"string\">'replace'</span>](self.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'assign'</span>](self.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'replace'</span>](self.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].assign(self.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].replace(self.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](self.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](self.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self.location[<span class=\"string\">'assign'</span>](self.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self.location[<span class=\"string\">'replace'</span>](self.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].assign(self.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].replace(self.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'assign'</span>](self.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'replace'</span>](self.location[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">location.reload()</span><br><span class=\"line\">location[<span class=\"string\">'reload'</span>]()</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.reload()</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>].reload()</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location[<span class=\"string\">'reload'</span>]()</span><br><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">'location'</span>][<span class=\"string\">'reload'</span>]()</span><br><span class=\"line\">self.location.reload()</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>].reload()</span><br><span class=\"line\">self.location[<span class=\"string\">'reload'</span>]()</span><br><span class=\"line\">self[<span class=\"string\">'location'</span>][<span class=\"string\">'reload'</span>]()</span><br></pre></td></tr></table></figure>\n"},{"title":"2019新目标 新里程","toc":false,"date":"2019-01-03T02:09:04.000Z","_content":"\n## 2019年新目标\n新的一年开始了，虽然今天已经三号，但还是要在年初定一个基本目标\n\n1. 移动端应用开发\n2. 熟练使用后端服务开发各种业务场景\n3. 桌面版应用程序开发\n\n## 2019年新里程\n\n1. 家庭为主，事业为辅\n","source":"_posts/2019新目标-新里程.md","raw":"---\ntitle: 2019新目标 新里程\ntags:\n  - 计划\ncategories:\n  - 项目总结\ntoc: false\ndate: 2019-01-03 10:09:04\n---\n\n## 2019年新目标\n新的一年开始了，虽然今天已经三号，但还是要在年初定一个基本目标\n\n1. 移动端应用开发\n2. 熟练使用后端服务开发各种业务场景\n3. 桌面版应用程序开发\n\n## 2019年新里程\n\n1. 家庭为主，事业为辅\n","slug":"2019新目标-新里程","published":1,"updated":"2019-11-07T02:17:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznwa0006h5s6i0vm8std","content":"<h2 id=\"2019年新目标\"><a href=\"#2019年新目标\" class=\"headerlink\" title=\"2019年新目标\"></a>2019年新目标</h2><p>新的一年开始了，虽然今天已经三号，但还是要在年初定一个基本目标</p>\n<ol>\n<li>移动端应用开发</li>\n<li>熟练使用后端服务开发各种业务场景</li>\n<li>桌面版应用程序开发</li>\n</ol>\n<h2 id=\"2019年新里程\"><a href=\"#2019年新里程\" class=\"headerlink\" title=\"2019年新里程\"></a>2019年新里程</h2><ol>\n<li>家庭为主，事业为辅</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"2019年新目标\"><a href=\"#2019年新目标\" class=\"headerlink\" title=\"2019年新目标\"></a>2019年新目标</h2><p>新的一年开始了，虽然今天已经三号，但还是要在年初定一个基本目标</p>\n<ol>\n<li>移动端应用开发</li>\n<li>熟练使用后端服务开发各种业务场景</li>\n<li>桌面版应用程序开发</li>\n</ol>\n<h2 id=\"2019年新里程\"><a href=\"#2019年新里程\" class=\"headerlink\" title=\"2019年新里程\"></a>2019年新里程</h2><ol>\n<li>家庭为主，事业为辅</li>\n</ol>\n"},{"title":"2019年中计划","toc":false,"date":"2019-06-25T02:12:39.000Z","_content":"\n2019年过去一半多了，计划下下半年的工作之余的内容吧：\n\n## PPT组内分享\n- apicloud\n- electron\n- 微信小程序\n- vue\n- adonisjs\n- Fluter\n\n## 开发工作\n- 基于websocket的对弈类多人在线游戏\n- 基于websocket的简易在线聊天工具\n- 建站工具的开发与优化\n\n暂时这些，多退少补吧~\n","source":"_posts/2019年中计划.md","raw":"---\ntitle: 2019年中计划\ntags:\n  - 计划\ncategories:\n  - Web开发\ntoc: false\ndate: 2019-06-25 10:12:39\n---\n\n2019年过去一半多了，计划下下半年的工作之余的内容吧：\n\n## PPT组内分享\n- apicloud\n- electron\n- 微信小程序\n- vue\n- adonisjs\n- Fluter\n\n## 开发工作\n- 基于websocket的对弈类多人在线游戏\n- 基于websocket的简易在线聊天工具\n- 建站工具的开发与优化\n\n暂时这些，多退少补吧~\n","slug":"2019年中计划","published":1,"updated":"2019-11-07T02:13:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznwc000ah5s6534xil43","content":"<p>2019年过去一半多了，计划下下半年的工作之余的内容吧：</p>\n<h2 id=\"PPT组内分享\"><a href=\"#PPT组内分享\" class=\"headerlink\" title=\"PPT组内分享\"></a>PPT组内分享</h2><ul>\n<li>apicloud</li>\n<li>electron</li>\n<li>微信小程序</li>\n<li>vue</li>\n<li>adonisjs</li>\n<li>Fluter</li>\n</ul>\n<h2 id=\"开发工作\"><a href=\"#开发工作\" class=\"headerlink\" title=\"开发工作\"></a>开发工作</h2><ul>\n<li>基于websocket的对弈类多人在线游戏</li>\n<li>基于websocket的简易在线聊天工具</li>\n<li>建站工具的开发与优化</li>\n</ul>\n<p>暂时这些，多退少补吧~</p>\n","site":{"data":{}},"excerpt":"","more":"<p>2019年过去一半多了，计划下下半年的工作之余的内容吧：</p>\n<h2 id=\"PPT组内分享\"><a href=\"#PPT组内分享\" class=\"headerlink\" title=\"PPT组内分享\"></a>PPT组内分享</h2><ul>\n<li>apicloud</li>\n<li>electron</li>\n<li>微信小程序</li>\n<li>vue</li>\n<li>adonisjs</li>\n<li>Fluter</li>\n</ul>\n<h2 id=\"开发工作\"><a href=\"#开发工作\" class=\"headerlink\" title=\"开发工作\"></a>开发工作</h2><ul>\n<li>基于websocket的对弈类多人在线游戏</li>\n<li>基于websocket的简易在线聊天工具</li>\n<li>建站工具的开发与优化</li>\n</ul>\n<p>暂时这些，多退少补吧~</p>\n"},{"title":"APICloud开发实践-快速了解APICloud是什么","toc":false,"date":"2019-06-25T03:09:10.000Z","_content":"\n# 大纲\n- 目的 - `可以通过使用APICloud提供的框架，利用web前端技术开发Android和IOS移动应用`\n- AC能做什么 - `知道AC能做什么也就了解了它是什么`\n- 为什么使用AC - `了解为什么使用AC进行移动应用开发以及适用场景，AC是在某种场景下的一种手段，去掉炒作的成分，留下的才是实用的部分`\n- 如何更好的使用AC - `AC为我们提供了开发方法，对于当前的前端开发方式来说已经有点过时了，我们应该用更高效的方式进行开发，更好的达到‘为什么使用AC’的目的`\n\n## 目的\n看完这个分享以后：知道什么是APICloud并且当有人问你能不能开发移动应用的时候，你应该说`我可以通过使用APICloud快速的开发出效果还不错的移动应用`\n- 技术要求：web前端基础 - `html、css、javascript`\n- 注：APICloud对我们最有用的部分就是能够使用web技术开发移动应用\n\n<!-- more -->\n\n## APICloud能做什么\n\n![image.png](http://blogimage.houjiyi.com/FlK9frRdFBj9XWIR7edpBDdmiYg8)\n\nAPICloud为我们提供了**IDE**开发环境，通过这个环境可以实现‘**云**’与‘**端**’的一体化（云端一体），目的是**更好的开发APP**，服务不同平台的用户。\n\n### IDE：APICloud Studio 2\n基于开源编辑器Atom深度定制开发的符合AC开发习惯的一款IDE，开发中用的最多的功能有\n- 登录账户\n- 代码管理\n- 编译调试\n\n### 端API\n- 通过全局对象（window.api）来实现，简单来说就是使用它可以实现大部分APP能实现但web实现不了的事，比如获取设备ID，监听前后台切换事件等\n- 毕竟APP提供的功能那么多，没法一一实现，平台提供了模块思想和自定义模块的开发方法，常用但平台未提供的功能模块商店里一般会有，没有的可以通过自定义模块的方式来，也就是自己开发一个模块，然后通过APICloud提供的SDK打包成模块供api调用。\n- 另一个就是通过api调用应用的原生UI组件的功能\n\n### 云API\n为我们提供了规范化的服务端技术实现方案，换句话说原来我们需要自己开发接口实现的一般性和通用的功能，在这里有对应的解决方案。\n- 数据相关：规范化的跟APP数据相关的Restful API，http调用跟web端发请求一样\n![image.png](http://blogimage.houjiyi.com/FiHZwS-EF8D0_k1Zg1G8VGYLkHQ3)\n- 统计相关：获取APP的统计信息相关的接口，一般用在统计后台里-AC控制台有相关操作界面\n![image.png](http://blogimage.houjiyi.com/FolLg8P75EnEEAJXaRzeNxL6LEOT)\n- 推送相关：创建推送消息，发起推送，一般用在管理后台-AC控制台有相关操作界面\n![image.png](http://blogimage.houjiyi.com/Fh2oI10JKZlP3norUJ5-eMLp8Yyc)\n\n### 更好的开发APP\nAPICloud让你更好的关注业务逻辑，而不是APP配置等内容，配置成了一件非常简单的事情，有了这个平台很多看似复杂的内容变得简单。在实际开发过程中这里只需要配置一次，之后基本不用再管它，或者等所有开发都结束以后再管它。\n![image.png](http://blogimage.houjiyi.com/Fr0ag4yTrUO0SBQgWEP19l1kpp2g)\n- APP图标设置、横竖屏设置、状态栏是否显示、启动页图片\n- Android和IOS证书设置\n- 代码管理，默认svn，可以设置成自己的git仓库，代码托管在自己的仓库\n- 模块管理，使用扩展模块或自定义模块\n- 云编译成测试包或正式包\n\n## 为什么使用APICloud\n原生开发最大的突出问题在于开发效率、迭代周期、迭代速度等是受局限的。而APICloud则体现了“快“与”活”的两个特性，但也不能一概而论，公司有实力完全可以使用原生的方法进行APP开发，AC在某些场景下能够发挥大作用（你有一个想法想验证他的可行性，这时候用AC就能够快速实现你的想法，这在产品试错与创业阶段是非常有利的）\n- 快：一站式的APP开发和管理平台，简化APP开发技术\n- 活：灵活，用起来相对灵活，比如在升级，版本分发这些操作上\n\n## 如何更好的使用APICloud\n如果你去看APICloud的文档，其中有一部分是这里没有涉及到的\n- APICloud前端框架：提供了操作DOM和JS函数库，还有CSS（AUI）\n- UI模块引擎：用于打开按照微信小程序语法实现的页面（语法和效果参考小程序，UI实现使用原生来实现，还没正式推出）\n- 如果担心代码泄露需要额外的对代码进行处理\n- 模块开发：特殊需求的情况下才会用到模块开发\n- 打包成公众号：一键打包\n\n这些内容不去详细介绍，只有在必要的时候才会用到，其中前端框架已经明显有些过时了，用起来并不是很方便，目前的前端框架有很多，DOM操作已经被整合的非常方便，比如我们这里使用vue和APICloud结合，就能像开发单页应用一样来开发APP，MVVM、热更新、开发调试都非常方便，只有用到原生功能的时候才会需要在手机上看效果。有了这些开发效率将变得更快，成本会更低。有了这个你会发现：\n\n- 前端框架不在局限在AC提供的框架里，可以使用更新更好用的框架\n- UI可以任意使用目前流行的UI框架，或自己开发，效果上都是没有任何问题的\n- 模块使用与开发与文档规定的使用方式完全一致\n- 使用Vue单页应用开发APICloud可以使用最新语法，而且可以方便的引入各种npm包，同时不用考虑兼容问题，因为最终会打包压缩\n- 不必担心代码会泄露，因为最终使用的是打包压缩后的代码，源代码在我们自己手里。\n- 不存在打包成公众号的问题，因为他本身就是一个web单页应用，web功能在H5上，公众号上都能直接用\n","source":"_posts/APICloud开发实践-快速了解APICloud是什么.md","raw":"---\ntitle: APICloud开发实践-快速了解APICloud是什么\ntags:\n  - 知识点备忘\ncategories:\n  - 移动开发\ntoc: false\ndate: 2019-06-25 11:09:10\n---\n\n# 大纲\n- 目的 - `可以通过使用APICloud提供的框架，利用web前端技术开发Android和IOS移动应用`\n- AC能做什么 - `知道AC能做什么也就了解了它是什么`\n- 为什么使用AC - `了解为什么使用AC进行移动应用开发以及适用场景，AC是在某种场景下的一种手段，去掉炒作的成分，留下的才是实用的部分`\n- 如何更好的使用AC - `AC为我们提供了开发方法，对于当前的前端开发方式来说已经有点过时了，我们应该用更高效的方式进行开发，更好的达到‘为什么使用AC’的目的`\n\n## 目的\n看完这个分享以后：知道什么是APICloud并且当有人问你能不能开发移动应用的时候，你应该说`我可以通过使用APICloud快速的开发出效果还不错的移动应用`\n- 技术要求：web前端基础 - `html、css、javascript`\n- 注：APICloud对我们最有用的部分就是能够使用web技术开发移动应用\n\n<!-- more -->\n\n## APICloud能做什么\n\n![image.png](http://blogimage.houjiyi.com/FlK9frRdFBj9XWIR7edpBDdmiYg8)\n\nAPICloud为我们提供了**IDE**开发环境，通过这个环境可以实现‘**云**’与‘**端**’的一体化（云端一体），目的是**更好的开发APP**，服务不同平台的用户。\n\n### IDE：APICloud Studio 2\n基于开源编辑器Atom深度定制开发的符合AC开发习惯的一款IDE，开发中用的最多的功能有\n- 登录账户\n- 代码管理\n- 编译调试\n\n### 端API\n- 通过全局对象（window.api）来实现，简单来说就是使用它可以实现大部分APP能实现但web实现不了的事，比如获取设备ID，监听前后台切换事件等\n- 毕竟APP提供的功能那么多，没法一一实现，平台提供了模块思想和自定义模块的开发方法，常用但平台未提供的功能模块商店里一般会有，没有的可以通过自定义模块的方式来，也就是自己开发一个模块，然后通过APICloud提供的SDK打包成模块供api调用。\n- 另一个就是通过api调用应用的原生UI组件的功能\n\n### 云API\n为我们提供了规范化的服务端技术实现方案，换句话说原来我们需要自己开发接口实现的一般性和通用的功能，在这里有对应的解决方案。\n- 数据相关：规范化的跟APP数据相关的Restful API，http调用跟web端发请求一样\n![image.png](http://blogimage.houjiyi.com/FiHZwS-EF8D0_k1Zg1G8VGYLkHQ3)\n- 统计相关：获取APP的统计信息相关的接口，一般用在统计后台里-AC控制台有相关操作界面\n![image.png](http://blogimage.houjiyi.com/FolLg8P75EnEEAJXaRzeNxL6LEOT)\n- 推送相关：创建推送消息，发起推送，一般用在管理后台-AC控制台有相关操作界面\n![image.png](http://blogimage.houjiyi.com/Fh2oI10JKZlP3norUJ5-eMLp8Yyc)\n\n### 更好的开发APP\nAPICloud让你更好的关注业务逻辑，而不是APP配置等内容，配置成了一件非常简单的事情，有了这个平台很多看似复杂的内容变得简单。在实际开发过程中这里只需要配置一次，之后基本不用再管它，或者等所有开发都结束以后再管它。\n![image.png](http://blogimage.houjiyi.com/Fr0ag4yTrUO0SBQgWEP19l1kpp2g)\n- APP图标设置、横竖屏设置、状态栏是否显示、启动页图片\n- Android和IOS证书设置\n- 代码管理，默认svn，可以设置成自己的git仓库，代码托管在自己的仓库\n- 模块管理，使用扩展模块或自定义模块\n- 云编译成测试包或正式包\n\n## 为什么使用APICloud\n原生开发最大的突出问题在于开发效率、迭代周期、迭代速度等是受局限的。而APICloud则体现了“快“与”活”的两个特性，但也不能一概而论，公司有实力完全可以使用原生的方法进行APP开发，AC在某些场景下能够发挥大作用（你有一个想法想验证他的可行性，这时候用AC就能够快速实现你的想法，这在产品试错与创业阶段是非常有利的）\n- 快：一站式的APP开发和管理平台，简化APP开发技术\n- 活：灵活，用起来相对灵活，比如在升级，版本分发这些操作上\n\n## 如何更好的使用APICloud\n如果你去看APICloud的文档，其中有一部分是这里没有涉及到的\n- APICloud前端框架：提供了操作DOM和JS函数库，还有CSS（AUI）\n- UI模块引擎：用于打开按照微信小程序语法实现的页面（语法和效果参考小程序，UI实现使用原生来实现，还没正式推出）\n- 如果担心代码泄露需要额外的对代码进行处理\n- 模块开发：特殊需求的情况下才会用到模块开发\n- 打包成公众号：一键打包\n\n这些内容不去详细介绍，只有在必要的时候才会用到，其中前端框架已经明显有些过时了，用起来并不是很方便，目前的前端框架有很多，DOM操作已经被整合的非常方便，比如我们这里使用vue和APICloud结合，就能像开发单页应用一样来开发APP，MVVM、热更新、开发调试都非常方便，只有用到原生功能的时候才会需要在手机上看效果。有了这些开发效率将变得更快，成本会更低。有了这个你会发现：\n\n- 前端框架不在局限在AC提供的框架里，可以使用更新更好用的框架\n- UI可以任意使用目前流行的UI框架，或自己开发，效果上都是没有任何问题的\n- 模块使用与开发与文档规定的使用方式完全一致\n- 使用Vue单页应用开发APICloud可以使用最新语法，而且可以方便的引入各种npm包，同时不用考虑兼容问题，因为最终会打包压缩\n- 不必担心代码会泄露，因为最终使用的是打包压缩后的代码，源代码在我们自己手里。\n- 不存在打包成公众号的问题，因为他本身就是一个web单页应用，web功能在H5上，公众号上都能直接用\n","slug":"APICloud开发实践-快速了解APICloud是什么","published":1,"updated":"2019-11-07T02:17:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznwe000bh5s6mgvbltxl","content":"<h1 id=\"大纲\"><a href=\"#大纲\" class=\"headerlink\" title=\"大纲\"></a>大纲</h1><ul>\n<li>目的 - <code>可以通过使用APICloud提供的框架，利用web前端技术开发Android和IOS移动应用</code></li>\n<li>AC能做什么 - <code>知道AC能做什么也就了解了它是什么</code></li>\n<li>为什么使用AC - <code>了解为什么使用AC进行移动应用开发以及适用场景，AC是在某种场景下的一种手段，去掉炒作的成分，留下的才是实用的部分</code></li>\n<li>如何更好的使用AC - <code>AC为我们提供了开发方法，对于当前的前端开发方式来说已经有点过时了，我们应该用更高效的方式进行开发，更好的达到‘为什么使用AC’的目的</code></li>\n</ul>\n<h2 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h2><p>看完这个分享以后：知道什么是APICloud并且当有人问你能不能开发移动应用的时候，你应该说<code>我可以通过使用APICloud快速的开发出效果还不错的移动应用</code></p>\n<ul>\n<li>技术要求：web前端基础 - <code>html、css、javascript</code></li>\n<li>注：APICloud对我们最有用的部分就是能够使用web技术开发移动应用</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"APICloud能做什么\"><a href=\"#APICloud能做什么\" class=\"headerlink\" title=\"APICloud能做什么\"></a>APICloud能做什么</h2><p><img src=\"http://blogimage.houjiyi.com/FlK9frRdFBj9XWIR7edpBDdmiYg8\" alt=\"image.png\"></p>\n<p>APICloud为我们提供了<strong>IDE</strong>开发环境，通过这个环境可以实现‘<strong>云</strong>’与‘<strong>端</strong>’的一体化（云端一体），目的是<strong>更好的开发APP</strong>，服务不同平台的用户。</p>\n<h3 id=\"IDE：APICloud-Studio-2\"><a href=\"#IDE：APICloud-Studio-2\" class=\"headerlink\" title=\"IDE：APICloud Studio 2\"></a>IDE：APICloud Studio 2</h3><p>基于开源编辑器Atom深度定制开发的符合AC开发习惯的一款IDE，开发中用的最多的功能有</p>\n<ul>\n<li>登录账户</li>\n<li>代码管理</li>\n<li>编译调试</li>\n</ul>\n<h3 id=\"端API\"><a href=\"#端API\" class=\"headerlink\" title=\"端API\"></a>端API</h3><ul>\n<li>通过全局对象（window.api）来实现，简单来说就是使用它可以实现大部分APP能实现但web实现不了的事，比如获取设备ID，监听前后台切换事件等</li>\n<li>毕竟APP提供的功能那么多，没法一一实现，平台提供了模块思想和自定义模块的开发方法，常用但平台未提供的功能模块商店里一般会有，没有的可以通过自定义模块的方式来，也就是自己开发一个模块，然后通过APICloud提供的SDK打包成模块供api调用。</li>\n<li>另一个就是通过api调用应用的原生UI组件的功能</li>\n</ul>\n<h3 id=\"云API\"><a href=\"#云API\" class=\"headerlink\" title=\"云API\"></a>云API</h3><p>为我们提供了规范化的服务端技术实现方案，换句话说原来我们需要自己开发接口实现的一般性和通用的功能，在这里有对应的解决方案。</p>\n<ul>\n<li>数据相关：规范化的跟APP数据相关的Restful API，http调用跟web端发请求一样<br><img src=\"http://blogimage.houjiyi.com/FiHZwS-EF8D0_k1Zg1G8VGYLkHQ3\" alt=\"image.png\"></li>\n<li>统计相关：获取APP的统计信息相关的接口，一般用在统计后台里-AC控制台有相关操作界面<br><img src=\"http://blogimage.houjiyi.com/FolLg8P75EnEEAJXaRzeNxL6LEOT\" alt=\"image.png\"></li>\n<li>推送相关：创建推送消息，发起推送，一般用在管理后台-AC控制台有相关操作界面<br><img src=\"http://blogimage.houjiyi.com/Fh2oI10JKZlP3norUJ5-eMLp8Yyc\" alt=\"image.png\"></li>\n</ul>\n<h3 id=\"更好的开发APP\"><a href=\"#更好的开发APP\" class=\"headerlink\" title=\"更好的开发APP\"></a>更好的开发APP</h3><p>APICloud让你更好的关注业务逻辑，而不是APP配置等内容，配置成了一件非常简单的事情，有了这个平台很多看似复杂的内容变得简单。在实际开发过程中这里只需要配置一次，之后基本不用再管它，或者等所有开发都结束以后再管它。<br><img src=\"http://blogimage.houjiyi.com/Fr0ag4yTrUO0SBQgWEP19l1kpp2g\" alt=\"image.png\"></p>\n<ul>\n<li>APP图标设置、横竖屏设置、状态栏是否显示、启动页图片</li>\n<li>Android和IOS证书设置</li>\n<li>代码管理，默认svn，可以设置成自己的git仓库，代码托管在自己的仓库</li>\n<li>模块管理，使用扩展模块或自定义模块</li>\n<li>云编译成测试包或正式包</li>\n</ul>\n<h2 id=\"为什么使用APICloud\"><a href=\"#为什么使用APICloud\" class=\"headerlink\" title=\"为什么使用APICloud\"></a>为什么使用APICloud</h2><p>原生开发最大的突出问题在于开发效率、迭代周期、迭代速度等是受局限的。而APICloud则体现了“快“与”活”的两个特性，但也不能一概而论，公司有实力完全可以使用原生的方法进行APP开发，AC在某些场景下能够发挥大作用（你有一个想法想验证他的可行性，这时候用AC就能够快速实现你的想法，这在产品试错与创业阶段是非常有利的）</p>\n<ul>\n<li>快：一站式的APP开发和管理平台，简化APP开发技术</li>\n<li>活：灵活，用起来相对灵活，比如在升级，版本分发这些操作上</li>\n</ul>\n<h2 id=\"如何更好的使用APICloud\"><a href=\"#如何更好的使用APICloud\" class=\"headerlink\" title=\"如何更好的使用APICloud\"></a>如何更好的使用APICloud</h2><p>如果你去看APICloud的文档，其中有一部分是这里没有涉及到的</p>\n<ul>\n<li>APICloud前端框架：提供了操作DOM和JS函数库，还有CSS（AUI）</li>\n<li>UI模块引擎：用于打开按照微信小程序语法实现的页面（语法和效果参考小程序，UI实现使用原生来实现，还没正式推出）</li>\n<li>如果担心代码泄露需要额外的对代码进行处理</li>\n<li>模块开发：特殊需求的情况下才会用到模块开发</li>\n<li>打包成公众号：一键打包</li>\n</ul>\n<p>这些内容不去详细介绍，只有在必要的时候才会用到，其中前端框架已经明显有些过时了，用起来并不是很方便，目前的前端框架有很多，DOM操作已经被整合的非常方便，比如我们这里使用vue和APICloud结合，就能像开发单页应用一样来开发APP，MVVM、热更新、开发调试都非常方便，只有用到原生功能的时候才会需要在手机上看效果。有了这些开发效率将变得更快，成本会更低。有了这个你会发现：</p>\n<ul>\n<li>前端框架不在局限在AC提供的框架里，可以使用更新更好用的框架</li>\n<li>UI可以任意使用目前流行的UI框架，或自己开发，效果上都是没有任何问题的</li>\n<li>模块使用与开发与文档规定的使用方式完全一致</li>\n<li>使用Vue单页应用开发APICloud可以使用最新语法，而且可以方便的引入各种npm包，同时不用考虑兼容问题，因为最终会打包压缩</li>\n<li>不必担心代码会泄露，因为最终使用的是打包压缩后的代码，源代码在我们自己手里。</li>\n<li>不存在打包成公众号的问题，因为他本身就是一个web单页应用，web功能在H5上，公众号上都能直接用</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"大纲\"><a href=\"#大纲\" class=\"headerlink\" title=\"大纲\"></a>大纲</h1><ul>\n<li>目的 - <code>可以通过使用APICloud提供的框架，利用web前端技术开发Android和IOS移动应用</code></li>\n<li>AC能做什么 - <code>知道AC能做什么也就了解了它是什么</code></li>\n<li>为什么使用AC - <code>了解为什么使用AC进行移动应用开发以及适用场景，AC是在某种场景下的一种手段，去掉炒作的成分，留下的才是实用的部分</code></li>\n<li>如何更好的使用AC - <code>AC为我们提供了开发方法，对于当前的前端开发方式来说已经有点过时了，我们应该用更高效的方式进行开发，更好的达到‘为什么使用AC’的目的</code></li>\n</ul>\n<h2 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h2><p>看完这个分享以后：知道什么是APICloud并且当有人问你能不能开发移动应用的时候，你应该说<code>我可以通过使用APICloud快速的开发出效果还不错的移动应用</code></p>\n<ul>\n<li>技术要求：web前端基础 - <code>html、css、javascript</code></li>\n<li>注：APICloud对我们最有用的部分就是能够使用web技术开发移动应用</li>\n</ul>","more":"<h2 id=\"APICloud能做什么\"><a href=\"#APICloud能做什么\" class=\"headerlink\" title=\"APICloud能做什么\"></a>APICloud能做什么</h2><p><img src=\"http://blogimage.houjiyi.com/FlK9frRdFBj9XWIR7edpBDdmiYg8\" alt=\"image.png\"></p>\n<p>APICloud为我们提供了<strong>IDE</strong>开发环境，通过这个环境可以实现‘<strong>云</strong>’与‘<strong>端</strong>’的一体化（云端一体），目的是<strong>更好的开发APP</strong>，服务不同平台的用户。</p>\n<h3 id=\"IDE：APICloud-Studio-2\"><a href=\"#IDE：APICloud-Studio-2\" class=\"headerlink\" title=\"IDE：APICloud Studio 2\"></a>IDE：APICloud Studio 2</h3><p>基于开源编辑器Atom深度定制开发的符合AC开发习惯的一款IDE，开发中用的最多的功能有</p>\n<ul>\n<li>登录账户</li>\n<li>代码管理</li>\n<li>编译调试</li>\n</ul>\n<h3 id=\"端API\"><a href=\"#端API\" class=\"headerlink\" title=\"端API\"></a>端API</h3><ul>\n<li>通过全局对象（window.api）来实现，简单来说就是使用它可以实现大部分APP能实现但web实现不了的事，比如获取设备ID，监听前后台切换事件等</li>\n<li>毕竟APP提供的功能那么多，没法一一实现，平台提供了模块思想和自定义模块的开发方法，常用但平台未提供的功能模块商店里一般会有，没有的可以通过自定义模块的方式来，也就是自己开发一个模块，然后通过APICloud提供的SDK打包成模块供api调用。</li>\n<li>另一个就是通过api调用应用的原生UI组件的功能</li>\n</ul>\n<h3 id=\"云API\"><a href=\"#云API\" class=\"headerlink\" title=\"云API\"></a>云API</h3><p>为我们提供了规范化的服务端技术实现方案，换句话说原来我们需要自己开发接口实现的一般性和通用的功能，在这里有对应的解决方案。</p>\n<ul>\n<li>数据相关：规范化的跟APP数据相关的Restful API，http调用跟web端发请求一样<br><img src=\"http://blogimage.houjiyi.com/FiHZwS-EF8D0_k1Zg1G8VGYLkHQ3\" alt=\"image.png\"></li>\n<li>统计相关：获取APP的统计信息相关的接口，一般用在统计后台里-AC控制台有相关操作界面<br><img src=\"http://blogimage.houjiyi.com/FolLg8P75EnEEAJXaRzeNxL6LEOT\" alt=\"image.png\"></li>\n<li>推送相关：创建推送消息，发起推送，一般用在管理后台-AC控制台有相关操作界面<br><img src=\"http://blogimage.houjiyi.com/Fh2oI10JKZlP3norUJ5-eMLp8Yyc\" alt=\"image.png\"></li>\n</ul>\n<h3 id=\"更好的开发APP\"><a href=\"#更好的开发APP\" class=\"headerlink\" title=\"更好的开发APP\"></a>更好的开发APP</h3><p>APICloud让你更好的关注业务逻辑，而不是APP配置等内容，配置成了一件非常简单的事情，有了这个平台很多看似复杂的内容变得简单。在实际开发过程中这里只需要配置一次，之后基本不用再管它，或者等所有开发都结束以后再管它。<br><img src=\"http://blogimage.houjiyi.com/Fr0ag4yTrUO0SBQgWEP19l1kpp2g\" alt=\"image.png\"></p>\n<ul>\n<li>APP图标设置、横竖屏设置、状态栏是否显示、启动页图片</li>\n<li>Android和IOS证书设置</li>\n<li>代码管理，默认svn，可以设置成自己的git仓库，代码托管在自己的仓库</li>\n<li>模块管理，使用扩展模块或自定义模块</li>\n<li>云编译成测试包或正式包</li>\n</ul>\n<h2 id=\"为什么使用APICloud\"><a href=\"#为什么使用APICloud\" class=\"headerlink\" title=\"为什么使用APICloud\"></a>为什么使用APICloud</h2><p>原生开发最大的突出问题在于开发效率、迭代周期、迭代速度等是受局限的。而APICloud则体现了“快“与”活”的两个特性，但也不能一概而论，公司有实力完全可以使用原生的方法进行APP开发，AC在某些场景下能够发挥大作用（你有一个想法想验证他的可行性，这时候用AC就能够快速实现你的想法，这在产品试错与创业阶段是非常有利的）</p>\n<ul>\n<li>快：一站式的APP开发和管理平台，简化APP开发技术</li>\n<li>活：灵活，用起来相对灵活，比如在升级，版本分发这些操作上</li>\n</ul>\n<h2 id=\"如何更好的使用APICloud\"><a href=\"#如何更好的使用APICloud\" class=\"headerlink\" title=\"如何更好的使用APICloud\"></a>如何更好的使用APICloud</h2><p>如果你去看APICloud的文档，其中有一部分是这里没有涉及到的</p>\n<ul>\n<li>APICloud前端框架：提供了操作DOM和JS函数库，还有CSS（AUI）</li>\n<li>UI模块引擎：用于打开按照微信小程序语法实现的页面（语法和效果参考小程序，UI实现使用原生来实现，还没正式推出）</li>\n<li>如果担心代码泄露需要额外的对代码进行处理</li>\n<li>模块开发：特殊需求的情况下才会用到模块开发</li>\n<li>打包成公众号：一键打包</li>\n</ul>\n<p>这些内容不去详细介绍，只有在必要的时候才会用到，其中前端框架已经明显有些过时了，用起来并不是很方便，目前的前端框架有很多，DOM操作已经被整合的非常方便，比如我们这里使用vue和APICloud结合，就能像开发单页应用一样来开发APP，MVVM、热更新、开发调试都非常方便，只有用到原生功能的时候才会需要在手机上看效果。有了这些开发效率将变得更快，成本会更低。有了这个你会发现：</p>\n<ul>\n<li>前端框架不在局限在AC提供的框架里，可以使用更新更好用的框架</li>\n<li>UI可以任意使用目前流行的UI框架，或自己开发，效果上都是没有任何问题的</li>\n<li>模块使用与开发与文档规定的使用方式完全一致</li>\n<li>使用Vue单页应用开发APICloud可以使用最新语法，而且可以方便的引入各种npm包，同时不用考虑兼容问题，因为最终会打包压缩</li>\n<li>不必担心代码会泄露，因为最终使用的是打包压缩后的代码，源代码在我们自己手里。</li>\n<li>不存在打包成公众号的问题，因为他本身就是一个web单页应用，web功能在H5上，公众号上都能直接用</li>\n</ul>"},{"title":"CSS3实现波浪进度球","toc":false,"date":"2019-07-23T11:34:45.000Z","_content":"\n想实现这样一个效果，于是网上搜集修改\n\n![image.png](http://blogimage.houjiyi.com/Fl5ilJTLw1xcFDsiWrgiBk0SWS2l)\n\n<!-- more -->\n\n```html\n<template>\n  <div class=\"fensug\">\n    <div class=\"waven\">\n      <p>100%</p>\n      <div class=\"wave\"></div>\n    </div>\n  </div>\n</template>\n\n<script>\n\n  export default {\n    name: 'Home',\n    computed: {}\n  }\n</script>\n\n<style scoped lang=\"scss\">\n  $size: 204px;\n  .fensug {\n    width: $size;\n    height: $size;\n    background: #fff;\n    border: 4px #11D5C6 solid;\n    margin: 100px auto;\n    padding: 5px;\n    border-radius: 50%;\n\n    .waven {\n      width: 100%;\n      height: 100%;\n      border-radius: 50%;\n      background: #11D5C6;\n      overflow: hidden;\n      position: relative;\n\n      .wave {\n        width: 408px;\n        height: 20%;\n        position: absolute;\n        left: 0px;\n        bottom: 0;\n        background: url(../../assets/img/wave.png) repeat-x;\n        animation: move_wave 1.8s linear infinite;\n      }\n\n      p {\n        width: 100%;\n        color: white;\n        line-height: $size;\n        font-weight: bold;\n        font-size: 34px;\n        text-align: center;\n        z-index: 1;\n        position: absolute;\n      }\n    }\n  }\n\n  @keyframes move_wave {\n    0% {\n      transform: translateX(0)\n    }\n    50% {\n      transform: translateX(-25%)\n    }\n    100% {\n      transform: translateX(-50%)\n    }\n  }\n</style>\n\n```\n![image.png](http://blogimage.houjiyi.com/FlMC8EJLTjDX7wAqwu-mkZXILxEw)\n","source":"_posts/CSS3实现波浪进度球.md","raw":"---\ntitle: CSS3实现波浪进度球\ntags:\n  - 知识点备忘\n  - vue\ncategories:\n  - H5开发\n  - Web开发\ntoc: false\ndate: 2019-07-23 19:34:45\n---\n\n想实现这样一个效果，于是网上搜集修改\n\n![image.png](http://blogimage.houjiyi.com/Fl5ilJTLw1xcFDsiWrgiBk0SWS2l)\n\n<!-- more -->\n\n```html\n<template>\n  <div class=\"fensug\">\n    <div class=\"waven\">\n      <p>100%</p>\n      <div class=\"wave\"></div>\n    </div>\n  </div>\n</template>\n\n<script>\n\n  export default {\n    name: 'Home',\n    computed: {}\n  }\n</script>\n\n<style scoped lang=\"scss\">\n  $size: 204px;\n  .fensug {\n    width: $size;\n    height: $size;\n    background: #fff;\n    border: 4px #11D5C6 solid;\n    margin: 100px auto;\n    padding: 5px;\n    border-radius: 50%;\n\n    .waven {\n      width: 100%;\n      height: 100%;\n      border-radius: 50%;\n      background: #11D5C6;\n      overflow: hidden;\n      position: relative;\n\n      .wave {\n        width: 408px;\n        height: 20%;\n        position: absolute;\n        left: 0px;\n        bottom: 0;\n        background: url(../../assets/img/wave.png) repeat-x;\n        animation: move_wave 1.8s linear infinite;\n      }\n\n      p {\n        width: 100%;\n        color: white;\n        line-height: $size;\n        font-weight: bold;\n        font-size: 34px;\n        text-align: center;\n        z-index: 1;\n        position: absolute;\n      }\n    }\n  }\n\n  @keyframes move_wave {\n    0% {\n      transform: translateX(0)\n    }\n    50% {\n      transform: translateX(-25%)\n    }\n    100% {\n      transform: translateX(-50%)\n    }\n  }\n</style>\n\n```\n![image.png](http://blogimage.houjiyi.com/FlMC8EJLTjDX7wAqwu-mkZXILxEw)\n","slug":"CSS3实现波浪进度球","published":1,"updated":"2019-11-07T01:59:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznwh000fh5s6m099rc6w","content":"<p>想实现这样一个效果，于是网上搜集修改</p>\n<p><img src=\"http://blogimage.houjiyi.com/Fl5ilJTLw1xcFDsiWrgiBk0SWS2l\" alt=\"image.png\"></p>\n<a id=\"more\"></a>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fensug\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"waven\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>100%<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wave\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    name: <span class=\"string\">'Home'</span>,</span></span><br><span class=\"line\">    computed: &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"scss\"</span>&gt;</span></span><br><span class=\"line\">  $size: 204px;</span><br><span class=\"line\">  .fensug &#123;</span><br><span class=\"line\">    width: $size;</span><br><span class=\"line\">    height: $size;</span><br><span class=\"line\">    background: #fff;</span><br><span class=\"line\">    border: 4px #11D5C6 solid;</span><br><span class=\"line\">    margin: 100px auto;</span><br><span class=\"line\">    padding: 5px;</span><br><span class=\"line\">    border-radius: 50%;</span><br><span class=\"line\"></span><br><span class=\"line\">    .waven &#123;</span><br><span class=\"line\">      width: 100%;</span><br><span class=\"line\">      height: 100%;</span><br><span class=\"line\">      border-radius: 50%;</span><br><span class=\"line\">      background: #11D5C6;</span><br><span class=\"line\">      overflow: hidden;</span><br><span class=\"line\">      position: relative;</span><br><span class=\"line\"></span><br><span class=\"line\">      .wave &#123;</span><br><span class=\"line\">        width: 408px;</span><br><span class=\"line\">        height: 20%;</span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">        left: 0px;</span><br><span class=\"line\">        bottom: 0;</span><br><span class=\"line\">        background: url(../../assets/img/wave.png) repeat-x;</span><br><span class=\"line\">        animation: move_wave 1.8s linear infinite;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      p &#123;</span><br><span class=\"line\">        width: 100%;</span><br><span class=\"line\">        color: white;</span><br><span class=\"line\">        line-height: $size;</span><br><span class=\"line\">        font-weight: bold;</span><br><span class=\"line\">        font-size: 34px;</span><br><span class=\"line\">        text-align: center;</span><br><span class=\"line\">        z-index: 1;</span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @keyframes move_wave &#123;</span><br><span class=\"line\">    0% &#123;</span><br><span class=\"line\">      transform: translateX(0)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    50% &#123;</span><br><span class=\"line\">      transform: translateX(-25%)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    100% &#123;</span><br><span class=\"line\">      transform: translateX(-50%)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"http://blogimage.houjiyi.com/FlMC8EJLTjDX7wAqwu-mkZXILxEw\" alt=\"image.png\"></p>\n","site":{"data":{}},"excerpt":"<p>想实现这样一个效果，于是网上搜集修改</p>\n<p><img src=\"http://blogimage.houjiyi.com/Fl5ilJTLw1xcFDsiWrgiBk0SWS2l\" alt=\"image.png\"></p>","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fensug\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"waven\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>100%<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wave\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    name: <span class=\"string\">'Home'</span>,</span></span><br><span class=\"line\">    computed: &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"scss\"</span>&gt;</span></span><br><span class=\"line\">  $size: 204px;</span><br><span class=\"line\">  .fensug &#123;</span><br><span class=\"line\">    width: $size;</span><br><span class=\"line\">    height: $size;</span><br><span class=\"line\">    background: #fff;</span><br><span class=\"line\">    border: 4px #11D5C6 solid;</span><br><span class=\"line\">    margin: 100px auto;</span><br><span class=\"line\">    padding: 5px;</span><br><span class=\"line\">    border-radius: 50%;</span><br><span class=\"line\"></span><br><span class=\"line\">    .waven &#123;</span><br><span class=\"line\">      width: 100%;</span><br><span class=\"line\">      height: 100%;</span><br><span class=\"line\">      border-radius: 50%;</span><br><span class=\"line\">      background: #11D5C6;</span><br><span class=\"line\">      overflow: hidden;</span><br><span class=\"line\">      position: relative;</span><br><span class=\"line\"></span><br><span class=\"line\">      .wave &#123;</span><br><span class=\"line\">        width: 408px;</span><br><span class=\"line\">        height: 20%;</span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">        left: 0px;</span><br><span class=\"line\">        bottom: 0;</span><br><span class=\"line\">        background: url(../../assets/img/wave.png) repeat-x;</span><br><span class=\"line\">        animation: move_wave 1.8s linear infinite;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      p &#123;</span><br><span class=\"line\">        width: 100%;</span><br><span class=\"line\">        color: white;</span><br><span class=\"line\">        line-height: $size;</span><br><span class=\"line\">        font-weight: bold;</span><br><span class=\"line\">        font-size: 34px;</span><br><span class=\"line\">        text-align: center;</span><br><span class=\"line\">        z-index: 1;</span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @keyframes move_wave &#123;</span><br><span class=\"line\">    0% &#123;</span><br><span class=\"line\">      transform: translateX(0)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    50% &#123;</span><br><span class=\"line\">      transform: translateX(-25%)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    100% &#123;</span><br><span class=\"line\">      transform: translateX(-50%)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"http://blogimage.houjiyi.com/FlMC8EJLTjDX7wAqwu-mkZXILxEw\" alt=\"image.png\"></p>"},{"title":"FE微前端架构实施","toc":false,"date":"2021-03-12T12:20:10.000Z","_content":"\n# 锋物物管系统-子应用模板\n\n### 名词解释：\n> 主应用===基座应用；子应用===需要运行在主应用下的应用，同时支持独立运行\n> \n### 希望达到的目的\n> 1. 代码库更小，更内聚、可维护性更高\n> 2. 松耦合、自治的团队可扩展性更好\n> 3. 渐进地升级、更新甚至重写部分前端功能成为了可能\n> 4. 可以独立开发部署\n> \n\n### 特点：\n> 1. 独立开发运行部署。\n> 2. 子应用的路由配置对应基座应用的路由配置上，以此方式来复用头部和侧边菜单。\n> 3. 状态之间的传递，原则上是通过基座应用来进行的。\n> \n### 当你拿到这个子应用模板以后，需要对其进行基本信息的改造：\n> 1. package.json 中的name需要修改\n> 2. src/router/index.js 中 `base: window.__POWERED_BY_QIANKUN__ ? '/microapp' : '/',`\n> 中的microapp需要修改，他表示在基座应用中的第一级子目录。\n> 3. 同时'microapp'在主应用中也会有对应的地方：比如我们把它放在了AppList.js这个文件中，这里边是\n> 对子应用的配置\n>   ```\n>   export const AppList = [\n>   {\n>     name: 'microapp',\n>     entry: '//localhost:10001',\n>     container: '#appContainer',\n>     activeRule: '/microapp/'\n>    }\n>   ]\n>   ```\n### 子应用的整体改造原则：\n> 1. 路由配置在主应用要有一套，同时操作权限的配置在主应用下生效，独立运行不\n> 需要生效，因为我们的权限相关配置原则上只在主应用下使用，如果独立查看子\n> 应用，正常情况有权限看即意味着有权限看全部页面，否则维护两套环境的资源\n> 和操作权限维护成本会非常高，非必要不建议这么去做。\n> \n> 2. 主应用路由配置事例：fpms_pro/src/config/modules/MicroAppTest.js\n> \n> 3. 如果要查看demo，url增加参数`debug=1`即可\n> \n> 4. 开发独立项目时，需复制`fpms_app_template`项目，然后需要做这么几步：\n> 1. package.json中name重新命名，例如：`fpms_app1`\n> 2. `/src/config/router.config.js`中的路由，根据业务情况进行修改\n> 3. 修改项目运行端口10001到其他端口，例如：10002，只要保证主应用中已经加载的子应用没用过即可\n>\n> 4. 然后再说下主应用中AppList.js需要添加的配置：\n>   ```\n>   {\n>      name: 'app1',\n>      entry: '//localhost:10002',\n>      container: '#appContainer',\n>      activeRule: '/app1/'\n>   }\n>   ```\n> 5. 虽然当前架构支持任意开发语言进行子应用的开发，但这里还是建议使用相同的技术栈，便于后期维护\n> 6. 子应用在独立运行时会展示自己的头部和左侧菜单，运行在基座应用中头部和左侧菜单不展示\n> 7. 状态的传递通过基座应用，通过对基座应用某个状态的监听，在子应用中处理对应的逻辑，例如：groupItem\n> 相关的配置在`main.js`的mount函数下。实际情况并不建议应用之间进行过多的数据传递，如果确实非常多，理论上应该是同一个应用。\n> 8. 关于代码复用，当我们有精力可以构建并维护自己的组件库的时候，可以使用组件库的方式来对公共组件进行复用\n> 9. 关于什么情况下使用子应用的方式进行开发部署；由于拆分成子应用也同样会带来维护上的成本，因此目前的拆分原则是根据团队进行拆分，例如一个独立团队对相对独立的模块进行开发；当然如果后期已有模块需要重构，则也可以使用这种方式进行，因为这也是微前端架构的一个优势。\n> 10. 子应用应该有自己的域名，因此逻辑上是可以独立运行上线使用的，如果没有域名，可以通过path在nginx上做相关配置。\n> \n\n### 关于部署上线\n> 我们目前支持两种部署方式\n#### 独立域名部署\n> \n> 首先，子应用有自己的独立域名，并且支持https，例如：\n>   1. microapp.pms.gmtech.top\n> \n> 独立域名这种部署方式有些必要条件：\n> 1. 资源需要支持CORS跨域请求，配置nginx\n> 2. 域名支持https访问。\n> \n> 相关需要调整文件的地方：\n> 1. 主应用里AppList.js中的entry的写法：\n> ```\n>  {\n>    name: 'microapp',\n>    entry: getAppLoadUri('microapp', 10001),\n>    container: '#appContainer',\n>    activeRule: '/microapp/'\n>  }\n> entry获取合适的域名地址，这里方法为：\n>\n> const env = process.env.NODE_ENV\n> function getAppLoadUri (appName, port) {\n>   const hostName = location.hostname\n>   const protocol = location.protocol\n>   if (env === 'local') {\n>     return `http://localhost:${port}/${appName}/`\n>   } else if (env === 'development' || env === 'test') {\n>     return `/${appName}/`\n>   } else {\n>     return `${protocol}//${appName}.${hostName}/${appName}/`\n>   }\n> }\n>\n> ```\n> 2. 子应用中vue.config.js中,线上访问需要将静态资源上传到CDN上\n> ```javascript\n> const publicPath = process.env.NODE_ENV === 'production' && process.env.VUE_APP_PREVIEW !== 'true' ? 'https://pms-static.gmtech.top/fe/src/fpms_microapp/dist/' : '/microapp/'\n> ```\n> 3. 子应用中router/index.js中\n> ```javascript\n> base: window.__POWERED_BY_QIANKUN__ ? '/microapp' : '/'\n> ```\n> 4. 注意这几个地方的写法，独立部署和通过path部署是不一样的。\n> 5. nginx 配置与单页应用类似，但需要支持cors配置\n> ```\n> server {\n>       listen       80;\n>       server_name pms-microapp-dev.gmtech.top;\n>       add_header Access-Control-Allow-Methods *;\n>       add_header Access-Control-Allow-Origin $http_origin;\n>       add_header Access-Control-Allow-Credentials true;\n>       add_header Access-Control-Allow-Headers Token,groupid,app,appid,projectid,project_id,Project-Id,appcode,Content-Type,Upgrade,Connection,X-Real-IP,Company-Id,companyID;\n>       add_header Access-Control-Max-Age 86400;\n>       if ($request_method = OPTIONS){\n>           return 200;\n>       }\n>   \n>       location / {\n>           root   /home/work/www/fe/fpms_microapp/dist;\n>           proxy_set_header Host $host;\n>           index  index.html;\n>           try_files $uri $uri/ /index.html;\n>       }\n> }\n> ```\n> \n#### path区分子项目部署\n> 如果每个项目都要有独立域名才能使用的话，目前的微前端架构实际上是有缺陷的，因为我可能是想把一个系统\n> 的多个模块进行拆分，方便维护，因此，通过path来区分子项目也应该支持：由于这种方式使用的是相同的域名\n> 实际操作起来会节省掉很多由于资源跨域导致的无法加载的问题。也更适合把一个独立的大项目拆分成小应用的\n> 场景。\n>\n> 相关需要调整文件的地方：\n> 1. 主应用里AppList.js中的entry的写法：\n> ```\n> entry: getAppLoadUri('microapp', 10001),\n> ```\n> 2. 子应用中vue.config.js中,线上访问需要将静态资源上传到CDN上\n> ```javascript\n> const publicPath = process.env.NODE_ENV === 'production' && process.env.VUE_APP_PREVIEW !== 'true' ? 'https://pms-static.gmtech.top/fe/src/fpms_microapp/dist/' : '/microapp/'\n> ```\n> 3. 子应用中router/index.js中base始终保持'/'会比较合适，因为子应用与子应用之间的跳转需要使用path方式，如果配置了base则跳转会出现问题。\n> 4. 注意这几个地方的写法，path部署和通过域名部署是不一样的。\n> 5. nginx配置方式\n> ```\n> server {\n>     listen       80;\n>     server_name pms-dev.gmtech.top;\n> \n>     gzip on;               #开启gzip压缩功能\n>     gzip_static on;        #这个地方很重要，配置了vue打包gz文件以后可以直接使用，无需nginx再执行打包动作，节省服务器资源\n>     gzip_min_length 1k;    #设置允许压缩的页面最小字节数 vue打包配置需要生成.gz文件的地方也是1k\n>     gzip_buffers 4 16k;    #设置压缩缓冲区大小，此处设置为4个16K内存作为压缩结果流缓存\n>     gzip_http_version 1.0; #http协议版本 默认1.1,实际上我们用的1.0,如果不配置gzip不生效\n>     gzip_comp_level 2;     #设置压缩比率，最小为1，处理速度快，传输速度慢；9为最大压缩比，处理速度慢，传输速度快\n>     gzip_types text/css text/xml application/javascript; #制定压缩的类型\n>     gzip_vary on;          #选择支持vary header；改选项可以让前端的缓存服务器缓存经过gzip压缩的页面\n> \n>     location / {\n>         root   /home/work/www/fe/fpms_pro/dist;\n>         proxy_set_header Host $host;\n>         index  index.html;\n>         try_files $uri $uri/ /index.html;\n>         location = /index.html {\n>             add_header Cache-Control \"no-cache, no-store\";\n>         }\n>     }\n> \n>     location /microapp{\n>       alias /home/work/www/fe/fpms_microapp/dist;\n>       index  index.html;\n>       try_files $uri $uri/ /index.html;\n>     }\n> }\n> ```\n>\n> 有了这些内容，我们想如何进行一个项目的开发都变得非常灵活\n\n### 当前应用的部署方式\n> 目前我们的线上环境使用的是独立域名部署方式，因为在线上是部署在K8S上，不同子应用需要能够独立运行，所以这里必须给每个子应用一个独立的域名。\n> 但是为了兼顾便捷性，我们在开发环境和测试环境使用的是path方式，这样能够节省维护子域名的成本。\n> 本地开发使用localhost，dev环境和test环境使用path配置，线上和预发布环境使用子域名。\n\n### 参考\n> 项目参考乾坤框架：https://qiankun.umijs.org/zh/guide\n> \n> 在保证业务需求的前提下，使用渐进式的改造方案，避免因为改造造成项目的大量修改\n>\n> 微前端的前提，还是得有主体应用，然后才有微组件或微应用，解决的是可控体系下的前端协同开发问题（含空间分离带来的协作和时间延续带来的升级维护）","source":"_posts/FE微前端架构实施.md","raw":"---\ntitle: FE微前端架构实施\ntags:\n  - Web开发\n  - 微前端\ncategories:\n  - Web开发\n  - 性能优化\ntoc: false\ndate: 2021-03-12 20:20:10\n---\n\n# 锋物物管系统-子应用模板\n\n### 名词解释：\n> 主应用===基座应用；子应用===需要运行在主应用下的应用，同时支持独立运行\n> \n### 希望达到的目的\n> 1. 代码库更小，更内聚、可维护性更高\n> 2. 松耦合、自治的团队可扩展性更好\n> 3. 渐进地升级、更新甚至重写部分前端功能成为了可能\n> 4. 可以独立开发部署\n> \n\n### 特点：\n> 1. 独立开发运行部署。\n> 2. 子应用的路由配置对应基座应用的路由配置上，以此方式来复用头部和侧边菜单。\n> 3. 状态之间的传递，原则上是通过基座应用来进行的。\n> \n### 当你拿到这个子应用模板以后，需要对其进行基本信息的改造：\n> 1. package.json 中的name需要修改\n> 2. src/router/index.js 中 `base: window.__POWERED_BY_QIANKUN__ ? '/microapp' : '/',`\n> 中的microapp需要修改，他表示在基座应用中的第一级子目录。\n> 3. 同时'microapp'在主应用中也会有对应的地方：比如我们把它放在了AppList.js这个文件中，这里边是\n> 对子应用的配置\n>   ```\n>   export const AppList = [\n>   {\n>     name: 'microapp',\n>     entry: '//localhost:10001',\n>     container: '#appContainer',\n>     activeRule: '/microapp/'\n>    }\n>   ]\n>   ```\n### 子应用的整体改造原则：\n> 1. 路由配置在主应用要有一套，同时操作权限的配置在主应用下生效，独立运行不\n> 需要生效，因为我们的权限相关配置原则上只在主应用下使用，如果独立查看子\n> 应用，正常情况有权限看即意味着有权限看全部页面，否则维护两套环境的资源\n> 和操作权限维护成本会非常高，非必要不建议这么去做。\n> \n> 2. 主应用路由配置事例：fpms_pro/src/config/modules/MicroAppTest.js\n> \n> 3. 如果要查看demo，url增加参数`debug=1`即可\n> \n> 4. 开发独立项目时，需复制`fpms_app_template`项目，然后需要做这么几步：\n> 1. package.json中name重新命名，例如：`fpms_app1`\n> 2. `/src/config/router.config.js`中的路由，根据业务情况进行修改\n> 3. 修改项目运行端口10001到其他端口，例如：10002，只要保证主应用中已经加载的子应用没用过即可\n>\n> 4. 然后再说下主应用中AppList.js需要添加的配置：\n>   ```\n>   {\n>      name: 'app1',\n>      entry: '//localhost:10002',\n>      container: '#appContainer',\n>      activeRule: '/app1/'\n>   }\n>   ```\n> 5. 虽然当前架构支持任意开发语言进行子应用的开发，但这里还是建议使用相同的技术栈，便于后期维护\n> 6. 子应用在独立运行时会展示自己的头部和左侧菜单，运行在基座应用中头部和左侧菜单不展示\n> 7. 状态的传递通过基座应用，通过对基座应用某个状态的监听，在子应用中处理对应的逻辑，例如：groupItem\n> 相关的配置在`main.js`的mount函数下。实际情况并不建议应用之间进行过多的数据传递，如果确实非常多，理论上应该是同一个应用。\n> 8. 关于代码复用，当我们有精力可以构建并维护自己的组件库的时候，可以使用组件库的方式来对公共组件进行复用\n> 9. 关于什么情况下使用子应用的方式进行开发部署；由于拆分成子应用也同样会带来维护上的成本，因此目前的拆分原则是根据团队进行拆分，例如一个独立团队对相对独立的模块进行开发；当然如果后期已有模块需要重构，则也可以使用这种方式进行，因为这也是微前端架构的一个优势。\n> 10. 子应用应该有自己的域名，因此逻辑上是可以独立运行上线使用的，如果没有域名，可以通过path在nginx上做相关配置。\n> \n\n### 关于部署上线\n> 我们目前支持两种部署方式\n#### 独立域名部署\n> \n> 首先，子应用有自己的独立域名，并且支持https，例如：\n>   1. microapp.pms.gmtech.top\n> \n> 独立域名这种部署方式有些必要条件：\n> 1. 资源需要支持CORS跨域请求，配置nginx\n> 2. 域名支持https访问。\n> \n> 相关需要调整文件的地方：\n> 1. 主应用里AppList.js中的entry的写法：\n> ```\n>  {\n>    name: 'microapp',\n>    entry: getAppLoadUri('microapp', 10001),\n>    container: '#appContainer',\n>    activeRule: '/microapp/'\n>  }\n> entry获取合适的域名地址，这里方法为：\n>\n> const env = process.env.NODE_ENV\n> function getAppLoadUri (appName, port) {\n>   const hostName = location.hostname\n>   const protocol = location.protocol\n>   if (env === 'local') {\n>     return `http://localhost:${port}/${appName}/`\n>   } else if (env === 'development' || env === 'test') {\n>     return `/${appName}/`\n>   } else {\n>     return `${protocol}//${appName}.${hostName}/${appName}/`\n>   }\n> }\n>\n> ```\n> 2. 子应用中vue.config.js中,线上访问需要将静态资源上传到CDN上\n> ```javascript\n> const publicPath = process.env.NODE_ENV === 'production' && process.env.VUE_APP_PREVIEW !== 'true' ? 'https://pms-static.gmtech.top/fe/src/fpms_microapp/dist/' : '/microapp/'\n> ```\n> 3. 子应用中router/index.js中\n> ```javascript\n> base: window.__POWERED_BY_QIANKUN__ ? '/microapp' : '/'\n> ```\n> 4. 注意这几个地方的写法，独立部署和通过path部署是不一样的。\n> 5. nginx 配置与单页应用类似，但需要支持cors配置\n> ```\n> server {\n>       listen       80;\n>       server_name pms-microapp-dev.gmtech.top;\n>       add_header Access-Control-Allow-Methods *;\n>       add_header Access-Control-Allow-Origin $http_origin;\n>       add_header Access-Control-Allow-Credentials true;\n>       add_header Access-Control-Allow-Headers Token,groupid,app,appid,projectid,project_id,Project-Id,appcode,Content-Type,Upgrade,Connection,X-Real-IP,Company-Id,companyID;\n>       add_header Access-Control-Max-Age 86400;\n>       if ($request_method = OPTIONS){\n>           return 200;\n>       }\n>   \n>       location / {\n>           root   /home/work/www/fe/fpms_microapp/dist;\n>           proxy_set_header Host $host;\n>           index  index.html;\n>           try_files $uri $uri/ /index.html;\n>       }\n> }\n> ```\n> \n#### path区分子项目部署\n> 如果每个项目都要有独立域名才能使用的话，目前的微前端架构实际上是有缺陷的，因为我可能是想把一个系统\n> 的多个模块进行拆分，方便维护，因此，通过path来区分子项目也应该支持：由于这种方式使用的是相同的域名\n> 实际操作起来会节省掉很多由于资源跨域导致的无法加载的问题。也更适合把一个独立的大项目拆分成小应用的\n> 场景。\n>\n> 相关需要调整文件的地方：\n> 1. 主应用里AppList.js中的entry的写法：\n> ```\n> entry: getAppLoadUri('microapp', 10001),\n> ```\n> 2. 子应用中vue.config.js中,线上访问需要将静态资源上传到CDN上\n> ```javascript\n> const publicPath = process.env.NODE_ENV === 'production' && process.env.VUE_APP_PREVIEW !== 'true' ? 'https://pms-static.gmtech.top/fe/src/fpms_microapp/dist/' : '/microapp/'\n> ```\n> 3. 子应用中router/index.js中base始终保持'/'会比较合适，因为子应用与子应用之间的跳转需要使用path方式，如果配置了base则跳转会出现问题。\n> 4. 注意这几个地方的写法，path部署和通过域名部署是不一样的。\n> 5. nginx配置方式\n> ```\n> server {\n>     listen       80;\n>     server_name pms-dev.gmtech.top;\n> \n>     gzip on;               #开启gzip压缩功能\n>     gzip_static on;        #这个地方很重要，配置了vue打包gz文件以后可以直接使用，无需nginx再执行打包动作，节省服务器资源\n>     gzip_min_length 1k;    #设置允许压缩的页面最小字节数 vue打包配置需要生成.gz文件的地方也是1k\n>     gzip_buffers 4 16k;    #设置压缩缓冲区大小，此处设置为4个16K内存作为压缩结果流缓存\n>     gzip_http_version 1.0; #http协议版本 默认1.1,实际上我们用的1.0,如果不配置gzip不生效\n>     gzip_comp_level 2;     #设置压缩比率，最小为1，处理速度快，传输速度慢；9为最大压缩比，处理速度慢，传输速度快\n>     gzip_types text/css text/xml application/javascript; #制定压缩的类型\n>     gzip_vary on;          #选择支持vary header；改选项可以让前端的缓存服务器缓存经过gzip压缩的页面\n> \n>     location / {\n>         root   /home/work/www/fe/fpms_pro/dist;\n>         proxy_set_header Host $host;\n>         index  index.html;\n>         try_files $uri $uri/ /index.html;\n>         location = /index.html {\n>             add_header Cache-Control \"no-cache, no-store\";\n>         }\n>     }\n> \n>     location /microapp{\n>       alias /home/work/www/fe/fpms_microapp/dist;\n>       index  index.html;\n>       try_files $uri $uri/ /index.html;\n>     }\n> }\n> ```\n>\n> 有了这些内容，我们想如何进行一个项目的开发都变得非常灵活\n\n### 当前应用的部署方式\n> 目前我们的线上环境使用的是独立域名部署方式，因为在线上是部署在K8S上，不同子应用需要能够独立运行，所以这里必须给每个子应用一个独立的域名。\n> 但是为了兼顾便捷性，我们在开发环境和测试环境使用的是path方式，这样能够节省维护子域名的成本。\n> 本地开发使用localhost，dev环境和test环境使用path配置，线上和预发布环境使用子域名。\n\n### 参考\n> 项目参考乾坤框架：https://qiankun.umijs.org/zh/guide\n> \n> 在保证业务需求的前提下，使用渐进式的改造方案，避免因为改造造成项目的大量修改\n>\n> 微前端的前提，还是得有主体应用，然后才有微组件或微应用，解决的是可控体系下的前端协同开发问题（含空间分离带来的协作和时间延续带来的升级维护）","slug":"FE微前端架构实施","published":1,"updated":"2021-09-06T09:59:16.289Z","_id":"ckockznwj000hh5s6djcy5oel","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"锋物物管系统-子应用模板\"><a href=\"#锋物物管系统-子应用模板\" class=\"headerlink\" title=\"锋物物管系统-子应用模板\"></a>锋物物管系统-子应用模板</h1><h3 id=\"名词解释：\"><a href=\"#名词解释：\" class=\"headerlink\" title=\"名词解释：\"></a>名词解释：</h3><blockquote>\n<p>主应用===基座应用；子应用===需要运行在主应用下的应用，同时支持独立运行</p>\n</blockquote>\n<h3 id=\"希望达到的目的\"><a href=\"#希望达到的目的\" class=\"headerlink\" title=\"希望达到的目的\"></a>希望达到的目的</h3><blockquote>\n<ol>\n<li>代码库更小，更内聚、可维护性更高</li>\n<li>松耦合、自治的团队可扩展性更好</li>\n<li>渐进地升级、更新甚至重写部分前端功能成为了可能</li>\n<li>可以独立开发部署</li>\n</ol>\n</blockquote>\n<h3 id=\"特点：\"><a href=\"#特点：\" class=\"headerlink\" title=\"特点：\"></a>特点：</h3><blockquote>\n<ol>\n<li>独立开发运行部署。</li>\n<li>子应用的路由配置对应基座应用的路由配置上，以此方式来复用头部和侧边菜单。</li>\n<li>状态之间的传递，原则上是通过基座应用来进行的。</li>\n</ol>\n</blockquote>\n<h3 id=\"当你拿到这个子应用模板以后，需要对其进行基本信息的改造：\"><a href=\"#当你拿到这个子应用模板以后，需要对其进行基本信息的改造：\" class=\"headerlink\" title=\"当你拿到这个子应用模板以后，需要对其进行基本信息的改造：\"></a>当你拿到这个子应用模板以后，需要对其进行基本信息的改造：</h3><blockquote>\n<ol>\n<li>package.json 中的name需要修改</li>\n<li>src/router/index.js 中 <code>base: window.__POWERED_BY_QIANKUN__ ? &#39;/microapp&#39; : &#39;/&#39;,</code><br>中的microapp需要修改，他表示在基座应用中的第一级子目录。</li>\n<li>同时’microapp’在主应用中也会有对应的地方：比如我们把它放在了AppList.js这个文件中，这里边是<br>对子应用的配置<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;   export const AppList = [</span><br><span class=\"line\">&gt;   &#123;</span><br><span class=\"line\">&gt;     name: &apos;microapp&apos;,</span><br><span class=\"line\">&gt;     entry: &apos;//localhost:10001&apos;,</span><br><span class=\"line\">&gt;     container: &apos;#appContainer&apos;,</span><br><span class=\"line\">&gt;     activeRule: &apos;/microapp/&apos;</span><br><span class=\"line\">&gt;    &#125;</span><br><span class=\"line\">&gt;   ]</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"子应用的整体改造原则：\"><a href=\"#子应用的整体改造原则：\" class=\"headerlink\" title=\"子应用的整体改造原则：\"></a>子应用的整体改造原则：</h3><blockquote>\n<ol>\n<li><p>路由配置在主应用要有一套，同时操作权限的配置在主应用下生效，独立运行不<br>需要生效，因为我们的权限相关配置原则上只在主应用下使用，如果独立查看子<br>应用，正常情况有权限看即意味着有权限看全部页面，否则维护两套环境的资源<br>和操作权限维护成本会非常高，非必要不建议这么去做。</p>\n</li>\n<li><p>主应用路由配置事例：fpms_pro/src/config/modules/MicroAppTest.js</p>\n</li>\n<li><p>如果要查看demo，url增加参数<code>debug=1</code>即可</p>\n</li>\n<li><p>开发独立项目时，需复制<code>fpms_app_template</code>项目，然后需要做这么几步：</p>\n</li>\n<li>package.json中name重新命名，例如：<code>fpms_app1</code></li>\n<li><code>/src/config/router.config.js</code>中的路由，根据业务情况进行修改</li>\n<li><p>修改项目运行端口10001到其他端口，例如：10002，只要保证主应用中已经加载的子应用没用过即可</p>\n</li>\n<li><p>然后再说下主应用中AppList.js需要添加的配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;   &#123;</span><br><span class=\"line\">&gt;      name: &apos;app1&apos;,</span><br><span class=\"line\">&gt;      entry: &apos;//localhost:10002&apos;,</span><br><span class=\"line\">&gt;      container: &apos;#appContainer&apos;,</span><br><span class=\"line\">&gt;      activeRule: &apos;/app1/&apos;</span><br><span class=\"line\">&gt;   &#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"5\">\n<li>虽然当前架构支持任意开发语言进行子应用的开发，但这里还是建议使用相同的技术栈，便于后期维护</li>\n<li>子应用在独立运行时会展示自己的头部和左侧菜单，运行在基座应用中头部和左侧菜单不展示</li>\n<li>状态的传递通过基座应用，通过对基座应用某个状态的监听，在子应用中处理对应的逻辑，例如：groupItem<br>相关的配置在<code>main.js</code>的mount函数下。实际情况并不建议应用之间进行过多的数据传递，如果确实非常多，理论上应该是同一个应用。</li>\n<li>关于代码复用，当我们有精力可以构建并维护自己的组件库的时候，可以使用组件库的方式来对公共组件进行复用</li>\n<li>关于什么情况下使用子应用的方式进行开发部署；由于拆分成子应用也同样会带来维护上的成本，因此目前的拆分原则是根据团队进行拆分，例如一个独立团队对相对独立的模块进行开发；当然如果后期已有模块需要重构，则也可以使用这种方式进行，因为这也是微前端架构的一个优势。</li>\n<li>子应用应该有自己的域名，因此逻辑上是可以独立运行上线使用的，如果没有域名，可以通过path在nginx上做相关配置。</li>\n</ol>\n</blockquote>\n<h3 id=\"关于部署上线\"><a href=\"#关于部署上线\" class=\"headerlink\" title=\"关于部署上线\"></a>关于部署上线</h3><blockquote>\n<p>我们目前支持两种部署方式</p>\n</blockquote>\n<h4 id=\"独立域名部署\"><a href=\"#独立域名部署\" class=\"headerlink\" title=\"独立域名部署\"></a>独立域名部署</h4><blockquote>\n<p>首先，子应用有自己的独立域名，并且支持https，例如：</p>\n<ol>\n<li>microapp.pms.gmtech.top</li>\n</ol>\n<p>独立域名这种部署方式有些必要条件：</p>\n<ol>\n<li>资源需要支持CORS跨域请求，配置nginx</li>\n<li>域名支持https访问。</li>\n</ol>\n<p>相关需要调整文件的地方：</p>\n<ol>\n<li>主应用里AppList.js中的entry的写法：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;  &#123;</span><br><span class=\"line\">&gt;    name: &apos;microapp&apos;,</span><br><span class=\"line\">&gt;    entry: getAppLoadUri(&apos;microapp&apos;, 10001),</span><br><span class=\"line\">&gt;    container: &apos;#appContainer&apos;,</span><br><span class=\"line\">&gt;    activeRule: &apos;/microapp/&apos;</span><br><span class=\"line\">&gt;  &#125;</span><br><span class=\"line\">&gt; entry获取合适的域名地址，这里方法为：</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt; const env = process.env.NODE_ENV</span><br><span class=\"line\">&gt; function getAppLoadUri (appName, port) &#123;</span><br><span class=\"line\">&gt;   const hostName = location.hostname</span><br><span class=\"line\">&gt;   const protocol = location.protocol</span><br><span class=\"line\">&gt;   if (env === &apos;local&apos;) &#123;</span><br><span class=\"line\">&gt;     return `http://localhost:$&#123;port&#125;/$&#123;appName&#125;/`</span><br><span class=\"line\">&gt;   &#125; else if (env === &apos;development&apos; || env === &apos;test&apos;) &#123;</span><br><span class=\"line\">&gt;     return `/$&#123;appName&#125;/`</span><br><span class=\"line\">&gt;   &#125; else &#123;</span><br><span class=\"line\">&gt;     return `$&#123;protocol&#125;//$&#123;appName&#125;.$&#123;hostName&#125;/$&#123;appName&#125;/`</span><br><span class=\"line\">&gt;   &#125;</span><br><span class=\"line\">&gt; &#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>子应用中vue.config.js中,线上访问需要将静态资源上传到CDN上<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"keyword\">const</span> publicPath = process.env.NODE_ENV === <span class=\"string\">'production'</span> &amp;&amp; process.env.VUE_APP_PREVIEW !== <span class=\"string\">'true'</span> ? <span class=\"string\">'https://pms-static.gmtech.top/fe/src/fpms_microapp/dist/'</span> : <span class=\"string\">'/microapp/'</span></span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"3\">\n<li>子应用中router/index.js中<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; base: <span class=\"built_in\">window</span>.__POWERED_BY_QIANKUN__ ? <span class=\"string\">'/microapp'</span> : <span class=\"string\">'/'</span></span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"4\">\n<li>注意这几个地方的写法，独立部署和通过path部署是不一样的。</li>\n<li>nginx 配置与单页应用类似，但需要支持cors配置<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; server &#123;</span><br><span class=\"line\">&gt;       listen       80;</span><br><span class=\"line\">&gt;       server_name pms-microapp-dev.gmtech.top;</span><br><span class=\"line\">&gt;       add_header Access-Control-Allow-Methods *;</span><br><span class=\"line\">&gt;       add_header Access-Control-Allow-Origin $http_origin;</span><br><span class=\"line\">&gt;       add_header Access-Control-Allow-Credentials true;</span><br><span class=\"line\">&gt;       add_header Access-Control-Allow-Headers Token,groupid,app,appid,projectid,project_id,Project-Id,appcode,Content-Type,Upgrade,Connection,X-Real-IP,Company-Id,companyID;</span><br><span class=\"line\">&gt;       add_header Access-Control-Max-Age 86400;</span><br><span class=\"line\">&gt;       if ($request_method = OPTIONS)&#123;</span><br><span class=\"line\">&gt;           return 200;</span><br><span class=\"line\">&gt;       &#125;</span><br><span class=\"line\">&gt;   </span><br><span class=\"line\">&gt;       location / &#123;</span><br><span class=\"line\">&gt;           root   /home/work/www/fe/fpms_microapp/dist;</span><br><span class=\"line\">&gt;           proxy_set_header Host $host;</span><br><span class=\"line\">&gt;           index  index.html;</span><br><span class=\"line\">&gt;           try_files $uri $uri/ /index.html;</span><br><span class=\"line\">&gt;       &#125;</span><br><span class=\"line\">&gt; &#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<blockquote>\n</blockquote>\n<h4 id=\"path区分子项目部署\"><a href=\"#path区分子项目部署\" class=\"headerlink\" title=\"path区分子项目部署\"></a>path区分子项目部署</h4><blockquote>\n<p>如果每个项目都要有独立域名才能使用的话，目前的微前端架构实际上是有缺陷的，因为我可能是想把一个系统<br>的多个模块进行拆分，方便维护，因此，通过path来区分子项目也应该支持：由于这种方式使用的是相同的域名<br>实际操作起来会节省掉很多由于资源跨域导致的无法加载的问题。也更适合把一个独立的大项目拆分成小应用的<br>场景。</p>\n<p>相关需要调整文件的地方：</p>\n<ol>\n<li>主应用里AppList.js中的entry的写法：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; entry: getAppLoadUri(&apos;microapp&apos;, 10001),</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>子应用中vue.config.js中,线上访问需要将静态资源上传到CDN上<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"keyword\">const</span> publicPath = process.env.NODE_ENV === <span class=\"string\">'production'</span> &amp;&amp; process.env.VUE_APP_PREVIEW !== <span class=\"string\">'true'</span> ? <span class=\"string\">'https://pms-static.gmtech.top/fe/src/fpms_microapp/dist/'</span> : <span class=\"string\">'/microapp/'</span></span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"3\">\n<li>子应用中router/index.js中base始终保持’/‘会比较合适，因为子应用与子应用之间的跳转需要使用path方式，如果配置了base则跳转会出现问题。</li>\n<li>注意这几个地方的写法，path部署和通过域名部署是不一样的。</li>\n<li>nginx配置方式<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; server &#123;</span><br><span class=\"line\">&gt;     listen       80;</span><br><span class=\"line\">&gt;     server_name pms-dev.gmtech.top;</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt;     gzip on;               #开启gzip压缩功能</span><br><span class=\"line\">&gt;     gzip_static on;        #这个地方很重要，配置了vue打包gz文件以后可以直接使用，无需nginx再执行打包动作，节省服务器资源</span><br><span class=\"line\">&gt;     gzip_min_length 1k;    #设置允许压缩的页面最小字节数 vue打包配置需要生成.gz文件的地方也是1k</span><br><span class=\"line\">&gt;     gzip_buffers 4 16k;    #设置压缩缓冲区大小，此处设置为4个16K内存作为压缩结果流缓存</span><br><span class=\"line\">&gt;     gzip_http_version 1.0; #http协议版本 默认1.1,实际上我们用的1.0,如果不配置gzip不生效</span><br><span class=\"line\">&gt;     gzip_comp_level 2;     #设置压缩比率，最小为1，处理速度快，传输速度慢；9为最大压缩比，处理速度慢，传输速度快</span><br><span class=\"line\">&gt;     gzip_types text/css text/xml application/javascript; #制定压缩的类型</span><br><span class=\"line\">&gt;     gzip_vary on;          #选择支持vary header；改选项可以让前端的缓存服务器缓存经过gzip压缩的页面</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt;     location / &#123;</span><br><span class=\"line\">&gt;         root   /home/work/www/fe/fpms_pro/dist;</span><br><span class=\"line\">&gt;         proxy_set_header Host $host;</span><br><span class=\"line\">&gt;         index  index.html;</span><br><span class=\"line\">&gt;         try_files $uri $uri/ /index.html;</span><br><span class=\"line\">&gt;         location = /index.html &#123;</span><br><span class=\"line\">&gt;             add_header Cache-Control &quot;no-cache, no-store&quot;;</span><br><span class=\"line\">&gt;         &#125;</span><br><span class=\"line\">&gt;     &#125;</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt;     location /microapp&#123;</span><br><span class=\"line\">&gt;       alias /home/work/www/fe/fpms_microapp/dist;</span><br><span class=\"line\">&gt;       index  index.html;</span><br><span class=\"line\">&gt;       try_files $uri $uri/ /index.html;</span><br><span class=\"line\">&gt;     &#125;</span><br><span class=\"line\">&gt; &#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>有了这些内容，我们想如何进行一个项目的开发都变得非常灵活</p>\n</blockquote>\n<h3 id=\"当前应用的部署方式\"><a href=\"#当前应用的部署方式\" class=\"headerlink\" title=\"当前应用的部署方式\"></a>当前应用的部署方式</h3><blockquote>\n<p>目前我们的线上环境使用的是独立域名部署方式，因为在线上是部署在K8S上，不同子应用需要能够独立运行，所以这里必须给每个子应用一个独立的域名。<br>但是为了兼顾便捷性，我们在开发环境和测试环境使用的是path方式，这样能够节省维护子域名的成本。<br>本地开发使用localhost，dev环境和test环境使用path配置，线上和预发布环境使用子域名。</p>\n</blockquote>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><blockquote>\n<p>项目参考乾坤框架：<a href=\"https://qiankun.umijs.org/zh/guide\" target=\"_blank\" rel=\"noopener\">https://qiankun.umijs.org/zh/guide</a></p>\n<p>在保证业务需求的前提下，使用渐进式的改造方案，避免因为改造造成项目的大量修改</p>\n<p>微前端的前提，还是得有主体应用，然后才有微组件或微应用，解决的是可控体系下的前端协同开发问题（含空间分离带来的协作和时间延续带来的升级维护）</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"锋物物管系统-子应用模板\"><a href=\"#锋物物管系统-子应用模板\" class=\"headerlink\" title=\"锋物物管系统-子应用模板\"></a>锋物物管系统-子应用模板</h1><h3 id=\"名词解释：\"><a href=\"#名词解释：\" class=\"headerlink\" title=\"名词解释：\"></a>名词解释：</h3><blockquote>\n<p>主应用===基座应用；子应用===需要运行在主应用下的应用，同时支持独立运行</p>\n</blockquote>\n<h3 id=\"希望达到的目的\"><a href=\"#希望达到的目的\" class=\"headerlink\" title=\"希望达到的目的\"></a>希望达到的目的</h3><blockquote>\n<ol>\n<li>代码库更小，更内聚、可维护性更高</li>\n<li>松耦合、自治的团队可扩展性更好</li>\n<li>渐进地升级、更新甚至重写部分前端功能成为了可能</li>\n<li>可以独立开发部署</li>\n</ol>\n</blockquote>\n<h3 id=\"特点：\"><a href=\"#特点：\" class=\"headerlink\" title=\"特点：\"></a>特点：</h3><blockquote>\n<ol>\n<li>独立开发运行部署。</li>\n<li>子应用的路由配置对应基座应用的路由配置上，以此方式来复用头部和侧边菜单。</li>\n<li>状态之间的传递，原则上是通过基座应用来进行的。</li>\n</ol>\n</blockquote>\n<h3 id=\"当你拿到这个子应用模板以后，需要对其进行基本信息的改造：\"><a href=\"#当你拿到这个子应用模板以后，需要对其进行基本信息的改造：\" class=\"headerlink\" title=\"当你拿到这个子应用模板以后，需要对其进行基本信息的改造：\"></a>当你拿到这个子应用模板以后，需要对其进行基本信息的改造：</h3><blockquote>\n<ol>\n<li>package.json 中的name需要修改</li>\n<li>src/router/index.js 中 <code>base: window.__POWERED_BY_QIANKUN__ ? &#39;/microapp&#39; : &#39;/&#39;,</code><br>中的microapp需要修改，他表示在基座应用中的第一级子目录。</li>\n<li>同时’microapp’在主应用中也会有对应的地方：比如我们把它放在了AppList.js这个文件中，这里边是<br>对子应用的配置<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;   export const AppList = [</span><br><span class=\"line\">&gt;   &#123;</span><br><span class=\"line\">&gt;     name: &apos;microapp&apos;,</span><br><span class=\"line\">&gt;     entry: &apos;//localhost:10001&apos;,</span><br><span class=\"line\">&gt;     container: &apos;#appContainer&apos;,</span><br><span class=\"line\">&gt;     activeRule: &apos;/microapp/&apos;</span><br><span class=\"line\">&gt;    &#125;</span><br><span class=\"line\">&gt;   ]</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"子应用的整体改造原则：\"><a href=\"#子应用的整体改造原则：\" class=\"headerlink\" title=\"子应用的整体改造原则：\"></a>子应用的整体改造原则：</h3><blockquote>\n<ol>\n<li><p>路由配置在主应用要有一套，同时操作权限的配置在主应用下生效，独立运行不<br>需要生效，因为我们的权限相关配置原则上只在主应用下使用，如果独立查看子<br>应用，正常情况有权限看即意味着有权限看全部页面，否则维护两套环境的资源<br>和操作权限维护成本会非常高，非必要不建议这么去做。</p>\n</li>\n<li><p>主应用路由配置事例：fpms_pro/src/config/modules/MicroAppTest.js</p>\n</li>\n<li><p>如果要查看demo，url增加参数<code>debug=1</code>即可</p>\n</li>\n<li><p>开发独立项目时，需复制<code>fpms_app_template</code>项目，然后需要做这么几步：</p>\n</li>\n<li>package.json中name重新命名，例如：<code>fpms_app1</code></li>\n<li><code>/src/config/router.config.js</code>中的路由，根据业务情况进行修改</li>\n<li><p>修改项目运行端口10001到其他端口，例如：10002，只要保证主应用中已经加载的子应用没用过即可</p>\n</li>\n<li><p>然后再说下主应用中AppList.js需要添加的配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;   &#123;</span><br><span class=\"line\">&gt;      name: &apos;app1&apos;,</span><br><span class=\"line\">&gt;      entry: &apos;//localhost:10002&apos;,</span><br><span class=\"line\">&gt;      container: &apos;#appContainer&apos;,</span><br><span class=\"line\">&gt;      activeRule: &apos;/app1/&apos;</span><br><span class=\"line\">&gt;   &#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"5\">\n<li>虽然当前架构支持任意开发语言进行子应用的开发，但这里还是建议使用相同的技术栈，便于后期维护</li>\n<li>子应用在独立运行时会展示自己的头部和左侧菜单，运行在基座应用中头部和左侧菜单不展示</li>\n<li>状态的传递通过基座应用，通过对基座应用某个状态的监听，在子应用中处理对应的逻辑，例如：groupItem<br>相关的配置在<code>main.js</code>的mount函数下。实际情况并不建议应用之间进行过多的数据传递，如果确实非常多，理论上应该是同一个应用。</li>\n<li>关于代码复用，当我们有精力可以构建并维护自己的组件库的时候，可以使用组件库的方式来对公共组件进行复用</li>\n<li>关于什么情况下使用子应用的方式进行开发部署；由于拆分成子应用也同样会带来维护上的成本，因此目前的拆分原则是根据团队进行拆分，例如一个独立团队对相对独立的模块进行开发；当然如果后期已有模块需要重构，则也可以使用这种方式进行，因为这也是微前端架构的一个优势。</li>\n<li>子应用应该有自己的域名，因此逻辑上是可以独立运行上线使用的，如果没有域名，可以通过path在nginx上做相关配置。</li>\n</ol>\n</blockquote>\n<h3 id=\"关于部署上线\"><a href=\"#关于部署上线\" class=\"headerlink\" title=\"关于部署上线\"></a>关于部署上线</h3><blockquote>\n<p>我们目前支持两种部署方式</p>\n</blockquote>\n<h4 id=\"独立域名部署\"><a href=\"#独立域名部署\" class=\"headerlink\" title=\"独立域名部署\"></a>独立域名部署</h4><blockquote>\n<p>首先，子应用有自己的独立域名，并且支持https，例如：</p>\n<ol>\n<li>microapp.pms.gmtech.top</li>\n</ol>\n<p>独立域名这种部署方式有些必要条件：</p>\n<ol>\n<li>资源需要支持CORS跨域请求，配置nginx</li>\n<li>域名支持https访问。</li>\n</ol>\n<p>相关需要调整文件的地方：</p>\n<ol>\n<li>主应用里AppList.js中的entry的写法：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;  &#123;</span><br><span class=\"line\">&gt;    name: &apos;microapp&apos;,</span><br><span class=\"line\">&gt;    entry: getAppLoadUri(&apos;microapp&apos;, 10001),</span><br><span class=\"line\">&gt;    container: &apos;#appContainer&apos;,</span><br><span class=\"line\">&gt;    activeRule: &apos;/microapp/&apos;</span><br><span class=\"line\">&gt;  &#125;</span><br><span class=\"line\">&gt; entry获取合适的域名地址，这里方法为：</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt; const env = process.env.NODE_ENV</span><br><span class=\"line\">&gt; function getAppLoadUri (appName, port) &#123;</span><br><span class=\"line\">&gt;   const hostName = location.hostname</span><br><span class=\"line\">&gt;   const protocol = location.protocol</span><br><span class=\"line\">&gt;   if (env === &apos;local&apos;) &#123;</span><br><span class=\"line\">&gt;     return `http://localhost:$&#123;port&#125;/$&#123;appName&#125;/`</span><br><span class=\"line\">&gt;   &#125; else if (env === &apos;development&apos; || env === &apos;test&apos;) &#123;</span><br><span class=\"line\">&gt;     return `/$&#123;appName&#125;/`</span><br><span class=\"line\">&gt;   &#125; else &#123;</span><br><span class=\"line\">&gt;     return `$&#123;protocol&#125;//$&#123;appName&#125;.$&#123;hostName&#125;/$&#123;appName&#125;/`</span><br><span class=\"line\">&gt;   &#125;</span><br><span class=\"line\">&gt; &#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>子应用中vue.config.js中,线上访问需要将静态资源上传到CDN上<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"keyword\">const</span> publicPath = process.env.NODE_ENV === <span class=\"string\">'production'</span> &amp;&amp; process.env.VUE_APP_PREVIEW !== <span class=\"string\">'true'</span> ? <span class=\"string\">'https://pms-static.gmtech.top/fe/src/fpms_microapp/dist/'</span> : <span class=\"string\">'/microapp/'</span></span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"3\">\n<li>子应用中router/index.js中<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; base: <span class=\"built_in\">window</span>.__POWERED_BY_QIANKUN__ ? <span class=\"string\">'/microapp'</span> : <span class=\"string\">'/'</span></span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"4\">\n<li>注意这几个地方的写法，独立部署和通过path部署是不一样的。</li>\n<li>nginx 配置与单页应用类似，但需要支持cors配置<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; server &#123;</span><br><span class=\"line\">&gt;       listen       80;</span><br><span class=\"line\">&gt;       server_name pms-microapp-dev.gmtech.top;</span><br><span class=\"line\">&gt;       add_header Access-Control-Allow-Methods *;</span><br><span class=\"line\">&gt;       add_header Access-Control-Allow-Origin $http_origin;</span><br><span class=\"line\">&gt;       add_header Access-Control-Allow-Credentials true;</span><br><span class=\"line\">&gt;       add_header Access-Control-Allow-Headers Token,groupid,app,appid,projectid,project_id,Project-Id,appcode,Content-Type,Upgrade,Connection,X-Real-IP,Company-Id,companyID;</span><br><span class=\"line\">&gt;       add_header Access-Control-Max-Age 86400;</span><br><span class=\"line\">&gt;       if ($request_method = OPTIONS)&#123;</span><br><span class=\"line\">&gt;           return 200;</span><br><span class=\"line\">&gt;       &#125;</span><br><span class=\"line\">&gt;   </span><br><span class=\"line\">&gt;       location / &#123;</span><br><span class=\"line\">&gt;           root   /home/work/www/fe/fpms_microapp/dist;</span><br><span class=\"line\">&gt;           proxy_set_header Host $host;</span><br><span class=\"line\">&gt;           index  index.html;</span><br><span class=\"line\">&gt;           try_files $uri $uri/ /index.html;</span><br><span class=\"line\">&gt;       &#125;</span><br><span class=\"line\">&gt; &#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<blockquote>\n</blockquote>\n<h4 id=\"path区分子项目部署\"><a href=\"#path区分子项目部署\" class=\"headerlink\" title=\"path区分子项目部署\"></a>path区分子项目部署</h4><blockquote>\n<p>如果每个项目都要有独立域名才能使用的话，目前的微前端架构实际上是有缺陷的，因为我可能是想把一个系统<br>的多个模块进行拆分，方便维护，因此，通过path来区分子项目也应该支持：由于这种方式使用的是相同的域名<br>实际操作起来会节省掉很多由于资源跨域导致的无法加载的问题。也更适合把一个独立的大项目拆分成小应用的<br>场景。</p>\n<p>相关需要调整文件的地方：</p>\n<ol>\n<li>主应用里AppList.js中的entry的写法：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; entry: getAppLoadUri(&apos;microapp&apos;, 10001),</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>子应用中vue.config.js中,线上访问需要将静态资源上传到CDN上<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"keyword\">const</span> publicPath = process.env.NODE_ENV === <span class=\"string\">'production'</span> &amp;&amp; process.env.VUE_APP_PREVIEW !== <span class=\"string\">'true'</span> ? <span class=\"string\">'https://pms-static.gmtech.top/fe/src/fpms_microapp/dist/'</span> : <span class=\"string\">'/microapp/'</span></span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"3\">\n<li>子应用中router/index.js中base始终保持’/‘会比较合适，因为子应用与子应用之间的跳转需要使用path方式，如果配置了base则跳转会出现问题。</li>\n<li>注意这几个地方的写法，path部署和通过域名部署是不一样的。</li>\n<li>nginx配置方式<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; server &#123;</span><br><span class=\"line\">&gt;     listen       80;</span><br><span class=\"line\">&gt;     server_name pms-dev.gmtech.top;</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt;     gzip on;               #开启gzip压缩功能</span><br><span class=\"line\">&gt;     gzip_static on;        #这个地方很重要，配置了vue打包gz文件以后可以直接使用，无需nginx再执行打包动作，节省服务器资源</span><br><span class=\"line\">&gt;     gzip_min_length 1k;    #设置允许压缩的页面最小字节数 vue打包配置需要生成.gz文件的地方也是1k</span><br><span class=\"line\">&gt;     gzip_buffers 4 16k;    #设置压缩缓冲区大小，此处设置为4个16K内存作为压缩结果流缓存</span><br><span class=\"line\">&gt;     gzip_http_version 1.0; #http协议版本 默认1.1,实际上我们用的1.0,如果不配置gzip不生效</span><br><span class=\"line\">&gt;     gzip_comp_level 2;     #设置压缩比率，最小为1，处理速度快，传输速度慢；9为最大压缩比，处理速度慢，传输速度快</span><br><span class=\"line\">&gt;     gzip_types text/css text/xml application/javascript; #制定压缩的类型</span><br><span class=\"line\">&gt;     gzip_vary on;          #选择支持vary header；改选项可以让前端的缓存服务器缓存经过gzip压缩的页面</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt;     location / &#123;</span><br><span class=\"line\">&gt;         root   /home/work/www/fe/fpms_pro/dist;</span><br><span class=\"line\">&gt;         proxy_set_header Host $host;</span><br><span class=\"line\">&gt;         index  index.html;</span><br><span class=\"line\">&gt;         try_files $uri $uri/ /index.html;</span><br><span class=\"line\">&gt;         location = /index.html &#123;</span><br><span class=\"line\">&gt;             add_header Cache-Control &quot;no-cache, no-store&quot;;</span><br><span class=\"line\">&gt;         &#125;</span><br><span class=\"line\">&gt;     &#125;</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt;     location /microapp&#123;</span><br><span class=\"line\">&gt;       alias /home/work/www/fe/fpms_microapp/dist;</span><br><span class=\"line\">&gt;       index  index.html;</span><br><span class=\"line\">&gt;       try_files $uri $uri/ /index.html;</span><br><span class=\"line\">&gt;     &#125;</span><br><span class=\"line\">&gt; &#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>有了这些内容，我们想如何进行一个项目的开发都变得非常灵活</p>\n</blockquote>\n<h3 id=\"当前应用的部署方式\"><a href=\"#当前应用的部署方式\" class=\"headerlink\" title=\"当前应用的部署方式\"></a>当前应用的部署方式</h3><blockquote>\n<p>目前我们的线上环境使用的是独立域名部署方式，因为在线上是部署在K8S上，不同子应用需要能够独立运行，所以这里必须给每个子应用一个独立的域名。<br>但是为了兼顾便捷性，我们在开发环境和测试环境使用的是path方式，这样能够节省维护子域名的成本。<br>本地开发使用localhost，dev环境和test环境使用path配置，线上和预发布环境使用子域名。</p>\n</blockquote>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><blockquote>\n<p>项目参考乾坤框架：<a href=\"https://qiankun.umijs.org/zh/guide\" target=\"_blank\" rel=\"noopener\">https://qiankun.umijs.org/zh/guide</a></p>\n<p>在保证业务需求的前提下，使用渐进式的改造方案，避免因为改造造成项目的大量修改</p>\n<p>微前端的前提，还是得有主体应用，然后才有微组件或微应用，解决的是可控体系下的前端协同开发问题（含空间分离带来的协作和时间延续带来的升级维护）</p>\n</blockquote>\n"},{"title":"Dnsmasq 安装配置","toc":false,"date":"2018-01-10T09:17:10.000Z","_content":"\nDnsmasq  官网 [http://www.thekelleys.org.uk/dnsmasq/doc.html](http://www.thekelleys.org.uk/dnsmasq/doc.html)\n\nUnbuntu 安装 Dnsmasq 参见 [https://help.ubuntu.com/community/Dnsmasq](https://help.ubuntu.com/community/Dnsmasq)\n<!-- more -->\n## 介绍\nDNSmasq 提供两种服务，每种服务可以单独运行：\n\n1. DNS 服务\n2. DHCP 服务\n\n本地 DNS 缓存可以加速网络访问，因为用户的浏览器不需要对先前查询过域名再次向 DNS服务器查询。\n\nDNCP 允许用户的电脑为同一个无线或有限环境中的其他计算机分配 IP 地址。\n\n## 安装\n\n```\n$ sudo apt-get install dnsmasq \n```\n\n## 配置\ndnsmasq 配置文件地址\n\n```\n$ /etc/dnsmasq.conf\n```\n\n本地 DNS 缓存设置\n\n修改\n\n```\n#listen-address=\n```\n\n成\n\n```\nlisten-address=127.0.0.1\n```\n\n接下来修改 /etc/resolv.conf，确保新设置的 DNS 服务器 127.0.0.1 出现在 DNS 服务器列表的顶端。无论何时用户的电脑需要解析一个域名，它会首先请求 dnsmasq （其跑在 127.0.0.1） \n\n```\ncat  /etc/resolv.conf\nsearch yourisp.com\nnameserver 127.0.0.1\nnameserver 192.168.0.1\nnameserver 205.171.3.25\nnameserver 205.171.3.26\n```\n\n修改后配置后重启服务生效\n\n```\n$ sudo /etc/init.d/dnsmasq restart\n```\n\n[原文地址](http://www.cnblogs.com/DillGao/p/7372014.html)\n","source":"_posts/Dnsmasq 安装配置.md","raw":"---\ntitle: Dnsmasq 安装配置\ntags:\n  - 运维\ncategories:\n  - 后端开发\ntoc: false\ndate: 2018-01-10 17:17:10\n---\n\nDnsmasq  官网 [http://www.thekelleys.org.uk/dnsmasq/doc.html](http://www.thekelleys.org.uk/dnsmasq/doc.html)\n\nUnbuntu 安装 Dnsmasq 参见 [https://help.ubuntu.com/community/Dnsmasq](https://help.ubuntu.com/community/Dnsmasq)\n<!-- more -->\n## 介绍\nDNSmasq 提供两种服务，每种服务可以单独运行：\n\n1. DNS 服务\n2. DHCP 服务\n\n本地 DNS 缓存可以加速网络访问，因为用户的浏览器不需要对先前查询过域名再次向 DNS服务器查询。\n\nDNCP 允许用户的电脑为同一个无线或有限环境中的其他计算机分配 IP 地址。\n\n## 安装\n\n```\n$ sudo apt-get install dnsmasq \n```\n\n## 配置\ndnsmasq 配置文件地址\n\n```\n$ /etc/dnsmasq.conf\n```\n\n本地 DNS 缓存设置\n\n修改\n\n```\n#listen-address=\n```\n\n成\n\n```\nlisten-address=127.0.0.1\n```\n\n接下来修改 /etc/resolv.conf，确保新设置的 DNS 服务器 127.0.0.1 出现在 DNS 服务器列表的顶端。无论何时用户的电脑需要解析一个域名，它会首先请求 dnsmasq （其跑在 127.0.0.1） \n\n```\ncat  /etc/resolv.conf\nsearch yourisp.com\nnameserver 127.0.0.1\nnameserver 192.168.0.1\nnameserver 205.171.3.25\nnameserver 205.171.3.26\n```\n\n修改后配置后重启服务生效\n\n```\n$ sudo /etc/init.d/dnsmasq restart\n```\n\n[原文地址](http://www.cnblogs.com/DillGao/p/7372014.html)\n","slug":"Dnsmasq 安装配置","published":1,"updated":"2019-11-07T01:59:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznwp000mh5s6a7ge8nb9","content":"<p>Dnsmasq  官网 <a href=\"http://www.thekelleys.org.uk/dnsmasq/doc.html\" target=\"_blank\" rel=\"noopener\">http://www.thekelleys.org.uk/dnsmasq/doc.html</a></p>\n<p>Unbuntu 安装 Dnsmasq 参见 <a href=\"https://help.ubuntu.com/community/Dnsmasq\" target=\"_blank\" rel=\"noopener\">https://help.ubuntu.com/community/Dnsmasq</a><br><a id=\"more\"></a></p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>DNSmasq 提供两种服务，每种服务可以单独运行：</p>\n<ol>\n<li>DNS 服务</li>\n<li>DHCP 服务</li>\n</ol>\n<p>本地 DNS 缓存可以加速网络访问，因为用户的浏览器不需要对先前查询过域名再次向 DNS服务器查询。</p>\n<p>DNCP 允许用户的电脑为同一个无线或有限环境中的其他计算机分配 IP 地址。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install dnsmasq</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>dnsmasq 配置文件地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ /etc/dnsmasq.conf</span><br></pre></td></tr></table></figure>\n<p>本地 DNS 缓存设置</p>\n<p>修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#listen-address=</span><br></pre></td></tr></table></figure>\n<p>成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen-address=127.0.0.1</span><br></pre></td></tr></table></figure>\n<p>接下来修改 /etc/resolv.conf，确保新设置的 DNS 服务器 127.0.0.1 出现在 DNS 服务器列表的顶端。无论何时用户的电脑需要解析一个域名，它会首先请求 dnsmasq （其跑在 127.0.0.1） </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat  /etc/resolv.conf</span><br><span class=\"line\">search yourisp.com</span><br><span class=\"line\">nameserver 127.0.0.1</span><br><span class=\"line\">nameserver 192.168.0.1</span><br><span class=\"line\">nameserver 205.171.3.25</span><br><span class=\"line\">nameserver 205.171.3.26</span><br></pre></td></tr></table></figure>\n<p>修改后配置后重启服务生效</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo /etc/init.d/dnsmasq restart</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://www.cnblogs.com/DillGao/p/7372014.html\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n","site":{"data":{}},"excerpt":"<p>Dnsmasq  官网 <a href=\"http://www.thekelleys.org.uk/dnsmasq/doc.html\" target=\"_blank\" rel=\"noopener\">http://www.thekelleys.org.uk/dnsmasq/doc.html</a></p>\n<p>Unbuntu 安装 Dnsmasq 参见 <a href=\"https://help.ubuntu.com/community/Dnsmasq\" target=\"_blank\" rel=\"noopener\">https://help.ubuntu.com/community/Dnsmasq</a><br>","more":"</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>DNSmasq 提供两种服务，每种服务可以单独运行：</p>\n<ol>\n<li>DNS 服务</li>\n<li>DHCP 服务</li>\n</ol>\n<p>本地 DNS 缓存可以加速网络访问，因为用户的浏览器不需要对先前查询过域名再次向 DNS服务器查询。</p>\n<p>DNCP 允许用户的电脑为同一个无线或有限环境中的其他计算机分配 IP 地址。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install dnsmasq</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>dnsmasq 配置文件地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ /etc/dnsmasq.conf</span><br></pre></td></tr></table></figure>\n<p>本地 DNS 缓存设置</p>\n<p>修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#listen-address=</span><br></pre></td></tr></table></figure>\n<p>成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen-address=127.0.0.1</span><br></pre></td></tr></table></figure>\n<p>接下来修改 /etc/resolv.conf，确保新设置的 DNS 服务器 127.0.0.1 出现在 DNS 服务器列表的顶端。无论何时用户的电脑需要解析一个域名，它会首先请求 dnsmasq （其跑在 127.0.0.1） </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat  /etc/resolv.conf</span><br><span class=\"line\">search yourisp.com</span><br><span class=\"line\">nameserver 127.0.0.1</span><br><span class=\"line\">nameserver 192.168.0.1</span><br><span class=\"line\">nameserver 205.171.3.25</span><br><span class=\"line\">nameserver 205.171.3.26</span><br></pre></td></tr></table></figure>\n<p>修改后配置后重启服务生效</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo /etc/init.d/dnsmasq restart</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://www.cnblogs.com/DillGao/p/7372014.html\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>"},{"title":"Git仓库完全迁移，包括所有的分支和标签，当然也包括日志","toc":false,"date":"2018-07-11T09:27:57.000Z","_content":"\n度娘了一堆git仓库迁移的内容，一个个都比较麻烦，而且本地下了代码，还要删去库地址，再切换到新库的地址上传。\n\n一般这种操作都只是master分支，其他分支还要一个一个来，后来在51CTO上找了一个文章，简单明了，一下就全搞定了。\n\n包括所有的分支、标签、日志，一个不少。\n\n当然账号对应的事就没办法了。\n\n四行命令：\n\n```\ngit clone --mirror <URL to my OLD repo location>\ncd <New directory where your OLD repo was cloned>\ngit remote set-url origin <URL to my NEW repo location>\ngit push -f origin\n```\n","source":"_posts/Git仓库完全迁移，包括所有的分支和标签，当然也包括日志.md","raw":"---\ntitle: Git仓库完全迁移，包括所有的分支和标签，当然也包括日志\ntags:\n  - git迁移\ncategories:\n  - 项目总结\ntoc: false\ndate: 2018-07-11 17:27:57\n---\n\n度娘了一堆git仓库迁移的内容，一个个都比较麻烦，而且本地下了代码，还要删去库地址，再切换到新库的地址上传。\n\n一般这种操作都只是master分支，其他分支还要一个一个来，后来在51CTO上找了一个文章，简单明了，一下就全搞定了。\n\n包括所有的分支、标签、日志，一个不少。\n\n当然账号对应的事就没办法了。\n\n四行命令：\n\n```\ngit clone --mirror <URL to my OLD repo location>\ncd <New directory where your OLD repo was cloned>\ngit remote set-url origin <URL to my NEW repo location>\ngit push -f origin\n```\n","slug":"Git仓库完全迁移，包括所有的分支和标签，当然也包括日志","published":1,"updated":"2019-11-07T02:17:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznwr000oh5s63zg2bxlc","content":"<p>度娘了一堆git仓库迁移的内容，一个个都比较麻烦，而且本地下了代码，还要删去库地址，再切换到新库的地址上传。</p>\n<p>一般这种操作都只是master分支，其他分支还要一个一个来，后来在51CTO上找了一个文章，简单明了，一下就全搞定了。</p>\n<p>包括所有的分支、标签、日志，一个不少。</p>\n<p>当然账号对应的事就没办法了。</p>\n<p>四行命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone --mirror &lt;URL to my OLD repo location&gt;</span><br><span class=\"line\">cd &lt;New directory where your OLD repo was cloned&gt;</span><br><span class=\"line\">git remote set-url origin &lt;URL to my NEW repo location&gt;</span><br><span class=\"line\">git push -f origin</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>度娘了一堆git仓库迁移的内容，一个个都比较麻烦，而且本地下了代码，还要删去库地址，再切换到新库的地址上传。</p>\n<p>一般这种操作都只是master分支，其他分支还要一个一个来，后来在51CTO上找了一个文章，简单明了，一下就全搞定了。</p>\n<p>包括所有的分支、标签、日志，一个不少。</p>\n<p>当然账号对应的事就没办法了。</p>\n<p>四行命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone --mirror &lt;URL to my OLD repo location&gt;</span><br><span class=\"line\">cd &lt;New directory where your OLD repo was cloned&gt;</span><br><span class=\"line\">git remote set-url origin &lt;URL to my NEW repo location&gt;</span><br><span class=\"line\">git push -f origin</span><br></pre></td></tr></table></figure>\n"},{"title":"CPU时间片","toc":false,"date":"2017-07-19T02:00:00.000Z","_content":"\n# 时间片即CPU分配给各个程序的时间\n\n<!-- more -->\n\n每个线程被分配一个时间段，称作它的时间片，即该进程允许运行的时间，使各个程序从表面上看是同时进行的。如果在时间片结束时进程还在运行，则CPU将被剥夺并分配给另一个进程。如果进程在时间片结束前阻塞或结束，则CPU当即进行切换。而不会造成CPU资源浪费。在宏观上：我们可以同时打开多个应用程序，每个程序并行不悖，同时运行。但在微观上：由于只有一个CPU，一次只能处理程序要求的一部分，如何处理公平，一种方法就是引入时间片，每个程序轮流执行。\n","source":"_posts/CPU时间片.md","raw":"---\ntitle: CPU时间片\ntags:\n  - 基本知识\ncategories:\n  - 项目总结\ntoc: false\ndate: 2017-07-19 10:00:00\n---\n\n# 时间片即CPU分配给各个程序的时间\n\n<!-- more -->\n\n每个线程被分配一个时间段，称作它的时间片，即该进程允许运行的时间，使各个程序从表面上看是同时进行的。如果在时间片结束时进程还在运行，则CPU将被剥夺并分配给另一个进程。如果进程在时间片结束前阻塞或结束，则CPU当即进行切换。而不会造成CPU资源浪费。在宏观上：我们可以同时打开多个应用程序，每个程序并行不悖，同时运行。但在微观上：由于只有一个CPU，一次只能处理程序要求的一部分，如何处理公平，一种方法就是引入时间片，每个程序轮流执行。\n","slug":"CPU时间片","published":1,"updated":"2019-11-07T01:59:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznwu000sh5s6hvy3p4sf","content":"<h1 id=\"时间片即CPU分配给各个程序的时间\"><a href=\"#时间片即CPU分配给各个程序的时间\" class=\"headerlink\" title=\"时间片即CPU分配给各个程序的时间\"></a>时间片即CPU分配给各个程序的时间</h1><a id=\"more\"></a>\n<p>每个线程被分配一个时间段，称作它的时间片，即该进程允许运行的时间，使各个程序从表面上看是同时进行的。如果在时间片结束时进程还在运行，则CPU将被剥夺并分配给另一个进程。如果进程在时间片结束前阻塞或结束，则CPU当即进行切换。而不会造成CPU资源浪费。在宏观上：我们可以同时打开多个应用程序，每个程序并行不悖，同时运行。但在微观上：由于只有一个CPU，一次只能处理程序要求的一部分，如何处理公平，一种方法就是引入时间片，每个程序轮流执行。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"时间片即CPU分配给各个程序的时间\"><a href=\"#时间片即CPU分配给各个程序的时间\" class=\"headerlink\" title=\"时间片即CPU分配给各个程序的时间\"></a>时间片即CPU分配给各个程序的时间</h1>","more":"<p>每个线程被分配一个时间段，称作它的时间片，即该进程允许运行的时间，使各个程序从表面上看是同时进行的。如果在时间片结束时进程还在运行，则CPU将被剥夺并分配给另一个进程。如果进程在时间片结束前阻塞或结束，则CPU当即进行切换。而不会造成CPU资源浪费。在宏观上：我们可以同时打开多个应用程序，每个程序并行不悖，同时运行。但在微观上：由于只有一个CPU，一次只能处理程序要求的一部分，如何处理公平，一种方法就是引入时间片，每个程序轮流执行。</p>"},{"title":"How To Install Jenkins on CentOS 7","toc":false,"date":"2019-08-14T05:39:31.000Z","_content":"\n![image.png](http://blogimage.houjiyi.com/FqxHz-9hRWp535eOZdqOoFW0ysEz)\n\n```bash\nsudo yum install java-1.8.0-openjdk-devel\n\ncurl --silent --location http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo | sudo tee /etc/yum.repos.d/jenkins.repo\n\nsudo rpm --import http://pkg.jenkins.io/redhat-stable/jenkins.io.key\n\nsudo yum install jenkins\n\nsudo systemctl start jenkins\n\nsudo systemctl enable jenkins\n\n```\n","source":"_posts/How-To-Install-Jenkins-on-CentOS-7.md","raw":"---\ntitle: How To Install Jenkins on CentOS 7\ntags:\n  - jenkins\ncategories:\n  - Web开发\ntoc: false\ndate: 2019-08-14 13:39:31\n---\n\n![image.png](http://blogimage.houjiyi.com/FqxHz-9hRWp535eOZdqOoFW0ysEz)\n\n```bash\nsudo yum install java-1.8.0-openjdk-devel\n\ncurl --silent --location http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo | sudo tee /etc/yum.repos.d/jenkins.repo\n\nsudo rpm --import http://pkg.jenkins.io/redhat-stable/jenkins.io.key\n\nsudo yum install jenkins\n\nsudo systemctl start jenkins\n\nsudo systemctl enable jenkins\n\n```\n","slug":"How-To-Install-Jenkins-on-CentOS-7","published":1,"updated":"2019-11-07T02:17:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznwv000uh5s6ugzb20kq","content":"<p><img src=\"http://blogimage.houjiyi.com/FqxHz-9hRWp535eOZdqOoFW0ysEz\" alt=\"image.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install java-1.8.0-openjdk-devel</span><br><span class=\"line\"></span><br><span class=\"line\">curl --silent --location http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo | sudo tee /etc/yum.repos.d/jenkins.repo</span><br><span class=\"line\"></span><br><span class=\"line\">sudo rpm --import http://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br><span class=\"line\"></span><br><span class=\"line\">sudo yum install jenkins</span><br><span class=\"line\"></span><br><span class=\"line\">sudo systemctl start jenkins</span><br><span class=\"line\"></span><br><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> jenkins</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://blogimage.houjiyi.com/FqxHz-9hRWp535eOZdqOoFW0ysEz\" alt=\"image.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install java-1.8.0-openjdk-devel</span><br><span class=\"line\"></span><br><span class=\"line\">curl --silent --location http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo | sudo tee /etc/yum.repos.d/jenkins.repo</span><br><span class=\"line\"></span><br><span class=\"line\">sudo rpm --import http://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br><span class=\"line\"></span><br><span class=\"line\">sudo yum install jenkins</span><br><span class=\"line\"></span><br><span class=\"line\">sudo systemctl start jenkins</span><br><span class=\"line\"></span><br><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> jenkins</span><br></pre></td></tr></table></figure>\n"},{"title":"DNS原理及其解析过程","toc":false,"date":"2018-01-11T08:12:49.000Z","_content":"\n## 什么是DNS？ \nDNS( Domain Name System)是“域名系统”的英文缩写，是一种组织成域层次结构的计算机和网络服务命名系统，它用于TCP/IP网络，它所提供的服务是用来将主机名和域名转换为IP地址的工作。DNS就是这样的一位“翻译官”。 \n\n![DNS的作用](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/DNS%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/1.jpg)\n\n<!-- more -->\n\n## 域的划分\n域名系统作为一个层次结构和分布式数据库，包含各种类型的数据，包括主机名和域名。DNS数据库中的名称形成一个分层树状结构称为域命名空间。域名包含单个标签分隔点，例如：im.qq.com。 \n\n完全限定的域名 (FQDN) 唯一地标识在 DNS 分层树中的主机的位置，通过指定的路径中点分隔从根引用的主机的名称列表。 \n\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/DNS%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/2.jpg)\n\n按其功能命名空间中用来描述 DNS 域名称的五个类别的介绍详见下表中，以及与每个名称类型的示例。 \n\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/DNS%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/3.jpg)\n\n### 根域\n就是所谓的“.”，其实我们的网址www.qq.com在配置当中应该是www.baidu.com.（最后有一点），一般我们在浏览器里输入时会省略后面的点。根域服务器我们知道有13台，但是这是错误的观点。根域服务器只是具有13个IP地址，但机器数量却不是13台，因为这些IP地址借助了任播的技术，所以我们可以在全球设立这些IP的镜像站点，你访问到的这个IP并不是唯一的那台主机。 \n\n### 顶级域\n根域下来就是顶级域或者叫一级域。一些常见的DNS域名称如下图： \n\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/DNS%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/4.jpg)\n\n### 域名服务器\n每个域都会有域名服务器，也叫权威域名服务器。 \n\n能提供域名解析的服务器，上面的记录类型可以是A(address)记录,NS记录（name server）,MX（mail）,CNAME等。 \n\n### 资源记录 \nDNS 数据库中包含的资源记录 (RR)。 每个 RR 标识数据库中的特定资源。我们在建立DNS服务器时，经常会用到SOA,NS,A之类的记录，在维护DNS服务器时，会用到MX，CNAME记录。\n\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/DNS%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/5.jpg)\n\n## DNS服务的工作过程 \n当 DNS 客户机需要查询程序中使用的名称时，它会查询本地DNS 服务器来解析该名称。客户机发送的每条查询消息都包括3条信息，以指定服务器应回答的问题。 \n\n1. 指定的 DNS 域名，表示为完全合格的域名 (FQDN) 。 \n2. 指定的查询类型，它可根据类型指定资源记录，或作为查询操作的专门类型。 \n3。 DNS域名的指定类别。 \n\n对于DNS 服务器，它始终应指定为 Internet 类别。例如，指定的名称可以是计算机的完全合格的域名，如im.qq.com，并且指定的查询类型用于通过该名称搜索地址资源记录。 \n\nDNS 查询以各种不同的方式进行解析。客户机有时也可通过使用从以前查询获得的缓存信息就地应答查询。DNS 服务器可使用其自身的资源记录信息缓存来应答查询，也可代表请求客户机来查询或联系其他 DNS 服务器，以完全解析该名称，并随后将应答返回至客户机。这个过程称为递归。 \n\n另外，客户机自己也可尝试联系其他的 DNS 服务器来解析名称。如果客户机这么做，它会使用基于服务器应答的独立和附加的查询，该过程称作迭代，即DNS服务器之间的交互查询就是迭代查询。\n\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/DNS%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/6.jpg) \n\n1. 在浏览器中输入www.qq.com域名，操作系统会先检查自己本地的hosts文件是否有这个网址映射关系，如果有，就先调用这个IP地址映射，完成域名解析。 \n2. 如果hosts里没有这个域名的映射，则查找本地DNS解析器缓存，是否有这个网址映射关系，如果有，直接返回，完成域名解析。 \n3. 如果hosts与本地DNS解析器缓存都没有相应的网址映射关系，首先会找TCP/IP参数中设置的首选DNS服务器，在此我们叫它本地DNS服务器，此服务器收到查询时，如果要查询的域名，包含在本地配置区域资源中，则返回解析结果给客户机，完成域名解析，此解析具有权威性。 \n4. 如果要查询的域名，不由本地DNS服务器区域解析，但该服务器已缓存了此网址映射关系，则调用这个IP地址映射，完成域名解析，此解析不具有权威性。 \n5. 如果本地DNS服务器本地区域文件与缓存解析都失效，则根据本地DNS服务器的设置（是否设置转发器）进行查询，如果未用转发模式，本地DNS就把请求发至13台根DNS，根DNS服务器收到请求后会判断这个域名(.com)是谁来授权管理，并会返回一个负责该顶级域名(.com)服务器的一个IP。 \n6. 本地DNS服务器收到IP信息后，将会联系负责.com域的这台服务器。这台负责.com域的服务器收到请求后，如果自己无法解析，它就会找一个管理.com域的下一级DNS服务器地址(qq.com)给本地DNS服务器。 \n7. 当本地DNS服务器收到这个地址后，就会找qq.com域服务器，重复上面的动作，进行查询，直至找到www.qq.com主机。 \n8. 如果用的是转发模式，此DNS服务器就会把请求转发至上一级DNS服务器，由上一级服务器进行解析，上一级服务器如果不能解析，或找根DNS或把转请求转至上上级，以此循环。不管是本地DNS服务器用是转发，还是根提示，最后都是把结果返回给本地DNS服务器，由此DNS服务器再返回给客户机。\n\n\n\n\n[原文地址](http://blog.csdn.net/benbenzhuhwp/article/details/44704307)\n","source":"_posts/DNS原理及其解析过程.md","raw":"---\ntitle: DNS原理及其解析过程\ntags:\n  - 广告\ncategories:\n  - 项目总结\ntoc: false\ndate: 2018-01-11 16:12:49\n---\n\n## 什么是DNS？ \nDNS( Domain Name System)是“域名系统”的英文缩写，是一种组织成域层次结构的计算机和网络服务命名系统，它用于TCP/IP网络，它所提供的服务是用来将主机名和域名转换为IP地址的工作。DNS就是这样的一位“翻译官”。 \n\n![DNS的作用](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/DNS%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/1.jpg)\n\n<!-- more -->\n\n## 域的划分\n域名系统作为一个层次结构和分布式数据库，包含各种类型的数据，包括主机名和域名。DNS数据库中的名称形成一个分层树状结构称为域命名空间。域名包含单个标签分隔点，例如：im.qq.com。 \n\n完全限定的域名 (FQDN) 唯一地标识在 DNS 分层树中的主机的位置，通过指定的路径中点分隔从根引用的主机的名称列表。 \n\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/DNS%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/2.jpg)\n\n按其功能命名空间中用来描述 DNS 域名称的五个类别的介绍详见下表中，以及与每个名称类型的示例。 \n\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/DNS%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/3.jpg)\n\n### 根域\n就是所谓的“.”，其实我们的网址www.qq.com在配置当中应该是www.baidu.com.（最后有一点），一般我们在浏览器里输入时会省略后面的点。根域服务器我们知道有13台，但是这是错误的观点。根域服务器只是具有13个IP地址，但机器数量却不是13台，因为这些IP地址借助了任播的技术，所以我们可以在全球设立这些IP的镜像站点，你访问到的这个IP并不是唯一的那台主机。 \n\n### 顶级域\n根域下来就是顶级域或者叫一级域。一些常见的DNS域名称如下图： \n\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/DNS%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/4.jpg)\n\n### 域名服务器\n每个域都会有域名服务器，也叫权威域名服务器。 \n\n能提供域名解析的服务器，上面的记录类型可以是A(address)记录,NS记录（name server）,MX（mail）,CNAME等。 \n\n### 资源记录 \nDNS 数据库中包含的资源记录 (RR)。 每个 RR 标识数据库中的特定资源。我们在建立DNS服务器时，经常会用到SOA,NS,A之类的记录，在维护DNS服务器时，会用到MX，CNAME记录。\n\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/DNS%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/5.jpg)\n\n## DNS服务的工作过程 \n当 DNS 客户机需要查询程序中使用的名称时，它会查询本地DNS 服务器来解析该名称。客户机发送的每条查询消息都包括3条信息，以指定服务器应回答的问题。 \n\n1. 指定的 DNS 域名，表示为完全合格的域名 (FQDN) 。 \n2. 指定的查询类型，它可根据类型指定资源记录，或作为查询操作的专门类型。 \n3。 DNS域名的指定类别。 \n\n对于DNS 服务器，它始终应指定为 Internet 类别。例如，指定的名称可以是计算机的完全合格的域名，如im.qq.com，并且指定的查询类型用于通过该名称搜索地址资源记录。 \n\nDNS 查询以各种不同的方式进行解析。客户机有时也可通过使用从以前查询获得的缓存信息就地应答查询。DNS 服务器可使用其自身的资源记录信息缓存来应答查询，也可代表请求客户机来查询或联系其他 DNS 服务器，以完全解析该名称，并随后将应答返回至客户机。这个过程称为递归。 \n\n另外，客户机自己也可尝试联系其他的 DNS 服务器来解析名称。如果客户机这么做，它会使用基于服务器应答的独立和附加的查询，该过程称作迭代，即DNS服务器之间的交互查询就是迭代查询。\n\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/DNS%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/6.jpg) \n\n1. 在浏览器中输入www.qq.com域名，操作系统会先检查自己本地的hosts文件是否有这个网址映射关系，如果有，就先调用这个IP地址映射，完成域名解析。 \n2. 如果hosts里没有这个域名的映射，则查找本地DNS解析器缓存，是否有这个网址映射关系，如果有，直接返回，完成域名解析。 \n3. 如果hosts与本地DNS解析器缓存都没有相应的网址映射关系，首先会找TCP/IP参数中设置的首选DNS服务器，在此我们叫它本地DNS服务器，此服务器收到查询时，如果要查询的域名，包含在本地配置区域资源中，则返回解析结果给客户机，完成域名解析，此解析具有权威性。 \n4. 如果要查询的域名，不由本地DNS服务器区域解析，但该服务器已缓存了此网址映射关系，则调用这个IP地址映射，完成域名解析，此解析不具有权威性。 \n5. 如果本地DNS服务器本地区域文件与缓存解析都失效，则根据本地DNS服务器的设置（是否设置转发器）进行查询，如果未用转发模式，本地DNS就把请求发至13台根DNS，根DNS服务器收到请求后会判断这个域名(.com)是谁来授权管理，并会返回一个负责该顶级域名(.com)服务器的一个IP。 \n6. 本地DNS服务器收到IP信息后，将会联系负责.com域的这台服务器。这台负责.com域的服务器收到请求后，如果自己无法解析，它就会找一个管理.com域的下一级DNS服务器地址(qq.com)给本地DNS服务器。 \n7. 当本地DNS服务器收到这个地址后，就会找qq.com域服务器，重复上面的动作，进行查询，直至找到www.qq.com主机。 \n8. 如果用的是转发模式，此DNS服务器就会把请求转发至上一级DNS服务器，由上一级服务器进行解析，上一级服务器如果不能解析，或找根DNS或把转请求转至上上级，以此循环。不管是本地DNS服务器用是转发，还是根提示，最后都是把结果返回给本地DNS服务器，由此DNS服务器再返回给客户机。\n\n\n\n\n[原文地址](http://blog.csdn.net/benbenzhuhwp/article/details/44704307)\n","slug":"DNS原理及其解析过程","published":1,"updated":"2019-11-07T01:59:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznww000yh5s65hq8lc1e","content":"<h2 id=\"什么是DNS？\"><a href=\"#什么是DNS？\" class=\"headerlink\" title=\"什么是DNS？\"></a>什么是DNS？</h2><p>DNS( Domain Name System)是“域名系统”的英文缩写，是一种组织成域层次结构的计算机和网络服务命名系统，它用于TCP/IP网络，它所提供的服务是用来将主机名和域名转换为IP地址的工作。DNS就是这样的一位“翻译官”。 </p>\n<p><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/DNS%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/1.jpg\" alt=\"DNS的作用\"></p>\n<a id=\"more\"></a>\n<h2 id=\"域的划分\"><a href=\"#域的划分\" class=\"headerlink\" title=\"域的划分\"></a>域的划分</h2><p>域名系统作为一个层次结构和分布式数据库，包含各种类型的数据，包括主机名和域名。DNS数据库中的名称形成一个分层树状结构称为域命名空间。域名包含单个标签分隔点，例如：im.qq.com。 </p>\n<p>完全限定的域名 (FQDN) 唯一地标识在 DNS 分层树中的主机的位置，通过指定的路径中点分隔从根引用的主机的名称列表。 </p>\n<p><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/DNS%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/2.jpg\" alt></p>\n<p>按其功能命名空间中用来描述 DNS 域名称的五个类别的介绍详见下表中，以及与每个名称类型的示例。 </p>\n<p><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/DNS%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/3.jpg\" alt></p>\n<h3 id=\"根域\"><a href=\"#根域\" class=\"headerlink\" title=\"根域\"></a>根域</h3><p>就是所谓的“.”，其实我们的网址<a href=\"http://www.qq.com在配置当中应该是www.baidu.com.（最后有一点），一般我们在浏览器里输入时会省略后面的点。根域服务器我们知道有13台，但是这是错误的观点。根域服务器只是具有13个IP地址，但机器数量却不是13台，因为这些IP地址借助了任播的技术，所以我们可以在全球设立这些IP的镜像站点，你访问到的这个IP并不是唯一的那台主机。\" target=\"_blank\" rel=\"noopener\">www.qq.com在配置当中应该是www.baidu.com.（最后有一点），一般我们在浏览器里输入时会省略后面的点。根域服务器我们知道有13台，但是这是错误的观点。根域服务器只是具有13个IP地址，但机器数量却不是13台，因为这些IP地址借助了任播的技术，所以我们可以在全球设立这些IP的镜像站点，你访问到的这个IP并不是唯一的那台主机。</a> </p>\n<h3 id=\"顶级域\"><a href=\"#顶级域\" class=\"headerlink\" title=\"顶级域\"></a>顶级域</h3><p>根域下来就是顶级域或者叫一级域。一些常见的DNS域名称如下图： </p>\n<p><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/DNS%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/4.jpg\" alt></p>\n<h3 id=\"域名服务器\"><a href=\"#域名服务器\" class=\"headerlink\" title=\"域名服务器\"></a>域名服务器</h3><p>每个域都会有域名服务器，也叫权威域名服务器。 </p>\n<p>能提供域名解析的服务器，上面的记录类型可以是A(address)记录,NS记录（name server）,MX（mail）,CNAME等。 </p>\n<h3 id=\"资源记录\"><a href=\"#资源记录\" class=\"headerlink\" title=\"资源记录\"></a>资源记录</h3><p>DNS 数据库中包含的资源记录 (RR)。 每个 RR 标识数据库中的特定资源。我们在建立DNS服务器时，经常会用到SOA,NS,A之类的记录，在维护DNS服务器时，会用到MX，CNAME记录。</p>\n<p><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/DNS%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/5.jpg\" alt></p>\n<h2 id=\"DNS服务的工作过程\"><a href=\"#DNS服务的工作过程\" class=\"headerlink\" title=\"DNS服务的工作过程\"></a>DNS服务的工作过程</h2><p>当 DNS 客户机需要查询程序中使用的名称时，它会查询本地DNS 服务器来解析该名称。客户机发送的每条查询消息都包括3条信息，以指定服务器应回答的问题。 </p>\n<ol>\n<li>指定的 DNS 域名，表示为完全合格的域名 (FQDN) 。 </li>\n<li>指定的查询类型，它可根据类型指定资源记录，或作为查询操作的专门类型。<br>3。 DNS域名的指定类别。 </li>\n</ol>\n<p>对于DNS 服务器，它始终应指定为 Internet 类别。例如，指定的名称可以是计算机的完全合格的域名，如im.qq.com，并且指定的查询类型用于通过该名称搜索地址资源记录。 </p>\n<p>DNS 查询以各种不同的方式进行解析。客户机有时也可通过使用从以前查询获得的缓存信息就地应答查询。DNS 服务器可使用其自身的资源记录信息缓存来应答查询，也可代表请求客户机来查询或联系其他 DNS 服务器，以完全解析该名称，并随后将应答返回至客户机。这个过程称为递归。 </p>\n<p>另外，客户机自己也可尝试联系其他的 DNS 服务器来解析名称。如果客户机这么做，它会使用基于服务器应答的独立和附加的查询，该过程称作迭代，即DNS服务器之间的交互查询就是迭代查询。</p>\n<p><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/DNS%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/6.jpg\" alt> </p>\n<ol>\n<li>在浏览器中输入<a href=\"http://www.qq.com域名，操作系统会先检查自己本地的hosts文件是否有这个网址映射关系，如果有，就先调用这个IP地址映射，完成域名解析。\" target=\"_blank\" rel=\"noopener\">www.qq.com域名，操作系统会先检查自己本地的hosts文件是否有这个网址映射关系，如果有，就先调用这个IP地址映射，完成域名解析。</a> </li>\n<li>如果hosts里没有这个域名的映射，则查找本地DNS解析器缓存，是否有这个网址映射关系，如果有，直接返回，完成域名解析。 </li>\n<li>如果hosts与本地DNS解析器缓存都没有相应的网址映射关系，首先会找TCP/IP参数中设置的首选DNS服务器，在此我们叫它本地DNS服务器，此服务器收到查询时，如果要查询的域名，包含在本地配置区域资源中，则返回解析结果给客户机，完成域名解析，此解析具有权威性。 </li>\n<li>如果要查询的域名，不由本地DNS服务器区域解析，但该服务器已缓存了此网址映射关系，则调用这个IP地址映射，完成域名解析，此解析不具有权威性。 </li>\n<li>如果本地DNS服务器本地区域文件与缓存解析都失效，则根据本地DNS服务器的设置（是否设置转发器）进行查询，如果未用转发模式，本地DNS就把请求发至13台根DNS，根DNS服务器收到请求后会判断这个域名(.com)是谁来授权管理，并会返回一个负责该顶级域名(.com)服务器的一个IP。 </li>\n<li>本地DNS服务器收到IP信息后，将会联系负责.com域的这台服务器。这台负责.com域的服务器收到请求后，如果自己无法解析，它就会找一个管理.com域的下一级DNS服务器地址(qq.com)给本地DNS服务器。 </li>\n<li>当本地DNS服务器收到这个地址后，就会找qq.com域服务器，重复上面的动作，进行查询，直至找到<a href=\"http://www.qq.com主机。\" target=\"_blank\" rel=\"noopener\">www.qq.com主机。</a> </li>\n<li>如果用的是转发模式，此DNS服务器就会把请求转发至上一级DNS服务器，由上一级服务器进行解析，上一级服务器如果不能解析，或找根DNS或把转请求转至上上级，以此循环。不管是本地DNS服务器用是转发，还是根提示，最后都是把结果返回给本地DNS服务器，由此DNS服务器再返回给客户机。</li>\n</ol>\n<p><a href=\"http://blog.csdn.net/benbenzhuhwp/article/details/44704307\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"什么是DNS？\"><a href=\"#什么是DNS？\" class=\"headerlink\" title=\"什么是DNS？\"></a>什么是DNS？</h2><p>DNS( Domain Name System)是“域名系统”的英文缩写，是一种组织成域层次结构的计算机和网络服务命名系统，它用于TCP/IP网络，它所提供的服务是用来将主机名和域名转换为IP地址的工作。DNS就是这样的一位“翻译官”。 </p>\n<p><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/DNS%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/1.jpg\" alt=\"DNS的作用\"></p>","more":"<h2 id=\"域的划分\"><a href=\"#域的划分\" class=\"headerlink\" title=\"域的划分\"></a>域的划分</h2><p>域名系统作为一个层次结构和分布式数据库，包含各种类型的数据，包括主机名和域名。DNS数据库中的名称形成一个分层树状结构称为域命名空间。域名包含单个标签分隔点，例如：im.qq.com。 </p>\n<p>完全限定的域名 (FQDN) 唯一地标识在 DNS 分层树中的主机的位置，通过指定的路径中点分隔从根引用的主机的名称列表。 </p>\n<p><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/DNS%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/2.jpg\" alt></p>\n<p>按其功能命名空间中用来描述 DNS 域名称的五个类别的介绍详见下表中，以及与每个名称类型的示例。 </p>\n<p><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/DNS%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/3.jpg\" alt></p>\n<h3 id=\"根域\"><a href=\"#根域\" class=\"headerlink\" title=\"根域\"></a>根域</h3><p>就是所谓的“.”，其实我们的网址<a href=\"http://www.qq.com在配置当中应该是www.baidu.com.（最后有一点），一般我们在浏览器里输入时会省略后面的点。根域服务器我们知道有13台，但是这是错误的观点。根域服务器只是具有13个IP地址，但机器数量却不是13台，因为这些IP地址借助了任播的技术，所以我们可以在全球设立这些IP的镜像站点，你访问到的这个IP并不是唯一的那台主机。\" target=\"_blank\" rel=\"noopener\">www.qq.com在配置当中应该是www.baidu.com.（最后有一点），一般我们在浏览器里输入时会省略后面的点。根域服务器我们知道有13台，但是这是错误的观点。根域服务器只是具有13个IP地址，但机器数量却不是13台，因为这些IP地址借助了任播的技术，所以我们可以在全球设立这些IP的镜像站点，你访问到的这个IP并不是唯一的那台主机。</a> </p>\n<h3 id=\"顶级域\"><a href=\"#顶级域\" class=\"headerlink\" title=\"顶级域\"></a>顶级域</h3><p>根域下来就是顶级域或者叫一级域。一些常见的DNS域名称如下图： </p>\n<p><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/DNS%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/4.jpg\" alt></p>\n<h3 id=\"域名服务器\"><a href=\"#域名服务器\" class=\"headerlink\" title=\"域名服务器\"></a>域名服务器</h3><p>每个域都会有域名服务器，也叫权威域名服务器。 </p>\n<p>能提供域名解析的服务器，上面的记录类型可以是A(address)记录,NS记录（name server）,MX（mail）,CNAME等。 </p>\n<h3 id=\"资源记录\"><a href=\"#资源记录\" class=\"headerlink\" title=\"资源记录\"></a>资源记录</h3><p>DNS 数据库中包含的资源记录 (RR)。 每个 RR 标识数据库中的特定资源。我们在建立DNS服务器时，经常会用到SOA,NS,A之类的记录，在维护DNS服务器时，会用到MX，CNAME记录。</p>\n<p><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/DNS%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/5.jpg\" alt></p>\n<h2 id=\"DNS服务的工作过程\"><a href=\"#DNS服务的工作过程\" class=\"headerlink\" title=\"DNS服务的工作过程\"></a>DNS服务的工作过程</h2><p>当 DNS 客户机需要查询程序中使用的名称时，它会查询本地DNS 服务器来解析该名称。客户机发送的每条查询消息都包括3条信息，以指定服务器应回答的问题。 </p>\n<ol>\n<li>指定的 DNS 域名，表示为完全合格的域名 (FQDN) 。 </li>\n<li>指定的查询类型，它可根据类型指定资源记录，或作为查询操作的专门类型。<br>3。 DNS域名的指定类别。 </li>\n</ol>\n<p>对于DNS 服务器，它始终应指定为 Internet 类别。例如，指定的名称可以是计算机的完全合格的域名，如im.qq.com，并且指定的查询类型用于通过该名称搜索地址资源记录。 </p>\n<p>DNS 查询以各种不同的方式进行解析。客户机有时也可通过使用从以前查询获得的缓存信息就地应答查询。DNS 服务器可使用其自身的资源记录信息缓存来应答查询，也可代表请求客户机来查询或联系其他 DNS 服务器，以完全解析该名称，并随后将应答返回至客户机。这个过程称为递归。 </p>\n<p>另外，客户机自己也可尝试联系其他的 DNS 服务器来解析名称。如果客户机这么做，它会使用基于服务器应答的独立和附加的查询，该过程称作迭代，即DNS服务器之间的交互查询就是迭代查询。</p>\n<p><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/DNS%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/6.jpg\" alt> </p>\n<ol>\n<li>在浏览器中输入<a href=\"http://www.qq.com域名，操作系统会先检查自己本地的hosts文件是否有这个网址映射关系，如果有，就先调用这个IP地址映射，完成域名解析。\" target=\"_blank\" rel=\"noopener\">www.qq.com域名，操作系统会先检查自己本地的hosts文件是否有这个网址映射关系，如果有，就先调用这个IP地址映射，完成域名解析。</a> </li>\n<li>如果hosts里没有这个域名的映射，则查找本地DNS解析器缓存，是否有这个网址映射关系，如果有，直接返回，完成域名解析。 </li>\n<li>如果hosts与本地DNS解析器缓存都没有相应的网址映射关系，首先会找TCP/IP参数中设置的首选DNS服务器，在此我们叫它本地DNS服务器，此服务器收到查询时，如果要查询的域名，包含在本地配置区域资源中，则返回解析结果给客户机，完成域名解析，此解析具有权威性。 </li>\n<li>如果要查询的域名，不由本地DNS服务器区域解析，但该服务器已缓存了此网址映射关系，则调用这个IP地址映射，完成域名解析，此解析不具有权威性。 </li>\n<li>如果本地DNS服务器本地区域文件与缓存解析都失效，则根据本地DNS服务器的设置（是否设置转发器）进行查询，如果未用转发模式，本地DNS就把请求发至13台根DNS，根DNS服务器收到请求后会判断这个域名(.com)是谁来授权管理，并会返回一个负责该顶级域名(.com)服务器的一个IP。 </li>\n<li>本地DNS服务器收到IP信息后，将会联系负责.com域的这台服务器。这台负责.com域的服务器收到请求后，如果自己无法解析，它就会找一个管理.com域的下一级DNS服务器地址(qq.com)给本地DNS服务器。 </li>\n<li>当本地DNS服务器收到这个地址后，就会找qq.com域服务器，重复上面的动作，进行查询，直至找到<a href=\"http://www.qq.com主机。\" target=\"_blank\" rel=\"noopener\">www.qq.com主机。</a> </li>\n<li>如果用的是转发模式，此DNS服务器就会把请求转发至上一级DNS服务器，由上一级服务器进行解析，上一级服务器如果不能解析，或找根DNS或把转请求转至上上级，以此循环。不管是本地DNS服务器用是转发，还是根提示，最后都是把结果返回给本地DNS服务器，由此DNS服务器再返回给客户机。</li>\n</ol>\n<p><a href=\"http://blog.csdn.net/benbenzhuhwp/article/details/44704307\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>"},{"title":"JS中call()和apply()","originContent":"","toc":false,"date":"2020-07-23T07:24:40.000Z","_content":"\n## 每个函数都包含两个非继承而来的方法：call()和apply()；\n\n在JavaScript中，call和apply作用是一样的，都是为了改变某个函数运行时的上下文（context）而存在的，换句话说，就是为了改变函数体内部this的指向。\n```javascript\nfunction fruits(){}\n        \nfruits.prototype = {\n    color: \"red\",\n    say: function(){\n        console.log(\"My color is \" + this.color);\n    }\n};\n\nvar apple = new fruits;\napple.say();                //My color is red\n```\n\n当想另外一个对象想使用fruits中的say方法时不用重新写，使用call和apply可以实现“劫持”别人的方法。\n\n```javascript\nfunction fruits(){}\n            \nfruits.prototype = {\n    color: \"red\",\n    say: function(){\n        console.log(\"My color is \" + this.color);\n    }\n};\n\nvar another = {\n    color: \"yellow\"\n};\n\nvar apple = new fruits;\napple.say();                //My color is red\napple.say.call(another);    //My color is yellow\napple.say.apply(another);   //My color is yellow\n```\n\n## 区别：参数书写方式不同\ncall(thisObj, arg1, arg2, arg3, arg4);\napply(thisObj, [args]);\nthisObj：call和apply第一个参数是一样的，该参数将替代Function类里面的this对象。\narg1,arg2....：是一个个的参数，\nargs：一个数组或类数组，是一个参数列表。\n\n## 用法\n改变函数作用域\n\n```javascript\nvar name = \"小白\";\nvar obj = {\n    name: \"小红\"\n};\n\nfunction sayName() {\n    return this.name;\n}\nconsole.log(sayName.call(this));   //小白\nconsole.log(sayName.call(obj));    //小红\n```\n\n## 实现继承\n\n```javascript\n//实现js继承\n//父类\nfunction Person(name, height) {\n    this.sayInfo = function() {\n        return \"姓名：\" + name + \", 身高：\" + height + \", 体重：\" + this.weight;\n    }\n}\n//子类\nfunction Chinese(name, height, weight) {\n    Person.call(this, name, height);\n    this.weight = weight;\n    \n    this.nation = function() {\n        console.log(\"我是中国人\");\n    }\n}\n//子类\nfunction America(name, height, weight) {\n    Person.apply(this, [name, height]);\n    this.weight = weight;\n}\n\nlet chiness = new Chinese(\"成龙\", \"178cm\", \"60kg\");\nconsole.log(chiness.sayInfo());    //姓名：成龙, 身高：178cm, 体重：60kg\nlet america = new America(\"jack\", \"180cm\", \"55kg\");\nconsole.log(america.sayInfo());    //姓名：jack, 身高：180cm, 体重：55kg\n```\n\n作者：书虫和泰迪熊\n链接：https://www.jianshu.com/p/aa2eeecd8b4f\n来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","source":"_posts/JS中call-和apply.md","raw":"---\ntitle: JS中call()和apply()\ntags:\n  - 知识点备忘\noriginContent: ''\ncategories:\n  - Web开发\ntoc: false\ndate: 2020-07-23 15:24:40\n---\n\n## 每个函数都包含两个非继承而来的方法：call()和apply()；\n\n在JavaScript中，call和apply作用是一样的，都是为了改变某个函数运行时的上下文（context）而存在的，换句话说，就是为了改变函数体内部this的指向。\n```javascript\nfunction fruits(){}\n        \nfruits.prototype = {\n    color: \"red\",\n    say: function(){\n        console.log(\"My color is \" + this.color);\n    }\n};\n\nvar apple = new fruits;\napple.say();                //My color is red\n```\n\n当想另外一个对象想使用fruits中的say方法时不用重新写，使用call和apply可以实现“劫持”别人的方法。\n\n```javascript\nfunction fruits(){}\n            \nfruits.prototype = {\n    color: \"red\",\n    say: function(){\n        console.log(\"My color is \" + this.color);\n    }\n};\n\nvar another = {\n    color: \"yellow\"\n};\n\nvar apple = new fruits;\napple.say();                //My color is red\napple.say.call(another);    //My color is yellow\napple.say.apply(another);   //My color is yellow\n```\n\n## 区别：参数书写方式不同\ncall(thisObj, arg1, arg2, arg3, arg4);\napply(thisObj, [args]);\nthisObj：call和apply第一个参数是一样的，该参数将替代Function类里面的this对象。\narg1,arg2....：是一个个的参数，\nargs：一个数组或类数组，是一个参数列表。\n\n## 用法\n改变函数作用域\n\n```javascript\nvar name = \"小白\";\nvar obj = {\n    name: \"小红\"\n};\n\nfunction sayName() {\n    return this.name;\n}\nconsole.log(sayName.call(this));   //小白\nconsole.log(sayName.call(obj));    //小红\n```\n\n## 实现继承\n\n```javascript\n//实现js继承\n//父类\nfunction Person(name, height) {\n    this.sayInfo = function() {\n        return \"姓名：\" + name + \", 身高：\" + height + \", 体重：\" + this.weight;\n    }\n}\n//子类\nfunction Chinese(name, height, weight) {\n    Person.call(this, name, height);\n    this.weight = weight;\n    \n    this.nation = function() {\n        console.log(\"我是中国人\");\n    }\n}\n//子类\nfunction America(name, height, weight) {\n    Person.apply(this, [name, height]);\n    this.weight = weight;\n}\n\nlet chiness = new Chinese(\"成龙\", \"178cm\", \"60kg\");\nconsole.log(chiness.sayInfo());    //姓名：成龙, 身高：178cm, 体重：60kg\nlet america = new America(\"jack\", \"180cm\", \"55kg\");\nconsole.log(america.sayInfo());    //姓名：jack, 身高：180cm, 体重：55kg\n```\n\n作者：书虫和泰迪熊\n链接：https://www.jianshu.com/p/aa2eeecd8b4f\n来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","slug":"JS中call-和apply","published":1,"updated":"2020-07-23T07:24:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznwx0011h5s6vx017zbh","content":"<h2 id=\"每个函数都包含两个非继承而来的方法：call-和apply-；\"><a href=\"#每个函数都包含两个非继承而来的方法：call-和apply-；\" class=\"headerlink\" title=\"每个函数都包含两个非继承而来的方法：call()和apply()；\"></a>每个函数都包含两个非继承而来的方法：call()和apply()；</h2><p>在JavaScript中，call和apply作用是一样的，都是为了改变某个函数运行时的上下文（context）而存在的，换句话说，就是为了改变函数体内部this的指向。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fruits</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">fruits.prototype = &#123;</span><br><span class=\"line\">    color: <span class=\"string\">\"red\"</span>,</span><br><span class=\"line\">    say: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"My color is \"</span> + <span class=\"keyword\">this</span>.color);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> apple = <span class=\"keyword\">new</span> fruits;</span><br><span class=\"line\">apple.say();                <span class=\"comment\">//My color is red</span></span><br></pre></td></tr></table></figure></p>\n<p>当想另外一个对象想使用fruits中的say方法时不用重新写，使用call和apply可以实现“劫持”别人的方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fruits</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">fruits.prototype = &#123;</span><br><span class=\"line\">    color: <span class=\"string\">\"red\"</span>,</span><br><span class=\"line\">    say: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"My color is \"</span> + <span class=\"keyword\">this</span>.color);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> another = &#123;</span><br><span class=\"line\">    color: <span class=\"string\">\"yellow\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> apple = <span class=\"keyword\">new</span> fruits;</span><br><span class=\"line\">apple.say();                <span class=\"comment\">//My color is red</span></span><br><span class=\"line\">apple.say.call(another);    <span class=\"comment\">//My color is yellow</span></span><br><span class=\"line\">apple.say.apply(another);   <span class=\"comment\">//My color is yellow</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"区别：参数书写方式不同\"><a href=\"#区别：参数书写方式不同\" class=\"headerlink\" title=\"区别：参数书写方式不同\"></a>区别：参数书写方式不同</h2><p>call(thisObj, arg1, arg2, arg3, arg4);<br>apply(thisObj, [args]);<br>thisObj：call和apply第一个参数是一样的，该参数将替代Function类里面的this对象。<br>arg1,arg2….：是一个个的参数，<br>args：一个数组或类数组，是一个参数列表。</p>\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><p>改变函数作用域</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"小白\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"小红\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sayName.call(<span class=\"keyword\">this</span>));   <span class=\"comment\">//小白</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sayName.call(obj));    <span class=\"comment\">//小红</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"实现继承\"><a href=\"#实现继承\" class=\"headerlink\" title=\"实现继承\"></a>实现继承</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实现js继承</span></span><br><span class=\"line\"><span class=\"comment\">//父类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, height</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sayInfo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"姓名：\"</span> + name + <span class=\"string\">\", 身高：\"</span> + height + <span class=\"string\">\", 体重：\"</span> + <span class=\"keyword\">this</span>.weight;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//子类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Chinese</span>(<span class=\"params\">name, height, weight</span>) </span>&#123;</span><br><span class=\"line\">    Person.call(<span class=\"keyword\">this</span>, name, height);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.weight = weight;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.nation = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"我是中国人\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//子类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">America</span>(<span class=\"params\">name, height, weight</span>) </span>&#123;</span><br><span class=\"line\">    Person.apply(<span class=\"keyword\">this</span>, [name, height]);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.weight = weight;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> chiness = <span class=\"keyword\">new</span> Chinese(<span class=\"string\">\"成龙\"</span>, <span class=\"string\">\"178cm\"</span>, <span class=\"string\">\"60kg\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(chiness.sayInfo());    <span class=\"comment\">//姓名：成龙, 身高：178cm, 体重：60kg</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> america = <span class=\"keyword\">new</span> America(<span class=\"string\">\"jack\"</span>, <span class=\"string\">\"180cm\"</span>, <span class=\"string\">\"55kg\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(america.sayInfo());    <span class=\"comment\">//姓名：jack, 身高：180cm, 体重：55kg</span></span><br></pre></td></tr></table></figure>\n<p>作者：书虫和泰迪熊<br>链接：<a href=\"https://www.jianshu.com/p/aa2eeecd8b4f\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/aa2eeecd8b4f</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"每个函数都包含两个非继承而来的方法：call-和apply-；\"><a href=\"#每个函数都包含两个非继承而来的方法：call-和apply-；\" class=\"headerlink\" title=\"每个函数都包含两个非继承而来的方法：call()和apply()；\"></a>每个函数都包含两个非继承而来的方法：call()和apply()；</h2><p>在JavaScript中，call和apply作用是一样的，都是为了改变某个函数运行时的上下文（context）而存在的，换句话说，就是为了改变函数体内部this的指向。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fruits</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">fruits.prototype = &#123;</span><br><span class=\"line\">    color: <span class=\"string\">\"red\"</span>,</span><br><span class=\"line\">    say: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"My color is \"</span> + <span class=\"keyword\">this</span>.color);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> apple = <span class=\"keyword\">new</span> fruits;</span><br><span class=\"line\">apple.say();                <span class=\"comment\">//My color is red</span></span><br></pre></td></tr></table></figure></p>\n<p>当想另外一个对象想使用fruits中的say方法时不用重新写，使用call和apply可以实现“劫持”别人的方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fruits</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">fruits.prototype = &#123;</span><br><span class=\"line\">    color: <span class=\"string\">\"red\"</span>,</span><br><span class=\"line\">    say: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"My color is \"</span> + <span class=\"keyword\">this</span>.color);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> another = &#123;</span><br><span class=\"line\">    color: <span class=\"string\">\"yellow\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> apple = <span class=\"keyword\">new</span> fruits;</span><br><span class=\"line\">apple.say();                <span class=\"comment\">//My color is red</span></span><br><span class=\"line\">apple.say.call(another);    <span class=\"comment\">//My color is yellow</span></span><br><span class=\"line\">apple.say.apply(another);   <span class=\"comment\">//My color is yellow</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"区别：参数书写方式不同\"><a href=\"#区别：参数书写方式不同\" class=\"headerlink\" title=\"区别：参数书写方式不同\"></a>区别：参数书写方式不同</h2><p>call(thisObj, arg1, arg2, arg3, arg4);<br>apply(thisObj, [args]);<br>thisObj：call和apply第一个参数是一样的，该参数将替代Function类里面的this对象。<br>arg1,arg2….：是一个个的参数，<br>args：一个数组或类数组，是一个参数列表。</p>\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><p>改变函数作用域</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"小白\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"小红\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sayName.call(<span class=\"keyword\">this</span>));   <span class=\"comment\">//小白</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sayName.call(obj));    <span class=\"comment\">//小红</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"实现继承\"><a href=\"#实现继承\" class=\"headerlink\" title=\"实现继承\"></a>实现继承</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实现js继承</span></span><br><span class=\"line\"><span class=\"comment\">//父类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, height</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sayInfo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"姓名：\"</span> + name + <span class=\"string\">\", 身高：\"</span> + height + <span class=\"string\">\", 体重：\"</span> + <span class=\"keyword\">this</span>.weight;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//子类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Chinese</span>(<span class=\"params\">name, height, weight</span>) </span>&#123;</span><br><span class=\"line\">    Person.call(<span class=\"keyword\">this</span>, name, height);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.weight = weight;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.nation = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"我是中国人\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//子类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">America</span>(<span class=\"params\">name, height, weight</span>) </span>&#123;</span><br><span class=\"line\">    Person.apply(<span class=\"keyword\">this</span>, [name, height]);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.weight = weight;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> chiness = <span class=\"keyword\">new</span> Chinese(<span class=\"string\">\"成龙\"</span>, <span class=\"string\">\"178cm\"</span>, <span class=\"string\">\"60kg\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(chiness.sayInfo());    <span class=\"comment\">//姓名：成龙, 身高：178cm, 体重：60kg</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> america = <span class=\"keyword\">new</span> America(<span class=\"string\">\"jack\"</span>, <span class=\"string\">\"180cm\"</span>, <span class=\"string\">\"55kg\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(america.sayInfo());    <span class=\"comment\">//姓名：jack, 身高：180cm, 体重：55kg</span></span><br></pre></td></tr></table></figure>\n<p>作者：书虫和泰迪熊<br>链接：<a href=\"https://www.jianshu.com/p/aa2eeecd8b4f\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/aa2eeecd8b4f</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n"},{"title":"JS中typeof的用法","toc":false,"date":"2020-07-10T01:50:47.000Z","_content":"\njs是一门弱语言，它在声明变量时无需确定变量的类型，js在运行时会自动判断。那么如何判断一个变量的类型呢，js提供了typeof运算符，用来检测一个变量的类型。\n\n1. typeof的语法\ntypeof是一个运算符，有2种使用方式：typeof(表达式)和typeof 变量名，第一种是对表达式做运算，第二种是对变量做运算。\n2. typeof的返回值\ntypeof运算符的返回类型为字符串，值包括如下几种：\n```javascript\n'undefined'              --未定义的变量或值\n'boolean'                 --布尔类型的变量或值\n'string'                     --字符串类型的变量或值\n'number'                  --数字类型的变量或值\n'object'                    --对象类型的变量或值，或者null(这个是js历史遗留问题，将null作为object类型处理)\n'function'                 --函数类型的变量或值\n```\n<!-- more -->\n 3. 简单的示例\n\n```javascript\nconsole.log(typeof a);    //'undefined'\nconsole.log(typeof(true));  //'boolean'\nconsole.log(typeof '123');  //'string'\nconsole.log(typeof 123);   //'number'\nconsole.log(typeof NaN);   //'number'\nconsole.log(typeof null);  //'object'    \nvar obj = new String();\nconsole.log(typeof(obj));    //'object'\nvar fn = function(){};\nconsole.log(typeof(fn));  //'function'\nconsole.log(typeof(class c{}));  //'function'\n```\n总结：typeof运算符用于判断对象的类型，但是对于一些创建的对象，它们都会返回'object'，有时我们需要判断该实例是否为某个对象的实例，那么这个时候需要用到instanceof运算符，后续记录instanceof运算符的相关用法。\n\n作者：zh2443\n链接：https://www.jianshu.com/p/8107d25f54ac\n来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","source":"_posts/JS中typeof的用法.md","raw":"---\ntitle: JS中typeof的用法\ntags:\n  - javascript\ncategories:\n  - Web开发\ntoc: false\ndate: 2020-07-10 09:50:47\n---\n\njs是一门弱语言，它在声明变量时无需确定变量的类型，js在运行时会自动判断。那么如何判断一个变量的类型呢，js提供了typeof运算符，用来检测一个变量的类型。\n\n1. typeof的语法\ntypeof是一个运算符，有2种使用方式：typeof(表达式)和typeof 变量名，第一种是对表达式做运算，第二种是对变量做运算。\n2. typeof的返回值\ntypeof运算符的返回类型为字符串，值包括如下几种：\n```javascript\n'undefined'              --未定义的变量或值\n'boolean'                 --布尔类型的变量或值\n'string'                     --字符串类型的变量或值\n'number'                  --数字类型的变量或值\n'object'                    --对象类型的变量或值，或者null(这个是js历史遗留问题，将null作为object类型处理)\n'function'                 --函数类型的变量或值\n```\n<!-- more -->\n 3. 简单的示例\n\n```javascript\nconsole.log(typeof a);    //'undefined'\nconsole.log(typeof(true));  //'boolean'\nconsole.log(typeof '123');  //'string'\nconsole.log(typeof 123);   //'number'\nconsole.log(typeof NaN);   //'number'\nconsole.log(typeof null);  //'object'    \nvar obj = new String();\nconsole.log(typeof(obj));    //'object'\nvar fn = function(){};\nconsole.log(typeof(fn));  //'function'\nconsole.log(typeof(class c{}));  //'function'\n```\n总结：typeof运算符用于判断对象的类型，但是对于一些创建的对象，它们都会返回'object'，有时我们需要判断该实例是否为某个对象的实例，那么这个时候需要用到instanceof运算符，后续记录instanceof运算符的相关用法。\n\n作者：zh2443\n链接：https://www.jianshu.com/p/8107d25f54ac\n来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","slug":"JS中typeof的用法","published":1,"updated":"2020-07-10T01:55:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznwz0014h5s6kuej9zvn","content":"<p>js是一门弱语言，它在声明变量时无需确定变量的类型，js在运行时会自动判断。那么如何判断一个变量的类型呢，js提供了typeof运算符，用来检测一个变量的类型。</p>\n<ol>\n<li>typeof的语法<br>typeof是一个运算符，有2种使用方式：typeof(表达式)和typeof 变量名，第一种是对表达式做运算，第二种是对变量做运算。</li>\n<li>typeof的返回值<br>typeof运算符的返回类型为字符串，值包括如下几种：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'undefined'</span>              --未定义的变量或值</span><br><span class=\"line\"><span class=\"string\">'boolean'</span>                 --布尔类型的变量或值</span><br><span class=\"line\"><span class=\"string\">'string'</span>                     --字符串类型的变量或值</span><br><span class=\"line\"><span class=\"string\">'number'</span>                  --数字类型的变量或值</span><br><span class=\"line\"><span class=\"string\">'object'</span>                    --对象类型的变量或值，或者<span class=\"literal\">null</span>(这个是js历史遗留问题，将<span class=\"literal\">null</span>作为object类型处理)</span><br><span class=\"line\"><span class=\"string\">'function'</span>                 --函数类型的变量或值</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<a id=\"more\"></a>\n<ol start=\"3\">\n<li>简单的示例</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> a);    <span class=\"comment\">//'undefined'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(<span class=\"literal\">true</span>));  <span class=\"comment\">//'boolean'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"string\">'123'</span>);  <span class=\"comment\">//'string'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"number\">123</span>);   <span class=\"comment\">//'number'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"literal\">NaN</span>);   <span class=\"comment\">//'number'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>);  <span class=\"comment\">//'object'    </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(obj));    <span class=\"comment\">//'object'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(fn));  <span class=\"comment\">//'function'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">c</span></span>&#123;&#125;));  <span class=\"comment\">//'function'</span></span><br></pre></td></tr></table></figure>\n<p>总结：typeof运算符用于判断对象的类型，但是对于一些创建的对象，它们都会返回’object’，有时我们需要判断该实例是否为某个对象的实例，那么这个时候需要用到instanceof运算符，后续记录instanceof运算符的相关用法。</p>\n<p>作者：zh2443<br>链接：<a href=\"https://www.jianshu.com/p/8107d25f54ac\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/8107d25f54ac</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n","site":{"data":{}},"excerpt":"<p>js是一门弱语言，它在声明变量时无需确定变量的类型，js在运行时会自动判断。那么如何判断一个变量的类型呢，js提供了typeof运算符，用来检测一个变量的类型。</p>\n<ol>\n<li>typeof的语法<br>typeof是一个运算符，有2种使用方式：typeof(表达式)和typeof 变量名，第一种是对表达式做运算，第二种是对变量做运算。</li>\n<li>typeof的返回值<br>typeof运算符的返回类型为字符串，值包括如下几种：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'undefined'</span>              --未定义的变量或值</span><br><span class=\"line\"><span class=\"string\">'boolean'</span>                 --布尔类型的变量或值</span><br><span class=\"line\"><span class=\"string\">'string'</span>                     --字符串类型的变量或值</span><br><span class=\"line\"><span class=\"string\">'number'</span>                  --数字类型的变量或值</span><br><span class=\"line\"><span class=\"string\">'object'</span>                    --对象类型的变量或值，或者<span class=\"literal\">null</span>(这个是js历史遗留问题，将<span class=\"literal\">null</span>作为object类型处理)</span><br><span class=\"line\"><span class=\"string\">'function'</span>                 --函数类型的变量或值</span><br></pre></td></tr></table></figure>\n</li>\n</ol>","more":"<ol start=\"3\">\n<li>简单的示例</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> a);    <span class=\"comment\">//'undefined'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(<span class=\"literal\">true</span>));  <span class=\"comment\">//'boolean'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"string\">'123'</span>);  <span class=\"comment\">//'string'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"number\">123</span>);   <span class=\"comment\">//'number'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"literal\">NaN</span>);   <span class=\"comment\">//'number'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>);  <span class=\"comment\">//'object'    </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(obj));    <span class=\"comment\">//'object'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(fn));  <span class=\"comment\">//'function'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">c</span></span>&#123;&#125;));  <span class=\"comment\">//'function'</span></span><br></pre></td></tr></table></figure>\n<p>总结：typeof运算符用于判断对象的类型，但是对于一些创建的对象，它们都会返回’object’，有时我们需要判断该实例是否为某个对象的实例，那么这个时候需要用到instanceof运算符，后续记录instanceof运算符的相关用法。</p>\n<p>作者：zh2443<br>链接：<a href=\"https://www.jianshu.com/p/8107d25f54ac\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/8107d25f54ac</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>"},{"title":"JS中的异步操作","originContent":"","toc":false,"date":"2020-07-24T01:56:52.000Z","_content":"\nJS中异步编程的方法有：\n\n- 回调函数\n- 事件监听\n- 发布/订阅\n- promise\n- generator（ES6）\n- async/await(ES7)\n\n\n## 回调函数\n回调是异步编程中最基础的方法。举例一个简单的回调：在f1执行完之后再执行f2\n\n```javascript\nvar func1=function(callback){\n    console.log(1);\n    (callback && typeof(callback)==='function') && callback();\n}\nfunc1(func2);\nvar func2=function(){\n    console.log(2);\n}\n```\n\n异步回调中最常见的形式可能就是Ajax了：\n```javascript\n$.ajax({\n    url:\"/getmsg\",\n    type: 'GET',\n    dataType: 'json',\n    success: function(ret) {\n        if (ret && ret.status) {\n            //\n        }\n    },\n    error: function(xhr) {\n        //\n    }\n})\n```\n\n## 事件监听\n通过事件机制，实现代码的解耦。js处理DOM交互就是采用的事件机制，我们这儿只是实现一些自定义的事件而已。JS中已经很好的支持了自定义事件，如：\n```javascript\n//新建一个事件\nvar event=new Event('Popup::Show');\n//dispatch the event\nelem1.dispatchEvent(event)\n\n//listen for this event\nelem2.addEventListener('Popup::Show',function(msg){},false)\n```\n\n## 发布-订阅模式\n在系统中存在一个\"信号中心\"，当某个任务执行完成后向信号中心\"发布\"（publish）一个信号，其他任务可以向信号中心\"订阅\"（subscribe）这个信号，从而知道什么时候自己可以开始执行。简单实现如下：\n```JavaScript\n//发布-订阅\n//有个消息池，存放所有消息\nlet pubsub = {};\n(function(myObj) {\n    topics = {}\n    subId = -1;\n    //发布者接受参数(消息名称，参数)\n    myObj.publish = function(topic, msg) {\n            //如果发布的该消息没有订阅者，直接返回\n            if (!topics[topic]) {\n                return\n            }\n            //对该消息的所有订阅者，遍历去执行各自的回调函数\n            let subs = topics[topic]\n            subs.forEach(function(sub) {\n                sub.func(topic, msg)\n            })\n        }\n    //订阅者接受参数：（消息名称，回调函数）\n    myObj.subscribe = function(topic, func) {\n        //如果订阅的该事件还未定义，初始化\n        if (!topics[topic]) {\n            topics[topic] = []\n        }\n        //使用不同的token来作为订阅者的索引\n        let token = (++subId).toString()\n        topics[topic].push({\n                token: token,\n                func: func\n            })\n        return token\n    }\n    myObj.unsubscribe = function(token) {\n        //对消息列表遍历查找该token是哪个消息中的哪个订阅者\n        for (let t in topics) {\n            //如果某个消息没有订阅者，直接返回\n            if (!topics[t]) {\n                return }\n            topics[t].forEach(function(sub,index) {\n                if (sub.token === token) {\n                    //找到了，从订阅者的数组中去掉该订阅者\n                    topics[t].splice(index, 1)\n                }\n            })\n        }\n    }\n})(pubsub)\n\nlet sub1 = pubsub.subscribe('Msg::Name', function(topic, msg) {\n    console.log(\"event is :\" + topic + \"; data is :\" + msg)\n});\nlet sub2 = pubsub.subscribe('Msg::Name', function(topic, msg) {\n    console.log(\"this is another subscriber, data is :\" + msg)\n});\npubsub.publish('Msg::Name', '123')\n\npubsub.unsubscribe(sub2)\npubsub.publish('Msg::Name', '456')\n```\n\n其中存储消息的结构用json可以表示为：\n```javascript\ntopics = {\n    topic1: [{ token: 1, func: callback1 }, { token: 2, func: callback2 }],\n    topic2: [{ token: 3, func: callback3 }, { token: 4, func: callback4 }],\n    topic3: []\n}\n\n```\n\n消息池的结构是发布订阅模式与事件监听模式的最大区别。当然，每个消息也可以看做是一个个的事件，topics对象就相当于一个事件处理中心，每个事件都有各自的订阅者。所以事件监听其实就是发布订阅模式的一个简化版本。而发布订阅模式的优点就是我们可以查看消息中心的信息，了解有多少信号，每个信号有多少订阅者。\n\n## 再说一说观察者模式\n很多情况下，我们都将观察者模式和发布-订阅模式混为一谈，因为都可用来进行异步通信，实现代码的解耦，而不再细究其不同，但是内部实现还是有很多不同的。\n\n1. 整体模型的不同：发布订阅模式是靠信息池作为发布者和订阅者的中转站的，订阅者订阅的是信息池中的某个信息；而观察者模式是直接将订阅者订阅到发布者内部的，目标对象需要负责维护观察者，也就是观察者模式中订阅者是依赖发布者的。\n\n2. 触发回调的方式不同：发布-订阅模式中，订阅者通过监听特定消息来触发回调；而观察者模式是发布者暴露一个接口(方法)，当目标对象发生变化时调用此接口，以保持自身状态的及时改变。\n\n观察者模式很好的应用是MVC架构，当数据模型更新时，视图也发生变化。从数据模型中将视图解耦出来，从而减少了依赖。但是当观察者数量上升时，性能会有显著下降。我们同样可以自己实现：\n```javascript\n//观察者模式\nvar Subject=function(){\n    this.observers=[];\n}\nSubject.prototype={\n    subscribe:function(observer){\n        this.observers.push(observer);\n    },\n    unsubscribe:function(observer){\n        var index=this.observers.indexOf(observer);\n        if (index>-1) {\n            this.observers.splice(index,1);\n        }\n    },\n    notify:function(observer,msg){\n        var index=this.observers.indexOf(observer);\n        if (index>-1) {\n            this.observers[index].notify(msg)\n        }\n    },\n    notifyAll:function(msg){\n        this.observers.forEach(function(observe,msg){\n            observe.notify(msg)\n        })\n    }\n}\nvar Observer=function(){\n    return {\n        notify:function(msg){\n            console.log(\"received: \"+msg);\n        }\n    }\n}\nvar subject=new Subject();\nvar observer0=new Observer();\nvar observer1=new Observer();\nvar observer2=new Observer();\nvar observer3=new Observer();\nsubject.subscribe(observer0);\nsubject.subscribe(observer1);\nsubject.subscribe(observer2);\nsubject.subscribe(observer3);\nsubject.notifyAll('all notified');\nsubject.notify(observer2,'asda');\n```\n\n## promise\n\n为解决回调函数噩梦而提出的写法，将回调函数的横向加载变成纵向加载。\n\n对象状态不受外界影响。三种状态：pending,resolved,rejected。只有异步操作的结果才能改变状态\n状态一旦改变，就不会再变。\n用Promise对象实现Ajax操作的例子\n\n```javascript\nvar getJSON=function(url){\n    var promise=new Promise(function(resolve,reject){\n        var client=new XMLHttpRequest();\n        client.open(\"GET\",url);\n        client.onreadystatechange=handler;\n        client.responseType=\"json\";\n        client.setRequestHeader(\"Accept\",\"application/json\");\n        client.send();\n        function handler(){\n            if(this.readyState!=4){\n                return;\n            }\n            if(this.status==200){\n                resolve(this.response);\n            }else{\n                reject(new Error(this.statusText));\n            }\n        }\n    });\n    return promise;\n}\n\ngetJSON('/posts.json').then(function(json){\n    console.log('Contents: '+json);\n},function(error){\n    console.error(error)\n})\n```\n\n再举一个需要多层回调的例子：假设每个步骤都是异步，并且依赖上一个步骤的结果，使用setTimeout来模拟异步操作。\n```javascript\n//输入n，表示该函数执行时间，结果为n+200,并且用于下一步的输入\nfunction takeLongTime(n){\n    return new Promise(resolve=>{\n        setTimeout(()=>resolve(n+200),n)\n    })\n}\n\nfunction step1(n){\n    console.log(`step1 with ${n}`);\n    return takeLongTime(n);\n}\n\nfunction step2(n){\n    console.log(`step2 with ${n}`);\n    return takeLongTime(n);\n}\n\nfunction step3(n){\n    console.log(`step3 with ${n}`);\n    return takeLongTime(n);\n}\n\n```\n\n如果使用Promise的方式将其3个步骤处理为链式操作，每一步都返回一个promise对象，将输出的结果作为下一步新的输入：\n\n```javascript\nfunction dolt(){\n    console.time('dolt');\n    const time1=300;\n    step1(time1)\n    .then(time2=>step2(time2))\n    .then(time3=>step3(time3))\n    .then(result=>{\n        console.log(`result is ${result}`);\n        console.timeEnd('dolt')\n    });\n}\ndolt();\n//输出结果为\nstep1 with 300\nstep2 with 500\nstep3 with 700\nresult is 900\ndolt: 1516.713ms\n```\n\n实际耗时跟我们计算的延迟时间300+500+700=1500ms差不多。但是对于长的链式操作来说，看起来是一堆then方法的堆砌，代码冗余，语义也不清楚，而且还是靠着箭头函数才使得代码略微简短一些。Promise还有一个痛点，就是传递参数太麻烦，尤其是需要传递多参数的情况下。\n\n## Generator函数\ngenerator是一个封装的异步任务，在需要暂停的地方，使用yield语句注明。如\n\n```javascript\nfunction* gen(x){\n    let y=yield x+2;\n    return y;\n}\nlet g=gen(1);\ng.next();\n//返回 {value: 3, done: false}\ng.next();\n//返回 {value: undefined, done: true}\n```\n\n调用generator函数返回的是内部的指针对象，调用next方法就会移动内部指针。Generator函数之所以能被用来处理异步操作，因为它可以暂停执行和恢复执行、函数体内外的数据交换和错误处理机制。\n\n针对前面多任务的例子，使用generator实现：\n```javascript\nfunction* dolt(){\n    console.time('dolt');\n    const time1=300;\n    const time2=yield step1(time1);\n    const time3=yield step2(time2);\n    const result=yield step3(time3);\n    console.log(`result is ${result}`);\n    console.timeEnd('dolt');\n}\n```\n\n但是 Generator 函数的执行必须靠执行器\n```javascript\nfunction spawn(genF) {\n  return new Promise(function(resolve, reject) {\n    var gen = genF();\n    function step(nextF) {\n      try {\n        var next = nextF();\n      } catch(e) {\n        return reject(e); \n      }\n      if(next.done) {\n        return resolve(next.value);\n      } \n      Promise.resolve(next.value).then(function(v) {\n        step(function() { return gen.next(v); });      \n      }, function(e) {\n        step(function() { return gen.throw(e); });\n      });\n    }\n    step(function() { return gen.next(undefined); });\n  });\n}\nspawn(dolt);\n\n```\n\n## async/await\nasync函数基于Generator又做了几点改进：\n\n- 内置执行器，将Generator函数和自动执行器进一步包装。\n- 语义更清楚，async表示函数中有异步操作，await表示等待着紧跟在后边的表达式的结果。\n- 适用性更广泛，await后面可以跟promise对象和原始类型的值(Generator中不支持)\n\n\n很多人都认为这是异步编程的终极解决方案，由此评价就可知道该方法有多优秀了。它基于Promise使用async/await来优化then链的调用,其实也是Generator函数的语法糖。 async 会将其后的函数（函数表达式或 Lambda）的返回值封装成一个 Promise 对象，而 await 会等待这个 Promise 完成，并将其 resolve 的结果返回出来。\n\nawait得到的就是返回值，其内部已经执行promise中resolve方法，然后将结果返回。使用async/await的方式重写前面的回调任务：\n\n```javascript\nasync function dolt(){\n    console.time('dolt');\n    const time1=300;\n    const time2=await step1(time1);\n    const time3=await step2(time2);\n    const result=await step3(time3);\n    console.log(`result is ${result}`);\n    console.timeEnd('dolt');\n}\n\ndolt();\n```\n\n功能还很新，属于ES7的语法，但使用Babel插件可以很好的转义。另外await只能用在async函数中，否则会报错。\n\n作者：RichardBillion\n链接：https://www.jianshu.com/p/6f91e7696b91\n来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","source":"_posts/JS中的异步操作.md","raw":"---\ntitle: JS中的异步操作\ntags:\n  - 知识点备忘\noriginContent: ''\ncategories:\n  - Web开发\ntoc: false\ndate: 2020-07-24 09:56:52\n---\n\nJS中异步编程的方法有：\n\n- 回调函数\n- 事件监听\n- 发布/订阅\n- promise\n- generator（ES6）\n- async/await(ES7)\n\n\n## 回调函数\n回调是异步编程中最基础的方法。举例一个简单的回调：在f1执行完之后再执行f2\n\n```javascript\nvar func1=function(callback){\n    console.log(1);\n    (callback && typeof(callback)==='function') && callback();\n}\nfunc1(func2);\nvar func2=function(){\n    console.log(2);\n}\n```\n\n异步回调中最常见的形式可能就是Ajax了：\n```javascript\n$.ajax({\n    url:\"/getmsg\",\n    type: 'GET',\n    dataType: 'json',\n    success: function(ret) {\n        if (ret && ret.status) {\n            //\n        }\n    },\n    error: function(xhr) {\n        //\n    }\n})\n```\n\n## 事件监听\n通过事件机制，实现代码的解耦。js处理DOM交互就是采用的事件机制，我们这儿只是实现一些自定义的事件而已。JS中已经很好的支持了自定义事件，如：\n```javascript\n//新建一个事件\nvar event=new Event('Popup::Show');\n//dispatch the event\nelem1.dispatchEvent(event)\n\n//listen for this event\nelem2.addEventListener('Popup::Show',function(msg){},false)\n```\n\n## 发布-订阅模式\n在系统中存在一个\"信号中心\"，当某个任务执行完成后向信号中心\"发布\"（publish）一个信号，其他任务可以向信号中心\"订阅\"（subscribe）这个信号，从而知道什么时候自己可以开始执行。简单实现如下：\n```JavaScript\n//发布-订阅\n//有个消息池，存放所有消息\nlet pubsub = {};\n(function(myObj) {\n    topics = {}\n    subId = -1;\n    //发布者接受参数(消息名称，参数)\n    myObj.publish = function(topic, msg) {\n            //如果发布的该消息没有订阅者，直接返回\n            if (!topics[topic]) {\n                return\n            }\n            //对该消息的所有订阅者，遍历去执行各自的回调函数\n            let subs = topics[topic]\n            subs.forEach(function(sub) {\n                sub.func(topic, msg)\n            })\n        }\n    //订阅者接受参数：（消息名称，回调函数）\n    myObj.subscribe = function(topic, func) {\n        //如果订阅的该事件还未定义，初始化\n        if (!topics[topic]) {\n            topics[topic] = []\n        }\n        //使用不同的token来作为订阅者的索引\n        let token = (++subId).toString()\n        topics[topic].push({\n                token: token,\n                func: func\n            })\n        return token\n    }\n    myObj.unsubscribe = function(token) {\n        //对消息列表遍历查找该token是哪个消息中的哪个订阅者\n        for (let t in topics) {\n            //如果某个消息没有订阅者，直接返回\n            if (!topics[t]) {\n                return }\n            topics[t].forEach(function(sub,index) {\n                if (sub.token === token) {\n                    //找到了，从订阅者的数组中去掉该订阅者\n                    topics[t].splice(index, 1)\n                }\n            })\n        }\n    }\n})(pubsub)\n\nlet sub1 = pubsub.subscribe('Msg::Name', function(topic, msg) {\n    console.log(\"event is :\" + topic + \"; data is :\" + msg)\n});\nlet sub2 = pubsub.subscribe('Msg::Name', function(topic, msg) {\n    console.log(\"this is another subscriber, data is :\" + msg)\n});\npubsub.publish('Msg::Name', '123')\n\npubsub.unsubscribe(sub2)\npubsub.publish('Msg::Name', '456')\n```\n\n其中存储消息的结构用json可以表示为：\n```javascript\ntopics = {\n    topic1: [{ token: 1, func: callback1 }, { token: 2, func: callback2 }],\n    topic2: [{ token: 3, func: callback3 }, { token: 4, func: callback4 }],\n    topic3: []\n}\n\n```\n\n消息池的结构是发布订阅模式与事件监听模式的最大区别。当然，每个消息也可以看做是一个个的事件，topics对象就相当于一个事件处理中心，每个事件都有各自的订阅者。所以事件监听其实就是发布订阅模式的一个简化版本。而发布订阅模式的优点就是我们可以查看消息中心的信息，了解有多少信号，每个信号有多少订阅者。\n\n## 再说一说观察者模式\n很多情况下，我们都将观察者模式和发布-订阅模式混为一谈，因为都可用来进行异步通信，实现代码的解耦，而不再细究其不同，但是内部实现还是有很多不同的。\n\n1. 整体模型的不同：发布订阅模式是靠信息池作为发布者和订阅者的中转站的，订阅者订阅的是信息池中的某个信息；而观察者模式是直接将订阅者订阅到发布者内部的，目标对象需要负责维护观察者，也就是观察者模式中订阅者是依赖发布者的。\n\n2. 触发回调的方式不同：发布-订阅模式中，订阅者通过监听特定消息来触发回调；而观察者模式是发布者暴露一个接口(方法)，当目标对象发生变化时调用此接口，以保持自身状态的及时改变。\n\n观察者模式很好的应用是MVC架构，当数据模型更新时，视图也发生变化。从数据模型中将视图解耦出来，从而减少了依赖。但是当观察者数量上升时，性能会有显著下降。我们同样可以自己实现：\n```javascript\n//观察者模式\nvar Subject=function(){\n    this.observers=[];\n}\nSubject.prototype={\n    subscribe:function(observer){\n        this.observers.push(observer);\n    },\n    unsubscribe:function(observer){\n        var index=this.observers.indexOf(observer);\n        if (index>-1) {\n            this.observers.splice(index,1);\n        }\n    },\n    notify:function(observer,msg){\n        var index=this.observers.indexOf(observer);\n        if (index>-1) {\n            this.observers[index].notify(msg)\n        }\n    },\n    notifyAll:function(msg){\n        this.observers.forEach(function(observe,msg){\n            observe.notify(msg)\n        })\n    }\n}\nvar Observer=function(){\n    return {\n        notify:function(msg){\n            console.log(\"received: \"+msg);\n        }\n    }\n}\nvar subject=new Subject();\nvar observer0=new Observer();\nvar observer1=new Observer();\nvar observer2=new Observer();\nvar observer3=new Observer();\nsubject.subscribe(observer0);\nsubject.subscribe(observer1);\nsubject.subscribe(observer2);\nsubject.subscribe(observer3);\nsubject.notifyAll('all notified');\nsubject.notify(observer2,'asda');\n```\n\n## promise\n\n为解决回调函数噩梦而提出的写法，将回调函数的横向加载变成纵向加载。\n\n对象状态不受外界影响。三种状态：pending,resolved,rejected。只有异步操作的结果才能改变状态\n状态一旦改变，就不会再变。\n用Promise对象实现Ajax操作的例子\n\n```javascript\nvar getJSON=function(url){\n    var promise=new Promise(function(resolve,reject){\n        var client=new XMLHttpRequest();\n        client.open(\"GET\",url);\n        client.onreadystatechange=handler;\n        client.responseType=\"json\";\n        client.setRequestHeader(\"Accept\",\"application/json\");\n        client.send();\n        function handler(){\n            if(this.readyState!=4){\n                return;\n            }\n            if(this.status==200){\n                resolve(this.response);\n            }else{\n                reject(new Error(this.statusText));\n            }\n        }\n    });\n    return promise;\n}\n\ngetJSON('/posts.json').then(function(json){\n    console.log('Contents: '+json);\n},function(error){\n    console.error(error)\n})\n```\n\n再举一个需要多层回调的例子：假设每个步骤都是异步，并且依赖上一个步骤的结果，使用setTimeout来模拟异步操作。\n```javascript\n//输入n，表示该函数执行时间，结果为n+200,并且用于下一步的输入\nfunction takeLongTime(n){\n    return new Promise(resolve=>{\n        setTimeout(()=>resolve(n+200),n)\n    })\n}\n\nfunction step1(n){\n    console.log(`step1 with ${n}`);\n    return takeLongTime(n);\n}\n\nfunction step2(n){\n    console.log(`step2 with ${n}`);\n    return takeLongTime(n);\n}\n\nfunction step3(n){\n    console.log(`step3 with ${n}`);\n    return takeLongTime(n);\n}\n\n```\n\n如果使用Promise的方式将其3个步骤处理为链式操作，每一步都返回一个promise对象，将输出的结果作为下一步新的输入：\n\n```javascript\nfunction dolt(){\n    console.time('dolt');\n    const time1=300;\n    step1(time1)\n    .then(time2=>step2(time2))\n    .then(time3=>step3(time3))\n    .then(result=>{\n        console.log(`result is ${result}`);\n        console.timeEnd('dolt')\n    });\n}\ndolt();\n//输出结果为\nstep1 with 300\nstep2 with 500\nstep3 with 700\nresult is 900\ndolt: 1516.713ms\n```\n\n实际耗时跟我们计算的延迟时间300+500+700=1500ms差不多。但是对于长的链式操作来说，看起来是一堆then方法的堆砌，代码冗余，语义也不清楚，而且还是靠着箭头函数才使得代码略微简短一些。Promise还有一个痛点，就是传递参数太麻烦，尤其是需要传递多参数的情况下。\n\n## Generator函数\ngenerator是一个封装的异步任务，在需要暂停的地方，使用yield语句注明。如\n\n```javascript\nfunction* gen(x){\n    let y=yield x+2;\n    return y;\n}\nlet g=gen(1);\ng.next();\n//返回 {value: 3, done: false}\ng.next();\n//返回 {value: undefined, done: true}\n```\n\n调用generator函数返回的是内部的指针对象，调用next方法就会移动内部指针。Generator函数之所以能被用来处理异步操作，因为它可以暂停执行和恢复执行、函数体内外的数据交换和错误处理机制。\n\n针对前面多任务的例子，使用generator实现：\n```javascript\nfunction* dolt(){\n    console.time('dolt');\n    const time1=300;\n    const time2=yield step1(time1);\n    const time3=yield step2(time2);\n    const result=yield step3(time3);\n    console.log(`result is ${result}`);\n    console.timeEnd('dolt');\n}\n```\n\n但是 Generator 函数的执行必须靠执行器\n```javascript\nfunction spawn(genF) {\n  return new Promise(function(resolve, reject) {\n    var gen = genF();\n    function step(nextF) {\n      try {\n        var next = nextF();\n      } catch(e) {\n        return reject(e); \n      }\n      if(next.done) {\n        return resolve(next.value);\n      } \n      Promise.resolve(next.value).then(function(v) {\n        step(function() { return gen.next(v); });      \n      }, function(e) {\n        step(function() { return gen.throw(e); });\n      });\n    }\n    step(function() { return gen.next(undefined); });\n  });\n}\nspawn(dolt);\n\n```\n\n## async/await\nasync函数基于Generator又做了几点改进：\n\n- 内置执行器，将Generator函数和自动执行器进一步包装。\n- 语义更清楚，async表示函数中有异步操作，await表示等待着紧跟在后边的表达式的结果。\n- 适用性更广泛，await后面可以跟promise对象和原始类型的值(Generator中不支持)\n\n\n很多人都认为这是异步编程的终极解决方案，由此评价就可知道该方法有多优秀了。它基于Promise使用async/await来优化then链的调用,其实也是Generator函数的语法糖。 async 会将其后的函数（函数表达式或 Lambda）的返回值封装成一个 Promise 对象，而 await 会等待这个 Promise 完成，并将其 resolve 的结果返回出来。\n\nawait得到的就是返回值，其内部已经执行promise中resolve方法，然后将结果返回。使用async/await的方式重写前面的回调任务：\n\n```javascript\nasync function dolt(){\n    console.time('dolt');\n    const time1=300;\n    const time2=await step1(time1);\n    const time3=await step2(time2);\n    const result=await step3(time3);\n    console.log(`result is ${result}`);\n    console.timeEnd('dolt');\n}\n\ndolt();\n```\n\n功能还很新，属于ES7的语法，但使用Babel插件可以很好的转义。另外await只能用在async函数中，否则会报错。\n\n作者：RichardBillion\n链接：https://www.jianshu.com/p/6f91e7696b91\n来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","slug":"JS中的异步操作","published":1,"updated":"2020-07-24T01:56:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznx10018h5s6wnkoz22n","content":"<p>JS中异步编程的方法有：</p>\n<ul>\n<li>回调函数</li>\n<li>事件监听</li>\n<li>发布/订阅</li>\n<li>promise</li>\n<li>generator（ES6）</li>\n<li>async/await(ES7)</li>\n</ul>\n<h2 id=\"回调函数\"><a href=\"#回调函数\" class=\"headerlink\" title=\"回调函数\"></a>回调函数</h2><p>回调是异步编程中最基础的方法。举例一个简单的回调：在f1执行完之后再执行f2</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> func1=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">    (callback &amp;&amp; <span class=\"keyword\">typeof</span>(callback)===<span class=\"string\">'function'</span>) &amp;&amp; callback();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func1(func2);</span><br><span class=\"line\"><span class=\"keyword\">var</span> func2=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>异步回调中最常见的形式可能就是Ajax了：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">    url:<span class=\"string\">\"/getmsg\"</span>,</span><br><span class=\"line\">    type: <span class=\"string\">'GET'</span>,</span><br><span class=\"line\">    dataType: <span class=\"string\">'json'</span>,</span><br><span class=\"line\">    success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ret</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ret &amp;&amp; ret.status) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    error: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">xhr</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"事件监听\"><a href=\"#事件监听\" class=\"headerlink\" title=\"事件监听\"></a>事件监听</h2><p>通过事件机制，实现代码的解耦。js处理DOM交互就是采用的事件机制，我们这儿只是实现一些自定义的事件而已。JS中已经很好的支持了自定义事件，如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//新建一个事件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> event=<span class=\"keyword\">new</span> Event(<span class=\"string\">'Popup::Show'</span>);</span><br><span class=\"line\"><span class=\"comment\">//dispatch the event</span></span><br><span class=\"line\">elem1.dispatchEvent(event)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//listen for this event</span></span><br><span class=\"line\">elem2.addEventListener(<span class=\"string\">'Popup::Show'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>)</span>&#123;&#125;,<span class=\"literal\">false</span>)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"发布-订阅模式\"><a href=\"#发布-订阅模式\" class=\"headerlink\" title=\"发布-订阅模式\"></a>发布-订阅模式</h2><p>在系统中存在一个”信号中心”，当某个任务执行完成后向信号中心”发布”（publish）一个信号，其他任务可以向信号中心”订阅”（subscribe）这个信号，从而知道什么时候自己可以开始执行。简单实现如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//发布-订阅</span></span><br><span class=\"line\"><span class=\"comment\">//有个消息池，存放所有消息</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> pubsub = &#123;&#125;;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">myObj</span>) </span>&#123;</span><br><span class=\"line\">    topics = &#123;&#125;</span><br><span class=\"line\">    subId = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"comment\">//发布者接受参数(消息名称，参数)</span></span><br><span class=\"line\">    myObj.publish = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">topic, msg</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果发布的该消息没有订阅者，直接返回</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!topics[topic]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//对该消息的所有订阅者，遍历去执行各自的回调函数</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> subs = topics[topic]</span><br><span class=\"line\">            subs.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sub</span>) </span>&#123;</span><br><span class=\"line\">                sub.func(topic, msg)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"comment\">//订阅者接受参数：（消息名称，回调函数）</span></span><br><span class=\"line\">    myObj.subscribe = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">topic, func</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果订阅的该事件还未定义，初始化</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!topics[topic]) &#123;</span><br><span class=\"line\">            topics[topic] = []</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//使用不同的token来作为订阅者的索引</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> token = (++subId).toString()</span><br><span class=\"line\">        topics[topic].push(&#123;</span><br><span class=\"line\">                token: token,</span><br><span class=\"line\">                func: func</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> token</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    myObj.unsubscribe = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">token</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//对消息列表遍历查找该token是哪个消息中的哪个订阅者</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> t <span class=\"keyword\">in</span> topics) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果某个消息没有订阅者，直接返回</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!topics[t]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> &#125;</span><br><span class=\"line\">            topics[t].forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sub,index</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (sub.token === token) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//找到了，从订阅者的数组中去掉该订阅者</span></span><br><span class=\"line\">                    topics[t].splice(index, <span class=\"number\">1</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)(pubsub)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> sub1 = pubsub.subscribe(<span class=\"string\">'Msg::Name'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">topic, msg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"event is :\"</span> + topic + <span class=\"string\">\"; data is :\"</span> + msg)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> sub2 = pubsub.subscribe(<span class=\"string\">'Msg::Name'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">topic, msg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"this is another subscriber, data is :\"</span> + msg)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">pubsub.publish(<span class=\"string\">'Msg::Name'</span>, <span class=\"string\">'123'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">pubsub.unsubscribe(sub2)</span><br><span class=\"line\">pubsub.publish(<span class=\"string\">'Msg::Name'</span>, <span class=\"string\">'456'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>其中存储消息的结构用json可以表示为：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">topics = &#123;</span><br><span class=\"line\">    topic1: [&#123; <span class=\"attr\">token</span>: <span class=\"number\">1</span>, <span class=\"attr\">func</span>: callback1 &#125;, &#123; <span class=\"attr\">token</span>: <span class=\"number\">2</span>, <span class=\"attr\">func</span>: callback2 &#125;],</span><br><span class=\"line\">    topic2: [&#123; <span class=\"attr\">token</span>: <span class=\"number\">3</span>, <span class=\"attr\">func</span>: callback3 &#125;, &#123; <span class=\"attr\">token</span>: <span class=\"number\">4</span>, <span class=\"attr\">func</span>: callback4 &#125;],</span><br><span class=\"line\">    topic3: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>消息池的结构是发布订阅模式与事件监听模式的最大区别。当然，每个消息也可以看做是一个个的事件，topics对象就相当于一个事件处理中心，每个事件都有各自的订阅者。所以事件监听其实就是发布订阅模式的一个简化版本。而发布订阅模式的优点就是我们可以查看消息中心的信息，了解有多少信号，每个信号有多少订阅者。</p>\n<h2 id=\"再说一说观察者模式\"><a href=\"#再说一说观察者模式\" class=\"headerlink\" title=\"再说一说观察者模式\"></a>再说一说观察者模式</h2><p>很多情况下，我们都将观察者模式和发布-订阅模式混为一谈，因为都可用来进行异步通信，实现代码的解耦，而不再细究其不同，但是内部实现还是有很多不同的。</p>\n<ol>\n<li><p>整体模型的不同：发布订阅模式是靠信息池作为发布者和订阅者的中转站的，订阅者订阅的是信息池中的某个信息；而观察者模式是直接将订阅者订阅到发布者内部的，目标对象需要负责维护观察者，也就是观察者模式中订阅者是依赖发布者的。</p>\n</li>\n<li><p>触发回调的方式不同：发布-订阅模式中，订阅者通过监听特定消息来触发回调；而观察者模式是发布者暴露一个接口(方法)，当目标对象发生变化时调用此接口，以保持自身状态的及时改变。</p>\n</li>\n</ol>\n<p>观察者模式很好的应用是MVC架构，当数据模型更新时，视图也发生变化。从数据模型中将视图解耦出来，从而减少了依赖。但是当观察者数量上升时，性能会有显著下降。我们同样可以自己实现：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//观察者模式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Subject=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.observers=[];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Subject.prototype=&#123;</span><br><span class=\"line\">    subscribe:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">observer</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.observers.push(observer);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    unsubscribe:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">observer</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> index=<span class=\"keyword\">this</span>.observers.indexOf(observer);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index&gt;<span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.observers.splice(index,<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    notify:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">observer,msg</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> index=<span class=\"keyword\">this</span>.observers.indexOf(observer);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index&gt;<span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.observers[index].notify(msg)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    notifyAll:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.observers.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">observe,msg</span>)</span>&#123;</span><br><span class=\"line\">            observe.notify(msg)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Observer=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        notify:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"received: \"</span>+msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> subject=<span class=\"keyword\">new</span> Subject();</span><br><span class=\"line\"><span class=\"keyword\">var</span> observer0=<span class=\"keyword\">new</span> Observer();</span><br><span class=\"line\"><span class=\"keyword\">var</span> observer1=<span class=\"keyword\">new</span> Observer();</span><br><span class=\"line\"><span class=\"keyword\">var</span> observer2=<span class=\"keyword\">new</span> Observer();</span><br><span class=\"line\"><span class=\"keyword\">var</span> observer3=<span class=\"keyword\">new</span> Observer();</span><br><span class=\"line\">subject.subscribe(observer0);</span><br><span class=\"line\">subject.subscribe(observer1);</span><br><span class=\"line\">subject.subscribe(observer2);</span><br><span class=\"line\">subject.subscribe(observer3);</span><br><span class=\"line\">subject.notifyAll(<span class=\"string\">'all notified'</span>);</span><br><span class=\"line\">subject.notify(observer2,<span class=\"string\">'asda'</span>);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"promise\"><a href=\"#promise\" class=\"headerlink\" title=\"promise\"></a>promise</h2><p>为解决回调函数噩梦而提出的写法，将回调函数的横向加载变成纵向加载。</p>\n<p>对象状态不受外界影响。三种状态：pending,resolved,rejected。只有异步操作的结果才能改变状态<br>状态一旦改变，就不会再变。<br>用Promise对象实现Ajax操作的例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> getJSON=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> promise=<span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> client=<span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">        client.open(<span class=\"string\">\"GET\"</span>,url);</span><br><span class=\"line\">        client.onreadystatechange=handler;</span><br><span class=\"line\">        client.responseType=<span class=\"string\">\"json\"</span>;</span><br><span class=\"line\">        client.setRequestHeader(<span class=\"string\">\"Accept\"</span>,<span class=\"string\">\"application/json\"</span>);</span><br><span class=\"line\">        client.send();</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handler</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.readyState!=<span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.status==<span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">                resolve(<span class=\"keyword\">this</span>.response);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"keyword\">this</span>.statusText));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getJSON(<span class=\"string\">'/posts.json'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">json</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Contents: '</span>+json);</span><br><span class=\"line\">&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(error)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>再举一个需要多层回调的例子：假设每个步骤都是异步，并且依赖上一个步骤的结果，使用setTimeout来模拟异步操作。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//输入n，表示该函数执行时间，结果为n+200,并且用于下一步的输入</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">takeLongTime</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span>=&gt;</span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>resolve(n+<span class=\"number\">200</span>),n)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">step1</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`step1 with <span class=\"subst\">$&#123;n&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> takeLongTime(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">step2</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`step2 with <span class=\"subst\">$&#123;n&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> takeLongTime(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">step3</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`step3 with <span class=\"subst\">$&#123;n&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> takeLongTime(n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果使用Promise的方式将其3个步骤处理为链式操作，每一步都返回一个promise对象，将输出的结果作为下一步新的输入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dolt</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.time(<span class=\"string\">'dolt'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> time1=<span class=\"number\">300</span>;</span><br><span class=\"line\">    step1(time1)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">time2</span>=&gt;</span>step2(time2))</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">time3</span>=&gt;</span>step3(time3))</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">result</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`result is <span class=\"subst\">$&#123;result&#125;</span>`</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'dolt'</span>)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dolt();</span><br><span class=\"line\"><span class=\"comment\">//输出结果为</span></span><br><span class=\"line\">step1 <span class=\"keyword\">with</span> <span class=\"number\">300</span></span><br><span class=\"line\">step2 <span class=\"keyword\">with</span> <span class=\"number\">500</span></span><br><span class=\"line\">step3 <span class=\"keyword\">with</span> <span class=\"number\">700</span></span><br><span class=\"line\">result is <span class=\"number\">900</span></span><br><span class=\"line\">dolt: <span class=\"number\">1516.713</span>ms</span><br></pre></td></tr></table></figure>\n<p>实际耗时跟我们计算的延迟时间300+500+700=1500ms差不多。但是对于长的链式操作来说，看起来是一堆then方法的堆砌，代码冗余，语义也不清楚，而且还是靠着箭头函数才使得代码略微简短一些。Promise还有一个痛点，就是传递参数太麻烦，尤其是需要传递多参数的情况下。</p>\n<h2 id=\"Generator函数\"><a href=\"#Generator函数\" class=\"headerlink\" title=\"Generator函数\"></a>Generator函数</h2><p>generator是一个封装的异步任务，在需要暂停的地方，使用yield语句注明。如</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> y=<span class=\"keyword\">yield</span> x+<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> g=gen(<span class=\"number\">1</span>);</span><br><span class=\"line\">g.next();</span><br><span class=\"line\"><span class=\"comment\">//返回 &#123;value: 3, done: false&#125;</span></span><br><span class=\"line\">g.next();</span><br><span class=\"line\"><span class=\"comment\">//返回 &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>\n<p>调用generator函数返回的是内部的指针对象，调用next方法就会移动内部指针。Generator函数之所以能被用来处理异步操作，因为它可以暂停执行和恢复执行、函数体内外的数据交换和错误处理机制。</p>\n<p>针对前面多任务的例子，使用generator实现：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">dolt</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.time(<span class=\"string\">'dolt'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> time1=<span class=\"number\">300</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> time2=<span class=\"keyword\">yield</span> step1(time1);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> time3=<span class=\"keyword\">yield</span> step2(time2);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result=<span class=\"keyword\">yield</span> step3(time3);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`result is <span class=\"subst\">$&#123;result&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'dolt'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>但是 Generator 函数的执行必须靠执行器<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">spawn</span>(<span class=\"params\">genF</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> gen = genF();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">step</span>(<span class=\"params\">nextF</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> next = nextF();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> reject(e); </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(next.done) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resolve(next.value);</span><br><span class=\"line\">      &#125; </span><br><span class=\"line\">      <span class=\"built_in\">Promise</span>.resolve(next.value).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\">        step(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> gen.next(v); &#125;);      </span><br><span class=\"line\">      &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        step(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> gen.throw(e); &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    step(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> gen.next(<span class=\"literal\">undefined</span>); &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">spawn(dolt);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"async-await\"><a href=\"#async-await\" class=\"headerlink\" title=\"async/await\"></a>async/await</h2><p>async函数基于Generator又做了几点改进：</p>\n<ul>\n<li>内置执行器，将Generator函数和自动执行器进一步包装。</li>\n<li>语义更清楚，async表示函数中有异步操作，await表示等待着紧跟在后边的表达式的结果。</li>\n<li>适用性更广泛，await后面可以跟promise对象和原始类型的值(Generator中不支持)</li>\n</ul>\n<p>很多人都认为这是异步编程的终极解决方案，由此评价就可知道该方法有多优秀了。它基于Promise使用async/await来优化then链的调用,其实也是Generator函数的语法糖。 async 会将其后的函数（函数表达式或 Lambda）的返回值封装成一个 Promise 对象，而 await 会等待这个 Promise 完成，并将其 resolve 的结果返回出来。</p>\n<p>await得到的就是返回值，其内部已经执行promise中resolve方法，然后将结果返回。使用async/await的方式重写前面的回调任务：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dolt</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.time(<span class=\"string\">'dolt'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> time1=<span class=\"number\">300</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> time2=<span class=\"keyword\">await</span> step1(time1);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> time3=<span class=\"keyword\">await</span> step2(time2);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result=<span class=\"keyword\">await</span> step3(time3);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`result is <span class=\"subst\">$&#123;result&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'dolt'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dolt();</span><br></pre></td></tr></table></figure>\n<p>功能还很新，属于ES7的语法，但使用Babel插件可以很好的转义。另外await只能用在async函数中，否则会报错。</p>\n<p>作者：RichardBillion<br>链接：<a href=\"https://www.jianshu.com/p/6f91e7696b91\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/6f91e7696b91</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>JS中异步编程的方法有：</p>\n<ul>\n<li>回调函数</li>\n<li>事件监听</li>\n<li>发布/订阅</li>\n<li>promise</li>\n<li>generator（ES6）</li>\n<li>async/await(ES7)</li>\n</ul>\n<h2 id=\"回调函数\"><a href=\"#回调函数\" class=\"headerlink\" title=\"回调函数\"></a>回调函数</h2><p>回调是异步编程中最基础的方法。举例一个简单的回调：在f1执行完之后再执行f2</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> func1=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">    (callback &amp;&amp; <span class=\"keyword\">typeof</span>(callback)===<span class=\"string\">'function'</span>) &amp;&amp; callback();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func1(func2);</span><br><span class=\"line\"><span class=\"keyword\">var</span> func2=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>异步回调中最常见的形式可能就是Ajax了：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">    url:<span class=\"string\">\"/getmsg\"</span>,</span><br><span class=\"line\">    type: <span class=\"string\">'GET'</span>,</span><br><span class=\"line\">    dataType: <span class=\"string\">'json'</span>,</span><br><span class=\"line\">    success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ret</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ret &amp;&amp; ret.status) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    error: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">xhr</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"事件监听\"><a href=\"#事件监听\" class=\"headerlink\" title=\"事件监听\"></a>事件监听</h2><p>通过事件机制，实现代码的解耦。js处理DOM交互就是采用的事件机制，我们这儿只是实现一些自定义的事件而已。JS中已经很好的支持了自定义事件，如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//新建一个事件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> event=<span class=\"keyword\">new</span> Event(<span class=\"string\">'Popup::Show'</span>);</span><br><span class=\"line\"><span class=\"comment\">//dispatch the event</span></span><br><span class=\"line\">elem1.dispatchEvent(event)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//listen for this event</span></span><br><span class=\"line\">elem2.addEventListener(<span class=\"string\">'Popup::Show'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>)</span>&#123;&#125;,<span class=\"literal\">false</span>)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"发布-订阅模式\"><a href=\"#发布-订阅模式\" class=\"headerlink\" title=\"发布-订阅模式\"></a>发布-订阅模式</h2><p>在系统中存在一个”信号中心”，当某个任务执行完成后向信号中心”发布”（publish）一个信号，其他任务可以向信号中心”订阅”（subscribe）这个信号，从而知道什么时候自己可以开始执行。简单实现如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//发布-订阅</span></span><br><span class=\"line\"><span class=\"comment\">//有个消息池，存放所有消息</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> pubsub = &#123;&#125;;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">myObj</span>) </span>&#123;</span><br><span class=\"line\">    topics = &#123;&#125;</span><br><span class=\"line\">    subId = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"comment\">//发布者接受参数(消息名称，参数)</span></span><br><span class=\"line\">    myObj.publish = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">topic, msg</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果发布的该消息没有订阅者，直接返回</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!topics[topic]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//对该消息的所有订阅者，遍历去执行各自的回调函数</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> subs = topics[topic]</span><br><span class=\"line\">            subs.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sub</span>) </span>&#123;</span><br><span class=\"line\">                sub.func(topic, msg)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"comment\">//订阅者接受参数：（消息名称，回调函数）</span></span><br><span class=\"line\">    myObj.subscribe = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">topic, func</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果订阅的该事件还未定义，初始化</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!topics[topic]) &#123;</span><br><span class=\"line\">            topics[topic] = []</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//使用不同的token来作为订阅者的索引</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> token = (++subId).toString()</span><br><span class=\"line\">        topics[topic].push(&#123;</span><br><span class=\"line\">                token: token,</span><br><span class=\"line\">                func: func</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> token</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    myObj.unsubscribe = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">token</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//对消息列表遍历查找该token是哪个消息中的哪个订阅者</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> t <span class=\"keyword\">in</span> topics) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果某个消息没有订阅者，直接返回</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!topics[t]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> &#125;</span><br><span class=\"line\">            topics[t].forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sub,index</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (sub.token === token) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//找到了，从订阅者的数组中去掉该订阅者</span></span><br><span class=\"line\">                    topics[t].splice(index, <span class=\"number\">1</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)(pubsub)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> sub1 = pubsub.subscribe(<span class=\"string\">'Msg::Name'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">topic, msg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"event is :\"</span> + topic + <span class=\"string\">\"; data is :\"</span> + msg)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> sub2 = pubsub.subscribe(<span class=\"string\">'Msg::Name'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">topic, msg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"this is another subscriber, data is :\"</span> + msg)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">pubsub.publish(<span class=\"string\">'Msg::Name'</span>, <span class=\"string\">'123'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">pubsub.unsubscribe(sub2)</span><br><span class=\"line\">pubsub.publish(<span class=\"string\">'Msg::Name'</span>, <span class=\"string\">'456'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>其中存储消息的结构用json可以表示为：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">topics = &#123;</span><br><span class=\"line\">    topic1: [&#123; <span class=\"attr\">token</span>: <span class=\"number\">1</span>, <span class=\"attr\">func</span>: callback1 &#125;, &#123; <span class=\"attr\">token</span>: <span class=\"number\">2</span>, <span class=\"attr\">func</span>: callback2 &#125;],</span><br><span class=\"line\">    topic2: [&#123; <span class=\"attr\">token</span>: <span class=\"number\">3</span>, <span class=\"attr\">func</span>: callback3 &#125;, &#123; <span class=\"attr\">token</span>: <span class=\"number\">4</span>, <span class=\"attr\">func</span>: callback4 &#125;],</span><br><span class=\"line\">    topic3: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>消息池的结构是发布订阅模式与事件监听模式的最大区别。当然，每个消息也可以看做是一个个的事件，topics对象就相当于一个事件处理中心，每个事件都有各自的订阅者。所以事件监听其实就是发布订阅模式的一个简化版本。而发布订阅模式的优点就是我们可以查看消息中心的信息，了解有多少信号，每个信号有多少订阅者。</p>\n<h2 id=\"再说一说观察者模式\"><a href=\"#再说一说观察者模式\" class=\"headerlink\" title=\"再说一说观察者模式\"></a>再说一说观察者模式</h2><p>很多情况下，我们都将观察者模式和发布-订阅模式混为一谈，因为都可用来进行异步通信，实现代码的解耦，而不再细究其不同，但是内部实现还是有很多不同的。</p>\n<ol>\n<li><p>整体模型的不同：发布订阅模式是靠信息池作为发布者和订阅者的中转站的，订阅者订阅的是信息池中的某个信息；而观察者模式是直接将订阅者订阅到发布者内部的，目标对象需要负责维护观察者，也就是观察者模式中订阅者是依赖发布者的。</p>\n</li>\n<li><p>触发回调的方式不同：发布-订阅模式中，订阅者通过监听特定消息来触发回调；而观察者模式是发布者暴露一个接口(方法)，当目标对象发生变化时调用此接口，以保持自身状态的及时改变。</p>\n</li>\n</ol>\n<p>观察者模式很好的应用是MVC架构，当数据模型更新时，视图也发生变化。从数据模型中将视图解耦出来，从而减少了依赖。但是当观察者数量上升时，性能会有显著下降。我们同样可以自己实现：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//观察者模式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Subject=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.observers=[];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Subject.prototype=&#123;</span><br><span class=\"line\">    subscribe:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">observer</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.observers.push(observer);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    unsubscribe:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">observer</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> index=<span class=\"keyword\">this</span>.observers.indexOf(observer);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index&gt;<span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.observers.splice(index,<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    notify:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">observer,msg</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> index=<span class=\"keyword\">this</span>.observers.indexOf(observer);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index&gt;<span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.observers[index].notify(msg)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    notifyAll:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.observers.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">observe,msg</span>)</span>&#123;</span><br><span class=\"line\">            observe.notify(msg)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Observer=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        notify:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"received: \"</span>+msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> subject=<span class=\"keyword\">new</span> Subject();</span><br><span class=\"line\"><span class=\"keyword\">var</span> observer0=<span class=\"keyword\">new</span> Observer();</span><br><span class=\"line\"><span class=\"keyword\">var</span> observer1=<span class=\"keyword\">new</span> Observer();</span><br><span class=\"line\"><span class=\"keyword\">var</span> observer2=<span class=\"keyword\">new</span> Observer();</span><br><span class=\"line\"><span class=\"keyword\">var</span> observer3=<span class=\"keyword\">new</span> Observer();</span><br><span class=\"line\">subject.subscribe(observer0);</span><br><span class=\"line\">subject.subscribe(observer1);</span><br><span class=\"line\">subject.subscribe(observer2);</span><br><span class=\"line\">subject.subscribe(observer3);</span><br><span class=\"line\">subject.notifyAll(<span class=\"string\">'all notified'</span>);</span><br><span class=\"line\">subject.notify(observer2,<span class=\"string\">'asda'</span>);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"promise\"><a href=\"#promise\" class=\"headerlink\" title=\"promise\"></a>promise</h2><p>为解决回调函数噩梦而提出的写法，将回调函数的横向加载变成纵向加载。</p>\n<p>对象状态不受外界影响。三种状态：pending,resolved,rejected。只有异步操作的结果才能改变状态<br>状态一旦改变，就不会再变。<br>用Promise对象实现Ajax操作的例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> getJSON=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> promise=<span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> client=<span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">        client.open(<span class=\"string\">\"GET\"</span>,url);</span><br><span class=\"line\">        client.onreadystatechange=handler;</span><br><span class=\"line\">        client.responseType=<span class=\"string\">\"json\"</span>;</span><br><span class=\"line\">        client.setRequestHeader(<span class=\"string\">\"Accept\"</span>,<span class=\"string\">\"application/json\"</span>);</span><br><span class=\"line\">        client.send();</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handler</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.readyState!=<span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.status==<span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">                resolve(<span class=\"keyword\">this</span>.response);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"keyword\">this</span>.statusText));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getJSON(<span class=\"string\">'/posts.json'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">json</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Contents: '</span>+json);</span><br><span class=\"line\">&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(error)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>再举一个需要多层回调的例子：假设每个步骤都是异步，并且依赖上一个步骤的结果，使用setTimeout来模拟异步操作。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//输入n，表示该函数执行时间，结果为n+200,并且用于下一步的输入</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">takeLongTime</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span>=&gt;</span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>resolve(n+<span class=\"number\">200</span>),n)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">step1</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`step1 with <span class=\"subst\">$&#123;n&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> takeLongTime(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">step2</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`step2 with <span class=\"subst\">$&#123;n&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> takeLongTime(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">step3</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`step3 with <span class=\"subst\">$&#123;n&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> takeLongTime(n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果使用Promise的方式将其3个步骤处理为链式操作，每一步都返回一个promise对象，将输出的结果作为下一步新的输入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dolt</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.time(<span class=\"string\">'dolt'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> time1=<span class=\"number\">300</span>;</span><br><span class=\"line\">    step1(time1)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">time2</span>=&gt;</span>step2(time2))</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">time3</span>=&gt;</span>step3(time3))</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">result</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`result is <span class=\"subst\">$&#123;result&#125;</span>`</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'dolt'</span>)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dolt();</span><br><span class=\"line\"><span class=\"comment\">//输出结果为</span></span><br><span class=\"line\">step1 <span class=\"keyword\">with</span> <span class=\"number\">300</span></span><br><span class=\"line\">step2 <span class=\"keyword\">with</span> <span class=\"number\">500</span></span><br><span class=\"line\">step3 <span class=\"keyword\">with</span> <span class=\"number\">700</span></span><br><span class=\"line\">result is <span class=\"number\">900</span></span><br><span class=\"line\">dolt: <span class=\"number\">1516.713</span>ms</span><br></pre></td></tr></table></figure>\n<p>实际耗时跟我们计算的延迟时间300+500+700=1500ms差不多。但是对于长的链式操作来说，看起来是一堆then方法的堆砌，代码冗余，语义也不清楚，而且还是靠着箭头函数才使得代码略微简短一些。Promise还有一个痛点，就是传递参数太麻烦，尤其是需要传递多参数的情况下。</p>\n<h2 id=\"Generator函数\"><a href=\"#Generator函数\" class=\"headerlink\" title=\"Generator函数\"></a>Generator函数</h2><p>generator是一个封装的异步任务，在需要暂停的地方，使用yield语句注明。如</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> y=<span class=\"keyword\">yield</span> x+<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> g=gen(<span class=\"number\">1</span>);</span><br><span class=\"line\">g.next();</span><br><span class=\"line\"><span class=\"comment\">//返回 &#123;value: 3, done: false&#125;</span></span><br><span class=\"line\">g.next();</span><br><span class=\"line\"><span class=\"comment\">//返回 &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>\n<p>调用generator函数返回的是内部的指针对象，调用next方法就会移动内部指针。Generator函数之所以能被用来处理异步操作，因为它可以暂停执行和恢复执行、函数体内外的数据交换和错误处理机制。</p>\n<p>针对前面多任务的例子，使用generator实现：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">dolt</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.time(<span class=\"string\">'dolt'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> time1=<span class=\"number\">300</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> time2=<span class=\"keyword\">yield</span> step1(time1);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> time3=<span class=\"keyword\">yield</span> step2(time2);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result=<span class=\"keyword\">yield</span> step3(time3);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`result is <span class=\"subst\">$&#123;result&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'dolt'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>但是 Generator 函数的执行必须靠执行器<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">spawn</span>(<span class=\"params\">genF</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> gen = genF();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">step</span>(<span class=\"params\">nextF</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> next = nextF();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> reject(e); </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(next.done) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resolve(next.value);</span><br><span class=\"line\">      &#125; </span><br><span class=\"line\">      <span class=\"built_in\">Promise</span>.resolve(next.value).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\">        step(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> gen.next(v); &#125;);      </span><br><span class=\"line\">      &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        step(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> gen.throw(e); &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    step(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> gen.next(<span class=\"literal\">undefined</span>); &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">spawn(dolt);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"async-await\"><a href=\"#async-await\" class=\"headerlink\" title=\"async/await\"></a>async/await</h2><p>async函数基于Generator又做了几点改进：</p>\n<ul>\n<li>内置执行器，将Generator函数和自动执行器进一步包装。</li>\n<li>语义更清楚，async表示函数中有异步操作，await表示等待着紧跟在后边的表达式的结果。</li>\n<li>适用性更广泛，await后面可以跟promise对象和原始类型的值(Generator中不支持)</li>\n</ul>\n<p>很多人都认为这是异步编程的终极解决方案，由此评价就可知道该方法有多优秀了。它基于Promise使用async/await来优化then链的调用,其实也是Generator函数的语法糖。 async 会将其后的函数（函数表达式或 Lambda）的返回值封装成一个 Promise 对象，而 await 会等待这个 Promise 完成，并将其 resolve 的结果返回出来。</p>\n<p>await得到的就是返回值，其内部已经执行promise中resolve方法，然后将结果返回。使用async/await的方式重写前面的回调任务：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dolt</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.time(<span class=\"string\">'dolt'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> time1=<span class=\"number\">300</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> time2=<span class=\"keyword\">await</span> step1(time1);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> time3=<span class=\"keyword\">await</span> step2(time2);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result=<span class=\"keyword\">await</span> step3(time3);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`result is <span class=\"subst\">$&#123;result&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'dolt'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dolt();</span><br></pre></td></tr></table></figure>\n<p>功能还很新，属于ES7的语法，但使用Babel插件可以很好的转义。另外await只能用在async函数中，否则会报错。</p>\n<p>作者：RichardBillion<br>链接：<a href=\"https://www.jianshu.com/p/6f91e7696b91\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/6f91e7696b91</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n"},{"title":"JS原始值转换算法---toPrimitive()","originContent":"","toc":false,"date":"2020-07-16T02:58:44.000Z","_content":"\n在js中，想要将对象转换成原始值，必然会调用toPrimitive()内部函数，那么它是如何工作的呢？\n\n该函数形式如下：\n\n```javascript\ntoPrimitive(input,preferedType?)\n```\n\ninput是输入的值，preferedType是期望转换的类型，他可以是字符串，也可以是数字。\n\n如果转换的类型是number，会执行以下步骤：\n\n1. 如果input是原始值，直接返回这个值；\n2. 否则，如果input是对象，调用input.valueOf()，如果结果是原始值，返回结果；\n3. 否则，调用input.toString()。如果结果是原始值，返回结果；\n4. 否则，抛出错误。\n\n如果转换的类型是String，2和3会交换执行，即先执行toString()方法。\n\n你也可以省略preferedType，此时，日期会被认为是字符串，而其他的值会被当做Number。\n\n综上所述，会有以下计算结果：\n```javascript\n[]+[]\n\"\"\n```\n\n加号操作符会将preferedType看成Number，调用ES内部的toPrimitive(input，Number)方法，得到空字符串\n\n```javascript\n[]+{}\n\"[object Object]\"\n```\n 最终会调用双方的toString()方法，再做字符串加法\n```javascript\n{}+[]\n0\n```\n但是空对象加空数组就不一样了，加号运算符的定义是这样的：如果其中一个是字符串，另一个也会被转换为字符串，否则两个运算数都被转换为数字。而同时，javascript有这样的特性，如果{}既可以被认为是代码块，又可以被认为是对象字面量，那么js会把他当做代码块来看待。\n\n这就很好解释了，{}被当做了代码块，只有+[]，根据加法的定义，被转换为0，就得到了结果。\n\n在操作符中，==，排序运算符，加减乘除，在对非原始值进行操作时，都会调用内部的toPrimitive()方法","source":"_posts/JS原始值转换算法-toPrimitive.md","raw":"---\ntitle: JS原始值转换算法---toPrimitive()\ntags:\n  - 知识点备忘\n  - javascript\noriginContent: ''\ncategories:\n  - Web开发\ntoc: false\ndate: 2020-07-16 10:58:44\n---\n\n在js中，想要将对象转换成原始值，必然会调用toPrimitive()内部函数，那么它是如何工作的呢？\n\n该函数形式如下：\n\n```javascript\ntoPrimitive(input,preferedType?)\n```\n\ninput是输入的值，preferedType是期望转换的类型，他可以是字符串，也可以是数字。\n\n如果转换的类型是number，会执行以下步骤：\n\n1. 如果input是原始值，直接返回这个值；\n2. 否则，如果input是对象，调用input.valueOf()，如果结果是原始值，返回结果；\n3. 否则，调用input.toString()。如果结果是原始值，返回结果；\n4. 否则，抛出错误。\n\n如果转换的类型是String，2和3会交换执行，即先执行toString()方法。\n\n你也可以省略preferedType，此时，日期会被认为是字符串，而其他的值会被当做Number。\n\n综上所述，会有以下计算结果：\n```javascript\n[]+[]\n\"\"\n```\n\n加号操作符会将preferedType看成Number，调用ES内部的toPrimitive(input，Number)方法，得到空字符串\n\n```javascript\n[]+{}\n\"[object Object]\"\n```\n 最终会调用双方的toString()方法，再做字符串加法\n```javascript\n{}+[]\n0\n```\n但是空对象加空数组就不一样了，加号运算符的定义是这样的：如果其中一个是字符串，另一个也会被转换为字符串，否则两个运算数都被转换为数字。而同时，javascript有这样的特性，如果{}既可以被认为是代码块，又可以被认为是对象字面量，那么js会把他当做代码块来看待。\n\n这就很好解释了，{}被当做了代码块，只有+[]，根据加法的定义，被转换为0，就得到了结果。\n\n在操作符中，==，排序运算符，加减乘除，在对非原始值进行操作时，都会调用内部的toPrimitive()方法","slug":"JS原始值转换算法-toPrimitive","published":1,"updated":"2020-07-16T02:58:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznx3001bh5s6bhc0i8i5","content":"<p>在js中，想要将对象转换成原始值，必然会调用toPrimitive()内部函数，那么它是如何工作的呢？</p>\n<p>该函数形式如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">toPrimitive(input,preferedType?)</span><br></pre></td></tr></table></figure>\n<p>input是输入的值，preferedType是期望转换的类型，他可以是字符串，也可以是数字。</p>\n<p>如果转换的类型是number，会执行以下步骤：</p>\n<ol>\n<li>如果input是原始值，直接返回这个值；</li>\n<li>否则，如果input是对象，调用input.valueOf()，如果结果是原始值，返回结果；</li>\n<li>否则，调用input.toString()。如果结果是原始值，返回结果；</li>\n<li>否则，抛出错误。</li>\n</ol>\n<p>如果转换的类型是String，2和3会交换执行，即先执行toString()方法。</p>\n<p>你也可以省略preferedType，此时，日期会被认为是字符串，而其他的值会被当做Number。</p>\n<p>综上所述，会有以下计算结果：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[]+[]</span><br><span class=\"line\"><span class=\"string\">\"\"</span></span><br></pre></td></tr></table></figure></p>\n<p>加号操作符会将preferedType看成Number，调用ES内部的toPrimitive(input，Number)方法，得到空字符串</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[]+&#123;&#125;</span><br><span class=\"line\"><span class=\"string\">\"[object Object]\"</span></span><br></pre></td></tr></table></figure>\n<p> 最终会调用双方的toString()方法，再做字符串加法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#125;+[]</span><br><span class=\"line\"><span class=\"number\">0</span></span><br></pre></td></tr></table></figure></p>\n<p>但是空对象加空数组就不一样了，加号运算符的定义是这样的：如果其中一个是字符串，另一个也会被转换为字符串，否则两个运算数都被转换为数字。而同时，javascript有这样的特性，如果{}既可以被认为是代码块，又可以被认为是对象字面量，那么js会把他当做代码块来看待。</p>\n<p>这就很好解释了，{}被当做了代码块，只有+[]，根据加法的定义，被转换为0，就得到了结果。</p>\n<p>在操作符中，==，排序运算符，加减乘除，在对非原始值进行操作时，都会调用内部的toPrimitive()方法</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在js中，想要将对象转换成原始值，必然会调用toPrimitive()内部函数，那么它是如何工作的呢？</p>\n<p>该函数形式如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">toPrimitive(input,preferedType?)</span><br></pre></td></tr></table></figure>\n<p>input是输入的值，preferedType是期望转换的类型，他可以是字符串，也可以是数字。</p>\n<p>如果转换的类型是number，会执行以下步骤：</p>\n<ol>\n<li>如果input是原始值，直接返回这个值；</li>\n<li>否则，如果input是对象，调用input.valueOf()，如果结果是原始值，返回结果；</li>\n<li>否则，调用input.toString()。如果结果是原始值，返回结果；</li>\n<li>否则，抛出错误。</li>\n</ol>\n<p>如果转换的类型是String，2和3会交换执行，即先执行toString()方法。</p>\n<p>你也可以省略preferedType，此时，日期会被认为是字符串，而其他的值会被当做Number。</p>\n<p>综上所述，会有以下计算结果：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[]+[]</span><br><span class=\"line\"><span class=\"string\">\"\"</span></span><br></pre></td></tr></table></figure></p>\n<p>加号操作符会将preferedType看成Number，调用ES内部的toPrimitive(input，Number)方法，得到空字符串</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[]+&#123;&#125;</span><br><span class=\"line\"><span class=\"string\">\"[object Object]\"</span></span><br></pre></td></tr></table></figure>\n<p> 最终会调用双方的toString()方法，再做字符串加法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#125;+[]</span><br><span class=\"line\"><span class=\"number\">0</span></span><br></pre></td></tr></table></figure></p>\n<p>但是空对象加空数组就不一样了，加号运算符的定义是这样的：如果其中一个是字符串，另一个也会被转换为字符串，否则两个运算数都被转换为数字。而同时，javascript有这样的特性，如果{}既可以被认为是代码块，又可以被认为是对象字面量，那么js会把他当做代码块来看待。</p>\n<p>这就很好解释了，{}被当做了代码块，只有+[]，根据加法的定义，被转换为0，就得到了结果。</p>\n<p>在操作符中，==，排序运算符，加减乘除，在对非原始值进行操作时，都会调用内部的toPrimitive()方法</p>\n"},{"title":"JavaScript判断知否支持h5 video标签","toc":false,"date":"2017-10-27T06:36:10.000Z","_content":"\n也就一行代码：\n\n```\n!!document.createElement('video').canPlayType\n```\n\n记下来做个备忘\n","source":"_posts/JavaScript判断知否支持h5-video标签.md","raw":"---\ntitle: JavaScript判断知否支持h5 video标签\ntags:\n  - javascript\ncategories:\n  - Web开发\ntoc: false\ndate: 2017-10-27 14:36:10\n---\n\n也就一行代码：\n\n```\n!!document.createElement('video').canPlayType\n```\n\n记下来做个备忘\n","slug":"JavaScript判断知否支持h5-video标签","published":1,"updated":"2019-11-07T02:17:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznx5001gh5s6447cg23w","content":"<p>也就一行代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!!document.createElement(&apos;video&apos;).canPlayType</span><br></pre></td></tr></table></figure>\n<p>记下来做个备忘</p>\n","site":{"data":{}},"excerpt":"","more":"<p>也就一行代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!!document.createElement(&apos;video&apos;).canPlayType</span><br></pre></td></tr></table></figure>\n<p>记下来做个备忘</p>\n"},{"title":"Jenkins定时构建,轮询SCM设置","toc":false,"date":"2019-08-19T06:44:33.000Z","_content":"\n![image.png](http://blogimage.houjiyi.com/FkFfiapXNN013Hc1qHZYz_82e7zF)\n\n一、定时构建：不管SVN或Git中数据有无变化，均执行定时化的构建任务 ；\n\n二、轮询SCM：只要SVN或Git中数据有更新，则执行构建任务；\n\n三、构建语法说明：\n\n首先格式为：* * * * *（五个星）；\n第一个表示分钟，取值0~59\n第二个表示小时，取值0~23\n第三个表示一个月的第几天，取值1~31\n第四个表示第几月，取值1~12\n第五个*表示一周中的第几天，取值0~7，其中0和7代表的都是周日\n使用举例：\n每隔1分钟检查一次源码: * * * * * \n每5分钟执行一次: */5 * * * *\n每天20点执行定时build: 0 20 * * *\n\n四、定时构建和轮询SCM使用互不冲突，具体如何组合，需要根据项目情况合理配置；\n","source":"_posts/Jenkins定时构建-轮询SCM设置.md","raw":"---\ntitle: 'Jenkins定时构建,轮询SCM设置'\ntags:\n  - jenkins\ncategories:\n  - Web开发\ntoc: false\ndate: 2019-08-19 14:44:33\n---\n\n![image.png](http://blogimage.houjiyi.com/FkFfiapXNN013Hc1qHZYz_82e7zF)\n\n一、定时构建：不管SVN或Git中数据有无变化，均执行定时化的构建任务 ；\n\n二、轮询SCM：只要SVN或Git中数据有更新，则执行构建任务；\n\n三、构建语法说明：\n\n首先格式为：* * * * *（五个星）；\n第一个表示分钟，取值0~59\n第二个表示小时，取值0~23\n第三个表示一个月的第几天，取值1~31\n第四个表示第几月，取值1~12\n第五个*表示一周中的第几天，取值0~7，其中0和7代表的都是周日\n使用举例：\n每隔1分钟检查一次源码: * * * * * \n每5分钟执行一次: */5 * * * *\n每天20点执行定时build: 0 20 * * *\n\n四、定时构建和轮询SCM使用互不冲突，具体如何组合，需要根据项目情况合理配置；\n","slug":"Jenkins定时构建-轮询SCM设置","published":1,"updated":"2019-11-07T02:17:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznx8001jh5s6c2tbo3yj","content":"<p><img src=\"http://blogimage.houjiyi.com/FkFfiapXNN013Hc1qHZYz_82e7zF\" alt=\"image.png\"></p>\n<p>一、定时构建：不管SVN或Git中数据有无变化，均执行定时化的构建任务 ；</p>\n<p>二、轮询SCM：只要SVN或Git中数据有更新，则执行构建任务；</p>\n<p>三、构建语法说明：</p>\n<p>首先格式为：<em> </em> <em> </em> <em>（五个星）；<br>第一个表示分钟，取值0~59<br>第二个表示小时，取值0~23<br>第三个表示一个月的第几天，取值1~31<br>第四个表示第几月，取值1~12<br>第五个</em>表示一周中的第几天，取值0~7，其中0和7代表的都是周日<br>使用举例：<br>每隔1分钟检查一次源码: <em> </em> <em> </em> <em><br>每5分钟执行一次: </em>/5 <em> </em> <em> </em><br>每天20点执行定时build: 0 20 <em> </em> *</p>\n<p>四、定时构建和轮询SCM使用互不冲突，具体如何组合，需要根据项目情况合理配置；</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://blogimage.houjiyi.com/FkFfiapXNN013Hc1qHZYz_82e7zF\" alt=\"image.png\"></p>\n<p>一、定时构建：不管SVN或Git中数据有无变化，均执行定时化的构建任务 ；</p>\n<p>二、轮询SCM：只要SVN或Git中数据有更新，则执行构建任务；</p>\n<p>三、构建语法说明：</p>\n<p>首先格式为：<em> </em> <em> </em> <em>（五个星）；<br>第一个表示分钟，取值0~59<br>第二个表示小时，取值0~23<br>第三个表示一个月的第几天，取值1~31<br>第四个表示第几月，取值1~12<br>第五个</em>表示一周中的第几天，取值0~7，其中0和7代表的都是周日<br>使用举例：<br>每隔1分钟检查一次源码: <em> </em> <em> </em> <em><br>每5分钟执行一次: </em>/5 <em> </em> <em> </em><br>每天20点执行定时build: 0 20 <em> </em> *</p>\n<p>四、定时构建和轮询SCM使用互不冲突，具体如何组合，需要根据项目情况合理配置；</p>\n"},{"title":"Linux 网络速度测试工具","toc":false,"date":"2017-12-26T07:28:52.000Z","_content":"\n只需要安装一个工具即可:\n\n```\nwget https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py\n\nchmod a+rx speedtest.py\n\nmv speedtest.py /usr/local/bin/speedtest-cli\n\nchown root:root /usr/local/bin/speedtest-cli\n\n```\n","source":"_posts/Linux-网络速度测试工具.md","raw":"---\ntitle: Linux 网络速度测试工具\ntags:\n  - linux\ncategories:\n  - 后端开发\ntoc: false\ndate: 2017-12-26 15:28:52\n---\n\n只需要安装一个工具即可:\n\n```\nwget https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py\n\nchmod a+rx speedtest.py\n\nmv speedtest.py /usr/local/bin/speedtest-cli\n\nchown root:root /usr/local/bin/speedtest-cli\n\n```\n","slug":"Linux-网络速度测试工具","published":1,"updated":"2019-11-07T02:17:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznxb001oh5s6g5kdu457","content":"<p>只需要安装一个工具即可:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py</span><br><span class=\"line\"></span><br><span class=\"line\">chmod a+rx speedtest.py</span><br><span class=\"line\"></span><br><span class=\"line\">mv speedtest.py /usr/local/bin/speedtest-cli</span><br><span class=\"line\"></span><br><span class=\"line\">chown root:root /usr/local/bin/speedtest-cli</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>只需要安装一个工具即可:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py</span><br><span class=\"line\"></span><br><span class=\"line\">chmod a+rx speedtest.py</span><br><span class=\"line\"></span><br><span class=\"line\">mv speedtest.py /usr/local/bin/speedtest-cli</span><br><span class=\"line\"></span><br><span class=\"line\">chown root:root /usr/local/bin/speedtest-cli</span><br></pre></td></tr></table></figure>\n"},{"title":"NGINX + SSH Tunnel 把本地开发环境公布到互联网上","toc":false,"date":"2019-07-26T03:09:04.000Z","_content":"\n在调试一些接口的时候，你的网站应用要跟其它的一些外部服务进行交流，你发给它一点数据，它也会返回给你一点数据。但是如果是在本地开发环境上调试，你只能发送给外部服务数据，而外部服务返回来的数据你的本地环境是收不到的。因为你的本地环境并没有一个固定的公网 IP 地址。\n\n我不想直接在服务器上去调试，因为复杂而且不方便，忽然想到了之前用过的 BrowserSync 工具，有一个 Tunnel 选项，可以把在本地创建的服务器公布到互联网上。我又想到了 SSH 有个 Tunnel 功能，原来用它作为本地电脑的代理用，我想大概可以用它，让我的在公网上的一台服务器接待请求，再把请求转到我的本地开发环境上，然后就去搜索关键词 NGINX，SSH，Tunnel ，找到了答案。\n\n用 SSH 在本地电脑与公网服务器之间打开一个通道，配置公网服务器的 NGINX，把收到的请求转到本地电脑与公网服务器的这个通道上。\n\n<!-- more -->\n\n## 需求\n一台连接到公网的服务器。\n公网服务器上安装了 NGINX。\n## 配置\n先在公网服务器上添加一个 NGINX 配置：\n```bash\nupstream tunnel {\n  server 127.0.0.1:7689;\n}\n\nserver {\n  listen 80;\n  server_name dev.ninghao.net;\n  \n  location / {\n    proxy_set_header  X-Real-IP  $remote_addr;\n    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header Host $http_host;\n    proxy_redirect off;\n    \n    proxy_pass http://tunnel;\n  }\n}\n```\n\n上面用 NGINX 创建了一个代理，如果有人访问 dev.ninghao.net，NGINX 会把请求转给 tunnel，这个 tunnel 指的就是这台公网服务器，端口号是 7689，一会儿我们要用到这个端口跟本地电脑进行通信。\n\n## 通道\n我们要在本地电脑与公网服务器之间，使用 SSH 打开一个通道。要执行的命令像这样：\n```bash\nssh -vnNT -R 服务器端口:localhost:本地端口 服务器用户名@服务器 IP 地址\n```\n示例：\n\n```bash\nssh -vnNT -R 7689:localhost:3333 root@42.120.40.68\n```\n在上面这个例子里，7689 指的是公网服务器的端口，localhost 后面的 3000 是本地电脑用的端口。root 是登录到公网服务器的用户，42.120.40.68 是公网服务器的 IP 地址。\n\n因为我们配置了公网服务器的 NGINX，访问 dev.ninghao.net ，把请求转到服务器上的 7689 端口，这个端口跟我们的本地电脑上的 3000 端口是连接到一块儿的。所以，你在本地开发环境上搭建的服务器，应该使用 3000 这个端口提供服务。也就是，当有人访问 dev.ninghao.net 这个地址的时候，用户得到的响应是你的本地开发环境上的服务器提供的。\n","source":"_posts/NGINX-SSH-Tunnel-把本地开发环境公布到互联网上.md","raw":"---\ntitle: NGINX + SSH Tunnel 把本地开发环境公布到互联网上\ntags:\n  - 知识点备忘\ncategories:\n  - Web开发\ntoc: false\ndate: 2019-07-26 11:09:04\n---\n\n在调试一些接口的时候，你的网站应用要跟其它的一些外部服务进行交流，你发给它一点数据，它也会返回给你一点数据。但是如果是在本地开发环境上调试，你只能发送给外部服务数据，而外部服务返回来的数据你的本地环境是收不到的。因为你的本地环境并没有一个固定的公网 IP 地址。\n\n我不想直接在服务器上去调试，因为复杂而且不方便，忽然想到了之前用过的 BrowserSync 工具，有一个 Tunnel 选项，可以把在本地创建的服务器公布到互联网上。我又想到了 SSH 有个 Tunnel 功能，原来用它作为本地电脑的代理用，我想大概可以用它，让我的在公网上的一台服务器接待请求，再把请求转到我的本地开发环境上，然后就去搜索关键词 NGINX，SSH，Tunnel ，找到了答案。\n\n用 SSH 在本地电脑与公网服务器之间打开一个通道，配置公网服务器的 NGINX，把收到的请求转到本地电脑与公网服务器的这个通道上。\n\n<!-- more -->\n\n## 需求\n一台连接到公网的服务器。\n公网服务器上安装了 NGINX。\n## 配置\n先在公网服务器上添加一个 NGINX 配置：\n```bash\nupstream tunnel {\n  server 127.0.0.1:7689;\n}\n\nserver {\n  listen 80;\n  server_name dev.ninghao.net;\n  \n  location / {\n    proxy_set_header  X-Real-IP  $remote_addr;\n    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header Host $http_host;\n    proxy_redirect off;\n    \n    proxy_pass http://tunnel;\n  }\n}\n```\n\n上面用 NGINX 创建了一个代理，如果有人访问 dev.ninghao.net，NGINX 会把请求转给 tunnel，这个 tunnel 指的就是这台公网服务器，端口号是 7689，一会儿我们要用到这个端口跟本地电脑进行通信。\n\n## 通道\n我们要在本地电脑与公网服务器之间，使用 SSH 打开一个通道。要执行的命令像这样：\n```bash\nssh -vnNT -R 服务器端口:localhost:本地端口 服务器用户名@服务器 IP 地址\n```\n示例：\n\n```bash\nssh -vnNT -R 7689:localhost:3333 root@42.120.40.68\n```\n在上面这个例子里，7689 指的是公网服务器的端口，localhost 后面的 3000 是本地电脑用的端口。root 是登录到公网服务器的用户，42.120.40.68 是公网服务器的 IP 地址。\n\n因为我们配置了公网服务器的 NGINX，访问 dev.ninghao.net ，把请求转到服务器上的 7689 端口，这个端口跟我们的本地电脑上的 3000 端口是连接到一块儿的。所以，你在本地开发环境上搭建的服务器，应该使用 3000 这个端口提供服务。也就是，当有人访问 dev.ninghao.net 这个地址的时候，用户得到的响应是你的本地开发环境上的服务器提供的。\n","slug":"NGINX-SSH-Tunnel-把本地开发环境公布到互联网上","published":1,"updated":"2019-11-07T02:17:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznxd001rh5s6qutkxvmh","content":"<p>在调试一些接口的时候，你的网站应用要跟其它的一些外部服务进行交流，你发给它一点数据，它也会返回给你一点数据。但是如果是在本地开发环境上调试，你只能发送给外部服务数据，而外部服务返回来的数据你的本地环境是收不到的。因为你的本地环境并没有一个固定的公网 IP 地址。</p>\n<p>我不想直接在服务器上去调试，因为复杂而且不方便，忽然想到了之前用过的 BrowserSync 工具，有一个 Tunnel 选项，可以把在本地创建的服务器公布到互联网上。我又想到了 SSH 有个 Tunnel 功能，原来用它作为本地电脑的代理用，我想大概可以用它，让我的在公网上的一台服务器接待请求，再把请求转到我的本地开发环境上，然后就去搜索关键词 NGINX，SSH，Tunnel ，找到了答案。</p>\n<p>用 SSH 在本地电脑与公网服务器之间打开一个通道，配置公网服务器的 NGINX，把收到的请求转到本地电脑与公网服务器的这个通道上。</p>\n<a id=\"more\"></a>\n<h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2><p>一台连接到公网的服务器。<br>公网服务器上安装了 NGINX。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>先在公网服务器上添加一个 NGINX 配置：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream tunnel &#123;</span><br><span class=\"line\">  server 127.0.0.1:7689;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">  listen 80;</span><br><span class=\"line\">  server_name dev.ninghao.net;</span><br><span class=\"line\">  </span><br><span class=\"line\">  location / &#123;</span><br><span class=\"line\">    proxy_set_header  X-Real-IP  <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">    proxy_set_header  X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\">    proxy_set_header Host <span class=\"variable\">$http_host</span>;</span><br><span class=\"line\">    proxy_redirect off;</span><br><span class=\"line\">    </span><br><span class=\"line\">    proxy_pass http://tunnel;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面用 NGINX 创建了一个代理，如果有人访问 dev.ninghao.net，NGINX 会把请求转给 tunnel，这个 tunnel 指的就是这台公网服务器，端口号是 7689，一会儿我们要用到这个端口跟本地电脑进行通信。</p>\n<h2 id=\"通道\"><a href=\"#通道\" class=\"headerlink\" title=\"通道\"></a>通道</h2><p>我们要在本地电脑与公网服务器之间，使用 SSH 打开一个通道。要执行的命令像这样：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -vnNT -R 服务器端口:localhost:本地端口 服务器用户名@服务器 IP 地址</span><br></pre></td></tr></table></figure></p>\n<p>示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -vnNT -R 7689:localhost:3333 root@42.120.40.68</span><br></pre></td></tr></table></figure>\n<p>在上面这个例子里，7689 指的是公网服务器的端口，localhost 后面的 3000 是本地电脑用的端口。root 是登录到公网服务器的用户，42.120.40.68 是公网服务器的 IP 地址。</p>\n<p>因为我们配置了公网服务器的 NGINX，访问 dev.ninghao.net ，把请求转到服务器上的 7689 端口，这个端口跟我们的本地电脑上的 3000 端口是连接到一块儿的。所以，你在本地开发环境上搭建的服务器，应该使用 3000 这个端口提供服务。也就是，当有人访问 dev.ninghao.net 这个地址的时候，用户得到的响应是你的本地开发环境上的服务器提供的。</p>\n","site":{"data":{}},"excerpt":"<p>在调试一些接口的时候，你的网站应用要跟其它的一些外部服务进行交流，你发给它一点数据，它也会返回给你一点数据。但是如果是在本地开发环境上调试，你只能发送给外部服务数据，而外部服务返回来的数据你的本地环境是收不到的。因为你的本地环境并没有一个固定的公网 IP 地址。</p>\n<p>我不想直接在服务器上去调试，因为复杂而且不方便，忽然想到了之前用过的 BrowserSync 工具，有一个 Tunnel 选项，可以把在本地创建的服务器公布到互联网上。我又想到了 SSH 有个 Tunnel 功能，原来用它作为本地电脑的代理用，我想大概可以用它，让我的在公网上的一台服务器接待请求，再把请求转到我的本地开发环境上，然后就去搜索关键词 NGINX，SSH，Tunnel ，找到了答案。</p>\n<p>用 SSH 在本地电脑与公网服务器之间打开一个通道，配置公网服务器的 NGINX，把收到的请求转到本地电脑与公网服务器的这个通道上。</p>","more":"<h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2><p>一台连接到公网的服务器。<br>公网服务器上安装了 NGINX。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>先在公网服务器上添加一个 NGINX 配置：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream tunnel &#123;</span><br><span class=\"line\">  server 127.0.0.1:7689;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">  listen 80;</span><br><span class=\"line\">  server_name dev.ninghao.net;</span><br><span class=\"line\">  </span><br><span class=\"line\">  location / &#123;</span><br><span class=\"line\">    proxy_set_header  X-Real-IP  <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">    proxy_set_header  X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\">    proxy_set_header Host <span class=\"variable\">$http_host</span>;</span><br><span class=\"line\">    proxy_redirect off;</span><br><span class=\"line\">    </span><br><span class=\"line\">    proxy_pass http://tunnel;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面用 NGINX 创建了一个代理，如果有人访问 dev.ninghao.net，NGINX 会把请求转给 tunnel，这个 tunnel 指的就是这台公网服务器，端口号是 7689，一会儿我们要用到这个端口跟本地电脑进行通信。</p>\n<h2 id=\"通道\"><a href=\"#通道\" class=\"headerlink\" title=\"通道\"></a>通道</h2><p>我们要在本地电脑与公网服务器之间，使用 SSH 打开一个通道。要执行的命令像这样：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -vnNT -R 服务器端口:localhost:本地端口 服务器用户名@服务器 IP 地址</span><br></pre></td></tr></table></figure></p>\n<p>示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -vnNT -R 7689:localhost:3333 root@42.120.40.68</span><br></pre></td></tr></table></figure>\n<p>在上面这个例子里，7689 指的是公网服务器的端口，localhost 后面的 3000 是本地电脑用的端口。root 是登录到公网服务器的用户，42.120.40.68 是公网服务器的 IP 地址。</p>\n<p>因为我们配置了公网服务器的 NGINX，访问 dev.ninghao.net ，把请求转到服务器上的 7689 端口，这个端口跟我们的本地电脑上的 3000 端口是连接到一块儿的。所以，你在本地开发环境上搭建的服务器，应该使用 3000 这个端口提供服务。也就是，当有人访问 dev.ninghao.net 这个地址的时候，用户得到的响应是你的本地开发环境上的服务器提供的。</p>"},{"title":"Node.js Sequelize如何实现数据库的读写分离","toc":false,"date":"2018-04-11T04:05:07.000Z","_content":"\n一、前言\n\n在构建高并发的Web应用时，除了应用层要采取负载均衡方案外，数据库也要支持高可用和高并发性。使用较多的数据库优化方案是：通过主从复制(Master-Slave)的方式来同步数据，再通过读写分离(MySQL-Proxy)来提升数据库的并发负载能力。\n\n1. replication选项与读写分离\n\nSequelize 支持读/写分离，要实现读/写分离可以分别为读和写各创建一个Sequelize实例，更方便的使用方式是在创建实例时，通过replication选项分别指定读/写数据库。\n\n要在Sequelize中使用读/写复制，可以在初始化Sequelize时有时向其replication选项传递一个对象.这个对象read、write两个属性。write是一个单一的对象(即：由单台服务器处理写入)，而read是一个包含对象的数组(即：由多台服务器处理读取)。每台read、write服务器都可以包含以下属性：\n\n· host - 数据库服务器的主机\n\n· port - 数据库服务器的主机端口\n\n· username - 验证用户名\n\n· password - 验证密码\n\n· database - 要连接的数据库\n\n2. Sequelize读/写分离示例\n\n在使用主从复制的多台数据库集群中，可以通过在replication对象的read属性中设置，该属性是一个数组，可以在其中传入一个或多个服务器连接副本。读操作相当于对数据库集群中的从节点进行操作，它会处理所有SELECT查询操作(读操作)。而replication对象的write属性是一个表示服务器连接的对象，写操作相当于主节点，它会处理所有插入、更新、删除操作(写操作)。\n\n```\nvar sequelize = new Sequelize('database', null, null, {\n dialect: 'mysql',\n port: 3306\n replication: {\n  read: [\n   { host: '192.168.1.33', username: 'itbilu.com', password: 'pwd' },\n   { host: 'localhost', username: 'root', password: null }\n  ],\n  write: { host: 'localhost', username: 'root', password: null }\n },\n pool: { // 如果需要重写链接池，请在 pool 选项中修改\n  maxConnections: 20,\n  maxIdleTime: 30000\n },\n})\n```\n\n我这边的真实代码：\n\n```\nimport Sequelize from 'sequelize'\nimport { DB as DBConfig, System as SystemConfig } from '../config'\n\nexport default new Sequelize(DBConfig.database, null, null, {\n  dialect: SystemConfig.db_type,\n  port: DBConfig.port,\n  replication: {\n    read: [\n      {\n        host: DBConfig.read.host,\n        username: DBConfig.read.username,\n        password: DBConfig.read.passwd\n      }\n    ],\n    write: {\n      host: DBConfig.write.host,\n      username: DBConfig.write.username,\n      password: DBConfig.write.passwd\n    }\n  },\n  dialectOptions: { // MySQL > 5.5，其它数据库删除此项\n    charset: 'utf8mb4',\n    collate: 'utf8mb4_unicode_520_ci',\n    supportBigNumbers: true,\n    bigNumberStrings: true\n  },\n  pool: {\n    max: 50,\n    min: 0,\n    idle: 10000\n  }\n})\n\n```\n\n所有的整体性设置，都会适用于所有节点副本，所以并不需要为每个实例单独指定。在上例中，数据库名和端口号会应用于所有节点副本，用户名和密码选项也同样适用。如果某一节点副本不使用全局设置，则需要在replication选项中单独指定。\n\n注意：Sequelize 并不会设置主从复制节点及节点间的数据同步(复制)，这些操作实际由MySQL(或你所使用的数据库)完成。而 Sequelize 只负责从主从节点写入或读取数据。\n\nSequelize 会使用连接池来管理节点副本。\n\n默认选项是：\n\n```\n{\n maxConnections: 10,\n minConnections: 0,\n maxIdleTime:1000\n}\n```\n","source":"_posts/Node-js-Sequelize如何实现数据库的读写分离.md","raw":"---\ntitle: Node.js Sequelize如何实现数据库的读写分离\ntags:\n  - mysql\ncategories:\n  - 后端开发\ntoc: false\ndate: 2018-04-11 12:05:07\n---\n\n一、前言\n\n在构建高并发的Web应用时，除了应用层要采取负载均衡方案外，数据库也要支持高可用和高并发性。使用较多的数据库优化方案是：通过主从复制(Master-Slave)的方式来同步数据，再通过读写分离(MySQL-Proxy)来提升数据库的并发负载能力。\n\n1. replication选项与读写分离\n\nSequelize 支持读/写分离，要实现读/写分离可以分别为读和写各创建一个Sequelize实例，更方便的使用方式是在创建实例时，通过replication选项分别指定读/写数据库。\n\n要在Sequelize中使用读/写复制，可以在初始化Sequelize时有时向其replication选项传递一个对象.这个对象read、write两个属性。write是一个单一的对象(即：由单台服务器处理写入)，而read是一个包含对象的数组(即：由多台服务器处理读取)。每台read、write服务器都可以包含以下属性：\n\n· host - 数据库服务器的主机\n\n· port - 数据库服务器的主机端口\n\n· username - 验证用户名\n\n· password - 验证密码\n\n· database - 要连接的数据库\n\n2. Sequelize读/写分离示例\n\n在使用主从复制的多台数据库集群中，可以通过在replication对象的read属性中设置，该属性是一个数组，可以在其中传入一个或多个服务器连接副本。读操作相当于对数据库集群中的从节点进行操作，它会处理所有SELECT查询操作(读操作)。而replication对象的write属性是一个表示服务器连接的对象，写操作相当于主节点，它会处理所有插入、更新、删除操作(写操作)。\n\n```\nvar sequelize = new Sequelize('database', null, null, {\n dialect: 'mysql',\n port: 3306\n replication: {\n  read: [\n   { host: '192.168.1.33', username: 'itbilu.com', password: 'pwd' },\n   { host: 'localhost', username: 'root', password: null }\n  ],\n  write: { host: 'localhost', username: 'root', password: null }\n },\n pool: { // 如果需要重写链接池，请在 pool 选项中修改\n  maxConnections: 20,\n  maxIdleTime: 30000\n },\n})\n```\n\n我这边的真实代码：\n\n```\nimport Sequelize from 'sequelize'\nimport { DB as DBConfig, System as SystemConfig } from '../config'\n\nexport default new Sequelize(DBConfig.database, null, null, {\n  dialect: SystemConfig.db_type,\n  port: DBConfig.port,\n  replication: {\n    read: [\n      {\n        host: DBConfig.read.host,\n        username: DBConfig.read.username,\n        password: DBConfig.read.passwd\n      }\n    ],\n    write: {\n      host: DBConfig.write.host,\n      username: DBConfig.write.username,\n      password: DBConfig.write.passwd\n    }\n  },\n  dialectOptions: { // MySQL > 5.5，其它数据库删除此项\n    charset: 'utf8mb4',\n    collate: 'utf8mb4_unicode_520_ci',\n    supportBigNumbers: true,\n    bigNumberStrings: true\n  },\n  pool: {\n    max: 50,\n    min: 0,\n    idle: 10000\n  }\n})\n\n```\n\n所有的整体性设置，都会适用于所有节点副本，所以并不需要为每个实例单独指定。在上例中，数据库名和端口号会应用于所有节点副本，用户名和密码选项也同样适用。如果某一节点副本不使用全局设置，则需要在replication选项中单独指定。\n\n注意：Sequelize 并不会设置主从复制节点及节点间的数据同步(复制)，这些操作实际由MySQL(或你所使用的数据库)完成。而 Sequelize 只负责从主从节点写入或读取数据。\n\nSequelize 会使用连接池来管理节点副本。\n\n默认选项是：\n\n```\n{\n maxConnections: 10,\n minConnections: 0,\n maxIdleTime:1000\n}\n```\n","slug":"Node-js-Sequelize如何实现数据库的读写分离","published":1,"updated":"2019-11-07T02:17:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznxf001vh5s6jqksk7if","content":"<p>一、前言</p>\n<p>在构建高并发的Web应用时，除了应用层要采取负载均衡方案外，数据库也要支持高可用和高并发性。使用较多的数据库优化方案是：通过主从复制(Master-Slave)的方式来同步数据，再通过读写分离(MySQL-Proxy)来提升数据库的并发负载能力。</p>\n<ol>\n<li>replication选项与读写分离</li>\n</ol>\n<p>Sequelize 支持读/写分离，要实现读/写分离可以分别为读和写各创建一个Sequelize实例，更方便的使用方式是在创建实例时，通过replication选项分别指定读/写数据库。</p>\n<p>要在Sequelize中使用读/写复制，可以在初始化Sequelize时有时向其replication选项传递一个对象.这个对象read、write两个属性。write是一个单一的对象(即：由单台服务器处理写入)，而read是一个包含对象的数组(即：由多台服务器处理读取)。每台read、write服务器都可以包含以下属性：</p>\n<p>· host - 数据库服务器的主机</p>\n<p>· port - 数据库服务器的主机端口</p>\n<p>· username - 验证用户名</p>\n<p>· password - 验证密码</p>\n<p>· database - 要连接的数据库</p>\n<ol start=\"2\">\n<li>Sequelize读/写分离示例</li>\n</ol>\n<p>在使用主从复制的多台数据库集群中，可以通过在replication对象的read属性中设置，该属性是一个数组，可以在其中传入一个或多个服务器连接副本。读操作相当于对数据库集群中的从节点进行操作，它会处理所有SELECT查询操作(读操作)。而replication对象的write属性是一个表示服务器连接的对象，写操作相当于主节点，它会处理所有插入、更新、删除操作(写操作)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var sequelize = new Sequelize(&apos;database&apos;, null, null, &#123;</span><br><span class=\"line\"> dialect: &apos;mysql&apos;,</span><br><span class=\"line\"> port: 3306</span><br><span class=\"line\"> replication: &#123;</span><br><span class=\"line\">  read: [</span><br><span class=\"line\">   &#123; host: &apos;192.168.1.33&apos;, username: &apos;itbilu.com&apos;, password: &apos;pwd&apos; &#125;,</span><br><span class=\"line\">   &#123; host: &apos;localhost&apos;, username: &apos;root&apos;, password: null &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  write: &#123; host: &apos;localhost&apos;, username: &apos;root&apos;, password: null &#125;</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> pool: &#123; // 如果需要重写链接池，请在 pool 选项中修改</span><br><span class=\"line\">  maxConnections: 20,</span><br><span class=\"line\">  maxIdleTime: 30000</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>我这边的真实代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Sequelize from &apos;sequelize&apos;</span><br><span class=\"line\">import &#123; DB as DBConfig, System as SystemConfig &#125; from &apos;../config&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default new Sequelize(DBConfig.database, null, null, &#123;</span><br><span class=\"line\">  dialect: SystemConfig.db_type,</span><br><span class=\"line\">  port: DBConfig.port,</span><br><span class=\"line\">  replication: &#123;</span><br><span class=\"line\">    read: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        host: DBConfig.read.host,</span><br><span class=\"line\">        username: DBConfig.read.username,</span><br><span class=\"line\">        password: DBConfig.read.passwd</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    write: &#123;</span><br><span class=\"line\">      host: DBConfig.write.host,</span><br><span class=\"line\">      username: DBConfig.write.username,</span><br><span class=\"line\">      password: DBConfig.write.passwd</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  dialectOptions: &#123; // MySQL &gt; 5.5，其它数据库删除此项</span><br><span class=\"line\">    charset: &apos;utf8mb4&apos;,</span><br><span class=\"line\">    collate: &apos;utf8mb4_unicode_520_ci&apos;,</span><br><span class=\"line\">    supportBigNumbers: true,</span><br><span class=\"line\">    bigNumberStrings: true</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  pool: &#123;</span><br><span class=\"line\">    max: 50,</span><br><span class=\"line\">    min: 0,</span><br><span class=\"line\">    idle: 10000</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>所有的整体性设置，都会适用于所有节点副本，所以并不需要为每个实例单独指定。在上例中，数据库名和端口号会应用于所有节点副本，用户名和密码选项也同样适用。如果某一节点副本不使用全局设置，则需要在replication选项中单独指定。</p>\n<p>注意：Sequelize 并不会设置主从复制节点及节点间的数据同步(复制)，这些操作实际由MySQL(或你所使用的数据库)完成。而 Sequelize 只负责从主从节点写入或读取数据。</p>\n<p>Sequelize 会使用连接池来管理节点副本。</p>\n<p>默认选项是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> maxConnections: 10,</span><br><span class=\"line\"> minConnections: 0,</span><br><span class=\"line\"> maxIdleTime:1000</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>一、前言</p>\n<p>在构建高并发的Web应用时，除了应用层要采取负载均衡方案外，数据库也要支持高可用和高并发性。使用较多的数据库优化方案是：通过主从复制(Master-Slave)的方式来同步数据，再通过读写分离(MySQL-Proxy)来提升数据库的并发负载能力。</p>\n<ol>\n<li>replication选项与读写分离</li>\n</ol>\n<p>Sequelize 支持读/写分离，要实现读/写分离可以分别为读和写各创建一个Sequelize实例，更方便的使用方式是在创建实例时，通过replication选项分别指定读/写数据库。</p>\n<p>要在Sequelize中使用读/写复制，可以在初始化Sequelize时有时向其replication选项传递一个对象.这个对象read、write两个属性。write是一个单一的对象(即：由单台服务器处理写入)，而read是一个包含对象的数组(即：由多台服务器处理读取)。每台read、write服务器都可以包含以下属性：</p>\n<p>· host - 数据库服务器的主机</p>\n<p>· port - 数据库服务器的主机端口</p>\n<p>· username - 验证用户名</p>\n<p>· password - 验证密码</p>\n<p>· database - 要连接的数据库</p>\n<ol start=\"2\">\n<li>Sequelize读/写分离示例</li>\n</ol>\n<p>在使用主从复制的多台数据库集群中，可以通过在replication对象的read属性中设置，该属性是一个数组，可以在其中传入一个或多个服务器连接副本。读操作相当于对数据库集群中的从节点进行操作，它会处理所有SELECT查询操作(读操作)。而replication对象的write属性是一个表示服务器连接的对象，写操作相当于主节点，它会处理所有插入、更新、删除操作(写操作)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var sequelize = new Sequelize(&apos;database&apos;, null, null, &#123;</span><br><span class=\"line\"> dialect: &apos;mysql&apos;,</span><br><span class=\"line\"> port: 3306</span><br><span class=\"line\"> replication: &#123;</span><br><span class=\"line\">  read: [</span><br><span class=\"line\">   &#123; host: &apos;192.168.1.33&apos;, username: &apos;itbilu.com&apos;, password: &apos;pwd&apos; &#125;,</span><br><span class=\"line\">   &#123; host: &apos;localhost&apos;, username: &apos;root&apos;, password: null &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  write: &#123; host: &apos;localhost&apos;, username: &apos;root&apos;, password: null &#125;</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> pool: &#123; // 如果需要重写链接池，请在 pool 选项中修改</span><br><span class=\"line\">  maxConnections: 20,</span><br><span class=\"line\">  maxIdleTime: 30000</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>我这边的真实代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Sequelize from &apos;sequelize&apos;</span><br><span class=\"line\">import &#123; DB as DBConfig, System as SystemConfig &#125; from &apos;../config&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default new Sequelize(DBConfig.database, null, null, &#123;</span><br><span class=\"line\">  dialect: SystemConfig.db_type,</span><br><span class=\"line\">  port: DBConfig.port,</span><br><span class=\"line\">  replication: &#123;</span><br><span class=\"line\">    read: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        host: DBConfig.read.host,</span><br><span class=\"line\">        username: DBConfig.read.username,</span><br><span class=\"line\">        password: DBConfig.read.passwd</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    write: &#123;</span><br><span class=\"line\">      host: DBConfig.write.host,</span><br><span class=\"line\">      username: DBConfig.write.username,</span><br><span class=\"line\">      password: DBConfig.write.passwd</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  dialectOptions: &#123; // MySQL &gt; 5.5，其它数据库删除此项</span><br><span class=\"line\">    charset: &apos;utf8mb4&apos;,</span><br><span class=\"line\">    collate: &apos;utf8mb4_unicode_520_ci&apos;,</span><br><span class=\"line\">    supportBigNumbers: true,</span><br><span class=\"line\">    bigNumberStrings: true</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  pool: &#123;</span><br><span class=\"line\">    max: 50,</span><br><span class=\"line\">    min: 0,</span><br><span class=\"line\">    idle: 10000</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>所有的整体性设置，都会适用于所有节点副本，所以并不需要为每个实例单独指定。在上例中，数据库名和端口号会应用于所有节点副本，用户名和密码选项也同样适用。如果某一节点副本不使用全局设置，则需要在replication选项中单独指定。</p>\n<p>注意：Sequelize 并不会设置主从复制节点及节点间的数据同步(复制)，这些操作实际由MySQL(或你所使用的数据库)完成。而 Sequelize 只负责从主从节点写入或读取数据。</p>\n<p>Sequelize 会使用连接池来管理节点副本。</p>\n<p>默认选项是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> maxConnections: 10,</span><br><span class=\"line\"> minConnections: 0,</span><br><span class=\"line\"> maxIdleTime:1000</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Nginx后端服务器组配置的5个指令","toc":false,"date":"2017-09-02T00:20:49.000Z","_content":"\nNginx服务器支持设置一组服务器作为后端服务器。\n\n服务器组的设置包括几个指令，他们是由标准HTTP模块ngx_http_upstream_module进行解析和处理的，我们在这里分别介绍一下。\n\n<!-- more -->\n\n### upstream 指令\n\n该指令是设置后端服务器组的主要指令，其他的指令都在该指令中进行设置。其语法结构为：\n\n```\nupstream name {\n  ...\n}\n```\n\n其中，name是给后端服务器组起得组名。花括号中列出后端服务器组中包含的服务器，其中可以使用下面是介绍的其他指令。\n\n默认情况下，某个服务器组接收到请求以后，按照轮叫调度（Round-Robin，RR）策略顺序选择组内服务器处理请求。如果一个服务器在处理请求的过程中出现错误，请求会被顺次交给组内的下一个服务器进行处理，以此类推，知道返回正常响应。如果所有的组内服务器都出错，则返回最后一个服务器的处理结果。当然我们可以根据各个服务器处理能力或者资源配置情况的不同，给各个服务器配置不同的权重，让能力强的服务器多处理请求，能力弱的少处理。配置权重的变量包含在server指令中。\n\n### server 指令\n\n该指令用于这只组内的服务器，其语法结构为：\n\n ```\n server address [parameters];\n ```\n\n > address，服务器的地址，可以是包含端口号的IP地址（IP:Port）、域名或者以『unix:』为前缀用于进程间通信的Unix Domain Socket。\n\n > parameters，为当前服务器配置更多属性。这些属性变量包含以下内容：\n\n >> weight=number，为组内服务器设置权重，权重值高的服务器被优先用于处理请求。此时组内服务器的选择策略为加权轮叫策略。组内所有服务器的权重默认设置为1，即采用一般轮叫调度原则处理请求。\n\n >> max_fails=number，设置一个请求失败的次数。在一定事件范围内，当对组内某台服务器请求失败的次数超过该变量设置的值时，认为该服务器无效（down）。请求失败的各种情况与proxy_next_upstream指令（在学习Nginx服务器的缓存机制时，是fastcgi_next_upstream指令或者memcached_next_upstream指令）的配置相匹配。默认设置为1。如果设置为0，则不适用上面的办法检查服务器是否有效\n\n >> 注意：HTTP 404 状态不被认为是请求失败\n\n >> fail_timeout=time，有两个作用，一时设置max_fails指令尝试请求某台组内服务器的时间，即学习max_fails指令时提到的\"一定时间范围内\"；另一个作用是在检查服务器是否有效时，如果一台服务器被认为是无效（down）的，该变量设置的时间为认为服务器无效的持续时间。在这个时间内不再检查该服务器的状态，并一直认为它是无效（down）的。默认设置为10s。\n\n >> backup，将某台组内服务器标记为备用服务器，只有当正常的服务器处于无效（down）状态或者繁忙（busy）状态时，该服务器才被用来处理客户端请求。\n\n >> down，将某台组内服务器标记为永久的无效状态，通常与ip_hash指令配合使用。该指令在Nginx 0.6.7 及以上版本中提供。\n\n 我们来通过实例深入对server指令配置的理解：\n\n```\nupstream backend {\n  server backend1.example.com weight=5;\n  server 127.0.0.1:8080 max_fails=3 fail_timeout=30s;\n  server unix:/tmp/backend3;\n}\n```\n\n在该实例中，我们设置了一个名叫backend的服务器组，组内包含三台服务器，分别是基于域名的backend1.example.com、基于IP地址的127.0.0.1:8080和用于进程间通信的Unix Domain Socket。backend1.example.com的权重设置为5，为组内最大，优先接受和处理请求；对本地服务器127.0.0.1:8080的检查设置是，如果30s内连续产生3次请求失败，则改服务器在之后的30s内被认为是无效（down）状态。  \n\n### ip_hash 指令\n\n该指令用于实现会话保持功能，将某个客户端的多次请求定向到组内同一台服务器上，保证客户端与服务器之间建立稳定的会话。只有当该服务器处于无效（down）状态时，客户端请求才会被下一个服务器接收和处理。其语法结构为：\n```\nip_hash;\n```\n\nip_hash技术在一些情况下非常有用，能够避免我们关心的服务器组内个服务器之间会话共享的问题。但是ip_hash技术再实际使用过程中也有限制。\n\n首先，ip_hash指令不能与server指令中的weight变量一起使用。其次，由于ip_hash技术主要根据客户端IP地址分配服务器，因此在整个系统中，Nginx服务器应该是处于最前端的服务器，这样才能够获取到客户端的IP地址，否则他得到的IP地址将是位于它前面的服务器地址，从而就会产生问题。同事要注意，客户端IP地址必须是C类地址。Nginx 1.3.2开发版本和Nginx 1.2.2稳定版本开始支持IPv6地址。\n\n我们来看下面这个实例：\n\n```\nupstream backend {\n  ip_hash;\n  server myback1.proxy.com;\n  server myback2.proxy.com;\n}\n```\n\n该实例中配置了一个名叫backend的服务器组，包含两台后端服务器myback1.proxy.com和myback2.proxy.com。在添加ip_hash指令后，我们使用同一个客户端向Nginx服务器发送请求，将会看到一只是有服务器myback1.proxy.com响应；如果注释掉ip_hash指令后进行相同的操作，发现组内的两台服务器轮流响应请求。\n\n### keepalive 指令\n\n该指令用于控制网络连接保持功能。通过该指令，能够保证Nginx服务器的工作进程为服务区组打开一部分网络连接，并且将数量控制在一定的范围之内。其语法结构为：\n```\nkeepalive connections;\n```\n\n其中，connections为 Nginx 服务器的每个工作进程允许该服务器组保持的空闲网络连接数的上限值。如果超过该值，工作进程将采用最近最少使用的策略关闭网络连接。\n\n该指令从Nginx 1.1.4开始被支持。\n\n> 注意：该指令不能限制Nginx服务器工作进程能够为服务器组开启的总网络连接数。connections变量在设置时也不要设置得太大，否则会影响服务器组与新网络连接的建立。\n\n### least_conn 指令\n\n该指令用于配置Nginx服务器使用负载均衡策略为网络连接分配服务器组内的服务器。该指令在功能上实现了最少连接负载均衡算法，在选择组内的服务器时，考虑各服务器权重的同时，每次选择的都是当前网络连接最少的那台服务器，如果这样的服务器有多台，就采用加权轮叫原则选择权重最大的服务器。其语法结构为：\n```\nleast_conn;\n```\n","source":"_posts/Nginx后端服务器组配置的5个指令.md","raw":"---\ntitle: Nginx后端服务器组配置的5个指令\ntags:\n  - nginx\ncategories:\n  - 后端开发\ntoc: false\ndate: 2017-09-02 08:20:49\n---\n\nNginx服务器支持设置一组服务器作为后端服务器。\n\n服务器组的设置包括几个指令，他们是由标准HTTP模块ngx_http_upstream_module进行解析和处理的，我们在这里分别介绍一下。\n\n<!-- more -->\n\n### upstream 指令\n\n该指令是设置后端服务器组的主要指令，其他的指令都在该指令中进行设置。其语法结构为：\n\n```\nupstream name {\n  ...\n}\n```\n\n其中，name是给后端服务器组起得组名。花括号中列出后端服务器组中包含的服务器，其中可以使用下面是介绍的其他指令。\n\n默认情况下，某个服务器组接收到请求以后，按照轮叫调度（Round-Robin，RR）策略顺序选择组内服务器处理请求。如果一个服务器在处理请求的过程中出现错误，请求会被顺次交给组内的下一个服务器进行处理，以此类推，知道返回正常响应。如果所有的组内服务器都出错，则返回最后一个服务器的处理结果。当然我们可以根据各个服务器处理能力或者资源配置情况的不同，给各个服务器配置不同的权重，让能力强的服务器多处理请求，能力弱的少处理。配置权重的变量包含在server指令中。\n\n### server 指令\n\n该指令用于这只组内的服务器，其语法结构为：\n\n ```\n server address [parameters];\n ```\n\n > address，服务器的地址，可以是包含端口号的IP地址（IP:Port）、域名或者以『unix:』为前缀用于进程间通信的Unix Domain Socket。\n\n > parameters，为当前服务器配置更多属性。这些属性变量包含以下内容：\n\n >> weight=number，为组内服务器设置权重，权重值高的服务器被优先用于处理请求。此时组内服务器的选择策略为加权轮叫策略。组内所有服务器的权重默认设置为1，即采用一般轮叫调度原则处理请求。\n\n >> max_fails=number，设置一个请求失败的次数。在一定事件范围内，当对组内某台服务器请求失败的次数超过该变量设置的值时，认为该服务器无效（down）。请求失败的各种情况与proxy_next_upstream指令（在学习Nginx服务器的缓存机制时，是fastcgi_next_upstream指令或者memcached_next_upstream指令）的配置相匹配。默认设置为1。如果设置为0，则不适用上面的办法检查服务器是否有效\n\n >> 注意：HTTP 404 状态不被认为是请求失败\n\n >> fail_timeout=time，有两个作用，一时设置max_fails指令尝试请求某台组内服务器的时间，即学习max_fails指令时提到的\"一定时间范围内\"；另一个作用是在检查服务器是否有效时，如果一台服务器被认为是无效（down）的，该变量设置的时间为认为服务器无效的持续时间。在这个时间内不再检查该服务器的状态，并一直认为它是无效（down）的。默认设置为10s。\n\n >> backup，将某台组内服务器标记为备用服务器，只有当正常的服务器处于无效（down）状态或者繁忙（busy）状态时，该服务器才被用来处理客户端请求。\n\n >> down，将某台组内服务器标记为永久的无效状态，通常与ip_hash指令配合使用。该指令在Nginx 0.6.7 及以上版本中提供。\n\n 我们来通过实例深入对server指令配置的理解：\n\n```\nupstream backend {\n  server backend1.example.com weight=5;\n  server 127.0.0.1:8080 max_fails=3 fail_timeout=30s;\n  server unix:/tmp/backend3;\n}\n```\n\n在该实例中，我们设置了一个名叫backend的服务器组，组内包含三台服务器，分别是基于域名的backend1.example.com、基于IP地址的127.0.0.1:8080和用于进程间通信的Unix Domain Socket。backend1.example.com的权重设置为5，为组内最大，优先接受和处理请求；对本地服务器127.0.0.1:8080的检查设置是，如果30s内连续产生3次请求失败，则改服务器在之后的30s内被认为是无效（down）状态。  \n\n### ip_hash 指令\n\n该指令用于实现会话保持功能，将某个客户端的多次请求定向到组内同一台服务器上，保证客户端与服务器之间建立稳定的会话。只有当该服务器处于无效（down）状态时，客户端请求才会被下一个服务器接收和处理。其语法结构为：\n```\nip_hash;\n```\n\nip_hash技术在一些情况下非常有用，能够避免我们关心的服务器组内个服务器之间会话共享的问题。但是ip_hash技术再实际使用过程中也有限制。\n\n首先，ip_hash指令不能与server指令中的weight变量一起使用。其次，由于ip_hash技术主要根据客户端IP地址分配服务器，因此在整个系统中，Nginx服务器应该是处于最前端的服务器，这样才能够获取到客户端的IP地址，否则他得到的IP地址将是位于它前面的服务器地址，从而就会产生问题。同事要注意，客户端IP地址必须是C类地址。Nginx 1.3.2开发版本和Nginx 1.2.2稳定版本开始支持IPv6地址。\n\n我们来看下面这个实例：\n\n```\nupstream backend {\n  ip_hash;\n  server myback1.proxy.com;\n  server myback2.proxy.com;\n}\n```\n\n该实例中配置了一个名叫backend的服务器组，包含两台后端服务器myback1.proxy.com和myback2.proxy.com。在添加ip_hash指令后，我们使用同一个客户端向Nginx服务器发送请求，将会看到一只是有服务器myback1.proxy.com响应；如果注释掉ip_hash指令后进行相同的操作，发现组内的两台服务器轮流响应请求。\n\n### keepalive 指令\n\n该指令用于控制网络连接保持功能。通过该指令，能够保证Nginx服务器的工作进程为服务区组打开一部分网络连接，并且将数量控制在一定的范围之内。其语法结构为：\n```\nkeepalive connections;\n```\n\n其中，connections为 Nginx 服务器的每个工作进程允许该服务器组保持的空闲网络连接数的上限值。如果超过该值，工作进程将采用最近最少使用的策略关闭网络连接。\n\n该指令从Nginx 1.1.4开始被支持。\n\n> 注意：该指令不能限制Nginx服务器工作进程能够为服务器组开启的总网络连接数。connections变量在设置时也不要设置得太大，否则会影响服务器组与新网络连接的建立。\n\n### least_conn 指令\n\n该指令用于配置Nginx服务器使用负载均衡策略为网络连接分配服务器组内的服务器。该指令在功能上实现了最少连接负载均衡算法，在选择组内的服务器时，考虑各服务器权重的同时，每次选择的都是当前网络连接最少的那台服务器，如果这样的服务器有多台，就采用加权轮叫原则选择权重最大的服务器。其语法结构为：\n```\nleast_conn;\n```\n","slug":"Nginx后端服务器组配置的5个指令","published":1,"updated":"2019-11-07T02:17:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznxg001yh5s6s4pijtvi","content":"<p>Nginx服务器支持设置一组服务器作为后端服务器。</p>\n<p>服务器组的设置包括几个指令，他们是由标准HTTP模块ngx_http_upstream_module进行解析和处理的，我们在这里分别介绍一下。</p>\n<a id=\"more\"></a>\n<h3 id=\"upstream-指令\"><a href=\"#upstream-指令\" class=\"headerlink\" title=\"upstream 指令\"></a>upstream 指令</h3><p>该指令是设置后端服务器组的主要指令，其他的指令都在该指令中进行设置。其语法结构为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream name &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中，name是给后端服务器组起得组名。花括号中列出后端服务器组中包含的服务器，其中可以使用下面是介绍的其他指令。</p>\n<p>默认情况下，某个服务器组接收到请求以后，按照轮叫调度（Round-Robin，RR）策略顺序选择组内服务器处理请求。如果一个服务器在处理请求的过程中出现错误，请求会被顺次交给组内的下一个服务器进行处理，以此类推，知道返回正常响应。如果所有的组内服务器都出错，则返回最后一个服务器的处理结果。当然我们可以根据各个服务器处理能力或者资源配置情况的不同，给各个服务器配置不同的权重，让能力强的服务器多处理请求，能力弱的少处理。配置权重的变量包含在server指令中。</p>\n<h3 id=\"server-指令\"><a href=\"#server-指令\" class=\"headerlink\" title=\"server 指令\"></a>server 指令</h3><p>该指令用于这只组内的服务器，其语法结构为：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server address [parameters];</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>address，服务器的地址，可以是包含端口号的IP地址（IP:Port）、域名或者以『unix:』为前缀用于进程间通信的Unix Domain Socket。</p>\n</blockquote>\n<blockquote>\n<p>parameters，为当前服务器配置更多属性。这些属性变量包含以下内容：</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>weight=number，为组内服务器设置权重，权重值高的服务器被优先用于处理请求。此时组内服务器的选择策略为加权轮叫策略。组内所有服务器的权重默认设置为1，即采用一般轮叫调度原则处理请求。</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>max_fails=number，设置一个请求失败的次数。在一定事件范围内，当对组内某台服务器请求失败的次数超过该变量设置的值时，认为该服务器无效（down）。请求失败的各种情况与proxy_next_upstream指令（在学习Nginx服务器的缓存机制时，是fastcgi_next_upstream指令或者memcached_next_upstream指令）的配置相匹配。默认设置为1。如果设置为0，则不适用上面的办法检查服务器是否有效</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>注意：HTTP 404 状态不被认为是请求失败</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>fail_timeout=time，有两个作用，一时设置max_fails指令尝试请求某台组内服务器的时间，即学习max_fails指令时提到的”一定时间范围内”；另一个作用是在检查服务器是否有效时，如果一台服务器被认为是无效（down）的，该变量设置的时间为认为服务器无效的持续时间。在这个时间内不再检查该服务器的状态，并一直认为它是无效（down）的。默认设置为10s。</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>backup，将某台组内服务器标记为备用服务器，只有当正常的服务器处于无效（down）状态或者繁忙（busy）状态时，该服务器才被用来处理客户端请求。</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>down，将某台组内服务器标记为永久的无效状态，通常与ip_hash指令配合使用。该指令在Nginx 0.6.7 及以上版本中提供。</p>\n</blockquote>\n</blockquote>\n<p> 我们来通过实例深入对server指令配置的理解：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backend &#123;</span><br><span class=\"line\">  server backend1.example.com weight=5;</span><br><span class=\"line\">  server 127.0.0.1:8080 max_fails=3 fail_timeout=30s;</span><br><span class=\"line\">  server unix:/tmp/backend3;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在该实例中，我们设置了一个名叫backend的服务器组，组内包含三台服务器，分别是基于域名的backend1.example.com、基于IP地址的127.0.0.1:8080和用于进程间通信的Unix Domain Socket。backend1.example.com的权重设置为5，为组内最大，优先接受和处理请求；对本地服务器127.0.0.1:8080的检查设置是，如果30s内连续产生3次请求失败，则改服务器在之后的30s内被认为是无效（down）状态。  </p>\n<h3 id=\"ip-hash-指令\"><a href=\"#ip-hash-指令\" class=\"headerlink\" title=\"ip_hash 指令\"></a>ip_hash 指令</h3><p>该指令用于实现会话保持功能，将某个客户端的多次请求定向到组内同一台服务器上，保证客户端与服务器之间建立稳定的会话。只有当该服务器处于无效（down）状态时，客户端请求才会被下一个服务器接收和处理。其语法结构为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip_hash;</span><br></pre></td></tr></table></figure></p>\n<p>ip_hash技术在一些情况下非常有用，能够避免我们关心的服务器组内个服务器之间会话共享的问题。但是ip_hash技术再实际使用过程中也有限制。</p>\n<p>首先，ip_hash指令不能与server指令中的weight变量一起使用。其次，由于ip_hash技术主要根据客户端IP地址分配服务器，因此在整个系统中，Nginx服务器应该是处于最前端的服务器，这样才能够获取到客户端的IP地址，否则他得到的IP地址将是位于它前面的服务器地址，从而就会产生问题。同事要注意，客户端IP地址必须是C类地址。Nginx 1.3.2开发版本和Nginx 1.2.2稳定版本开始支持IPv6地址。</p>\n<p>我们来看下面这个实例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backend &#123;</span><br><span class=\"line\">  ip_hash;</span><br><span class=\"line\">  server myback1.proxy.com;</span><br><span class=\"line\">  server myback2.proxy.com;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该实例中配置了一个名叫backend的服务器组，包含两台后端服务器myback1.proxy.com和myback2.proxy.com。在添加ip_hash指令后，我们使用同一个客户端向Nginx服务器发送请求，将会看到一只是有服务器myback1.proxy.com响应；如果注释掉ip_hash指令后进行相同的操作，发现组内的两台服务器轮流响应请求。</p>\n<h3 id=\"keepalive-指令\"><a href=\"#keepalive-指令\" class=\"headerlink\" title=\"keepalive 指令\"></a>keepalive 指令</h3><p>该指令用于控制网络连接保持功能。通过该指令，能够保证Nginx服务器的工作进程为服务区组打开一部分网络连接，并且将数量控制在一定的范围之内。其语法结构为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keepalive connections;</span><br></pre></td></tr></table></figure></p>\n<p>其中，connections为 Nginx 服务器的每个工作进程允许该服务器组保持的空闲网络连接数的上限值。如果超过该值，工作进程将采用最近最少使用的策略关闭网络连接。</p>\n<p>该指令从Nginx 1.1.4开始被支持。</p>\n<blockquote>\n<p>注意：该指令不能限制Nginx服务器工作进程能够为服务器组开启的总网络连接数。connections变量在设置时也不要设置得太大，否则会影响服务器组与新网络连接的建立。</p>\n</blockquote>\n<h3 id=\"least-conn-指令\"><a href=\"#least-conn-指令\" class=\"headerlink\" title=\"least_conn 指令\"></a>least_conn 指令</h3><p>该指令用于配置Nginx服务器使用负载均衡策略为网络连接分配服务器组内的服务器。该指令在功能上实现了最少连接负载均衡算法，在选择组内的服务器时，考虑各服务器权重的同时，每次选择的都是当前网络连接最少的那台服务器，如果这样的服务器有多台，就采用加权轮叫原则选择权重最大的服务器。其语法结构为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">least_conn;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>Nginx服务器支持设置一组服务器作为后端服务器。</p>\n<p>服务器组的设置包括几个指令，他们是由标准HTTP模块ngx_http_upstream_module进行解析和处理的，我们在这里分别介绍一下。</p>","more":"<h3 id=\"upstream-指令\"><a href=\"#upstream-指令\" class=\"headerlink\" title=\"upstream 指令\"></a>upstream 指令</h3><p>该指令是设置后端服务器组的主要指令，其他的指令都在该指令中进行设置。其语法结构为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream name &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中，name是给后端服务器组起得组名。花括号中列出后端服务器组中包含的服务器，其中可以使用下面是介绍的其他指令。</p>\n<p>默认情况下，某个服务器组接收到请求以后，按照轮叫调度（Round-Robin，RR）策略顺序选择组内服务器处理请求。如果一个服务器在处理请求的过程中出现错误，请求会被顺次交给组内的下一个服务器进行处理，以此类推，知道返回正常响应。如果所有的组内服务器都出错，则返回最后一个服务器的处理结果。当然我们可以根据各个服务器处理能力或者资源配置情况的不同，给各个服务器配置不同的权重，让能力强的服务器多处理请求，能力弱的少处理。配置权重的变量包含在server指令中。</p>\n<h3 id=\"server-指令\"><a href=\"#server-指令\" class=\"headerlink\" title=\"server 指令\"></a>server 指令</h3><p>该指令用于这只组内的服务器，其语法结构为：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server address [parameters];</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>address，服务器的地址，可以是包含端口号的IP地址（IP:Port）、域名或者以『unix:』为前缀用于进程间通信的Unix Domain Socket。</p>\n</blockquote>\n<blockquote>\n<p>parameters，为当前服务器配置更多属性。这些属性变量包含以下内容：</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>weight=number，为组内服务器设置权重，权重值高的服务器被优先用于处理请求。此时组内服务器的选择策略为加权轮叫策略。组内所有服务器的权重默认设置为1，即采用一般轮叫调度原则处理请求。</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>max_fails=number，设置一个请求失败的次数。在一定事件范围内，当对组内某台服务器请求失败的次数超过该变量设置的值时，认为该服务器无效（down）。请求失败的各种情况与proxy_next_upstream指令（在学习Nginx服务器的缓存机制时，是fastcgi_next_upstream指令或者memcached_next_upstream指令）的配置相匹配。默认设置为1。如果设置为0，则不适用上面的办法检查服务器是否有效</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>注意：HTTP 404 状态不被认为是请求失败</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>fail_timeout=time，有两个作用，一时设置max_fails指令尝试请求某台组内服务器的时间，即学习max_fails指令时提到的”一定时间范围内”；另一个作用是在检查服务器是否有效时，如果一台服务器被认为是无效（down）的，该变量设置的时间为认为服务器无效的持续时间。在这个时间内不再检查该服务器的状态，并一直认为它是无效（down）的。默认设置为10s。</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>backup，将某台组内服务器标记为备用服务器，只有当正常的服务器处于无效（down）状态或者繁忙（busy）状态时，该服务器才被用来处理客户端请求。</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>down，将某台组内服务器标记为永久的无效状态，通常与ip_hash指令配合使用。该指令在Nginx 0.6.7 及以上版本中提供。</p>\n</blockquote>\n</blockquote>\n<p> 我们来通过实例深入对server指令配置的理解：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backend &#123;</span><br><span class=\"line\">  server backend1.example.com weight=5;</span><br><span class=\"line\">  server 127.0.0.1:8080 max_fails=3 fail_timeout=30s;</span><br><span class=\"line\">  server unix:/tmp/backend3;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在该实例中，我们设置了一个名叫backend的服务器组，组内包含三台服务器，分别是基于域名的backend1.example.com、基于IP地址的127.0.0.1:8080和用于进程间通信的Unix Domain Socket。backend1.example.com的权重设置为5，为组内最大，优先接受和处理请求；对本地服务器127.0.0.1:8080的检查设置是，如果30s内连续产生3次请求失败，则改服务器在之后的30s内被认为是无效（down）状态。  </p>\n<h3 id=\"ip-hash-指令\"><a href=\"#ip-hash-指令\" class=\"headerlink\" title=\"ip_hash 指令\"></a>ip_hash 指令</h3><p>该指令用于实现会话保持功能，将某个客户端的多次请求定向到组内同一台服务器上，保证客户端与服务器之间建立稳定的会话。只有当该服务器处于无效（down）状态时，客户端请求才会被下一个服务器接收和处理。其语法结构为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip_hash;</span><br></pre></td></tr></table></figure></p>\n<p>ip_hash技术在一些情况下非常有用，能够避免我们关心的服务器组内个服务器之间会话共享的问题。但是ip_hash技术再实际使用过程中也有限制。</p>\n<p>首先，ip_hash指令不能与server指令中的weight变量一起使用。其次，由于ip_hash技术主要根据客户端IP地址分配服务器，因此在整个系统中，Nginx服务器应该是处于最前端的服务器，这样才能够获取到客户端的IP地址，否则他得到的IP地址将是位于它前面的服务器地址，从而就会产生问题。同事要注意，客户端IP地址必须是C类地址。Nginx 1.3.2开发版本和Nginx 1.2.2稳定版本开始支持IPv6地址。</p>\n<p>我们来看下面这个实例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backend &#123;</span><br><span class=\"line\">  ip_hash;</span><br><span class=\"line\">  server myback1.proxy.com;</span><br><span class=\"line\">  server myback2.proxy.com;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该实例中配置了一个名叫backend的服务器组，包含两台后端服务器myback1.proxy.com和myback2.proxy.com。在添加ip_hash指令后，我们使用同一个客户端向Nginx服务器发送请求，将会看到一只是有服务器myback1.proxy.com响应；如果注释掉ip_hash指令后进行相同的操作，发现组内的两台服务器轮流响应请求。</p>\n<h3 id=\"keepalive-指令\"><a href=\"#keepalive-指令\" class=\"headerlink\" title=\"keepalive 指令\"></a>keepalive 指令</h3><p>该指令用于控制网络连接保持功能。通过该指令，能够保证Nginx服务器的工作进程为服务区组打开一部分网络连接，并且将数量控制在一定的范围之内。其语法结构为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keepalive connections;</span><br></pre></td></tr></table></figure></p>\n<p>其中，connections为 Nginx 服务器的每个工作进程允许该服务器组保持的空闲网络连接数的上限值。如果超过该值，工作进程将采用最近最少使用的策略关闭网络连接。</p>\n<p>该指令从Nginx 1.1.4开始被支持。</p>\n<blockquote>\n<p>注意：该指令不能限制Nginx服务器工作进程能够为服务器组开启的总网络连接数。connections变量在设置时也不要设置得太大，否则会影响服务器组与新网络连接的建立。</p>\n</blockquote>\n<h3 id=\"least-conn-指令\"><a href=\"#least-conn-指令\" class=\"headerlink\" title=\"least_conn 指令\"></a>least_conn 指令</h3><p>该指令用于配置Nginx服务器使用负载均衡策略为网络连接分配服务器组内的服务器。该指令在功能上实现了最少连接负载均衡算法，在选择组内的服务器时，考虑各服务器权重的同时，每次选择的都是当前网络连接最少的那台服务器，如果这样的服务器有多台，就采用加权轮叫原则选择权重最大的服务器。其语法结构为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">least_conn;</span><br></pre></td></tr></table></figure></p>"},{"title":"Let's Encrypt：用免费的 SSL 证书，让网站支持 HTTPS","toc":false,"date":"2017-12-31T10:23:46.000Z","_content":"\n申请 Let's Encrypt 提供的免费 SSL 证书，配置网站使用 HTTPS，让网站应用更安全。\n直接在运行网站的服务器上去申请 SSL 证书更方便一些，你也可以在一台服务器上去为在\n其它服务器上运行的网站申请 SSL 证书，这需要做额外的验证。操作都非常简单，不用紧张：）\n<!-- more -->\n我在一台 CentOS  7 服务器上申请了 Let's Encrypt 签发的 SSL 证书，我的网站的 Web 服务器用的是 Nginx。\n\n## 安装EPEL仓库\n\n在 CentOS 的 EPEL 仓库里可以找到签发 Let's Encrypt 证书用的工具。所以先安装一下这个仓库，执行：\n\n```\nsudo yum install epel-release -y\n```\n\n公司内网不能用，可以在本地虚拟机安装，然后通过下边的『为其他服务器申请证书的流程走』\n\n## 安装签发证书工具\n\n用 Certbot 工具申请 Let's Encrypt 证书，先安装一下：\n\n```\nsudo yum install certbot-nginx\n```\n\n运行 certbot 工具时报错：\n\n```\nImportError: No module named 'requests.packages.urllib3'\n```\n\n执行下面的命令解决了上面的问题：\n\n```\npip install --upgrade --force-reinstall 'requests==2.6.0' urllib3\n```\n\n## 申请证书\n### 网站运行在申请 SSL 证书用的服务器上\n\n你要申请 SSL 证书的主机名已经指向了申请用的服务器的 IP 地址，\n在服务器上用的是 Nginx Web 服务器。保证 Nginx 正在运行，并\n且已经配置好了 Nginx ，绑定上了要申请 SSL 证书的主机名。就是\n你应该在 Nginx 的配置里面，有一个配置是为要申请 SSL 证书的主\n机名准备的。\n\n一开始我们在服务器上安装的 Certbot 可以自动修改指定主机名的\n Nginx 配置，为主机名申请证书，下载证书，并且会自动修改 Nginx\n 的配置，让它支持 HTTPS。\n\n执行：\n\n```\nsudo certbot --nginx\n```\n\nCertbot 会自动查找当前服务器上的 Nginx 里面的虚拟主机。提示：\n\n```\nSaving debug log to /var/log/letsencrypt/letsencrypt.log\nPlugins selected: Authenticator nginx, Installer nginx\nStarting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n\nWhich names would you like to activate HTTPS for?\n-------------------------------------------------------------------------------\n1: houjiyi.com\n2: galary.houjiyi.com\n3: www.houjiyi.com\n-------------------------------------------------------------------------------\nSelect the appropriate numbers separated by commas and/or spaces, or leave input\nblank to select all options shown (Enter 'c' to cancel):\n```\n\n比如我的服务器上有两个 Nginx 虚拟主机，上面会提示想给哪个主机名申请 SSL 证书，输入序号选择，\n或留为空白直接回车选择所有。验证成功，Let's Encrypt 就会立即给你签发 SSL 证书，并且会自动\n修改主机的 Nginx 配置，让它支持 HTTPS。过程中会提示：\n\n```\nObtaining a new certificate\nPerforming the following challenges:\ntls-sni-01 challenge for houjiyi.com\nWaiting for verification...\nCleaning up challenges\nDeployed Certificate to VirtualHost /etc/nginx/conf.d/www.conf for set(['houjiyi.com'])\n\nPlease choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access.\n-------------------------------------------------------------------------------\n1: No redirect - Make no further changes to the webserver configuration.\n2: Redirect - Make all requests redirect to secure HTTPS access. Choose this for\nnew sites, or if you're confident your site works on HTTPS. You can undo this\nchange by editing your web server's configuration.\n-------------------------------------------------------------------------------\nSelect the appropriate number [1-2] then [enter] (press 'c' to cancel):\n```\n\n意思是，想不想把 HTTP 的请求重定向到 HTTPS ，如果选择 Redirect，Certbot 会自动在主机的 Nginx 配置里添加重定向用的配置。成功以后会提示：\n\n```\nThe appropriate server block is already redirecting traffic. To enable redirect anyway, uncomment the redirect lines in /etc/nginx/conf.d/www.conf.\n\n-------------------------------------------------------------------------------\nCongratulations! You have successfully enabled https://houjiyi.com\n\nYou should test your configuration at:\nhttps://www.ssllabs.com/ssltest/analyze.html?d=houjiyi.com\n-------------------------------------------------------------------------------\n\nIMPORTANT NOTES:\n - Congratulations! Your certificate and chain have been saved at:\n   /etc/letsencrypt/live/houjiyi.com/fullchain.pem\n   Your key file has been saved at:\n   /etc/letsencrypt/live/houjiyi.com/privkey.pem\n   Your cert will expire on 2018-04-02. To obtain a new or tweaked\n   version of this certificate in the future, simply run certbot again\n   with the \"certonly\" option. To non-interactively renew *all* of\n   your certificates, run \"certbot renew\"\n - If you like Certbot, please consider supporting our work by:\n\n   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate\n   Donating to EFF:                    https://eff.org/donate-le\n```\n\n上面会告诉你申请的 Let's Encrypt 证书保存的位置，一般是在：\n\n```\n/etc/letsencrypt/live/主机名\n```\n\n再打开网站的 Nginx 配置检查一下，配置里会有一些东西是 Certbot 自动添加的，配置的后面都会有注释 managed by Certbot：\n\n```\nserver {\n    listen        80;\n    server_name   houjiyi.com;\n\n    listen 443 ssl;\n    ssl_certificate /etc/letsencrypt/live/houjiyi.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/houjiyi.com/privkey.pem;\n    include /etc/letsencrypt/options-ssl-nginx.conf;\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;\n\n\n    if ($scheme = \"https\") {\n        return 301 https://www.$host$request_uri;\n    }\n}\n```\n\n如果你只想为跟 Nginx 绑定的主机名申请证书，不想让 Certbot 修改 Nginx 的配置，可以执行：\n\n```\nsudo certbot --nginx certonly\n```\n\n### 网站运行在申请 SSL 证书以外的服务器上\n\n我们在一个 CentOS 服务器上，也可以为运行在其它服务器上的网站申请 Let's Encrypt 证书，只需要多做一步验证。\n\n执行：\n\n```\nsudo certbot certonly --manual\n```\n\n提示让你输入想要申请证书的主机名：\n\n```\nSaving debug log to /var/log/letsencrypt/letsencrypt.log\nPlugins selected: Authenticator manual, Installer None\nStarting new HTTPS connection (1): acme-v01.api.letsencrypt.org\nPlease enter in your domain name(s) (comma and/or space separated)  (Enter 'c'\nto cancel): t2.m.le.com\n```\n\n继续又会提示要记录服务器的 IP 地址，是不是同意这样：\n\n```\nObtaining a new certificate\nPerforming the following challenges:\nhttp-01 challenge for t2.m.le.com\n\n-------------------------------------------------------------------------------\nNOTE: The IP of this machine will be publicly logged as having requested this\ncertificate. If you're running certbot in manual mode on a machine that is not\nyour server, please ensure you're okay with that.\n\nAre you OK with your IP being logged?\n-------------------------------------------------------------------------------\n(Y)es/(N)o: Y\n```\n\n下面要做一步验证，把一串字符放在指定的文件里，而且要用指定的路径可以访问到这个文件，这样就可以完成验证了。\n\n```\nCreate a file containing just this data:\n\nKIad2acPdKiF5pLpjlv4fK19PJDchhO7ClJZI_P3zbw.dfvuyqod4KGCve8xM-wotdjimoIXlfb6a4dkaSFN7LI\n\nAnd make it available on your web server at this URL:\n\nhttp://t2.m.le.com/.well-known/acme-challenge/KIad2acPdKiF5pLpjlv4fK19PJDchhO7ClJZI_P3zbw\n\n-------------------------------------------------------------------------------\nPress Enter to Continue\n```\n\n一切正常，验证通过就会签发证书：\n\n```\nWaiting for verification...\nCleaning up challenges\n\nIMPORTANT NOTES:\n - Congratulations! Your certificate and chain have been saved at:\n   /etc/letsencrypt/live/t2.m.le.com/fullchain.pem\n   Your key file has been saved at:\n   /etc/letsencrypt/live/t2.m.le.com/privkey.pem\n   Your cert will expire on 2018-03-12. To obtain a new or tweaked\n   version of this certificate in the future, simply run certbot\n   again. To non-interactively renew *all* of your certificates, run\n   \"certbot renew\"\n - If you like Certbot, please consider supporting our work by:\n\n   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate\n   Donating to EFF:                    https://eff.org/donate-le\n```\n\n## 结语\n\n阿里云申请的免费的赛门铁克的证书有效期是一年，同时赛门铁克证书在以后的chrome版本可能不被信任，\n因此换一个证书。这个证书有效期为3个月，到期后操作一遍即可。\n","source":"_posts/Let-s-Encrypt：用免费的-SSL-证书，让网站支持-HTTPS.md","raw":"---\ntitle: Let's Encrypt：用免费的 SSL 证书，让网站支持 HTTPS\ntags:\n  - 域名\ncategories:\n  - 后端开发\ntoc: false\ndate: 2017-12-31 18:23:46\n---\n\n申请 Let's Encrypt 提供的免费 SSL 证书，配置网站使用 HTTPS，让网站应用更安全。\n直接在运行网站的服务器上去申请 SSL 证书更方便一些，你也可以在一台服务器上去为在\n其它服务器上运行的网站申请 SSL 证书，这需要做额外的验证。操作都非常简单，不用紧张：）\n<!-- more -->\n我在一台 CentOS  7 服务器上申请了 Let's Encrypt 签发的 SSL 证书，我的网站的 Web 服务器用的是 Nginx。\n\n## 安装EPEL仓库\n\n在 CentOS 的 EPEL 仓库里可以找到签发 Let's Encrypt 证书用的工具。所以先安装一下这个仓库，执行：\n\n```\nsudo yum install epel-release -y\n```\n\n公司内网不能用，可以在本地虚拟机安装，然后通过下边的『为其他服务器申请证书的流程走』\n\n## 安装签发证书工具\n\n用 Certbot 工具申请 Let's Encrypt 证书，先安装一下：\n\n```\nsudo yum install certbot-nginx\n```\n\n运行 certbot 工具时报错：\n\n```\nImportError: No module named 'requests.packages.urllib3'\n```\n\n执行下面的命令解决了上面的问题：\n\n```\npip install --upgrade --force-reinstall 'requests==2.6.0' urllib3\n```\n\n## 申请证书\n### 网站运行在申请 SSL 证书用的服务器上\n\n你要申请 SSL 证书的主机名已经指向了申请用的服务器的 IP 地址，\n在服务器上用的是 Nginx Web 服务器。保证 Nginx 正在运行，并\n且已经配置好了 Nginx ，绑定上了要申请 SSL 证书的主机名。就是\n你应该在 Nginx 的配置里面，有一个配置是为要申请 SSL 证书的主\n机名准备的。\n\n一开始我们在服务器上安装的 Certbot 可以自动修改指定主机名的\n Nginx 配置，为主机名申请证书，下载证书，并且会自动修改 Nginx\n 的配置，让它支持 HTTPS。\n\n执行：\n\n```\nsudo certbot --nginx\n```\n\nCertbot 会自动查找当前服务器上的 Nginx 里面的虚拟主机。提示：\n\n```\nSaving debug log to /var/log/letsencrypt/letsencrypt.log\nPlugins selected: Authenticator nginx, Installer nginx\nStarting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n\nWhich names would you like to activate HTTPS for?\n-------------------------------------------------------------------------------\n1: houjiyi.com\n2: galary.houjiyi.com\n3: www.houjiyi.com\n-------------------------------------------------------------------------------\nSelect the appropriate numbers separated by commas and/or spaces, or leave input\nblank to select all options shown (Enter 'c' to cancel):\n```\n\n比如我的服务器上有两个 Nginx 虚拟主机，上面会提示想给哪个主机名申请 SSL 证书，输入序号选择，\n或留为空白直接回车选择所有。验证成功，Let's Encrypt 就会立即给你签发 SSL 证书，并且会自动\n修改主机的 Nginx 配置，让它支持 HTTPS。过程中会提示：\n\n```\nObtaining a new certificate\nPerforming the following challenges:\ntls-sni-01 challenge for houjiyi.com\nWaiting for verification...\nCleaning up challenges\nDeployed Certificate to VirtualHost /etc/nginx/conf.d/www.conf for set(['houjiyi.com'])\n\nPlease choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access.\n-------------------------------------------------------------------------------\n1: No redirect - Make no further changes to the webserver configuration.\n2: Redirect - Make all requests redirect to secure HTTPS access. Choose this for\nnew sites, or if you're confident your site works on HTTPS. You can undo this\nchange by editing your web server's configuration.\n-------------------------------------------------------------------------------\nSelect the appropriate number [1-2] then [enter] (press 'c' to cancel):\n```\n\n意思是，想不想把 HTTP 的请求重定向到 HTTPS ，如果选择 Redirect，Certbot 会自动在主机的 Nginx 配置里添加重定向用的配置。成功以后会提示：\n\n```\nThe appropriate server block is already redirecting traffic. To enable redirect anyway, uncomment the redirect lines in /etc/nginx/conf.d/www.conf.\n\n-------------------------------------------------------------------------------\nCongratulations! You have successfully enabled https://houjiyi.com\n\nYou should test your configuration at:\nhttps://www.ssllabs.com/ssltest/analyze.html?d=houjiyi.com\n-------------------------------------------------------------------------------\n\nIMPORTANT NOTES:\n - Congratulations! Your certificate and chain have been saved at:\n   /etc/letsencrypt/live/houjiyi.com/fullchain.pem\n   Your key file has been saved at:\n   /etc/letsencrypt/live/houjiyi.com/privkey.pem\n   Your cert will expire on 2018-04-02. To obtain a new or tweaked\n   version of this certificate in the future, simply run certbot again\n   with the \"certonly\" option. To non-interactively renew *all* of\n   your certificates, run \"certbot renew\"\n - If you like Certbot, please consider supporting our work by:\n\n   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate\n   Donating to EFF:                    https://eff.org/donate-le\n```\n\n上面会告诉你申请的 Let's Encrypt 证书保存的位置，一般是在：\n\n```\n/etc/letsencrypt/live/主机名\n```\n\n再打开网站的 Nginx 配置检查一下，配置里会有一些东西是 Certbot 自动添加的，配置的后面都会有注释 managed by Certbot：\n\n```\nserver {\n    listen        80;\n    server_name   houjiyi.com;\n\n    listen 443 ssl;\n    ssl_certificate /etc/letsencrypt/live/houjiyi.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/houjiyi.com/privkey.pem;\n    include /etc/letsencrypt/options-ssl-nginx.conf;\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;\n\n\n    if ($scheme = \"https\") {\n        return 301 https://www.$host$request_uri;\n    }\n}\n```\n\n如果你只想为跟 Nginx 绑定的主机名申请证书，不想让 Certbot 修改 Nginx 的配置，可以执行：\n\n```\nsudo certbot --nginx certonly\n```\n\n### 网站运行在申请 SSL 证书以外的服务器上\n\n我们在一个 CentOS 服务器上，也可以为运行在其它服务器上的网站申请 Let's Encrypt 证书，只需要多做一步验证。\n\n执行：\n\n```\nsudo certbot certonly --manual\n```\n\n提示让你输入想要申请证书的主机名：\n\n```\nSaving debug log to /var/log/letsencrypt/letsencrypt.log\nPlugins selected: Authenticator manual, Installer None\nStarting new HTTPS connection (1): acme-v01.api.letsencrypt.org\nPlease enter in your domain name(s) (comma and/or space separated)  (Enter 'c'\nto cancel): t2.m.le.com\n```\n\n继续又会提示要记录服务器的 IP 地址，是不是同意这样：\n\n```\nObtaining a new certificate\nPerforming the following challenges:\nhttp-01 challenge for t2.m.le.com\n\n-------------------------------------------------------------------------------\nNOTE: The IP of this machine will be publicly logged as having requested this\ncertificate. If you're running certbot in manual mode on a machine that is not\nyour server, please ensure you're okay with that.\n\nAre you OK with your IP being logged?\n-------------------------------------------------------------------------------\n(Y)es/(N)o: Y\n```\n\n下面要做一步验证，把一串字符放在指定的文件里，而且要用指定的路径可以访问到这个文件，这样就可以完成验证了。\n\n```\nCreate a file containing just this data:\n\nKIad2acPdKiF5pLpjlv4fK19PJDchhO7ClJZI_P3zbw.dfvuyqod4KGCve8xM-wotdjimoIXlfb6a4dkaSFN7LI\n\nAnd make it available on your web server at this URL:\n\nhttp://t2.m.le.com/.well-known/acme-challenge/KIad2acPdKiF5pLpjlv4fK19PJDchhO7ClJZI_P3zbw\n\n-------------------------------------------------------------------------------\nPress Enter to Continue\n```\n\n一切正常，验证通过就会签发证书：\n\n```\nWaiting for verification...\nCleaning up challenges\n\nIMPORTANT NOTES:\n - Congratulations! Your certificate and chain have been saved at:\n   /etc/letsencrypt/live/t2.m.le.com/fullchain.pem\n   Your key file has been saved at:\n   /etc/letsencrypt/live/t2.m.le.com/privkey.pem\n   Your cert will expire on 2018-03-12. To obtain a new or tweaked\n   version of this certificate in the future, simply run certbot\n   again. To non-interactively renew *all* of your certificates, run\n   \"certbot renew\"\n - If you like Certbot, please consider supporting our work by:\n\n   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate\n   Donating to EFF:                    https://eff.org/donate-le\n```\n\n## 结语\n\n阿里云申请的免费的赛门铁克的证书有效期是一年，同时赛门铁克证书在以后的chrome版本可能不被信任，\n因此换一个证书。这个证书有效期为3个月，到期后操作一遍即可。\n","slug":"Let-s-Encrypt：用免费的-SSL-证书，让网站支持-HTTPS","published":1,"updated":"2019-11-07T02:17:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznxi0022h5s6bjgjfy6b","content":"<p>申请 Let’s Encrypt 提供的免费 SSL 证书，配置网站使用 HTTPS，让网站应用更安全。<br>直接在运行网站的服务器上去申请 SSL 证书更方便一些，你也可以在一台服务器上去为在<br>其它服务器上运行的网站申请 SSL 证书，这需要做额外的验证。操作都非常简单，不用紧张：）<br><a id=\"more\"></a><br>我在一台 CentOS  7 服务器上申请了 Let’s Encrypt 签发的 SSL 证书，我的网站的 Web 服务器用的是 Nginx。</p>\n<h2 id=\"安装EPEL仓库\"><a href=\"#安装EPEL仓库\" class=\"headerlink\" title=\"安装EPEL仓库\"></a>安装EPEL仓库</h2><p>在 CentOS 的 EPEL 仓库里可以找到签发 Let’s Encrypt 证书用的工具。所以先安装一下这个仓库，执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install epel-release -y</span><br></pre></td></tr></table></figure>\n<p>公司内网不能用，可以在本地虚拟机安装，然后通过下边的『为其他服务器申请证书的流程走』</p>\n<h2 id=\"安装签发证书工具\"><a href=\"#安装签发证书工具\" class=\"headerlink\" title=\"安装签发证书工具\"></a>安装签发证书工具</h2><p>用 Certbot 工具申请 Let’s Encrypt 证书，先安装一下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install certbot-nginx</span><br></pre></td></tr></table></figure>\n<p>运行 certbot 工具时报错：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ImportError: No module named &apos;requests.packages.urllib3&apos;</span><br></pre></td></tr></table></figure>\n<p>执行下面的命令解决了上面的问题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install --upgrade --force-reinstall &apos;requests==2.6.0&apos; urllib3</span><br></pre></td></tr></table></figure>\n<h2 id=\"申请证书\"><a href=\"#申请证书\" class=\"headerlink\" title=\"申请证书\"></a>申请证书</h2><h3 id=\"网站运行在申请-SSL-证书用的服务器上\"><a href=\"#网站运行在申请-SSL-证书用的服务器上\" class=\"headerlink\" title=\"网站运行在申请 SSL 证书用的服务器上\"></a>网站运行在申请 SSL 证书用的服务器上</h3><p>你要申请 SSL 证书的主机名已经指向了申请用的服务器的 IP 地址，<br>在服务器上用的是 Nginx Web 服务器。保证 Nginx 正在运行，并<br>且已经配置好了 Nginx ，绑定上了要申请 SSL 证书的主机名。就是<br>你应该在 Nginx 的配置里面，有一个配置是为要申请 SSL 证书的主<br>机名准备的。</p>\n<p>一开始我们在服务器上安装的 Certbot 可以自动修改指定主机名的<br> Nginx 配置，为主机名申请证书，下载证书，并且会自动修改 Nginx<br> 的配置，让它支持 HTTPS。</p>\n<p>执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot --nginx</span><br></pre></td></tr></table></figure>\n<p>Certbot 会自动查找当前服务器上的 Nginx 里面的虚拟主机。提示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Saving debug log to /var/log/letsencrypt/letsencrypt.log</span><br><span class=\"line\">Plugins selected: Authenticator nginx, Installer nginx</span><br><span class=\"line\">Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org</span><br><span class=\"line\"></span><br><span class=\"line\">Which names would you like to activate HTTPS for?</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">1: houjiyi.com</span><br><span class=\"line\">2: galary.houjiyi.com</span><br><span class=\"line\">3: www.houjiyi.com</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">Select the appropriate numbers separated by commas and/or spaces, or leave input</span><br><span class=\"line\">blank to select all options shown (Enter &apos;c&apos; to cancel):</span><br></pre></td></tr></table></figure>\n<p>比如我的服务器上有两个 Nginx 虚拟主机，上面会提示想给哪个主机名申请 SSL 证书，输入序号选择，<br>或留为空白直接回车选择所有。验证成功，Let’s Encrypt 就会立即给你签发 SSL 证书，并且会自动<br>修改主机的 Nginx 配置，让它支持 HTTPS。过程中会提示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Obtaining a new certificate</span><br><span class=\"line\">Performing the following challenges:</span><br><span class=\"line\">tls-sni-01 challenge for houjiyi.com</span><br><span class=\"line\">Waiting for verification...</span><br><span class=\"line\">Cleaning up challenges</span><br><span class=\"line\">Deployed Certificate to VirtualHost /etc/nginx/conf.d/www.conf for set([&apos;houjiyi.com&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">Please choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access.</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">1: No redirect - Make no further changes to the webserver configuration.</span><br><span class=\"line\">2: Redirect - Make all requests redirect to secure HTTPS access. Choose this for</span><br><span class=\"line\">new sites, or if you&apos;re confident your site works on HTTPS. You can undo this</span><br><span class=\"line\">change by editing your web server&apos;s configuration.</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">Select the appropriate number [1-2] then [enter] (press &apos;c&apos; to cancel):</span><br></pre></td></tr></table></figure>\n<p>意思是，想不想把 HTTP 的请求重定向到 HTTPS ，如果选择 Redirect，Certbot 会自动在主机的 Nginx 配置里添加重定向用的配置。成功以后会提示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The appropriate server block is already redirecting traffic. To enable redirect anyway, uncomment the redirect lines in /etc/nginx/conf.d/www.conf.</span><br><span class=\"line\"></span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">Congratulations! You have successfully enabled https://houjiyi.com</span><br><span class=\"line\"></span><br><span class=\"line\">You should test your configuration at:</span><br><span class=\"line\">https://www.ssllabs.com/ssltest/analyze.html?d=houjiyi.com</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">IMPORTANT NOTES:</span><br><span class=\"line\"> - Congratulations! Your certificate and chain have been saved at:</span><br><span class=\"line\">   /etc/letsencrypt/live/houjiyi.com/fullchain.pem</span><br><span class=\"line\">   Your key file has been saved at:</span><br><span class=\"line\">   /etc/letsencrypt/live/houjiyi.com/privkey.pem</span><br><span class=\"line\">   Your cert will expire on 2018-04-02. To obtain a new or tweaked</span><br><span class=\"line\">   version of this certificate in the future, simply run certbot again</span><br><span class=\"line\">   with the &quot;certonly&quot; option. To non-interactively renew *all* of</span><br><span class=\"line\">   your certificates, run &quot;certbot renew&quot;</span><br><span class=\"line\"> - If you like Certbot, please consider supporting our work by:</span><br><span class=\"line\"></span><br><span class=\"line\">   Donating to ISRG / Let&apos;s Encrypt:   https://letsencrypt.org/donate</span><br><span class=\"line\">   Donating to EFF:                    https://eff.org/donate-le</span><br></pre></td></tr></table></figure>\n<p>上面会告诉你申请的 Let’s Encrypt 证书保存的位置，一般是在：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/letsencrypt/live/主机名</span><br></pre></td></tr></table></figure>\n<p>再打开网站的 Nginx 配置检查一下，配置里会有一些东西是 Certbot 自动添加的，配置的后面都会有注释 managed by Certbot：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen        80;</span><br><span class=\"line\">    server_name   houjiyi.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\">    ssl_certificate /etc/letsencrypt/live/houjiyi.com/fullchain.pem;</span><br><span class=\"line\">    ssl_certificate_key /etc/letsencrypt/live/houjiyi.com/privkey.pem;</span><br><span class=\"line\">    include /etc/letsencrypt/options-ssl-nginx.conf;</span><br><span class=\"line\">    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    if ($scheme = &quot;https&quot;) &#123;</span><br><span class=\"line\">        return 301 https://www.$host$request_uri;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果你只想为跟 Nginx 绑定的主机名申请证书，不想让 Certbot 修改 Nginx 的配置，可以执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot --nginx certonly</span><br></pre></td></tr></table></figure>\n<h3 id=\"网站运行在申请-SSL-证书以外的服务器上\"><a href=\"#网站运行在申请-SSL-证书以外的服务器上\" class=\"headerlink\" title=\"网站运行在申请 SSL 证书以外的服务器上\"></a>网站运行在申请 SSL 证书以外的服务器上</h3><p>我们在一个 CentOS 服务器上，也可以为运行在其它服务器上的网站申请 Let’s Encrypt 证书，只需要多做一步验证。</p>\n<p>执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot certonly --manual</span><br></pre></td></tr></table></figure>\n<p>提示让你输入想要申请证书的主机名：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Saving debug log to /var/log/letsencrypt/letsencrypt.log</span><br><span class=\"line\">Plugins selected: Authenticator manual, Installer None</span><br><span class=\"line\">Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org</span><br><span class=\"line\">Please enter in your domain name(s) (comma and/or space separated)  (Enter &apos;c&apos;</span><br><span class=\"line\">to cancel): t2.m.le.com</span><br></pre></td></tr></table></figure>\n<p>继续又会提示要记录服务器的 IP 地址，是不是同意这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Obtaining a new certificate</span><br><span class=\"line\">Performing the following challenges:</span><br><span class=\"line\">http-01 challenge for t2.m.le.com</span><br><span class=\"line\"></span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">NOTE: The IP of this machine will be publicly logged as having requested this</span><br><span class=\"line\">certificate. If you&apos;re running certbot in manual mode on a machine that is not</span><br><span class=\"line\">your server, please ensure you&apos;re okay with that.</span><br><span class=\"line\"></span><br><span class=\"line\">Are you OK with your IP being logged?</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">(Y)es/(N)o: Y</span><br></pre></td></tr></table></figure>\n<p>下面要做一步验证，把一串字符放在指定的文件里，而且要用指定的路径可以访问到这个文件，这样就可以完成验证了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Create a file containing just this data:</span><br><span class=\"line\"></span><br><span class=\"line\">KIad2acPdKiF5pLpjlv4fK19PJDchhO7ClJZI_P3zbw.dfvuyqod4KGCve8xM-wotdjimoIXlfb6a4dkaSFN7LI</span><br><span class=\"line\"></span><br><span class=\"line\">And make it available on your web server at this URL:</span><br><span class=\"line\"></span><br><span class=\"line\">http://t2.m.le.com/.well-known/acme-challenge/KIad2acPdKiF5pLpjlv4fK19PJDchhO7ClJZI_P3zbw</span><br><span class=\"line\"></span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">Press Enter to Continue</span><br></pre></td></tr></table></figure>\n<p>一切正常，验证通过就会签发证书：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Waiting for verification...</span><br><span class=\"line\">Cleaning up challenges</span><br><span class=\"line\"></span><br><span class=\"line\">IMPORTANT NOTES:</span><br><span class=\"line\"> - Congratulations! Your certificate and chain have been saved at:</span><br><span class=\"line\">   /etc/letsencrypt/live/t2.m.le.com/fullchain.pem</span><br><span class=\"line\">   Your key file has been saved at:</span><br><span class=\"line\">   /etc/letsencrypt/live/t2.m.le.com/privkey.pem</span><br><span class=\"line\">   Your cert will expire on 2018-03-12. To obtain a new or tweaked</span><br><span class=\"line\">   version of this certificate in the future, simply run certbot</span><br><span class=\"line\">   again. To non-interactively renew *all* of your certificates, run</span><br><span class=\"line\">   &quot;certbot renew&quot;</span><br><span class=\"line\"> - If you like Certbot, please consider supporting our work by:</span><br><span class=\"line\"></span><br><span class=\"line\">   Donating to ISRG / Let&apos;s Encrypt:   https://letsencrypt.org/donate</span><br><span class=\"line\">   Donating to EFF:                    https://eff.org/donate-le</span><br></pre></td></tr></table></figure>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>阿里云申请的免费的赛门铁克的证书有效期是一年，同时赛门铁克证书在以后的chrome版本可能不被信任，<br>因此换一个证书。这个证书有效期为3个月，到期后操作一遍即可。</p>\n","site":{"data":{}},"excerpt":"<p>申请 Let’s Encrypt 提供的免费 SSL 证书，配置网站使用 HTTPS，让网站应用更安全。<br>直接在运行网站的服务器上去申请 SSL 证书更方便一些，你也可以在一台服务器上去为在<br>其它服务器上运行的网站申请 SSL 证书，这需要做额外的验证。操作都非常简单，不用紧张：）<br>","more":"<br>我在一台 CentOS  7 服务器上申请了 Let’s Encrypt 签发的 SSL 证书，我的网站的 Web 服务器用的是 Nginx。</p>\n<h2 id=\"安装EPEL仓库\"><a href=\"#安装EPEL仓库\" class=\"headerlink\" title=\"安装EPEL仓库\"></a>安装EPEL仓库</h2><p>在 CentOS 的 EPEL 仓库里可以找到签发 Let’s Encrypt 证书用的工具。所以先安装一下这个仓库，执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install epel-release -y</span><br></pre></td></tr></table></figure>\n<p>公司内网不能用，可以在本地虚拟机安装，然后通过下边的『为其他服务器申请证书的流程走』</p>\n<h2 id=\"安装签发证书工具\"><a href=\"#安装签发证书工具\" class=\"headerlink\" title=\"安装签发证书工具\"></a>安装签发证书工具</h2><p>用 Certbot 工具申请 Let’s Encrypt 证书，先安装一下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install certbot-nginx</span><br></pre></td></tr></table></figure>\n<p>运行 certbot 工具时报错：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ImportError: No module named &apos;requests.packages.urllib3&apos;</span><br></pre></td></tr></table></figure>\n<p>执行下面的命令解决了上面的问题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install --upgrade --force-reinstall &apos;requests==2.6.0&apos; urllib3</span><br></pre></td></tr></table></figure>\n<h2 id=\"申请证书\"><a href=\"#申请证书\" class=\"headerlink\" title=\"申请证书\"></a>申请证书</h2><h3 id=\"网站运行在申请-SSL-证书用的服务器上\"><a href=\"#网站运行在申请-SSL-证书用的服务器上\" class=\"headerlink\" title=\"网站运行在申请 SSL 证书用的服务器上\"></a>网站运行在申请 SSL 证书用的服务器上</h3><p>你要申请 SSL 证书的主机名已经指向了申请用的服务器的 IP 地址，<br>在服务器上用的是 Nginx Web 服务器。保证 Nginx 正在运行，并<br>且已经配置好了 Nginx ，绑定上了要申请 SSL 证书的主机名。就是<br>你应该在 Nginx 的配置里面，有一个配置是为要申请 SSL 证书的主<br>机名准备的。</p>\n<p>一开始我们在服务器上安装的 Certbot 可以自动修改指定主机名的<br> Nginx 配置，为主机名申请证书，下载证书，并且会自动修改 Nginx<br> 的配置，让它支持 HTTPS。</p>\n<p>执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot --nginx</span><br></pre></td></tr></table></figure>\n<p>Certbot 会自动查找当前服务器上的 Nginx 里面的虚拟主机。提示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Saving debug log to /var/log/letsencrypt/letsencrypt.log</span><br><span class=\"line\">Plugins selected: Authenticator nginx, Installer nginx</span><br><span class=\"line\">Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org</span><br><span class=\"line\"></span><br><span class=\"line\">Which names would you like to activate HTTPS for?</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">1: houjiyi.com</span><br><span class=\"line\">2: galary.houjiyi.com</span><br><span class=\"line\">3: www.houjiyi.com</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">Select the appropriate numbers separated by commas and/or spaces, or leave input</span><br><span class=\"line\">blank to select all options shown (Enter &apos;c&apos; to cancel):</span><br></pre></td></tr></table></figure>\n<p>比如我的服务器上有两个 Nginx 虚拟主机，上面会提示想给哪个主机名申请 SSL 证书，输入序号选择，<br>或留为空白直接回车选择所有。验证成功，Let’s Encrypt 就会立即给你签发 SSL 证书，并且会自动<br>修改主机的 Nginx 配置，让它支持 HTTPS。过程中会提示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Obtaining a new certificate</span><br><span class=\"line\">Performing the following challenges:</span><br><span class=\"line\">tls-sni-01 challenge for houjiyi.com</span><br><span class=\"line\">Waiting for verification...</span><br><span class=\"line\">Cleaning up challenges</span><br><span class=\"line\">Deployed Certificate to VirtualHost /etc/nginx/conf.d/www.conf for set([&apos;houjiyi.com&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">Please choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access.</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">1: No redirect - Make no further changes to the webserver configuration.</span><br><span class=\"line\">2: Redirect - Make all requests redirect to secure HTTPS access. Choose this for</span><br><span class=\"line\">new sites, or if you&apos;re confident your site works on HTTPS. You can undo this</span><br><span class=\"line\">change by editing your web server&apos;s configuration.</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">Select the appropriate number [1-2] then [enter] (press &apos;c&apos; to cancel):</span><br></pre></td></tr></table></figure>\n<p>意思是，想不想把 HTTP 的请求重定向到 HTTPS ，如果选择 Redirect，Certbot 会自动在主机的 Nginx 配置里添加重定向用的配置。成功以后会提示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The appropriate server block is already redirecting traffic. To enable redirect anyway, uncomment the redirect lines in /etc/nginx/conf.d/www.conf.</span><br><span class=\"line\"></span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">Congratulations! You have successfully enabled https://houjiyi.com</span><br><span class=\"line\"></span><br><span class=\"line\">You should test your configuration at:</span><br><span class=\"line\">https://www.ssllabs.com/ssltest/analyze.html?d=houjiyi.com</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">IMPORTANT NOTES:</span><br><span class=\"line\"> - Congratulations! Your certificate and chain have been saved at:</span><br><span class=\"line\">   /etc/letsencrypt/live/houjiyi.com/fullchain.pem</span><br><span class=\"line\">   Your key file has been saved at:</span><br><span class=\"line\">   /etc/letsencrypt/live/houjiyi.com/privkey.pem</span><br><span class=\"line\">   Your cert will expire on 2018-04-02. To obtain a new or tweaked</span><br><span class=\"line\">   version of this certificate in the future, simply run certbot again</span><br><span class=\"line\">   with the &quot;certonly&quot; option. To non-interactively renew *all* of</span><br><span class=\"line\">   your certificates, run &quot;certbot renew&quot;</span><br><span class=\"line\"> - If you like Certbot, please consider supporting our work by:</span><br><span class=\"line\"></span><br><span class=\"line\">   Donating to ISRG / Let&apos;s Encrypt:   https://letsencrypt.org/donate</span><br><span class=\"line\">   Donating to EFF:                    https://eff.org/donate-le</span><br></pre></td></tr></table></figure>\n<p>上面会告诉你申请的 Let’s Encrypt 证书保存的位置，一般是在：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/letsencrypt/live/主机名</span><br></pre></td></tr></table></figure>\n<p>再打开网站的 Nginx 配置检查一下，配置里会有一些东西是 Certbot 自动添加的，配置的后面都会有注释 managed by Certbot：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen        80;</span><br><span class=\"line\">    server_name   houjiyi.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\">    ssl_certificate /etc/letsencrypt/live/houjiyi.com/fullchain.pem;</span><br><span class=\"line\">    ssl_certificate_key /etc/letsencrypt/live/houjiyi.com/privkey.pem;</span><br><span class=\"line\">    include /etc/letsencrypt/options-ssl-nginx.conf;</span><br><span class=\"line\">    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    if ($scheme = &quot;https&quot;) &#123;</span><br><span class=\"line\">        return 301 https://www.$host$request_uri;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果你只想为跟 Nginx 绑定的主机名申请证书，不想让 Certbot 修改 Nginx 的配置，可以执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot --nginx certonly</span><br></pre></td></tr></table></figure>\n<h3 id=\"网站运行在申请-SSL-证书以外的服务器上\"><a href=\"#网站运行在申请-SSL-证书以外的服务器上\" class=\"headerlink\" title=\"网站运行在申请 SSL 证书以外的服务器上\"></a>网站运行在申请 SSL 证书以外的服务器上</h3><p>我们在一个 CentOS 服务器上，也可以为运行在其它服务器上的网站申请 Let’s Encrypt 证书，只需要多做一步验证。</p>\n<p>执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot certonly --manual</span><br></pre></td></tr></table></figure>\n<p>提示让你输入想要申请证书的主机名：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Saving debug log to /var/log/letsencrypt/letsencrypt.log</span><br><span class=\"line\">Plugins selected: Authenticator manual, Installer None</span><br><span class=\"line\">Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org</span><br><span class=\"line\">Please enter in your domain name(s) (comma and/or space separated)  (Enter &apos;c&apos;</span><br><span class=\"line\">to cancel): t2.m.le.com</span><br></pre></td></tr></table></figure>\n<p>继续又会提示要记录服务器的 IP 地址，是不是同意这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Obtaining a new certificate</span><br><span class=\"line\">Performing the following challenges:</span><br><span class=\"line\">http-01 challenge for t2.m.le.com</span><br><span class=\"line\"></span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">NOTE: The IP of this machine will be publicly logged as having requested this</span><br><span class=\"line\">certificate. If you&apos;re running certbot in manual mode on a machine that is not</span><br><span class=\"line\">your server, please ensure you&apos;re okay with that.</span><br><span class=\"line\"></span><br><span class=\"line\">Are you OK with your IP being logged?</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">(Y)es/(N)o: Y</span><br></pre></td></tr></table></figure>\n<p>下面要做一步验证，把一串字符放在指定的文件里，而且要用指定的路径可以访问到这个文件，这样就可以完成验证了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Create a file containing just this data:</span><br><span class=\"line\"></span><br><span class=\"line\">KIad2acPdKiF5pLpjlv4fK19PJDchhO7ClJZI_P3zbw.dfvuyqod4KGCve8xM-wotdjimoIXlfb6a4dkaSFN7LI</span><br><span class=\"line\"></span><br><span class=\"line\">And make it available on your web server at this URL:</span><br><span class=\"line\"></span><br><span class=\"line\">http://t2.m.le.com/.well-known/acme-challenge/KIad2acPdKiF5pLpjlv4fK19PJDchhO7ClJZI_P3zbw</span><br><span class=\"line\"></span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">Press Enter to Continue</span><br></pre></td></tr></table></figure>\n<p>一切正常，验证通过就会签发证书：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Waiting for verification...</span><br><span class=\"line\">Cleaning up challenges</span><br><span class=\"line\"></span><br><span class=\"line\">IMPORTANT NOTES:</span><br><span class=\"line\"> - Congratulations! Your certificate and chain have been saved at:</span><br><span class=\"line\">   /etc/letsencrypt/live/t2.m.le.com/fullchain.pem</span><br><span class=\"line\">   Your key file has been saved at:</span><br><span class=\"line\">   /etc/letsencrypt/live/t2.m.le.com/privkey.pem</span><br><span class=\"line\">   Your cert will expire on 2018-03-12. To obtain a new or tweaked</span><br><span class=\"line\">   version of this certificate in the future, simply run certbot</span><br><span class=\"line\">   again. To non-interactively renew *all* of your certificates, run</span><br><span class=\"line\">   &quot;certbot renew&quot;</span><br><span class=\"line\"> - If you like Certbot, please consider supporting our work by:</span><br><span class=\"line\"></span><br><span class=\"line\">   Donating to ISRG / Let&apos;s Encrypt:   https://letsencrypt.org/donate</span><br><span class=\"line\">   Donating to EFF:                    https://eff.org/donate-le</span><br></pre></td></tr></table></figure>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>阿里云申请的免费的赛门铁克的证书有效期是一年，同时赛门铁克证书在以后的chrome版本可能不被信任，<br>因此换一个证书。这个证书有效期为3个月，到期后操作一遍即可。</p>"},{"title":"PWA 入门: 写个非常简单的 PWA 页面","originContent":"","toc":false,"date":"2020-07-13T06:53:36.000Z","_content":"\nProgressive Web Apps 是 Google 提出的用前沿的 Web 技术为网页提供 App 般使用体验的一系列方案。这篇文章里我们来完成一个非常简单的 PWA 页面。\n\n> 一个 PWA 应用首先是一个网页, 可以通过 Web 技术编写出一个网页应用. 随后添加上 App Manifest 和 Service Worker 来实现 PWA 的安装和离线等功能。下面的教程基于 [Migrate your site to a Progressive Web App](https://link.zhihu.com/?target=https%3A//codelabs.developers.google.com/codelabs/migrate-to-progressive-web-apps/index.html%3F%230) 和 Google 给出的 [sample](https://link.zhihu.com/?target=https%3A//github.com/GoogleChrome/samples/tree/gh-pages/service-worker/basic) 示例。完整代码访问 [minimal-pwa](https://link.zhihu.com/?target=https%3A//github.com/yong-chen04/minimal-pwa) 查看。\n\n\n#### 准备工作\n建议安装 [http-server](https://link.zhihu.com/?target=https%3A//www.npmjs.com/package/http-server) 和 [ngrok](https://link.zhihu.com/?target=https%3A//ngrok.com/) 以便调试和查看。\n\n\n准备一个 HTML 文件, 以及相应的 CSS 等:\n\n```html\n<head>\n  <title>Minimal PWA</title>\n  <meta name=\"viewport\" content=\"width=device-width, user-scalable=no\" />\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"main.css\">\n</head>\n<body>\n  <h3>Revision 1</h3>\n  <div class=\"main-text\">Minimal PWA, open Console for more~~~</div>\n</body>\n```\n\n#### 添加 manifest.json 文件\n\n为了让 PWA 应用被添加到主屏幕, 使用 manifest.json 定义应用的名称, 图标等等信息。\n\n```json\n{\n  \"name\": \"Minimal app to try PWA\",\n  \"short_name\": \"Minimal PWA\",\n  \"display\": \"standalone\",\n  \"start_url\": \"/\",\n  \"theme_color\": \"#8888ff\",\n  \"background_color\": \"#aaaaff\",\n  \"icons\": [\n    {\n      \"src\": \"e.png\",\n      \"sizes\": \"256x256\",\n      \"type\": \"image/png\"\n    }\n  ]\n}\n```\n\n然后在 HTML 文件当中引入配置:\n\n```html\n<link rel=\"manifest\" href=\"manifest.json\" />\n```\n\n#### 添加 Service Worker\n\nService Worker 在网页已经关闭的情况下还可以运行, 用来实现页面的缓存和离线, 后台通知等等功能。sw.js 文件需要在 HTML 当中引入:\n\n```html\n<script>\n  if (navigator.serviceWorker != null) {\n    navigator.serviceWorker.register('sw.js')\n    .then(function(registration) {\n      console.log('Registered events at scope: ', registration.scope);\n    });\n  }\n</script>\n```\n\n后面我们会往 sw.js 文件当中添加逻辑代码。在 Service Worker 当中会用到一些全局变量:\n\n\n- self: 表示 Service Worker 作用域, 也是全局变量\n- caches: 表示缓存\n- skipWaiting: 表示强制当前处在 waiting 状态的脚本进入 activate 状态\n- clients: 表示 Service Worker 接管的页面\n\n#### 四级标题处理静态缓存\n\n首先定义需要缓存的路径, 以及需要缓存的静态文件的列表, 这个列表也可以通过 Webpack 插件生成。\n```javascript\nvar cacheStorageKey = 'minimal-pwa-1'\n\nvar cacheList = [\n  '/',\n  \"index.html\",\n  \"main.css\",\n  \"e.png\"\n]\n```\n\n借助 Service Worker, 可以在注册完成安装 Service Worker 时, 抓取资源写入缓存:\n\n```javascript\nself.addEventListener('install', e => {\n  e.waitUntil(\n    caches.open(cacheStorageKey)\n    .then(cache => cache.addAll(cacheList))\n    .then(() => self.skipWaiting())\n  )\n})\n```\n\n调用 self.skipWaiting() 方法是为了在页面更新的过程当中, 新的 Service Worker 脚本能立即激活和生效。\n\n\n#### 处理动态缓存\n\n网页抓取资源的过程中, 在 Service Worker 可以捕获到 fetch 事件, 可以编写代码决定如何响应资源的请求:\n\n```javascript\nself.addEventListener('fetch', function(e) {\n  e.respondWith(\n    caches.match(e.request).then(function(response) {\n      if (response != null) {\n        return response\n      }\n      return fetch(e.request.url)\n    })\n  )\n})\n```\n\n真实的项目当中, 可以根据资源的类型, 站点的特点, 可以专门设计复杂的策略。fetch 事件当中甚至可以手动生成 Response 返回给页面。\n\n#### 更新静态资源\n\n缓存的资源随着版本的更新会过期, 所以会根据缓存的字符串名称(这里变量为 cacheStorageKey, 值用了 \"minimal-pwa-1\")清除旧缓存, 可以遍历所有的缓存名称逐一判断决决定是否清除(备注: 简化的写法, Promise.all 中 return undefined 可能出错, 见评论):\n```javascript\nself.addEventListener('activate', function(e) {\n  e.waitUntil(\n    Promise.all(\n      caches.keys().then(cacheNames => {\n        return cacheNames.map(name => {\n          if (name !== cacheStorageKey) {\n            return caches.delete(name)\n          }\n        })\n      })\n    ).then(() => {\n      return self.clients.claim()\n    })\n  )\n})\n```\n\n在新安装的 Service Worker 中通过调用 self.clients.claim() 取得页面的控制权, 这样之后打开页面都会使用版本更新的缓存。旧的 Service Worker 脚本不再控制着页面之后会被停止。\n\n\n#### 查看 Demo\n\n执行命令:\n```python\nhttp-server -c-1 # 注意设置关闭缓存, 这里用参数 -c-1\n# 用另一个终端\nngrok http 8080\n```\n\n桌面浏览器可以直接通过 http://localhost:8080 访问, 从 DevTools 的 Application 标签可以看到 Service Worker。\n\n\n由于 Service Worker 限制了使用 HTTPS 地址或者 localhost 地址, 在 Android Chrome 打开需要借助 ngrok 生成的 HTTPS 地址, 这样才能把 demo 添加到首屏。添加到首屏之后, 即便在离线状态下, 页面也可以打开。\n\n![image.png](http://blogimage.houjiyi.com/FpwQxFgVNH1q6GvPAwQym352GcuL)\n\n从 DevTools 可以看到, 普通页面刷新时, 列表当中的静态资源都是从 Service Worker 获取的:\n\n![image.png](http://blogimage.houjiyi.com/Ft4QfH0NL-81HC1jotmd6lqojFdy)\n\n#### 更新页面\n页面被缓存之后, 就需要适当处理缓存失效时页面的更新。在这个 Demo 当中, 被缓存的资源是无法发起请求判断是否被更新的, 只有 sw.js 会自动根据 HTTP 缓存的机制尝试去判断应用是否被更新。\n\n所以当页面发生修改时, 要同时对 sw.js 文件进行一次修改。比如在 HTML 当中更新版本到 2:\n```html\n<h3>Revision 2</h3>\n```\n\n同时 sw.js 文件当中也要进行一次修改, 保证文件发生改变, 同时缓存的名称也变改变了:\n\n```javascript\nvar cacheStorageKey = 'minimal-pwa-2'\n```\n\n然后重新打开一次页面, 这个时候渲染的页面依然是旧的, 不过可以从 DevTools 看到 sw.js 被安装和激活。之后关闭页面, 再次打开, 就可以见到网页上的显示版本变成了 2。\n\n\n\n> 注意: Demo 当中如果直接启动 http-server 而不使用 -c-1 关闭缓存, sw.js 可能被缓存住, 导致更新方案失败。这种情况下存在 Caches API 和 HTML caching 两层缓存, 需要进行清理才能完成更新。\n\n#### 更多\n你还可以实现一个 App Shell, 可以用 Service Worker 实现后台通知等功能。\n\n\n参考你的首个 [Progressive Web App](https://link.zhihu.com/?target=https%3A//developers.google.com/web/fundamentals/getting-started/codelabs/your-first-pwapp/%3Fhl%3Dzh-cn%23firebase) 了解更加详细的编写 PWA 应用的方式。","source":"_posts/PWA-入门-写个非常简单的-PWA-页面.md","raw":"---\ntitle: 'PWA 入门: 写个非常简单的 PWA 页面'\ntags:\n  - PWA\n  - 知识点备忘\noriginContent: ''\ncategories:\n  - Web开发\ntoc: false\ndate: 2020-07-13 14:53:36\n---\n\nProgressive Web Apps 是 Google 提出的用前沿的 Web 技术为网页提供 App 般使用体验的一系列方案。这篇文章里我们来完成一个非常简单的 PWA 页面。\n\n> 一个 PWA 应用首先是一个网页, 可以通过 Web 技术编写出一个网页应用. 随后添加上 App Manifest 和 Service Worker 来实现 PWA 的安装和离线等功能。下面的教程基于 [Migrate your site to a Progressive Web App](https://link.zhihu.com/?target=https%3A//codelabs.developers.google.com/codelabs/migrate-to-progressive-web-apps/index.html%3F%230) 和 Google 给出的 [sample](https://link.zhihu.com/?target=https%3A//github.com/GoogleChrome/samples/tree/gh-pages/service-worker/basic) 示例。完整代码访问 [minimal-pwa](https://link.zhihu.com/?target=https%3A//github.com/yong-chen04/minimal-pwa) 查看。\n\n\n#### 准备工作\n建议安装 [http-server](https://link.zhihu.com/?target=https%3A//www.npmjs.com/package/http-server) 和 [ngrok](https://link.zhihu.com/?target=https%3A//ngrok.com/) 以便调试和查看。\n\n\n准备一个 HTML 文件, 以及相应的 CSS 等:\n\n```html\n<head>\n  <title>Minimal PWA</title>\n  <meta name=\"viewport\" content=\"width=device-width, user-scalable=no\" />\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"main.css\">\n</head>\n<body>\n  <h3>Revision 1</h3>\n  <div class=\"main-text\">Minimal PWA, open Console for more~~~</div>\n</body>\n```\n\n#### 添加 manifest.json 文件\n\n为了让 PWA 应用被添加到主屏幕, 使用 manifest.json 定义应用的名称, 图标等等信息。\n\n```json\n{\n  \"name\": \"Minimal app to try PWA\",\n  \"short_name\": \"Minimal PWA\",\n  \"display\": \"standalone\",\n  \"start_url\": \"/\",\n  \"theme_color\": \"#8888ff\",\n  \"background_color\": \"#aaaaff\",\n  \"icons\": [\n    {\n      \"src\": \"e.png\",\n      \"sizes\": \"256x256\",\n      \"type\": \"image/png\"\n    }\n  ]\n}\n```\n\n然后在 HTML 文件当中引入配置:\n\n```html\n<link rel=\"manifest\" href=\"manifest.json\" />\n```\n\n#### 添加 Service Worker\n\nService Worker 在网页已经关闭的情况下还可以运行, 用来实现页面的缓存和离线, 后台通知等等功能。sw.js 文件需要在 HTML 当中引入:\n\n```html\n<script>\n  if (navigator.serviceWorker != null) {\n    navigator.serviceWorker.register('sw.js')\n    .then(function(registration) {\n      console.log('Registered events at scope: ', registration.scope);\n    });\n  }\n</script>\n```\n\n后面我们会往 sw.js 文件当中添加逻辑代码。在 Service Worker 当中会用到一些全局变量:\n\n\n- self: 表示 Service Worker 作用域, 也是全局变量\n- caches: 表示缓存\n- skipWaiting: 表示强制当前处在 waiting 状态的脚本进入 activate 状态\n- clients: 表示 Service Worker 接管的页面\n\n#### 四级标题处理静态缓存\n\n首先定义需要缓存的路径, 以及需要缓存的静态文件的列表, 这个列表也可以通过 Webpack 插件生成。\n```javascript\nvar cacheStorageKey = 'minimal-pwa-1'\n\nvar cacheList = [\n  '/',\n  \"index.html\",\n  \"main.css\",\n  \"e.png\"\n]\n```\n\n借助 Service Worker, 可以在注册完成安装 Service Worker 时, 抓取资源写入缓存:\n\n```javascript\nself.addEventListener('install', e => {\n  e.waitUntil(\n    caches.open(cacheStorageKey)\n    .then(cache => cache.addAll(cacheList))\n    .then(() => self.skipWaiting())\n  )\n})\n```\n\n调用 self.skipWaiting() 方法是为了在页面更新的过程当中, 新的 Service Worker 脚本能立即激活和生效。\n\n\n#### 处理动态缓存\n\n网页抓取资源的过程中, 在 Service Worker 可以捕获到 fetch 事件, 可以编写代码决定如何响应资源的请求:\n\n```javascript\nself.addEventListener('fetch', function(e) {\n  e.respondWith(\n    caches.match(e.request).then(function(response) {\n      if (response != null) {\n        return response\n      }\n      return fetch(e.request.url)\n    })\n  )\n})\n```\n\n真实的项目当中, 可以根据资源的类型, 站点的特点, 可以专门设计复杂的策略。fetch 事件当中甚至可以手动生成 Response 返回给页面。\n\n#### 更新静态资源\n\n缓存的资源随着版本的更新会过期, 所以会根据缓存的字符串名称(这里变量为 cacheStorageKey, 值用了 \"minimal-pwa-1\")清除旧缓存, 可以遍历所有的缓存名称逐一判断决决定是否清除(备注: 简化的写法, Promise.all 中 return undefined 可能出错, 见评论):\n```javascript\nself.addEventListener('activate', function(e) {\n  e.waitUntil(\n    Promise.all(\n      caches.keys().then(cacheNames => {\n        return cacheNames.map(name => {\n          if (name !== cacheStorageKey) {\n            return caches.delete(name)\n          }\n        })\n      })\n    ).then(() => {\n      return self.clients.claim()\n    })\n  )\n})\n```\n\n在新安装的 Service Worker 中通过调用 self.clients.claim() 取得页面的控制权, 这样之后打开页面都会使用版本更新的缓存。旧的 Service Worker 脚本不再控制着页面之后会被停止。\n\n\n#### 查看 Demo\n\n执行命令:\n```python\nhttp-server -c-1 # 注意设置关闭缓存, 这里用参数 -c-1\n# 用另一个终端\nngrok http 8080\n```\n\n桌面浏览器可以直接通过 http://localhost:8080 访问, 从 DevTools 的 Application 标签可以看到 Service Worker。\n\n\n由于 Service Worker 限制了使用 HTTPS 地址或者 localhost 地址, 在 Android Chrome 打开需要借助 ngrok 生成的 HTTPS 地址, 这样才能把 demo 添加到首屏。添加到首屏之后, 即便在离线状态下, 页面也可以打开。\n\n![image.png](http://blogimage.houjiyi.com/FpwQxFgVNH1q6GvPAwQym352GcuL)\n\n从 DevTools 可以看到, 普通页面刷新时, 列表当中的静态资源都是从 Service Worker 获取的:\n\n![image.png](http://blogimage.houjiyi.com/Ft4QfH0NL-81HC1jotmd6lqojFdy)\n\n#### 更新页面\n页面被缓存之后, 就需要适当处理缓存失效时页面的更新。在这个 Demo 当中, 被缓存的资源是无法发起请求判断是否被更新的, 只有 sw.js 会自动根据 HTTP 缓存的机制尝试去判断应用是否被更新。\n\n所以当页面发生修改时, 要同时对 sw.js 文件进行一次修改。比如在 HTML 当中更新版本到 2:\n```html\n<h3>Revision 2</h3>\n```\n\n同时 sw.js 文件当中也要进行一次修改, 保证文件发生改变, 同时缓存的名称也变改变了:\n\n```javascript\nvar cacheStorageKey = 'minimal-pwa-2'\n```\n\n然后重新打开一次页面, 这个时候渲染的页面依然是旧的, 不过可以从 DevTools 看到 sw.js 被安装和激活。之后关闭页面, 再次打开, 就可以见到网页上的显示版本变成了 2。\n\n\n\n> 注意: Demo 当中如果直接启动 http-server 而不使用 -c-1 关闭缓存, sw.js 可能被缓存住, 导致更新方案失败。这种情况下存在 Caches API 和 HTML caching 两层缓存, 需要进行清理才能完成更新。\n\n#### 更多\n你还可以实现一个 App Shell, 可以用 Service Worker 实现后台通知等功能。\n\n\n参考你的首个 [Progressive Web App](https://link.zhihu.com/?target=https%3A//developers.google.com/web/fundamentals/getting-started/codelabs/your-first-pwapp/%3Fhl%3Dzh-cn%23firebase) 了解更加详细的编写 PWA 应用的方式。","slug":"PWA-入门-写个非常简单的-PWA-页面","published":1,"updated":"2020-07-13T06:53:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznxj0025h5s6z9ljq8kb","content":"<p>Progressive Web Apps 是 Google 提出的用前沿的 Web 技术为网页提供 App 般使用体验的一系列方案。这篇文章里我们来完成一个非常简单的 PWA 页面。</p>\n<blockquote>\n<p>一个 PWA 应用首先是一个网页, 可以通过 Web 技术编写出一个网页应用. 随后添加上 App Manifest 和 Service Worker 来实现 PWA 的安装和离线等功能。下面的教程基于 <a href=\"https://link.zhihu.com/?target=https%3A//codelabs.developers.google.com/codelabs/migrate-to-progressive-web-apps/index.html%3F%230\" target=\"_blank\" rel=\"noopener\">Migrate your site to a Progressive Web App</a> 和 Google 给出的 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/GoogleChrome/samples/tree/gh-pages/service-worker/basic\" target=\"_blank\" rel=\"noopener\">sample</a> 示例。完整代码访问 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/yong-chen04/minimal-pwa\" target=\"_blank\" rel=\"noopener\">minimal-pwa</a> 查看。</p>\n</blockquote>\n<h4 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h4><p>建议安装 <a href=\"https://link.zhihu.com/?target=https%3A//www.npmjs.com/package/http-server\" target=\"_blank\" rel=\"noopener\">http-server</a> 和 <a href=\"https://link.zhihu.com/?target=https%3A//ngrok.com/\" target=\"_blank\" rel=\"noopener\">ngrok</a> 以便调试和查看。</p>\n<p>准备一个 HTML 文件, 以及相应的 CSS 等:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Minimal PWA<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, user-scalable=no\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Revision 1<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main-text\"</span>&gt;</span>Minimal PWA, open Console for more~~~<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"添加-manifest-json-文件\"><a href=\"#添加-manifest-json-文件\" class=\"headerlink\" title=\"添加 manifest.json 文件\"></a>添加 manifest.json 文件</h4><p>为了让 PWA 应用被添加到主屏幕, 使用 manifest.json 定义应用的名称, 图标等等信息。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Minimal app to try PWA\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"short_name\"</span>: <span class=\"string\">\"Minimal PWA\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"display\"</span>: <span class=\"string\">\"standalone\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"start_url\"</span>: <span class=\"string\">\"/\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"theme_color\"</span>: <span class=\"string\">\"#8888ff\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"background_color\"</span>: <span class=\"string\">\"#aaaaff\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"icons\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"src\"</span>: <span class=\"string\">\"e.png\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"sizes\"</span>: <span class=\"string\">\"256x256\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"image/png\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在 HTML 文件当中引入配置:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"manifest\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"manifest.json\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"添加-Service-Worker\"><a href=\"#添加-Service-Worker\" class=\"headerlink\" title=\"添加 Service Worker\"></a>添加 Service Worker</h4><p>Service Worker 在网页已经关闭的情况下还可以运行, 用来实现页面的缓存和离线, 后台通知等等功能。sw.js 文件需要在 HTML 当中引入:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">if</span> (navigator.serviceWorker != <span class=\"literal\">null</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    navigator.serviceWorker.register(<span class=\"string\">'sw.js'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">registration</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'Registered events at scope: '</span>, registration.scope);</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>后面我们会往 sw.js 文件当中添加逻辑代码。在 Service Worker 当中会用到一些全局变量:</p>\n<ul>\n<li>self: 表示 Service Worker 作用域, 也是全局变量</li>\n<li>caches: 表示缓存</li>\n<li>skipWaiting: 表示强制当前处在 waiting 状态的脚本进入 activate 状态</li>\n<li>clients: 表示 Service Worker 接管的页面</li>\n</ul>\n<h4 id=\"四级标题处理静态缓存\"><a href=\"#四级标题处理静态缓存\" class=\"headerlink\" title=\"四级标题处理静态缓存\"></a>四级标题处理静态缓存</h4><p>首先定义需要缓存的路径, 以及需要缓存的静态文件的列表, 这个列表也可以通过 Webpack 插件生成。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cacheStorageKey = <span class=\"string\">'minimal-pwa-1'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> cacheList = [</span><br><span class=\"line\">  <span class=\"string\">'/'</span>,</span><br><span class=\"line\">  <span class=\"string\">\"index.html\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"main.css\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"e.png\"</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>借助 Service Worker, 可以在注册完成安装 Service Worker 时, 抓取资源写入缓存:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.addEventListener(<span class=\"string\">'install'</span>, e =&gt; &#123;</span><br><span class=\"line\">  e.waitUntil(</span><br><span class=\"line\">    caches.open(cacheStorageKey)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">cache</span> =&gt;</span> cache.addAll(cacheList))</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> self.skipWaiting())</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>调用 self.skipWaiting() 方法是为了在页面更新的过程当中, 新的 Service Worker 脚本能立即激活和生效。</p>\n<h4 id=\"处理动态缓存\"><a href=\"#处理动态缓存\" class=\"headerlink\" title=\"处理动态缓存\"></a>处理动态缓存</h4><p>网页抓取资源的过程中, 在 Service Worker 可以捕获到 fetch 事件, 可以编写代码决定如何响应资源的请求:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.addEventListener(<span class=\"string\">'fetch'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  e.respondWith(</span><br><span class=\"line\">    caches.match(e.request).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (response != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> fetch(e.request.url)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>真实的项目当中, 可以根据资源的类型, 站点的特点, 可以专门设计复杂的策略。fetch 事件当中甚至可以手动生成 Response 返回给页面。</p>\n<h4 id=\"更新静态资源\"><a href=\"#更新静态资源\" class=\"headerlink\" title=\"更新静态资源\"></a>更新静态资源</h4><p>缓存的资源随着版本的更新会过期, 所以会根据缓存的字符串名称(这里变量为 cacheStorageKey, 值用了 “minimal-pwa-1”)清除旧缓存, 可以遍历所有的缓存名称逐一判断决决定是否清除(备注: 简化的写法, Promise.all 中 return undefined 可能出错, 见评论):<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.addEventListener(<span class=\"string\">'activate'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  e.waitUntil(</span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.all(</span><br><span class=\"line\">      caches.keys().then(<span class=\"function\"><span class=\"params\">cacheNames</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cacheNames.map(<span class=\"function\"><span class=\"params\">name</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (name !== cacheStorageKey) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> caches.delete(name)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> self.clients.claim()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>在新安装的 Service Worker 中通过调用 self.clients.claim() 取得页面的控制权, 这样之后打开页面都会使用版本更新的缓存。旧的 Service Worker 脚本不再控制着页面之后会被停止。</p>\n<h4 id=\"查看-Demo\"><a href=\"#查看-Demo\" class=\"headerlink\" title=\"查看 Demo\"></a>查看 Demo</h4><p>执行命令:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http-server -c<span class=\"number\">-1</span> <span class=\"comment\"># 注意设置关闭缓存, 这里用参数 -c-1</span></span><br><span class=\"line\"><span class=\"comment\"># 用另一个终端</span></span><br><span class=\"line\">ngrok http <span class=\"number\">8080</span></span><br></pre></td></tr></table></figure></p>\n<p>桌面浏览器可以直接通过 <a href=\"http://localhost:8080\" target=\"_blank\" rel=\"noopener\">http://localhost:8080</a> 访问, 从 DevTools 的 Application 标签可以看到 Service Worker。</p>\n<p>由于 Service Worker 限制了使用 HTTPS 地址或者 localhost 地址, 在 Android Chrome 打开需要借助 ngrok 生成的 HTTPS 地址, 这样才能把 demo 添加到首屏。添加到首屏之后, 即便在离线状态下, 页面也可以打开。</p>\n<p><img src=\"http://blogimage.houjiyi.com/FpwQxFgVNH1q6GvPAwQym352GcuL\" alt=\"image.png\"></p>\n<p>从 DevTools 可以看到, 普通页面刷新时, 列表当中的静态资源都是从 Service Worker 获取的:</p>\n<p><img src=\"http://blogimage.houjiyi.com/Ft4QfH0NL-81HC1jotmd6lqojFdy\" alt=\"image.png\"></p>\n<h4 id=\"更新页面\"><a href=\"#更新页面\" class=\"headerlink\" title=\"更新页面\"></a>更新页面</h4><p>页面被缓存之后, 就需要适当处理缓存失效时页面的更新。在这个 Demo 当中, 被缓存的资源是无法发起请求判断是否被更新的, 只有 sw.js 会自动根据 HTTP 缓存的机制尝试去判断应用是否被更新。</p>\n<p>所以当页面发生修改时, 要同时对 sw.js 文件进行一次修改。比如在 HTML 当中更新版本到 2:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Revision 2<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>同时 sw.js 文件当中也要进行一次修改, 保证文件发生改变, 同时缓存的名称也变改变了:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cacheStorageKey = <span class=\"string\">'minimal-pwa-2'</span></span><br></pre></td></tr></table></figure>\n<p>然后重新打开一次页面, 这个时候渲染的页面依然是旧的, 不过可以从 DevTools 看到 sw.js 被安装和激活。之后关闭页面, 再次打开, 就可以见到网页上的显示版本变成了 2。</p>\n<blockquote>\n<p>注意: Demo 当中如果直接启动 http-server 而不使用 -c-1 关闭缓存, sw.js 可能被缓存住, 导致更新方案失败。这种情况下存在 Caches API 和 HTML caching 两层缓存, 需要进行清理才能完成更新。</p>\n</blockquote>\n<h4 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h4><p>你还可以实现一个 App Shell, 可以用 Service Worker 实现后台通知等功能。</p>\n<p>参考你的首个 <a href=\"https://link.zhihu.com/?target=https%3A//developers.google.com/web/fundamentals/getting-started/codelabs/your-first-pwapp/%3Fhl%3Dzh-cn%23firebase\" target=\"_blank\" rel=\"noopener\">Progressive Web App</a> 了解更加详细的编写 PWA 应用的方式。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Progressive Web Apps 是 Google 提出的用前沿的 Web 技术为网页提供 App 般使用体验的一系列方案。这篇文章里我们来完成一个非常简单的 PWA 页面。</p>\n<blockquote>\n<p>一个 PWA 应用首先是一个网页, 可以通过 Web 技术编写出一个网页应用. 随后添加上 App Manifest 和 Service Worker 来实现 PWA 的安装和离线等功能。下面的教程基于 <a href=\"https://link.zhihu.com/?target=https%3A//codelabs.developers.google.com/codelabs/migrate-to-progressive-web-apps/index.html%3F%230\" target=\"_blank\" rel=\"noopener\">Migrate your site to a Progressive Web App</a> 和 Google 给出的 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/GoogleChrome/samples/tree/gh-pages/service-worker/basic\" target=\"_blank\" rel=\"noopener\">sample</a> 示例。完整代码访问 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/yong-chen04/minimal-pwa\" target=\"_blank\" rel=\"noopener\">minimal-pwa</a> 查看。</p>\n</blockquote>\n<h4 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h4><p>建议安装 <a href=\"https://link.zhihu.com/?target=https%3A//www.npmjs.com/package/http-server\" target=\"_blank\" rel=\"noopener\">http-server</a> 和 <a href=\"https://link.zhihu.com/?target=https%3A//ngrok.com/\" target=\"_blank\" rel=\"noopener\">ngrok</a> 以便调试和查看。</p>\n<p>准备一个 HTML 文件, 以及相应的 CSS 等:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Minimal PWA<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, user-scalable=no\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Revision 1<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main-text\"</span>&gt;</span>Minimal PWA, open Console for more~~~<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"添加-manifest-json-文件\"><a href=\"#添加-manifest-json-文件\" class=\"headerlink\" title=\"添加 manifest.json 文件\"></a>添加 manifest.json 文件</h4><p>为了让 PWA 应用被添加到主屏幕, 使用 manifest.json 定义应用的名称, 图标等等信息。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Minimal app to try PWA\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"short_name\"</span>: <span class=\"string\">\"Minimal PWA\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"display\"</span>: <span class=\"string\">\"standalone\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"start_url\"</span>: <span class=\"string\">\"/\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"theme_color\"</span>: <span class=\"string\">\"#8888ff\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"background_color\"</span>: <span class=\"string\">\"#aaaaff\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"icons\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"src\"</span>: <span class=\"string\">\"e.png\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"sizes\"</span>: <span class=\"string\">\"256x256\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"image/png\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在 HTML 文件当中引入配置:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"manifest\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"manifest.json\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"添加-Service-Worker\"><a href=\"#添加-Service-Worker\" class=\"headerlink\" title=\"添加 Service Worker\"></a>添加 Service Worker</h4><p>Service Worker 在网页已经关闭的情况下还可以运行, 用来实现页面的缓存和离线, 后台通知等等功能。sw.js 文件需要在 HTML 当中引入:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">if</span> (navigator.serviceWorker != <span class=\"literal\">null</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    navigator.serviceWorker.register(<span class=\"string\">'sw.js'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">registration</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'Registered events at scope: '</span>, registration.scope);</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>后面我们会往 sw.js 文件当中添加逻辑代码。在 Service Worker 当中会用到一些全局变量:</p>\n<ul>\n<li>self: 表示 Service Worker 作用域, 也是全局变量</li>\n<li>caches: 表示缓存</li>\n<li>skipWaiting: 表示强制当前处在 waiting 状态的脚本进入 activate 状态</li>\n<li>clients: 表示 Service Worker 接管的页面</li>\n</ul>\n<h4 id=\"四级标题处理静态缓存\"><a href=\"#四级标题处理静态缓存\" class=\"headerlink\" title=\"四级标题处理静态缓存\"></a>四级标题处理静态缓存</h4><p>首先定义需要缓存的路径, 以及需要缓存的静态文件的列表, 这个列表也可以通过 Webpack 插件生成。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cacheStorageKey = <span class=\"string\">'minimal-pwa-1'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> cacheList = [</span><br><span class=\"line\">  <span class=\"string\">'/'</span>,</span><br><span class=\"line\">  <span class=\"string\">\"index.html\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"main.css\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"e.png\"</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>借助 Service Worker, 可以在注册完成安装 Service Worker 时, 抓取资源写入缓存:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.addEventListener(<span class=\"string\">'install'</span>, e =&gt; &#123;</span><br><span class=\"line\">  e.waitUntil(</span><br><span class=\"line\">    caches.open(cacheStorageKey)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">cache</span> =&gt;</span> cache.addAll(cacheList))</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> self.skipWaiting())</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>调用 self.skipWaiting() 方法是为了在页面更新的过程当中, 新的 Service Worker 脚本能立即激活和生效。</p>\n<h4 id=\"处理动态缓存\"><a href=\"#处理动态缓存\" class=\"headerlink\" title=\"处理动态缓存\"></a>处理动态缓存</h4><p>网页抓取资源的过程中, 在 Service Worker 可以捕获到 fetch 事件, 可以编写代码决定如何响应资源的请求:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.addEventListener(<span class=\"string\">'fetch'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  e.respondWith(</span><br><span class=\"line\">    caches.match(e.request).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (response != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> fetch(e.request.url)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>真实的项目当中, 可以根据资源的类型, 站点的特点, 可以专门设计复杂的策略。fetch 事件当中甚至可以手动生成 Response 返回给页面。</p>\n<h4 id=\"更新静态资源\"><a href=\"#更新静态资源\" class=\"headerlink\" title=\"更新静态资源\"></a>更新静态资源</h4><p>缓存的资源随着版本的更新会过期, 所以会根据缓存的字符串名称(这里变量为 cacheStorageKey, 值用了 “minimal-pwa-1”)清除旧缓存, 可以遍历所有的缓存名称逐一判断决决定是否清除(备注: 简化的写法, Promise.all 中 return undefined 可能出错, 见评论):<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.addEventListener(<span class=\"string\">'activate'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  e.waitUntil(</span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.all(</span><br><span class=\"line\">      caches.keys().then(<span class=\"function\"><span class=\"params\">cacheNames</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cacheNames.map(<span class=\"function\"><span class=\"params\">name</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (name !== cacheStorageKey) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> caches.delete(name)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> self.clients.claim()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>在新安装的 Service Worker 中通过调用 self.clients.claim() 取得页面的控制权, 这样之后打开页面都会使用版本更新的缓存。旧的 Service Worker 脚本不再控制着页面之后会被停止。</p>\n<h4 id=\"查看-Demo\"><a href=\"#查看-Demo\" class=\"headerlink\" title=\"查看 Demo\"></a>查看 Demo</h4><p>执行命令:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http-server -c<span class=\"number\">-1</span> <span class=\"comment\"># 注意设置关闭缓存, 这里用参数 -c-1</span></span><br><span class=\"line\"><span class=\"comment\"># 用另一个终端</span></span><br><span class=\"line\">ngrok http <span class=\"number\">8080</span></span><br></pre></td></tr></table></figure></p>\n<p>桌面浏览器可以直接通过 <a href=\"http://localhost:8080\" target=\"_blank\" rel=\"noopener\">http://localhost:8080</a> 访问, 从 DevTools 的 Application 标签可以看到 Service Worker。</p>\n<p>由于 Service Worker 限制了使用 HTTPS 地址或者 localhost 地址, 在 Android Chrome 打开需要借助 ngrok 生成的 HTTPS 地址, 这样才能把 demo 添加到首屏。添加到首屏之后, 即便在离线状态下, 页面也可以打开。</p>\n<p><img src=\"http://blogimage.houjiyi.com/FpwQxFgVNH1q6GvPAwQym352GcuL\" alt=\"image.png\"></p>\n<p>从 DevTools 可以看到, 普通页面刷新时, 列表当中的静态资源都是从 Service Worker 获取的:</p>\n<p><img src=\"http://blogimage.houjiyi.com/Ft4QfH0NL-81HC1jotmd6lqojFdy\" alt=\"image.png\"></p>\n<h4 id=\"更新页面\"><a href=\"#更新页面\" class=\"headerlink\" title=\"更新页面\"></a>更新页面</h4><p>页面被缓存之后, 就需要适当处理缓存失效时页面的更新。在这个 Demo 当中, 被缓存的资源是无法发起请求判断是否被更新的, 只有 sw.js 会自动根据 HTTP 缓存的机制尝试去判断应用是否被更新。</p>\n<p>所以当页面发生修改时, 要同时对 sw.js 文件进行一次修改。比如在 HTML 当中更新版本到 2:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Revision 2<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>同时 sw.js 文件当中也要进行一次修改, 保证文件发生改变, 同时缓存的名称也变改变了:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cacheStorageKey = <span class=\"string\">'minimal-pwa-2'</span></span><br></pre></td></tr></table></figure>\n<p>然后重新打开一次页面, 这个时候渲染的页面依然是旧的, 不过可以从 DevTools 看到 sw.js 被安装和激活。之后关闭页面, 再次打开, 就可以见到网页上的显示版本变成了 2。</p>\n<blockquote>\n<p>注意: Demo 当中如果直接启动 http-server 而不使用 -c-1 关闭缓存, sw.js 可能被缓存住, 导致更新方案失败。这种情况下存在 Caches API 和 HTML caching 两层缓存, 需要进行清理才能完成更新。</p>\n</blockquote>\n<h4 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h4><p>你还可以实现一个 App Shell, 可以用 Service Worker 实现后台通知等功能。</p>\n<p>参考你的首个 <a href=\"https://link.zhihu.com/?target=https%3A//developers.google.com/web/fundamentals/getting-started/codelabs/your-first-pwapp/%3Fhl%3Dzh-cn%23firebase\" target=\"_blank\" rel=\"noopener\">Progressive Web App</a> 了解更加详细的编写 PWA 应用的方式。</p>\n"},{"title":"SQL基础","toc":false,"date":"2018-02-26T07:12:24.000Z","_content":"\n## SQL分类\nSQL语句主要可以划分为一下三个类别。\n\n1. DDL（Data Definition Languages）语句：数据定义语句，这些语句定义了不同的数据段、数据库、表、列、索引等数据库对象。常用的语句关键字主要包括create、drop、alter等。\n2. DML（Data Manipulation Languages）语句：数据操作语句，用于添加、删除、更新和查询数据库记录，并检验数据完整性。常用的语句关键字主要包括insert、delete、update和select等。\n3. DCL（Data Control Language）语句：数据控制语句，用于控制不同数据段直接的许可和访问级别的语句。这些语句定义了数据库、表、字段、用户的访问权限和安全级别。主要的关键字包括grant、revoke等。\n\n## DDL语句\n","source":"_posts/SQL基础.md","raw":"---\ntitle: SQL基础\ntags:\n  - mysql\ncategories:\n  - 后端开发\ntoc: false\ndate: 2018-02-26 15:12:24\n---\n\n## SQL分类\nSQL语句主要可以划分为一下三个类别。\n\n1. DDL（Data Definition Languages）语句：数据定义语句，这些语句定义了不同的数据段、数据库、表、列、索引等数据库对象。常用的语句关键字主要包括create、drop、alter等。\n2. DML（Data Manipulation Languages）语句：数据操作语句，用于添加、删除、更新和查询数据库记录，并检验数据完整性。常用的语句关键字主要包括insert、delete、update和select等。\n3. DCL（Data Control Language）语句：数据控制语句，用于控制不同数据段直接的许可和访问级别的语句。这些语句定义了数据库、表、字段、用户的访问权限和安全级别。主要的关键字包括grant、revoke等。\n\n## DDL语句\n","slug":"SQL基础","published":1,"updated":"2019-11-07T02:17:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznxk0029h5s6ziza8hll","content":"<h2 id=\"SQL分类\"><a href=\"#SQL分类\" class=\"headerlink\" title=\"SQL分类\"></a>SQL分类</h2><p>SQL语句主要可以划分为一下三个类别。</p>\n<ol>\n<li>DDL（Data Definition Languages）语句：数据定义语句，这些语句定义了不同的数据段、数据库、表、列、索引等数据库对象。常用的语句关键字主要包括create、drop、alter等。</li>\n<li>DML（Data Manipulation Languages）语句：数据操作语句，用于添加、删除、更新和查询数据库记录，并检验数据完整性。常用的语句关键字主要包括insert、delete、update和select等。</li>\n<li>DCL（Data Control Language）语句：数据控制语句，用于控制不同数据段直接的许可和访问级别的语句。这些语句定义了数据库、表、字段、用户的访问权限和安全级别。主要的关键字包括grant、revoke等。</li>\n</ol>\n<h2 id=\"DDL语句\"><a href=\"#DDL语句\" class=\"headerlink\" title=\"DDL语句\"></a>DDL语句</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"SQL分类\"><a href=\"#SQL分类\" class=\"headerlink\" title=\"SQL分类\"></a>SQL分类</h2><p>SQL语句主要可以划分为一下三个类别。</p>\n<ol>\n<li>DDL（Data Definition Languages）语句：数据定义语句，这些语句定义了不同的数据段、数据库、表、列、索引等数据库对象。常用的语句关键字主要包括create、drop、alter等。</li>\n<li>DML（Data Manipulation Languages）语句：数据操作语句，用于添加、删除、更新和查询数据库记录，并检验数据完整性。常用的语句关键字主要包括insert、delete、update和select等。</li>\n<li>DCL（Data Control Language）语句：数据控制语句，用于控制不同数据段直接的许可和访问级别的语句。这些语句定义了数据库、表、字段、用户的访问权限和安全级别。主要的关键字包括grant、revoke等。</li>\n</ol>\n<h2 id=\"DDL语句\"><a href=\"#DDL语句\" class=\"headerlink\" title=\"DDL语句\"></a>DDL语句</h2>"},{"title":"byte[]数组与十六进制字符串与字符串的互相转换(java)","toc":false,"date":"2019-04-09T03:30:23.000Z","_content":"\n字符串转换成十六进制字符串方法1：\n```java\n    /** \n     * 字符串转换成十六进制字符串\n     */  \n    public static String str2HexStr(String str) {  \n        char[] chars = \"0123456789ABCDEF\".toCharArray();  \n        StringBuilder sb = new StringBuilder(\"\");\n        byte[] bs = str.getBytes();  \n        int bit;  \n        for (int i = 0; i < bs.length; i++) {  \n            bit = (bs[i] & 0x0f0) >> 4;  \n            sb.append(chars[bit]);  \n            bit = bs[i] & 0x0f;  \n            sb.append(chars[bit]);  \n        }  \n        return sb.toString();  \n    } \n```\n\n十六进制字符串转换成为数组方法1：\n\n ```java\n  /**\n   * 把16进制字符串转换成字节数组\n   * @param hexString\n   * @return byte[]\n   */\n  public static byte[] hexStringToByte(String hex) {\n   int len = (hex.length() / 2);\n   byte[] result = new byte[len];\n   char[] achar = hex.toCharArray();\n   for (int i = 0; i < len; i++) {\n    int pos = i * 2;\n    result[i] = (byte) (toByte(achar[pos]) << 4 | toByte(achar[pos + 1]));\n   }\n   return result;\n  }\n  \n private static int toByte(char c) {\n    byte b = (byte) \"0123456789ABCDEF\".indexOf(c);\n    return b;\n }\n\n```\n<!-- more -->\n\n数组转换成十六进制字符串方法1：\n\n ```java\n /**\n  * 数组转换成十六进制字符串\n  * @param byte[]\n  * @return HexString\n  */\n public static final String bytesToHexString(byte[] bArray) {\n  StringBuffer sb = new StringBuffer(bArray.length);\n  String sTemp;\n  for (int i = 0; i < bArray.length; i++) {\n   sTemp = Integer.toHexString(0xFF & bArray[i]);\n   if (sTemp.length() < 2)\n    sb.append(0);\n   sb.append(sTemp.toUpperCase());\n  }\n  return sb.toString();\n }\n\n```\n\n\nbyte[]数组转换成十六进制字符串方法2：\n\n   ```java\n    /**\n     * 数组转成十六进制字符串\n     * @param byte[]\n     * @return HexString\n     */\n    public static String toHexString1(byte[] b){\n        StringBuffer buffer = new StringBuffer();\n        for (int i = 0; i < b.length; ++i){\n            buffer.append(toHexString1(b[i]));\n        }\n        return buffer.toString();\n    }\n    public static String toHexString1(byte b){\n        String s = Integer.toHexString(b & 0xFF);\n        if (s.length() == 1){\n            return \"0\" + s;\n        }else{\n            return s;\n        }\n    }\n\n```\n\n\n十六进制字符串转换字符串方法1：\n\n ```java\n /**\n  * 十六进制字符串转换成字符串\n  * @param hexString\n  * @return String\n  */\n    public static String hexStr2Str(String hexStr) { \n\n        String str = \"0123456789ABCDEF\";  \n        char[] hexs = hexStr.toCharArray();  \n        byte[] bytes = new byte[hexStr.length() / 2];  \n        int n;  \n        for (int i = 0; i < bytes.length; i++) {  \n            n = str.indexOf(hexs[2 * i]) * 16;  \n            n += str.indexOf(hexs[2 * i + 1]);  \n            bytes[i] = (byte) (n & 0xff);  \n        }  \n        return new String(bytes);  \n    }\n\n```\n\n十六进制字符串转换字符串方法2：\n\n ```java\n    /**\n     * 十六进制字符串转换字符串\n     * @param HexString\n     * @return String\n     */\n public static String toStringHex(String s) {\n  byte[] baKeyword = new byte[s.length() / 2];\n  for (int i = 0; i < baKeyword.length; i++) {\n   try {\n    baKeyword[i] = (byte) (0xff & Integer.parseInt(s.substring(\n      i * 2, i * 2 + 2), 16));\n   } catch (Exception e) {\n    e.printStackTrace();\n   }\n  }\n  try {\n   s = new String(baKeyword, \"utf-8\");// UTF-16le:Not\n  } catch (Exception e1) {\n   e1.printStackTrace();\n  }\n  return s;\n }\n\n```\n","source":"_posts/byte-数组与十六进制字符串与字符串的互相转换-java.md","raw":"---\ntitle: 'byte[]数组与十六进制字符串与字符串的互相转换(java)'\ntags:\n  - java\ncategories:\n  - 后端开发\ntoc: false\ndate: 2019-04-09 11:30:23\n---\n\n字符串转换成十六进制字符串方法1：\n```java\n    /** \n     * 字符串转换成十六进制字符串\n     */  \n    public static String str2HexStr(String str) {  \n        char[] chars = \"0123456789ABCDEF\".toCharArray();  \n        StringBuilder sb = new StringBuilder(\"\");\n        byte[] bs = str.getBytes();  \n        int bit;  \n        for (int i = 0; i < bs.length; i++) {  \n            bit = (bs[i] & 0x0f0) >> 4;  \n            sb.append(chars[bit]);  \n            bit = bs[i] & 0x0f;  \n            sb.append(chars[bit]);  \n        }  \n        return sb.toString();  \n    } \n```\n\n十六进制字符串转换成为数组方法1：\n\n ```java\n  /**\n   * 把16进制字符串转换成字节数组\n   * @param hexString\n   * @return byte[]\n   */\n  public static byte[] hexStringToByte(String hex) {\n   int len = (hex.length() / 2);\n   byte[] result = new byte[len];\n   char[] achar = hex.toCharArray();\n   for (int i = 0; i < len; i++) {\n    int pos = i * 2;\n    result[i] = (byte) (toByte(achar[pos]) << 4 | toByte(achar[pos + 1]));\n   }\n   return result;\n  }\n  \n private static int toByte(char c) {\n    byte b = (byte) \"0123456789ABCDEF\".indexOf(c);\n    return b;\n }\n\n```\n<!-- more -->\n\n数组转换成十六进制字符串方法1：\n\n ```java\n /**\n  * 数组转换成十六进制字符串\n  * @param byte[]\n  * @return HexString\n  */\n public static final String bytesToHexString(byte[] bArray) {\n  StringBuffer sb = new StringBuffer(bArray.length);\n  String sTemp;\n  for (int i = 0; i < bArray.length; i++) {\n   sTemp = Integer.toHexString(0xFF & bArray[i]);\n   if (sTemp.length() < 2)\n    sb.append(0);\n   sb.append(sTemp.toUpperCase());\n  }\n  return sb.toString();\n }\n\n```\n\n\nbyte[]数组转换成十六进制字符串方法2：\n\n   ```java\n    /**\n     * 数组转成十六进制字符串\n     * @param byte[]\n     * @return HexString\n     */\n    public static String toHexString1(byte[] b){\n        StringBuffer buffer = new StringBuffer();\n        for (int i = 0; i < b.length; ++i){\n            buffer.append(toHexString1(b[i]));\n        }\n        return buffer.toString();\n    }\n    public static String toHexString1(byte b){\n        String s = Integer.toHexString(b & 0xFF);\n        if (s.length() == 1){\n            return \"0\" + s;\n        }else{\n            return s;\n        }\n    }\n\n```\n\n\n十六进制字符串转换字符串方法1：\n\n ```java\n /**\n  * 十六进制字符串转换成字符串\n  * @param hexString\n  * @return String\n  */\n    public static String hexStr2Str(String hexStr) { \n\n        String str = \"0123456789ABCDEF\";  \n        char[] hexs = hexStr.toCharArray();  \n        byte[] bytes = new byte[hexStr.length() / 2];  \n        int n;  \n        for (int i = 0; i < bytes.length; i++) {  \n            n = str.indexOf(hexs[2 * i]) * 16;  \n            n += str.indexOf(hexs[2 * i + 1]);  \n            bytes[i] = (byte) (n & 0xff);  \n        }  \n        return new String(bytes);  \n    }\n\n```\n\n十六进制字符串转换字符串方法2：\n\n ```java\n    /**\n     * 十六进制字符串转换字符串\n     * @param HexString\n     * @return String\n     */\n public static String toStringHex(String s) {\n  byte[] baKeyword = new byte[s.length() / 2];\n  for (int i = 0; i < baKeyword.length; i++) {\n   try {\n    baKeyword[i] = (byte) (0xff & Integer.parseInt(s.substring(\n      i * 2, i * 2 + 2), 16));\n   } catch (Exception e) {\n    e.printStackTrace();\n   }\n  }\n  try {\n   s = new String(baKeyword, \"utf-8\");// UTF-16le:Not\n  } catch (Exception e1) {\n   e1.printStackTrace();\n  }\n  return s;\n }\n\n```\n","slug":"byte-数组与十六进制字符串与字符串的互相转换-java","published":1,"updated":"2019-11-07T02:17:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznxl002ch5s6347voydl","content":"<p>字符串转换成十六进制字符串方法1：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * 字符串转换成十六进制字符串</span></span><br><span class=\"line\"><span class=\"comment\"> */</span>  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">str2HexStr</span><span class=\"params\">(String str)</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] chars = <span class=\"string\">\"0123456789ABCDEF\"</span>.toCharArray();  </span><br><span class=\"line\">    StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] bs = str.getBytes();  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> bit;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; bs.length; i++) &#123;  </span><br><span class=\"line\">        bit = (bs[i] &amp; <span class=\"number\">0x0f0</span>) &gt;&gt; <span class=\"number\">4</span>;  </span><br><span class=\"line\">        sb.append(chars[bit]);  </span><br><span class=\"line\">        bit = bs[i] &amp; <span class=\"number\">0x0f</span>;  </span><br><span class=\"line\">        sb.append(chars[bit]);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb.toString();  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>十六进制字符串转换成为数组方法1：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 把16进制字符串转换成字节数组</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> hexString</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@return</span> byte[]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] hexStringToByte(String hex) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> len = (hex.length() / <span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"keyword\">byte</span>[] result = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[len];</span><br><span class=\"line\">  <span class=\"keyword\">char</span>[] achar = hex.toCharArray();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> pos = i * <span class=\"number\">2</span>;</span><br><span class=\"line\">   result[i] = (<span class=\"keyword\">byte</span>) (toByte(achar[pos]) &lt;&lt; <span class=\"number\">4</span> | toByte(achar[pos + <span class=\"number\">1</span>]));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">toByte</span><span class=\"params\">(<span class=\"keyword\">char</span> c)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">byte</span> b = (<span class=\"keyword\">byte</span>) <span class=\"string\">\"0123456789ABCDEF\"</span>.indexOf(c);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>数组转换成十六进制字符串方法1：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 数组转换成十六进制字符串</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> byte[]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> HexString</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String <span class=\"title\">bytesToHexString</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] bArray)</span> </span>&#123;</span><br><span class=\"line\"> StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer(bArray.length);</span><br><span class=\"line\"> String sTemp;</span><br><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; bArray.length; i++) &#123;</span><br><span class=\"line\">  sTemp = Integer.toHexString(<span class=\"number\">0xFF</span> &amp; bArray[i]);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sTemp.length() &lt; <span class=\"number\">2</span>)</span><br><span class=\"line\">   sb.append(<span class=\"number\">0</span>);</span><br><span class=\"line\">  sb.append(sTemp.toUpperCase());</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>byte[]数组转换成十六进制字符串方法2：</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 数组转成十六进制字符串</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> byte[]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> HexString</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">toHexString1</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] b)</span></span>&#123;</span><br><span class=\"line\">    StringBuffer buffer = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; b.length; ++i)&#123;</span><br><span class=\"line\">        buffer.append(toHexString1(b[i]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> buffer.toString();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">toHexString1</span><span class=\"params\">(<span class=\"keyword\">byte</span> b)</span></span>&#123;</span><br><span class=\"line\">    String s = Integer.toHexString(b &amp; <span class=\"number\">0xFF</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s.length() == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"0\"</span> + s;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>十六进制字符串转换字符串方法1：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 十六进制字符串转换成字符串</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> hexString</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> String</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">hexStr2Str</span><span class=\"params\">(String hexStr)</span> </span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">       String str = <span class=\"string\">\"0123456789ABCDEF\"</span>;  </span><br><span class=\"line\">       <span class=\"keyword\">char</span>[] hexs = hexStr.toCharArray();  </span><br><span class=\"line\">       <span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[hexStr.length() / <span class=\"number\">2</span>];  </span><br><span class=\"line\">       <span class=\"keyword\">int</span> n;  </span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; bytes.length; i++) &#123;  </span><br><span class=\"line\">           n = str.indexOf(hexs[<span class=\"number\">2</span> * i]) * <span class=\"number\">16</span>;  </span><br><span class=\"line\">           n += str.indexOf(hexs[<span class=\"number\">2</span> * i + <span class=\"number\">1</span>]);  </span><br><span class=\"line\">           bytes[i] = (<span class=\"keyword\">byte</span>) (n &amp; <span class=\"number\">0xff</span>);  </span><br><span class=\"line\">       &#125;  </span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String(bytes);  </span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>十六进制字符串转换字符串方法2：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 十六进制字符串转换字符串</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> HexString</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> String</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">toStringHex</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">byte</span>[] baKeyword = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[s.length() / <span class=\"number\">2</span>];</span><br><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; baKeyword.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   baKeyword[i] = (<span class=\"keyword\">byte</span>) (<span class=\"number\">0xff</span> &amp; Integer.parseInt(s.substring(</span><br><span class=\"line\">     i * <span class=\"number\">2</span>, i * <span class=\"number\">2</span> + <span class=\"number\">2</span>), <span class=\"number\">16</span>));</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">   e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  s = <span class=\"keyword\">new</span> String(baKeyword, <span class=\"string\">\"utf-8\"</span>);<span class=\"comment\">// UTF-16le:Not</span></span><br><span class=\"line\"> &#125; <span class=\"keyword\">catch</span> (Exception e1) &#123;</span><br><span class=\"line\">  e1.printStackTrace();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>字符串转换成十六进制字符串方法1：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * 字符串转换成十六进制字符串</span></span><br><span class=\"line\"><span class=\"comment\"> */</span>  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">str2HexStr</span><span class=\"params\">(String str)</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] chars = <span class=\"string\">\"0123456789ABCDEF\"</span>.toCharArray();  </span><br><span class=\"line\">    StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] bs = str.getBytes();  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> bit;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; bs.length; i++) &#123;  </span><br><span class=\"line\">        bit = (bs[i] &amp; <span class=\"number\">0x0f0</span>) &gt;&gt; <span class=\"number\">4</span>;  </span><br><span class=\"line\">        sb.append(chars[bit]);  </span><br><span class=\"line\">        bit = bs[i] &amp; <span class=\"number\">0x0f</span>;  </span><br><span class=\"line\">        sb.append(chars[bit]);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb.toString();  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>十六进制字符串转换成为数组方法1：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 把16进制字符串转换成字节数组</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> hexString</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@return</span> byte[]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] hexStringToByte(String hex) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> len = (hex.length() / <span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"keyword\">byte</span>[] result = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[len];</span><br><span class=\"line\">  <span class=\"keyword\">char</span>[] achar = hex.toCharArray();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> pos = i * <span class=\"number\">2</span>;</span><br><span class=\"line\">   result[i] = (<span class=\"keyword\">byte</span>) (toByte(achar[pos]) &lt;&lt; <span class=\"number\">4</span> | toByte(achar[pos + <span class=\"number\">1</span>]));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">toByte</span><span class=\"params\">(<span class=\"keyword\">char</span> c)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">byte</span> b = (<span class=\"keyword\">byte</span>) <span class=\"string\">\"0123456789ABCDEF\"</span>.indexOf(c);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<p>数组转换成十六进制字符串方法1：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 数组转换成十六进制字符串</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> byte[]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> HexString</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String <span class=\"title\">bytesToHexString</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] bArray)</span> </span>&#123;</span><br><span class=\"line\"> StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer(bArray.length);</span><br><span class=\"line\"> String sTemp;</span><br><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; bArray.length; i++) &#123;</span><br><span class=\"line\">  sTemp = Integer.toHexString(<span class=\"number\">0xFF</span> &amp; bArray[i]);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sTemp.length() &lt; <span class=\"number\">2</span>)</span><br><span class=\"line\">   sb.append(<span class=\"number\">0</span>);</span><br><span class=\"line\">  sb.append(sTemp.toUpperCase());</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>byte[]数组转换成十六进制字符串方法2：</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 数组转成十六进制字符串</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> byte[]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> HexString</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">toHexString1</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] b)</span></span>&#123;</span><br><span class=\"line\">    StringBuffer buffer = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; b.length; ++i)&#123;</span><br><span class=\"line\">        buffer.append(toHexString1(b[i]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> buffer.toString();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">toHexString1</span><span class=\"params\">(<span class=\"keyword\">byte</span> b)</span></span>&#123;</span><br><span class=\"line\">    String s = Integer.toHexString(b &amp; <span class=\"number\">0xFF</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s.length() == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"0\"</span> + s;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>十六进制字符串转换字符串方法1：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 十六进制字符串转换成字符串</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> hexString</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> String</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">hexStr2Str</span><span class=\"params\">(String hexStr)</span> </span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">       String str = <span class=\"string\">\"0123456789ABCDEF\"</span>;  </span><br><span class=\"line\">       <span class=\"keyword\">char</span>[] hexs = hexStr.toCharArray();  </span><br><span class=\"line\">       <span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[hexStr.length() / <span class=\"number\">2</span>];  </span><br><span class=\"line\">       <span class=\"keyword\">int</span> n;  </span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; bytes.length; i++) &#123;  </span><br><span class=\"line\">           n = str.indexOf(hexs[<span class=\"number\">2</span> * i]) * <span class=\"number\">16</span>;  </span><br><span class=\"line\">           n += str.indexOf(hexs[<span class=\"number\">2</span> * i + <span class=\"number\">1</span>]);  </span><br><span class=\"line\">           bytes[i] = (<span class=\"keyword\">byte</span>) (n &amp; <span class=\"number\">0xff</span>);  </span><br><span class=\"line\">       &#125;  </span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String(bytes);  </span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>十六进制字符串转换字符串方法2：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 十六进制字符串转换字符串</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> HexString</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> String</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">toStringHex</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">byte</span>[] baKeyword = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[s.length() / <span class=\"number\">2</span>];</span><br><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; baKeyword.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   baKeyword[i] = (<span class=\"keyword\">byte</span>) (<span class=\"number\">0xff</span> &amp; Integer.parseInt(s.substring(</span><br><span class=\"line\">     i * <span class=\"number\">2</span>, i * <span class=\"number\">2</span> + <span class=\"number\">2</span>), <span class=\"number\">16</span>));</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">   e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  s = <span class=\"keyword\">new</span> String(baKeyword, <span class=\"string\">\"utf-8\"</span>);<span class=\"comment\">// UTF-16le:Not</span></span><br><span class=\"line\"> &#125; <span class=\"keyword\">catch</span> (Exception e1) &#123;</span><br><span class=\"line\">  e1.printStackTrace();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"adonis websocket client报错","toc":false,"date":"2019-06-13T08:15:39.000Z","_content":"\n在使用adonis websocket client连接的时候浏览器报错：\n![image.png](http://blogimage.houjiyi.com/Fo2YsZApigoSxX_TdmCoID8kxdxc)\n\n查资料找到了解决办法：\n1. 首先安装@babel/polyfill `npm install --save @babel/polyfill`\n2. 然后在main.js中引入即可\n![image.png](http://blogimage.houjiyi.com/Fhoa4uqXbPm8182bvV5FzJzM-Cs7)\n\n\n再次运行OK了：\n![image.png](http://blogimage.houjiyi.com/Fj9mKFQcK-v_e_LCjCgqpThOG7ri)\n","source":"_posts/adonis-websocket-client报错.md","raw":"---\ntitle: adonis websocket client报错\ntags:\n  - javascript\ncategories:\n  - Web开发\ntoc: false\ndate: 2019-06-13 16:15:39\n---\n\n在使用adonis websocket client连接的时候浏览器报错：\n![image.png](http://blogimage.houjiyi.com/Fo2YsZApigoSxX_TdmCoID8kxdxc)\n\n查资料找到了解决办法：\n1. 首先安装@babel/polyfill `npm install --save @babel/polyfill`\n2. 然后在main.js中引入即可\n![image.png](http://blogimage.houjiyi.com/Fhoa4uqXbPm8182bvV5FzJzM-Cs7)\n\n\n再次运行OK了：\n![image.png](http://blogimage.houjiyi.com/Fj9mKFQcK-v_e_LCjCgqpThOG7ri)\n","slug":"adonis-websocket-client报错","published":1,"updated":"2019-11-07T02:17:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznxn002fh5s6905nr8db","content":"<p>在使用adonis websocket client连接的时候浏览器报错：<br><img src=\"http://blogimage.houjiyi.com/Fo2YsZApigoSxX_TdmCoID8kxdxc\" alt=\"image.png\"></p>\n<p>查资料找到了解决办法：</p>\n<ol>\n<li>首先安装@babel/polyfill <code>npm install --save @babel/polyfill</code></li>\n<li>然后在main.js中引入即可<br><img src=\"http://blogimage.houjiyi.com/Fhoa4uqXbPm8182bvV5FzJzM-Cs7\" alt=\"image.png\"></li>\n</ol>\n<p>再次运行OK了：<br><img src=\"http://blogimage.houjiyi.com/Fj9mKFQcK-v_e_LCjCgqpThOG7ri\" alt=\"image.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在使用adonis websocket client连接的时候浏览器报错：<br><img src=\"http://blogimage.houjiyi.com/Fo2YsZApigoSxX_TdmCoID8kxdxc\" alt=\"image.png\"></p>\n<p>查资料找到了解决办法：</p>\n<ol>\n<li>首先安装@babel/polyfill <code>npm install --save @babel/polyfill</code></li>\n<li>然后在main.js中引入即可<br><img src=\"http://blogimage.houjiyi.com/Fhoa4uqXbPm8182bvV5FzJzM-Cs7\" alt=\"image.png\"></li>\n</ol>\n<p>再次运行OK了：<br><img src=\"http://blogimage.houjiyi.com/Fj9mKFQcK-v_e_LCjCgqpThOG7ri\" alt=\"image.png\"></p>\n"},{"title":"apicloud结合vue快速开发移动应用","toc":false,"date":"2019-03-26T08:57:15.000Z","_content":"\n当我们使用apicloud开发移动app的时候，如果使用官方推荐的方式，引入一些脚本文件，会觉得非常蹩脚，毕竟vue单页应用已经非常熟悉并且效率极高。\n\n这时候就需要一种方式来吧apicloud跟vue单页应用项目结合起来进行开发，技能发挥vue单页应用的效率，也能同时使用apicloud提供的移动端接口，简直非常方便。\n\n","source":"_posts/apicloud结合vue快速开发移动应用.md","raw":"---\ntitle: apicloud结合vue快速开发移动应用\ntags:\n  - apicloud\ncategories:\n  - 移动开发\ntoc: false\ndate: 2019-03-26 16:57:15\n---\n\n当我们使用apicloud开发移动app的时候，如果使用官方推荐的方式，引入一些脚本文件，会觉得非常蹩脚，毕竟vue单页应用已经非常熟悉并且效率极高。\n\n这时候就需要一种方式来吧apicloud跟vue单页应用项目结合起来进行开发，技能发挥vue单页应用的效率，也能同时使用apicloud提供的移动端接口，简直非常方便。\n\n","slug":"apicloud结合vue快速开发移动应用","published":1,"updated":"2019-11-07T02:17:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznxr002jh5s67smh80uc","content":"<p>当我们使用apicloud开发移动app的时候，如果使用官方推荐的方式，引入一些脚本文件，会觉得非常蹩脚，毕竟vue单页应用已经非常熟悉并且效率极高。</p>\n<p>这时候就需要一种方式来吧apicloud跟vue单页应用项目结合起来进行开发，技能发挥vue单页应用的效率，也能同时使用apicloud提供的移动端接口，简直非常方便。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>当我们使用apicloud开发移动app的时候，如果使用官方推荐的方式，引入一些脚本文件，会觉得非常蹩脚，毕竟vue单页应用已经非常熟悉并且效率极高。</p>\n<p>这时候就需要一种方式来吧apicloud跟vue单页应用项目结合起来进行开发，技能发挥vue单页应用的效率，也能同时使用apicloud提供的移动端接口，简直非常方便。</p>\n"},{"title":"Rewrite功能的配置（1）","toc":false,"date":"2017-09-02T09:21:17.000Z","_content":"\n![游戏机](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/80%E5%90%8E/1cd4edf0c7c6d0e7a7c44120d7197168.jpg)\n\nRewrite 是 Nginx 服务器提供的一个重要基本功能，骑在Web服务器产品中几乎是必备的功能，用于实现URL的重写。URL的重写是非常有用的功能，比如他可以让我们在改变网站结构后，无需要求客户端用户修改原来的书签，也无需其他网站修改对我们网站的友情链接；他还可以在一定程度上提高网站的安全性；能够让我们的网站显得更加专业。\n\n<!-- more -->\n\n适当利用Rewrite功能，可以给我们带来很多好处，这一节我们就重点学习一下 Nginx 服务器的Rewrite功能。Nginx服务器的Rewrite功能的实现依赖于PCRE（Perl Compatible Regular Expressions，Perl兼容的正则表达式）的支持，因此在编译安装Nginx服务器之前，需要安装PCRE库。\n\n> 提示：有关PCRE的介绍和PCRE库的相关下载请参阅其[官方网站](http://www.pcre.org/)。\n> Nginx服务器使用ngx_http_rewrite_module模块解析和处理Rewrite功能的相关配置。\n\n## 『地址重写』与『地址转发』\n\n『地址重写』与『转发』在计算机网络领域是两个重要概念，经常被大家提起。但许多人对这两个概念的区别不清楚，甚至混为一谈。在学习Nginx服务器的Rewrite功能之前，我们有必要先将这对概念进行一下分析和对比，让大家能够有一个清晰的认识。\n\n『地址重写』，实际上是为了实现地址标准化。那么，什么是地址标准化呢？我们来举一个例子。比如在访问Google首页的时候，我们在地址栏中可以输入www.google.com，也可以输入google.cn，他们都能够准确的指向Google首页，从客户端来看，Google首页同时对应了两个地址，实际上，Google服务器是在不同的地址中选择了确定的一个，即www.google.com，进而返回服务器响应的。这个过程就是地址标准化的过程。google.cn这个地址在服务器中被改变为www.google.com的过程就是地址重定向的过程。\n\n『转发』的概念最初和网页的访问并没有太大关系，他是指在网络数据传输过程中数据分组到达路由器或者桥接器后该设备通过检查分组地址并将数据转到相邻局域网上的过程。后来该概念被用在网页访问中，出现了『地址转发』的说法。『地址转发』是指将一个域名知道另一个已有站点的过程。\n\n从上面的解释，我们可以看到『地址重写』和『地址转发』代表的两个过程是不同的。我们可以总结这两个过程的几点区别：\n\n> 地址转发后客户端浏览器中的地址显示时不改变的；而地址重写后客户端浏览器地址栏中的地址改变为服务器选择确定的地址。\n> 在一次地址转发整个过程中，只产生一次网络请求；而一次地址重写一般会产生两次请求。\n> 地址转发一般发生在统一站点项目内；二地址重写没有该限制\n> 地址转发到的页面可以不用全路径名标识，二地址重写到的页面必须使用完整的路径名表示\n> 地址转发过程中，可以将客户端请求的request范围内属性传递给新的页面，但地址重写不可以\n> 地址转发的速度较地址重定向快。\n\n## Rewrite规则\nRewrite规则是学习和使用Nginx服务器Rewrite功能的基础，可以借助PCRE实现URI的重写，并且她还支持Nginx预设变量。Rewrite规则的核心就是PCRE。\n\n正则表达式（Regular Expression，缩写为regex、regexp或RE），是用于描述或者匹配一系列符合某个句法规则的字符串的一个字符串。大家应该都是用过Windows/Dos平台下用于文件查找的通配符\"\\*\" 和 \"?\"，如果要查找某个目录下所有的word文档，就是用\"\\*.doc\"进行搜索，『\\*』会被解释成替换符合某个句法模式的文本内容。许多程序设计语言都支持利用正则表达式进行字符串操作。PCRE就是在Perl中内建的功能强大的正则表达式引擎，可以被许多工具使用的库。正则表达式有多种不同的分割，并且不同版本再对句法规则的匹配处理上也有一定的差异。\n\n在Nginx服务器中，使用ngx_http_rewrite_module模块支持URL重写功能。该模块是Nginx服务器的标准HTTP模块。\n\n由于正则表达式的知识超出了本书的范围，我们不在正文中对其详细阐述。在『附录A』中，笔者为大家整理了PCRE库支持的正则表达式元字符表，并对这些元字符在正则表达式上下文中的行为进行了说明，同时也列举了大量的使用实例供大家参考。\n\n在这里，建议大家学习正则表达式时，一定要将思维从『字符创』的概念转变为『字符』的概念，将『词句』的概念转变为『字』的概念，多结合实例进行操作，这样才能准确理解和运用正则表达式。另外，网络上有不少PCRE正则表达式的测试工具，大家可以搜索下载，这些工具对我们在学习和使用正则表达式的过程中很有帮助。\n\n在Nginx配置中，有关Rewrite的配置指令不多，但是它们已经能够提供比较完善的功能了。\n\n### if指令\n该指令用来支持条件判断，并根据条件判断结果选择不同的Nginx配置，可以在server块或location块中配置该指令，其语法结构为：\n```\nif ( condition ) {...}\n```\n\n其中，花括号代表一个作用域，形成一个if配置块，是条件为真时的Nginx配置。condition为判断条件（true、false），他可以支持以下几种设置方法：\n#### 变量名。\n如果变量的值为空字符串或以『0』开头的任意字符串，if指令认为条件为false，其他情况认为条件为true。比如：\n\n```\nif ($slow) {\n  ... #Nginx 配置\n}\n```\n\n#### 使用'='（等于）和'!='（不等于）\n比较变量和字符串是否相等，相等时if指令为true，反之为false。\n\n```\nif ($request_method = POST) {\n\treturn 405;\n}\n```\n> 注意：这里的字符串不需要加引号。\n\n#### 使用正则表达式对变量进行匹配\n匹配成功时 if 指令认为条件为true，否则为false。变量与正则表达式之间用\"~\"、\"~*\"、\"!~\"或\"!~\\*\"连接，『~』表示匹配过程中对大小写敏感，『~\\*』表示匹配过程中对大小写不敏感；使用『!~』和\"!~\\*\"，匹配失败时if指令认为条件为true，否则为false。在正则表达式中，可以使用小括号对变量值进行截取，在花括号中使用$1...$9引用截取的值。比如：\n\n```\nif ($http_user_agent ~ MSIE) {\n\t# $http_user_agent的值中是否包含有MSIE字符串，如果包含，为true\n\t...\n}\n```\n\n\n\n> 注意：整个正则表达式字符串一般不需要加引号，但如果含有右花括号\"}\"或者分号\";\"字符时，必须要给整个正则表达式添加引号。\n\n#### 判断请求的文件是否存在使用\"-f\"和\"!-f\"。\n当使用\"-f\"时，如果请求的文件存在，if指令认为条件为true，如果请求的文件不存在为false；使用\"!-f\"时，如果请求的文件不存在但该文件所在的目录存在，if指令认为条件为true，如果该文件和她所在的目录都不存在，则为false，如果请求的文件存在，也为false。使用的方法如下：\n\n```\nif (-f $request_filename) {\n\t# 判断请求的文件是否存在\n\t...\n}\nif (!-f $request_filename) {\n\t# 判断请求的文件是否不存在\n}\n```\n\n#### 判断请求的目录是否存在使用\"-d\"和\"!-d\".\n当使用\"-d\"时，如果请求的目录存在，if指令认为条件为true，如果请求的目录不存在，则为false；当使用\"!-d\"时，如果请求的目录不存在但该目录的上级目录存在，if指令认为条件为true，如果该目录和它的上级目录都不存在，则为false，如果请求的目录存在，也为false。使用方式见\"-f\"和\"!-f\"的使用。\n\n#### 判断请求的目录或文件是否存在使用\"-e\"和\"!-e\"。\n当使用\"-e\"时，如果请求的目录或者文件存在时，if指令认为条件为true，否则为false。当使用\"!-e\"时，如果请求的文件和该文件所在路径上的目录都不存在，为true，否则为false。使用方式见\"-f\"和\"!-f\"的使用。\n#### 判断请求的文件是否可执行使用\"-x\"和\"!-x\"。\n当使用\"-x\"时，如果请求的文件可执行，if指令认为条件为true，否则为false；当使用\"!-x\"时，如果请求的文件不可执行，为true，否则为false。使用方法见\"-f\"和\"!-f\"的使用\n\n### break指令\n该指令用于中断当前相同作用域中的其他Nginx配置。与该指令处于同一作用域的Nginx配置中，位于它前面的指令配置生效，位于后面的指令配置无效。Nginx服务器在根据配置处理请求的过程中遇到该指令时，回到上一层作用域继续向下读取配置。该指令可以在server块和location快以及if块中使用，其语法结构为：\n\n```\nbreak;\n```\n\n我们通过一个例子加深理解：\n\n```\nlocation / {\n\tif ($slow) {\n\t\tset $id $1;\t\t\t#处于break指令之前，配置有效\n\t\tbreak;\n\t\tlimit_rate 10k;\t\t#处于break指令之后，配置无效\n\t}\n\t...\t\t\t\t\t\t\t#其他Nginx配置，处于break指令所在作用域的上一层作用域，配置有效\n}\n```\n\n#### return指令\n该指令用于完成对请求的处理，直接向客户端返回响应状态码。处于该指令后的所有Nginx配置都是无效的。该指令可以在server块和location块以及if块中使用，其语法结构有以下几种：\n\n```\nreturn [text];\nreturn code URL;\nreturn URL;\n```\n\n> code，为返回给客户端的HTTP状态代码。可以返回的状态代码为0-999的任意HTTP状态码。非标准的444代码可以强制关闭服务器与客户端的连接而不返回任何响应信息给客户端。\n> \n> text，为返回给客户端的响应体内容，支持变量的使用。`return 200 'hello from nginx;'`\n> \n> URL，为返回给客户端的URL地址。\n\n从Nginx 0.8.42 开始，当code使用301（表示被请求资源永久移动到新的位置）、302（表示请求的资源现在临时从不同的URL响应，要求使用GET昂视请求）、303（表示对应当前请求的相应可以在另一个URL上找到，并且客户端应当采用GET方式访问那个资源）和307（请求的资源临时从不同的URL响应）代码时，可以使用结构2将新的URL返回给客户端；当code使用除上面提到的其他代码时，可以使用结构1指定text想客户端发送指定的响应体内容。\n\n当返回状态吗未302或307时，可以使用结构3对URL进行配置。返回的URL中应该包含\"http://\"、\"https://\"或者直接使用\"$scheme\"变量（Request Scheme，代表传输协议，Nginx内置变量）指定。\n\n> 注意：在Nginx 0.7.51之前的版本中，只支持返回204、400、402-406、608、410、413、416和500-504等状态代码。\n\n### rewrite指令\n该指令通过正则表达式的使用来改变URI。可以同时存在一个或者多个指令，按照顺序依次对URL进行匹配和处理。\n> 提示：\n> \n> URI与URL的区别和联系。\n> \n> URI（Universal Resource Identifier，通用资源标识符），用于对网络中的各种资源进行标识，由存放资源的主机名、片段标识符和相对URI三部分组成。存放资源的主机名一版由传输协议（Scheme）、主机和资源路径三部分组成；片段标识符指向资源内容的具体元素；相对URI表示资源在主机上的相对路径。一版格式为：Scheme:[//][用户名[:密码]@主机名[:端口号]][/资源路径]。\n> \n> URL（Uniform Resource Location，统一资源定位符），是用于在Interner中描述资源的字符串，是URI的子集，主要包括传输协议（Scheme）、主机（IP、端口号或者域名）和资源具体地址（目录和文件名）等三部分。一版格式为：Scheme://主机名[:端口号][/资源路径]。\n\n该指令可以在server块或者location块中配置，其语法结构为：\n```\nrewrite regex replacement [flag];\n```\n\n> regex，用于匹配URI的正则表达式。使用\"()\"标记要截取的内容。\n\n注意：\n\nrewrite接收到的URI不包括host地址。因此，regex不可能匹配到URI的host地址。我们看下面这个例子：\n\n```\nrewrite myweb.com http://newweb.com/parmanent;\n```\n\n现在我们希望上面的rewrite指令重写http://myweb.com/source是办不到的，因为rewrite指令接收到的URI是\"/source\"，不包含\"myweb.com\"。\n\n另外，请求URL中的请求指令是不包含在rewrite指令接收到的URI内容中的。比如:\n\n`http://myweb.com/source?agr1=value&agr2=value2`;\n\nrewrite指令接收到奥的URI为\"source\",不包含\"?agr1=value&agr2=value2\"。\n\n> replacement，成功匹配后用于替换URI中被截取内容的字符串。默认情况下，如果该字符串是由\"http://\"或者\"https://\"开头的，则不会继续向下对URI进行其他处理，而是直接将重写后的URI返回给客户端。\n\n提示：\n\n刚才学习regex变量时我们提到，rewrite模块快接收到的URI不包含请求URL中的请求指令，但是如果我们希望将这些指令传给重写后的URI，该怎么做呢？我们可以使用Nginx全局变量$request_uri，比如：\n`rewrite myweb.com http://example.com$request_uri? permanent;`\n\n注意：\n\n在$request_uri变量后要添加问号\"? \".replacement变量中支持Nginx全局变量的使用，常用的还有$uri和$args等。\n\n> flag，用于设置rewrite对URI的处理行为，可以为以下标志中的一个：\n>> last，终止继续在本location块中处理接收到的URI，并将此处重写的URI作为一个新的URI，使用各location块进行处理。该标识将重写后徐的URI重新再server块中执行，为重写后的URI提供了转入到其他location块的机会。我们通过一个例子来加深理解：\n>> \n```\nlocation / {\n\trewrite ^(/myweb/.*)/media/(.*)\\..*$ $1/mp3/$2.mp3 last;\n\trewrite ^(/myweb/.*)/audio/(.*)\\.*$ $1/mp3/$2.ra last;\n}\n```\n>> 如果URI在第二行被匹配成功并处理，Nginx服务器不会继续使用第三行的配置匹配和处理新的URI，而是让所有的location块重新匹配和处理新的URI。\n>> \n>> break，将此处重写的URI作为一个新的URI，在本快中继续进行处理。该标志将重写后的地址在当前的location块中执行，不会讲新的URI专项到其他的location块。看下面的例子：\n>> \n```\nlocation /myweb/ {\n\trewrite ^(/myweb/.*)/media/(.*)..*$ $1/mp3/$2.mp3 break;\n\trewrite ^(/myweb/.*)/audio/(.*)\\.*$ $1/mp3/$2.ra break;\n}\n```\n如果某URI在第二行被匹配成功并处理，Nginx服务器将新的URI继续在该location块中使用第三行进行匹配和处理。新的URI始终是在同一个location块中。\n>> \n>> redirect, 将重写后的URI返回给客户端，状态代码为302，指明是临时重定向的URI，主要用在replacement变量不是以\"http://\"或者\"https://\"开头的情况下。\n>> \n>> permanent，将重写后的URI返回给客户端，状态码为301，指明是永久重定向URI。\n\n在使用flag指令时，一定要注意各个标志之间的配合。我们再来回顾刚才学习break标志时的例子，对比last标志里的例子，如果我们将第二个例子中的break标志换成last标志，会发生什么情况呢？\n\n细心的读者可能已经发现，在第二个例子中，location块的uri指令是\"/myweb/\"，而重写后的URI仍然是包含\"/myweb/\"的，如果使用last标志，重写后的URI还可能会被该location块匹配到，这样就形成了无限循环。Nginx服务器遇到这样的情况，会尝试10次循环之后返回错误状态代码500。\n\n\n### rewrite_log指令\n该指令配置是否开启URL重写日志的输出功能，其语法结构为：\n```\nrewrite_log on | off;\n```\n默认设置为off。如果配置为开启（on),URL重写的相关日志将以notice级别输出到error_log指令配置的日志文件中。\n\n### set指令\n该指令用于设置一个新的变量，其语法结构为：\n\n```\nset variable value;\n```\n> variable，为变量的名称。注意要用符号\"$\"作为变量的第一个字符，且变量不能与Nginx服务器预设的全局变量同名。\n> \n> value，为变量的值，可以使字符串、其他变量或者变量的组合等。\n\n### uninitialized\\_variable\\_warn指令\n该指令用于配置使用为初始化的变量时，是否记录警告日志，其语法结构为：\n\n```\nuninitialized_variable_warn on | off;\n```\n默认设置为开启（on）状态。\n\n### Rewrite 常用全局变量\n|变量|说明|\n|:---|:---|\n|**$args**|变量中存放了请求URL中的请求指令。比如http://www.myweb.name/server/source?arg1=value1&arg2=value2中的\"arg1=value1&arg2=value2\"|\n|$content_length|变量中存放了请求头中的Content-length字段|\n|$content_type|变量中存放了请求头中的Content-type字段|\n|$document_root|变量中存放了针对当前请求的根路径|\n|$document_uri|变量中存放了请求中的当前URI，并且不包括请求指令，比如http://www.myweb.name/server/source?arg1=value1&arg2=value2中的\"/server/source\"|\n|**$host**|变量中存放了请求URL中的主机部分字段，比如http://www.myweb.name/server中的\"www.myweb.name\"。如果请求中的主机部分字段不可用或者为空，则存放Nginx配置中server块中server_name指令的配置值|\n|$http_user_agent|变量中存放客户端的代理信息|\n|**$http_cookie**|变量中存放客户端的cookie信息|\n|$limit_rate|变量中存放Nginx服务器对网络连接速率的限制，也就是Nginx配置中limit_rate指令的配置值|\n|**$remote_addr**|变量中存放了客户端的地址|\n|$remote_port|变量中存放了客户端与服务器建立连接的端口号|\n|$remote_user|变量中存放了客户端的用户名|\n|$request_body_file|变量中存放了发给后端服务器的本地文件资源的名称|\n|**$request_method**|变量中存放了客户端的请求方式，如『GET』、『POST』等|\n|$request_filename|变量中存放了当前请求的资源文件的路径名|\n|**$request_uri**|变量中存放了当前请求的URI，并且带请求指令|\n|**$query_string**|与变量$args含义相同|\n|**$scheme**|变量中存放了客户端请求使用的协议，比如\"http\"、\"https\"和\"ftp\"等|\n|$server_protocol|变量中存放了客户端请求协议的版本，比如\"HTTP/1.0\"、\"HTTP/1.1\"等|\n|$server_addr|变量中存放了服务器的地址|\n|$server_name|变量中存放了客户端请求到达的服务器的名称|\n|$server_port|变量中存放了客户端请求到达的服务器的端口号|\n|$uri|与变量$document_uri含义相同|\n","source":"_posts/Rewrite功能的配置（1）.md","raw":"---\ntitle: Rewrite功能的配置（1）\ntags:\n  - nginx\ncategories:\n  - 后端开发\ntoc: false\ndate: 2017-09-02 17:21:17\n---\n\n![游戏机](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/80%E5%90%8E/1cd4edf0c7c6d0e7a7c44120d7197168.jpg)\n\nRewrite 是 Nginx 服务器提供的一个重要基本功能，骑在Web服务器产品中几乎是必备的功能，用于实现URL的重写。URL的重写是非常有用的功能，比如他可以让我们在改变网站结构后，无需要求客户端用户修改原来的书签，也无需其他网站修改对我们网站的友情链接；他还可以在一定程度上提高网站的安全性；能够让我们的网站显得更加专业。\n\n<!-- more -->\n\n适当利用Rewrite功能，可以给我们带来很多好处，这一节我们就重点学习一下 Nginx 服务器的Rewrite功能。Nginx服务器的Rewrite功能的实现依赖于PCRE（Perl Compatible Regular Expressions，Perl兼容的正则表达式）的支持，因此在编译安装Nginx服务器之前，需要安装PCRE库。\n\n> 提示：有关PCRE的介绍和PCRE库的相关下载请参阅其[官方网站](http://www.pcre.org/)。\n> Nginx服务器使用ngx_http_rewrite_module模块解析和处理Rewrite功能的相关配置。\n\n## 『地址重写』与『地址转发』\n\n『地址重写』与『转发』在计算机网络领域是两个重要概念，经常被大家提起。但许多人对这两个概念的区别不清楚，甚至混为一谈。在学习Nginx服务器的Rewrite功能之前，我们有必要先将这对概念进行一下分析和对比，让大家能够有一个清晰的认识。\n\n『地址重写』，实际上是为了实现地址标准化。那么，什么是地址标准化呢？我们来举一个例子。比如在访问Google首页的时候，我们在地址栏中可以输入www.google.com，也可以输入google.cn，他们都能够准确的指向Google首页，从客户端来看，Google首页同时对应了两个地址，实际上，Google服务器是在不同的地址中选择了确定的一个，即www.google.com，进而返回服务器响应的。这个过程就是地址标准化的过程。google.cn这个地址在服务器中被改变为www.google.com的过程就是地址重定向的过程。\n\n『转发』的概念最初和网页的访问并没有太大关系，他是指在网络数据传输过程中数据分组到达路由器或者桥接器后该设备通过检查分组地址并将数据转到相邻局域网上的过程。后来该概念被用在网页访问中，出现了『地址转发』的说法。『地址转发』是指将一个域名知道另一个已有站点的过程。\n\n从上面的解释，我们可以看到『地址重写』和『地址转发』代表的两个过程是不同的。我们可以总结这两个过程的几点区别：\n\n> 地址转发后客户端浏览器中的地址显示时不改变的；而地址重写后客户端浏览器地址栏中的地址改变为服务器选择确定的地址。\n> 在一次地址转发整个过程中，只产生一次网络请求；而一次地址重写一般会产生两次请求。\n> 地址转发一般发生在统一站点项目内；二地址重写没有该限制\n> 地址转发到的页面可以不用全路径名标识，二地址重写到的页面必须使用完整的路径名表示\n> 地址转发过程中，可以将客户端请求的request范围内属性传递给新的页面，但地址重写不可以\n> 地址转发的速度较地址重定向快。\n\n## Rewrite规则\nRewrite规则是学习和使用Nginx服务器Rewrite功能的基础，可以借助PCRE实现URI的重写，并且她还支持Nginx预设变量。Rewrite规则的核心就是PCRE。\n\n正则表达式（Regular Expression，缩写为regex、regexp或RE），是用于描述或者匹配一系列符合某个句法规则的字符串的一个字符串。大家应该都是用过Windows/Dos平台下用于文件查找的通配符\"\\*\" 和 \"?\"，如果要查找某个目录下所有的word文档，就是用\"\\*.doc\"进行搜索，『\\*』会被解释成替换符合某个句法模式的文本内容。许多程序设计语言都支持利用正则表达式进行字符串操作。PCRE就是在Perl中内建的功能强大的正则表达式引擎，可以被许多工具使用的库。正则表达式有多种不同的分割，并且不同版本再对句法规则的匹配处理上也有一定的差异。\n\n在Nginx服务器中，使用ngx_http_rewrite_module模块支持URL重写功能。该模块是Nginx服务器的标准HTTP模块。\n\n由于正则表达式的知识超出了本书的范围，我们不在正文中对其详细阐述。在『附录A』中，笔者为大家整理了PCRE库支持的正则表达式元字符表，并对这些元字符在正则表达式上下文中的行为进行了说明，同时也列举了大量的使用实例供大家参考。\n\n在这里，建议大家学习正则表达式时，一定要将思维从『字符创』的概念转变为『字符』的概念，将『词句』的概念转变为『字』的概念，多结合实例进行操作，这样才能准确理解和运用正则表达式。另外，网络上有不少PCRE正则表达式的测试工具，大家可以搜索下载，这些工具对我们在学习和使用正则表达式的过程中很有帮助。\n\n在Nginx配置中，有关Rewrite的配置指令不多，但是它们已经能够提供比较完善的功能了。\n\n### if指令\n该指令用来支持条件判断，并根据条件判断结果选择不同的Nginx配置，可以在server块或location块中配置该指令，其语法结构为：\n```\nif ( condition ) {...}\n```\n\n其中，花括号代表一个作用域，形成一个if配置块，是条件为真时的Nginx配置。condition为判断条件（true、false），他可以支持以下几种设置方法：\n#### 变量名。\n如果变量的值为空字符串或以『0』开头的任意字符串，if指令认为条件为false，其他情况认为条件为true。比如：\n\n```\nif ($slow) {\n  ... #Nginx 配置\n}\n```\n\n#### 使用'='（等于）和'!='（不等于）\n比较变量和字符串是否相等，相等时if指令为true，反之为false。\n\n```\nif ($request_method = POST) {\n\treturn 405;\n}\n```\n> 注意：这里的字符串不需要加引号。\n\n#### 使用正则表达式对变量进行匹配\n匹配成功时 if 指令认为条件为true，否则为false。变量与正则表达式之间用\"~\"、\"~*\"、\"!~\"或\"!~\\*\"连接，『~』表示匹配过程中对大小写敏感，『~\\*』表示匹配过程中对大小写不敏感；使用『!~』和\"!~\\*\"，匹配失败时if指令认为条件为true，否则为false。在正则表达式中，可以使用小括号对变量值进行截取，在花括号中使用$1...$9引用截取的值。比如：\n\n```\nif ($http_user_agent ~ MSIE) {\n\t# $http_user_agent的值中是否包含有MSIE字符串，如果包含，为true\n\t...\n}\n```\n\n\n\n> 注意：整个正则表达式字符串一般不需要加引号，但如果含有右花括号\"}\"或者分号\";\"字符时，必须要给整个正则表达式添加引号。\n\n#### 判断请求的文件是否存在使用\"-f\"和\"!-f\"。\n当使用\"-f\"时，如果请求的文件存在，if指令认为条件为true，如果请求的文件不存在为false；使用\"!-f\"时，如果请求的文件不存在但该文件所在的目录存在，if指令认为条件为true，如果该文件和她所在的目录都不存在，则为false，如果请求的文件存在，也为false。使用的方法如下：\n\n```\nif (-f $request_filename) {\n\t# 判断请求的文件是否存在\n\t...\n}\nif (!-f $request_filename) {\n\t# 判断请求的文件是否不存在\n}\n```\n\n#### 判断请求的目录是否存在使用\"-d\"和\"!-d\".\n当使用\"-d\"时，如果请求的目录存在，if指令认为条件为true，如果请求的目录不存在，则为false；当使用\"!-d\"时，如果请求的目录不存在但该目录的上级目录存在，if指令认为条件为true，如果该目录和它的上级目录都不存在，则为false，如果请求的目录存在，也为false。使用方式见\"-f\"和\"!-f\"的使用。\n\n#### 判断请求的目录或文件是否存在使用\"-e\"和\"!-e\"。\n当使用\"-e\"时，如果请求的目录或者文件存在时，if指令认为条件为true，否则为false。当使用\"!-e\"时，如果请求的文件和该文件所在路径上的目录都不存在，为true，否则为false。使用方式见\"-f\"和\"!-f\"的使用。\n#### 判断请求的文件是否可执行使用\"-x\"和\"!-x\"。\n当使用\"-x\"时，如果请求的文件可执行，if指令认为条件为true，否则为false；当使用\"!-x\"时，如果请求的文件不可执行，为true，否则为false。使用方法见\"-f\"和\"!-f\"的使用\n\n### break指令\n该指令用于中断当前相同作用域中的其他Nginx配置。与该指令处于同一作用域的Nginx配置中，位于它前面的指令配置生效，位于后面的指令配置无效。Nginx服务器在根据配置处理请求的过程中遇到该指令时，回到上一层作用域继续向下读取配置。该指令可以在server块和location快以及if块中使用，其语法结构为：\n\n```\nbreak;\n```\n\n我们通过一个例子加深理解：\n\n```\nlocation / {\n\tif ($slow) {\n\t\tset $id $1;\t\t\t#处于break指令之前，配置有效\n\t\tbreak;\n\t\tlimit_rate 10k;\t\t#处于break指令之后，配置无效\n\t}\n\t...\t\t\t\t\t\t\t#其他Nginx配置，处于break指令所在作用域的上一层作用域，配置有效\n}\n```\n\n#### return指令\n该指令用于完成对请求的处理，直接向客户端返回响应状态码。处于该指令后的所有Nginx配置都是无效的。该指令可以在server块和location块以及if块中使用，其语法结构有以下几种：\n\n```\nreturn [text];\nreturn code URL;\nreturn URL;\n```\n\n> code，为返回给客户端的HTTP状态代码。可以返回的状态代码为0-999的任意HTTP状态码。非标准的444代码可以强制关闭服务器与客户端的连接而不返回任何响应信息给客户端。\n> \n> text，为返回给客户端的响应体内容，支持变量的使用。`return 200 'hello from nginx;'`\n> \n> URL，为返回给客户端的URL地址。\n\n从Nginx 0.8.42 开始，当code使用301（表示被请求资源永久移动到新的位置）、302（表示请求的资源现在临时从不同的URL响应，要求使用GET昂视请求）、303（表示对应当前请求的相应可以在另一个URL上找到，并且客户端应当采用GET方式访问那个资源）和307（请求的资源临时从不同的URL响应）代码时，可以使用结构2将新的URL返回给客户端；当code使用除上面提到的其他代码时，可以使用结构1指定text想客户端发送指定的响应体内容。\n\n当返回状态吗未302或307时，可以使用结构3对URL进行配置。返回的URL中应该包含\"http://\"、\"https://\"或者直接使用\"$scheme\"变量（Request Scheme，代表传输协议，Nginx内置变量）指定。\n\n> 注意：在Nginx 0.7.51之前的版本中，只支持返回204、400、402-406、608、410、413、416和500-504等状态代码。\n\n### rewrite指令\n该指令通过正则表达式的使用来改变URI。可以同时存在一个或者多个指令，按照顺序依次对URL进行匹配和处理。\n> 提示：\n> \n> URI与URL的区别和联系。\n> \n> URI（Universal Resource Identifier，通用资源标识符），用于对网络中的各种资源进行标识，由存放资源的主机名、片段标识符和相对URI三部分组成。存放资源的主机名一版由传输协议（Scheme）、主机和资源路径三部分组成；片段标识符指向资源内容的具体元素；相对URI表示资源在主机上的相对路径。一版格式为：Scheme:[//][用户名[:密码]@主机名[:端口号]][/资源路径]。\n> \n> URL（Uniform Resource Location，统一资源定位符），是用于在Interner中描述资源的字符串，是URI的子集，主要包括传输协议（Scheme）、主机（IP、端口号或者域名）和资源具体地址（目录和文件名）等三部分。一版格式为：Scheme://主机名[:端口号][/资源路径]。\n\n该指令可以在server块或者location块中配置，其语法结构为：\n```\nrewrite regex replacement [flag];\n```\n\n> regex，用于匹配URI的正则表达式。使用\"()\"标记要截取的内容。\n\n注意：\n\nrewrite接收到的URI不包括host地址。因此，regex不可能匹配到URI的host地址。我们看下面这个例子：\n\n```\nrewrite myweb.com http://newweb.com/parmanent;\n```\n\n现在我们希望上面的rewrite指令重写http://myweb.com/source是办不到的，因为rewrite指令接收到的URI是\"/source\"，不包含\"myweb.com\"。\n\n另外，请求URL中的请求指令是不包含在rewrite指令接收到的URI内容中的。比如:\n\n`http://myweb.com/source?agr1=value&agr2=value2`;\n\nrewrite指令接收到奥的URI为\"source\",不包含\"?agr1=value&agr2=value2\"。\n\n> replacement，成功匹配后用于替换URI中被截取内容的字符串。默认情况下，如果该字符串是由\"http://\"或者\"https://\"开头的，则不会继续向下对URI进行其他处理，而是直接将重写后的URI返回给客户端。\n\n提示：\n\n刚才学习regex变量时我们提到，rewrite模块快接收到的URI不包含请求URL中的请求指令，但是如果我们希望将这些指令传给重写后的URI，该怎么做呢？我们可以使用Nginx全局变量$request_uri，比如：\n`rewrite myweb.com http://example.com$request_uri? permanent;`\n\n注意：\n\n在$request_uri变量后要添加问号\"? \".replacement变量中支持Nginx全局变量的使用，常用的还有$uri和$args等。\n\n> flag，用于设置rewrite对URI的处理行为，可以为以下标志中的一个：\n>> last，终止继续在本location块中处理接收到的URI，并将此处重写的URI作为一个新的URI，使用各location块进行处理。该标识将重写后徐的URI重新再server块中执行，为重写后的URI提供了转入到其他location块的机会。我们通过一个例子来加深理解：\n>> \n```\nlocation / {\n\trewrite ^(/myweb/.*)/media/(.*)\\..*$ $1/mp3/$2.mp3 last;\n\trewrite ^(/myweb/.*)/audio/(.*)\\.*$ $1/mp3/$2.ra last;\n}\n```\n>> 如果URI在第二行被匹配成功并处理，Nginx服务器不会继续使用第三行的配置匹配和处理新的URI，而是让所有的location块重新匹配和处理新的URI。\n>> \n>> break，将此处重写的URI作为一个新的URI，在本快中继续进行处理。该标志将重写后的地址在当前的location块中执行，不会讲新的URI专项到其他的location块。看下面的例子：\n>> \n```\nlocation /myweb/ {\n\trewrite ^(/myweb/.*)/media/(.*)..*$ $1/mp3/$2.mp3 break;\n\trewrite ^(/myweb/.*)/audio/(.*)\\.*$ $1/mp3/$2.ra break;\n}\n```\n如果某URI在第二行被匹配成功并处理，Nginx服务器将新的URI继续在该location块中使用第三行进行匹配和处理。新的URI始终是在同一个location块中。\n>> \n>> redirect, 将重写后的URI返回给客户端，状态代码为302，指明是临时重定向的URI，主要用在replacement变量不是以\"http://\"或者\"https://\"开头的情况下。\n>> \n>> permanent，将重写后的URI返回给客户端，状态码为301，指明是永久重定向URI。\n\n在使用flag指令时，一定要注意各个标志之间的配合。我们再来回顾刚才学习break标志时的例子，对比last标志里的例子，如果我们将第二个例子中的break标志换成last标志，会发生什么情况呢？\n\n细心的读者可能已经发现，在第二个例子中，location块的uri指令是\"/myweb/\"，而重写后的URI仍然是包含\"/myweb/\"的，如果使用last标志，重写后的URI还可能会被该location块匹配到，这样就形成了无限循环。Nginx服务器遇到这样的情况，会尝试10次循环之后返回错误状态代码500。\n\n\n### rewrite_log指令\n该指令配置是否开启URL重写日志的输出功能，其语法结构为：\n```\nrewrite_log on | off;\n```\n默认设置为off。如果配置为开启（on),URL重写的相关日志将以notice级别输出到error_log指令配置的日志文件中。\n\n### set指令\n该指令用于设置一个新的变量，其语法结构为：\n\n```\nset variable value;\n```\n> variable，为变量的名称。注意要用符号\"$\"作为变量的第一个字符，且变量不能与Nginx服务器预设的全局变量同名。\n> \n> value，为变量的值，可以使字符串、其他变量或者变量的组合等。\n\n### uninitialized\\_variable\\_warn指令\n该指令用于配置使用为初始化的变量时，是否记录警告日志，其语法结构为：\n\n```\nuninitialized_variable_warn on | off;\n```\n默认设置为开启（on）状态。\n\n### Rewrite 常用全局变量\n|变量|说明|\n|:---|:---|\n|**$args**|变量中存放了请求URL中的请求指令。比如http://www.myweb.name/server/source?arg1=value1&arg2=value2中的\"arg1=value1&arg2=value2\"|\n|$content_length|变量中存放了请求头中的Content-length字段|\n|$content_type|变量中存放了请求头中的Content-type字段|\n|$document_root|变量中存放了针对当前请求的根路径|\n|$document_uri|变量中存放了请求中的当前URI，并且不包括请求指令，比如http://www.myweb.name/server/source?arg1=value1&arg2=value2中的\"/server/source\"|\n|**$host**|变量中存放了请求URL中的主机部分字段，比如http://www.myweb.name/server中的\"www.myweb.name\"。如果请求中的主机部分字段不可用或者为空，则存放Nginx配置中server块中server_name指令的配置值|\n|$http_user_agent|变量中存放客户端的代理信息|\n|**$http_cookie**|变量中存放客户端的cookie信息|\n|$limit_rate|变量中存放Nginx服务器对网络连接速率的限制，也就是Nginx配置中limit_rate指令的配置值|\n|**$remote_addr**|变量中存放了客户端的地址|\n|$remote_port|变量中存放了客户端与服务器建立连接的端口号|\n|$remote_user|变量中存放了客户端的用户名|\n|$request_body_file|变量中存放了发给后端服务器的本地文件资源的名称|\n|**$request_method**|变量中存放了客户端的请求方式，如『GET』、『POST』等|\n|$request_filename|变量中存放了当前请求的资源文件的路径名|\n|**$request_uri**|变量中存放了当前请求的URI，并且带请求指令|\n|**$query_string**|与变量$args含义相同|\n|**$scheme**|变量中存放了客户端请求使用的协议，比如\"http\"、\"https\"和\"ftp\"等|\n|$server_protocol|变量中存放了客户端请求协议的版本，比如\"HTTP/1.0\"、\"HTTP/1.1\"等|\n|$server_addr|变量中存放了服务器的地址|\n|$server_name|变量中存放了客户端请求到达的服务器的名称|\n|$server_port|变量中存放了客户端请求到达的服务器的端口号|\n|$uri|与变量$document_uri含义相同|\n","slug":"Rewrite功能的配置（1）","published":1,"updated":"2019-11-07T02:17:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznxs002mh5s6pidu4bx5","content":"<p><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/80%E5%90%8E/1cd4edf0c7c6d0e7a7c44120d7197168.jpg\" alt=\"游戏机\"></p>\n<p>Rewrite 是 Nginx 服务器提供的一个重要基本功能，骑在Web服务器产品中几乎是必备的功能，用于实现URL的重写。URL的重写是非常有用的功能，比如他可以让我们在改变网站结构后，无需要求客户端用户修改原来的书签，也无需其他网站修改对我们网站的友情链接；他还可以在一定程度上提高网站的安全性；能够让我们的网站显得更加专业。</p>\n<a id=\"more\"></a>\n<p>适当利用Rewrite功能，可以给我们带来很多好处，这一节我们就重点学习一下 Nginx 服务器的Rewrite功能。Nginx服务器的Rewrite功能的实现依赖于PCRE（Perl Compatible Regular Expressions，Perl兼容的正则表达式）的支持，因此在编译安装Nginx服务器之前，需要安装PCRE库。</p>\n<blockquote>\n<p>提示：有关PCRE的介绍和PCRE库的相关下载请参阅其<a href=\"http://www.pcre.org/\" target=\"_blank\" rel=\"noopener\">官方网站</a>。<br>Nginx服务器使用ngx_http_rewrite_module模块解析和处理Rewrite功能的相关配置。</p>\n</blockquote>\n<h2 id=\"『地址重写』与『地址转发』\"><a href=\"#『地址重写』与『地址转发』\" class=\"headerlink\" title=\"『地址重写』与『地址转发』\"></a>『地址重写』与『地址转发』</h2><p>『地址重写』与『转发』在计算机网络领域是两个重要概念，经常被大家提起。但许多人对这两个概念的区别不清楚，甚至混为一谈。在学习Nginx服务器的Rewrite功能之前，我们有必要先将这对概念进行一下分析和对比，让大家能够有一个清晰的认识。</p>\n<p>『地址重写』，实际上是为了实现地址标准化。那么，什么是地址标准化呢？我们来举一个例子。比如在访问Google首页的时候，我们在地址栏中可以输入<a href=\"http://www.google.com，也可以输入google.cn，他们都能够准确的指向Google首页，从客户端来看，Google首页同时对应了两个地址，实际上，Google服务器是在不同的地址中选择了确定的一个，即www.google.com，进而返回服务器响应的。这个过程就是地址标准化的过程。google.cn这个地址在服务器中被改变为www.google.com的过程就是地址重定向的过程。\" target=\"_blank\" rel=\"noopener\">www.google.com，也可以输入google.cn，他们都能够准确的指向Google首页，从客户端来看，Google首页同时对应了两个地址，实际上，Google服务器是在不同的地址中选择了确定的一个，即www.google.com，进而返回服务器响应的。这个过程就是地址标准化的过程。google.cn这个地址在服务器中被改变为www.google.com的过程就是地址重定向的过程。</a></p>\n<p>『转发』的概念最初和网页的访问并没有太大关系，他是指在网络数据传输过程中数据分组到达路由器或者桥接器后该设备通过检查分组地址并将数据转到相邻局域网上的过程。后来该概念被用在网页访问中，出现了『地址转发』的说法。『地址转发』是指将一个域名知道另一个已有站点的过程。</p>\n<p>从上面的解释，我们可以看到『地址重写』和『地址转发』代表的两个过程是不同的。我们可以总结这两个过程的几点区别：</p>\n<blockquote>\n<p>地址转发后客户端浏览器中的地址显示时不改变的；而地址重写后客户端浏览器地址栏中的地址改变为服务器选择确定的地址。<br>在一次地址转发整个过程中，只产生一次网络请求；而一次地址重写一般会产生两次请求。<br>地址转发一般发生在统一站点项目内；二地址重写没有该限制<br>地址转发到的页面可以不用全路径名标识，二地址重写到的页面必须使用完整的路径名表示<br>地址转发过程中，可以将客户端请求的request范围内属性传递给新的页面，但地址重写不可以<br>地址转发的速度较地址重定向快。</p>\n</blockquote>\n<h2 id=\"Rewrite规则\"><a href=\"#Rewrite规则\" class=\"headerlink\" title=\"Rewrite规则\"></a>Rewrite规则</h2><p>Rewrite规则是学习和使用Nginx服务器Rewrite功能的基础，可以借助PCRE实现URI的重写，并且她还支持Nginx预设变量。Rewrite规则的核心就是PCRE。</p>\n<p>正则表达式（Regular Expression，缩写为regex、regexp或RE），是用于描述或者匹配一系列符合某个句法规则的字符串的一个字符串。大家应该都是用过Windows/Dos平台下用于文件查找的通配符”*“ 和 “?”，如果要查找某个目录下所有的word文档，就是用”*.doc”进行搜索，『*』会被解释成替换符合某个句法模式的文本内容。许多程序设计语言都支持利用正则表达式进行字符串操作。PCRE就是在Perl中内建的功能强大的正则表达式引擎，可以被许多工具使用的库。正则表达式有多种不同的分割，并且不同版本再对句法规则的匹配处理上也有一定的差异。</p>\n<p>在Nginx服务器中，使用ngx_http_rewrite_module模块支持URL重写功能。该模块是Nginx服务器的标准HTTP模块。</p>\n<p>由于正则表达式的知识超出了本书的范围，我们不在正文中对其详细阐述。在『附录A』中，笔者为大家整理了PCRE库支持的正则表达式元字符表，并对这些元字符在正则表达式上下文中的行为进行了说明，同时也列举了大量的使用实例供大家参考。</p>\n<p>在这里，建议大家学习正则表达式时，一定要将思维从『字符创』的概念转变为『字符』的概念，将『词句』的概念转变为『字』的概念，多结合实例进行操作，这样才能准确理解和运用正则表达式。另外，网络上有不少PCRE正则表达式的测试工具，大家可以搜索下载，这些工具对我们在学习和使用正则表达式的过程中很有帮助。</p>\n<p>在Nginx配置中，有关Rewrite的配置指令不多，但是它们已经能够提供比较完善的功能了。</p>\n<h3 id=\"if指令\"><a href=\"#if指令\" class=\"headerlink\" title=\"if指令\"></a>if指令</h3><p>该指令用来支持条件判断，并根据条件判断结果选择不同的Nginx配置，可以在server块或location块中配置该指令，其语法结构为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if ( condition ) &#123;...&#125;</span><br></pre></td></tr></table></figure></p>\n<p>其中，花括号代表一个作用域，形成一个if配置块，是条件为真时的Nginx配置。condition为判断条件（true、false），他可以支持以下几种设置方法：</p>\n<h4 id=\"变量名。\"><a href=\"#变量名。\" class=\"headerlink\" title=\"变量名。\"></a>变量名。</h4><p>如果变量的值为空字符串或以『0』开头的任意字符串，if指令认为条件为false，其他情况认为条件为true。比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if ($slow) &#123;</span><br><span class=\"line\">  ... #Nginx 配置</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用’-’（等于）和’-’（不等于）\"><a href=\"#使用’-’（等于）和’-’（不等于）\" class=\"headerlink\" title=\"使用’=’（等于）和’!=’（不等于）\"></a>使用’=’（等于）和’!=’（不等于）</h4><p>比较变量和字符串是否相等，相等时if指令为true，反之为false。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if ($request_method = POST) &#123;</span><br><span class=\"line\">\treturn 405;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：这里的字符串不需要加引号。</p>\n</blockquote>\n<h4 id=\"使用正则表达式对变量进行匹配\"><a href=\"#使用正则表达式对变量进行匹配\" class=\"headerlink\" title=\"使用正则表达式对变量进行匹配\"></a>使用正则表达式对变量进行匹配</h4><p>匹配成功时 if 指令认为条件为true，否则为false。变量与正则表达式之间用”~”、”~<em>“、”!~”或”!~\\</em>“连接，『~』表示匹配过程中对大小写敏感，『~*』表示匹配过程中对大小写不敏感；使用『!~』和”!~*“，匹配失败时if指令认为条件为true，否则为false。在正则表达式中，可以使用小括号对变量值进行截取，在花括号中使用$1…$9引用截取的值。比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if ($http_user_agent ~ MSIE) &#123;</span><br><span class=\"line\">\t# $http_user_agent的值中是否包含有MSIE字符串，如果包含，为true</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：整个正则表达式字符串一般不需要加引号，但如果含有右花括号”}”或者分号”;”字符时，必须要给整个正则表达式添加引号。</p>\n</blockquote>\n<h4 id=\"判断请求的文件是否存在使用”-f”和”-f”。\"><a href=\"#判断请求的文件是否存在使用”-f”和”-f”。\" class=\"headerlink\" title=\"判断请求的文件是否存在使用”-f”和”!-f”。\"></a>判断请求的文件是否存在使用”-f”和”!-f”。</h4><p>当使用”-f”时，如果请求的文件存在，if指令认为条件为true，如果请求的文件不存在为false；使用”!-f”时，如果请求的文件不存在但该文件所在的目录存在，if指令认为条件为true，如果该文件和她所在的目录都不存在，则为false，如果请求的文件存在，也为false。使用的方法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (-f $request_filename) &#123;</span><br><span class=\"line\">\t# 判断请求的文件是否存在</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (!-f $request_filename) &#123;</span><br><span class=\"line\">\t# 判断请求的文件是否不存在</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"判断请求的目录是否存在使用”-d”和”-d”\"><a href=\"#判断请求的目录是否存在使用”-d”和”-d”\" class=\"headerlink\" title=\"判断请求的目录是否存在使用”-d”和”!-d”.\"></a>判断请求的目录是否存在使用”-d”和”!-d”.</h4><p>当使用”-d”时，如果请求的目录存在，if指令认为条件为true，如果请求的目录不存在，则为false；当使用”!-d”时，如果请求的目录不存在但该目录的上级目录存在，if指令认为条件为true，如果该目录和它的上级目录都不存在，则为false，如果请求的目录存在，也为false。使用方式见”-f”和”!-f”的使用。</p>\n<h4 id=\"判断请求的目录或文件是否存在使用”-e”和”-e”。\"><a href=\"#判断请求的目录或文件是否存在使用”-e”和”-e”。\" class=\"headerlink\" title=\"判断请求的目录或文件是否存在使用”-e”和”!-e”。\"></a>判断请求的目录或文件是否存在使用”-e”和”!-e”。</h4><p>当使用”-e”时，如果请求的目录或者文件存在时，if指令认为条件为true，否则为false。当使用”!-e”时，如果请求的文件和该文件所在路径上的目录都不存在，为true，否则为false。使用方式见”-f”和”!-f”的使用。</p>\n<h4 id=\"判断请求的文件是否可执行使用”-x”和”-x”。\"><a href=\"#判断请求的文件是否可执行使用”-x”和”-x”。\" class=\"headerlink\" title=\"判断请求的文件是否可执行使用”-x”和”!-x”。\"></a>判断请求的文件是否可执行使用”-x”和”!-x”。</h4><p>当使用”-x”时，如果请求的文件可执行，if指令认为条件为true，否则为false；当使用”!-x”时，如果请求的文件不可执行，为true，否则为false。使用方法见”-f”和”!-f”的使用</p>\n<h3 id=\"break指令\"><a href=\"#break指令\" class=\"headerlink\" title=\"break指令\"></a>break指令</h3><p>该指令用于中断当前相同作用域中的其他Nginx配置。与该指令处于同一作用域的Nginx配置中，位于它前面的指令配置生效，位于后面的指令配置无效。Nginx服务器在根据配置处理请求的过程中遇到该指令时，回到上一层作用域继续向下读取配置。该指令可以在server块和location快以及if块中使用，其语法结构为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">break;</span><br></pre></td></tr></table></figure>\n<p>我们通过一个例子加深理解：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">\tif ($slow) &#123;</span><br><span class=\"line\">\t\tset $id $1;\t\t\t#处于break指令之前，配置有效</span><br><span class=\"line\">\t\tbreak;</span><br><span class=\"line\">\t\tlimit_rate 10k;\t\t#处于break指令之后，配置无效</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t...\t\t\t\t\t\t\t#其他Nginx配置，处于break指令所在作用域的上一层作用域，配置有效</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"return指令\"><a href=\"#return指令\" class=\"headerlink\" title=\"return指令\"></a>return指令</h4><p>该指令用于完成对请求的处理，直接向客户端返回响应状态码。处于该指令后的所有Nginx配置都是无效的。该指令可以在server块和location块以及if块中使用，其语法结构有以下几种：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return [text];</span><br><span class=\"line\">return code URL;</span><br><span class=\"line\">return URL;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>code，为返回给客户端的HTTP状态代码。可以返回的状态代码为0-999的任意HTTP状态码。非标准的444代码可以强制关闭服务器与客户端的连接而不返回任何响应信息给客户端。</p>\n<p>text，为返回给客户端的响应体内容，支持变量的使用。<code>return 200 &#39;hello from nginx;&#39;</code></p>\n<p>URL，为返回给客户端的URL地址。</p>\n</blockquote>\n<p>从Nginx 0.8.42 开始，当code使用301（表示被请求资源永久移动到新的位置）、302（表示请求的资源现在临时从不同的URL响应，要求使用GET昂视请求）、303（表示对应当前请求的相应可以在另一个URL上找到，并且客户端应当采用GET方式访问那个资源）和307（请求的资源临时从不同的URL响应）代码时，可以使用结构2将新的URL返回给客户端；当code使用除上面提到的其他代码时，可以使用结构1指定text想客户端发送指定的响应体内容。</p>\n<p>当返回状态吗未302或307时，可以使用结构3对URL进行配置。返回的URL中应该包含”http://“、”https://“或者直接使用”$scheme”变量（Request Scheme，代表传输协议，Nginx内置变量）指定。</p>\n<blockquote>\n<p>注意：在Nginx 0.7.51之前的版本中，只支持返回204、400、402-406、608、410、413、416和500-504等状态代码。</p>\n</blockquote>\n<h3 id=\"rewrite指令\"><a href=\"#rewrite指令\" class=\"headerlink\" title=\"rewrite指令\"></a>rewrite指令</h3><p>该指令通过正则表达式的使用来改变URI。可以同时存在一个或者多个指令，按照顺序依次对URL进行匹配和处理。</p>\n<blockquote>\n<p>提示：</p>\n<p>URI与URL的区别和联系。</p>\n<p>URI（Universal Resource Identifier，通用资源标识符），用于对网络中的各种资源进行标识，由存放资源的主机名、片段标识符和相对URI三部分组成。存放资源的主机名一版由传输协议（Scheme）、主机和资源路径三部分组成；片段标识符指向资源内容的具体元素；相对URI表示资源在主机上的相对路径。一版格式为：Scheme:[//][用户名[:密码]@主机名[:端口号]][/资源路径]。</p>\n<p>URL（Uniform Resource Location，统一资源定位符），是用于在Interner中描述资源的字符串，是URI的子集，主要包括传输协议（Scheme）、主机（IP、端口号或者域名）和资源具体地址（目录和文件名）等三部分。一版格式为：Scheme://主机名[:端口号][/资源路径]。</p>\n</blockquote>\n<p>该指令可以在server块或者location块中配置，其语法结构为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rewrite regex replacement [flag];</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>regex，用于匹配URI的正则表达式。使用”()”标记要截取的内容。</p>\n</blockquote>\n<p>注意：</p>\n<p>rewrite接收到的URI不包括host地址。因此，regex不可能匹配到URI的host地址。我们看下面这个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rewrite myweb.com http://newweb.com/parmanent;</span><br></pre></td></tr></table></figure>\n<p>现在我们希望上面的rewrite指令重写<a href=\"http://myweb.com/source是办不到的，因为rewrite指令接收到的URI是&quot;/source&quot;，不包含&quot;myweb.com&quot;。\" target=\"_blank\" rel=\"noopener\">http://myweb.com/source是办不到的，因为rewrite指令接收到的URI是&quot;/source&quot;，不包含&quot;myweb.com&quot;。</a></p>\n<p>另外，请求URL中的请求指令是不包含在rewrite指令接收到的URI内容中的。比如:</p>\n<p><code>http://myweb.com/source?agr1=value&amp;agr2=value2</code>;</p>\n<p>rewrite指令接收到奥的URI为”source”,不包含”?agr1=value&amp;agr2=value2”。</p>\n<blockquote>\n<p>replacement，成功匹配后用于替换URI中被截取内容的字符串。默认情况下，如果该字符串是由”http://“或者”https://“开头的，则不会继续向下对URI进行其他处理，而是直接将重写后的URI返回给客户端。</p>\n</blockquote>\n<p>提示：</p>\n<p>刚才学习regex变量时我们提到，rewrite模块快接收到的URI不包含请求URL中的请求指令，但是如果我们希望将这些指令传给重写后的URI，该怎么做呢？我们可以使用Nginx全局变量$request_uri，比如：<br><code>rewrite myweb.com http://example.com$request_uri? permanent;</code></p>\n<p>注意：</p>\n<p>在$request_uri变量后要添加问号”? “.replacement变量中支持Nginx全局变量的使用，常用的还有$uri和$args等。</p>\n<blockquote>\n<p>flag，用于设置rewrite对URI的处理行为，可以为以下标志中的一个：</p>\n<blockquote>\n<p>last，终止继续在本location块中处理接收到的URI，并将此处重写的URI作为一个新的URI，使用各location块进行处理。该标识将重写后徐的URI重新再server块中执行，为重写后的URI提供了转入到其他location块的机会。我们通过一个例子来加深理解：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">\trewrite ^(/myweb/.*)/media/(.*)\\..*$ $1/mp3/$2.mp3 last;</span><br><span class=\"line\">\trewrite ^(/myweb/.*)/audio/(.*)\\.*$ $1/mp3/$2.ra last;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>如果URI在第二行被匹配成功并处理，Nginx服务器不会继续使用第三行的配置匹配和处理新的URI，而是让所有的location块重新匹配和处理新的URI。</p>\n<p>break，将此处重写的URI作为一个新的URI，在本快中继续进行处理。该标志将重写后的地址在当前的location块中执行，不会讲新的URI专项到其他的location块。看下面的例子：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /myweb/ &#123;</span><br><span class=\"line\">\trewrite ^(/myweb/.*)/media/(.*)..*$ $1/mp3/$2.mp3 break;</span><br><span class=\"line\">\trewrite ^(/myweb/.*)/audio/(.*)\\.*$ $1/mp3/$2.ra break;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>如果某URI在第二行被匹配成功并处理，Nginx服务器将新的URI继续在该location块中使用第三行进行匹配和处理。新的URI始终是在同一个location块中。</p>\n<blockquote>\n<blockquote>\n<p>redirect, 将重写后的URI返回给客户端，状态代码为302，指明是临时重定向的URI，主要用在replacement变量不是以”http://“或者”https://“开头的情况下。</p>\n<p>permanent，将重写后的URI返回给客户端，状态码为301，指明是永久重定向URI。</p>\n</blockquote>\n</blockquote>\n<p>在使用flag指令时，一定要注意各个标志之间的配合。我们再来回顾刚才学习break标志时的例子，对比last标志里的例子，如果我们将第二个例子中的break标志换成last标志，会发生什么情况呢？</p>\n<p>细心的读者可能已经发现，在第二个例子中，location块的uri指令是”/myweb/“，而重写后的URI仍然是包含”/myweb/“的，如果使用last标志，重写后的URI还可能会被该location块匹配到，这样就形成了无限循环。Nginx服务器遇到这样的情况，会尝试10次循环之后返回错误状态代码500。</p>\n<h3 id=\"rewrite-log指令\"><a href=\"#rewrite-log指令\" class=\"headerlink\" title=\"rewrite_log指令\"></a>rewrite_log指令</h3><p>该指令配置是否开启URL重写日志的输出功能，其语法结构为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rewrite_log on | off;</span><br></pre></td></tr></table></figure></p>\n<p>默认设置为off。如果配置为开启（on),URL重写的相关日志将以notice级别输出到error_log指令配置的日志文件中。</p>\n<h3 id=\"set指令\"><a href=\"#set指令\" class=\"headerlink\" title=\"set指令\"></a>set指令</h3><p>该指令用于设置一个新的变量，其语法结构为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set variable value;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>variable，为变量的名称。注意要用符号”$”作为变量的第一个字符，且变量不能与Nginx服务器预设的全局变量同名。</p>\n<p>value，为变量的值，可以使字符串、其他变量或者变量的组合等。</p>\n</blockquote>\n<h3 id=\"uninitialized-variable-warn指令\"><a href=\"#uninitialized-variable-warn指令\" class=\"headerlink\" title=\"uninitialized_variable_warn指令\"></a>uninitialized_variable_warn指令</h3><p>该指令用于配置使用为初始化的变量时，是否记录警告日志，其语法结构为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uninitialized_variable_warn on | off;</span><br></pre></td></tr></table></figure>\n<p>默认设置为开启（on）状态。</p>\n<h3 id=\"Rewrite-常用全局变量\"><a href=\"#Rewrite-常用全局变量\" class=\"headerlink\" title=\"Rewrite 常用全局变量\"></a>Rewrite 常用全局变量</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">变量</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>$args</strong></td>\n<td style=\"text-align:left\">变量中存放了请求URL中的请求指令。比如<a href=\"http://www.myweb.name/server/source?arg1=value1&amp;arg2=value2中的&quot;arg1=value1&amp;arg2=value2&quot;\" target=\"_blank\" rel=\"noopener\">http://www.myweb.name/server/source?arg1=value1&amp;arg2=value2中的&quot;arg1=value1&amp;arg2=value2&quot;</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$content_length</td>\n<td style=\"text-align:left\">变量中存放了请求头中的Content-length字段</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$content_type</td>\n<td style=\"text-align:left\">变量中存放了请求头中的Content-type字段</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$document_root</td>\n<td style=\"text-align:left\">变量中存放了针对当前请求的根路径</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$document_uri</td>\n<td style=\"text-align:left\">变量中存放了请求中的当前URI，并且不包括请求指令，比如<a href=\"http://www.myweb.name/server/source?arg1=value1&amp;arg2=value2中的&quot;/server/source&quot;\" target=\"_blank\" rel=\"noopener\">http://www.myweb.name/server/source?arg1=value1&amp;arg2=value2中的&quot;/server/source&quot;</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>$host</strong></td>\n<td style=\"text-align:left\">变量中存放了请求URL中的主机部分字段，比如<a href=\"http://www.myweb.name/server中的&quot;www.myweb.name&quot;。如果请求中的主机部分字段不可用或者为空，则存放Nginx配置中server块中server_name指令的配置值\" target=\"_blank\" rel=\"noopener\">http://www.myweb.name/server中的&quot;www.myweb.name&quot;。如果请求中的主机部分字段不可用或者为空，则存放Nginx配置中server块中server_name指令的配置值</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$http_user_agent</td>\n<td style=\"text-align:left\">变量中存放客户端的代理信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>$http_cookie</strong></td>\n<td style=\"text-align:left\">变量中存放客户端的cookie信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$limit_rate</td>\n<td style=\"text-align:left\">变量中存放Nginx服务器对网络连接速率的限制，也就是Nginx配置中limit_rate指令的配置值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>$remote_addr</strong></td>\n<td style=\"text-align:left\">变量中存放了客户端的地址</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$remote_port</td>\n<td style=\"text-align:left\">变量中存放了客户端与服务器建立连接的端口号</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$remote_user</td>\n<td style=\"text-align:left\">变量中存放了客户端的用户名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$request_body_file</td>\n<td style=\"text-align:left\">变量中存放了发给后端服务器的本地文件资源的名称</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>$request_method</strong></td>\n<td style=\"text-align:left\">变量中存放了客户端的请求方式，如『GET』、『POST』等</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$request_filename</td>\n<td style=\"text-align:left\">变量中存放了当前请求的资源文件的路径名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>$request_uri</strong></td>\n<td style=\"text-align:left\">变量中存放了当前请求的URI，并且带请求指令</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>$query_string</strong></td>\n<td style=\"text-align:left\">与变量$args含义相同</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>$scheme</strong></td>\n<td style=\"text-align:left\">变量中存放了客户端请求使用的协议，比如”http”、”https”和”ftp”等</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$server_protocol</td>\n<td style=\"text-align:left\">变量中存放了客户端请求协议的版本，比如”HTTP/1.0”、”HTTP/1.1”等</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$server_addr</td>\n<td style=\"text-align:left\">变量中存放了服务器的地址</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$server_name</td>\n<td style=\"text-align:left\">变量中存放了客户端请求到达的服务器的名称</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$server_port</td>\n<td style=\"text-align:left\">变量中存放了客户端请求到达的服务器的端口号</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$uri</td>\n<td style=\"text-align:left\">与变量$document_uri含义相同</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/80%E5%90%8E/1cd4edf0c7c6d0e7a7c44120d7197168.jpg\" alt=\"游戏机\"></p>\n<p>Rewrite 是 Nginx 服务器提供的一个重要基本功能，骑在Web服务器产品中几乎是必备的功能，用于实现URL的重写。URL的重写是非常有用的功能，比如他可以让我们在改变网站结构后，无需要求客户端用户修改原来的书签，也无需其他网站修改对我们网站的友情链接；他还可以在一定程度上提高网站的安全性；能够让我们的网站显得更加专业。</p>","more":"<p>适当利用Rewrite功能，可以给我们带来很多好处，这一节我们就重点学习一下 Nginx 服务器的Rewrite功能。Nginx服务器的Rewrite功能的实现依赖于PCRE（Perl Compatible Regular Expressions，Perl兼容的正则表达式）的支持，因此在编译安装Nginx服务器之前，需要安装PCRE库。</p>\n<blockquote>\n<p>提示：有关PCRE的介绍和PCRE库的相关下载请参阅其<a href=\"http://www.pcre.org/\" target=\"_blank\" rel=\"noopener\">官方网站</a>。<br>Nginx服务器使用ngx_http_rewrite_module模块解析和处理Rewrite功能的相关配置。</p>\n</blockquote>\n<h2 id=\"『地址重写』与『地址转发』\"><a href=\"#『地址重写』与『地址转发』\" class=\"headerlink\" title=\"『地址重写』与『地址转发』\"></a>『地址重写』与『地址转发』</h2><p>『地址重写』与『转发』在计算机网络领域是两个重要概念，经常被大家提起。但许多人对这两个概念的区别不清楚，甚至混为一谈。在学习Nginx服务器的Rewrite功能之前，我们有必要先将这对概念进行一下分析和对比，让大家能够有一个清晰的认识。</p>\n<p>『地址重写』，实际上是为了实现地址标准化。那么，什么是地址标准化呢？我们来举一个例子。比如在访问Google首页的时候，我们在地址栏中可以输入<a href=\"http://www.google.com，也可以输入google.cn，他们都能够准确的指向Google首页，从客户端来看，Google首页同时对应了两个地址，实际上，Google服务器是在不同的地址中选择了确定的一个，即www.google.com，进而返回服务器响应的。这个过程就是地址标准化的过程。google.cn这个地址在服务器中被改变为www.google.com的过程就是地址重定向的过程。\" target=\"_blank\" rel=\"noopener\">www.google.com，也可以输入google.cn，他们都能够准确的指向Google首页，从客户端来看，Google首页同时对应了两个地址，实际上，Google服务器是在不同的地址中选择了确定的一个，即www.google.com，进而返回服务器响应的。这个过程就是地址标准化的过程。google.cn这个地址在服务器中被改变为www.google.com的过程就是地址重定向的过程。</a></p>\n<p>『转发』的概念最初和网页的访问并没有太大关系，他是指在网络数据传输过程中数据分组到达路由器或者桥接器后该设备通过检查分组地址并将数据转到相邻局域网上的过程。后来该概念被用在网页访问中，出现了『地址转发』的说法。『地址转发』是指将一个域名知道另一个已有站点的过程。</p>\n<p>从上面的解释，我们可以看到『地址重写』和『地址转发』代表的两个过程是不同的。我们可以总结这两个过程的几点区别：</p>\n<blockquote>\n<p>地址转发后客户端浏览器中的地址显示时不改变的；而地址重写后客户端浏览器地址栏中的地址改变为服务器选择确定的地址。<br>在一次地址转发整个过程中，只产生一次网络请求；而一次地址重写一般会产生两次请求。<br>地址转发一般发生在统一站点项目内；二地址重写没有该限制<br>地址转发到的页面可以不用全路径名标识，二地址重写到的页面必须使用完整的路径名表示<br>地址转发过程中，可以将客户端请求的request范围内属性传递给新的页面，但地址重写不可以<br>地址转发的速度较地址重定向快。</p>\n</blockquote>\n<h2 id=\"Rewrite规则\"><a href=\"#Rewrite规则\" class=\"headerlink\" title=\"Rewrite规则\"></a>Rewrite规则</h2><p>Rewrite规则是学习和使用Nginx服务器Rewrite功能的基础，可以借助PCRE实现URI的重写，并且她还支持Nginx预设变量。Rewrite规则的核心就是PCRE。</p>\n<p>正则表达式（Regular Expression，缩写为regex、regexp或RE），是用于描述或者匹配一系列符合某个句法规则的字符串的一个字符串。大家应该都是用过Windows/Dos平台下用于文件查找的通配符”*“ 和 “?”，如果要查找某个目录下所有的word文档，就是用”*.doc”进行搜索，『*』会被解释成替换符合某个句法模式的文本内容。许多程序设计语言都支持利用正则表达式进行字符串操作。PCRE就是在Perl中内建的功能强大的正则表达式引擎，可以被许多工具使用的库。正则表达式有多种不同的分割，并且不同版本再对句法规则的匹配处理上也有一定的差异。</p>\n<p>在Nginx服务器中，使用ngx_http_rewrite_module模块支持URL重写功能。该模块是Nginx服务器的标准HTTP模块。</p>\n<p>由于正则表达式的知识超出了本书的范围，我们不在正文中对其详细阐述。在『附录A』中，笔者为大家整理了PCRE库支持的正则表达式元字符表，并对这些元字符在正则表达式上下文中的行为进行了说明，同时也列举了大量的使用实例供大家参考。</p>\n<p>在这里，建议大家学习正则表达式时，一定要将思维从『字符创』的概念转变为『字符』的概念，将『词句』的概念转变为『字』的概念，多结合实例进行操作，这样才能准确理解和运用正则表达式。另外，网络上有不少PCRE正则表达式的测试工具，大家可以搜索下载，这些工具对我们在学习和使用正则表达式的过程中很有帮助。</p>\n<p>在Nginx配置中，有关Rewrite的配置指令不多，但是它们已经能够提供比较完善的功能了。</p>\n<h3 id=\"if指令\"><a href=\"#if指令\" class=\"headerlink\" title=\"if指令\"></a>if指令</h3><p>该指令用来支持条件判断，并根据条件判断结果选择不同的Nginx配置，可以在server块或location块中配置该指令，其语法结构为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if ( condition ) &#123;...&#125;</span><br></pre></td></tr></table></figure></p>\n<p>其中，花括号代表一个作用域，形成一个if配置块，是条件为真时的Nginx配置。condition为判断条件（true、false），他可以支持以下几种设置方法：</p>\n<h4 id=\"变量名。\"><a href=\"#变量名。\" class=\"headerlink\" title=\"变量名。\"></a>变量名。</h4><p>如果变量的值为空字符串或以『0』开头的任意字符串，if指令认为条件为false，其他情况认为条件为true。比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if ($slow) &#123;</span><br><span class=\"line\">  ... #Nginx 配置</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用’-’（等于）和’-’（不等于）\"><a href=\"#使用’-’（等于）和’-’（不等于）\" class=\"headerlink\" title=\"使用’=’（等于）和’!=’（不等于）\"></a>使用’=’（等于）和’!=’（不等于）</h4><p>比较变量和字符串是否相等，相等时if指令为true，反之为false。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if ($request_method = POST) &#123;</span><br><span class=\"line\">\treturn 405;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：这里的字符串不需要加引号。</p>\n</blockquote>\n<h4 id=\"使用正则表达式对变量进行匹配\"><a href=\"#使用正则表达式对变量进行匹配\" class=\"headerlink\" title=\"使用正则表达式对变量进行匹配\"></a>使用正则表达式对变量进行匹配</h4><p>匹配成功时 if 指令认为条件为true，否则为false。变量与正则表达式之间用”~”、”~<em>“、”!~”或”!~\\</em>“连接，『~』表示匹配过程中对大小写敏感，『~*』表示匹配过程中对大小写不敏感；使用『!~』和”!~*“，匹配失败时if指令认为条件为true，否则为false。在正则表达式中，可以使用小括号对变量值进行截取，在花括号中使用$1…$9引用截取的值。比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if ($http_user_agent ~ MSIE) &#123;</span><br><span class=\"line\">\t# $http_user_agent的值中是否包含有MSIE字符串，如果包含，为true</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：整个正则表达式字符串一般不需要加引号，但如果含有右花括号”}”或者分号”;”字符时，必须要给整个正则表达式添加引号。</p>\n</blockquote>\n<h4 id=\"判断请求的文件是否存在使用”-f”和”-f”。\"><a href=\"#判断请求的文件是否存在使用”-f”和”-f”。\" class=\"headerlink\" title=\"判断请求的文件是否存在使用”-f”和”!-f”。\"></a>判断请求的文件是否存在使用”-f”和”!-f”。</h4><p>当使用”-f”时，如果请求的文件存在，if指令认为条件为true，如果请求的文件不存在为false；使用”!-f”时，如果请求的文件不存在但该文件所在的目录存在，if指令认为条件为true，如果该文件和她所在的目录都不存在，则为false，如果请求的文件存在，也为false。使用的方法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (-f $request_filename) &#123;</span><br><span class=\"line\">\t# 判断请求的文件是否存在</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (!-f $request_filename) &#123;</span><br><span class=\"line\">\t# 判断请求的文件是否不存在</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"判断请求的目录是否存在使用”-d”和”-d”\"><a href=\"#判断请求的目录是否存在使用”-d”和”-d”\" class=\"headerlink\" title=\"判断请求的目录是否存在使用”-d”和”!-d”.\"></a>判断请求的目录是否存在使用”-d”和”!-d”.</h4><p>当使用”-d”时，如果请求的目录存在，if指令认为条件为true，如果请求的目录不存在，则为false；当使用”!-d”时，如果请求的目录不存在但该目录的上级目录存在，if指令认为条件为true，如果该目录和它的上级目录都不存在，则为false，如果请求的目录存在，也为false。使用方式见”-f”和”!-f”的使用。</p>\n<h4 id=\"判断请求的目录或文件是否存在使用”-e”和”-e”。\"><a href=\"#判断请求的目录或文件是否存在使用”-e”和”-e”。\" class=\"headerlink\" title=\"判断请求的目录或文件是否存在使用”-e”和”!-e”。\"></a>判断请求的目录或文件是否存在使用”-e”和”!-e”。</h4><p>当使用”-e”时，如果请求的目录或者文件存在时，if指令认为条件为true，否则为false。当使用”!-e”时，如果请求的文件和该文件所在路径上的目录都不存在，为true，否则为false。使用方式见”-f”和”!-f”的使用。</p>\n<h4 id=\"判断请求的文件是否可执行使用”-x”和”-x”。\"><a href=\"#判断请求的文件是否可执行使用”-x”和”-x”。\" class=\"headerlink\" title=\"判断请求的文件是否可执行使用”-x”和”!-x”。\"></a>判断请求的文件是否可执行使用”-x”和”!-x”。</h4><p>当使用”-x”时，如果请求的文件可执行，if指令认为条件为true，否则为false；当使用”!-x”时，如果请求的文件不可执行，为true，否则为false。使用方法见”-f”和”!-f”的使用</p>\n<h3 id=\"break指令\"><a href=\"#break指令\" class=\"headerlink\" title=\"break指令\"></a>break指令</h3><p>该指令用于中断当前相同作用域中的其他Nginx配置。与该指令处于同一作用域的Nginx配置中，位于它前面的指令配置生效，位于后面的指令配置无效。Nginx服务器在根据配置处理请求的过程中遇到该指令时，回到上一层作用域继续向下读取配置。该指令可以在server块和location快以及if块中使用，其语法结构为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">break;</span><br></pre></td></tr></table></figure>\n<p>我们通过一个例子加深理解：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">\tif ($slow) &#123;</span><br><span class=\"line\">\t\tset $id $1;\t\t\t#处于break指令之前，配置有效</span><br><span class=\"line\">\t\tbreak;</span><br><span class=\"line\">\t\tlimit_rate 10k;\t\t#处于break指令之后，配置无效</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t...\t\t\t\t\t\t\t#其他Nginx配置，处于break指令所在作用域的上一层作用域，配置有效</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"return指令\"><a href=\"#return指令\" class=\"headerlink\" title=\"return指令\"></a>return指令</h4><p>该指令用于完成对请求的处理，直接向客户端返回响应状态码。处于该指令后的所有Nginx配置都是无效的。该指令可以在server块和location块以及if块中使用，其语法结构有以下几种：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return [text];</span><br><span class=\"line\">return code URL;</span><br><span class=\"line\">return URL;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>code，为返回给客户端的HTTP状态代码。可以返回的状态代码为0-999的任意HTTP状态码。非标准的444代码可以强制关闭服务器与客户端的连接而不返回任何响应信息给客户端。</p>\n<p>text，为返回给客户端的响应体内容，支持变量的使用。<code>return 200 &#39;hello from nginx;&#39;</code></p>\n<p>URL，为返回给客户端的URL地址。</p>\n</blockquote>\n<p>从Nginx 0.8.42 开始，当code使用301（表示被请求资源永久移动到新的位置）、302（表示请求的资源现在临时从不同的URL响应，要求使用GET昂视请求）、303（表示对应当前请求的相应可以在另一个URL上找到，并且客户端应当采用GET方式访问那个资源）和307（请求的资源临时从不同的URL响应）代码时，可以使用结构2将新的URL返回给客户端；当code使用除上面提到的其他代码时，可以使用结构1指定text想客户端发送指定的响应体内容。</p>\n<p>当返回状态吗未302或307时，可以使用结构3对URL进行配置。返回的URL中应该包含”http://“、”https://“或者直接使用”$scheme”变量（Request Scheme，代表传输协议，Nginx内置变量）指定。</p>\n<blockquote>\n<p>注意：在Nginx 0.7.51之前的版本中，只支持返回204、400、402-406、608、410、413、416和500-504等状态代码。</p>\n</blockquote>\n<h3 id=\"rewrite指令\"><a href=\"#rewrite指令\" class=\"headerlink\" title=\"rewrite指令\"></a>rewrite指令</h3><p>该指令通过正则表达式的使用来改变URI。可以同时存在一个或者多个指令，按照顺序依次对URL进行匹配和处理。</p>\n<blockquote>\n<p>提示：</p>\n<p>URI与URL的区别和联系。</p>\n<p>URI（Universal Resource Identifier，通用资源标识符），用于对网络中的各种资源进行标识，由存放资源的主机名、片段标识符和相对URI三部分组成。存放资源的主机名一版由传输协议（Scheme）、主机和资源路径三部分组成；片段标识符指向资源内容的具体元素；相对URI表示资源在主机上的相对路径。一版格式为：Scheme:[//][用户名[:密码]@主机名[:端口号]][/资源路径]。</p>\n<p>URL（Uniform Resource Location，统一资源定位符），是用于在Interner中描述资源的字符串，是URI的子集，主要包括传输协议（Scheme）、主机（IP、端口号或者域名）和资源具体地址（目录和文件名）等三部分。一版格式为：Scheme://主机名[:端口号][/资源路径]。</p>\n</blockquote>\n<p>该指令可以在server块或者location块中配置，其语法结构为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rewrite regex replacement [flag];</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>regex，用于匹配URI的正则表达式。使用”()”标记要截取的内容。</p>\n</blockquote>\n<p>注意：</p>\n<p>rewrite接收到的URI不包括host地址。因此，regex不可能匹配到URI的host地址。我们看下面这个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rewrite myweb.com http://newweb.com/parmanent;</span><br></pre></td></tr></table></figure>\n<p>现在我们希望上面的rewrite指令重写<a href=\"http://myweb.com/source是办不到的，因为rewrite指令接收到的URI是&quot;/source&quot;，不包含&quot;myweb.com&quot;。\" target=\"_blank\" rel=\"noopener\">http://myweb.com/source是办不到的，因为rewrite指令接收到的URI是&quot;/source&quot;，不包含&quot;myweb.com&quot;。</a></p>\n<p>另外，请求URL中的请求指令是不包含在rewrite指令接收到的URI内容中的。比如:</p>\n<p><code>http://myweb.com/source?agr1=value&amp;agr2=value2</code>;</p>\n<p>rewrite指令接收到奥的URI为”source”,不包含”?agr1=value&amp;agr2=value2”。</p>\n<blockquote>\n<p>replacement，成功匹配后用于替换URI中被截取内容的字符串。默认情况下，如果该字符串是由”http://“或者”https://“开头的，则不会继续向下对URI进行其他处理，而是直接将重写后的URI返回给客户端。</p>\n</blockquote>\n<p>提示：</p>\n<p>刚才学习regex变量时我们提到，rewrite模块快接收到的URI不包含请求URL中的请求指令，但是如果我们希望将这些指令传给重写后的URI，该怎么做呢？我们可以使用Nginx全局变量$request_uri，比如：<br><code>rewrite myweb.com http://example.com$request_uri? permanent;</code></p>\n<p>注意：</p>\n<p>在$request_uri变量后要添加问号”? “.replacement变量中支持Nginx全局变量的使用，常用的还有$uri和$args等。</p>\n<blockquote>\n<p>flag，用于设置rewrite对URI的处理行为，可以为以下标志中的一个：</p>\n<blockquote>\n<p>last，终止继续在本location块中处理接收到的URI，并将此处重写的URI作为一个新的URI，使用各location块进行处理。该标识将重写后徐的URI重新再server块中执行，为重写后的URI提供了转入到其他location块的机会。我们通过一个例子来加深理解：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">\trewrite ^(/myweb/.*)/media/(.*)\\..*$ $1/mp3/$2.mp3 last;</span><br><span class=\"line\">\trewrite ^(/myweb/.*)/audio/(.*)\\.*$ $1/mp3/$2.ra last;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>如果URI在第二行被匹配成功并处理，Nginx服务器不会继续使用第三行的配置匹配和处理新的URI，而是让所有的location块重新匹配和处理新的URI。</p>\n<p>break，将此处重写的URI作为一个新的URI，在本快中继续进行处理。该标志将重写后的地址在当前的location块中执行，不会讲新的URI专项到其他的location块。看下面的例子：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /myweb/ &#123;</span><br><span class=\"line\">\trewrite ^(/myweb/.*)/media/(.*)..*$ $1/mp3/$2.mp3 break;</span><br><span class=\"line\">\trewrite ^(/myweb/.*)/audio/(.*)\\.*$ $1/mp3/$2.ra break;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>如果某URI在第二行被匹配成功并处理，Nginx服务器将新的URI继续在该location块中使用第三行进行匹配和处理。新的URI始终是在同一个location块中。</p>\n<blockquote>\n<blockquote>\n<p>redirect, 将重写后的URI返回给客户端，状态代码为302，指明是临时重定向的URI，主要用在replacement变量不是以”http://“或者”https://“开头的情况下。</p>\n<p>permanent，将重写后的URI返回给客户端，状态码为301，指明是永久重定向URI。</p>\n</blockquote>\n</blockquote>\n<p>在使用flag指令时，一定要注意各个标志之间的配合。我们再来回顾刚才学习break标志时的例子，对比last标志里的例子，如果我们将第二个例子中的break标志换成last标志，会发生什么情况呢？</p>\n<p>细心的读者可能已经发现，在第二个例子中，location块的uri指令是”/myweb/“，而重写后的URI仍然是包含”/myweb/“的，如果使用last标志，重写后的URI还可能会被该location块匹配到，这样就形成了无限循环。Nginx服务器遇到这样的情况，会尝试10次循环之后返回错误状态代码500。</p>\n<h3 id=\"rewrite-log指令\"><a href=\"#rewrite-log指令\" class=\"headerlink\" title=\"rewrite_log指令\"></a>rewrite_log指令</h3><p>该指令配置是否开启URL重写日志的输出功能，其语法结构为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rewrite_log on | off;</span><br></pre></td></tr></table></figure></p>\n<p>默认设置为off。如果配置为开启（on),URL重写的相关日志将以notice级别输出到error_log指令配置的日志文件中。</p>\n<h3 id=\"set指令\"><a href=\"#set指令\" class=\"headerlink\" title=\"set指令\"></a>set指令</h3><p>该指令用于设置一个新的变量，其语法结构为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set variable value;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>variable，为变量的名称。注意要用符号”$”作为变量的第一个字符，且变量不能与Nginx服务器预设的全局变量同名。</p>\n<p>value，为变量的值，可以使字符串、其他变量或者变量的组合等。</p>\n</blockquote>\n<h3 id=\"uninitialized-variable-warn指令\"><a href=\"#uninitialized-variable-warn指令\" class=\"headerlink\" title=\"uninitialized_variable_warn指令\"></a>uninitialized_variable_warn指令</h3><p>该指令用于配置使用为初始化的变量时，是否记录警告日志，其语法结构为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uninitialized_variable_warn on | off;</span><br></pre></td></tr></table></figure>\n<p>默认设置为开启（on）状态。</p>\n<h3 id=\"Rewrite-常用全局变量\"><a href=\"#Rewrite-常用全局变量\" class=\"headerlink\" title=\"Rewrite 常用全局变量\"></a>Rewrite 常用全局变量</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">变量</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>$args</strong></td>\n<td style=\"text-align:left\">变量中存放了请求URL中的请求指令。比如<a href=\"http://www.myweb.name/server/source?arg1=value1&amp;arg2=value2中的&quot;arg1=value1&amp;arg2=value2&quot;\" target=\"_blank\" rel=\"noopener\">http://www.myweb.name/server/source?arg1=value1&amp;arg2=value2中的&quot;arg1=value1&amp;arg2=value2&quot;</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$content_length</td>\n<td style=\"text-align:left\">变量中存放了请求头中的Content-length字段</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$content_type</td>\n<td style=\"text-align:left\">变量中存放了请求头中的Content-type字段</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$document_root</td>\n<td style=\"text-align:left\">变量中存放了针对当前请求的根路径</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$document_uri</td>\n<td style=\"text-align:left\">变量中存放了请求中的当前URI，并且不包括请求指令，比如<a href=\"http://www.myweb.name/server/source?arg1=value1&amp;arg2=value2中的&quot;/server/source&quot;\" target=\"_blank\" rel=\"noopener\">http://www.myweb.name/server/source?arg1=value1&amp;arg2=value2中的&quot;/server/source&quot;</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>$host</strong></td>\n<td style=\"text-align:left\">变量中存放了请求URL中的主机部分字段，比如<a href=\"http://www.myweb.name/server中的&quot;www.myweb.name&quot;。如果请求中的主机部分字段不可用或者为空，则存放Nginx配置中server块中server_name指令的配置值\" target=\"_blank\" rel=\"noopener\">http://www.myweb.name/server中的&quot;www.myweb.name&quot;。如果请求中的主机部分字段不可用或者为空，则存放Nginx配置中server块中server_name指令的配置值</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$http_user_agent</td>\n<td style=\"text-align:left\">变量中存放客户端的代理信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>$http_cookie</strong></td>\n<td style=\"text-align:left\">变量中存放客户端的cookie信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$limit_rate</td>\n<td style=\"text-align:left\">变量中存放Nginx服务器对网络连接速率的限制，也就是Nginx配置中limit_rate指令的配置值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>$remote_addr</strong></td>\n<td style=\"text-align:left\">变量中存放了客户端的地址</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$remote_port</td>\n<td style=\"text-align:left\">变量中存放了客户端与服务器建立连接的端口号</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$remote_user</td>\n<td style=\"text-align:left\">变量中存放了客户端的用户名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$request_body_file</td>\n<td style=\"text-align:left\">变量中存放了发给后端服务器的本地文件资源的名称</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>$request_method</strong></td>\n<td style=\"text-align:left\">变量中存放了客户端的请求方式，如『GET』、『POST』等</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$request_filename</td>\n<td style=\"text-align:left\">变量中存放了当前请求的资源文件的路径名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>$request_uri</strong></td>\n<td style=\"text-align:left\">变量中存放了当前请求的URI，并且带请求指令</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>$query_string</strong></td>\n<td style=\"text-align:left\">与变量$args含义相同</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>$scheme</strong></td>\n<td style=\"text-align:left\">变量中存放了客户端请求使用的协议，比如”http”、”https”和”ftp”等</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$server_protocol</td>\n<td style=\"text-align:left\">变量中存放了客户端请求协议的版本，比如”HTTP/1.0”、”HTTP/1.1”等</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$server_addr</td>\n<td style=\"text-align:left\">变量中存放了服务器的地址</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$server_name</td>\n<td style=\"text-align:left\">变量中存放了客户端请求到达的服务器的名称</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$server_port</td>\n<td style=\"text-align:left\">变量中存放了客户端请求到达的服务器的端口号</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$uri</td>\n<td style=\"text-align:left\">与变量$document_uri含义相同</td>\n</tr>\n</tbody>\n</table>"},{"title":"centos 6 安装n来控制node版本","toc":false,"date":"2018-04-02T10:03:35.000Z","_content":"\ncentos6发现无法安装nvm，原因：https://github.com/creationix/nvm/issues/1661\n\n解决办法没有给出，于是换成使用n来安装node版本\n\n自己找到一种办法，就是将已经安装过nvm的机器上压缩.nvm文件夹，然后上传不能安装的到服务器上,解压以后再在.bash_profile里边增加如下代码\n\n```\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" # This loads nvm\n```\n\n删除调.nvm里边的version/node下的版本，否则会有一些问题\n\n执行下边代码让设置生效：\n\n```\nsource .bash_profile\n```\n\nn需要通过nvm安装，因此先试用centos yum工具来安装一个默认版本node和npm\n\n```\nyum install nodejs -y\nyum install npm -y\n```\n\n<!-- more -->\n\n完了以后可以看到node版本很低，不满足我们的需求，于是使用n来升级node版本\n\n1、首先通过npm安装node的版本管理工具“n“，不用惊讶，名字就是这么简单，就叫n。据了解，n是node下的一个模块，作者是Express框架的开发者。\n\n```\nnpm i -g n\n```\n\n2、检查n模块\n\n先查看系统node的安装路径，n模块的默认路径为 ‘/usr/local’。\n\n```\n$ which node\n```\n```\n/data/home/server/nodejs/bin/node   #举个例子\n```\n\n如果路径与n模块的默认路径相同可以跳过3步骤。\n\n3、通过N_PREFIX变量来修改 n 的默认node安装路径。\n\n(1) 编辑环境配置文件\n\n```\nvim ~/.bash_profile\n```\n\n(2) 将下面两行代码插入到文件末尾\n\n```\nexport N_PREFIX=/data/home/server/nodejs #node实际安装位置\nexport PATH=$N_PREFIX/bin:$PATH\n```\n\n(3) :wq保存退出；\n\n执行source使修改生效。\n\n```\n$ source ~/.bash_profile\n```\n\n(4) 确认一下环境变量是否生效。\n\n```\necho $N_PREFIX\n/data/home/server/nodejs\n```\n\n4、n模块常用命令\n\n```\nCommands:\n  n                              Output versions installed\n  n latest                       Install or activate the latest node release\n  n -a x86 latest                As above but force 32 bit architecture\n  n stable                       Install or activate the latest stable node release\n  n lts                          Install or activate the latest LTS node release\n  n <version>                    Install node <version>\n  n use <version> [args ...]     Execute node <version> with [args ...]\n  n bin <version>                Output bin path for <version>\n  n rm <version ...>             Remove the given version(s)\n  n prune                        Remove all versions except the current version\n  n --latest                     Output the latest node version available\n  n --stable                     Output the latest stable node version available\n  n --lts                        Output the latest LTS node version available\n  n ls                           Output the versions of node available\n```\n\n(1) 安装node最新版本\n\n```\nn latest\n```\n\n(2) 安装稳定版\n\n```\nn stable\n```\n\n(3) 安装指定版本\n\n```\nn v9.5.0\n```\n\n(4) 查看已安装版本\n\n```\nn\n```\n(5) 删除指定版本\n\n```\nn rm 6.4.0\n```\n","source":"_posts/centos-6-安装n来控制node版本.md","raw":"---\ntitle: centos 6 安装n来控制node版本\ntags:\n  - nodejs\ncategories:\n  - NodeJS\ntoc: false\ndate: 2018-04-02 18:03:35\n---\n\ncentos6发现无法安装nvm，原因：https://github.com/creationix/nvm/issues/1661\n\n解决办法没有给出，于是换成使用n来安装node版本\n\n自己找到一种办法，就是将已经安装过nvm的机器上压缩.nvm文件夹，然后上传不能安装的到服务器上,解压以后再在.bash_profile里边增加如下代码\n\n```\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" # This loads nvm\n```\n\n删除调.nvm里边的version/node下的版本，否则会有一些问题\n\n执行下边代码让设置生效：\n\n```\nsource .bash_profile\n```\n\nn需要通过nvm安装，因此先试用centos yum工具来安装一个默认版本node和npm\n\n```\nyum install nodejs -y\nyum install npm -y\n```\n\n<!-- more -->\n\n完了以后可以看到node版本很低，不满足我们的需求，于是使用n来升级node版本\n\n1、首先通过npm安装node的版本管理工具“n“，不用惊讶，名字就是这么简单，就叫n。据了解，n是node下的一个模块，作者是Express框架的开发者。\n\n```\nnpm i -g n\n```\n\n2、检查n模块\n\n先查看系统node的安装路径，n模块的默认路径为 ‘/usr/local’。\n\n```\n$ which node\n```\n```\n/data/home/server/nodejs/bin/node   #举个例子\n```\n\n如果路径与n模块的默认路径相同可以跳过3步骤。\n\n3、通过N_PREFIX变量来修改 n 的默认node安装路径。\n\n(1) 编辑环境配置文件\n\n```\nvim ~/.bash_profile\n```\n\n(2) 将下面两行代码插入到文件末尾\n\n```\nexport N_PREFIX=/data/home/server/nodejs #node实际安装位置\nexport PATH=$N_PREFIX/bin:$PATH\n```\n\n(3) :wq保存退出；\n\n执行source使修改生效。\n\n```\n$ source ~/.bash_profile\n```\n\n(4) 确认一下环境变量是否生效。\n\n```\necho $N_PREFIX\n/data/home/server/nodejs\n```\n\n4、n模块常用命令\n\n```\nCommands:\n  n                              Output versions installed\n  n latest                       Install or activate the latest node release\n  n -a x86 latest                As above but force 32 bit architecture\n  n stable                       Install or activate the latest stable node release\n  n lts                          Install or activate the latest LTS node release\n  n <version>                    Install node <version>\n  n use <version> [args ...]     Execute node <version> with [args ...]\n  n bin <version>                Output bin path for <version>\n  n rm <version ...>             Remove the given version(s)\n  n prune                        Remove all versions except the current version\n  n --latest                     Output the latest node version available\n  n --stable                     Output the latest stable node version available\n  n --lts                        Output the latest LTS node version available\n  n ls                           Output the versions of node available\n```\n\n(1) 安装node最新版本\n\n```\nn latest\n```\n\n(2) 安装稳定版\n\n```\nn stable\n```\n\n(3) 安装指定版本\n\n```\nn v9.5.0\n```\n\n(4) 查看已安装版本\n\n```\nn\n```\n(5) 删除指定版本\n\n```\nn rm 6.4.0\n```\n","slug":"centos-6-安装n来控制node版本","published":1,"updated":"2019-11-07T02:17:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznxv002qh5s6egfv4sth","content":"<p>centos6发现无法安装nvm，原因：<a href=\"https://github.com/creationix/nvm/issues/1661\" target=\"_blank\" rel=\"noopener\">https://github.com/creationix/nvm/issues/1661</a></p>\n<p>解决办法没有给出，于是换成使用n来安装node版本</p>\n<p>自己找到一种办法，就是将已经安装过nvm的机器上压缩.nvm文件夹，然后上传不能安装的到服务器上,解压以后再在.bash_profile里边增加如下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class=\"line\">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/nvm.sh&quot; # This loads nvm</span><br></pre></td></tr></table></figure>\n<p>删除调.nvm里边的version/node下的版本，否则会有一些问题</p>\n<p>执行下边代码让设置生效：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source .bash_profile</span><br></pre></td></tr></table></figure>\n<p>n需要通过nvm安装，因此先试用centos yum工具来安装一个默认版本node和npm</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install nodejs -y</span><br><span class=\"line\">yum install npm -y</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>完了以后可以看到node版本很低，不满足我们的需求，于是使用n来升级node版本</p>\n<p>1、首先通过npm安装node的版本管理工具“n“，不用惊讶，名字就是这么简单，就叫n。据了解，n是node下的一个模块，作者是Express框架的开发者。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -g n</span><br></pre></td></tr></table></figure>\n<p>2、检查n模块</p>\n<p>先查看系统node的安装路径，n模块的默认路径为 ‘/usr/local’。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ which node</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/data/home/server/nodejs/bin/node   #举个例子</span><br></pre></td></tr></table></figure>\n<p>如果路径与n模块的默认路径相同可以跳过3步骤。</p>\n<p>3、通过N_PREFIX变量来修改 n 的默认node安装路径。</p>\n<p>(1) 编辑环境配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.bash_profile</span><br></pre></td></tr></table></figure>\n<p>(2) 将下面两行代码插入到文件末尾</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export N_PREFIX=/data/home/server/nodejs #node实际安装位置</span><br><span class=\"line\">export PATH=$N_PREFIX/bin:$PATH</span><br></pre></td></tr></table></figure>\n<p>(3) :wq保存退出；</p>\n<p>执行source使修改生效。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n<p>(4) 确认一下环境变量是否生效。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $N_PREFIX</span><br><span class=\"line\">/data/home/server/nodejs</span><br></pre></td></tr></table></figure>\n<p>4、n模块常用命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Commands:</span><br><span class=\"line\">  n                              Output versions installed</span><br><span class=\"line\">  n latest                       Install or activate the latest node release</span><br><span class=\"line\">  n -a x86 latest                As above but force 32 bit architecture</span><br><span class=\"line\">  n stable                       Install or activate the latest stable node release</span><br><span class=\"line\">  n lts                          Install or activate the latest LTS node release</span><br><span class=\"line\">  n &lt;version&gt;                    Install node &lt;version&gt;</span><br><span class=\"line\">  n use &lt;version&gt; [args ...]     Execute node &lt;version&gt; with [args ...]</span><br><span class=\"line\">  n bin &lt;version&gt;                Output bin path for &lt;version&gt;</span><br><span class=\"line\">  n rm &lt;version ...&gt;             Remove the given version(s)</span><br><span class=\"line\">  n prune                        Remove all versions except the current version</span><br><span class=\"line\">  n --latest                     Output the latest node version available</span><br><span class=\"line\">  n --stable                     Output the latest stable node version available</span><br><span class=\"line\">  n --lts                        Output the latest LTS node version available</span><br><span class=\"line\">  n ls                           Output the versions of node available</span><br></pre></td></tr></table></figure>\n<p>(1) 安装node最新版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n latest</span><br></pre></td></tr></table></figure>\n<p>(2) 安装稳定版</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n stable</span><br></pre></td></tr></table></figure>\n<p>(3) 安装指定版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n v9.5.0</span><br></pre></td></tr></table></figure>\n<p>(4) 查看已安装版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n</span><br></pre></td></tr></table></figure>\n<p>(5) 删除指定版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n rm 6.4.0</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>centos6发现无法安装nvm，原因：<a href=\"https://github.com/creationix/nvm/issues/1661\" target=\"_blank\" rel=\"noopener\">https://github.com/creationix/nvm/issues/1661</a></p>\n<p>解决办法没有给出，于是换成使用n来安装node版本</p>\n<p>自己找到一种办法，就是将已经安装过nvm的机器上压缩.nvm文件夹，然后上传不能安装的到服务器上,解压以后再在.bash_profile里边增加如下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class=\"line\">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/nvm.sh&quot; # This loads nvm</span><br></pre></td></tr></table></figure>\n<p>删除调.nvm里边的version/node下的版本，否则会有一些问题</p>\n<p>执行下边代码让设置生效：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source .bash_profile</span><br></pre></td></tr></table></figure>\n<p>n需要通过nvm安装，因此先试用centos yum工具来安装一个默认版本node和npm</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install nodejs -y</span><br><span class=\"line\">yum install npm -y</span><br></pre></td></tr></table></figure>","more":"<p>完了以后可以看到node版本很低，不满足我们的需求，于是使用n来升级node版本</p>\n<p>1、首先通过npm安装node的版本管理工具“n“，不用惊讶，名字就是这么简单，就叫n。据了解，n是node下的一个模块，作者是Express框架的开发者。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -g n</span><br></pre></td></tr></table></figure>\n<p>2、检查n模块</p>\n<p>先查看系统node的安装路径，n模块的默认路径为 ‘/usr/local’。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ which node</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/data/home/server/nodejs/bin/node   #举个例子</span><br></pre></td></tr></table></figure>\n<p>如果路径与n模块的默认路径相同可以跳过3步骤。</p>\n<p>3、通过N_PREFIX变量来修改 n 的默认node安装路径。</p>\n<p>(1) 编辑环境配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.bash_profile</span><br></pre></td></tr></table></figure>\n<p>(2) 将下面两行代码插入到文件末尾</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export N_PREFIX=/data/home/server/nodejs #node实际安装位置</span><br><span class=\"line\">export PATH=$N_PREFIX/bin:$PATH</span><br></pre></td></tr></table></figure>\n<p>(3) :wq保存退出；</p>\n<p>执行source使修改生效。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n<p>(4) 确认一下环境变量是否生效。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $N_PREFIX</span><br><span class=\"line\">/data/home/server/nodejs</span><br></pre></td></tr></table></figure>\n<p>4、n模块常用命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Commands:</span><br><span class=\"line\">  n                              Output versions installed</span><br><span class=\"line\">  n latest                       Install or activate the latest node release</span><br><span class=\"line\">  n -a x86 latest                As above but force 32 bit architecture</span><br><span class=\"line\">  n stable                       Install or activate the latest stable node release</span><br><span class=\"line\">  n lts                          Install or activate the latest LTS node release</span><br><span class=\"line\">  n &lt;version&gt;                    Install node &lt;version&gt;</span><br><span class=\"line\">  n use &lt;version&gt; [args ...]     Execute node &lt;version&gt; with [args ...]</span><br><span class=\"line\">  n bin &lt;version&gt;                Output bin path for &lt;version&gt;</span><br><span class=\"line\">  n rm &lt;version ...&gt;             Remove the given version(s)</span><br><span class=\"line\">  n prune                        Remove all versions except the current version</span><br><span class=\"line\">  n --latest                     Output the latest node version available</span><br><span class=\"line\">  n --stable                     Output the latest stable node version available</span><br><span class=\"line\">  n --lts                        Output the latest LTS node version available</span><br><span class=\"line\">  n ls                           Output the versions of node available</span><br></pre></td></tr></table></figure>\n<p>(1) 安装node最新版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n latest</span><br></pre></td></tr></table></figure>\n<p>(2) 安装稳定版</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n stable</span><br></pre></td></tr></table></figure>\n<p>(3) 安装指定版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n v9.5.0</span><br></pre></td></tr></table></figure>\n<p>(4) 查看已安装版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n</span><br></pre></td></tr></table></figure>\n<p>(5) 删除指定版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n rm 6.4.0</span><br></pre></td></tr></table></figure>"},{"title":"centos 安装 dig","toc":false,"date":"2018-01-11T06:22:49.000Z","_content":"\n执行以下命令：\n\n```\nyum install bind-utils\n```\n\n<!-- more -->\n\n例如：\n\n```\n# dig www.le.com\n\n; <<>> DiG 9.9.4-RedHat-9.9.4-51.el7_4.1 <<>> www.le.com\n;; global options: +cmd\n;; Got answer:\n;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 42461\n;; flags: qr rd ra; QUERY: 1, ANSWER: 4, AUTHORITY: 5, ADDITIONAL: 6\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 4096\n;; QUESTION SECTION:\n;www.le.com.\t\t\tIN\tA\n\n;; ANSWER SECTION:\nwww.le.com.\t\t        525\t    IN\tCNAME\tletvimg.sf.cdnle.com.\nletvimg.sf.cdnle.com.\t598\t    IN\tCNAME\tforeign.sf.cdnle.com.\nforeign.sf.cdnle.com.\t3235\tIN\tCNAME\tvip.sf.cdnle.com.\nvip.sf.cdnle.com.\t    45\t    IN\tA\t    123.125.39.240\n\n;; AUTHORITY SECTION:\ncdnle.com.\t\t171361\tIN\tNS\tns2.cdnle.com.\ncdnle.com.\t\t171361\tIN\tNS\tns4.cdnle.com.\ncdnle.com.\t\t171361\tIN\tNS\tns1.cdnle.com.\ncdnle.com.\t\t171361\tIN\tNS\tns5.cdnle.com.\ncdnle.com.\t\t171361\tIN\tNS\tns3.cdnle.com.\n\n;; ADDITIONAL SECTION:\nns1.cdnle.com.\t\t171361\tIN\tA\t211.154.225.249\nns2.cdnle.com.\t\t171361\tIN\tA\t123.125.47.222\nns3.cdnle.com.\t\t171361\tIN\tA\t36.110.161.240\nns4.cdnle.com.\t\t171361\tIN\tA\t123.59.122.247\nns5.cdnle.com.\t\t171361\tIN\tA\t36.110.223.236\n\n;; Query time: 25 msec\n;; SERVER: 10.0.2.3#53(10.0.2.3)\n;; WHEN: 四 1月 11 06:24:03 UTC 2018\n;; MSG SIZE  rcvd: 296\n```\n","source":"_posts/centos-安装-dig.md","raw":"---\ntitle: centos 安装 dig\ntags:\n  - linux\ncategories:\n  - 后端开发\ntoc: false\ndate: 2018-01-11 14:22:49\n---\n\n执行以下命令：\n\n```\nyum install bind-utils\n```\n\n<!-- more -->\n\n例如：\n\n```\n# dig www.le.com\n\n; <<>> DiG 9.9.4-RedHat-9.9.4-51.el7_4.1 <<>> www.le.com\n;; global options: +cmd\n;; Got answer:\n;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 42461\n;; flags: qr rd ra; QUERY: 1, ANSWER: 4, AUTHORITY: 5, ADDITIONAL: 6\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 4096\n;; QUESTION SECTION:\n;www.le.com.\t\t\tIN\tA\n\n;; ANSWER SECTION:\nwww.le.com.\t\t        525\t    IN\tCNAME\tletvimg.sf.cdnle.com.\nletvimg.sf.cdnle.com.\t598\t    IN\tCNAME\tforeign.sf.cdnle.com.\nforeign.sf.cdnle.com.\t3235\tIN\tCNAME\tvip.sf.cdnle.com.\nvip.sf.cdnle.com.\t    45\t    IN\tA\t    123.125.39.240\n\n;; AUTHORITY SECTION:\ncdnle.com.\t\t171361\tIN\tNS\tns2.cdnle.com.\ncdnle.com.\t\t171361\tIN\tNS\tns4.cdnle.com.\ncdnle.com.\t\t171361\tIN\tNS\tns1.cdnle.com.\ncdnle.com.\t\t171361\tIN\tNS\tns5.cdnle.com.\ncdnle.com.\t\t171361\tIN\tNS\tns3.cdnle.com.\n\n;; ADDITIONAL SECTION:\nns1.cdnle.com.\t\t171361\tIN\tA\t211.154.225.249\nns2.cdnle.com.\t\t171361\tIN\tA\t123.125.47.222\nns3.cdnle.com.\t\t171361\tIN\tA\t36.110.161.240\nns4.cdnle.com.\t\t171361\tIN\tA\t123.59.122.247\nns5.cdnle.com.\t\t171361\tIN\tA\t36.110.223.236\n\n;; Query time: 25 msec\n;; SERVER: 10.0.2.3#53(10.0.2.3)\n;; WHEN: 四 1月 11 06:24:03 UTC 2018\n;; MSG SIZE  rcvd: 296\n```\n","slug":"centos-安装-dig","published":1,"updated":"2019-11-07T02:13:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznxx002th5s6tjhy2j14","content":"<p>执行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install bind-utils</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># dig www.le.com</span><br><span class=\"line\"></span><br><span class=\"line\">; &lt;&lt;&gt;&gt; DiG 9.9.4-RedHat-9.9.4-51.el7_4.1 &lt;&lt;&gt;&gt; www.le.com</span><br><span class=\"line\">;; global options: +cmd</span><br><span class=\"line\">;; Got answer:</span><br><span class=\"line\">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 42461</span><br><span class=\"line\">;; flags: qr rd ra; QUERY: 1, ANSWER: 4, AUTHORITY: 5, ADDITIONAL: 6</span><br><span class=\"line\"></span><br><span class=\"line\">;; OPT PSEUDOSECTION:</span><br><span class=\"line\">; EDNS: version: 0, flags:; udp: 4096</span><br><span class=\"line\">;; QUESTION SECTION:</span><br><span class=\"line\">;www.le.com.\t\t\tIN\tA</span><br><span class=\"line\"></span><br><span class=\"line\">;; ANSWER SECTION:</span><br><span class=\"line\">www.le.com.\t\t        525\t    IN\tCNAME\tletvimg.sf.cdnle.com.</span><br><span class=\"line\">letvimg.sf.cdnle.com.\t598\t    IN\tCNAME\tforeign.sf.cdnle.com.</span><br><span class=\"line\">foreign.sf.cdnle.com.\t3235\tIN\tCNAME\tvip.sf.cdnle.com.</span><br><span class=\"line\">vip.sf.cdnle.com.\t    45\t    IN\tA\t    123.125.39.240</span><br><span class=\"line\"></span><br><span class=\"line\">;; AUTHORITY SECTION:</span><br><span class=\"line\">cdnle.com.\t\t171361\tIN\tNS\tns2.cdnle.com.</span><br><span class=\"line\">cdnle.com.\t\t171361\tIN\tNS\tns4.cdnle.com.</span><br><span class=\"line\">cdnle.com.\t\t171361\tIN\tNS\tns1.cdnle.com.</span><br><span class=\"line\">cdnle.com.\t\t171361\tIN\tNS\tns5.cdnle.com.</span><br><span class=\"line\">cdnle.com.\t\t171361\tIN\tNS\tns3.cdnle.com.</span><br><span class=\"line\"></span><br><span class=\"line\">;; ADDITIONAL SECTION:</span><br><span class=\"line\">ns1.cdnle.com.\t\t171361\tIN\tA\t211.154.225.249</span><br><span class=\"line\">ns2.cdnle.com.\t\t171361\tIN\tA\t123.125.47.222</span><br><span class=\"line\">ns3.cdnle.com.\t\t171361\tIN\tA\t36.110.161.240</span><br><span class=\"line\">ns4.cdnle.com.\t\t171361\tIN\tA\t123.59.122.247</span><br><span class=\"line\">ns5.cdnle.com.\t\t171361\tIN\tA\t36.110.223.236</span><br><span class=\"line\"></span><br><span class=\"line\">;; Query time: 25 msec</span><br><span class=\"line\">;; SERVER: 10.0.2.3#53(10.0.2.3)</span><br><span class=\"line\">;; WHEN: 四 1月 11 06:24:03 UTC 2018</span><br><span class=\"line\">;; MSG SIZE  rcvd: 296</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>执行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install bind-utils</span><br></pre></td></tr></table></figure>","more":"<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># dig www.le.com</span><br><span class=\"line\"></span><br><span class=\"line\">; &lt;&lt;&gt;&gt; DiG 9.9.4-RedHat-9.9.4-51.el7_4.1 &lt;&lt;&gt;&gt; www.le.com</span><br><span class=\"line\">;; global options: +cmd</span><br><span class=\"line\">;; Got answer:</span><br><span class=\"line\">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 42461</span><br><span class=\"line\">;; flags: qr rd ra; QUERY: 1, ANSWER: 4, AUTHORITY: 5, ADDITIONAL: 6</span><br><span class=\"line\"></span><br><span class=\"line\">;; OPT PSEUDOSECTION:</span><br><span class=\"line\">; EDNS: version: 0, flags:; udp: 4096</span><br><span class=\"line\">;; QUESTION SECTION:</span><br><span class=\"line\">;www.le.com.\t\t\tIN\tA</span><br><span class=\"line\"></span><br><span class=\"line\">;; ANSWER SECTION:</span><br><span class=\"line\">www.le.com.\t\t        525\t    IN\tCNAME\tletvimg.sf.cdnle.com.</span><br><span class=\"line\">letvimg.sf.cdnle.com.\t598\t    IN\tCNAME\tforeign.sf.cdnle.com.</span><br><span class=\"line\">foreign.sf.cdnle.com.\t3235\tIN\tCNAME\tvip.sf.cdnle.com.</span><br><span class=\"line\">vip.sf.cdnle.com.\t    45\t    IN\tA\t    123.125.39.240</span><br><span class=\"line\"></span><br><span class=\"line\">;; AUTHORITY SECTION:</span><br><span class=\"line\">cdnle.com.\t\t171361\tIN\tNS\tns2.cdnle.com.</span><br><span class=\"line\">cdnle.com.\t\t171361\tIN\tNS\tns4.cdnle.com.</span><br><span class=\"line\">cdnle.com.\t\t171361\tIN\tNS\tns1.cdnle.com.</span><br><span class=\"line\">cdnle.com.\t\t171361\tIN\tNS\tns5.cdnle.com.</span><br><span class=\"line\">cdnle.com.\t\t171361\tIN\tNS\tns3.cdnle.com.</span><br><span class=\"line\"></span><br><span class=\"line\">;; ADDITIONAL SECTION:</span><br><span class=\"line\">ns1.cdnle.com.\t\t171361\tIN\tA\t211.154.225.249</span><br><span class=\"line\">ns2.cdnle.com.\t\t171361\tIN\tA\t123.125.47.222</span><br><span class=\"line\">ns3.cdnle.com.\t\t171361\tIN\tA\t36.110.161.240</span><br><span class=\"line\">ns4.cdnle.com.\t\t171361\tIN\tA\t123.59.122.247</span><br><span class=\"line\">ns5.cdnle.com.\t\t171361\tIN\tA\t36.110.223.236</span><br><span class=\"line\"></span><br><span class=\"line\">;; Query time: 25 msec</span><br><span class=\"line\">;; SERVER: 10.0.2.3#53(10.0.2.3)</span><br><span class=\"line\">;; WHEN: 四 1月 11 06:24:03 UTC 2018</span><br><span class=\"line\">;; MSG SIZE  rcvd: 296</span><br></pre></td></tr></table></figure>"},{"title":"centos7 安装 redis并配置开机启动","toc":false,"date":"2017-10-10T06:20:26.000Z","_content":"\n由于centos7系统已经出现很久，所以优先使用centos7来安装redis，这里做个记录。这里我使用的centos7是通过vagrant创建的一个虚拟机，能够让我最大限度的还原真实服务器环境。\n\n<!-- more -->\n\n1. 首先安装wget工具，下载自动更新ius包文件\n\n\t```\n\tyum install wget -y\n\twget -O setup.sh setup.ius.io\n\tsh ./setup.sh\n\t```\n\t\n\t[https://ius.io/GettingStarted/](https://ius.io/GettingStarted/)这个网站有几种更新yum包的方式，我们这里使用的是自动安装方式，命令也比手动的方式要简单好记，实际工作中我们记住切实可行的就行了。\n\n2. 安装完成以后执行\n\t\n\t```\n\tyum install redis -y\n\t```\n3. 启动redis并设置开机启动redis\n\n\t```\n\tsystemctl start redis\n\tsystemctl enable redis\n\t```\n4. 设置除了本机可访问，其他机器也可以访问\n\t\n\t```\n\twhereis redis\n\t```\n\t通过这个命令获取redis配置文件地址：\n\t![redis配置文件地址](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-171857.png)\n\t然后修改这个文件中NETWORK注释下的bind 127.0.0.1为bind 0.0.0.0\n\t![修改配置文件](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-172037.png)\n5. 重启redis\n\n\t```\n\tsystemctl restart redis\n\t```\n6. 通过rdm连接服务器redis\n\t![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-172353.png)\n7. 本机连接redis\n\n\t```\n\tredis-cli\n\t```\n\n后记：在centos7上安装软件总是那么顺手，但是在我们的生产环境由于历史原因服务器也许不是centos7，这时候安装就变得异常啰嗦与复杂，当然也许是由于我个人用的比较少，觉得麻烦而已。在centos6.7上我也尝试安装了一次，记录如下。\n","source":"_posts/centos7 安装 redis并配置开机启动.md","raw":"---\ntitle: centos7 安装 redis并配置开机启动\ntags:\n  - redis\ncategories:\n  - NodeJS\ntoc: false\ndate: 2017-10-10 14:20:26\n---\n\n由于centos7系统已经出现很久，所以优先使用centos7来安装redis，这里做个记录。这里我使用的centos7是通过vagrant创建的一个虚拟机，能够让我最大限度的还原真实服务器环境。\n\n<!-- more -->\n\n1. 首先安装wget工具，下载自动更新ius包文件\n\n\t```\n\tyum install wget -y\n\twget -O setup.sh setup.ius.io\n\tsh ./setup.sh\n\t```\n\t\n\t[https://ius.io/GettingStarted/](https://ius.io/GettingStarted/)这个网站有几种更新yum包的方式，我们这里使用的是自动安装方式，命令也比手动的方式要简单好记，实际工作中我们记住切实可行的就行了。\n\n2. 安装完成以后执行\n\t\n\t```\n\tyum install redis -y\n\t```\n3. 启动redis并设置开机启动redis\n\n\t```\n\tsystemctl start redis\n\tsystemctl enable redis\n\t```\n4. 设置除了本机可访问，其他机器也可以访问\n\t\n\t```\n\twhereis redis\n\t```\n\t通过这个命令获取redis配置文件地址：\n\t![redis配置文件地址](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-171857.png)\n\t然后修改这个文件中NETWORK注释下的bind 127.0.0.1为bind 0.0.0.0\n\t![修改配置文件](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-172037.png)\n5. 重启redis\n\n\t```\n\tsystemctl restart redis\n\t```\n6. 通过rdm连接服务器redis\n\t![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-172353.png)\n7. 本机连接redis\n\n\t```\n\tredis-cli\n\t```\n\n后记：在centos7上安装软件总是那么顺手，但是在我们的生产环境由于历史原因服务器也许不是centos7，这时候安装就变得异常啰嗦与复杂，当然也许是由于我个人用的比较少，觉得麻烦而已。在centos6.7上我也尝试安装了一次，记录如下。\n","slug":"centos7 安装 redis并配置开机启动","published":1,"updated":"2019-11-07T02:13:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznxz002yh5s6964dgkn1","content":"<p>由于centos7系统已经出现很久，所以优先使用centos7来安装redis，这里做个记录。这里我使用的centos7是通过vagrant创建的一个虚拟机，能够让我最大限度的还原真实服务器环境。</p>\n<a id=\"more\"></a>\n<ol>\n<li><p>首先安装wget工具，下载自动更新ius包文件</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install wget -y</span><br><span class=\"line\">wget -O setup.sh setup.ius.io</span><br><span class=\"line\">sh ./setup.sh</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<pre><code>[https://ius.io/GettingStarted/](https://ius.io/GettingStarted/)这个网站有几种更新yum包的方式，我们这里使用的是自动安装方式，命令也比手动的方式要简单好记，实际工作中我们记住切实可行的就行了。\n</code></pre><ol start=\"2\">\n<li><p>安装完成以后执行</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install redis -y</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动redis并设置开机启动redis</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start redis</span><br><span class=\"line\">systemctl enable redis</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置除了本机可访问，其他机器也可以访问</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">whereis redis</span><br></pre></td></tr></table></figure>\n<p> 通过这个命令获取redis配置文件地址：<br> <img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-171857.png\" alt=\"redis配置文件地址\"><br> 然后修改这个文件中NETWORK注释下的bind 127.0.0.1为bind 0.0.0.0<br> <img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-172037.png\" alt=\"修改配置文件\"></p>\n</li>\n<li><p>重启redis</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart redis</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过rdm连接服务器redis<br> <img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-172353.png\" alt></p>\n</li>\n<li><p>本机连接redis</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>后记：在centos7上安装软件总是那么顺手，但是在我们的生产环境由于历史原因服务器也许不是centos7，这时候安装就变得异常啰嗦与复杂，当然也许是由于我个人用的比较少，觉得麻烦而已。在centos6.7上我也尝试安装了一次，记录如下。</p>\n","site":{"data":{}},"excerpt":"<p>由于centos7系统已经出现很久，所以优先使用centos7来安装redis，这里做个记录。这里我使用的centos7是通过vagrant创建的一个虚拟机，能够让我最大限度的还原真实服务器环境。</p>","more":"<ol>\n<li><p>首先安装wget工具，下载自动更新ius包文件</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install wget -y</span><br><span class=\"line\">wget -O setup.sh setup.ius.io</span><br><span class=\"line\">sh ./setup.sh</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<pre><code>[https://ius.io/GettingStarted/](https://ius.io/GettingStarted/)这个网站有几种更新yum包的方式，我们这里使用的是自动安装方式，命令也比手动的方式要简单好记，实际工作中我们记住切实可行的就行了。\n</code></pre><ol start=\"2\">\n<li><p>安装完成以后执行</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install redis -y</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动redis并设置开机启动redis</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start redis</span><br><span class=\"line\">systemctl enable redis</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置除了本机可访问，其他机器也可以访问</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">whereis redis</span><br></pre></td></tr></table></figure>\n<p> 通过这个命令获取redis配置文件地址：<br> <img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-171857.png\" alt=\"redis配置文件地址\"><br> 然后修改这个文件中NETWORK注释下的bind 127.0.0.1为bind 0.0.0.0<br> <img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-172037.png\" alt=\"修改配置文件\"></p>\n</li>\n<li><p>重启redis</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart redis</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过rdm连接服务器redis<br> <img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-172353.png\" alt></p>\n</li>\n<li><p>本机连接redis</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>后记：在centos7上安装软件总是那么顺手，但是在我们的生产环境由于历史原因服务器也许不是centos7，这时候安装就变得异常啰嗦与复杂，当然也许是由于我个人用的比较少，觉得麻烦而已。在centos6.7上我也尝试安装了一次，记录如下。</p>"},{"title":"centos6.7 安装 redis并配置开机启动","toc":false,"date":"2017-10-10T10:20:26.000Z","_content":"\n在实际开发中有时候我们生产环境使用的服务器并不是centos7，这样造成我们安装软件需要使用更加通用的方式。\n\n1. 首先安装wget工具，下载redis包，我们在github下载release包，官网地址目前无法访问\n\t\n\t```\n\tyum install wget -y\n\twget https://github.com/antirez/redis/archive/4.0.2.tar.gz\n\t```\n<!-- more -->\n\n2. 解压&make&安装\n\t```\n\ttar zxvf 4.0.2.tar.gz \n\tcd redis-4.0.2/\n\tmake\n\tcd src && make install\n\t```\n\t![make && make install](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-175039.png)\n\t执行完make install以后，会把redis-cli、redis-server放到/usr/local/bin/下边，由于服务器并没有把这个路径加到环境变量里边，因此我们需要多一步操作\n3. 修改环境变量，使redis命令生效\n\n\t```\n\tcd ~/\n\tvi .bashrc\n\t\n\t# 然后再文件末尾添加如下命令\n\tPATH=$PATH:/usr/local/bin/\n\t\n\t#保存后执行下边命令\n\tsource .bashrc\n\t```\n\t![修改环境变量](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-175531.png)\n4. 复制配置文件到/etc 目录下\n\n\t```\n\tcp ~/redis-4.0.2/redis.conf /etc/\n\t```\n\t\n5. 建立用户与日志目录，建议为Redis单独建立一个用户，并新建data和日志文件夹\n\n\t```\n\tsudo useradd redis  \n\tsudo mkdir -p /var/lib/redis  \n\tsudo mkdir -p /var/log/redis  \n\tsudo chown redis.redis /var/lib/redis  \n\tsudo chown redis.redis /var/log/redis \n\t```\n6. 修改配置文件\n\t\n\t```\n\tvi /etc/redis.conf\n\t```\n\t\n\t修改绑定IP，让本机之外的IP也能够访问redis bind 0.0.0.0\n\t![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-180325.png)\n\t\n\t修改启动模式为后台启动 daemonize yes\n\t![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-180500.png)\n\t\n\t修改数据文件存储位置 dir /var/lib/redis\n\t![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-180751.png)\n\t\n7. 配置init脚本\n\n\t```\n\tvi /etc/init.d/redis\n\t```\n\t\n\t```\n\t# chkconfig:   2345 90 10  \n  \n\t# description:  Redis is a persistent key-value database  \n\t  \n\t###########################  \n\tPATH=/usr/local/bin:/sbin:/usr/bin:/bin  \n\t     \n\tREDISPORT=6379  \n\tEXEC=/usr/local/bin/redis-server  \n\tREDIS_CLI=/usr/local/bin/redis-cli  \n\t     \n\tPIDFILE=/var/run/redis.pid  \n\tCONF=\"/etc/redis.conf\"  \n\t     \n\tcase \"$1\" in  \n\t    start)  \n\t        if [ -f $PIDFILE ]  \n\t        then  \n\t                echo \"$PIDFILE exists, process is already running or crashed\"  \n\t        else  \n\t                echo \"Starting Redis server...\"  \n\t                $EXEC $CONF  \n\t        fi  \n\t        if [ \"$?\"=\"0\" ]   \n\t        then  \n\t              echo \"Redis is running...\"  \n\t        fi  \n\t        ;;  \n\t    stop)  \n\t        if [ ! -f $PIDFILE ]  \n\t        then  \n\t                echo \"$PIDFILE does not exist, process is not running\"  \n\t        else  \n\t                PID=$(cat $PIDFILE)  \n\t                echo \"Stopping ...\"  \n\t                $REDIS_CLI -p $REDISPORT SHUTDOWN  \n\t                while [ -x ${PIDFILE} ]  \n\t               do  \n\t                    echo \"Waiting for Redis to shutdown ...\"  \n\t                    sleep 1  \n\t                done  \n\t                echo \"Redis stopped\"  \n\t        fi  \n\t        ;;  \n\t   restart|force-reload)  \n\t        ${0} stop  \n\t        ${0} start  \n\t        ;;  \n\t  *)  \n\t    echo \"Usage: /etc/init.d/redis {start|stop|restart|force-reload}\" >&2  \n\t        exit 1  \n\tesac  \n\t##############################  \n\t```\n8. 添加执行权限\n\n\t```\n\tchmod +x /etc/init.d/redis  \n\t```\n\t\n9. 设定开机启动服务\n\n\t```\n\tsudo chkconfig redis on    \n\t```\n10. 启动，停止redis\n\t\n\t```\n\tservice redis start    \n\tservice redis stop \n\t```\n\t\n11. 测试redis\n\n\t```\n\tredis-cli\n\t```\n12. 通过rdm连接\n\t\n\t![通过rdm连接](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-183804@2x.png)\n","source":"_posts/centos6.7 安装 redis并配置开机启动.md","raw":"---\ntitle: centos6.7 安装 redis并配置开机启动\ntags:\n  - redis\ncategories:\n  - NodeJS\ntoc: false\ndate: 2017-10-10 18:20:26\n---\n\n在实际开发中有时候我们生产环境使用的服务器并不是centos7，这样造成我们安装软件需要使用更加通用的方式。\n\n1. 首先安装wget工具，下载redis包，我们在github下载release包，官网地址目前无法访问\n\t\n\t```\n\tyum install wget -y\n\twget https://github.com/antirez/redis/archive/4.0.2.tar.gz\n\t```\n<!-- more -->\n\n2. 解压&make&安装\n\t```\n\ttar zxvf 4.0.2.tar.gz \n\tcd redis-4.0.2/\n\tmake\n\tcd src && make install\n\t```\n\t![make && make install](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-175039.png)\n\t执行完make install以后，会把redis-cli、redis-server放到/usr/local/bin/下边，由于服务器并没有把这个路径加到环境变量里边，因此我们需要多一步操作\n3. 修改环境变量，使redis命令生效\n\n\t```\n\tcd ~/\n\tvi .bashrc\n\t\n\t# 然后再文件末尾添加如下命令\n\tPATH=$PATH:/usr/local/bin/\n\t\n\t#保存后执行下边命令\n\tsource .bashrc\n\t```\n\t![修改环境变量](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-175531.png)\n4. 复制配置文件到/etc 目录下\n\n\t```\n\tcp ~/redis-4.0.2/redis.conf /etc/\n\t```\n\t\n5. 建立用户与日志目录，建议为Redis单独建立一个用户，并新建data和日志文件夹\n\n\t```\n\tsudo useradd redis  \n\tsudo mkdir -p /var/lib/redis  \n\tsudo mkdir -p /var/log/redis  \n\tsudo chown redis.redis /var/lib/redis  \n\tsudo chown redis.redis /var/log/redis \n\t```\n6. 修改配置文件\n\t\n\t```\n\tvi /etc/redis.conf\n\t```\n\t\n\t修改绑定IP，让本机之外的IP也能够访问redis bind 0.0.0.0\n\t![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-180325.png)\n\t\n\t修改启动模式为后台启动 daemonize yes\n\t![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-180500.png)\n\t\n\t修改数据文件存储位置 dir /var/lib/redis\n\t![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-180751.png)\n\t\n7. 配置init脚本\n\n\t```\n\tvi /etc/init.d/redis\n\t```\n\t\n\t```\n\t# chkconfig:   2345 90 10  \n  \n\t# description:  Redis is a persistent key-value database  \n\t  \n\t###########################  \n\tPATH=/usr/local/bin:/sbin:/usr/bin:/bin  \n\t     \n\tREDISPORT=6379  \n\tEXEC=/usr/local/bin/redis-server  \n\tREDIS_CLI=/usr/local/bin/redis-cli  \n\t     \n\tPIDFILE=/var/run/redis.pid  \n\tCONF=\"/etc/redis.conf\"  \n\t     \n\tcase \"$1\" in  \n\t    start)  \n\t        if [ -f $PIDFILE ]  \n\t        then  \n\t                echo \"$PIDFILE exists, process is already running or crashed\"  \n\t        else  \n\t                echo \"Starting Redis server...\"  \n\t                $EXEC $CONF  \n\t        fi  \n\t        if [ \"$?\"=\"0\" ]   \n\t        then  \n\t              echo \"Redis is running...\"  \n\t        fi  \n\t        ;;  \n\t    stop)  \n\t        if [ ! -f $PIDFILE ]  \n\t        then  \n\t                echo \"$PIDFILE does not exist, process is not running\"  \n\t        else  \n\t                PID=$(cat $PIDFILE)  \n\t                echo \"Stopping ...\"  \n\t                $REDIS_CLI -p $REDISPORT SHUTDOWN  \n\t                while [ -x ${PIDFILE} ]  \n\t               do  \n\t                    echo \"Waiting for Redis to shutdown ...\"  \n\t                    sleep 1  \n\t                done  \n\t                echo \"Redis stopped\"  \n\t        fi  \n\t        ;;  \n\t   restart|force-reload)  \n\t        ${0} stop  \n\t        ${0} start  \n\t        ;;  \n\t  *)  \n\t    echo \"Usage: /etc/init.d/redis {start|stop|restart|force-reload}\" >&2  \n\t        exit 1  \n\tesac  \n\t##############################  \n\t```\n8. 添加执行权限\n\n\t```\n\tchmod +x /etc/init.d/redis  \n\t```\n\t\n9. 设定开机启动服务\n\n\t```\n\tsudo chkconfig redis on    \n\t```\n10. 启动，停止redis\n\t\n\t```\n\tservice redis start    \n\tservice redis stop \n\t```\n\t\n11. 测试redis\n\n\t```\n\tredis-cli\n\t```\n12. 通过rdm连接\n\t\n\t![通过rdm连接](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-183804@2x.png)\n","slug":"centos6.7 安装 redis并配置开机启动","published":1,"updated":"2019-11-07T02:13:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzny00031h5s6q5s9spic","content":"<p>在实际开发中有时候我们生产环境使用的服务器并不是centos7，这样造成我们安装软件需要使用更加通用的方式。</p>\n<ol>\n<li><p>首先安装wget工具，下载redis包，我们在github下载release包，官网地址目前无法访问</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install wget -y</span><br><span class=\"line\">wget https://github.com/antirez/redis/archive/4.0.2.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<a id=\"more\"></a>\n<ol start=\"2\">\n<li><p>解压&amp;make&amp;安装</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf 4.0.2.tar.gz </span><br><span class=\"line\">cd redis-4.0.2/</span><br><span class=\"line\">make</span><br><span class=\"line\">cd src &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<p> <img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-175039.png\" alt=\"make &amp;&amp; make install\"><br> 执行完make install以后，会把redis-cli、redis-server放到/usr/local/bin/下边，由于服务器并没有把这个路径加到环境变量里边，因此我们需要多一步操作</p>\n</li>\n<li><p>修改环境变量，使redis命令生效</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/</span><br><span class=\"line\">vi .bashrc</span><br><span class=\"line\"></span><br><span class=\"line\"># 然后再文件末尾添加如下命令</span><br><span class=\"line\">PATH=$PATH:/usr/local/bin/</span><br><span class=\"line\"></span><br><span class=\"line\">#保存后执行下边命令</span><br><span class=\"line\">source .bashrc</span><br></pre></td></tr></table></figure>\n<p> <img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-175531.png\" alt=\"修改环境变量\"></p>\n</li>\n<li><p>复制配置文件到/etc 目录下</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp ~/redis-4.0.2/redis.conf /etc/</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"5\">\n<li><p>建立用户与日志目录，建议为Redis单独建立一个用户，并新建data和日志文件夹</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo useradd redis  </span><br><span class=\"line\">sudo mkdir -p /var/lib/redis  </span><br><span class=\"line\">sudo mkdir -p /var/log/redis  </span><br><span class=\"line\">sudo chown redis.redis /var/lib/redis  </span><br><span class=\"line\">sudo chown redis.redis /var/log/redis</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置文件</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/redis.conf</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<pre><code>修改绑定IP，让本机之外的IP也能够访问redis bind 0.0.0.0\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-180325.png)\n\n修改启动模式为后台启动 daemonize yes\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-180500.png)\n\n修改数据文件存储位置 dir /var/lib/redis\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-180751.png)\n</code></pre><ol start=\"7\">\n<li><p>配置init脚本</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/init.d/redis</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># chkconfig:   2345 90 10  </span><br><span class=\"line\"> </span><br><span class=\"line\"># description:  Redis is a persistent key-value database  </span><br><span class=\"line\">  </span><br><span class=\"line\">###########################  </span><br><span class=\"line\">PATH=/usr/local/bin:/sbin:/usr/bin:/bin  </span><br><span class=\"line\">     </span><br><span class=\"line\">REDISPORT=6379  </span><br><span class=\"line\">EXEC=/usr/local/bin/redis-server  </span><br><span class=\"line\">REDIS_CLI=/usr/local/bin/redis-cli  </span><br><span class=\"line\">     </span><br><span class=\"line\">PIDFILE=/var/run/redis.pid  </span><br><span class=\"line\">CONF=&quot;/etc/redis.conf&quot;  </span><br><span class=\"line\">     </span><br><span class=\"line\">case &quot;$1&quot; in  </span><br><span class=\"line\">    start)  </span><br><span class=\"line\">        if [ -f $PIDFILE ]  </span><br><span class=\"line\">        then  </span><br><span class=\"line\">                echo &quot;$PIDFILE exists, process is already running or crashed&quot;  </span><br><span class=\"line\">        else  </span><br><span class=\"line\">                echo &quot;Starting Redis server...&quot;  </span><br><span class=\"line\">                $EXEC $CONF  </span><br><span class=\"line\">        fi  </span><br><span class=\"line\">        if [ &quot;$?&quot;=&quot;0&quot; ]   </span><br><span class=\"line\">        then  </span><br><span class=\"line\">              echo &quot;Redis is running...&quot;  </span><br><span class=\"line\">        fi  </span><br><span class=\"line\">        ;;  </span><br><span class=\"line\">    stop)  </span><br><span class=\"line\">        if [ ! -f $PIDFILE ]  </span><br><span class=\"line\">        then  </span><br><span class=\"line\">                echo &quot;$PIDFILE does not exist, process is not running&quot;  </span><br><span class=\"line\">        else  </span><br><span class=\"line\">                PID=$(cat $PIDFILE)  </span><br><span class=\"line\">                echo &quot;Stopping ...&quot;  </span><br><span class=\"line\">                $REDIS_CLI -p $REDISPORT SHUTDOWN  </span><br><span class=\"line\">                while [ -x $&#123;PIDFILE&#125; ]  </span><br><span class=\"line\">               do  </span><br><span class=\"line\">                    echo &quot;Waiting for Redis to shutdown ...&quot;  </span><br><span class=\"line\">                    sleep 1  </span><br><span class=\"line\">                done  </span><br><span class=\"line\">                echo &quot;Redis stopped&quot;  </span><br><span class=\"line\">        fi  </span><br><span class=\"line\">        ;;  </span><br><span class=\"line\">   restart|force-reload)  </span><br><span class=\"line\">        $&#123;0&#125; stop  </span><br><span class=\"line\">        $&#123;0&#125; start  </span><br><span class=\"line\">        ;;  </span><br><span class=\"line\">  *)  </span><br><span class=\"line\">    echo &quot;Usage: /etc/init.d/redis &#123;start|stop|restart|force-reload&#125;&quot; &gt;&amp;2  </span><br><span class=\"line\">        exit 1  </span><br><span class=\"line\">esac  </span><br><span class=\"line\">##############################</span><br></pre></td></tr></table></figure>\n</code></pre><ol start=\"8\">\n<li><p>添加执行权限</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /etc/init.d/redis</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"9\">\n<li><p>设定开机启动服务</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chkconfig redis on</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动，停止redis</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service redis start    </span><br><span class=\"line\">service redis stop</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"11\">\n<li><p>测试redis</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过rdm连接</p>\n<p><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-183804@2x.png\" alt=\"通过rdm连接\"></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>在实际开发中有时候我们生产环境使用的服务器并不是centos7，这样造成我们安装软件需要使用更加通用的方式。</p>\n<ol>\n<li><p>首先安装wget工具，下载redis包，我们在github下载release包，官网地址目前无法访问</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install wget -y</span><br><span class=\"line\">wget https://github.com/antirez/redis/archive/4.0.2.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n</ol>","more":"<ol start=\"2\">\n<li><p>解压&amp;make&amp;安装</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf 4.0.2.tar.gz </span><br><span class=\"line\">cd redis-4.0.2/</span><br><span class=\"line\">make</span><br><span class=\"line\">cd src &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<p> <img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-175039.png\" alt=\"make &amp;&amp; make install\"><br> 执行完make install以后，会把redis-cli、redis-server放到/usr/local/bin/下边，由于服务器并没有把这个路径加到环境变量里边，因此我们需要多一步操作</p>\n</li>\n<li><p>修改环境变量，使redis命令生效</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/</span><br><span class=\"line\">vi .bashrc</span><br><span class=\"line\"></span><br><span class=\"line\"># 然后再文件末尾添加如下命令</span><br><span class=\"line\">PATH=$PATH:/usr/local/bin/</span><br><span class=\"line\"></span><br><span class=\"line\">#保存后执行下边命令</span><br><span class=\"line\">source .bashrc</span><br></pre></td></tr></table></figure>\n<p> <img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-175531.png\" alt=\"修改环境变量\"></p>\n</li>\n<li><p>复制配置文件到/etc 目录下</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp ~/redis-4.0.2/redis.conf /etc/</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"5\">\n<li><p>建立用户与日志目录，建议为Redis单独建立一个用户，并新建data和日志文件夹</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo useradd redis  </span><br><span class=\"line\">sudo mkdir -p /var/lib/redis  </span><br><span class=\"line\">sudo mkdir -p /var/log/redis  </span><br><span class=\"line\">sudo chown redis.redis /var/lib/redis  </span><br><span class=\"line\">sudo chown redis.redis /var/log/redis</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置文件</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/redis.conf</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<pre><code>修改绑定IP，让本机之外的IP也能够访问redis bind 0.0.0.0\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-180325.png)\n\n修改启动模式为后台启动 daemonize yes\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-180500.png)\n\n修改数据文件存储位置 dir /var/lib/redis\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-180751.png)\n</code></pre><ol start=\"7\">\n<li><p>配置init脚本</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/init.d/redis</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># chkconfig:   2345 90 10  </span><br><span class=\"line\"> </span><br><span class=\"line\"># description:  Redis is a persistent key-value database  </span><br><span class=\"line\">  </span><br><span class=\"line\">###########################  </span><br><span class=\"line\">PATH=/usr/local/bin:/sbin:/usr/bin:/bin  </span><br><span class=\"line\">     </span><br><span class=\"line\">REDISPORT=6379  </span><br><span class=\"line\">EXEC=/usr/local/bin/redis-server  </span><br><span class=\"line\">REDIS_CLI=/usr/local/bin/redis-cli  </span><br><span class=\"line\">     </span><br><span class=\"line\">PIDFILE=/var/run/redis.pid  </span><br><span class=\"line\">CONF=&quot;/etc/redis.conf&quot;  </span><br><span class=\"line\">     </span><br><span class=\"line\">case &quot;$1&quot; in  </span><br><span class=\"line\">    start)  </span><br><span class=\"line\">        if [ -f $PIDFILE ]  </span><br><span class=\"line\">        then  </span><br><span class=\"line\">                echo &quot;$PIDFILE exists, process is already running or crashed&quot;  </span><br><span class=\"line\">        else  </span><br><span class=\"line\">                echo &quot;Starting Redis server...&quot;  </span><br><span class=\"line\">                $EXEC $CONF  </span><br><span class=\"line\">        fi  </span><br><span class=\"line\">        if [ &quot;$?&quot;=&quot;0&quot; ]   </span><br><span class=\"line\">        then  </span><br><span class=\"line\">              echo &quot;Redis is running...&quot;  </span><br><span class=\"line\">        fi  </span><br><span class=\"line\">        ;;  </span><br><span class=\"line\">    stop)  </span><br><span class=\"line\">        if [ ! -f $PIDFILE ]  </span><br><span class=\"line\">        then  </span><br><span class=\"line\">                echo &quot;$PIDFILE does not exist, process is not running&quot;  </span><br><span class=\"line\">        else  </span><br><span class=\"line\">                PID=$(cat $PIDFILE)  </span><br><span class=\"line\">                echo &quot;Stopping ...&quot;  </span><br><span class=\"line\">                $REDIS_CLI -p $REDISPORT SHUTDOWN  </span><br><span class=\"line\">                while [ -x $&#123;PIDFILE&#125; ]  </span><br><span class=\"line\">               do  </span><br><span class=\"line\">                    echo &quot;Waiting for Redis to shutdown ...&quot;  </span><br><span class=\"line\">                    sleep 1  </span><br><span class=\"line\">                done  </span><br><span class=\"line\">                echo &quot;Redis stopped&quot;  </span><br><span class=\"line\">        fi  </span><br><span class=\"line\">        ;;  </span><br><span class=\"line\">   restart|force-reload)  </span><br><span class=\"line\">        $&#123;0&#125; stop  </span><br><span class=\"line\">        $&#123;0&#125; start  </span><br><span class=\"line\">        ;;  </span><br><span class=\"line\">  *)  </span><br><span class=\"line\">    echo &quot;Usage: /etc/init.d/redis &#123;start|stop|restart|force-reload&#125;&quot; &gt;&amp;2  </span><br><span class=\"line\">        exit 1  </span><br><span class=\"line\">esac  </span><br><span class=\"line\">##############################</span><br></pre></td></tr></table></figure>\n</code></pre><ol start=\"8\">\n<li><p>添加执行权限</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /etc/init.d/redis</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"9\">\n<li><p>设定开机启动服务</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chkconfig redis on</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动，停止redis</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service redis start    </span><br><span class=\"line\">service redis stop</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"11\">\n<li><p>测试redis</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过rdm连接</p>\n<p><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-183804@2x.png\" alt=\"通过rdm连接\"></p>\n</li>\n</ol>"},{"title":"centos7对普通用户授权sudo权限","toc":false,"date":"2019-08-14T07:18:17.000Z","_content":"\ncentos7 默认普通用户没有sudo权限，因此需要我们手动设置\n步骤： \n1、su进入root用户，`vi /etc/sudoers `\n2、找到文件中的下列文字： \n`###Allow root to run any commands anywhere `\n`root ALL=(ALL) ALL`\n在该行下面添加如下即可 \n`xxx ALL=(ALL) NOPASSWD: ALL`\nxxx代表用户名 \n3、然后保存退出，再次切换到普通用户下，执行sudo命令就可以看到相应的信息了。\n而且*不用输密码*\n","source":"_posts/centos7对普通用户授权sudo权限.md","raw":"---\ntitle: centos7对普通用户授权sudo权限\ntags:\n  - linux\n  - jenkins\n  - 知识点备忘\ncategories:\n  - Web开发\ntoc: false\ndate: 2019-08-14 15:18:17\n---\n\ncentos7 默认普通用户没有sudo权限，因此需要我们手动设置\n步骤： \n1、su进入root用户，`vi /etc/sudoers `\n2、找到文件中的下列文字： \n`###Allow root to run any commands anywhere `\n`root ALL=(ALL) ALL`\n在该行下面添加如下即可 \n`xxx ALL=(ALL) NOPASSWD: ALL`\nxxx代表用户名 \n3、然后保存退出，再次切换到普通用户下，执行sudo命令就可以看到相应的信息了。\n而且*不用输密码*\n","slug":"centos7对普通用户授权sudo权限","published":1,"updated":"2019-11-07T02:17:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzny10035h5s6l4csmebs","content":"<p>centos7 默认普通用户没有sudo权限，因此需要我们手动设置<br>步骤：<br>1、su进入root用户，<code>vi /etc/sudoers</code><br>2、找到文件中的下列文字：<br><code>###Allow root to run any commands anywhere</code><br><code>root ALL=(ALL) ALL</code><br>在该行下面添加如下即可<br><code>xxx ALL=(ALL) NOPASSWD: ALL</code><br>xxx代表用户名<br>3、然后保存退出，再次切换到普通用户下，执行sudo命令就可以看到相应的信息了。<br>而且<em>不用输密码</em></p>\n","site":{"data":{}},"excerpt":"","more":"<p>centos7 默认普通用户没有sudo权限，因此需要我们手动设置<br>步骤：<br>1、su进入root用户，<code>vi /etc/sudoers</code><br>2、找到文件中的下列文字：<br><code>###Allow root to run any commands anywhere</code><br><code>root ALL=(ALL) ALL</code><br>在该行下面添加如下即可<br><code>xxx ALL=(ALL) NOPASSWD: ALL</code><br>xxx代表用户名<br>3、然后保存退出，再次切换到普通用户下，执行sudo命令就可以看到相应的信息了。<br>而且<em>不用输密码</em></p>\n"},{"title":"centos7 安装nvm","toc":false,"date":"2017-12-04T07:03:11.000Z","_content":"\n网上找了一些发现这个比较好用：\n\n```\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash\n```\n\n重启命令行，否则不生效，如果用secureCRT则退出再进入即可\n\n下边命令安装稳定版\n\n```\nnvm install stable\n```\n\n如果是国内环境可以像修改npm一样修改nvm的源：\n\n```\n把环境变量 NVM_NODEJS_ORG_MIRROR, 加入到 .bash_profile 文件中:\n# nvm\nexport NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node\n```\n","source":"_posts/centos7-安装nvm.md","raw":"---\ntitle: centos7 安装nvm\ntags:\n  - nodejs\ncategories:\n  - NodeJS\ntoc: false\ndate: 2017-12-04 15:03:11\n---\n\n网上找了一些发现这个比较好用：\n\n```\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash\n```\n\n重启命令行，否则不生效，如果用secureCRT则退出再进入即可\n\n下边命令安装稳定版\n\n```\nnvm install stable\n```\n\n如果是国内环境可以像修改npm一样修改nvm的源：\n\n```\n把环境变量 NVM_NODEJS_ORG_MIRROR, 加入到 .bash_profile 文件中:\n# nvm\nexport NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node\n```\n","slug":"centos7-安装nvm","published":1,"updated":"2019-11-07T02:17:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzny30039h5s6u33nu83k","content":"<p>网上找了一些发现这个比较好用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash</span><br></pre></td></tr></table></figure>\n<p>重启命令行，否则不生效，如果用secureCRT则退出再进入即可</p>\n<p>下边命令安装稳定版</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install stable</span><br></pre></td></tr></table></figure>\n<p>如果是国内环境可以像修改npm一样修改nvm的源：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">把环境变量 NVM_NODEJS_ORG_MIRROR, 加入到 .bash_profile 文件中:</span><br><span class=\"line\"># nvm</span><br><span class=\"line\">export NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>网上找了一些发现这个比较好用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash</span><br></pre></td></tr></table></figure>\n<p>重启命令行，否则不生效，如果用secureCRT则退出再进入即可</p>\n<p>下边命令安装稳定版</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install stable</span><br></pre></td></tr></table></figure>\n<p>如果是国内环境可以像修改npm一样修改nvm的源：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">把环境变量 NVM_NODEJS_ORG_MIRROR, 加入到 .bash_profile 文件中:</span><br><span class=\"line\"># nvm</span><br><span class=\"line\">export NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node</span><br></pre></td></tr></table></figure>\n"},{"title":"curl命令","toc":false,"date":"2018-01-18T02:10:07.000Z","_content":"\ncurl命令是一个利用URL规则在命令行下工作的文件传输工具。它支持文件的上传和下载，所以是综合传输工具，但按传统，习惯称curl为下载工具。作为一款强力工具，curl支持包括HTTP、HTTPS、ftp等众多协议，还支持POST、cookies、认证、从指定偏移处下载部分文件、用户代理字符串、限速、文件大小、进度条等特征。做网页处理流程和数据检索自动化，curl可以祝一臂之力。\n\n## 语法\n\n```\ncurl(选项)(参数)\n```\n<!-- more -->\n\n## 选项\n|             选项               |              含义             |\n|-------------------------------|-------------------------------|\n| -a/--append\t                   | 上传文件时，附加到目标文件        |\n|-A/--user-agent \\<string>\t     | 设置用户代理发送给服务器           |\n|-anyauth\t                      |  可以使用“任何”身份验证方法       |\n|-b/--cookie \\<name=string/file> |       cookie字符串或文件读取位置  |\n|    --basic                    |          使用HTTP基本验         |\n|-B/--use-ascii\t               |      使用ASCII /文本传输        |\n|-c/--cookie-jar \\<file>\t     |  操作结束后把cookie写入到这个文件中 |\n|-C/--continue-at \\<offset>|断点续转|\n|-d/--data \\<data>|HTTP POST方式传送数据|\n| --data-ascii \\<data>|以ascii的方式post数据|\n|--data-binary \\<data>|以二进制的方式post数据|\n| --negotiate|使用HTTP身份验证|\n|--digest|使用数字身份验证|\n| --disable-eprt|禁止使用EPRT或LPRT|\n|--disable-epsv|禁止使用EPSV|\n|-D/--dump-header \\<file>|把header信息写入到该文件中|\n|--egd-file \\<file>|为随机数据(SSL)设置EGD socket路径|\n|--tcp-nodelay|使用TCP_NODELAY选项|\n|-e/--referer|来源网址|\n|-E/--cert \\<cert[:passwd]>|客户端证书文件和密码 (SSL)|\n|--cert-type \\<type>|证书文件类型 (DER/PEM/ENG) (SSL)|\n| --key \\<key>|私钥文件名 (SSL)|\n| --key-type \\<type>|私钥文件类型 (DER/PEM/ENG) (SSL)|\n|--pass \\<pass>|私钥密码 (SSL)|\n| --engine \\<eng>|加密引擎使用 (SSL). \"--engine list\" for list|\n| --cacert \\<file>|CA证书 (SSL)|\n| --capath \\<directory>|CA目录 (made using c_rehash) to verify peer against (SSL)|\n|--ciphers \\<list>|SSL密码|\n|--compressed|要求返回是压缩的形势 (using deflate or gzip)|\n|--connect-timeout \\<seconds>|设置最大请求时间|\n|--create-dirs|建立本地目录的目录层次结构|\n|--crlf|上传是把LF转变成CRLF|\n|-f/--fail|连接失败时不显示http错误|\n|--ftp-create-dirs|如果远程目录不存在，创建远程目录|\n|--ftp-method [multicwd/nocwd/singlecwd]|控制CWD的使用|\n| --ftp-pasv|使用 PASV/EPSV 代替端口|\n|--ftp-skip-pasv-ip|使用PASV的时候,忽略该IP地址|\n|--ftp-ssl|尝试用 SSL/TLS 来进行ftp数据传输|\n|--ftp-ssl-reqd|要求用 SSL/TLS 来进行ftp数据传输|\n|-F/--form \\<name=content>|模拟http表单提交数据|\n|--form-string \\<name=string>|模拟http表单提交数据|\n|-g/--globoff|禁用网址序列和范围使用{}和[]|\n|-G/--get|以get的方式来发送数据|\n|-H/--header \\<line>|自定义头信息传递给服务器|\n|--ignore-content-length|忽略的HTTP头信息的长度|\n|-i/--include|输出时包括protocol头信息|\n|-I/--head|只显示请求头信息|\n|-j/--junk-session-cookies|读取文件进忽略session cookie|\n|--interface \\<interface>|使用指定网络接口/地址|\n|--krb4 \\<level>|使用指定安全级别的krb4|\n|-k/--insecure|允许不使用证书到SSL站点|\n|-K/--config|指定的配置文件读取|\n|-l/--list-only|列出ftp目录下的文件名称|\n|--limit-rate \\<rate>|设置传输速度|\n|--local-port\\<NUM>|强制使用本地端口号|\n|-m/--max-time \\<seconds>|设置最大传输时间|\n| --max-redirs \\<num>|设置最大读取的目录数|\n|--max-filesize \\<bytes>|设置最大下载的文件总量|\n|-M/--manual|显示全手动|\n|-n/--netrc|从netrc文件中读取用户名和密码|\n|--netrc-optional|使用 .netrc 或者 URL来覆盖-n|\n|--ntlm|使用 HTTP NTLM 身份验证|\n|-N/--no-buffer|禁用缓冲输出|\n|-o/--output|把输出写到该文件中|\n|-O/--remote-name|把输出写到该文件中，保留远程文件的文件名|\n|-p/--proxytunnel|使用HTTP代理|\n|--proxy-anyauth|选择任一代理身份验证方法|\n|--proxy-basic|在代理上使用基本身份验证|\n|--proxy-digest|在代理上使用数字身份验证|\n|--proxy-ntlm|在代理上使用ntlm身份验证|\n|-P/--ftp-port \\<address>|使用端口地址，而不是使用PASV|\n|-q|作为第一个参数，关闭 .curlrc|\n|-Q/--quote \\<cmd>|文件传输前，发送命令到服务器|\n|-r/--range \\<range>|检索来自HTTP/1.1或FTP服务器字节范围|\n|--range-file|读取（SSL）的随机文件|\n|-R/--remote-time|在本地生成文件时，保留远程文件时间|\n|--retry \\<num>|传输出现问题时，重试的次数|\n|--retry-delay \\<seconds>|传输出现问题时，设置重试间隔时间|\n|--retry-max-time \\<seconds>\t|传输出现问题时，设置最大重试时间|\n|-s/--silent|静默模式。不输出任何东西|\n|-S/--show-error|显示错误|\n|--socks4 \\<host[:port]>|用socks4代理给定主机和端口|\n|--socks5 \\<host[:port]>|用socks5代理给定主机和端口|\n| --stderr \\<file>||\n|-t/--telnet-option \\<OPT=val>|Telnet选项设置|\n|--trace \\<file>|对指定文件进行debug|\n| --trace-ascii \\<file>|Like --跟踪但没有hex输出|\n|--trace-time|跟踪/详细输出时，添加时间戳|\n|-T/--upload-file \\<file>|上传文件|\n|--url \\<URL>|Spet URL to work with|\n|-u/--user \\<user[:password]>|设置服务器的用户和密码|\n|-U/--proxy-user \\<user[:password]>|设置代理用户名和密码|\n|-w/--write-out [format]|什么输出完成后|\n|-x/--proxy \\<host[:port]>|在给定的端口上使用HTTP代理|\n|-X/--request \\<command>|指定什么命令|\n|-y/--speed-time|放弃限速所要的时间，默认为30|\n|-Y/--speed-limit|停止传输速度的限制，速度时间|\n\n## 实例\n### 文件下载\ncurl命令可以用来执行下载、发送各种HTTP请求，指定HTTP头部等操作。如果系统没有curl可以使用`yum install curl`安装，也可以下载安装。curl是将下载文件输出到stdout，将进度信息输出到stderr，不显示进度信息使用`--silent`选项。\n\n```\ncurl URL --silent\n```\n\n这条命令是将下载文件输出到终端，所有下载的数据都被写入到stdout。\n\n使用选项`-O`将下载的数据写入到文件，必须使用文件的绝对地址：\n\n```\ncurl http://man.linuxde.net/text.iso --silent -O\n```\n\n选项`-o`将下载数据写入到指定名称的文件中，并使用`--progress`显示进度条：\n\n```\ncurl http://man.linuxde.net/test.iso -o filename.iso --progress\n######################################### 100.0%\n```\n\n### 断点续传\n\ncurl能够从特定的文件偏移处继续下载，它可以通过指定一个便宜量来下载部分文件：\n\n```\ncurl URL/File -C 偏移量\n\n#偏移量是以字节为单位的整数，如果让curl自动推断出正确的续传位置使用-C -：\ncurl -C -URL\n```\n\n### 使用curl设置参照页字符串\n参照页是位于HTTP头部中的一个字符串，用来表示用户是从哪个页面到达当前页面的，如果用户点击网页A中的某个连接，那么用户就会跳转到B网页，网页B头部的参照页字符串就包含网页A的URL。\n\n使用`--referer`选项指定参照页字符串：\n\t\t\t\n```\ncurl --referer http://www.google.com http://man.linuxde.net\n```\n\n### 用curl设置cookies\n\n使用`--cookie \"COKKIES\"`选项来指定cookie，多个cookie使用分号分隔：\n\n```\ncurl http://man.linuxde.net --cookie \"user=root;pass=123456\"\n```\n\n将cookie另存为一个文件，使用`--cookie-jar`选项：\n\n```\ncurl URL --cookie-jar cookie_file\n```\n\n### 用curl设置用户代理字符串\n有些网站访问会提示只能使用IE浏览器来访问，这是因为这些网站设置了检查用户代理，可以使用curl把用户代理设置为IE，这样就可以访问了。使用`--user-agent`或者`-A`选项：\n\n```\ncurl URL --user-agent \"Mozilla/5.0\"\ncurl URL -A \"Mozilla/5.0\"\n```\n\n其他HTTP头部信息也可以使用curl来发送，使用`-H`\"头部信息\" 传递多个头部信息，例如：\n\n```\ncurl -H \"Host:man.linuxde.net\" -H \"accept-language:zh-cn\" URL\n```\n\n### curl的带宽控制和下载配额\n使用`--limit-rate`限制curl的下载速度：\n\n```\ncurl URL --limit-rate 50k\n```\n\n命令中用k（千字节）和m（兆字节）指定下载速度限制。\n\n使用`--max-filesize`指定可下载的最大文件大小：\n\n```\ncurl URL --max-filesize bytes\n```\n\n如果文件大小超出限制，命令则返回一个非0退出码，如果命令正常则返回0。\n\n### 用curl进行认证\n\n使用curl选项 -u 可以完成HTTP或者FTP的认证，可以指定密码，也可以不指定密码在后续操作中输入密码：\n\n```\ncurl -u user:pwd http://man.linuxde.net\ncurl -u user http://man.linuxde.net\n```\n\n### 只打印响应头部信息\n\n通过`-I`或者`-head`可以只打印出HTTP头部信息：\n\n```\n[root@localhost text]# curl -I http://man.linuxde.net\nHTTP/1.1 200 OK\nServer: nginx/1.2.5\ndate: Mon, 10 Dec 2012 09:24:34 GMT\nContent-Type: text/html; charset=UTF-8\nConnection: keep-alive\nVary: Accept-Encoding\nX-Pingback: http://man.linuxde.net/xmlrpc.php\n```\n\n[原文地址](http://man.linuxde.net/curl)\n","source":"_posts/curl命令.md","raw":"---\ntitle: curl命令\ntags:\n  - linux\ncategories:\n  - 后端开发\ntoc: false\ndate: 2018-01-18 10:10:07\n---\n\ncurl命令是一个利用URL规则在命令行下工作的文件传输工具。它支持文件的上传和下载，所以是综合传输工具，但按传统，习惯称curl为下载工具。作为一款强力工具，curl支持包括HTTP、HTTPS、ftp等众多协议，还支持POST、cookies、认证、从指定偏移处下载部分文件、用户代理字符串、限速、文件大小、进度条等特征。做网页处理流程和数据检索自动化，curl可以祝一臂之力。\n\n## 语法\n\n```\ncurl(选项)(参数)\n```\n<!-- more -->\n\n## 选项\n|             选项               |              含义             |\n|-------------------------------|-------------------------------|\n| -a/--append\t                   | 上传文件时，附加到目标文件        |\n|-A/--user-agent \\<string>\t     | 设置用户代理发送给服务器           |\n|-anyauth\t                      |  可以使用“任何”身份验证方法       |\n|-b/--cookie \\<name=string/file> |       cookie字符串或文件读取位置  |\n|    --basic                    |          使用HTTP基本验         |\n|-B/--use-ascii\t               |      使用ASCII /文本传输        |\n|-c/--cookie-jar \\<file>\t     |  操作结束后把cookie写入到这个文件中 |\n|-C/--continue-at \\<offset>|断点续转|\n|-d/--data \\<data>|HTTP POST方式传送数据|\n| --data-ascii \\<data>|以ascii的方式post数据|\n|--data-binary \\<data>|以二进制的方式post数据|\n| --negotiate|使用HTTP身份验证|\n|--digest|使用数字身份验证|\n| --disable-eprt|禁止使用EPRT或LPRT|\n|--disable-epsv|禁止使用EPSV|\n|-D/--dump-header \\<file>|把header信息写入到该文件中|\n|--egd-file \\<file>|为随机数据(SSL)设置EGD socket路径|\n|--tcp-nodelay|使用TCP_NODELAY选项|\n|-e/--referer|来源网址|\n|-E/--cert \\<cert[:passwd]>|客户端证书文件和密码 (SSL)|\n|--cert-type \\<type>|证书文件类型 (DER/PEM/ENG) (SSL)|\n| --key \\<key>|私钥文件名 (SSL)|\n| --key-type \\<type>|私钥文件类型 (DER/PEM/ENG) (SSL)|\n|--pass \\<pass>|私钥密码 (SSL)|\n| --engine \\<eng>|加密引擎使用 (SSL). \"--engine list\" for list|\n| --cacert \\<file>|CA证书 (SSL)|\n| --capath \\<directory>|CA目录 (made using c_rehash) to verify peer against (SSL)|\n|--ciphers \\<list>|SSL密码|\n|--compressed|要求返回是压缩的形势 (using deflate or gzip)|\n|--connect-timeout \\<seconds>|设置最大请求时间|\n|--create-dirs|建立本地目录的目录层次结构|\n|--crlf|上传是把LF转变成CRLF|\n|-f/--fail|连接失败时不显示http错误|\n|--ftp-create-dirs|如果远程目录不存在，创建远程目录|\n|--ftp-method [multicwd/nocwd/singlecwd]|控制CWD的使用|\n| --ftp-pasv|使用 PASV/EPSV 代替端口|\n|--ftp-skip-pasv-ip|使用PASV的时候,忽略该IP地址|\n|--ftp-ssl|尝试用 SSL/TLS 来进行ftp数据传输|\n|--ftp-ssl-reqd|要求用 SSL/TLS 来进行ftp数据传输|\n|-F/--form \\<name=content>|模拟http表单提交数据|\n|--form-string \\<name=string>|模拟http表单提交数据|\n|-g/--globoff|禁用网址序列和范围使用{}和[]|\n|-G/--get|以get的方式来发送数据|\n|-H/--header \\<line>|自定义头信息传递给服务器|\n|--ignore-content-length|忽略的HTTP头信息的长度|\n|-i/--include|输出时包括protocol头信息|\n|-I/--head|只显示请求头信息|\n|-j/--junk-session-cookies|读取文件进忽略session cookie|\n|--interface \\<interface>|使用指定网络接口/地址|\n|--krb4 \\<level>|使用指定安全级别的krb4|\n|-k/--insecure|允许不使用证书到SSL站点|\n|-K/--config|指定的配置文件读取|\n|-l/--list-only|列出ftp目录下的文件名称|\n|--limit-rate \\<rate>|设置传输速度|\n|--local-port\\<NUM>|强制使用本地端口号|\n|-m/--max-time \\<seconds>|设置最大传输时间|\n| --max-redirs \\<num>|设置最大读取的目录数|\n|--max-filesize \\<bytes>|设置最大下载的文件总量|\n|-M/--manual|显示全手动|\n|-n/--netrc|从netrc文件中读取用户名和密码|\n|--netrc-optional|使用 .netrc 或者 URL来覆盖-n|\n|--ntlm|使用 HTTP NTLM 身份验证|\n|-N/--no-buffer|禁用缓冲输出|\n|-o/--output|把输出写到该文件中|\n|-O/--remote-name|把输出写到该文件中，保留远程文件的文件名|\n|-p/--proxytunnel|使用HTTP代理|\n|--proxy-anyauth|选择任一代理身份验证方法|\n|--proxy-basic|在代理上使用基本身份验证|\n|--proxy-digest|在代理上使用数字身份验证|\n|--proxy-ntlm|在代理上使用ntlm身份验证|\n|-P/--ftp-port \\<address>|使用端口地址，而不是使用PASV|\n|-q|作为第一个参数，关闭 .curlrc|\n|-Q/--quote \\<cmd>|文件传输前，发送命令到服务器|\n|-r/--range \\<range>|检索来自HTTP/1.1或FTP服务器字节范围|\n|--range-file|读取（SSL）的随机文件|\n|-R/--remote-time|在本地生成文件时，保留远程文件时间|\n|--retry \\<num>|传输出现问题时，重试的次数|\n|--retry-delay \\<seconds>|传输出现问题时，设置重试间隔时间|\n|--retry-max-time \\<seconds>\t|传输出现问题时，设置最大重试时间|\n|-s/--silent|静默模式。不输出任何东西|\n|-S/--show-error|显示错误|\n|--socks4 \\<host[:port]>|用socks4代理给定主机和端口|\n|--socks5 \\<host[:port]>|用socks5代理给定主机和端口|\n| --stderr \\<file>||\n|-t/--telnet-option \\<OPT=val>|Telnet选项设置|\n|--trace \\<file>|对指定文件进行debug|\n| --trace-ascii \\<file>|Like --跟踪但没有hex输出|\n|--trace-time|跟踪/详细输出时，添加时间戳|\n|-T/--upload-file \\<file>|上传文件|\n|--url \\<URL>|Spet URL to work with|\n|-u/--user \\<user[:password]>|设置服务器的用户和密码|\n|-U/--proxy-user \\<user[:password]>|设置代理用户名和密码|\n|-w/--write-out [format]|什么输出完成后|\n|-x/--proxy \\<host[:port]>|在给定的端口上使用HTTP代理|\n|-X/--request \\<command>|指定什么命令|\n|-y/--speed-time|放弃限速所要的时间，默认为30|\n|-Y/--speed-limit|停止传输速度的限制，速度时间|\n\n## 实例\n### 文件下载\ncurl命令可以用来执行下载、发送各种HTTP请求，指定HTTP头部等操作。如果系统没有curl可以使用`yum install curl`安装，也可以下载安装。curl是将下载文件输出到stdout，将进度信息输出到stderr，不显示进度信息使用`--silent`选项。\n\n```\ncurl URL --silent\n```\n\n这条命令是将下载文件输出到终端，所有下载的数据都被写入到stdout。\n\n使用选项`-O`将下载的数据写入到文件，必须使用文件的绝对地址：\n\n```\ncurl http://man.linuxde.net/text.iso --silent -O\n```\n\n选项`-o`将下载数据写入到指定名称的文件中，并使用`--progress`显示进度条：\n\n```\ncurl http://man.linuxde.net/test.iso -o filename.iso --progress\n######################################### 100.0%\n```\n\n### 断点续传\n\ncurl能够从特定的文件偏移处继续下载，它可以通过指定一个便宜量来下载部分文件：\n\n```\ncurl URL/File -C 偏移量\n\n#偏移量是以字节为单位的整数，如果让curl自动推断出正确的续传位置使用-C -：\ncurl -C -URL\n```\n\n### 使用curl设置参照页字符串\n参照页是位于HTTP头部中的一个字符串，用来表示用户是从哪个页面到达当前页面的，如果用户点击网页A中的某个连接，那么用户就会跳转到B网页，网页B头部的参照页字符串就包含网页A的URL。\n\n使用`--referer`选项指定参照页字符串：\n\t\t\t\n```\ncurl --referer http://www.google.com http://man.linuxde.net\n```\n\n### 用curl设置cookies\n\n使用`--cookie \"COKKIES\"`选项来指定cookie，多个cookie使用分号分隔：\n\n```\ncurl http://man.linuxde.net --cookie \"user=root;pass=123456\"\n```\n\n将cookie另存为一个文件，使用`--cookie-jar`选项：\n\n```\ncurl URL --cookie-jar cookie_file\n```\n\n### 用curl设置用户代理字符串\n有些网站访问会提示只能使用IE浏览器来访问，这是因为这些网站设置了检查用户代理，可以使用curl把用户代理设置为IE，这样就可以访问了。使用`--user-agent`或者`-A`选项：\n\n```\ncurl URL --user-agent \"Mozilla/5.0\"\ncurl URL -A \"Mozilla/5.0\"\n```\n\n其他HTTP头部信息也可以使用curl来发送，使用`-H`\"头部信息\" 传递多个头部信息，例如：\n\n```\ncurl -H \"Host:man.linuxde.net\" -H \"accept-language:zh-cn\" URL\n```\n\n### curl的带宽控制和下载配额\n使用`--limit-rate`限制curl的下载速度：\n\n```\ncurl URL --limit-rate 50k\n```\n\n命令中用k（千字节）和m（兆字节）指定下载速度限制。\n\n使用`--max-filesize`指定可下载的最大文件大小：\n\n```\ncurl URL --max-filesize bytes\n```\n\n如果文件大小超出限制，命令则返回一个非0退出码，如果命令正常则返回0。\n\n### 用curl进行认证\n\n使用curl选项 -u 可以完成HTTP或者FTP的认证，可以指定密码，也可以不指定密码在后续操作中输入密码：\n\n```\ncurl -u user:pwd http://man.linuxde.net\ncurl -u user http://man.linuxde.net\n```\n\n### 只打印响应头部信息\n\n通过`-I`或者`-head`可以只打印出HTTP头部信息：\n\n```\n[root@localhost text]# curl -I http://man.linuxde.net\nHTTP/1.1 200 OK\nServer: nginx/1.2.5\ndate: Mon, 10 Dec 2012 09:24:34 GMT\nContent-Type: text/html; charset=UTF-8\nConnection: keep-alive\nVary: Accept-Encoding\nX-Pingback: http://man.linuxde.net/xmlrpc.php\n```\n\n[原文地址](http://man.linuxde.net/curl)\n","slug":"curl命令","published":1,"updated":"2019-11-07T01:59:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzny6003ch5s6v7ur91k6","content":"<p>curl命令是一个利用URL规则在命令行下工作的文件传输工具。它支持文件的上传和下载，所以是综合传输工具，但按传统，习惯称curl为下载工具。作为一款强力工具，curl支持包括HTTP、HTTPS、ftp等众多协议，还支持POST、cookies、认证、从指定偏移处下载部分文件、用户代理字符串、限速、文件大小、进度条等特征。做网页处理流程和数据检索自动化，curl可以祝一臂之力。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl(选项)(参数)</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h2><table>\n<thead>\n<tr>\n<th>选项</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-a/–append</td>\n<td>上传文件时，附加到目标文件</td>\n</tr>\n<tr>\n<td>-A/–user-agent \\<string></string></td>\n<td>设置用户代理发送给服务器</td>\n</tr>\n<tr>\n<td>-anyauth</td>\n<td>可以使用“任何”身份验证方法</td>\n</tr>\n<tr>\n<td>-b/–cookie \\&lt;name=string/file&gt;</td>\n<td>cookie字符串或文件读取位置</td>\n</tr>\n<tr>\n<td>–basic</td>\n<td>使用HTTP基本验</td>\n</tr>\n<tr>\n<td>-B/–use-ascii</td>\n<td>使用ASCII /文本传输</td>\n</tr>\n<tr>\n<td>-c/–cookie-jar \\<file></file></td>\n<td>操作结束后把cookie写入到这个文件中</td>\n</tr>\n<tr>\n<td>-C/–continue-at \\<offset></offset></td>\n<td>断点续转</td>\n</tr>\n<tr>\n<td>-d/–data \\<data></data></td>\n<td>HTTP POST方式传送数据</td>\n</tr>\n<tr>\n<td>–data-ascii \\<data></data></td>\n<td>以ascii的方式post数据</td>\n</tr>\n<tr>\n<td>–data-binary \\<data></data></td>\n<td>以二进制的方式post数据</td>\n</tr>\n<tr>\n<td>–negotiate</td>\n<td>使用HTTP身份验证</td>\n</tr>\n<tr>\n<td>–digest</td>\n<td>使用数字身份验证</td>\n</tr>\n<tr>\n<td>–disable-eprt</td>\n<td>禁止使用EPRT或LPRT</td>\n</tr>\n<tr>\n<td>–disable-epsv</td>\n<td>禁止使用EPSV</td>\n</tr>\n<tr>\n<td>-D/–dump-header \\<file></file></td>\n<td>把header信息写入到该文件中</td>\n</tr>\n<tr>\n<td>–egd-file \\<file></file></td>\n<td>为随机数据(SSL)设置EGD socket路径</td>\n</tr>\n<tr>\n<td>–tcp-nodelay</td>\n<td>使用TCP_NODELAY选项</td>\n</tr>\n<tr>\n<td>-e/–referer</td>\n<td>来源网址</td>\n</tr>\n<tr>\n<td>-E/–cert \\&lt;cert[:passwd]&gt;</td>\n<td>客户端证书文件和密码 (SSL)</td>\n</tr>\n<tr>\n<td>–cert-type \\<type></type></td>\n<td>证书文件类型 (DER/PEM/ENG) (SSL)</td>\n</tr>\n<tr>\n<td>–key \\<key></key></td>\n<td>私钥文件名 (SSL)</td>\n</tr>\n<tr>\n<td>–key-type \\<type></type></td>\n<td>私钥文件类型 (DER/PEM/ENG) (SSL)</td>\n</tr>\n<tr>\n<td>–pass \\<pass></pass></td>\n<td>私钥密码 (SSL)</td>\n</tr>\n<tr>\n<td>–engine \\<eng></eng></td>\n<td>加密引擎使用 (SSL). “–engine list” for list</td>\n</tr>\n<tr>\n<td>–cacert \\<file></file></td>\n<td>CA证书 (SSL)</td>\n</tr>\n<tr>\n<td>–capath \\<directory></directory></td>\n<td>CA目录 (made using c_rehash) to verify peer against (SSL)</td>\n</tr>\n<tr>\n<td>–ciphers \\<list></list></td>\n<td>SSL密码</td>\n</tr>\n<tr>\n<td>–compressed</td>\n<td>要求返回是压缩的形势 (using deflate or gzip)</td>\n</tr>\n<tr>\n<td>–connect-timeout \\<seconds></seconds></td>\n<td>设置最大请求时间</td>\n</tr>\n<tr>\n<td>–create-dirs</td>\n<td>建立本地目录的目录层次结构</td>\n</tr>\n<tr>\n<td>–crlf</td>\n<td>上传是把LF转变成CRLF</td>\n</tr>\n<tr>\n<td>-f/–fail</td>\n<td>连接失败时不显示http错误</td>\n</tr>\n<tr>\n<td>–ftp-create-dirs</td>\n<td>如果远程目录不存在，创建远程目录</td>\n</tr>\n<tr>\n<td>–ftp-method [multicwd/nocwd/singlecwd]</td>\n<td>控制CWD的使用</td>\n</tr>\n<tr>\n<td>–ftp-pasv</td>\n<td>使用 PASV/EPSV 代替端口</td>\n</tr>\n<tr>\n<td>–ftp-skip-pasv-ip</td>\n<td>使用PASV的时候,忽略该IP地址</td>\n</tr>\n<tr>\n<td>–ftp-ssl</td>\n<td>尝试用 SSL/TLS 来进行ftp数据传输</td>\n</tr>\n<tr>\n<td>–ftp-ssl-reqd</td>\n<td>要求用 SSL/TLS 来进行ftp数据传输</td>\n</tr>\n<tr>\n<td>-F/–form \\&lt;name=content&gt;</td>\n<td>模拟http表单提交数据</td>\n</tr>\n<tr>\n<td>–form-string \\&lt;name=string&gt;</td>\n<td>模拟http表单提交数据</td>\n</tr>\n<tr>\n<td>-g/–globoff</td>\n<td>禁用网址序列和范围使用{}和[]</td>\n</tr>\n<tr>\n<td>-G/–get</td>\n<td>以get的方式来发送数据</td>\n</tr>\n<tr>\n<td>-H/–header \\<line></line></td>\n<td>自定义头信息传递给服务器</td>\n</tr>\n<tr>\n<td>–ignore-content-length</td>\n<td>忽略的HTTP头信息的长度</td>\n</tr>\n<tr>\n<td>-i/–include</td>\n<td>输出时包括protocol头信息</td>\n</tr>\n<tr>\n<td>-I/–head</td>\n<td>只显示请求头信息</td>\n</tr>\n<tr>\n<td>-j/–junk-session-cookies</td>\n<td>读取文件进忽略session cookie</td>\n</tr>\n<tr>\n<td>–interface \\<interface></interface></td>\n<td>使用指定网络接口/地址</td>\n</tr>\n<tr>\n<td>–krb4 \\<level></level></td>\n<td>使用指定安全级别的krb4</td>\n</tr>\n<tr>\n<td>-k/–insecure</td>\n<td>允许不使用证书到SSL站点</td>\n</tr>\n<tr>\n<td>-K/–config</td>\n<td>指定的配置文件读取</td>\n</tr>\n<tr>\n<td>-l/–list-only</td>\n<td>列出ftp目录下的文件名称</td>\n</tr>\n<tr>\n<td>–limit-rate \\<rate></rate></td>\n<td>设置传输速度</td>\n</tr>\n<tr>\n<td>–local-port\\<num></num></td>\n<td>强制使用本地端口号</td>\n</tr>\n<tr>\n<td>-m/–max-time \\<seconds></seconds></td>\n<td>设置最大传输时间</td>\n</tr>\n<tr>\n<td>–max-redirs \\<num></num></td>\n<td>设置最大读取的目录数</td>\n</tr>\n<tr>\n<td>–max-filesize \\<bytes></bytes></td>\n<td>设置最大下载的文件总量</td>\n</tr>\n<tr>\n<td>-M/–manual</td>\n<td>显示全手动</td>\n</tr>\n<tr>\n<td>-n/–netrc</td>\n<td>从netrc文件中读取用户名和密码</td>\n</tr>\n<tr>\n<td>–netrc-optional</td>\n<td>使用 .netrc 或者 URL来覆盖-n</td>\n</tr>\n<tr>\n<td>–ntlm</td>\n<td>使用 HTTP NTLM 身份验证</td>\n</tr>\n<tr>\n<td>-N/–no-buffer</td>\n<td>禁用缓冲输出</td>\n</tr>\n<tr>\n<td>-o/–output</td>\n<td>把输出写到该文件中</td>\n</tr>\n<tr>\n<td>-O/–remote-name</td>\n<td>把输出写到该文件中，保留远程文件的文件名</td>\n</tr>\n<tr>\n<td>-p/–proxytunnel</td>\n<td>使用HTTP代理</td>\n</tr>\n<tr>\n<td>–proxy-anyauth</td>\n<td>选择任一代理身份验证方法</td>\n</tr>\n<tr>\n<td>–proxy-basic</td>\n<td>在代理上使用基本身份验证</td>\n</tr>\n<tr>\n<td>–proxy-digest</td>\n<td>在代理上使用数字身份验证</td>\n</tr>\n<tr>\n<td>–proxy-ntlm</td>\n<td>在代理上使用ntlm身份验证</td>\n</tr>\n<tr>\n<td>-P/–ftp-port \\<address></address></td>\n<td>使用端口地址，而不是使用PASV</td>\n</tr>\n<tr>\n<td>-q</td>\n<td>作为第一个参数，关闭 .curlrc</td>\n</tr>\n<tr>\n<td>-Q/–quote \\<cmd></cmd></td>\n<td>文件传输前，发送命令到服务器</td>\n</tr>\n<tr>\n<td>-r/–range \\<range></range></td>\n<td>检索来自HTTP/1.1或FTP服务器字节范围</td>\n</tr>\n<tr>\n<td>–range-file</td>\n<td>读取（SSL）的随机文件</td>\n</tr>\n<tr>\n<td>-R/–remote-time</td>\n<td>在本地生成文件时，保留远程文件时间</td>\n</tr>\n<tr>\n<td>–retry \\<num></num></td>\n<td>传输出现问题时，重试的次数</td>\n</tr>\n<tr>\n<td>–retry-delay \\<seconds></seconds></td>\n<td>传输出现问题时，设置重试间隔时间</td>\n</tr>\n<tr>\n<td>–retry-max-time \\<seconds></seconds></td>\n<td>传输出现问题时，设置最大重试时间</td>\n</tr>\n<tr>\n<td>-s/–silent</td>\n<td>静默模式。不输出任何东西</td>\n</tr>\n<tr>\n<td>-S/–show-error</td>\n<td>显示错误</td>\n</tr>\n<tr>\n<td>–socks4 \\&lt;host[:port]&gt;</td>\n<td>用socks4代理给定主机和端口</td>\n</tr>\n<tr>\n<td>–socks5 \\&lt;host[:port]&gt;</td>\n<td>用socks5代理给定主机和端口</td>\n</tr>\n<tr>\n<td>–stderr \\<file></file></td>\n<td></td>\n</tr>\n<tr>\n<td>-t/–telnet-option \\&lt;OPT=val&gt;</td>\n<td>Telnet选项设置</td>\n</tr>\n<tr>\n<td>–trace \\<file></file></td>\n<td>对指定文件进行debug</td>\n</tr>\n<tr>\n<td>–trace-ascii \\<file></file></td>\n<td>Like –跟踪但没有hex输出</td>\n</tr>\n<tr>\n<td>–trace-time</td>\n<td>跟踪/详细输出时，添加时间戳</td>\n</tr>\n<tr>\n<td>-T/–upload-file \\<file></file></td>\n<td>上传文件</td>\n</tr>\n<tr>\n<td>–url \\<url></url></td>\n<td>Spet URL to work with</td>\n</tr>\n<tr>\n<td>-u/–user \\&lt;user[:password]&gt;</td>\n<td>设置服务器的用户和密码</td>\n</tr>\n<tr>\n<td>-U/–proxy-user \\&lt;user[:password]&gt;</td>\n<td>设置代理用户名和密码</td>\n</tr>\n<tr>\n<td>-w/–write-out [format]</td>\n<td>什么输出完成后</td>\n</tr>\n<tr>\n<td>-x/–proxy \\&lt;host[:port]&gt;</td>\n<td>在给定的端口上使用HTTP代理</td>\n</tr>\n<tr>\n<td>-X/–request \\<command></td>\n<td>指定什么命令</td>\n</tr>\n<tr>\n<td>-y/–speed-time</td>\n<td>放弃限速所要的时间，默认为30</td>\n</tr>\n<tr>\n<td>-Y/–speed-limit</td>\n<td>停止传输速度的限制，速度时间</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><h3 id=\"文件下载\"><a href=\"#文件下载\" class=\"headerlink\" title=\"文件下载\"></a>文件下载</h3><p>curl命令可以用来执行下载、发送各种HTTP请求，指定HTTP头部等操作。如果系统没有curl可以使用<code>yum install curl</code>安装，也可以下载安装。curl是将下载文件输出到stdout，将进度信息输出到stderr，不显示进度信息使用<code>--silent</code>选项。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl URL --silent</span><br></pre></td></tr></table></figure>\n<p>这条命令是将下载文件输出到终端，所有下载的数据都被写入到stdout。</p>\n<p>使用选项<code>-O</code>将下载的数据写入到文件，必须使用文件的绝对地址：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://man.linuxde.net/text.iso --silent -O</span><br></pre></td></tr></table></figure>\n<p>选项<code>-o</code>将下载数据写入到指定名称的文件中，并使用<code>--progress</code>显示进度条：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://man.linuxde.net/test.iso -o filename.iso --progress</span><br><span class=\"line\">######################################### 100.0%</span><br></pre></td></tr></table></figure>\n<h3 id=\"断点续传\"><a href=\"#断点续传\" class=\"headerlink\" title=\"断点续传\"></a>断点续传</h3><p>curl能够从特定的文件偏移处继续下载，它可以通过指定一个便宜量来下载部分文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl URL/File -C 偏移量</span><br><span class=\"line\"></span><br><span class=\"line\">#偏移量是以字节为单位的整数，如果让curl自动推断出正确的续传位置使用-C -：</span><br><span class=\"line\">curl -C -URL</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用curl设置参照页字符串\"><a href=\"#使用curl设置参照页字符串\" class=\"headerlink\" title=\"使用curl设置参照页字符串\"></a>使用curl设置参照页字符串</h3><p>参照页是位于HTTP头部中的一个字符串，用来表示用户是从哪个页面到达当前页面的，如果用户点击网页A中的某个连接，那么用户就会跳转到B网页，网页B头部的参照页字符串就包含网页A的URL。</p>\n<p>使用<code>--referer</code>选项指定参照页字符串：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --referer http://www.google.com http://man.linuxde.net</span><br></pre></td></tr></table></figure>\n<h3 id=\"用curl设置cookies\"><a href=\"#用curl设置cookies\" class=\"headerlink\" title=\"用curl设置cookies\"></a>用curl设置cookies</h3><p>使用<code>--cookie &quot;COKKIES&quot;</code>选项来指定cookie，多个cookie使用分号分隔：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://man.linuxde.net --cookie &quot;user=root;pass=123456&quot;</span><br></pre></td></tr></table></figure>\n<p>将cookie另存为一个文件，使用<code>--cookie-jar</code>选项：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl URL --cookie-jar cookie_file</span><br></pre></td></tr></table></figure>\n<h3 id=\"用curl设置用户代理字符串\"><a href=\"#用curl设置用户代理字符串\" class=\"headerlink\" title=\"用curl设置用户代理字符串\"></a>用curl设置用户代理字符串</h3><p>有些网站访问会提示只能使用IE浏览器来访问，这是因为这些网站设置了检查用户代理，可以使用curl把用户代理设置为IE，这样就可以访问了。使用<code>--user-agent</code>或者<code>-A</code>选项：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl URL --user-agent &quot;Mozilla/5.0&quot;</span><br><span class=\"line\">curl URL -A &quot;Mozilla/5.0&quot;</span><br></pre></td></tr></table></figure>\n<p>其他HTTP头部信息也可以使用curl来发送，使用<code>-H</code>“头部信息” 传递多个头部信息，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -H &quot;Host:man.linuxde.net&quot; -H &quot;accept-language:zh-cn&quot; URL</span><br></pre></td></tr></table></figure>\n<h3 id=\"curl的带宽控制和下载配额\"><a href=\"#curl的带宽控制和下载配额\" class=\"headerlink\" title=\"curl的带宽控制和下载配额\"></a>curl的带宽控制和下载配额</h3><p>使用<code>--limit-rate</code>限制curl的下载速度：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl URL --limit-rate 50k</span><br></pre></td></tr></table></figure>\n<p>命令中用k（千字节）和m（兆字节）指定下载速度限制。</p>\n<p>使用<code>--max-filesize</code>指定可下载的最大文件大小：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl URL --max-filesize bytes</span><br></pre></td></tr></table></figure>\n<p>如果文件大小超出限制，命令则返回一个非0退出码，如果命令正常则返回0。</p>\n<h3 id=\"用curl进行认证\"><a href=\"#用curl进行认证\" class=\"headerlink\" title=\"用curl进行认证\"></a>用curl进行认证</h3><p>使用curl选项 -u 可以完成HTTP或者FTP的认证，可以指定密码，也可以不指定密码在后续操作中输入密码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -u user:pwd http://man.linuxde.net</span><br><span class=\"line\">curl -u user http://man.linuxde.net</span><br></pre></td></tr></table></figure>\n<h3 id=\"只打印响应头部信息\"><a href=\"#只打印响应头部信息\" class=\"headerlink\" title=\"只打印响应头部信息\"></a>只打印响应头部信息</h3><p>通过<code>-I</code>或者<code>-head</code>可以只打印出HTTP头部信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost text]# curl -I http://man.linuxde.net</span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Server: nginx/1.2.5</span><br><span class=\"line\">date: Mon, 10 Dec 2012 09:24:34 GMT</span><br><span class=\"line\">Content-Type: text/html; charset=UTF-8</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">Vary: Accept-Encoding</span><br><span class=\"line\">X-Pingback: http://man.linuxde.net/xmlrpc.php</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://man.linuxde.net/curl\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n","site":{"data":{}},"excerpt":"<p>curl命令是一个利用URL规则在命令行下工作的文件传输工具。它支持文件的上传和下载，所以是综合传输工具，但按传统，习惯称curl为下载工具。作为一款强力工具，curl支持包括HTTP、HTTPS、ftp等众多协议，还支持POST、cookies、认证、从指定偏移处下载部分文件、用户代理字符串、限速、文件大小、进度条等特征。做网页处理流程和数据检索自动化，curl可以祝一臂之力。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl(选项)(参数)</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h2><table>\n<thead>\n<tr>\n<th>选项</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-a/–append</td>\n<td>上传文件时，附加到目标文件</td>\n</tr>\n<tr>\n<td>-A/–user-agent \\<string></string></td>\n<td>设置用户代理发送给服务器</td>\n</tr>\n<tr>\n<td>-anyauth</td>\n<td>可以使用“任何”身份验证方法</td>\n</tr>\n<tr>\n<td>-b/–cookie \\&lt;name=string/file&gt;</td>\n<td>cookie字符串或文件读取位置</td>\n</tr>\n<tr>\n<td>–basic</td>\n<td>使用HTTP基本验</td>\n</tr>\n<tr>\n<td>-B/–use-ascii</td>\n<td>使用ASCII /文本传输</td>\n</tr>\n<tr>\n<td>-c/–cookie-jar \\<file></file></td>\n<td>操作结束后把cookie写入到这个文件中</td>\n</tr>\n<tr>\n<td>-C/–continue-at \\<offset></offset></td>\n<td>断点续转</td>\n</tr>\n<tr>\n<td>-d/–data \\<data></data></td>\n<td>HTTP POST方式传送数据</td>\n</tr>\n<tr>\n<td>–data-ascii \\<data></data></td>\n<td>以ascii的方式post数据</td>\n</tr>\n<tr>\n<td>–data-binary \\<data></data></td>\n<td>以二进制的方式post数据</td>\n</tr>\n<tr>\n<td>–negotiate</td>\n<td>使用HTTP身份验证</td>\n</tr>\n<tr>\n<td>–digest</td>\n<td>使用数字身份验证</td>\n</tr>\n<tr>\n<td>–disable-eprt</td>\n<td>禁止使用EPRT或LPRT</td>\n</tr>\n<tr>\n<td>–disable-epsv</td>\n<td>禁止使用EPSV</td>\n</tr>\n<tr>\n<td>-D/–dump-header \\<file></file></td>\n<td>把header信息写入到该文件中</td>\n</tr>\n<tr>\n<td>–egd-file \\<file></file></td>\n<td>为随机数据(SSL)设置EGD socket路径</td>\n</tr>\n<tr>\n<td>–tcp-nodelay</td>\n<td>使用TCP_NODELAY选项</td>\n</tr>\n<tr>\n<td>-e/–referer</td>\n<td>来源网址</td>\n</tr>\n<tr>\n<td>-E/–cert \\&lt;cert[:passwd]&gt;</td>\n<td>客户端证书文件和密码 (SSL)</td>\n</tr>\n<tr>\n<td>–cert-type \\<type></type></td>\n<td>证书文件类型 (DER/PEM/ENG) (SSL)</td>\n</tr>\n<tr>\n<td>–key \\<key></key></td>\n<td>私钥文件名 (SSL)</td>\n</tr>\n<tr>\n<td>–key-type \\<type></type></td>\n<td>私钥文件类型 (DER/PEM/ENG) (SSL)</td>\n</tr>\n<tr>\n<td>–pass \\<pass></pass></td>\n<td>私钥密码 (SSL)</td>\n</tr>\n<tr>\n<td>–engine \\<eng></eng></td>\n<td>加密引擎使用 (SSL). “–engine list” for list</td>\n</tr>\n<tr>\n<td>–cacert \\<file></file></td>\n<td>CA证书 (SSL)</td>\n</tr>\n<tr>\n<td>–capath \\<directory></directory></td>\n<td>CA目录 (made using c_rehash) to verify peer against (SSL)</td>\n</tr>\n<tr>\n<td>–ciphers \\<list></list></td>\n<td>SSL密码</td>\n</tr>\n<tr>\n<td>–compressed</td>\n<td>要求返回是压缩的形势 (using deflate or gzip)</td>\n</tr>\n<tr>\n<td>–connect-timeout \\<seconds></seconds></td>\n<td>设置最大请求时间</td>\n</tr>\n<tr>\n<td>–create-dirs</td>\n<td>建立本地目录的目录层次结构</td>\n</tr>\n<tr>\n<td>–crlf</td>\n<td>上传是把LF转变成CRLF</td>\n</tr>\n<tr>\n<td>-f/–fail</td>\n<td>连接失败时不显示http错误</td>\n</tr>\n<tr>\n<td>–ftp-create-dirs</td>\n<td>如果远程目录不存在，创建远程目录</td>\n</tr>\n<tr>\n<td>–ftp-method [multicwd/nocwd/singlecwd]</td>\n<td>控制CWD的使用</td>\n</tr>\n<tr>\n<td>–ftp-pasv</td>\n<td>使用 PASV/EPSV 代替端口</td>\n</tr>\n<tr>\n<td>–ftp-skip-pasv-ip</td>\n<td>使用PASV的时候,忽略该IP地址</td>\n</tr>\n<tr>\n<td>–ftp-ssl</td>\n<td>尝试用 SSL/TLS 来进行ftp数据传输</td>\n</tr>\n<tr>\n<td>–ftp-ssl-reqd</td>\n<td>要求用 SSL/TLS 来进行ftp数据传输</td>\n</tr>\n<tr>\n<td>-F/–form \\&lt;name=content&gt;</td>\n<td>模拟http表单提交数据</td>\n</tr>\n<tr>\n<td>–form-string \\&lt;name=string&gt;</td>\n<td>模拟http表单提交数据</td>\n</tr>\n<tr>\n<td>-g/–globoff</td>\n<td>禁用网址序列和范围使用{}和[]</td>\n</tr>\n<tr>\n<td>-G/–get</td>\n<td>以get的方式来发送数据</td>\n</tr>\n<tr>\n<td>-H/–header \\<line></line></td>\n<td>自定义头信息传递给服务器</td>\n</tr>\n<tr>\n<td>–ignore-content-length</td>\n<td>忽略的HTTP头信息的长度</td>\n</tr>\n<tr>\n<td>-i/–include</td>\n<td>输出时包括protocol头信息</td>\n</tr>\n<tr>\n<td>-I/–head</td>\n<td>只显示请求头信息</td>\n</tr>\n<tr>\n<td>-j/–junk-session-cookies</td>\n<td>读取文件进忽略session cookie</td>\n</tr>\n<tr>\n<td>–interface \\<interface></interface></td>\n<td>使用指定网络接口/地址</td>\n</tr>\n<tr>\n<td>–krb4 \\<level></level></td>\n<td>使用指定安全级别的krb4</td>\n</tr>\n<tr>\n<td>-k/–insecure</td>\n<td>允许不使用证书到SSL站点</td>\n</tr>\n<tr>\n<td>-K/–config</td>\n<td>指定的配置文件读取</td>\n</tr>\n<tr>\n<td>-l/–list-only</td>\n<td>列出ftp目录下的文件名称</td>\n</tr>\n<tr>\n<td>–limit-rate \\<rate></rate></td>\n<td>设置传输速度</td>\n</tr>\n<tr>\n<td>–local-port\\<num></num></td>\n<td>强制使用本地端口号</td>\n</tr>\n<tr>\n<td>-m/–max-time \\<seconds></seconds></td>\n<td>设置最大传输时间</td>\n</tr>\n<tr>\n<td>–max-redirs \\<num></num></td>\n<td>设置最大读取的目录数</td>\n</tr>\n<tr>\n<td>–max-filesize \\<bytes></bytes></td>\n<td>设置最大下载的文件总量</td>\n</tr>\n<tr>\n<td>-M/–manual</td>\n<td>显示全手动</td>\n</tr>\n<tr>\n<td>-n/–netrc</td>\n<td>从netrc文件中读取用户名和密码</td>\n</tr>\n<tr>\n<td>–netrc-optional</td>\n<td>使用 .netrc 或者 URL来覆盖-n</td>\n</tr>\n<tr>\n<td>–ntlm</td>\n<td>使用 HTTP NTLM 身份验证</td>\n</tr>\n<tr>\n<td>-N/–no-buffer</td>\n<td>禁用缓冲输出</td>\n</tr>\n<tr>\n<td>-o/–output</td>\n<td>把输出写到该文件中</td>\n</tr>\n<tr>\n<td>-O/–remote-name</td>\n<td>把输出写到该文件中，保留远程文件的文件名</td>\n</tr>\n<tr>\n<td>-p/–proxytunnel</td>\n<td>使用HTTP代理</td>\n</tr>\n<tr>\n<td>–proxy-anyauth</td>\n<td>选择任一代理身份验证方法</td>\n</tr>\n<tr>\n<td>–proxy-basic</td>\n<td>在代理上使用基本身份验证</td>\n</tr>\n<tr>\n<td>–proxy-digest</td>\n<td>在代理上使用数字身份验证</td>\n</tr>\n<tr>\n<td>–proxy-ntlm</td>\n<td>在代理上使用ntlm身份验证</td>\n</tr>\n<tr>\n<td>-P/–ftp-port \\<address></address></td>\n<td>使用端口地址，而不是使用PASV</td>\n</tr>\n<tr>\n<td>-q</td>\n<td>作为第一个参数，关闭 .curlrc</td>\n</tr>\n<tr>\n<td>-Q/–quote \\<cmd></cmd></td>\n<td>文件传输前，发送命令到服务器</td>\n</tr>\n<tr>\n<td>-r/–range \\<range></range></td>\n<td>检索来自HTTP/1.1或FTP服务器字节范围</td>\n</tr>\n<tr>\n<td>–range-file</td>\n<td>读取（SSL）的随机文件</td>\n</tr>\n<tr>\n<td>-R/–remote-time</td>\n<td>在本地生成文件时，保留远程文件时间</td>\n</tr>\n<tr>\n<td>–retry \\<num></num></td>\n<td>传输出现问题时，重试的次数</td>\n</tr>\n<tr>\n<td>–retry-delay \\<seconds></seconds></td>\n<td>传输出现问题时，设置重试间隔时间</td>\n</tr>\n<tr>\n<td>–retry-max-time \\<seconds></seconds></td>\n<td>传输出现问题时，设置最大重试时间</td>\n</tr>\n<tr>\n<td>-s/–silent</td>\n<td>静默模式。不输出任何东西</td>\n</tr>\n<tr>\n<td>-S/–show-error</td>\n<td>显示错误</td>\n</tr>\n<tr>\n<td>–socks4 \\&lt;host[:port]&gt;</td>\n<td>用socks4代理给定主机和端口</td>\n</tr>\n<tr>\n<td>–socks5 \\&lt;host[:port]&gt;</td>\n<td>用socks5代理给定主机和端口</td>\n</tr>\n<tr>\n<td>–stderr \\<file></file></td>\n<td></td>\n</tr>\n<tr>\n<td>-t/–telnet-option \\&lt;OPT=val&gt;</td>\n<td>Telnet选项设置</td>\n</tr>\n<tr>\n<td>–trace \\<file></file></td>\n<td>对指定文件进行debug</td>\n</tr>\n<tr>\n<td>–trace-ascii \\<file></file></td>\n<td>Like –跟踪但没有hex输出</td>\n</tr>\n<tr>\n<td>–trace-time</td>\n<td>跟踪/详细输出时，添加时间戳</td>\n</tr>\n<tr>\n<td>-T/–upload-file \\<file></file></td>\n<td>上传文件</td>\n</tr>\n<tr>\n<td>–url \\<url></url></td>\n<td>Spet URL to work with</td>\n</tr>\n<tr>\n<td>-u/–user \\&lt;user[:password]&gt;</td>\n<td>设置服务器的用户和密码</td>\n</tr>\n<tr>\n<td>-U/–proxy-user \\&lt;user[:password]&gt;</td>\n<td>设置代理用户名和密码</td>\n</tr>\n<tr>\n<td>-w/–write-out [format]</td>\n<td>什么输出完成后</td>\n</tr>\n<tr>\n<td>-x/–proxy \\&lt;host[:port]&gt;</td>\n<td>在给定的端口上使用HTTP代理</td>\n</tr>\n<tr>\n<td>-X/–request \\<command></td>\n<td>指定什么命令</td>\n</tr>\n<tr>\n<td>-y/–speed-time</td>\n<td>放弃限速所要的时间，默认为30</td>\n</tr>\n<tr>\n<td>-Y/–speed-limit</td>\n<td>停止传输速度的限制，速度时间</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><h3 id=\"文件下载\"><a href=\"#文件下载\" class=\"headerlink\" title=\"文件下载\"></a>文件下载</h3><p>curl命令可以用来执行下载、发送各种HTTP请求，指定HTTP头部等操作。如果系统没有curl可以使用<code>yum install curl</code>安装，也可以下载安装。curl是将下载文件输出到stdout，将进度信息输出到stderr，不显示进度信息使用<code>--silent</code>选项。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl URL --silent</span><br></pre></td></tr></table></figure>\n<p>这条命令是将下载文件输出到终端，所有下载的数据都被写入到stdout。</p>\n<p>使用选项<code>-O</code>将下载的数据写入到文件，必须使用文件的绝对地址：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://man.linuxde.net/text.iso --silent -O</span><br></pre></td></tr></table></figure>\n<p>选项<code>-o</code>将下载数据写入到指定名称的文件中，并使用<code>--progress</code>显示进度条：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://man.linuxde.net/test.iso -o filename.iso --progress</span><br><span class=\"line\">######################################### 100.0%</span><br></pre></td></tr></table></figure>\n<h3 id=\"断点续传\"><a href=\"#断点续传\" class=\"headerlink\" title=\"断点续传\"></a>断点续传</h3><p>curl能够从特定的文件偏移处继续下载，它可以通过指定一个便宜量来下载部分文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl URL/File -C 偏移量</span><br><span class=\"line\"></span><br><span class=\"line\">#偏移量是以字节为单位的整数，如果让curl自动推断出正确的续传位置使用-C -：</span><br><span class=\"line\">curl -C -URL</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用curl设置参照页字符串\"><a href=\"#使用curl设置参照页字符串\" class=\"headerlink\" title=\"使用curl设置参照页字符串\"></a>使用curl设置参照页字符串</h3><p>参照页是位于HTTP头部中的一个字符串，用来表示用户是从哪个页面到达当前页面的，如果用户点击网页A中的某个连接，那么用户就会跳转到B网页，网页B头部的参照页字符串就包含网页A的URL。</p>\n<p>使用<code>--referer</code>选项指定参照页字符串：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --referer http://www.google.com http://man.linuxde.net</span><br></pre></td></tr></table></figure>\n<h3 id=\"用curl设置cookies\"><a href=\"#用curl设置cookies\" class=\"headerlink\" title=\"用curl设置cookies\"></a>用curl设置cookies</h3><p>使用<code>--cookie &quot;COKKIES&quot;</code>选项来指定cookie，多个cookie使用分号分隔：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://man.linuxde.net --cookie &quot;user=root;pass=123456&quot;</span><br></pre></td></tr></table></figure>\n<p>将cookie另存为一个文件，使用<code>--cookie-jar</code>选项：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl URL --cookie-jar cookie_file</span><br></pre></td></tr></table></figure>\n<h3 id=\"用curl设置用户代理字符串\"><a href=\"#用curl设置用户代理字符串\" class=\"headerlink\" title=\"用curl设置用户代理字符串\"></a>用curl设置用户代理字符串</h3><p>有些网站访问会提示只能使用IE浏览器来访问，这是因为这些网站设置了检查用户代理，可以使用curl把用户代理设置为IE，这样就可以访问了。使用<code>--user-agent</code>或者<code>-A</code>选项：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl URL --user-agent &quot;Mozilla/5.0&quot;</span><br><span class=\"line\">curl URL -A &quot;Mozilla/5.0&quot;</span><br></pre></td></tr></table></figure>\n<p>其他HTTP头部信息也可以使用curl来发送，使用<code>-H</code>“头部信息” 传递多个头部信息，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -H &quot;Host:man.linuxde.net&quot; -H &quot;accept-language:zh-cn&quot; URL</span><br></pre></td></tr></table></figure>\n<h3 id=\"curl的带宽控制和下载配额\"><a href=\"#curl的带宽控制和下载配额\" class=\"headerlink\" title=\"curl的带宽控制和下载配额\"></a>curl的带宽控制和下载配额</h3><p>使用<code>--limit-rate</code>限制curl的下载速度：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl URL --limit-rate 50k</span><br></pre></td></tr></table></figure>\n<p>命令中用k（千字节）和m（兆字节）指定下载速度限制。</p>\n<p>使用<code>--max-filesize</code>指定可下载的最大文件大小：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl URL --max-filesize bytes</span><br></pre></td></tr></table></figure>\n<p>如果文件大小超出限制，命令则返回一个非0退出码，如果命令正常则返回0。</p>\n<h3 id=\"用curl进行认证\"><a href=\"#用curl进行认证\" class=\"headerlink\" title=\"用curl进行认证\"></a>用curl进行认证</h3><p>使用curl选项 -u 可以完成HTTP或者FTP的认证，可以指定密码，也可以不指定密码在后续操作中输入密码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -u user:pwd http://man.linuxde.net</span><br><span class=\"line\">curl -u user http://man.linuxde.net</span><br></pre></td></tr></table></figure>\n<h3 id=\"只打印响应头部信息\"><a href=\"#只打印响应头部信息\" class=\"headerlink\" title=\"只打印响应头部信息\"></a>只打印响应头部信息</h3><p>通过<code>-I</code>或者<code>-head</code>可以只打印出HTTP头部信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost text]# curl -I http://man.linuxde.net</span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Server: nginx/1.2.5</span><br><span class=\"line\">date: Mon, 10 Dec 2012 09:24:34 GMT</span><br><span class=\"line\">Content-Type: text/html; charset=UTF-8</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">Vary: Accept-Encoding</span><br><span class=\"line\">X-Pingback: http://man.linuxde.net/xmlrpc.php</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://man.linuxde.net/curl\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>"},{"title":"chown命令","toc":false,"date":"2017-10-09T05:20:26.000Z","_content":"\nchown将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户ID；组可以是组名或者组ID；文件是以空格分开的要改变权限的文件列表，支持通配符。系统管理员经常使用chown命令，在将文件拷贝到另一个用户的名录下之后，让用户拥有使用该文件的权限。 \n\n<!-- more -->\n\n1. 命令格式：\n\n\t**chown [选项]... [所有者][:[组]] 文件...**\n\n2. 命令功能：\n\n\t通过chown改变文件的拥有者和群组。在更改文件的所有者或所属群组时，可以使用用户名称和用户识别码设置。普通用户不能将自己的文件改变成其他的拥有者。其操作权限一般为管理员。\n\n3. 命令参数：\n\n\t必要参数:\n\n　　　　-c 显示更改的部分的信息\n\n　　　　-f 忽略错误信息\n\n　　　　-h 修复符号链接\n\n　　　　**-R 处理指定目录以及其子目录下的所有文件**\n\n　　　　**-v 显示详细的处理信息**\n\n　　　　-deference 作用于符号链接的指向，而不是链接文件本身\n\n　　选择参数:\n\n　　　　--reference=<目录或文件> 把指定的目录/文件作为参考，把操作的文件/目录设置成参考文件/目录相同拥有者和群组\n\n　　　　--from=<当前用户：当前群组> 只有当前用户和群组跟指定的用户和群组相同时才进行改变\n\n　　　　--help 显示帮助信息\n\n　　　　--version 显示版本信息\n\n4．使用实例：\n\n　　**实例1：改变拥有者和群组**\n\n　　命令：\n\n　　chown mail:mail log2012.log\n\t\n　　输出：　　\n\n```\n[root@localhost test6]# ll\n---xr--r-- 1 root users 302108 11-30 08:39 linklog.log\n---xr--r-- 1 root users 302108 11-30 08:39 log2012.log\n-rw-r--r-- 1 root users     61 11-30 08:39 log2013.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2014.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2015.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2016.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2017.log\n[root@localhost test6]# chown mail:mail log2012.log \n[root@localhost test6]# ll\n---xr--r-- 1 root users 302108 11-30 08:39 linklog.log\n---xr--r-- 1 mail mail  302108 11-30 08:39 log2012.log\n-rw-r--r-- 1 root users     61 11-30 08:39 log2013.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2014.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2015.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2016.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2017.log\n[root@localhost test6]#\n```\n说明：\n\n　　**实例2：改变文件拥有者和群组**\n\n　　命令：\n\n　　　　chown root: log2012.log\n\n　　输出：　　　　\n\n```\n[root@localhost test6]# ll\n总计 604\n---xr--r-- 1 root users 302108 11-30 08:39 linklog.log\n---xr--r-- 1 mail mail  302108 11-30 08:39 log2012.log\n-rw-r--r-- 1 root users     61 11-30 08:39 log2013.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2014.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2015.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2016.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2017.log\n[root@localhost test6]# chown root: log2012.log \n[root@localhost test6]# ll\n总计 604\n---xr--r-- 1 root users 302108 11-30 08:39 linklog.log\n---xr--r-- 1 root root  302108 11-30 08:39 log2012.log\n-rw-r--r-- 1 root users     61 11-30 08:39 log2013.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2014.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2015.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2016.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2017.log\n[root@localhost test6]#\n```\n说明：\n\n　　**实例3：改变文件群组**\n\n　　命令：\n\n　　　　chown :mail log2012.log\n\n　　输出：　　\n\n```\n[root@localhost test6]# ll\n总计 604\n---xr--r-- 1 root users 302108 11-30 08:39 linklog.log\n---xr--r-- 1 root root  302108 11-30 08:39 log2012.log\n-rw-r--r-- 1 root users     61 11-30 08:39 log2013.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2014.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2015.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2016.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2017.log\n[root@localhost test6]# chown :mail log2012.log \n[root@localhost test6]# ll\n总计 604\n---xr--r-- 1 root users 302108 11-30 08:39 linklog.log\n---xr--r-- 1 root mail  302108 11-30 08:39 log2012.log\n-rw-r--r-- 1 root users     61 11-30 08:39 log2013.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2014.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2015.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2016.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2017.log\n```\n说明：\n\n　　**实例4：改变指定目录以及其子目录下的所有文件的拥有者和群组 **\n\n　　命令：\n\n　　　　**chown -R *-v* root:mail test6**\n\n　　输出：　　\n\n```\n[root@localhost test]# ll\ndrwxr-xr-x 2 root users   4096 11-30 08:39 test6\n[root@localhost test]# chown -R -v root:mail test6\n“test6/log2014.log” 的所有者已更改为 root:mail\n“test6/linklog.log” 的所有者已更改为 root:mail\n“test6/log2015.log” 的所有者已更改为 root:mail\n“test6/log2013.log” 的所有者已更改为 root:mail\n“test6/log2012.log” 的所有者已保留为 root:mail\n“test6/log2017.log” 的所有者已更改为 root:mail\n“test6/log2016.log” 的所有者已更改为 root:mail\n“test6” 的所有者已更改为 root:mail\n[root@localhost test]# ll\ndrwxr-xr-x 2 root mail   4096 11-30 08:39 test6\n[root@localhost test]# cd test6\n[root@localhost test6]# ll\n总计 604\n---xr--r-- 1 root mail 302108 11-30 08:39 linklog.log\n---xr--r-- 1 root mail 302108 11-30 08:39 log2012.log\n-rw-r--r-- 1 root mail     61 11-30 08:39 log2013.log\n-rw-r--r-- 1 root mail      0 11-30 08:39 log2014.log\n-rw-r--r-- 1 root mail      0 11-30 08:39 log2015.log\n-rw-r--r-- 1 root mail      0 11-30 08:39 log2016.log\n-rw-r--r-- 1 root mail      0 11-30 08:39 log2017.log\n```\n\t\n说明：\n","source":"_posts/chown命令.md","raw":"---\ntitle: chown命令\ntags:\n  - linux\ncategories:\n  - 后端开发\ntoc: false\ndate: 2017-10-09 13:20:26\n---\n\nchown将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户ID；组可以是组名或者组ID；文件是以空格分开的要改变权限的文件列表，支持通配符。系统管理员经常使用chown命令，在将文件拷贝到另一个用户的名录下之后，让用户拥有使用该文件的权限。 \n\n<!-- more -->\n\n1. 命令格式：\n\n\t**chown [选项]... [所有者][:[组]] 文件...**\n\n2. 命令功能：\n\n\t通过chown改变文件的拥有者和群组。在更改文件的所有者或所属群组时，可以使用用户名称和用户识别码设置。普通用户不能将自己的文件改变成其他的拥有者。其操作权限一般为管理员。\n\n3. 命令参数：\n\n\t必要参数:\n\n　　　　-c 显示更改的部分的信息\n\n　　　　-f 忽略错误信息\n\n　　　　-h 修复符号链接\n\n　　　　**-R 处理指定目录以及其子目录下的所有文件**\n\n　　　　**-v 显示详细的处理信息**\n\n　　　　-deference 作用于符号链接的指向，而不是链接文件本身\n\n　　选择参数:\n\n　　　　--reference=<目录或文件> 把指定的目录/文件作为参考，把操作的文件/目录设置成参考文件/目录相同拥有者和群组\n\n　　　　--from=<当前用户：当前群组> 只有当前用户和群组跟指定的用户和群组相同时才进行改变\n\n　　　　--help 显示帮助信息\n\n　　　　--version 显示版本信息\n\n4．使用实例：\n\n　　**实例1：改变拥有者和群组**\n\n　　命令：\n\n　　chown mail:mail log2012.log\n\t\n　　输出：　　\n\n```\n[root@localhost test6]# ll\n---xr--r-- 1 root users 302108 11-30 08:39 linklog.log\n---xr--r-- 1 root users 302108 11-30 08:39 log2012.log\n-rw-r--r-- 1 root users     61 11-30 08:39 log2013.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2014.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2015.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2016.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2017.log\n[root@localhost test6]# chown mail:mail log2012.log \n[root@localhost test6]# ll\n---xr--r-- 1 root users 302108 11-30 08:39 linklog.log\n---xr--r-- 1 mail mail  302108 11-30 08:39 log2012.log\n-rw-r--r-- 1 root users     61 11-30 08:39 log2013.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2014.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2015.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2016.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2017.log\n[root@localhost test6]#\n```\n说明：\n\n　　**实例2：改变文件拥有者和群组**\n\n　　命令：\n\n　　　　chown root: log2012.log\n\n　　输出：　　　　\n\n```\n[root@localhost test6]# ll\n总计 604\n---xr--r-- 1 root users 302108 11-30 08:39 linklog.log\n---xr--r-- 1 mail mail  302108 11-30 08:39 log2012.log\n-rw-r--r-- 1 root users     61 11-30 08:39 log2013.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2014.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2015.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2016.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2017.log\n[root@localhost test6]# chown root: log2012.log \n[root@localhost test6]# ll\n总计 604\n---xr--r-- 1 root users 302108 11-30 08:39 linklog.log\n---xr--r-- 1 root root  302108 11-30 08:39 log2012.log\n-rw-r--r-- 1 root users     61 11-30 08:39 log2013.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2014.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2015.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2016.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2017.log\n[root@localhost test6]#\n```\n说明：\n\n　　**实例3：改变文件群组**\n\n　　命令：\n\n　　　　chown :mail log2012.log\n\n　　输出：　　\n\n```\n[root@localhost test6]# ll\n总计 604\n---xr--r-- 1 root users 302108 11-30 08:39 linklog.log\n---xr--r-- 1 root root  302108 11-30 08:39 log2012.log\n-rw-r--r-- 1 root users     61 11-30 08:39 log2013.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2014.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2015.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2016.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2017.log\n[root@localhost test6]# chown :mail log2012.log \n[root@localhost test6]# ll\n总计 604\n---xr--r-- 1 root users 302108 11-30 08:39 linklog.log\n---xr--r-- 1 root mail  302108 11-30 08:39 log2012.log\n-rw-r--r-- 1 root users     61 11-30 08:39 log2013.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2014.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2015.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2016.log\n-rw-r--r-- 1 root users      0 11-30 08:39 log2017.log\n```\n说明：\n\n　　**实例4：改变指定目录以及其子目录下的所有文件的拥有者和群组 **\n\n　　命令：\n\n　　　　**chown -R *-v* root:mail test6**\n\n　　输出：　　\n\n```\n[root@localhost test]# ll\ndrwxr-xr-x 2 root users   4096 11-30 08:39 test6\n[root@localhost test]# chown -R -v root:mail test6\n“test6/log2014.log” 的所有者已更改为 root:mail\n“test6/linklog.log” 的所有者已更改为 root:mail\n“test6/log2015.log” 的所有者已更改为 root:mail\n“test6/log2013.log” 的所有者已更改为 root:mail\n“test6/log2012.log” 的所有者已保留为 root:mail\n“test6/log2017.log” 的所有者已更改为 root:mail\n“test6/log2016.log” 的所有者已更改为 root:mail\n“test6” 的所有者已更改为 root:mail\n[root@localhost test]# ll\ndrwxr-xr-x 2 root mail   4096 11-30 08:39 test6\n[root@localhost test]# cd test6\n[root@localhost test6]# ll\n总计 604\n---xr--r-- 1 root mail 302108 11-30 08:39 linklog.log\n---xr--r-- 1 root mail 302108 11-30 08:39 log2012.log\n-rw-r--r-- 1 root mail     61 11-30 08:39 log2013.log\n-rw-r--r-- 1 root mail      0 11-30 08:39 log2014.log\n-rw-r--r-- 1 root mail      0 11-30 08:39 log2015.log\n-rw-r--r-- 1 root mail      0 11-30 08:39 log2016.log\n-rw-r--r-- 1 root mail      0 11-30 08:39 log2017.log\n```\n\t\n说明：\n","slug":"chown命令","published":1,"updated":"2019-11-07T02:13:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzny8003gh5s6dcah1jxg","content":"<p>chown将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户ID；组可以是组名或者组ID；文件是以空格分开的要改变权限的文件列表，支持通配符。系统管理员经常使用chown命令，在将文件拷贝到另一个用户的名录下之后，让用户拥有使用该文件的权限。 </p>\n<a id=\"more\"></a>\n<ol>\n<li><p>命令格式：</p>\n<p> <strong>chown [选项]… [所有者][:[组]] 文件…</strong></p>\n</li>\n<li><p>命令功能：</p>\n<p> 通过chown改变文件的拥有者和群组。在更改文件的所有者或所属群组时，可以使用用户名称和用户识别码设置。普通用户不能将自己的文件改变成其他的拥有者。其操作权限一般为管理员。</p>\n</li>\n<li><p>命令参数：</p>\n<p> 必要参数:</p>\n</li>\n</ol>\n<p>　　　　-c 显示更改的部分的信息</p>\n<p>　　　　-f 忽略错误信息</p>\n<p>　　　　-h 修复符号链接</p>\n<p>　　　　<strong>-R 处理指定目录以及其子目录下的所有文件</strong></p>\n<p>　　　　<strong>-v 显示详细的处理信息</strong></p>\n<p>　　　　-deference 作用于符号链接的指向，而不是链接文件本身</p>\n<p>　　选择参数:</p>\n<p>　　　　–reference=&lt;目录或文件&gt; 把指定的目录/文件作为参考，把操作的文件/目录设置成参考文件/目录相同拥有者和群组</p>\n<p>　　　　–from=&lt;当前用户：当前群组&gt; 只有当前用户和群组跟指定的用户和群组相同时才进行改变</p>\n<p>　　　　–help 显示帮助信息</p>\n<p>　　　　–version 显示版本信息</p>\n<p>4．使用实例：</p>\n<p>　　<strong>实例1：改变拥有者和群组</strong></p>\n<p>　　命令：</p>\n<p>　　chown mail:mail log2012.log</p>\n<p>　　输出：　　</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost test6]# ll</span><br><span class=\"line\">---xr--r-- 1 root users 302108 11-30 08:39 linklog.log</span><br><span class=\"line\">---xr--r-- 1 root users 302108 11-30 08:39 log2012.log</span><br><span class=\"line\">-rw-r--r-- 1 root users     61 11-30 08:39 log2013.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2014.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2015.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2016.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2017.log</span><br><span class=\"line\">[root@localhost test6]# chown mail:mail log2012.log </span><br><span class=\"line\">[root@localhost test6]# ll</span><br><span class=\"line\">---xr--r-- 1 root users 302108 11-30 08:39 linklog.log</span><br><span class=\"line\">---xr--r-- 1 mail mail  302108 11-30 08:39 log2012.log</span><br><span class=\"line\">-rw-r--r-- 1 root users     61 11-30 08:39 log2013.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2014.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2015.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2016.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2017.log</span><br><span class=\"line\">[root@localhost test6]#</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<p>　　<strong>实例2：改变文件拥有者和群组</strong></p>\n<p>　　命令：</p>\n<p>　　　　chown root: log2012.log</p>\n<p>　　输出：　　　　</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost test6]# ll</span><br><span class=\"line\">总计 604</span><br><span class=\"line\">---xr--r-- 1 root users 302108 11-30 08:39 linklog.log</span><br><span class=\"line\">---xr--r-- 1 mail mail  302108 11-30 08:39 log2012.log</span><br><span class=\"line\">-rw-r--r-- 1 root users     61 11-30 08:39 log2013.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2014.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2015.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2016.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2017.log</span><br><span class=\"line\">[root@localhost test6]# chown root: log2012.log </span><br><span class=\"line\">[root@localhost test6]# ll</span><br><span class=\"line\">总计 604</span><br><span class=\"line\">---xr--r-- 1 root users 302108 11-30 08:39 linklog.log</span><br><span class=\"line\">---xr--r-- 1 root root  302108 11-30 08:39 log2012.log</span><br><span class=\"line\">-rw-r--r-- 1 root users     61 11-30 08:39 log2013.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2014.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2015.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2016.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2017.log</span><br><span class=\"line\">[root@localhost test6]#</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<p>　　<strong>实例3：改变文件群组</strong></p>\n<p>　　命令：</p>\n<p>　　　　chown :mail log2012.log</p>\n<p>　　输出：　　</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost test6]# ll</span><br><span class=\"line\">总计 604</span><br><span class=\"line\">---xr--r-- 1 root users 302108 11-30 08:39 linklog.log</span><br><span class=\"line\">---xr--r-- 1 root root  302108 11-30 08:39 log2012.log</span><br><span class=\"line\">-rw-r--r-- 1 root users     61 11-30 08:39 log2013.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2014.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2015.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2016.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2017.log</span><br><span class=\"line\">[root@localhost test6]# chown :mail log2012.log </span><br><span class=\"line\">[root@localhost test6]# ll</span><br><span class=\"line\">总计 604</span><br><span class=\"line\">---xr--r-- 1 root users 302108 11-30 08:39 linklog.log</span><br><span class=\"line\">---xr--r-- 1 root mail  302108 11-30 08:39 log2012.log</span><br><span class=\"line\">-rw-r--r-- 1 root users     61 11-30 08:39 log2013.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2014.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2015.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2016.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2017.log</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<p>　　<strong>实例4：改变指定目录以及其子目录下的所有文件的拥有者和群组 </strong></p>\n<p>　　命令：</p>\n<p>　　　　<strong>chown -R <em>-v</em> root:mail test6</strong></p>\n<p>　　输出：　　</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost test]# ll</span><br><span class=\"line\">drwxr-xr-x 2 root users   4096 11-30 08:39 test6</span><br><span class=\"line\">[root@localhost test]# chown -R -v root:mail test6</span><br><span class=\"line\">“test6/log2014.log” 的所有者已更改为 root:mail</span><br><span class=\"line\">“test6/linklog.log” 的所有者已更改为 root:mail</span><br><span class=\"line\">“test6/log2015.log” 的所有者已更改为 root:mail</span><br><span class=\"line\">“test6/log2013.log” 的所有者已更改为 root:mail</span><br><span class=\"line\">“test6/log2012.log” 的所有者已保留为 root:mail</span><br><span class=\"line\">“test6/log2017.log” 的所有者已更改为 root:mail</span><br><span class=\"line\">“test6/log2016.log” 的所有者已更改为 root:mail</span><br><span class=\"line\">“test6” 的所有者已更改为 root:mail</span><br><span class=\"line\">[root@localhost test]# ll</span><br><span class=\"line\">drwxr-xr-x 2 root mail   4096 11-30 08:39 test6</span><br><span class=\"line\">[root@localhost test]# cd test6</span><br><span class=\"line\">[root@localhost test6]# ll</span><br><span class=\"line\">总计 604</span><br><span class=\"line\">---xr--r-- 1 root mail 302108 11-30 08:39 linklog.log</span><br><span class=\"line\">---xr--r-- 1 root mail 302108 11-30 08:39 log2012.log</span><br><span class=\"line\">-rw-r--r-- 1 root mail     61 11-30 08:39 log2013.log</span><br><span class=\"line\">-rw-r--r-- 1 root mail      0 11-30 08:39 log2014.log</span><br><span class=\"line\">-rw-r--r-- 1 root mail      0 11-30 08:39 log2015.log</span><br><span class=\"line\">-rw-r--r-- 1 root mail      0 11-30 08:39 log2016.log</span><br><span class=\"line\">-rw-r--r-- 1 root mail      0 11-30 08:39 log2017.log</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n","site":{"data":{}},"excerpt":"<p>chown将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户ID；组可以是组名或者组ID；文件是以空格分开的要改变权限的文件列表，支持通配符。系统管理员经常使用chown命令，在将文件拷贝到另一个用户的名录下之后，让用户拥有使用该文件的权限。 </p>","more":"<ol>\n<li><p>命令格式：</p>\n<p> <strong>chown [选项]… [所有者][:[组]] 文件…</strong></p>\n</li>\n<li><p>命令功能：</p>\n<p> 通过chown改变文件的拥有者和群组。在更改文件的所有者或所属群组时，可以使用用户名称和用户识别码设置。普通用户不能将自己的文件改变成其他的拥有者。其操作权限一般为管理员。</p>\n</li>\n<li><p>命令参数：</p>\n<p> 必要参数:</p>\n</li>\n</ol>\n<p>　　　　-c 显示更改的部分的信息</p>\n<p>　　　　-f 忽略错误信息</p>\n<p>　　　　-h 修复符号链接</p>\n<p>　　　　<strong>-R 处理指定目录以及其子目录下的所有文件</strong></p>\n<p>　　　　<strong>-v 显示详细的处理信息</strong></p>\n<p>　　　　-deference 作用于符号链接的指向，而不是链接文件本身</p>\n<p>　　选择参数:</p>\n<p>　　　　–reference=&lt;目录或文件&gt; 把指定的目录/文件作为参考，把操作的文件/目录设置成参考文件/目录相同拥有者和群组</p>\n<p>　　　　–from=&lt;当前用户：当前群组&gt; 只有当前用户和群组跟指定的用户和群组相同时才进行改变</p>\n<p>　　　　–help 显示帮助信息</p>\n<p>　　　　–version 显示版本信息</p>\n<p>4．使用实例：</p>\n<p>　　<strong>实例1：改变拥有者和群组</strong></p>\n<p>　　命令：</p>\n<p>　　chown mail:mail log2012.log</p>\n<p>　　输出：　　</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost test6]# ll</span><br><span class=\"line\">---xr--r-- 1 root users 302108 11-30 08:39 linklog.log</span><br><span class=\"line\">---xr--r-- 1 root users 302108 11-30 08:39 log2012.log</span><br><span class=\"line\">-rw-r--r-- 1 root users     61 11-30 08:39 log2013.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2014.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2015.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2016.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2017.log</span><br><span class=\"line\">[root@localhost test6]# chown mail:mail log2012.log </span><br><span class=\"line\">[root@localhost test6]# ll</span><br><span class=\"line\">---xr--r-- 1 root users 302108 11-30 08:39 linklog.log</span><br><span class=\"line\">---xr--r-- 1 mail mail  302108 11-30 08:39 log2012.log</span><br><span class=\"line\">-rw-r--r-- 1 root users     61 11-30 08:39 log2013.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2014.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2015.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2016.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2017.log</span><br><span class=\"line\">[root@localhost test6]#</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<p>　　<strong>实例2：改变文件拥有者和群组</strong></p>\n<p>　　命令：</p>\n<p>　　　　chown root: log2012.log</p>\n<p>　　输出：　　　　</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost test6]# ll</span><br><span class=\"line\">总计 604</span><br><span class=\"line\">---xr--r-- 1 root users 302108 11-30 08:39 linklog.log</span><br><span class=\"line\">---xr--r-- 1 mail mail  302108 11-30 08:39 log2012.log</span><br><span class=\"line\">-rw-r--r-- 1 root users     61 11-30 08:39 log2013.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2014.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2015.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2016.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2017.log</span><br><span class=\"line\">[root@localhost test6]# chown root: log2012.log </span><br><span class=\"line\">[root@localhost test6]# ll</span><br><span class=\"line\">总计 604</span><br><span class=\"line\">---xr--r-- 1 root users 302108 11-30 08:39 linklog.log</span><br><span class=\"line\">---xr--r-- 1 root root  302108 11-30 08:39 log2012.log</span><br><span class=\"line\">-rw-r--r-- 1 root users     61 11-30 08:39 log2013.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2014.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2015.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2016.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2017.log</span><br><span class=\"line\">[root@localhost test6]#</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<p>　　<strong>实例3：改变文件群组</strong></p>\n<p>　　命令：</p>\n<p>　　　　chown :mail log2012.log</p>\n<p>　　输出：　　</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost test6]# ll</span><br><span class=\"line\">总计 604</span><br><span class=\"line\">---xr--r-- 1 root users 302108 11-30 08:39 linklog.log</span><br><span class=\"line\">---xr--r-- 1 root root  302108 11-30 08:39 log2012.log</span><br><span class=\"line\">-rw-r--r-- 1 root users     61 11-30 08:39 log2013.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2014.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2015.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2016.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2017.log</span><br><span class=\"line\">[root@localhost test6]# chown :mail log2012.log </span><br><span class=\"line\">[root@localhost test6]# ll</span><br><span class=\"line\">总计 604</span><br><span class=\"line\">---xr--r-- 1 root users 302108 11-30 08:39 linklog.log</span><br><span class=\"line\">---xr--r-- 1 root mail  302108 11-30 08:39 log2012.log</span><br><span class=\"line\">-rw-r--r-- 1 root users     61 11-30 08:39 log2013.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2014.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2015.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2016.log</span><br><span class=\"line\">-rw-r--r-- 1 root users      0 11-30 08:39 log2017.log</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<p>　　<strong>实例4：改变指定目录以及其子目录下的所有文件的拥有者和群组 </strong></p>\n<p>　　命令：</p>\n<p>　　　　<strong>chown -R <em>-v</em> root:mail test6</strong></p>\n<p>　　输出：　　</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost test]# ll</span><br><span class=\"line\">drwxr-xr-x 2 root users   4096 11-30 08:39 test6</span><br><span class=\"line\">[root@localhost test]# chown -R -v root:mail test6</span><br><span class=\"line\">“test6/log2014.log” 的所有者已更改为 root:mail</span><br><span class=\"line\">“test6/linklog.log” 的所有者已更改为 root:mail</span><br><span class=\"line\">“test6/log2015.log” 的所有者已更改为 root:mail</span><br><span class=\"line\">“test6/log2013.log” 的所有者已更改为 root:mail</span><br><span class=\"line\">“test6/log2012.log” 的所有者已保留为 root:mail</span><br><span class=\"line\">“test6/log2017.log” 的所有者已更改为 root:mail</span><br><span class=\"line\">“test6/log2016.log” 的所有者已更改为 root:mail</span><br><span class=\"line\">“test6” 的所有者已更改为 root:mail</span><br><span class=\"line\">[root@localhost test]# ll</span><br><span class=\"line\">drwxr-xr-x 2 root mail   4096 11-30 08:39 test6</span><br><span class=\"line\">[root@localhost test]# cd test6</span><br><span class=\"line\">[root@localhost test6]# ll</span><br><span class=\"line\">总计 604</span><br><span class=\"line\">---xr--r-- 1 root mail 302108 11-30 08:39 linklog.log</span><br><span class=\"line\">---xr--r-- 1 root mail 302108 11-30 08:39 log2012.log</span><br><span class=\"line\">-rw-r--r-- 1 root mail     61 11-30 08:39 log2013.log</span><br><span class=\"line\">-rw-r--r-- 1 root mail      0 11-30 08:39 log2014.log</span><br><span class=\"line\">-rw-r--r-- 1 root mail      0 11-30 08:39 log2015.log</span><br><span class=\"line\">-rw-r--r-- 1 root mail      0 11-30 08:39 log2016.log</span><br><span class=\"line\">-rw-r--r-- 1 root mail      0 11-30 08:39 log2017.log</span><br></pre></td></tr></table></figure>\n<p>说明：</p>"},{"title":"dnsmasq.conf 配置","toc":false,"date":"2018-01-10T10:17:10.000Z","_content":"\n这个文档里说的比较详细：\n<!-- more -->\n```\n##############################################################################\n#\n#        DNS 选项\n#\n##############################################################################\n# 不加载本地的 /etc/hosts 文件\n#no-hosts\n# 添加读取额外的 hosts 文件路径，可以多次指定。如果指定为目录，则读取目录中的所有文件。\n#addn-hosts=/etc/hosts\n# 读取目录中的所有文件，文件更新将自动读取\n#hostsdir=<path>\n# 例如，/etc/hosts中的os01将扩展成os01.example.com\n#expand-hosts\n \n##############################################################################\n# 缓存时间设置，一般不需要设置\n# 本地 hosts 文件的缓存时间，通常不要求缓存本地，这样更改hosts文件后就即时生效。\n#local-ttl=3600\n# 同 local-ttl 仅影响 DHCP 租约\n#dhcp-ttl=<time>\n# 对于上游返回的值没有ttl时，dnsmasq给一个默认的ttl，一般不需要设置，\n#neg-ttl=<time>\n# 指定返回给客户端的ttl时间，一般不需要设置\n#max-ttl=<time>\n# 设置在缓存中的条目的最大 TTL。\n#max-cache-ttl=<time>\n# 不需要设置，除非你知道你在做什么。\n#min-cache-ttl=<time>\n# 一般不需要设置\n#auth-ttl=<time>\n \n##############################################################################\n# 记录dns查询日志\n#log-queries\n# 设置日志记录器，‘-‘ 为 stderr，也可以是文件路径。默认为：DAEMON，调试时使用 LOCAL0。\n#log-facility=<facility>\n#log-facility=/var/log/dnsmasq/dnsmasq.log\n# 异步log，缓解阻塞，提高性能。默认为5，最大100。\n#log-async[=<lines>]\n#log-async=50\n \n##############################################################################\n# 指定用户和组\n#user=nobody\n#group=nobody\n \n##############################################################################\n# 指定DNS的端口，默认53，设置 port=0 将完全禁用 DNS 功能，仅使用 DHCP/TFTP\n#port=53\n# 指定 EDNS.0 UDP 包的最大尺寸，默认为 RFC5625 推荐的 edns-packet-max=4096\n#edns-packet-max=<size>\n# 指定向上游查询的 UDP 端口，默认是随机端口，指定后降低安全性、加快速度、减少资源消耗。\n# 设置为 0 有操作系统分配。\nquery-port=53535\n# 指定向上游查询的 UDP 端口范围，方便防火墙设置。\n#min-port=<port>\n#max-port=<port>\n# 指定接口，指定后同时附加 lo 接口，可以使用‘*‘通配符\n#interface=wlp2s0\n# 指定排除的接口，排除高优先级，可以使用‘*‘通配符\n#except-interface=\n# 启用 DNS 验证模式\n#auth-server=<domain>,<interface>|<ip-address>\n# 仅接收同一子网的 DNS 请求，仅在未指定 interface、except-interface、listen-address \n# 或者 auth-server 时有效。\n#local-service\n# 指定不提供 DHCP 或 TFTP 服务的接口，仅提供 DNS 服务\n#no-dhcp-interface=enp3s0\n# 指定IP地址，可以多次指定。下面两行跟指定接口的作用类似。\n#listen-address=192.168.10.254\n#listen-address=127.0.0.1\n# 绑定接口，开启此项将仅监听指定的接口。\n#bind-interfaces\n# 对于新添加的接口也进行绑定。\n#bind-dynamic\n \n##############################################################################\n# 如果 hosts 中的主机有多个 IP 地址，仅返回对应子网的 IP 地址。\n#localise-queries\n# 如果反向查找的是私有地址例如192.168.X.X，仅从 hosts 文件查找，不再转发到上游服务器\n#bogus-priv\n# 对于任何被解析到此IP的域名，使其解析失效，可以多次指定\n#bogus-nxdomain=64.94.110.11\n# 忽略指定的 DNS 响应服务器地址，例如 1.1.1.1 为伪造的 dns 服务器并且响应速度非常快，\n# 指定 ignore-address=1.1.1.1 可以忽略它的响应信息，从而等待正确的响应结果。\n#ignore-address=<ipaddr>\n#filterwin2k\n \n##############################################################################\n# 指定 resolv-file 文件路径，默认/etc/resolv.conf\n#resolv-file=/etc/resolv.conf\n# 不读取 resolv-file 来确定上游服务器\n#no-resolv\n# 在编译时需要启用 DBus 支持。\n#enable-dbus[=<service-name>]\n# 严格按照resolv.conf中的顺序进行查找\n#strict-order\n# 向所有上有服务器发送查询，而不是一个。\n#all-servers\n#dns-loop-detect\n \n##############################################################################\n# 这项安全设置是拒绝解析包含私有 IP 地址的域名，\n# 这些IP地址包括如下私有地址范围：10.0.0.0/8、172.16.0.0/12、192.168.0.0/16。\n# 其初衷是要防止类似上游DNS服务器故意将某些域名解析成特定私有内网IP而劫持用户这样的安全攻击。\n# 直接在配置文件中注销 stop-dns-rebind 配置项从而禁用该功能。\n# 这个方法确实可以一劳永逸的解决解析内网 IP 地址的问题，但是我们也失去了这项安全保护的特性，\n# 所以在这里我不推荐这个办法。\n# 使用 rebind-domain-ok 进行特定配置，顾名思义该配置项可以有选择的忽略域名的 rebind 行为\n#stop-dns-rebind\n#rebind-localhost-ok\n#rebind-domain-ok=[<domain>]|[[/<domain>/[<domain>/]\n#rebind-domain-ok=/.dinghuangjie.com/.dhj.com/.harlinsu.com/.example.com/.test.com/.esderive.com/\n \n##############################################################################\n# 也不要检测 /etc/resolv.conf 的变化\n#no-poll\n# 重启后清空缓存\n#clear-on-reload\n# 完整的域名才向上游服务器查找，如果仅仅是主机名仅查找hosts文件\n#domain-needed\n \n##############################################################################\n# IP地址转换\n#alias=[<old-ip>]|[<start-ip>-<end-ip>],<new-ip>[,<mask>]\n##############################################################################\n#local=[/[<domain>]/[domain/]][<ipaddr>[#<port>][@<source-ip>|<interface>[#<port>]]\n#server=[/[<domain>]/[domain/]][<ipaddr>[#<port>][@<source-ip>|<interface>[#<port>]]\n#server=/example.com/192.168.10.252\n#rev-server=<ip-address>/<prefix-len>,<ipaddr>[#<port>][@<source-ip>|<interface>[#<port>]]\n \n# 将任何属于 <domain> 域名解析成指定的 <ipaddr> 地址。\n# 也就是将 <domain> 及其所有子域名解析成指定的 <ipaddr> IPv4 或者 IPv6 地址，\n# 通常用于屏蔽特定的域名。\n# 一次只能指定一个 IPv4 或者 IPv6 地址，\n# 要同时返回 IPv4 和IPv6 地址，请多次指定 address= 选项。\n# 注意： /etc/hosts 以及 DHCP 租约将覆盖此项设置。\n#address=/<domain>/[domain/][<ipaddr>]\n \n#ipset=/<domain>/[domain/]<ipset>[,<ipset>]\n#mx-host=<mx name>[[,<hostname>],<preference>]\n#mx-target=<hostname>\n \n# SRV 记录\n#srv-host=<_service>.<_prot>.[<domain>],[<target>[,<port>[,<priority>[,<weight>]]]]\n \n# A, AAAA 和 PTR 记录 \n#host-record=<name>[,<name>....],[<IPv4-address>],[<IPv6-address>][,<TTL>]\n \n# TXT 记录\n#txt-record=<name>[[,<text>],<text>]\n \n# PTR 记录 \n#ptr-record=<name>[,<target>]\n \n#naptr-record=<name>,<order>,<preference>,<flags>,<service>,<regexp>[,<replacement>]\n \n# CNAME 别名记录\n#cname=<cname>,<target>[,<TTL>]\n \n \n#dns-rr=<name>,<RR-number>,[<hex data>]\n#interface-name=<name>,<interface>[/4|/6]\n#synth-domain=<domain>,<address range>[,<prefix>]\n#add-mac[=base64|text]\n#add-cpe-id=<string>\n#add-subnet[[=[<IPv4 address>/]<IPv4 prefix length>][,[<IPv6 address>/]<IPv6 prefix length>]]\n##############################################################################\n \n##############################################################################\n# 缓存条数，默认为150条，cache-size=0 禁用缓存。\ncache-size=1000\n# 不缓存未知域名缓存，默认情况下dnsmasq缓存未知域名并直接返回为客户端。\n#no-negcache\n# 指定DNS同属查询转发数量\ndns-forward-max=1000\n \n# 启用连接跟踪，读取 Linux 入栈 DNS 查询请求的连接跟踪标记，\n# 并且将上游返回的响应信息设置同样的标记。\n# 用于带宽控制和防火墙部署。\n# 此选项必须在编译时启用 conntrack 支持，并且内核正确配置并加载 conntrack。\n# 此选项不能与 query-port 同时使用。\n#conntrack\n \n \n##############################################################################\n#\n#        DHCP 选项\n#\n##############################################################################\n# 设置 DHCP 地址池，同时启用 DHCP 功能。\n# IPv4 <mode> 可指定为 static|proxy ，当 <mode> 指定为 static 时，\n# 需用 dhcp-host 手动分配地址池中的 IP 地址。\n# 当 <mode> 指定为 proxy 时，为指定的地址池提供 DHCP 代理。\n#dhcp-range=[tag:<tag>[,tag:<tag>],][set:<tag>,]<start-addr>[,<end-addr>][,<mode>][,<netmask>[,<broadcast>]][,<lease time>]\n#dhcp-range=172.16.0.2,172.16.0.250,255.255.255.0,1h\n#dhcp-range=192.168.10.150,192.168.10.180,static,255.255.255.0,1h\n \n# 根据 MAC 地址或 id 固定分配客户端的 IP 地址、主机名、租期。\n# IPv4 下指定 id:* 将忽略 DHCP 客户端的 ID ，仅根据 MAC 来进行 IP 地址分配。\n# 在读取 /etc/hosts 的情况，也可以根据 /etc/hosts 中的主机名分配对应 IP 地址。\n# 指定 ignore 将忽略指定客户端得 DHCP 请求。\n#dhcp-host=[<hwaddr>][,id:<client_id>|*][,set:<tag>][,<ipaddr>][,<hostname>][,<lease_time>][,ignore]\n#dhcp-hostsfile=<path>\n#dhcp-hostsdir=<path>\n# 读取 /etc/ethers 文件 与使用 dhcp-host 的作用相同。IPv6 无效。\n#read-ethers\n \n# 指定给 DHCP 客户端的选项信息，\n# 默认情况下 dnsmasq 将发送：子网掩码、广播地址、DNS 服务器地址、网关地址、域等信息。\n# 指定此选项也可覆盖这些默认值并且设置其他选项值。\n# 重要：可以使用 option:<option-name>或者 option号 来指定。\n# <option-name> 和 option号的对应关系可使用命令：\n# dnsmasq --help dhcp 以及 dnsmasq --help dhcp6 查看，这点很重要。\n# 例如设置网关参数，既可以使用 dhcp-option=3,192.168.4.4 也可以使用 dhcp-option = option:router,192.168.4.4。\n# 0.0.0.0 意味着当前运行 dnsmasq 的主机地址。\n# 如果指定了多个 tag:<tag> 必须同时匹配才行。\n# [encap:<opt>,][vi-encap:<enterprise>,][vendor:[<vendor-class>],] 有待继续研究。\n#dhcp-option=[tag:<tag>,[tag:<tag>,]][encap:<opt>,][vi-encap:<enterprise>,][vendor:[<vendor-class>],][<opt>|option:<opt-name>|option6:<opt>|option6:<opt-name>],[<value>[,<value>]]\n#dhcp-option-force=[tag:<tag>,[tag:<tag>,]][encap:<opt>,][vi-encap:<enterprise>,][vendor:[<vendor-class>],]<opt>,[<value>[,<value>]]\n#dhcp-optsfile=<path>\n#dhcp-optsdir=<path>\n#dhcp-option=3,1.2.3.4\n#dhcp-option=option:router,1.2.3.4\n#dhcp-option=option:router,192.168.10.254\n#dhcp-option=option:dns-server,192.168.10.254,221.12.1.227,221.12.33.227\n \n##############################################################################\n# (IPv4 only) 禁用重用服务器名称和文件字段作为额外的 dhcp-option 选项。\n# 一般情况下 dnsmasq 从 dhcp-boot 移出启动服务器和文件信息到 dhcp-option 选项中。\n# 这使得在 dhcp-option 选项封包中有额外的选项空间可用，但是会使老的客户端混淆。\n# 此选项将强制使用简单并安全的方式来避免此类情况。可以认为是一个兼容性选项。\n#dhcp-no-override\n \n##############################################################################\n# 配置 DHCP 中继。\n# <local address> 是运行 dnsmasq 的接口的 IP 地址。\n# 所有在 <local address> 接口上接收到的 DHCP 请求将中继到 <server address> 指定的远程 DHCP 服务器。\n# 可以多次配置此选项，使用同一个 <local address> 转发到多个不同的 <server address> 指定的远程 DHCP 服务器。\n# <server address> 仅允许使用 IP 地址，不能使用域名等其他格式。\n# 如果是 DHCPv6，<server address> 可以是 ALL_SERVERS 的多播地址 ff05::1:3 。\n# 在这种情况下必须指定接口 <interface> ，不能使用通配符，用于直接多播到对应的 DHCP 服务器所在的接口。\n# <interface> 指定了仅允许接收从 <interface> 接口的 DHCP 服务器相应信息。\n#dhcp-relay=<local address>,<server address>[,<interface>]\n \n##############################################################################\n# 设置标签\n#dhcp-vendorclass=set:<tag>,[enterprise:<IANA-enterprise number>,]<vendor-class>\n#dhcp-userclass=set:<tag>,<user-class>\n#dhcp-mac=set:<tag>,<MAC address>\n#dhcp-circuitid=set:<tag>,<circuit-id>\n#dhcp-remoteid=set:<tag>,<remote-id>\n#dhcp-subscrid=set:<tag>,<subscriber-id>\n#dhcp-match=set:<tag>,<option number>|option:<option name>|vi-encap:<enterprise>[,<value>]\n#tag-if=set:<tag>[,set:<tag>[,tag:<tag>[,tag:<tag>]]]\n \n#dhcp-proxy[=<ip addr>]......\n \n##############################################################################\n# 不分配匹配这些 tag:<tag> 的 DHCP 请求。\n#dhcp-ignore=tag:<tag>[,tag:<tag>]\n#dhcp-ignore-names[=tag:<tag>[,tag:<tag>]]\n#dhcp-generate-names=tag:<tag>[,tag:<tag>]\n# IPv4 only 使用广播与匹配 tag:<tag> 的客户端通信。一般用于兼容老的 BOOT 客户端。\n#dhcp-broadcast[=tag:<tag>[,tag:<tag>]] \n \n##############################################################################\n# IPv4 only 设置 DHCP 服务器返回的 BOOTP 选项，\n# <servername> <server address> 可选，\n# 如果未设置服务器名称将设为空，服务器地址设为 dnsmasq 的 IP 地址。\n# 如果指定了多个 tag:<tag> 必须同时匹配才行。\n# 如果指定 <tftp_servername> 将按照 /etc/hosts 中对应的 IP 地址进行轮询负载均衡。  \n#dhcp-boot=[tag:<tag>,]<filename>,[<servername>[,<server address>|<tftp_servername>]]\n# 根据不同的类型使用不同的选项。\n# 使用示例：\n#        dhcp-match=set:EFI_x86-64,option:client-arch,9\n#        dhcp-boot=tag:EFI_x86-64,uefi/grubx64.efi\n#        #dhcp-match=set:EFI_Xscale,option:client-arch,8\n#        #dhcp-boot=tag:EFI_Xscale,uefi/grubx64.efi\n#        #dhcp-match=set:EFI_BC,option:client-arch,7\n#        #dhcp-boot=tag:EFI_BC,uefi/grubx64.efi\n#        #dhcp-match=set:EFI_IA32,option:client-arch,6\n#        #dhcp-boot=tag:EFI_IA32,uefi/grubx64.efi\n#        #dhcp-match=set:Intel_Lean_Client,option:client-arch,5\n#        #dhcp-boot=tag:Intel_Lean_Client,uefi/grubx64.efi\n#        #dhcp-match=set:Arc_x86,option:client-arch,4\n#        #dhcp-boot=tag:Arc_x86,uefi/grubx64.efi\n#        #dhcp-match=set:DEC_Alpha,option:client-arch,3\n#        #dhcp-boot=tag:DEC_Alpha,uefi/grubx64.efi\n#        #dhcp-match=set:EFI_Itanium,option:client-arch,2\n#        #dhcp-boot=tag:EFI_Itanium,uefi/grubx64.efi\n#        #dhcp-match=set:NEC/PC98,option:client-arch,1\n#        #dhcp-boot=tag:NEC/PC98,uefi/grubx64.efi\n#        dhcp-match=set:Intel_x86PC,option:client-arch,0\n#        dhcp-boot=tag:Intel_x86PC,pxelinux.0\n \n##############################################################################\n# DHCP 使用客户端的 MAC 地址的哈希值为客户端分配 IP 地址，\n# 通常情况下即使客户端使自己的租约到期，客户端的 IP 地址仍将长期保持稳定。\n# 在默认模式下，IP 地址是随机分配的。\n# 启用 dhcp-sequential-ip 选项将按顺序分配 IP 地址。\n# 在顺序分配模式下，客户端使租约到期更像是仅仅移动一下 IP 地址。\n# 在通常情况下不建议使用这种方式。\n#dhcp-sequential-ip\n \n##############################################################################\n# 多数情况下我们使用 PXE，只是简单的允许 PXE 客户端获取 IP 地址，\n# 然后 PXE 客户端下载 dhcp-boot 选项指定的文件并执行，也就是 BOOTP 的方式。\n# 然而在有适当配置的 DHCP 服务器支持的情况下，PXE 系统能够实现更复杂的功能。\n# pxe-service 选项可指定 PXE 环境的启动菜单。\n# 为不同的类型系统设定不同的启动菜单，并且覆盖 dhcp-boot 选项。\n# <CSA> 为客户端系统类型：x86PC, PC98, IA64_EFI, Alpha, Arc_x86, Intel_Lean_Client, \n# IA32_EFI, X86-64_EFI, Xscale_EFI, BC_EFI, ARM32_EFI 和 ARM64_EFI，其他类型可能为一个整数。\n# <basename> 引导 PXE 客户端使用 tftp 从 <server address> 或者 <server_name> 下载文件。\n#     注意：\"layer\" 后缀 (通常是 \".0\") 由 PXE 提供，也就是 PXE 客户端默认在文件名附加 .0 后缀。\n#     示例：pxe-service=x86PC, \"Install Linux\", pxelinux         （读取 pxelinux.0 文件并执行）\n#           pxe-service=x86PC, \"Install Linux\", pxelinux, 1.2.3.4（不适用于老的PXE）\n#     <bootservicetype> 整数，PXE 客户端将通过广播或者通过 <server address> \n#           或者 <server_name> 搜索对应类型的适合的启动服务。。\n#     示例：pxe-service=x86PC, \"Install windows from RIS server\", 1\n#           pxe-service=x86PC, \"Install windows from RIS server\", 1, 1.2.3.4\n#     未指定 <basename>、<bootservicetype> 或者 <bootservicetype> 为 “0”，将从本地启动。\n#     示例：pxe-service=x86PC, \"Boot from local disk\"\n#           pxe-service=x86PC, \"Boot from local disk\", 0\n# 如果指定 <server_name> 将按照 /etc/hosts 中对应的 IP 地址进行轮询负载均衡。  \n#pxe-service=[tag:<tag>,]<CSA>,<menu text>[,<basename>|<bootservicetype>][,<server address>|<server_name>]\n# 在 PXE 启动后弹出提示，<prompt> 为提示内容，<timeout> 为超时时间，为 0 则立即执行。\n# 如果未指定此选项，在有多个启动选项的情况下等待用户选择，不会超时。\n#pxe-prompt=[tag:<tag>,]<prompt>[,<timeout>]\n# 根据不同的类型使用不同的菜单，使用示例：\n#        #pxe-prompt=\"What system shall I netboot?\", 120\n#        # or with timeout before first available action is taken:\n#        pxe-prompt=\"Press F8 or Enter key for menu.\", 60\n#        pxe-service=x86PC, \"Now in x86PC (BIOS mode), boot from local\", 0\n#        pxe-service=x86PC, \"Now in x86PC (BIOS mode)\", pxelinux\n#        pxe-service=PC98, \"Now in PC98 mode\", PC98\n#        pxe-service=IA64_EFI, \"Now in IA64_EFI mode\", IA64_EFI\n#        pxe-service=Alpha, \"Now in Alpha mode\", Alpha\n#        pxe-service=Arc_x86, \"Now in Arc_x86 mode\", Arc_x86\n#        pxe-service=Intel_Lean_Client, \"Now in Intel_Lean_Client mode\", Intel_Lean_Client\n#        pxe-service=IA32_EFI, \"Now in IA32_EFI mode\", IA32_EFI\n#        pxe-service=X86-64_EFI, \"Now in X86-64_EFI (UEFI mode), boot from local\", 0\n#        pxe-service=X86-64_EFI, \"Now in X86-64_EFI (UEFI mode)\", grub/grub-x86_64.efi\n#        pxe-service=Xscale_EFI, \"Now in Xscale_EFI mode\", Xscale_EFI\n#        pxe-service=BC_EFI, \"Now in BC_EFI mode\", BC_EFI\n#        # CentOS7 系统不支持下列两个选项\n#        #pxe-service=ARM32_EFI,\"Now in ARM32_EFI mode\",ARM32_EFI\n#        #pxe-service=ARM64_EFI,\"Now in ARM64_EFI mode\",ARM64_EFI\n \n##############################################################################\n# 默认为150，即最多分配150个ip地址出去，最大1000个ip\n#dhcp-lease-max=150\n# (IPv4 only) 指定DHCP端口，默认为67和68。如果不指定则为1067和1068，单指定一个，第二个加1\n#dhcp-alternate-port[=<server port>[,<client port>]]\n# 谨慎使用此选项，避免 IP 地址浪费。(IPv4 only) 允许动态分配 IP 地址给 BOOTP 客户端。\n# 注意：BOOTP 客户端获取的 IP 地址是永久的，将无法再次分配给其他客户端。\n#bootp-dynamic[=<network-id>[,<network-id>]]\n# 谨慎使用此选项。\n# 默认情况下 DHCP 服务器使用 ping 的方式进行确保 IP 未被使用的情况下将 IP 地址分配出去。\n# 启用此选项将不使用 ping 进行确认。\n#no-ping\n \n##############################################################################\n# 记录额外的 dhcp 日志，记录所有发送给 DHCP 客户端的选项（option）以及标签（tag）信息\n#log-dhcp\n# 禁止记录日常操作日志，错误日志仍然记录。启用 log-dhcp 将覆盖下列选项。\n#quiet-dhcp\n#quiet-dhcp6\n#quiet-ra\n \n# 修改 DHCP 默认租约文件路径，默认情况下无需修改\n#dhcp-leasefile=/var/lib/dnsmasq/dnsmasq.leases\n# (IPv6 only)\n#dhcp-duid=<enterprise-id>,<uid>\n \n##############################################################################\n#dhcp-script=<path>\n#dhcp-luascript=<path>\n#dhcp-scriptuser=root\n#script-arp\n#leasefile-ro\n \n#bridge-interface=<interface>,<alias>[,<alias>]\n \n##############################################################################\n# 给 DHCP 服务器指定 domain 域名信息，也可以给对应的 IP 地址池指定域名。\n#     直接指定域名\n#     示例：domain=thekelleys.org.uk\n#     子网对应的域名\n#     示例：domain=wireless.thekelleys.org.uk,192.168.2.0/24\n#     ip范围对应的域名\n#     示例：domain=reserved.thekelleys.org.uk,192.68.3.100,192.168.3.200\n#domain=<domain>[,<address range>[,local]]\n# 在默认情况下 dnsmasq 插入普通的客户端主机名到 DNS 中。\n# 在这种情况下主机名必须唯一，即使两个客户端具有不同的域名后缀。\n# 如果第二个客户端使用了相同的主机名，DNS 查询将自动更新为第二个客户端的 IP 地址。\n# 如果设置了 dhcp-fqdn 选项，普通的主机名将不再插入到 DNS 中去，\n# 仅允许合格的具有域名后缀的主机名插入到 DNS 服务器中。\n# 指定此选项需同时指定不含 <address range> 地址范围的 domain 选项。\n#dhcp-fqdn\n# 通常情况下分配 DHCP 租约后，dnsmasq 设置 FQDN 选项告诉客户端不要尝试 DDNS 更新主机名与 IP 地址。\n# 这是因为  name-IP 已自动添加到 dnsmasq 的 DNS 视图中的。\n# 设置此选项将允许客户端 DDNS 更新，\n# 在 windows 下允许客户端更新 windows AD 服务器是非常有用的。\n# 参看  RFC 4702 。\n#dhcp-client-update\n \n#enable-ra\n#ra-param=<interface>,[high|low],[[<ra-interval>],<router lifetime>]\n \n \n##############################################################################\n#\n#        TFTP 选项\n#\n##############################################################################\n# 对于绝大多数的配置，仅需指定 enable-tftp 和 tftp-root 选项即可。\n# 是否启用内置的 tftp 服务器，可以指定多个逗号分隔的网络接口\n#enable-tftp[=<interface>[,<interface>]]\n#enable-tftp\n#enable-tftp=enp3s0,lo\n# 指定 tftp 的根目录，也就是寻找传输文件时使用的相对路径，可以附加接口，\n#tftp-root=<directory>[,<interface>]\n#tftp-root=/var/lib/tftpboot/\n# 如果取消注释，那么即使指定的 tftp-root 无法访问，仍然启动 tftp 服务。\n#tftp-no-fail\n# 附加客户端的 IP 地址作为文件路径。此选项仅在正确设置了 tftp-root 的情况下可用，\n# 示例：如果 tftp-root=/tftp，客户端为 192.168.1.15 请求 myfile.txt 文件时，\n# 将优先请求 /tftp/192.168.1.15/myfile.txt 文件， 其次是 /tftp/myfile.txt 文件。\n# 感觉没什么用。\n#tftp-unique-root\n# 启用安全模式，启用此选项，仅允许 tftp 进程访问属主为自己的文件。\n# 不启用此选项，允许访问所有 tftp 进程属主可读取的文件。\n# 如果 dnsmasq 是以 root 用户运行，tftp-secure 选项将允许访问全局可读的文件。\n# 一般情况下不推荐以 root 用户运行 dnsmasq。\n# 在指定了 tftp-root 的情况下并不是很重要。\n#tftp-secure\n# 将所有文件请求转换为小写。对于 Windows 客户端来说非常有用，建议开启此项。\n# 注意：dnsmasq 的 TFTP 服务器总是将文件路径中的“\\”转换为“/”。\n#tftp-lowercase\n# 允许最大的连接数，默认为 50 。\n# 如果将连接数设置的很大，需注意每个进程的最大文件描述符限制，详见文档手册。\n#tftp-max=<connections>\n#tftp-max=50\n# 设置传输时的 MTU 值，建议不设置或按需设置。\n# 如果设定的值大于网络接口的 MTU 值，将按照网络接口的 MTU 值自动分片传输（不推荐）。\n#tftp-mtu=<mtu size>\n# 停止 tftp 服务器与客户端协商 \"blocksize\" 选项。启用后，防止一些古怪的客户端出问题。\n#tftp-no-blocksize\n# 指定 tftp 的连接端口的范围，方便防火墙部署。\n# tftp 侦听在 69/udp ，连接端口默认是由系统自动分配的，\n# 非 root 用户运行时指定的连接端口号需大于 1025 最大 65535。\n#tftp-port-range=<start>,<end>\n###############################################################################\n#conf-dir=<directory>[,<file-extension>......]\n#conf-file=/etc/dnsmasq.more.conf\nconf-dir=/etc/dnsmasq.d\n#servers-file=<file>\n```\n","source":"_posts/dnsmasq.conf 配置.md","raw":"---\ntitle: dnsmasq.conf 配置\ntags:\n  - 运维\ncategories:\n  - 后端开发\ntoc: false\ndate: 2018-01-10 18:17:10\n---\n\n这个文档里说的比较详细：\n<!-- more -->\n```\n##############################################################################\n#\n#        DNS 选项\n#\n##############################################################################\n# 不加载本地的 /etc/hosts 文件\n#no-hosts\n# 添加读取额外的 hosts 文件路径，可以多次指定。如果指定为目录，则读取目录中的所有文件。\n#addn-hosts=/etc/hosts\n# 读取目录中的所有文件，文件更新将自动读取\n#hostsdir=<path>\n# 例如，/etc/hosts中的os01将扩展成os01.example.com\n#expand-hosts\n \n##############################################################################\n# 缓存时间设置，一般不需要设置\n# 本地 hosts 文件的缓存时间，通常不要求缓存本地，这样更改hosts文件后就即时生效。\n#local-ttl=3600\n# 同 local-ttl 仅影响 DHCP 租约\n#dhcp-ttl=<time>\n# 对于上游返回的值没有ttl时，dnsmasq给一个默认的ttl，一般不需要设置，\n#neg-ttl=<time>\n# 指定返回给客户端的ttl时间，一般不需要设置\n#max-ttl=<time>\n# 设置在缓存中的条目的最大 TTL。\n#max-cache-ttl=<time>\n# 不需要设置，除非你知道你在做什么。\n#min-cache-ttl=<time>\n# 一般不需要设置\n#auth-ttl=<time>\n \n##############################################################################\n# 记录dns查询日志\n#log-queries\n# 设置日志记录器，‘-‘ 为 stderr，也可以是文件路径。默认为：DAEMON，调试时使用 LOCAL0。\n#log-facility=<facility>\n#log-facility=/var/log/dnsmasq/dnsmasq.log\n# 异步log，缓解阻塞，提高性能。默认为5，最大100。\n#log-async[=<lines>]\n#log-async=50\n \n##############################################################################\n# 指定用户和组\n#user=nobody\n#group=nobody\n \n##############################################################################\n# 指定DNS的端口，默认53，设置 port=0 将完全禁用 DNS 功能，仅使用 DHCP/TFTP\n#port=53\n# 指定 EDNS.0 UDP 包的最大尺寸，默认为 RFC5625 推荐的 edns-packet-max=4096\n#edns-packet-max=<size>\n# 指定向上游查询的 UDP 端口，默认是随机端口，指定后降低安全性、加快速度、减少资源消耗。\n# 设置为 0 有操作系统分配。\nquery-port=53535\n# 指定向上游查询的 UDP 端口范围，方便防火墙设置。\n#min-port=<port>\n#max-port=<port>\n# 指定接口，指定后同时附加 lo 接口，可以使用‘*‘通配符\n#interface=wlp2s0\n# 指定排除的接口，排除高优先级，可以使用‘*‘通配符\n#except-interface=\n# 启用 DNS 验证模式\n#auth-server=<domain>,<interface>|<ip-address>\n# 仅接收同一子网的 DNS 请求，仅在未指定 interface、except-interface、listen-address \n# 或者 auth-server 时有效。\n#local-service\n# 指定不提供 DHCP 或 TFTP 服务的接口，仅提供 DNS 服务\n#no-dhcp-interface=enp3s0\n# 指定IP地址，可以多次指定。下面两行跟指定接口的作用类似。\n#listen-address=192.168.10.254\n#listen-address=127.0.0.1\n# 绑定接口，开启此项将仅监听指定的接口。\n#bind-interfaces\n# 对于新添加的接口也进行绑定。\n#bind-dynamic\n \n##############################################################################\n# 如果 hosts 中的主机有多个 IP 地址，仅返回对应子网的 IP 地址。\n#localise-queries\n# 如果反向查找的是私有地址例如192.168.X.X，仅从 hosts 文件查找，不再转发到上游服务器\n#bogus-priv\n# 对于任何被解析到此IP的域名，使其解析失效，可以多次指定\n#bogus-nxdomain=64.94.110.11\n# 忽略指定的 DNS 响应服务器地址，例如 1.1.1.1 为伪造的 dns 服务器并且响应速度非常快，\n# 指定 ignore-address=1.1.1.1 可以忽略它的响应信息，从而等待正确的响应结果。\n#ignore-address=<ipaddr>\n#filterwin2k\n \n##############################################################################\n# 指定 resolv-file 文件路径，默认/etc/resolv.conf\n#resolv-file=/etc/resolv.conf\n# 不读取 resolv-file 来确定上游服务器\n#no-resolv\n# 在编译时需要启用 DBus 支持。\n#enable-dbus[=<service-name>]\n# 严格按照resolv.conf中的顺序进行查找\n#strict-order\n# 向所有上有服务器发送查询，而不是一个。\n#all-servers\n#dns-loop-detect\n \n##############################################################################\n# 这项安全设置是拒绝解析包含私有 IP 地址的域名，\n# 这些IP地址包括如下私有地址范围：10.0.0.0/8、172.16.0.0/12、192.168.0.0/16。\n# 其初衷是要防止类似上游DNS服务器故意将某些域名解析成特定私有内网IP而劫持用户这样的安全攻击。\n# 直接在配置文件中注销 stop-dns-rebind 配置项从而禁用该功能。\n# 这个方法确实可以一劳永逸的解决解析内网 IP 地址的问题，但是我们也失去了这项安全保护的特性，\n# 所以在这里我不推荐这个办法。\n# 使用 rebind-domain-ok 进行特定配置，顾名思义该配置项可以有选择的忽略域名的 rebind 行为\n#stop-dns-rebind\n#rebind-localhost-ok\n#rebind-domain-ok=[<domain>]|[[/<domain>/[<domain>/]\n#rebind-domain-ok=/.dinghuangjie.com/.dhj.com/.harlinsu.com/.example.com/.test.com/.esderive.com/\n \n##############################################################################\n# 也不要检测 /etc/resolv.conf 的变化\n#no-poll\n# 重启后清空缓存\n#clear-on-reload\n# 完整的域名才向上游服务器查找，如果仅仅是主机名仅查找hosts文件\n#domain-needed\n \n##############################################################################\n# IP地址转换\n#alias=[<old-ip>]|[<start-ip>-<end-ip>],<new-ip>[,<mask>]\n##############################################################################\n#local=[/[<domain>]/[domain/]][<ipaddr>[#<port>][@<source-ip>|<interface>[#<port>]]\n#server=[/[<domain>]/[domain/]][<ipaddr>[#<port>][@<source-ip>|<interface>[#<port>]]\n#server=/example.com/192.168.10.252\n#rev-server=<ip-address>/<prefix-len>,<ipaddr>[#<port>][@<source-ip>|<interface>[#<port>]]\n \n# 将任何属于 <domain> 域名解析成指定的 <ipaddr> 地址。\n# 也就是将 <domain> 及其所有子域名解析成指定的 <ipaddr> IPv4 或者 IPv6 地址，\n# 通常用于屏蔽特定的域名。\n# 一次只能指定一个 IPv4 或者 IPv6 地址，\n# 要同时返回 IPv4 和IPv6 地址，请多次指定 address= 选项。\n# 注意： /etc/hosts 以及 DHCP 租约将覆盖此项设置。\n#address=/<domain>/[domain/][<ipaddr>]\n \n#ipset=/<domain>/[domain/]<ipset>[,<ipset>]\n#mx-host=<mx name>[[,<hostname>],<preference>]\n#mx-target=<hostname>\n \n# SRV 记录\n#srv-host=<_service>.<_prot>.[<domain>],[<target>[,<port>[,<priority>[,<weight>]]]]\n \n# A, AAAA 和 PTR 记录 \n#host-record=<name>[,<name>....],[<IPv4-address>],[<IPv6-address>][,<TTL>]\n \n# TXT 记录\n#txt-record=<name>[[,<text>],<text>]\n \n# PTR 记录 \n#ptr-record=<name>[,<target>]\n \n#naptr-record=<name>,<order>,<preference>,<flags>,<service>,<regexp>[,<replacement>]\n \n# CNAME 别名记录\n#cname=<cname>,<target>[,<TTL>]\n \n \n#dns-rr=<name>,<RR-number>,[<hex data>]\n#interface-name=<name>,<interface>[/4|/6]\n#synth-domain=<domain>,<address range>[,<prefix>]\n#add-mac[=base64|text]\n#add-cpe-id=<string>\n#add-subnet[[=[<IPv4 address>/]<IPv4 prefix length>][,[<IPv6 address>/]<IPv6 prefix length>]]\n##############################################################################\n \n##############################################################################\n# 缓存条数，默认为150条，cache-size=0 禁用缓存。\ncache-size=1000\n# 不缓存未知域名缓存，默认情况下dnsmasq缓存未知域名并直接返回为客户端。\n#no-negcache\n# 指定DNS同属查询转发数量\ndns-forward-max=1000\n \n# 启用连接跟踪，读取 Linux 入栈 DNS 查询请求的连接跟踪标记，\n# 并且将上游返回的响应信息设置同样的标记。\n# 用于带宽控制和防火墙部署。\n# 此选项必须在编译时启用 conntrack 支持，并且内核正确配置并加载 conntrack。\n# 此选项不能与 query-port 同时使用。\n#conntrack\n \n \n##############################################################################\n#\n#        DHCP 选项\n#\n##############################################################################\n# 设置 DHCP 地址池，同时启用 DHCP 功能。\n# IPv4 <mode> 可指定为 static|proxy ，当 <mode> 指定为 static 时，\n# 需用 dhcp-host 手动分配地址池中的 IP 地址。\n# 当 <mode> 指定为 proxy 时，为指定的地址池提供 DHCP 代理。\n#dhcp-range=[tag:<tag>[,tag:<tag>],][set:<tag>,]<start-addr>[,<end-addr>][,<mode>][,<netmask>[,<broadcast>]][,<lease time>]\n#dhcp-range=172.16.0.2,172.16.0.250,255.255.255.0,1h\n#dhcp-range=192.168.10.150,192.168.10.180,static,255.255.255.0,1h\n \n# 根据 MAC 地址或 id 固定分配客户端的 IP 地址、主机名、租期。\n# IPv4 下指定 id:* 将忽略 DHCP 客户端的 ID ，仅根据 MAC 来进行 IP 地址分配。\n# 在读取 /etc/hosts 的情况，也可以根据 /etc/hosts 中的主机名分配对应 IP 地址。\n# 指定 ignore 将忽略指定客户端得 DHCP 请求。\n#dhcp-host=[<hwaddr>][,id:<client_id>|*][,set:<tag>][,<ipaddr>][,<hostname>][,<lease_time>][,ignore]\n#dhcp-hostsfile=<path>\n#dhcp-hostsdir=<path>\n# 读取 /etc/ethers 文件 与使用 dhcp-host 的作用相同。IPv6 无效。\n#read-ethers\n \n# 指定给 DHCP 客户端的选项信息，\n# 默认情况下 dnsmasq 将发送：子网掩码、广播地址、DNS 服务器地址、网关地址、域等信息。\n# 指定此选项也可覆盖这些默认值并且设置其他选项值。\n# 重要：可以使用 option:<option-name>或者 option号 来指定。\n# <option-name> 和 option号的对应关系可使用命令：\n# dnsmasq --help dhcp 以及 dnsmasq --help dhcp6 查看，这点很重要。\n# 例如设置网关参数，既可以使用 dhcp-option=3,192.168.4.4 也可以使用 dhcp-option = option:router,192.168.4.4。\n# 0.0.0.0 意味着当前运行 dnsmasq 的主机地址。\n# 如果指定了多个 tag:<tag> 必须同时匹配才行。\n# [encap:<opt>,][vi-encap:<enterprise>,][vendor:[<vendor-class>],] 有待继续研究。\n#dhcp-option=[tag:<tag>,[tag:<tag>,]][encap:<opt>,][vi-encap:<enterprise>,][vendor:[<vendor-class>],][<opt>|option:<opt-name>|option6:<opt>|option6:<opt-name>],[<value>[,<value>]]\n#dhcp-option-force=[tag:<tag>,[tag:<tag>,]][encap:<opt>,][vi-encap:<enterprise>,][vendor:[<vendor-class>],]<opt>,[<value>[,<value>]]\n#dhcp-optsfile=<path>\n#dhcp-optsdir=<path>\n#dhcp-option=3,1.2.3.4\n#dhcp-option=option:router,1.2.3.4\n#dhcp-option=option:router,192.168.10.254\n#dhcp-option=option:dns-server,192.168.10.254,221.12.1.227,221.12.33.227\n \n##############################################################################\n# (IPv4 only) 禁用重用服务器名称和文件字段作为额外的 dhcp-option 选项。\n# 一般情况下 dnsmasq 从 dhcp-boot 移出启动服务器和文件信息到 dhcp-option 选项中。\n# 这使得在 dhcp-option 选项封包中有额外的选项空间可用，但是会使老的客户端混淆。\n# 此选项将强制使用简单并安全的方式来避免此类情况。可以认为是一个兼容性选项。\n#dhcp-no-override\n \n##############################################################################\n# 配置 DHCP 中继。\n# <local address> 是运行 dnsmasq 的接口的 IP 地址。\n# 所有在 <local address> 接口上接收到的 DHCP 请求将中继到 <server address> 指定的远程 DHCP 服务器。\n# 可以多次配置此选项，使用同一个 <local address> 转发到多个不同的 <server address> 指定的远程 DHCP 服务器。\n# <server address> 仅允许使用 IP 地址，不能使用域名等其他格式。\n# 如果是 DHCPv6，<server address> 可以是 ALL_SERVERS 的多播地址 ff05::1:3 。\n# 在这种情况下必须指定接口 <interface> ，不能使用通配符，用于直接多播到对应的 DHCP 服务器所在的接口。\n# <interface> 指定了仅允许接收从 <interface> 接口的 DHCP 服务器相应信息。\n#dhcp-relay=<local address>,<server address>[,<interface>]\n \n##############################################################################\n# 设置标签\n#dhcp-vendorclass=set:<tag>,[enterprise:<IANA-enterprise number>,]<vendor-class>\n#dhcp-userclass=set:<tag>,<user-class>\n#dhcp-mac=set:<tag>,<MAC address>\n#dhcp-circuitid=set:<tag>,<circuit-id>\n#dhcp-remoteid=set:<tag>,<remote-id>\n#dhcp-subscrid=set:<tag>,<subscriber-id>\n#dhcp-match=set:<tag>,<option number>|option:<option name>|vi-encap:<enterprise>[,<value>]\n#tag-if=set:<tag>[,set:<tag>[,tag:<tag>[,tag:<tag>]]]\n \n#dhcp-proxy[=<ip addr>]......\n \n##############################################################################\n# 不分配匹配这些 tag:<tag> 的 DHCP 请求。\n#dhcp-ignore=tag:<tag>[,tag:<tag>]\n#dhcp-ignore-names[=tag:<tag>[,tag:<tag>]]\n#dhcp-generate-names=tag:<tag>[,tag:<tag>]\n# IPv4 only 使用广播与匹配 tag:<tag> 的客户端通信。一般用于兼容老的 BOOT 客户端。\n#dhcp-broadcast[=tag:<tag>[,tag:<tag>]] \n \n##############################################################################\n# IPv4 only 设置 DHCP 服务器返回的 BOOTP 选项，\n# <servername> <server address> 可选，\n# 如果未设置服务器名称将设为空，服务器地址设为 dnsmasq 的 IP 地址。\n# 如果指定了多个 tag:<tag> 必须同时匹配才行。\n# 如果指定 <tftp_servername> 将按照 /etc/hosts 中对应的 IP 地址进行轮询负载均衡。  \n#dhcp-boot=[tag:<tag>,]<filename>,[<servername>[,<server address>|<tftp_servername>]]\n# 根据不同的类型使用不同的选项。\n# 使用示例：\n#        dhcp-match=set:EFI_x86-64,option:client-arch,9\n#        dhcp-boot=tag:EFI_x86-64,uefi/grubx64.efi\n#        #dhcp-match=set:EFI_Xscale,option:client-arch,8\n#        #dhcp-boot=tag:EFI_Xscale,uefi/grubx64.efi\n#        #dhcp-match=set:EFI_BC,option:client-arch,7\n#        #dhcp-boot=tag:EFI_BC,uefi/grubx64.efi\n#        #dhcp-match=set:EFI_IA32,option:client-arch,6\n#        #dhcp-boot=tag:EFI_IA32,uefi/grubx64.efi\n#        #dhcp-match=set:Intel_Lean_Client,option:client-arch,5\n#        #dhcp-boot=tag:Intel_Lean_Client,uefi/grubx64.efi\n#        #dhcp-match=set:Arc_x86,option:client-arch,4\n#        #dhcp-boot=tag:Arc_x86,uefi/grubx64.efi\n#        #dhcp-match=set:DEC_Alpha,option:client-arch,3\n#        #dhcp-boot=tag:DEC_Alpha,uefi/grubx64.efi\n#        #dhcp-match=set:EFI_Itanium,option:client-arch,2\n#        #dhcp-boot=tag:EFI_Itanium,uefi/grubx64.efi\n#        #dhcp-match=set:NEC/PC98,option:client-arch,1\n#        #dhcp-boot=tag:NEC/PC98,uefi/grubx64.efi\n#        dhcp-match=set:Intel_x86PC,option:client-arch,0\n#        dhcp-boot=tag:Intel_x86PC,pxelinux.0\n \n##############################################################################\n# DHCP 使用客户端的 MAC 地址的哈希值为客户端分配 IP 地址，\n# 通常情况下即使客户端使自己的租约到期，客户端的 IP 地址仍将长期保持稳定。\n# 在默认模式下，IP 地址是随机分配的。\n# 启用 dhcp-sequential-ip 选项将按顺序分配 IP 地址。\n# 在顺序分配模式下，客户端使租约到期更像是仅仅移动一下 IP 地址。\n# 在通常情况下不建议使用这种方式。\n#dhcp-sequential-ip\n \n##############################################################################\n# 多数情况下我们使用 PXE，只是简单的允许 PXE 客户端获取 IP 地址，\n# 然后 PXE 客户端下载 dhcp-boot 选项指定的文件并执行，也就是 BOOTP 的方式。\n# 然而在有适当配置的 DHCP 服务器支持的情况下，PXE 系统能够实现更复杂的功能。\n# pxe-service 选项可指定 PXE 环境的启动菜单。\n# 为不同的类型系统设定不同的启动菜单，并且覆盖 dhcp-boot 选项。\n# <CSA> 为客户端系统类型：x86PC, PC98, IA64_EFI, Alpha, Arc_x86, Intel_Lean_Client, \n# IA32_EFI, X86-64_EFI, Xscale_EFI, BC_EFI, ARM32_EFI 和 ARM64_EFI，其他类型可能为一个整数。\n# <basename> 引导 PXE 客户端使用 tftp 从 <server address> 或者 <server_name> 下载文件。\n#     注意：\"layer\" 后缀 (通常是 \".0\") 由 PXE 提供，也就是 PXE 客户端默认在文件名附加 .0 后缀。\n#     示例：pxe-service=x86PC, \"Install Linux\", pxelinux         （读取 pxelinux.0 文件并执行）\n#           pxe-service=x86PC, \"Install Linux\", pxelinux, 1.2.3.4（不适用于老的PXE）\n#     <bootservicetype> 整数，PXE 客户端将通过广播或者通过 <server address> \n#           或者 <server_name> 搜索对应类型的适合的启动服务。。\n#     示例：pxe-service=x86PC, \"Install windows from RIS server\", 1\n#           pxe-service=x86PC, \"Install windows from RIS server\", 1, 1.2.3.4\n#     未指定 <basename>、<bootservicetype> 或者 <bootservicetype> 为 “0”，将从本地启动。\n#     示例：pxe-service=x86PC, \"Boot from local disk\"\n#           pxe-service=x86PC, \"Boot from local disk\", 0\n# 如果指定 <server_name> 将按照 /etc/hosts 中对应的 IP 地址进行轮询负载均衡。  \n#pxe-service=[tag:<tag>,]<CSA>,<menu text>[,<basename>|<bootservicetype>][,<server address>|<server_name>]\n# 在 PXE 启动后弹出提示，<prompt> 为提示内容，<timeout> 为超时时间，为 0 则立即执行。\n# 如果未指定此选项，在有多个启动选项的情况下等待用户选择，不会超时。\n#pxe-prompt=[tag:<tag>,]<prompt>[,<timeout>]\n# 根据不同的类型使用不同的菜单，使用示例：\n#        #pxe-prompt=\"What system shall I netboot?\", 120\n#        # or with timeout before first available action is taken:\n#        pxe-prompt=\"Press F8 or Enter key for menu.\", 60\n#        pxe-service=x86PC, \"Now in x86PC (BIOS mode), boot from local\", 0\n#        pxe-service=x86PC, \"Now in x86PC (BIOS mode)\", pxelinux\n#        pxe-service=PC98, \"Now in PC98 mode\", PC98\n#        pxe-service=IA64_EFI, \"Now in IA64_EFI mode\", IA64_EFI\n#        pxe-service=Alpha, \"Now in Alpha mode\", Alpha\n#        pxe-service=Arc_x86, \"Now in Arc_x86 mode\", Arc_x86\n#        pxe-service=Intel_Lean_Client, \"Now in Intel_Lean_Client mode\", Intel_Lean_Client\n#        pxe-service=IA32_EFI, \"Now in IA32_EFI mode\", IA32_EFI\n#        pxe-service=X86-64_EFI, \"Now in X86-64_EFI (UEFI mode), boot from local\", 0\n#        pxe-service=X86-64_EFI, \"Now in X86-64_EFI (UEFI mode)\", grub/grub-x86_64.efi\n#        pxe-service=Xscale_EFI, \"Now in Xscale_EFI mode\", Xscale_EFI\n#        pxe-service=BC_EFI, \"Now in BC_EFI mode\", BC_EFI\n#        # CentOS7 系统不支持下列两个选项\n#        #pxe-service=ARM32_EFI,\"Now in ARM32_EFI mode\",ARM32_EFI\n#        #pxe-service=ARM64_EFI,\"Now in ARM64_EFI mode\",ARM64_EFI\n \n##############################################################################\n# 默认为150，即最多分配150个ip地址出去，最大1000个ip\n#dhcp-lease-max=150\n# (IPv4 only) 指定DHCP端口，默认为67和68。如果不指定则为1067和1068，单指定一个，第二个加1\n#dhcp-alternate-port[=<server port>[,<client port>]]\n# 谨慎使用此选项，避免 IP 地址浪费。(IPv4 only) 允许动态分配 IP 地址给 BOOTP 客户端。\n# 注意：BOOTP 客户端获取的 IP 地址是永久的，将无法再次分配给其他客户端。\n#bootp-dynamic[=<network-id>[,<network-id>]]\n# 谨慎使用此选项。\n# 默认情况下 DHCP 服务器使用 ping 的方式进行确保 IP 未被使用的情况下将 IP 地址分配出去。\n# 启用此选项将不使用 ping 进行确认。\n#no-ping\n \n##############################################################################\n# 记录额外的 dhcp 日志，记录所有发送给 DHCP 客户端的选项（option）以及标签（tag）信息\n#log-dhcp\n# 禁止记录日常操作日志，错误日志仍然记录。启用 log-dhcp 将覆盖下列选项。\n#quiet-dhcp\n#quiet-dhcp6\n#quiet-ra\n \n# 修改 DHCP 默认租约文件路径，默认情况下无需修改\n#dhcp-leasefile=/var/lib/dnsmasq/dnsmasq.leases\n# (IPv6 only)\n#dhcp-duid=<enterprise-id>,<uid>\n \n##############################################################################\n#dhcp-script=<path>\n#dhcp-luascript=<path>\n#dhcp-scriptuser=root\n#script-arp\n#leasefile-ro\n \n#bridge-interface=<interface>,<alias>[,<alias>]\n \n##############################################################################\n# 给 DHCP 服务器指定 domain 域名信息，也可以给对应的 IP 地址池指定域名。\n#     直接指定域名\n#     示例：domain=thekelleys.org.uk\n#     子网对应的域名\n#     示例：domain=wireless.thekelleys.org.uk,192.168.2.0/24\n#     ip范围对应的域名\n#     示例：domain=reserved.thekelleys.org.uk,192.68.3.100,192.168.3.200\n#domain=<domain>[,<address range>[,local]]\n# 在默认情况下 dnsmasq 插入普通的客户端主机名到 DNS 中。\n# 在这种情况下主机名必须唯一，即使两个客户端具有不同的域名后缀。\n# 如果第二个客户端使用了相同的主机名，DNS 查询将自动更新为第二个客户端的 IP 地址。\n# 如果设置了 dhcp-fqdn 选项，普通的主机名将不再插入到 DNS 中去，\n# 仅允许合格的具有域名后缀的主机名插入到 DNS 服务器中。\n# 指定此选项需同时指定不含 <address range> 地址范围的 domain 选项。\n#dhcp-fqdn\n# 通常情况下分配 DHCP 租约后，dnsmasq 设置 FQDN 选项告诉客户端不要尝试 DDNS 更新主机名与 IP 地址。\n# 这是因为  name-IP 已自动添加到 dnsmasq 的 DNS 视图中的。\n# 设置此选项将允许客户端 DDNS 更新，\n# 在 windows 下允许客户端更新 windows AD 服务器是非常有用的。\n# 参看  RFC 4702 。\n#dhcp-client-update\n \n#enable-ra\n#ra-param=<interface>,[high|low],[[<ra-interval>],<router lifetime>]\n \n \n##############################################################################\n#\n#        TFTP 选项\n#\n##############################################################################\n# 对于绝大多数的配置，仅需指定 enable-tftp 和 tftp-root 选项即可。\n# 是否启用内置的 tftp 服务器，可以指定多个逗号分隔的网络接口\n#enable-tftp[=<interface>[,<interface>]]\n#enable-tftp\n#enable-tftp=enp3s0,lo\n# 指定 tftp 的根目录，也就是寻找传输文件时使用的相对路径，可以附加接口，\n#tftp-root=<directory>[,<interface>]\n#tftp-root=/var/lib/tftpboot/\n# 如果取消注释，那么即使指定的 tftp-root 无法访问，仍然启动 tftp 服务。\n#tftp-no-fail\n# 附加客户端的 IP 地址作为文件路径。此选项仅在正确设置了 tftp-root 的情况下可用，\n# 示例：如果 tftp-root=/tftp，客户端为 192.168.1.15 请求 myfile.txt 文件时，\n# 将优先请求 /tftp/192.168.1.15/myfile.txt 文件， 其次是 /tftp/myfile.txt 文件。\n# 感觉没什么用。\n#tftp-unique-root\n# 启用安全模式，启用此选项，仅允许 tftp 进程访问属主为自己的文件。\n# 不启用此选项，允许访问所有 tftp 进程属主可读取的文件。\n# 如果 dnsmasq 是以 root 用户运行，tftp-secure 选项将允许访问全局可读的文件。\n# 一般情况下不推荐以 root 用户运行 dnsmasq。\n# 在指定了 tftp-root 的情况下并不是很重要。\n#tftp-secure\n# 将所有文件请求转换为小写。对于 Windows 客户端来说非常有用，建议开启此项。\n# 注意：dnsmasq 的 TFTP 服务器总是将文件路径中的“\\”转换为“/”。\n#tftp-lowercase\n# 允许最大的连接数，默认为 50 。\n# 如果将连接数设置的很大，需注意每个进程的最大文件描述符限制，详见文档手册。\n#tftp-max=<connections>\n#tftp-max=50\n# 设置传输时的 MTU 值，建议不设置或按需设置。\n# 如果设定的值大于网络接口的 MTU 值，将按照网络接口的 MTU 值自动分片传输（不推荐）。\n#tftp-mtu=<mtu size>\n# 停止 tftp 服务器与客户端协商 \"blocksize\" 选项。启用后，防止一些古怪的客户端出问题。\n#tftp-no-blocksize\n# 指定 tftp 的连接端口的范围，方便防火墙部署。\n# tftp 侦听在 69/udp ，连接端口默认是由系统自动分配的，\n# 非 root 用户运行时指定的连接端口号需大于 1025 最大 65535。\n#tftp-port-range=<start>,<end>\n###############################################################################\n#conf-dir=<directory>[,<file-extension>......]\n#conf-file=/etc/dnsmasq.more.conf\nconf-dir=/etc/dnsmasq.d\n#servers-file=<file>\n```\n","slug":"dnsmasq.conf 配置","published":1,"updated":"2019-11-07T01:59:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznya003jh5s6zzupw8x0","content":"<p>这个文档里说的比较详细：<br><a id=\"more\"></a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">##############################################################################</span><br><span class=\"line\">#</span><br><span class=\"line\">#        DNS 选项</span><br><span class=\"line\">#</span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># 不加载本地的 /etc/hosts 文件</span><br><span class=\"line\">#no-hosts</span><br><span class=\"line\"># 添加读取额外的 hosts 文件路径，可以多次指定。如果指定为目录，则读取目录中的所有文件。</span><br><span class=\"line\">#addn-hosts=/etc/hosts</span><br><span class=\"line\"># 读取目录中的所有文件，文件更新将自动读取</span><br><span class=\"line\">#hostsdir=&lt;path&gt;</span><br><span class=\"line\"># 例如，/etc/hosts中的os01将扩展成os01.example.com</span><br><span class=\"line\">#expand-hosts</span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># 缓存时间设置，一般不需要设置</span><br><span class=\"line\"># 本地 hosts 文件的缓存时间，通常不要求缓存本地，这样更改hosts文件后就即时生效。</span><br><span class=\"line\">#local-ttl=3600</span><br><span class=\"line\"># 同 local-ttl 仅影响 DHCP 租约</span><br><span class=\"line\">#dhcp-ttl=&lt;time&gt;</span><br><span class=\"line\"># 对于上游返回的值没有ttl时，dnsmasq给一个默认的ttl，一般不需要设置，</span><br><span class=\"line\">#neg-ttl=&lt;time&gt;</span><br><span class=\"line\"># 指定返回给客户端的ttl时间，一般不需要设置</span><br><span class=\"line\">#max-ttl=&lt;time&gt;</span><br><span class=\"line\"># 设置在缓存中的条目的最大 TTL。</span><br><span class=\"line\">#max-cache-ttl=&lt;time&gt;</span><br><span class=\"line\"># 不需要设置，除非你知道你在做什么。</span><br><span class=\"line\">#min-cache-ttl=&lt;time&gt;</span><br><span class=\"line\"># 一般不需要设置</span><br><span class=\"line\">#auth-ttl=&lt;time&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># 记录dns查询日志</span><br><span class=\"line\">#log-queries</span><br><span class=\"line\"># 设置日志记录器，‘-‘ 为 stderr，也可以是文件路径。默认为：DAEMON，调试时使用 LOCAL0。</span><br><span class=\"line\">#log-facility=&lt;facility&gt;</span><br><span class=\"line\">#log-facility=/var/log/dnsmasq/dnsmasq.log</span><br><span class=\"line\"># 异步log，缓解阻塞，提高性能。默认为5，最大100。</span><br><span class=\"line\">#log-async[=&lt;lines&gt;]</span><br><span class=\"line\">#log-async=50</span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># 指定用户和组</span><br><span class=\"line\">#user=nobody</span><br><span class=\"line\">#group=nobody</span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># 指定DNS的端口，默认53，设置 port=0 将完全禁用 DNS 功能，仅使用 DHCP/TFTP</span><br><span class=\"line\">#port=53</span><br><span class=\"line\"># 指定 EDNS.0 UDP 包的最大尺寸，默认为 RFC5625 推荐的 edns-packet-max=4096</span><br><span class=\"line\">#edns-packet-max=&lt;size&gt;</span><br><span class=\"line\"># 指定向上游查询的 UDP 端口，默认是随机端口，指定后降低安全性、加快速度、减少资源消耗。</span><br><span class=\"line\"># 设置为 0 有操作系统分配。</span><br><span class=\"line\">query-port=53535</span><br><span class=\"line\"># 指定向上游查询的 UDP 端口范围，方便防火墙设置。</span><br><span class=\"line\">#min-port=&lt;port&gt;</span><br><span class=\"line\">#max-port=&lt;port&gt;</span><br><span class=\"line\"># 指定接口，指定后同时附加 lo 接口，可以使用‘*‘通配符</span><br><span class=\"line\">#interface=wlp2s0</span><br><span class=\"line\"># 指定排除的接口，排除高优先级，可以使用‘*‘通配符</span><br><span class=\"line\">#except-interface=</span><br><span class=\"line\"># 启用 DNS 验证模式</span><br><span class=\"line\">#auth-server=&lt;domain&gt;,&lt;interface&gt;|&lt;ip-address&gt;</span><br><span class=\"line\"># 仅接收同一子网的 DNS 请求，仅在未指定 interface、except-interface、listen-address </span><br><span class=\"line\"># 或者 auth-server 时有效。</span><br><span class=\"line\">#local-service</span><br><span class=\"line\"># 指定不提供 DHCP 或 TFTP 服务的接口，仅提供 DNS 服务</span><br><span class=\"line\">#no-dhcp-interface=enp3s0</span><br><span class=\"line\"># 指定IP地址，可以多次指定。下面两行跟指定接口的作用类似。</span><br><span class=\"line\">#listen-address=192.168.10.254</span><br><span class=\"line\">#listen-address=127.0.0.1</span><br><span class=\"line\"># 绑定接口，开启此项将仅监听指定的接口。</span><br><span class=\"line\">#bind-interfaces</span><br><span class=\"line\"># 对于新添加的接口也进行绑定。</span><br><span class=\"line\">#bind-dynamic</span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># 如果 hosts 中的主机有多个 IP 地址，仅返回对应子网的 IP 地址。</span><br><span class=\"line\">#localise-queries</span><br><span class=\"line\"># 如果反向查找的是私有地址例如192.168.X.X，仅从 hosts 文件查找，不再转发到上游服务器</span><br><span class=\"line\">#bogus-priv</span><br><span class=\"line\"># 对于任何被解析到此IP的域名，使其解析失效，可以多次指定</span><br><span class=\"line\">#bogus-nxdomain=64.94.110.11</span><br><span class=\"line\"># 忽略指定的 DNS 响应服务器地址，例如 1.1.1.1 为伪造的 dns 服务器并且响应速度非常快，</span><br><span class=\"line\"># 指定 ignore-address=1.1.1.1 可以忽略它的响应信息，从而等待正确的响应结果。</span><br><span class=\"line\">#ignore-address=&lt;ipaddr&gt;</span><br><span class=\"line\">#filterwin2k</span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># 指定 resolv-file 文件路径，默认/etc/resolv.conf</span><br><span class=\"line\">#resolv-file=/etc/resolv.conf</span><br><span class=\"line\"># 不读取 resolv-file 来确定上游服务器</span><br><span class=\"line\">#no-resolv</span><br><span class=\"line\"># 在编译时需要启用 DBus 支持。</span><br><span class=\"line\">#enable-dbus[=&lt;service-name&gt;]</span><br><span class=\"line\"># 严格按照resolv.conf中的顺序进行查找</span><br><span class=\"line\">#strict-order</span><br><span class=\"line\"># 向所有上有服务器发送查询，而不是一个。</span><br><span class=\"line\">#all-servers</span><br><span class=\"line\">#dns-loop-detect</span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># 这项安全设置是拒绝解析包含私有 IP 地址的域名，</span><br><span class=\"line\"># 这些IP地址包括如下私有地址范围：10.0.0.0/8、172.16.0.0/12、192.168.0.0/16。</span><br><span class=\"line\"># 其初衷是要防止类似上游DNS服务器故意将某些域名解析成特定私有内网IP而劫持用户这样的安全攻击。</span><br><span class=\"line\"># 直接在配置文件中注销 stop-dns-rebind 配置项从而禁用该功能。</span><br><span class=\"line\"># 这个方法确实可以一劳永逸的解决解析内网 IP 地址的问题，但是我们也失去了这项安全保护的特性，</span><br><span class=\"line\"># 所以在这里我不推荐这个办法。</span><br><span class=\"line\"># 使用 rebind-domain-ok 进行特定配置，顾名思义该配置项可以有选择的忽略域名的 rebind 行为</span><br><span class=\"line\">#stop-dns-rebind</span><br><span class=\"line\">#rebind-localhost-ok</span><br><span class=\"line\">#rebind-domain-ok=[&lt;domain&gt;]|[[/&lt;domain&gt;/[&lt;domain&gt;/]</span><br><span class=\"line\">#rebind-domain-ok=/.dinghuangjie.com/.dhj.com/.harlinsu.com/.example.com/.test.com/.esderive.com/</span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># 也不要检测 /etc/resolv.conf 的变化</span><br><span class=\"line\">#no-poll</span><br><span class=\"line\"># 重启后清空缓存</span><br><span class=\"line\">#clear-on-reload</span><br><span class=\"line\"># 完整的域名才向上游服务器查找，如果仅仅是主机名仅查找hosts文件</span><br><span class=\"line\">#domain-needed</span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># IP地址转换</span><br><span class=\"line\">#alias=[&lt;old-ip&gt;]|[&lt;start-ip&gt;-&lt;end-ip&gt;],&lt;new-ip&gt;[,&lt;mask&gt;]</span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\">#local=[/[&lt;domain&gt;]/[domain/]][&lt;ipaddr&gt;[#&lt;port&gt;][@&lt;source-ip&gt;|&lt;interface&gt;[#&lt;port&gt;]]</span><br><span class=\"line\">#server=[/[&lt;domain&gt;]/[domain/]][&lt;ipaddr&gt;[#&lt;port&gt;][@&lt;source-ip&gt;|&lt;interface&gt;[#&lt;port&gt;]]</span><br><span class=\"line\">#server=/example.com/192.168.10.252</span><br><span class=\"line\">#rev-server=&lt;ip-address&gt;/&lt;prefix-len&gt;,&lt;ipaddr&gt;[#&lt;port&gt;][@&lt;source-ip&gt;|&lt;interface&gt;[#&lt;port&gt;]]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 将任何属于 &lt;domain&gt; 域名解析成指定的 &lt;ipaddr&gt; 地址。</span><br><span class=\"line\"># 也就是将 &lt;domain&gt; 及其所有子域名解析成指定的 &lt;ipaddr&gt; IPv4 或者 IPv6 地址，</span><br><span class=\"line\"># 通常用于屏蔽特定的域名。</span><br><span class=\"line\"># 一次只能指定一个 IPv4 或者 IPv6 地址，</span><br><span class=\"line\"># 要同时返回 IPv4 和IPv6 地址，请多次指定 address= 选项。</span><br><span class=\"line\"># 注意： /etc/hosts 以及 DHCP 租约将覆盖此项设置。</span><br><span class=\"line\">#address=/&lt;domain&gt;/[domain/][&lt;ipaddr&gt;]</span><br><span class=\"line\"> </span><br><span class=\"line\">#ipset=/&lt;domain&gt;/[domain/]&lt;ipset&gt;[,&lt;ipset&gt;]</span><br><span class=\"line\">#mx-host=&lt;mx name&gt;[[,&lt;hostname&gt;],&lt;preference&gt;]</span><br><span class=\"line\">#mx-target=&lt;hostname&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\"># SRV 记录</span><br><span class=\"line\">#srv-host=&lt;_service&gt;.&lt;_prot&gt;.[&lt;domain&gt;],[&lt;target&gt;[,&lt;port&gt;[,&lt;priority&gt;[,&lt;weight&gt;]]]]</span><br><span class=\"line\"> </span><br><span class=\"line\"># A, AAAA 和 PTR 记录 </span><br><span class=\"line\">#host-record=&lt;name&gt;[,&lt;name&gt;....],[&lt;IPv4-address&gt;],[&lt;IPv6-address&gt;][,&lt;TTL&gt;]</span><br><span class=\"line\"> </span><br><span class=\"line\"># TXT 记录</span><br><span class=\"line\">#txt-record=&lt;name&gt;[[,&lt;text&gt;],&lt;text&gt;]</span><br><span class=\"line\"> </span><br><span class=\"line\"># PTR 记录 </span><br><span class=\"line\">#ptr-record=&lt;name&gt;[,&lt;target&gt;]</span><br><span class=\"line\"> </span><br><span class=\"line\">#naptr-record=&lt;name&gt;,&lt;order&gt;,&lt;preference&gt;,&lt;flags&gt;,&lt;service&gt;,&lt;regexp&gt;[,&lt;replacement&gt;]</span><br><span class=\"line\"> </span><br><span class=\"line\"># CNAME 别名记录</span><br><span class=\"line\">#cname=&lt;cname&gt;,&lt;target&gt;[,&lt;TTL&gt;]</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">#dns-rr=&lt;name&gt;,&lt;RR-number&gt;,[&lt;hex data&gt;]</span><br><span class=\"line\">#interface-name=&lt;name&gt;,&lt;interface&gt;[/4|/6]</span><br><span class=\"line\">#synth-domain=&lt;domain&gt;,&lt;address range&gt;[,&lt;prefix&gt;]</span><br><span class=\"line\">#add-mac[=base64|text]</span><br><span class=\"line\">#add-cpe-id=&lt;string&gt;</span><br><span class=\"line\">#add-subnet[[=[&lt;IPv4 address&gt;/]&lt;IPv4 prefix length&gt;][,[&lt;IPv6 address&gt;/]&lt;IPv6 prefix length&gt;]]</span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># 缓存条数，默认为150条，cache-size=0 禁用缓存。</span><br><span class=\"line\">cache-size=1000</span><br><span class=\"line\"># 不缓存未知域名缓存，默认情况下dnsmasq缓存未知域名并直接返回为客户端。</span><br><span class=\"line\">#no-negcache</span><br><span class=\"line\"># 指定DNS同属查询转发数量</span><br><span class=\"line\">dns-forward-max=1000</span><br><span class=\"line\"> </span><br><span class=\"line\"># 启用连接跟踪，读取 Linux 入栈 DNS 查询请求的连接跟踪标记，</span><br><span class=\"line\"># 并且将上游返回的响应信息设置同样的标记。</span><br><span class=\"line\"># 用于带宽控制和防火墙部署。</span><br><span class=\"line\"># 此选项必须在编译时启用 conntrack 支持，并且内核正确配置并加载 conntrack。</span><br><span class=\"line\"># 此选项不能与 query-port 同时使用。</span><br><span class=\"line\">#conntrack</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\">#</span><br><span class=\"line\">#        DHCP 选项</span><br><span class=\"line\">#</span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># 设置 DHCP 地址池，同时启用 DHCP 功能。</span><br><span class=\"line\"># IPv4 &lt;mode&gt; 可指定为 static|proxy ，当 &lt;mode&gt; 指定为 static 时，</span><br><span class=\"line\"># 需用 dhcp-host 手动分配地址池中的 IP 地址。</span><br><span class=\"line\"># 当 &lt;mode&gt; 指定为 proxy 时，为指定的地址池提供 DHCP 代理。</span><br><span class=\"line\">#dhcp-range=[tag:&lt;tag&gt;[,tag:&lt;tag&gt;],][set:&lt;tag&gt;,]&lt;start-addr&gt;[,&lt;end-addr&gt;][,&lt;mode&gt;][,&lt;netmask&gt;[,&lt;broadcast&gt;]][,&lt;lease time&gt;]</span><br><span class=\"line\">#dhcp-range=172.16.0.2,172.16.0.250,255.255.255.0,1h</span><br><span class=\"line\">#dhcp-range=192.168.10.150,192.168.10.180,static,255.255.255.0,1h</span><br><span class=\"line\"> </span><br><span class=\"line\"># 根据 MAC 地址或 id 固定分配客户端的 IP 地址、主机名、租期。</span><br><span class=\"line\"># IPv4 下指定 id:* 将忽略 DHCP 客户端的 ID ，仅根据 MAC 来进行 IP 地址分配。</span><br><span class=\"line\"># 在读取 /etc/hosts 的情况，也可以根据 /etc/hosts 中的主机名分配对应 IP 地址。</span><br><span class=\"line\"># 指定 ignore 将忽略指定客户端得 DHCP 请求。</span><br><span class=\"line\">#dhcp-host=[&lt;hwaddr&gt;][,id:&lt;client_id&gt;|*][,set:&lt;tag&gt;][,&lt;ipaddr&gt;][,&lt;hostname&gt;][,&lt;lease_time&gt;][,ignore]</span><br><span class=\"line\">#dhcp-hostsfile=&lt;path&gt;</span><br><span class=\"line\">#dhcp-hostsdir=&lt;path&gt;</span><br><span class=\"line\"># 读取 /etc/ethers 文件 与使用 dhcp-host 的作用相同。IPv6 无效。</span><br><span class=\"line\">#read-ethers</span><br><span class=\"line\"> </span><br><span class=\"line\"># 指定给 DHCP 客户端的选项信息，</span><br><span class=\"line\"># 默认情况下 dnsmasq 将发送：子网掩码、广播地址、DNS 服务器地址、网关地址、域等信息。</span><br><span class=\"line\"># 指定此选项也可覆盖这些默认值并且设置其他选项值。</span><br><span class=\"line\"># 重要：可以使用 option:&lt;option-name&gt;或者 option号 来指定。</span><br><span class=\"line\"># &lt;option-name&gt; 和 option号的对应关系可使用命令：</span><br><span class=\"line\"># dnsmasq --help dhcp 以及 dnsmasq --help dhcp6 查看，这点很重要。</span><br><span class=\"line\"># 例如设置网关参数，既可以使用 dhcp-option=3,192.168.4.4 也可以使用 dhcp-option = option:router,192.168.4.4。</span><br><span class=\"line\"># 0.0.0.0 意味着当前运行 dnsmasq 的主机地址。</span><br><span class=\"line\"># 如果指定了多个 tag:&lt;tag&gt; 必须同时匹配才行。</span><br><span class=\"line\"># [encap:&lt;opt&gt;,][vi-encap:&lt;enterprise&gt;,][vendor:[&lt;vendor-class&gt;],] 有待继续研究。</span><br><span class=\"line\">#dhcp-option=[tag:&lt;tag&gt;,[tag:&lt;tag&gt;,]][encap:&lt;opt&gt;,][vi-encap:&lt;enterprise&gt;,][vendor:[&lt;vendor-class&gt;],][&lt;opt&gt;|option:&lt;opt-name&gt;|option6:&lt;opt&gt;|option6:&lt;opt-name&gt;],[&lt;value&gt;[,&lt;value&gt;]]</span><br><span class=\"line\">#dhcp-option-force=[tag:&lt;tag&gt;,[tag:&lt;tag&gt;,]][encap:&lt;opt&gt;,][vi-encap:&lt;enterprise&gt;,][vendor:[&lt;vendor-class&gt;],]&lt;opt&gt;,[&lt;value&gt;[,&lt;value&gt;]]</span><br><span class=\"line\">#dhcp-optsfile=&lt;path&gt;</span><br><span class=\"line\">#dhcp-optsdir=&lt;path&gt;</span><br><span class=\"line\">#dhcp-option=3,1.2.3.4</span><br><span class=\"line\">#dhcp-option=option:router,1.2.3.4</span><br><span class=\"line\">#dhcp-option=option:router,192.168.10.254</span><br><span class=\"line\">#dhcp-option=option:dns-server,192.168.10.254,221.12.1.227,221.12.33.227</span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># (IPv4 only) 禁用重用服务器名称和文件字段作为额外的 dhcp-option 选项。</span><br><span class=\"line\"># 一般情况下 dnsmasq 从 dhcp-boot 移出启动服务器和文件信息到 dhcp-option 选项中。</span><br><span class=\"line\"># 这使得在 dhcp-option 选项封包中有额外的选项空间可用，但是会使老的客户端混淆。</span><br><span class=\"line\"># 此选项将强制使用简单并安全的方式来避免此类情况。可以认为是一个兼容性选项。</span><br><span class=\"line\">#dhcp-no-override</span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># 配置 DHCP 中继。</span><br><span class=\"line\"># &lt;local address&gt; 是运行 dnsmasq 的接口的 IP 地址。</span><br><span class=\"line\"># 所有在 &lt;local address&gt; 接口上接收到的 DHCP 请求将中继到 &lt;server address&gt; 指定的远程 DHCP 服务器。</span><br><span class=\"line\"># 可以多次配置此选项，使用同一个 &lt;local address&gt; 转发到多个不同的 &lt;server address&gt; 指定的远程 DHCP 服务器。</span><br><span class=\"line\"># &lt;server address&gt; 仅允许使用 IP 地址，不能使用域名等其他格式。</span><br><span class=\"line\"># 如果是 DHCPv6，&lt;server address&gt; 可以是 ALL_SERVERS 的多播地址 ff05::1:3 。</span><br><span class=\"line\"># 在这种情况下必须指定接口 &lt;interface&gt; ，不能使用通配符，用于直接多播到对应的 DHCP 服务器所在的接口。</span><br><span class=\"line\"># &lt;interface&gt; 指定了仅允许接收从 &lt;interface&gt; 接口的 DHCP 服务器相应信息。</span><br><span class=\"line\">#dhcp-relay=&lt;local address&gt;,&lt;server address&gt;[,&lt;interface&gt;]</span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># 设置标签</span><br><span class=\"line\">#dhcp-vendorclass=set:&lt;tag&gt;,[enterprise:&lt;IANA-enterprise number&gt;,]&lt;vendor-class&gt;</span><br><span class=\"line\">#dhcp-userclass=set:&lt;tag&gt;,&lt;user-class&gt;</span><br><span class=\"line\">#dhcp-mac=set:&lt;tag&gt;,&lt;MAC address&gt;</span><br><span class=\"line\">#dhcp-circuitid=set:&lt;tag&gt;,&lt;circuit-id&gt;</span><br><span class=\"line\">#dhcp-remoteid=set:&lt;tag&gt;,&lt;remote-id&gt;</span><br><span class=\"line\">#dhcp-subscrid=set:&lt;tag&gt;,&lt;subscriber-id&gt;</span><br><span class=\"line\">#dhcp-match=set:&lt;tag&gt;,&lt;option number&gt;|option:&lt;option name&gt;|vi-encap:&lt;enterprise&gt;[,&lt;value&gt;]</span><br><span class=\"line\">#tag-if=set:&lt;tag&gt;[,set:&lt;tag&gt;[,tag:&lt;tag&gt;[,tag:&lt;tag&gt;]]]</span><br><span class=\"line\"> </span><br><span class=\"line\">#dhcp-proxy[=&lt;ip addr&gt;]......</span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># 不分配匹配这些 tag:&lt;tag&gt; 的 DHCP 请求。</span><br><span class=\"line\">#dhcp-ignore=tag:&lt;tag&gt;[,tag:&lt;tag&gt;]</span><br><span class=\"line\">#dhcp-ignore-names[=tag:&lt;tag&gt;[,tag:&lt;tag&gt;]]</span><br><span class=\"line\">#dhcp-generate-names=tag:&lt;tag&gt;[,tag:&lt;tag&gt;]</span><br><span class=\"line\"># IPv4 only 使用广播与匹配 tag:&lt;tag&gt; 的客户端通信。一般用于兼容老的 BOOT 客户端。</span><br><span class=\"line\">#dhcp-broadcast[=tag:&lt;tag&gt;[,tag:&lt;tag&gt;]] </span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># IPv4 only 设置 DHCP 服务器返回的 BOOTP 选项，</span><br><span class=\"line\"># &lt;servername&gt; &lt;server address&gt; 可选，</span><br><span class=\"line\"># 如果未设置服务器名称将设为空，服务器地址设为 dnsmasq 的 IP 地址。</span><br><span class=\"line\"># 如果指定了多个 tag:&lt;tag&gt; 必须同时匹配才行。</span><br><span class=\"line\"># 如果指定 &lt;tftp_servername&gt; 将按照 /etc/hosts 中对应的 IP 地址进行轮询负载均衡。  </span><br><span class=\"line\">#dhcp-boot=[tag:&lt;tag&gt;,]&lt;filename&gt;,[&lt;servername&gt;[,&lt;server address&gt;|&lt;tftp_servername&gt;]]</span><br><span class=\"line\"># 根据不同的类型使用不同的选项。</span><br><span class=\"line\"># 使用示例：</span><br><span class=\"line\">#        dhcp-match=set:EFI_x86-64,option:client-arch,9</span><br><span class=\"line\">#        dhcp-boot=tag:EFI_x86-64,uefi/grubx64.efi</span><br><span class=\"line\">#        #dhcp-match=set:EFI_Xscale,option:client-arch,8</span><br><span class=\"line\">#        #dhcp-boot=tag:EFI_Xscale,uefi/grubx64.efi</span><br><span class=\"line\">#        #dhcp-match=set:EFI_BC,option:client-arch,7</span><br><span class=\"line\">#        #dhcp-boot=tag:EFI_BC,uefi/grubx64.efi</span><br><span class=\"line\">#        #dhcp-match=set:EFI_IA32,option:client-arch,6</span><br><span class=\"line\">#        #dhcp-boot=tag:EFI_IA32,uefi/grubx64.efi</span><br><span class=\"line\">#        #dhcp-match=set:Intel_Lean_Client,option:client-arch,5</span><br><span class=\"line\">#        #dhcp-boot=tag:Intel_Lean_Client,uefi/grubx64.efi</span><br><span class=\"line\">#        #dhcp-match=set:Arc_x86,option:client-arch,4</span><br><span class=\"line\">#        #dhcp-boot=tag:Arc_x86,uefi/grubx64.efi</span><br><span class=\"line\">#        #dhcp-match=set:DEC_Alpha,option:client-arch,3</span><br><span class=\"line\">#        #dhcp-boot=tag:DEC_Alpha,uefi/grubx64.efi</span><br><span class=\"line\">#        #dhcp-match=set:EFI_Itanium,option:client-arch,2</span><br><span class=\"line\">#        #dhcp-boot=tag:EFI_Itanium,uefi/grubx64.efi</span><br><span class=\"line\">#        #dhcp-match=set:NEC/PC98,option:client-arch,1</span><br><span class=\"line\">#        #dhcp-boot=tag:NEC/PC98,uefi/grubx64.efi</span><br><span class=\"line\">#        dhcp-match=set:Intel_x86PC,option:client-arch,0</span><br><span class=\"line\">#        dhcp-boot=tag:Intel_x86PC,pxelinux.0</span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># DHCP 使用客户端的 MAC 地址的哈希值为客户端分配 IP 地址，</span><br><span class=\"line\"># 通常情况下即使客户端使自己的租约到期，客户端的 IP 地址仍将长期保持稳定。</span><br><span class=\"line\"># 在默认模式下，IP 地址是随机分配的。</span><br><span class=\"line\"># 启用 dhcp-sequential-ip 选项将按顺序分配 IP 地址。</span><br><span class=\"line\"># 在顺序分配模式下，客户端使租约到期更像是仅仅移动一下 IP 地址。</span><br><span class=\"line\"># 在通常情况下不建议使用这种方式。</span><br><span class=\"line\">#dhcp-sequential-ip</span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># 多数情况下我们使用 PXE，只是简单的允许 PXE 客户端获取 IP 地址，</span><br><span class=\"line\"># 然后 PXE 客户端下载 dhcp-boot 选项指定的文件并执行，也就是 BOOTP 的方式。</span><br><span class=\"line\"># 然而在有适当配置的 DHCP 服务器支持的情况下，PXE 系统能够实现更复杂的功能。</span><br><span class=\"line\"># pxe-service 选项可指定 PXE 环境的启动菜单。</span><br><span class=\"line\"># 为不同的类型系统设定不同的启动菜单，并且覆盖 dhcp-boot 选项。</span><br><span class=\"line\"># &lt;CSA&gt; 为客户端系统类型：x86PC, PC98, IA64_EFI, Alpha, Arc_x86, Intel_Lean_Client, </span><br><span class=\"line\"># IA32_EFI, X86-64_EFI, Xscale_EFI, BC_EFI, ARM32_EFI 和 ARM64_EFI，其他类型可能为一个整数。</span><br><span class=\"line\"># &lt;basename&gt; 引导 PXE 客户端使用 tftp 从 &lt;server address&gt; 或者 &lt;server_name&gt; 下载文件。</span><br><span class=\"line\">#     注意：&quot;layer&quot; 后缀 (通常是 &quot;.0&quot;) 由 PXE 提供，也就是 PXE 客户端默认在文件名附加 .0 后缀。</span><br><span class=\"line\">#     示例：pxe-service=x86PC, &quot;Install Linux&quot;, pxelinux         （读取 pxelinux.0 文件并执行）</span><br><span class=\"line\">#           pxe-service=x86PC, &quot;Install Linux&quot;, pxelinux, 1.2.3.4（不适用于老的PXE）</span><br><span class=\"line\">#     &lt;bootservicetype&gt; 整数，PXE 客户端将通过广播或者通过 &lt;server address&gt; </span><br><span class=\"line\">#           或者 &lt;server_name&gt; 搜索对应类型的适合的启动服务。。</span><br><span class=\"line\">#     示例：pxe-service=x86PC, &quot;Install windows from RIS server&quot;, 1</span><br><span class=\"line\">#           pxe-service=x86PC, &quot;Install windows from RIS server&quot;, 1, 1.2.3.4</span><br><span class=\"line\">#     未指定 &lt;basename&gt;、&lt;bootservicetype&gt; 或者 &lt;bootservicetype&gt; 为 “0”，将从本地启动。</span><br><span class=\"line\">#     示例：pxe-service=x86PC, &quot;Boot from local disk&quot;</span><br><span class=\"line\">#           pxe-service=x86PC, &quot;Boot from local disk&quot;, 0</span><br><span class=\"line\"># 如果指定 &lt;server_name&gt; 将按照 /etc/hosts 中对应的 IP 地址进行轮询负载均衡。  </span><br><span class=\"line\">#pxe-service=[tag:&lt;tag&gt;,]&lt;CSA&gt;,&lt;menu text&gt;[,&lt;basename&gt;|&lt;bootservicetype&gt;][,&lt;server address&gt;|&lt;server_name&gt;]</span><br><span class=\"line\"># 在 PXE 启动后弹出提示，&lt;prompt&gt; 为提示内容，&lt;timeout&gt; 为超时时间，为 0 则立即执行。</span><br><span class=\"line\"># 如果未指定此选项，在有多个启动选项的情况下等待用户选择，不会超时。</span><br><span class=\"line\">#pxe-prompt=[tag:&lt;tag&gt;,]&lt;prompt&gt;[,&lt;timeout&gt;]</span><br><span class=\"line\"># 根据不同的类型使用不同的菜单，使用示例：</span><br><span class=\"line\">#        #pxe-prompt=&quot;What system shall I netboot?&quot;, 120</span><br><span class=\"line\">#        # or with timeout before first available action is taken:</span><br><span class=\"line\">#        pxe-prompt=&quot;Press F8 or Enter key for menu.&quot;, 60</span><br><span class=\"line\">#        pxe-service=x86PC, &quot;Now in x86PC (BIOS mode), boot from local&quot;, 0</span><br><span class=\"line\">#        pxe-service=x86PC, &quot;Now in x86PC (BIOS mode)&quot;, pxelinux</span><br><span class=\"line\">#        pxe-service=PC98, &quot;Now in PC98 mode&quot;, PC98</span><br><span class=\"line\">#        pxe-service=IA64_EFI, &quot;Now in IA64_EFI mode&quot;, IA64_EFI</span><br><span class=\"line\">#        pxe-service=Alpha, &quot;Now in Alpha mode&quot;, Alpha</span><br><span class=\"line\">#        pxe-service=Arc_x86, &quot;Now in Arc_x86 mode&quot;, Arc_x86</span><br><span class=\"line\">#        pxe-service=Intel_Lean_Client, &quot;Now in Intel_Lean_Client mode&quot;, Intel_Lean_Client</span><br><span class=\"line\">#        pxe-service=IA32_EFI, &quot;Now in IA32_EFI mode&quot;, IA32_EFI</span><br><span class=\"line\">#        pxe-service=X86-64_EFI, &quot;Now in X86-64_EFI (UEFI mode), boot from local&quot;, 0</span><br><span class=\"line\">#        pxe-service=X86-64_EFI, &quot;Now in X86-64_EFI (UEFI mode)&quot;, grub/grub-x86_64.efi</span><br><span class=\"line\">#        pxe-service=Xscale_EFI, &quot;Now in Xscale_EFI mode&quot;, Xscale_EFI</span><br><span class=\"line\">#        pxe-service=BC_EFI, &quot;Now in BC_EFI mode&quot;, BC_EFI</span><br><span class=\"line\">#        # CentOS7 系统不支持下列两个选项</span><br><span class=\"line\">#        #pxe-service=ARM32_EFI,&quot;Now in ARM32_EFI mode&quot;,ARM32_EFI</span><br><span class=\"line\">#        #pxe-service=ARM64_EFI,&quot;Now in ARM64_EFI mode&quot;,ARM64_EFI</span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># 默认为150，即最多分配150个ip地址出去，最大1000个ip</span><br><span class=\"line\">#dhcp-lease-max=150</span><br><span class=\"line\"># (IPv4 only) 指定DHCP端口，默认为67和68。如果不指定则为1067和1068，单指定一个，第二个加1</span><br><span class=\"line\">#dhcp-alternate-port[=&lt;server port&gt;[,&lt;client port&gt;]]</span><br><span class=\"line\"># 谨慎使用此选项，避免 IP 地址浪费。(IPv4 only) 允许动态分配 IP 地址给 BOOTP 客户端。</span><br><span class=\"line\"># 注意：BOOTP 客户端获取的 IP 地址是永久的，将无法再次分配给其他客户端。</span><br><span class=\"line\">#bootp-dynamic[=&lt;network-id&gt;[,&lt;network-id&gt;]]</span><br><span class=\"line\"># 谨慎使用此选项。</span><br><span class=\"line\"># 默认情况下 DHCP 服务器使用 ping 的方式进行确保 IP 未被使用的情况下将 IP 地址分配出去。</span><br><span class=\"line\"># 启用此选项将不使用 ping 进行确认。</span><br><span class=\"line\">#no-ping</span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># 记录额外的 dhcp 日志，记录所有发送给 DHCP 客户端的选项（option）以及标签（tag）信息</span><br><span class=\"line\">#log-dhcp</span><br><span class=\"line\"># 禁止记录日常操作日志，错误日志仍然记录。启用 log-dhcp 将覆盖下列选项。</span><br><span class=\"line\">#quiet-dhcp</span><br><span class=\"line\">#quiet-dhcp6</span><br><span class=\"line\">#quiet-ra</span><br><span class=\"line\"> </span><br><span class=\"line\"># 修改 DHCP 默认租约文件路径，默认情况下无需修改</span><br><span class=\"line\">#dhcp-leasefile=/var/lib/dnsmasq/dnsmasq.leases</span><br><span class=\"line\"># (IPv6 only)</span><br><span class=\"line\">#dhcp-duid=&lt;enterprise-id&gt;,&lt;uid&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\">#dhcp-script=&lt;path&gt;</span><br><span class=\"line\">#dhcp-luascript=&lt;path&gt;</span><br><span class=\"line\">#dhcp-scriptuser=root</span><br><span class=\"line\">#script-arp</span><br><span class=\"line\">#leasefile-ro</span><br><span class=\"line\"> </span><br><span class=\"line\">#bridge-interface=&lt;interface&gt;,&lt;alias&gt;[,&lt;alias&gt;]</span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># 给 DHCP 服务器指定 domain 域名信息，也可以给对应的 IP 地址池指定域名。</span><br><span class=\"line\">#     直接指定域名</span><br><span class=\"line\">#     示例：domain=thekelleys.org.uk</span><br><span class=\"line\">#     子网对应的域名</span><br><span class=\"line\">#     示例：domain=wireless.thekelleys.org.uk,192.168.2.0/24</span><br><span class=\"line\">#     ip范围对应的域名</span><br><span class=\"line\">#     示例：domain=reserved.thekelleys.org.uk,192.68.3.100,192.168.3.200</span><br><span class=\"line\">#domain=&lt;domain&gt;[,&lt;address range&gt;[,local]]</span><br><span class=\"line\"># 在默认情况下 dnsmasq 插入普通的客户端主机名到 DNS 中。</span><br><span class=\"line\"># 在这种情况下主机名必须唯一，即使两个客户端具有不同的域名后缀。</span><br><span class=\"line\"># 如果第二个客户端使用了相同的主机名，DNS 查询将自动更新为第二个客户端的 IP 地址。</span><br><span class=\"line\"># 如果设置了 dhcp-fqdn 选项，普通的主机名将不再插入到 DNS 中去，</span><br><span class=\"line\"># 仅允许合格的具有域名后缀的主机名插入到 DNS 服务器中。</span><br><span class=\"line\"># 指定此选项需同时指定不含 &lt;address range&gt; 地址范围的 domain 选项。</span><br><span class=\"line\">#dhcp-fqdn</span><br><span class=\"line\"># 通常情况下分配 DHCP 租约后，dnsmasq 设置 FQDN 选项告诉客户端不要尝试 DDNS 更新主机名与 IP 地址。</span><br><span class=\"line\"># 这是因为  name-IP 已自动添加到 dnsmasq 的 DNS 视图中的。</span><br><span class=\"line\"># 设置此选项将允许客户端 DDNS 更新，</span><br><span class=\"line\"># 在 windows 下允许客户端更新 windows AD 服务器是非常有用的。</span><br><span class=\"line\"># 参看  RFC 4702 。</span><br><span class=\"line\">#dhcp-client-update</span><br><span class=\"line\"> </span><br><span class=\"line\">#enable-ra</span><br><span class=\"line\">#ra-param=&lt;interface&gt;,[high|low],[[&lt;ra-interval&gt;],&lt;router lifetime&gt;]</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\">#</span><br><span class=\"line\">#        TFTP 选项</span><br><span class=\"line\">#</span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># 对于绝大多数的配置，仅需指定 enable-tftp 和 tftp-root 选项即可。</span><br><span class=\"line\"># 是否启用内置的 tftp 服务器，可以指定多个逗号分隔的网络接口</span><br><span class=\"line\">#enable-tftp[=&lt;interface&gt;[,&lt;interface&gt;]]</span><br><span class=\"line\">#enable-tftp</span><br><span class=\"line\">#enable-tftp=enp3s0,lo</span><br><span class=\"line\"># 指定 tftp 的根目录，也就是寻找传输文件时使用的相对路径，可以附加接口，</span><br><span class=\"line\">#tftp-root=&lt;directory&gt;[,&lt;interface&gt;]</span><br><span class=\"line\">#tftp-root=/var/lib/tftpboot/</span><br><span class=\"line\"># 如果取消注释，那么即使指定的 tftp-root 无法访问，仍然启动 tftp 服务。</span><br><span class=\"line\">#tftp-no-fail</span><br><span class=\"line\"># 附加客户端的 IP 地址作为文件路径。此选项仅在正确设置了 tftp-root 的情况下可用，</span><br><span class=\"line\"># 示例：如果 tftp-root=/tftp，客户端为 192.168.1.15 请求 myfile.txt 文件时，</span><br><span class=\"line\"># 将优先请求 /tftp/192.168.1.15/myfile.txt 文件， 其次是 /tftp/myfile.txt 文件。</span><br><span class=\"line\"># 感觉没什么用。</span><br><span class=\"line\">#tftp-unique-root</span><br><span class=\"line\"># 启用安全模式，启用此选项，仅允许 tftp 进程访问属主为自己的文件。</span><br><span class=\"line\"># 不启用此选项，允许访问所有 tftp 进程属主可读取的文件。</span><br><span class=\"line\"># 如果 dnsmasq 是以 root 用户运行，tftp-secure 选项将允许访问全局可读的文件。</span><br><span class=\"line\"># 一般情况下不推荐以 root 用户运行 dnsmasq。</span><br><span class=\"line\"># 在指定了 tftp-root 的情况下并不是很重要。</span><br><span class=\"line\">#tftp-secure</span><br><span class=\"line\"># 将所有文件请求转换为小写。对于 Windows 客户端来说非常有用，建议开启此项。</span><br><span class=\"line\"># 注意：dnsmasq 的 TFTP 服务器总是将文件路径中的“\\”转换为“/”。</span><br><span class=\"line\">#tftp-lowercase</span><br><span class=\"line\"># 允许最大的连接数，默认为 50 。</span><br><span class=\"line\"># 如果将连接数设置的很大，需注意每个进程的最大文件描述符限制，详见文档手册。</span><br><span class=\"line\">#tftp-max=&lt;connections&gt;</span><br><span class=\"line\">#tftp-max=50</span><br><span class=\"line\"># 设置传输时的 MTU 值，建议不设置或按需设置。</span><br><span class=\"line\"># 如果设定的值大于网络接口的 MTU 值，将按照网络接口的 MTU 值自动分片传输（不推荐）。</span><br><span class=\"line\">#tftp-mtu=&lt;mtu size&gt;</span><br><span class=\"line\"># 停止 tftp 服务器与客户端协商 &quot;blocksize&quot; 选项。启用后，防止一些古怪的客户端出问题。</span><br><span class=\"line\">#tftp-no-blocksize</span><br><span class=\"line\"># 指定 tftp 的连接端口的范围，方便防火墙部署。</span><br><span class=\"line\"># tftp 侦听在 69/udp ，连接端口默认是由系统自动分配的，</span><br><span class=\"line\"># 非 root 用户运行时指定的连接端口号需大于 1025 最大 65535。</span><br><span class=\"line\">#tftp-port-range=&lt;start&gt;,&lt;end&gt;</span><br><span class=\"line\">###############################################################################</span><br><span class=\"line\">#conf-dir=&lt;directory&gt;[,&lt;file-extension&gt;......]</span><br><span class=\"line\">#conf-file=/etc/dnsmasq.more.conf</span><br><span class=\"line\">conf-dir=/etc/dnsmasq.d</span><br><span class=\"line\">#servers-file=&lt;file&gt;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>这个文档里说的比较详细：<br>","more":"<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">##############################################################################</span><br><span class=\"line\">#</span><br><span class=\"line\">#        DNS 选项</span><br><span class=\"line\">#</span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># 不加载本地的 /etc/hosts 文件</span><br><span class=\"line\">#no-hosts</span><br><span class=\"line\"># 添加读取额外的 hosts 文件路径，可以多次指定。如果指定为目录，则读取目录中的所有文件。</span><br><span class=\"line\">#addn-hosts=/etc/hosts</span><br><span class=\"line\"># 读取目录中的所有文件，文件更新将自动读取</span><br><span class=\"line\">#hostsdir=&lt;path&gt;</span><br><span class=\"line\"># 例如，/etc/hosts中的os01将扩展成os01.example.com</span><br><span class=\"line\">#expand-hosts</span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># 缓存时间设置，一般不需要设置</span><br><span class=\"line\"># 本地 hosts 文件的缓存时间，通常不要求缓存本地，这样更改hosts文件后就即时生效。</span><br><span class=\"line\">#local-ttl=3600</span><br><span class=\"line\"># 同 local-ttl 仅影响 DHCP 租约</span><br><span class=\"line\">#dhcp-ttl=&lt;time&gt;</span><br><span class=\"line\"># 对于上游返回的值没有ttl时，dnsmasq给一个默认的ttl，一般不需要设置，</span><br><span class=\"line\">#neg-ttl=&lt;time&gt;</span><br><span class=\"line\"># 指定返回给客户端的ttl时间，一般不需要设置</span><br><span class=\"line\">#max-ttl=&lt;time&gt;</span><br><span class=\"line\"># 设置在缓存中的条目的最大 TTL。</span><br><span class=\"line\">#max-cache-ttl=&lt;time&gt;</span><br><span class=\"line\"># 不需要设置，除非你知道你在做什么。</span><br><span class=\"line\">#min-cache-ttl=&lt;time&gt;</span><br><span class=\"line\"># 一般不需要设置</span><br><span class=\"line\">#auth-ttl=&lt;time&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># 记录dns查询日志</span><br><span class=\"line\">#log-queries</span><br><span class=\"line\"># 设置日志记录器，‘-‘ 为 stderr，也可以是文件路径。默认为：DAEMON，调试时使用 LOCAL0。</span><br><span class=\"line\">#log-facility=&lt;facility&gt;</span><br><span class=\"line\">#log-facility=/var/log/dnsmasq/dnsmasq.log</span><br><span class=\"line\"># 异步log，缓解阻塞，提高性能。默认为5，最大100。</span><br><span class=\"line\">#log-async[=&lt;lines&gt;]</span><br><span class=\"line\">#log-async=50</span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># 指定用户和组</span><br><span class=\"line\">#user=nobody</span><br><span class=\"line\">#group=nobody</span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># 指定DNS的端口，默认53，设置 port=0 将完全禁用 DNS 功能，仅使用 DHCP/TFTP</span><br><span class=\"line\">#port=53</span><br><span class=\"line\"># 指定 EDNS.0 UDP 包的最大尺寸，默认为 RFC5625 推荐的 edns-packet-max=4096</span><br><span class=\"line\">#edns-packet-max=&lt;size&gt;</span><br><span class=\"line\"># 指定向上游查询的 UDP 端口，默认是随机端口，指定后降低安全性、加快速度、减少资源消耗。</span><br><span class=\"line\"># 设置为 0 有操作系统分配。</span><br><span class=\"line\">query-port=53535</span><br><span class=\"line\"># 指定向上游查询的 UDP 端口范围，方便防火墙设置。</span><br><span class=\"line\">#min-port=&lt;port&gt;</span><br><span class=\"line\">#max-port=&lt;port&gt;</span><br><span class=\"line\"># 指定接口，指定后同时附加 lo 接口，可以使用‘*‘通配符</span><br><span class=\"line\">#interface=wlp2s0</span><br><span class=\"line\"># 指定排除的接口，排除高优先级，可以使用‘*‘通配符</span><br><span class=\"line\">#except-interface=</span><br><span class=\"line\"># 启用 DNS 验证模式</span><br><span class=\"line\">#auth-server=&lt;domain&gt;,&lt;interface&gt;|&lt;ip-address&gt;</span><br><span class=\"line\"># 仅接收同一子网的 DNS 请求，仅在未指定 interface、except-interface、listen-address </span><br><span class=\"line\"># 或者 auth-server 时有效。</span><br><span class=\"line\">#local-service</span><br><span class=\"line\"># 指定不提供 DHCP 或 TFTP 服务的接口，仅提供 DNS 服务</span><br><span class=\"line\">#no-dhcp-interface=enp3s0</span><br><span class=\"line\"># 指定IP地址，可以多次指定。下面两行跟指定接口的作用类似。</span><br><span class=\"line\">#listen-address=192.168.10.254</span><br><span class=\"line\">#listen-address=127.0.0.1</span><br><span class=\"line\"># 绑定接口，开启此项将仅监听指定的接口。</span><br><span class=\"line\">#bind-interfaces</span><br><span class=\"line\"># 对于新添加的接口也进行绑定。</span><br><span class=\"line\">#bind-dynamic</span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># 如果 hosts 中的主机有多个 IP 地址，仅返回对应子网的 IP 地址。</span><br><span class=\"line\">#localise-queries</span><br><span class=\"line\"># 如果反向查找的是私有地址例如192.168.X.X，仅从 hosts 文件查找，不再转发到上游服务器</span><br><span class=\"line\">#bogus-priv</span><br><span class=\"line\"># 对于任何被解析到此IP的域名，使其解析失效，可以多次指定</span><br><span class=\"line\">#bogus-nxdomain=64.94.110.11</span><br><span class=\"line\"># 忽略指定的 DNS 响应服务器地址，例如 1.1.1.1 为伪造的 dns 服务器并且响应速度非常快，</span><br><span class=\"line\"># 指定 ignore-address=1.1.1.1 可以忽略它的响应信息，从而等待正确的响应结果。</span><br><span class=\"line\">#ignore-address=&lt;ipaddr&gt;</span><br><span class=\"line\">#filterwin2k</span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># 指定 resolv-file 文件路径，默认/etc/resolv.conf</span><br><span class=\"line\">#resolv-file=/etc/resolv.conf</span><br><span class=\"line\"># 不读取 resolv-file 来确定上游服务器</span><br><span class=\"line\">#no-resolv</span><br><span class=\"line\"># 在编译时需要启用 DBus 支持。</span><br><span class=\"line\">#enable-dbus[=&lt;service-name&gt;]</span><br><span class=\"line\"># 严格按照resolv.conf中的顺序进行查找</span><br><span class=\"line\">#strict-order</span><br><span class=\"line\"># 向所有上有服务器发送查询，而不是一个。</span><br><span class=\"line\">#all-servers</span><br><span class=\"line\">#dns-loop-detect</span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># 这项安全设置是拒绝解析包含私有 IP 地址的域名，</span><br><span class=\"line\"># 这些IP地址包括如下私有地址范围：10.0.0.0/8、172.16.0.0/12、192.168.0.0/16。</span><br><span class=\"line\"># 其初衷是要防止类似上游DNS服务器故意将某些域名解析成特定私有内网IP而劫持用户这样的安全攻击。</span><br><span class=\"line\"># 直接在配置文件中注销 stop-dns-rebind 配置项从而禁用该功能。</span><br><span class=\"line\"># 这个方法确实可以一劳永逸的解决解析内网 IP 地址的问题，但是我们也失去了这项安全保护的特性，</span><br><span class=\"line\"># 所以在这里我不推荐这个办法。</span><br><span class=\"line\"># 使用 rebind-domain-ok 进行特定配置，顾名思义该配置项可以有选择的忽略域名的 rebind 行为</span><br><span class=\"line\">#stop-dns-rebind</span><br><span class=\"line\">#rebind-localhost-ok</span><br><span class=\"line\">#rebind-domain-ok=[&lt;domain&gt;]|[[/&lt;domain&gt;/[&lt;domain&gt;/]</span><br><span class=\"line\">#rebind-domain-ok=/.dinghuangjie.com/.dhj.com/.harlinsu.com/.example.com/.test.com/.esderive.com/</span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># 也不要检测 /etc/resolv.conf 的变化</span><br><span class=\"line\">#no-poll</span><br><span class=\"line\"># 重启后清空缓存</span><br><span class=\"line\">#clear-on-reload</span><br><span class=\"line\"># 完整的域名才向上游服务器查找，如果仅仅是主机名仅查找hosts文件</span><br><span class=\"line\">#domain-needed</span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># IP地址转换</span><br><span class=\"line\">#alias=[&lt;old-ip&gt;]|[&lt;start-ip&gt;-&lt;end-ip&gt;],&lt;new-ip&gt;[,&lt;mask&gt;]</span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\">#local=[/[&lt;domain&gt;]/[domain/]][&lt;ipaddr&gt;[#&lt;port&gt;][@&lt;source-ip&gt;|&lt;interface&gt;[#&lt;port&gt;]]</span><br><span class=\"line\">#server=[/[&lt;domain&gt;]/[domain/]][&lt;ipaddr&gt;[#&lt;port&gt;][@&lt;source-ip&gt;|&lt;interface&gt;[#&lt;port&gt;]]</span><br><span class=\"line\">#server=/example.com/192.168.10.252</span><br><span class=\"line\">#rev-server=&lt;ip-address&gt;/&lt;prefix-len&gt;,&lt;ipaddr&gt;[#&lt;port&gt;][@&lt;source-ip&gt;|&lt;interface&gt;[#&lt;port&gt;]]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 将任何属于 &lt;domain&gt; 域名解析成指定的 &lt;ipaddr&gt; 地址。</span><br><span class=\"line\"># 也就是将 &lt;domain&gt; 及其所有子域名解析成指定的 &lt;ipaddr&gt; IPv4 或者 IPv6 地址，</span><br><span class=\"line\"># 通常用于屏蔽特定的域名。</span><br><span class=\"line\"># 一次只能指定一个 IPv4 或者 IPv6 地址，</span><br><span class=\"line\"># 要同时返回 IPv4 和IPv6 地址，请多次指定 address= 选项。</span><br><span class=\"line\"># 注意： /etc/hosts 以及 DHCP 租约将覆盖此项设置。</span><br><span class=\"line\">#address=/&lt;domain&gt;/[domain/][&lt;ipaddr&gt;]</span><br><span class=\"line\"> </span><br><span class=\"line\">#ipset=/&lt;domain&gt;/[domain/]&lt;ipset&gt;[,&lt;ipset&gt;]</span><br><span class=\"line\">#mx-host=&lt;mx name&gt;[[,&lt;hostname&gt;],&lt;preference&gt;]</span><br><span class=\"line\">#mx-target=&lt;hostname&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\"># SRV 记录</span><br><span class=\"line\">#srv-host=&lt;_service&gt;.&lt;_prot&gt;.[&lt;domain&gt;],[&lt;target&gt;[,&lt;port&gt;[,&lt;priority&gt;[,&lt;weight&gt;]]]]</span><br><span class=\"line\"> </span><br><span class=\"line\"># A, AAAA 和 PTR 记录 </span><br><span class=\"line\">#host-record=&lt;name&gt;[,&lt;name&gt;....],[&lt;IPv4-address&gt;],[&lt;IPv6-address&gt;][,&lt;TTL&gt;]</span><br><span class=\"line\"> </span><br><span class=\"line\"># TXT 记录</span><br><span class=\"line\">#txt-record=&lt;name&gt;[[,&lt;text&gt;],&lt;text&gt;]</span><br><span class=\"line\"> </span><br><span class=\"line\"># PTR 记录 </span><br><span class=\"line\">#ptr-record=&lt;name&gt;[,&lt;target&gt;]</span><br><span class=\"line\"> </span><br><span class=\"line\">#naptr-record=&lt;name&gt;,&lt;order&gt;,&lt;preference&gt;,&lt;flags&gt;,&lt;service&gt;,&lt;regexp&gt;[,&lt;replacement&gt;]</span><br><span class=\"line\"> </span><br><span class=\"line\"># CNAME 别名记录</span><br><span class=\"line\">#cname=&lt;cname&gt;,&lt;target&gt;[,&lt;TTL&gt;]</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">#dns-rr=&lt;name&gt;,&lt;RR-number&gt;,[&lt;hex data&gt;]</span><br><span class=\"line\">#interface-name=&lt;name&gt;,&lt;interface&gt;[/4|/6]</span><br><span class=\"line\">#synth-domain=&lt;domain&gt;,&lt;address range&gt;[,&lt;prefix&gt;]</span><br><span class=\"line\">#add-mac[=base64|text]</span><br><span class=\"line\">#add-cpe-id=&lt;string&gt;</span><br><span class=\"line\">#add-subnet[[=[&lt;IPv4 address&gt;/]&lt;IPv4 prefix length&gt;][,[&lt;IPv6 address&gt;/]&lt;IPv6 prefix length&gt;]]</span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># 缓存条数，默认为150条，cache-size=0 禁用缓存。</span><br><span class=\"line\">cache-size=1000</span><br><span class=\"line\"># 不缓存未知域名缓存，默认情况下dnsmasq缓存未知域名并直接返回为客户端。</span><br><span class=\"line\">#no-negcache</span><br><span class=\"line\"># 指定DNS同属查询转发数量</span><br><span class=\"line\">dns-forward-max=1000</span><br><span class=\"line\"> </span><br><span class=\"line\"># 启用连接跟踪，读取 Linux 入栈 DNS 查询请求的连接跟踪标记，</span><br><span class=\"line\"># 并且将上游返回的响应信息设置同样的标记。</span><br><span class=\"line\"># 用于带宽控制和防火墙部署。</span><br><span class=\"line\"># 此选项必须在编译时启用 conntrack 支持，并且内核正确配置并加载 conntrack。</span><br><span class=\"line\"># 此选项不能与 query-port 同时使用。</span><br><span class=\"line\">#conntrack</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\">#</span><br><span class=\"line\">#        DHCP 选项</span><br><span class=\"line\">#</span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># 设置 DHCP 地址池，同时启用 DHCP 功能。</span><br><span class=\"line\"># IPv4 &lt;mode&gt; 可指定为 static|proxy ，当 &lt;mode&gt; 指定为 static 时，</span><br><span class=\"line\"># 需用 dhcp-host 手动分配地址池中的 IP 地址。</span><br><span class=\"line\"># 当 &lt;mode&gt; 指定为 proxy 时，为指定的地址池提供 DHCP 代理。</span><br><span class=\"line\">#dhcp-range=[tag:&lt;tag&gt;[,tag:&lt;tag&gt;],][set:&lt;tag&gt;,]&lt;start-addr&gt;[,&lt;end-addr&gt;][,&lt;mode&gt;][,&lt;netmask&gt;[,&lt;broadcast&gt;]][,&lt;lease time&gt;]</span><br><span class=\"line\">#dhcp-range=172.16.0.2,172.16.0.250,255.255.255.0,1h</span><br><span class=\"line\">#dhcp-range=192.168.10.150,192.168.10.180,static,255.255.255.0,1h</span><br><span class=\"line\"> </span><br><span class=\"line\"># 根据 MAC 地址或 id 固定分配客户端的 IP 地址、主机名、租期。</span><br><span class=\"line\"># IPv4 下指定 id:* 将忽略 DHCP 客户端的 ID ，仅根据 MAC 来进行 IP 地址分配。</span><br><span class=\"line\"># 在读取 /etc/hosts 的情况，也可以根据 /etc/hosts 中的主机名分配对应 IP 地址。</span><br><span class=\"line\"># 指定 ignore 将忽略指定客户端得 DHCP 请求。</span><br><span class=\"line\">#dhcp-host=[&lt;hwaddr&gt;][,id:&lt;client_id&gt;|*][,set:&lt;tag&gt;][,&lt;ipaddr&gt;][,&lt;hostname&gt;][,&lt;lease_time&gt;][,ignore]</span><br><span class=\"line\">#dhcp-hostsfile=&lt;path&gt;</span><br><span class=\"line\">#dhcp-hostsdir=&lt;path&gt;</span><br><span class=\"line\"># 读取 /etc/ethers 文件 与使用 dhcp-host 的作用相同。IPv6 无效。</span><br><span class=\"line\">#read-ethers</span><br><span class=\"line\"> </span><br><span class=\"line\"># 指定给 DHCP 客户端的选项信息，</span><br><span class=\"line\"># 默认情况下 dnsmasq 将发送：子网掩码、广播地址、DNS 服务器地址、网关地址、域等信息。</span><br><span class=\"line\"># 指定此选项也可覆盖这些默认值并且设置其他选项值。</span><br><span class=\"line\"># 重要：可以使用 option:&lt;option-name&gt;或者 option号 来指定。</span><br><span class=\"line\"># &lt;option-name&gt; 和 option号的对应关系可使用命令：</span><br><span class=\"line\"># dnsmasq --help dhcp 以及 dnsmasq --help dhcp6 查看，这点很重要。</span><br><span class=\"line\"># 例如设置网关参数，既可以使用 dhcp-option=3,192.168.4.4 也可以使用 dhcp-option = option:router,192.168.4.4。</span><br><span class=\"line\"># 0.0.0.0 意味着当前运行 dnsmasq 的主机地址。</span><br><span class=\"line\"># 如果指定了多个 tag:&lt;tag&gt; 必须同时匹配才行。</span><br><span class=\"line\"># [encap:&lt;opt&gt;,][vi-encap:&lt;enterprise&gt;,][vendor:[&lt;vendor-class&gt;],] 有待继续研究。</span><br><span class=\"line\">#dhcp-option=[tag:&lt;tag&gt;,[tag:&lt;tag&gt;,]][encap:&lt;opt&gt;,][vi-encap:&lt;enterprise&gt;,][vendor:[&lt;vendor-class&gt;],][&lt;opt&gt;|option:&lt;opt-name&gt;|option6:&lt;opt&gt;|option6:&lt;opt-name&gt;],[&lt;value&gt;[,&lt;value&gt;]]</span><br><span class=\"line\">#dhcp-option-force=[tag:&lt;tag&gt;,[tag:&lt;tag&gt;,]][encap:&lt;opt&gt;,][vi-encap:&lt;enterprise&gt;,][vendor:[&lt;vendor-class&gt;],]&lt;opt&gt;,[&lt;value&gt;[,&lt;value&gt;]]</span><br><span class=\"line\">#dhcp-optsfile=&lt;path&gt;</span><br><span class=\"line\">#dhcp-optsdir=&lt;path&gt;</span><br><span class=\"line\">#dhcp-option=3,1.2.3.4</span><br><span class=\"line\">#dhcp-option=option:router,1.2.3.4</span><br><span class=\"line\">#dhcp-option=option:router,192.168.10.254</span><br><span class=\"line\">#dhcp-option=option:dns-server,192.168.10.254,221.12.1.227,221.12.33.227</span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># (IPv4 only) 禁用重用服务器名称和文件字段作为额外的 dhcp-option 选项。</span><br><span class=\"line\"># 一般情况下 dnsmasq 从 dhcp-boot 移出启动服务器和文件信息到 dhcp-option 选项中。</span><br><span class=\"line\"># 这使得在 dhcp-option 选项封包中有额外的选项空间可用，但是会使老的客户端混淆。</span><br><span class=\"line\"># 此选项将强制使用简单并安全的方式来避免此类情况。可以认为是一个兼容性选项。</span><br><span class=\"line\">#dhcp-no-override</span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># 配置 DHCP 中继。</span><br><span class=\"line\"># &lt;local address&gt; 是运行 dnsmasq 的接口的 IP 地址。</span><br><span class=\"line\"># 所有在 &lt;local address&gt; 接口上接收到的 DHCP 请求将中继到 &lt;server address&gt; 指定的远程 DHCP 服务器。</span><br><span class=\"line\"># 可以多次配置此选项，使用同一个 &lt;local address&gt; 转发到多个不同的 &lt;server address&gt; 指定的远程 DHCP 服务器。</span><br><span class=\"line\"># &lt;server address&gt; 仅允许使用 IP 地址，不能使用域名等其他格式。</span><br><span class=\"line\"># 如果是 DHCPv6，&lt;server address&gt; 可以是 ALL_SERVERS 的多播地址 ff05::1:3 。</span><br><span class=\"line\"># 在这种情况下必须指定接口 &lt;interface&gt; ，不能使用通配符，用于直接多播到对应的 DHCP 服务器所在的接口。</span><br><span class=\"line\"># &lt;interface&gt; 指定了仅允许接收从 &lt;interface&gt; 接口的 DHCP 服务器相应信息。</span><br><span class=\"line\">#dhcp-relay=&lt;local address&gt;,&lt;server address&gt;[,&lt;interface&gt;]</span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># 设置标签</span><br><span class=\"line\">#dhcp-vendorclass=set:&lt;tag&gt;,[enterprise:&lt;IANA-enterprise number&gt;,]&lt;vendor-class&gt;</span><br><span class=\"line\">#dhcp-userclass=set:&lt;tag&gt;,&lt;user-class&gt;</span><br><span class=\"line\">#dhcp-mac=set:&lt;tag&gt;,&lt;MAC address&gt;</span><br><span class=\"line\">#dhcp-circuitid=set:&lt;tag&gt;,&lt;circuit-id&gt;</span><br><span class=\"line\">#dhcp-remoteid=set:&lt;tag&gt;,&lt;remote-id&gt;</span><br><span class=\"line\">#dhcp-subscrid=set:&lt;tag&gt;,&lt;subscriber-id&gt;</span><br><span class=\"line\">#dhcp-match=set:&lt;tag&gt;,&lt;option number&gt;|option:&lt;option name&gt;|vi-encap:&lt;enterprise&gt;[,&lt;value&gt;]</span><br><span class=\"line\">#tag-if=set:&lt;tag&gt;[,set:&lt;tag&gt;[,tag:&lt;tag&gt;[,tag:&lt;tag&gt;]]]</span><br><span class=\"line\"> </span><br><span class=\"line\">#dhcp-proxy[=&lt;ip addr&gt;]......</span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># 不分配匹配这些 tag:&lt;tag&gt; 的 DHCP 请求。</span><br><span class=\"line\">#dhcp-ignore=tag:&lt;tag&gt;[,tag:&lt;tag&gt;]</span><br><span class=\"line\">#dhcp-ignore-names[=tag:&lt;tag&gt;[,tag:&lt;tag&gt;]]</span><br><span class=\"line\">#dhcp-generate-names=tag:&lt;tag&gt;[,tag:&lt;tag&gt;]</span><br><span class=\"line\"># IPv4 only 使用广播与匹配 tag:&lt;tag&gt; 的客户端通信。一般用于兼容老的 BOOT 客户端。</span><br><span class=\"line\">#dhcp-broadcast[=tag:&lt;tag&gt;[,tag:&lt;tag&gt;]] </span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># IPv4 only 设置 DHCP 服务器返回的 BOOTP 选项，</span><br><span class=\"line\"># &lt;servername&gt; &lt;server address&gt; 可选，</span><br><span class=\"line\"># 如果未设置服务器名称将设为空，服务器地址设为 dnsmasq 的 IP 地址。</span><br><span class=\"line\"># 如果指定了多个 tag:&lt;tag&gt; 必须同时匹配才行。</span><br><span class=\"line\"># 如果指定 &lt;tftp_servername&gt; 将按照 /etc/hosts 中对应的 IP 地址进行轮询负载均衡。  </span><br><span class=\"line\">#dhcp-boot=[tag:&lt;tag&gt;,]&lt;filename&gt;,[&lt;servername&gt;[,&lt;server address&gt;|&lt;tftp_servername&gt;]]</span><br><span class=\"line\"># 根据不同的类型使用不同的选项。</span><br><span class=\"line\"># 使用示例：</span><br><span class=\"line\">#        dhcp-match=set:EFI_x86-64,option:client-arch,9</span><br><span class=\"line\">#        dhcp-boot=tag:EFI_x86-64,uefi/grubx64.efi</span><br><span class=\"line\">#        #dhcp-match=set:EFI_Xscale,option:client-arch,8</span><br><span class=\"line\">#        #dhcp-boot=tag:EFI_Xscale,uefi/grubx64.efi</span><br><span class=\"line\">#        #dhcp-match=set:EFI_BC,option:client-arch,7</span><br><span class=\"line\">#        #dhcp-boot=tag:EFI_BC,uefi/grubx64.efi</span><br><span class=\"line\">#        #dhcp-match=set:EFI_IA32,option:client-arch,6</span><br><span class=\"line\">#        #dhcp-boot=tag:EFI_IA32,uefi/grubx64.efi</span><br><span class=\"line\">#        #dhcp-match=set:Intel_Lean_Client,option:client-arch,5</span><br><span class=\"line\">#        #dhcp-boot=tag:Intel_Lean_Client,uefi/grubx64.efi</span><br><span class=\"line\">#        #dhcp-match=set:Arc_x86,option:client-arch,4</span><br><span class=\"line\">#        #dhcp-boot=tag:Arc_x86,uefi/grubx64.efi</span><br><span class=\"line\">#        #dhcp-match=set:DEC_Alpha,option:client-arch,3</span><br><span class=\"line\">#        #dhcp-boot=tag:DEC_Alpha,uefi/grubx64.efi</span><br><span class=\"line\">#        #dhcp-match=set:EFI_Itanium,option:client-arch,2</span><br><span class=\"line\">#        #dhcp-boot=tag:EFI_Itanium,uefi/grubx64.efi</span><br><span class=\"line\">#        #dhcp-match=set:NEC/PC98,option:client-arch,1</span><br><span class=\"line\">#        #dhcp-boot=tag:NEC/PC98,uefi/grubx64.efi</span><br><span class=\"line\">#        dhcp-match=set:Intel_x86PC,option:client-arch,0</span><br><span class=\"line\">#        dhcp-boot=tag:Intel_x86PC,pxelinux.0</span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># DHCP 使用客户端的 MAC 地址的哈希值为客户端分配 IP 地址，</span><br><span class=\"line\"># 通常情况下即使客户端使自己的租约到期，客户端的 IP 地址仍将长期保持稳定。</span><br><span class=\"line\"># 在默认模式下，IP 地址是随机分配的。</span><br><span class=\"line\"># 启用 dhcp-sequential-ip 选项将按顺序分配 IP 地址。</span><br><span class=\"line\"># 在顺序分配模式下，客户端使租约到期更像是仅仅移动一下 IP 地址。</span><br><span class=\"line\"># 在通常情况下不建议使用这种方式。</span><br><span class=\"line\">#dhcp-sequential-ip</span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># 多数情况下我们使用 PXE，只是简单的允许 PXE 客户端获取 IP 地址，</span><br><span class=\"line\"># 然后 PXE 客户端下载 dhcp-boot 选项指定的文件并执行，也就是 BOOTP 的方式。</span><br><span class=\"line\"># 然而在有适当配置的 DHCP 服务器支持的情况下，PXE 系统能够实现更复杂的功能。</span><br><span class=\"line\"># pxe-service 选项可指定 PXE 环境的启动菜单。</span><br><span class=\"line\"># 为不同的类型系统设定不同的启动菜单，并且覆盖 dhcp-boot 选项。</span><br><span class=\"line\"># &lt;CSA&gt; 为客户端系统类型：x86PC, PC98, IA64_EFI, Alpha, Arc_x86, Intel_Lean_Client, </span><br><span class=\"line\"># IA32_EFI, X86-64_EFI, Xscale_EFI, BC_EFI, ARM32_EFI 和 ARM64_EFI，其他类型可能为一个整数。</span><br><span class=\"line\"># &lt;basename&gt; 引导 PXE 客户端使用 tftp 从 &lt;server address&gt; 或者 &lt;server_name&gt; 下载文件。</span><br><span class=\"line\">#     注意：&quot;layer&quot; 后缀 (通常是 &quot;.0&quot;) 由 PXE 提供，也就是 PXE 客户端默认在文件名附加 .0 后缀。</span><br><span class=\"line\">#     示例：pxe-service=x86PC, &quot;Install Linux&quot;, pxelinux         （读取 pxelinux.0 文件并执行）</span><br><span class=\"line\">#           pxe-service=x86PC, &quot;Install Linux&quot;, pxelinux, 1.2.3.4（不适用于老的PXE）</span><br><span class=\"line\">#     &lt;bootservicetype&gt; 整数，PXE 客户端将通过广播或者通过 &lt;server address&gt; </span><br><span class=\"line\">#           或者 &lt;server_name&gt; 搜索对应类型的适合的启动服务。。</span><br><span class=\"line\">#     示例：pxe-service=x86PC, &quot;Install windows from RIS server&quot;, 1</span><br><span class=\"line\">#           pxe-service=x86PC, &quot;Install windows from RIS server&quot;, 1, 1.2.3.4</span><br><span class=\"line\">#     未指定 &lt;basename&gt;、&lt;bootservicetype&gt; 或者 &lt;bootservicetype&gt; 为 “0”，将从本地启动。</span><br><span class=\"line\">#     示例：pxe-service=x86PC, &quot;Boot from local disk&quot;</span><br><span class=\"line\">#           pxe-service=x86PC, &quot;Boot from local disk&quot;, 0</span><br><span class=\"line\"># 如果指定 &lt;server_name&gt; 将按照 /etc/hosts 中对应的 IP 地址进行轮询负载均衡。  </span><br><span class=\"line\">#pxe-service=[tag:&lt;tag&gt;,]&lt;CSA&gt;,&lt;menu text&gt;[,&lt;basename&gt;|&lt;bootservicetype&gt;][,&lt;server address&gt;|&lt;server_name&gt;]</span><br><span class=\"line\"># 在 PXE 启动后弹出提示，&lt;prompt&gt; 为提示内容，&lt;timeout&gt; 为超时时间，为 0 则立即执行。</span><br><span class=\"line\"># 如果未指定此选项，在有多个启动选项的情况下等待用户选择，不会超时。</span><br><span class=\"line\">#pxe-prompt=[tag:&lt;tag&gt;,]&lt;prompt&gt;[,&lt;timeout&gt;]</span><br><span class=\"line\"># 根据不同的类型使用不同的菜单，使用示例：</span><br><span class=\"line\">#        #pxe-prompt=&quot;What system shall I netboot?&quot;, 120</span><br><span class=\"line\">#        # or with timeout before first available action is taken:</span><br><span class=\"line\">#        pxe-prompt=&quot;Press F8 or Enter key for menu.&quot;, 60</span><br><span class=\"line\">#        pxe-service=x86PC, &quot;Now in x86PC (BIOS mode), boot from local&quot;, 0</span><br><span class=\"line\">#        pxe-service=x86PC, &quot;Now in x86PC (BIOS mode)&quot;, pxelinux</span><br><span class=\"line\">#        pxe-service=PC98, &quot;Now in PC98 mode&quot;, PC98</span><br><span class=\"line\">#        pxe-service=IA64_EFI, &quot;Now in IA64_EFI mode&quot;, IA64_EFI</span><br><span class=\"line\">#        pxe-service=Alpha, &quot;Now in Alpha mode&quot;, Alpha</span><br><span class=\"line\">#        pxe-service=Arc_x86, &quot;Now in Arc_x86 mode&quot;, Arc_x86</span><br><span class=\"line\">#        pxe-service=Intel_Lean_Client, &quot;Now in Intel_Lean_Client mode&quot;, Intel_Lean_Client</span><br><span class=\"line\">#        pxe-service=IA32_EFI, &quot;Now in IA32_EFI mode&quot;, IA32_EFI</span><br><span class=\"line\">#        pxe-service=X86-64_EFI, &quot;Now in X86-64_EFI (UEFI mode), boot from local&quot;, 0</span><br><span class=\"line\">#        pxe-service=X86-64_EFI, &quot;Now in X86-64_EFI (UEFI mode)&quot;, grub/grub-x86_64.efi</span><br><span class=\"line\">#        pxe-service=Xscale_EFI, &quot;Now in Xscale_EFI mode&quot;, Xscale_EFI</span><br><span class=\"line\">#        pxe-service=BC_EFI, &quot;Now in BC_EFI mode&quot;, BC_EFI</span><br><span class=\"line\">#        # CentOS7 系统不支持下列两个选项</span><br><span class=\"line\">#        #pxe-service=ARM32_EFI,&quot;Now in ARM32_EFI mode&quot;,ARM32_EFI</span><br><span class=\"line\">#        #pxe-service=ARM64_EFI,&quot;Now in ARM64_EFI mode&quot;,ARM64_EFI</span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># 默认为150，即最多分配150个ip地址出去，最大1000个ip</span><br><span class=\"line\">#dhcp-lease-max=150</span><br><span class=\"line\"># (IPv4 only) 指定DHCP端口，默认为67和68。如果不指定则为1067和1068，单指定一个，第二个加1</span><br><span class=\"line\">#dhcp-alternate-port[=&lt;server port&gt;[,&lt;client port&gt;]]</span><br><span class=\"line\"># 谨慎使用此选项，避免 IP 地址浪费。(IPv4 only) 允许动态分配 IP 地址给 BOOTP 客户端。</span><br><span class=\"line\"># 注意：BOOTP 客户端获取的 IP 地址是永久的，将无法再次分配给其他客户端。</span><br><span class=\"line\">#bootp-dynamic[=&lt;network-id&gt;[,&lt;network-id&gt;]]</span><br><span class=\"line\"># 谨慎使用此选项。</span><br><span class=\"line\"># 默认情况下 DHCP 服务器使用 ping 的方式进行确保 IP 未被使用的情况下将 IP 地址分配出去。</span><br><span class=\"line\"># 启用此选项将不使用 ping 进行确认。</span><br><span class=\"line\">#no-ping</span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># 记录额外的 dhcp 日志，记录所有发送给 DHCP 客户端的选项（option）以及标签（tag）信息</span><br><span class=\"line\">#log-dhcp</span><br><span class=\"line\"># 禁止记录日常操作日志，错误日志仍然记录。启用 log-dhcp 将覆盖下列选项。</span><br><span class=\"line\">#quiet-dhcp</span><br><span class=\"line\">#quiet-dhcp6</span><br><span class=\"line\">#quiet-ra</span><br><span class=\"line\"> </span><br><span class=\"line\"># 修改 DHCP 默认租约文件路径，默认情况下无需修改</span><br><span class=\"line\">#dhcp-leasefile=/var/lib/dnsmasq/dnsmasq.leases</span><br><span class=\"line\"># (IPv6 only)</span><br><span class=\"line\">#dhcp-duid=&lt;enterprise-id&gt;,&lt;uid&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\">#dhcp-script=&lt;path&gt;</span><br><span class=\"line\">#dhcp-luascript=&lt;path&gt;</span><br><span class=\"line\">#dhcp-scriptuser=root</span><br><span class=\"line\">#script-arp</span><br><span class=\"line\">#leasefile-ro</span><br><span class=\"line\"> </span><br><span class=\"line\">#bridge-interface=&lt;interface&gt;,&lt;alias&gt;[,&lt;alias&gt;]</span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># 给 DHCP 服务器指定 domain 域名信息，也可以给对应的 IP 地址池指定域名。</span><br><span class=\"line\">#     直接指定域名</span><br><span class=\"line\">#     示例：domain=thekelleys.org.uk</span><br><span class=\"line\">#     子网对应的域名</span><br><span class=\"line\">#     示例：domain=wireless.thekelleys.org.uk,192.168.2.0/24</span><br><span class=\"line\">#     ip范围对应的域名</span><br><span class=\"line\">#     示例：domain=reserved.thekelleys.org.uk,192.68.3.100,192.168.3.200</span><br><span class=\"line\">#domain=&lt;domain&gt;[,&lt;address range&gt;[,local]]</span><br><span class=\"line\"># 在默认情况下 dnsmasq 插入普通的客户端主机名到 DNS 中。</span><br><span class=\"line\"># 在这种情况下主机名必须唯一，即使两个客户端具有不同的域名后缀。</span><br><span class=\"line\"># 如果第二个客户端使用了相同的主机名，DNS 查询将自动更新为第二个客户端的 IP 地址。</span><br><span class=\"line\"># 如果设置了 dhcp-fqdn 选项，普通的主机名将不再插入到 DNS 中去，</span><br><span class=\"line\"># 仅允许合格的具有域名后缀的主机名插入到 DNS 服务器中。</span><br><span class=\"line\"># 指定此选项需同时指定不含 &lt;address range&gt; 地址范围的 domain 选项。</span><br><span class=\"line\">#dhcp-fqdn</span><br><span class=\"line\"># 通常情况下分配 DHCP 租约后，dnsmasq 设置 FQDN 选项告诉客户端不要尝试 DDNS 更新主机名与 IP 地址。</span><br><span class=\"line\"># 这是因为  name-IP 已自动添加到 dnsmasq 的 DNS 视图中的。</span><br><span class=\"line\"># 设置此选项将允许客户端 DDNS 更新，</span><br><span class=\"line\"># 在 windows 下允许客户端更新 windows AD 服务器是非常有用的。</span><br><span class=\"line\"># 参看  RFC 4702 。</span><br><span class=\"line\">#dhcp-client-update</span><br><span class=\"line\"> </span><br><span class=\"line\">#enable-ra</span><br><span class=\"line\">#ra-param=&lt;interface&gt;,[high|low],[[&lt;ra-interval&gt;],&lt;router lifetime&gt;]</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\">#</span><br><span class=\"line\">#        TFTP 选项</span><br><span class=\"line\">#</span><br><span class=\"line\">##############################################################################</span><br><span class=\"line\"># 对于绝大多数的配置，仅需指定 enable-tftp 和 tftp-root 选项即可。</span><br><span class=\"line\"># 是否启用内置的 tftp 服务器，可以指定多个逗号分隔的网络接口</span><br><span class=\"line\">#enable-tftp[=&lt;interface&gt;[,&lt;interface&gt;]]</span><br><span class=\"line\">#enable-tftp</span><br><span class=\"line\">#enable-tftp=enp3s0,lo</span><br><span class=\"line\"># 指定 tftp 的根目录，也就是寻找传输文件时使用的相对路径，可以附加接口，</span><br><span class=\"line\">#tftp-root=&lt;directory&gt;[,&lt;interface&gt;]</span><br><span class=\"line\">#tftp-root=/var/lib/tftpboot/</span><br><span class=\"line\"># 如果取消注释，那么即使指定的 tftp-root 无法访问，仍然启动 tftp 服务。</span><br><span class=\"line\">#tftp-no-fail</span><br><span class=\"line\"># 附加客户端的 IP 地址作为文件路径。此选项仅在正确设置了 tftp-root 的情况下可用，</span><br><span class=\"line\"># 示例：如果 tftp-root=/tftp，客户端为 192.168.1.15 请求 myfile.txt 文件时，</span><br><span class=\"line\"># 将优先请求 /tftp/192.168.1.15/myfile.txt 文件， 其次是 /tftp/myfile.txt 文件。</span><br><span class=\"line\"># 感觉没什么用。</span><br><span class=\"line\">#tftp-unique-root</span><br><span class=\"line\"># 启用安全模式，启用此选项，仅允许 tftp 进程访问属主为自己的文件。</span><br><span class=\"line\"># 不启用此选项，允许访问所有 tftp 进程属主可读取的文件。</span><br><span class=\"line\"># 如果 dnsmasq 是以 root 用户运行，tftp-secure 选项将允许访问全局可读的文件。</span><br><span class=\"line\"># 一般情况下不推荐以 root 用户运行 dnsmasq。</span><br><span class=\"line\"># 在指定了 tftp-root 的情况下并不是很重要。</span><br><span class=\"line\">#tftp-secure</span><br><span class=\"line\"># 将所有文件请求转换为小写。对于 Windows 客户端来说非常有用，建议开启此项。</span><br><span class=\"line\"># 注意：dnsmasq 的 TFTP 服务器总是将文件路径中的“\\”转换为“/”。</span><br><span class=\"line\">#tftp-lowercase</span><br><span class=\"line\"># 允许最大的连接数，默认为 50 。</span><br><span class=\"line\"># 如果将连接数设置的很大，需注意每个进程的最大文件描述符限制，详见文档手册。</span><br><span class=\"line\">#tftp-max=&lt;connections&gt;</span><br><span class=\"line\">#tftp-max=50</span><br><span class=\"line\"># 设置传输时的 MTU 值，建议不设置或按需设置。</span><br><span class=\"line\"># 如果设定的值大于网络接口的 MTU 值，将按照网络接口的 MTU 值自动分片传输（不推荐）。</span><br><span class=\"line\">#tftp-mtu=&lt;mtu size&gt;</span><br><span class=\"line\"># 停止 tftp 服务器与客户端协商 &quot;blocksize&quot; 选项。启用后，防止一些古怪的客户端出问题。</span><br><span class=\"line\">#tftp-no-blocksize</span><br><span class=\"line\"># 指定 tftp 的连接端口的范围，方便防火墙部署。</span><br><span class=\"line\"># tftp 侦听在 69/udp ，连接端口默认是由系统自动分配的，</span><br><span class=\"line\"># 非 root 用户运行时指定的连接端口号需大于 1025 最大 65535。</span><br><span class=\"line\">#tftp-port-range=&lt;start&gt;,&lt;end&gt;</span><br><span class=\"line\">###############################################################################</span><br><span class=\"line\">#conf-dir=&lt;directory&gt;[,&lt;file-extension&gt;......]</span><br><span class=\"line\">#conf-file=/etc/dnsmasq.more.conf</span><br><span class=\"line\">conf-dir=/etc/dnsmasq.d</span><br><span class=\"line\">#servers-file=&lt;file&gt;</span><br></pre></td></tr></table></figure></p>"},{"title":"electron + vue项目实现打印小票功能","toc":false,"date":"2019-03-27T15:13:14.000Z","_content":"\n前言：该文章需要一定的electron基础同学。如需了解更多相关信息，请移步electron官方文档。\n一、需求：\n公司项目需要通过electron调用系统打印机，实现打印小票的功能。\n\n<!-- more -->\n\n二、分析：\nelectron打印大概有两种：\n\n> 第一种：通过window的webcontent对象，使用此种方式需要单独开出一个打印的窗口，可以将该窗口隐藏，但是通信调用相对复杂。\n第二种：使用页面的webview元素调用打印，可以将webview隐藏在调用的页面中，通信方式比较简单。\n\n两个对象调用打印方法的使用方式都一样。\n\n本文是通过第二种方法实现静默打印。\n\n三、实现过程：\n1、要实现打印功能，首先要知道我们的设备上有哪些打印机。方法是：在渲染线程通过electron的ipcRenderer对象发送事件到主线程获取。（本文的渲染线程可以当做为一个print.vue文件）\n（1）主线程（electron.js）伪代码如下：\n```javascript\n//引入electron\nimport electron from 'electron';\n```\n\n\n//创建一个浏览器对象\n```javascript\nconst window = new electron.BrowserWindow({\n    width,\n    height,\n    frame: false,\n    show: false,\n    backgroundColor: '#4b5b79',\n    minWidth: 1024,\n    minHeight: 768,\n    webPreferences: { webSecurity: false },\n});\n  \n//在主线程下，通过ipcMain对象监听渲染线程传过来的getPrinterList事件\nelectron.ipcMain.on('getPrinterList', (event) => {\n    //主线程获取打印机列表\n    const list = window.webContents.getPrinters();\n    \n    //通过webContents发送事件到渲染线程，同时将打印机列表也传过去\n    window.webContents.send('getPrinterList', list);\n});\n```\n\n（2）渲染线程(print.vue文件)伪代码如下：\n```html\n<template>\n</template>\n<script>\n    //引入ipcRenderer对象,该对象和主线程的ipcMain通讯\n    import { ipcRenderer } from 'electron';\n    \n    //渲染线程主动发送getPrinterList事件到主线程请求打印机列表\n    ipcRenderer.send('getPrinterList'); \n    \n    //监听主线程获取到打印机列表后的回调\n      ipcRenderer.once('getPrinterList', (event, data) => {\n        //data就是打印机列表\n        this.printList = data;\n      });\n</script>\n\n//获取打印机列表完成\n```\n\n2、（重头戏来了）获取打印机列表后，就需要通过electron自带的\"webview\"标签实现小票排版。\"webview\"是什么？可以把它当做\"iframe\"标签，它里面显示的是你需要打印的内容。\n（1）使用\"webview\"之前，需要新建一个print.html文件，把你要打印的内容通过print.html显示出来。我们项目的需求是将要打印的内容通过canvas画出后，再将canvas转成图片资源（base64），然后放到\"webview\"里面显示，伪代码如下：\n```html\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>Document</title>\n  <style>\n  //@page样式是用来设置打印机打印出来的样式，例如设置小票外边距样式\n    @page {\n      margin: 0px;\n    }\n  </style>\n</head>\n<body id='bd'>\n</body>\n<script>\n    //引入ipcRenderer对象\n  const {ipcRenderer} = require('electron')\n  \n  //监听渲染线程传过来的webview-print-render事件\n  ipcRenderer.on('webview-print-render', (event, deviceInfo) => {\n    // 动态创建一个img标签，然后插入到<body>中。deviceInfo是渲染线程传过来的数据\n    let html = '';\n    html = `<img src=\"${deviceInfo.imgSource}\"\n     width=\"${deviceInfo.imgWidth}px\"\n     height=\"${deviceInfo.imgHeight}px\">`;\n    document.getElementById('bd').innerHTML = html;\n    \n    //当图片插入到页面后，通过ipcRenderer对象的sendToHost方法和渲染线程通讯，告诉渲染线程打印的内容已经准备完毕，请开始打印操作\n    ipcRenderer.sendToHost('webview-print-do');\n  });\n</script>\n</html>\n\n```\n\n复制代码\n（2）html文件创建完成后，将print.html引入到《webview src=\"./xxxx/print.html\"》。该\"webview\"需要显式的定义在print.vue文件中，但需要将它用v-show=\"false\"隐藏，不能用v-if，因为我们需要\"webview\"的dom节点存在于页面上，只是不展示而已。\n```html\n<template>\n  <div v-show=\"false\">\n    <webview ref=\"printWebview\" src=\"./xxxx/print.html\" nodeintegration/>\n  </div>\n</template>\n\n<script>\nmounted() {\n    //当vue节点渲染完成后，获取<webview>节点\n    const webview = this.$refs.printWebview;\n    \n    //监听<webview>里面的消息，也就是监听print.html里面的ipcRenderer.sendToHost发送的事件，当该事件发送成功后就会进入下面的回调事件中执行打印操作。\n    webview.addEventListener('ipc-message', (event) => {\n      if (event.channel === 'webview-print-do') {\n        //如果收到<webview>传过来的事件，名为\"webview-print-do\"，就执行 webview.print打印方法，打印<webview>里面的内容。\n        webview.print(\n          {\n            //是否是静默打印\n            silent: true,\n            printBackground: true,\n            //打印机的名称，就是本文一开始获得的打印机列表其中一个\n            deviceName: 'xxx',\n          },\n          (data) => {\n            //这个回调是打印后的回调事件，data为true就是打印成功，为false就打印失败\n            console.log('webview success', data);\n          },\n        );\n      }\n    });\n},\n</script>\n```\n\n到这里本electron调用打印机的功能就实现了。但本文章有很多细节没有讲到，只是大概的给了一个思路，如果写的有不对之处，还望见谅。\n\n作者：ding1379\n链接：https://juejin.im/post/5bf8b580e51d4522143b7b03\n来源：掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n","source":"_posts/electron-vue项目实现打印小票功能.md","raw":"---\ntitle: electron + vue项目实现打印小票功能\ntags:\n  - electron\ncategories:\n  - Web开发\ntoc: false\ndate: 2019-03-27 23:13:14\n---\n\n前言：该文章需要一定的electron基础同学。如需了解更多相关信息，请移步electron官方文档。\n一、需求：\n公司项目需要通过electron调用系统打印机，实现打印小票的功能。\n\n<!-- more -->\n\n二、分析：\nelectron打印大概有两种：\n\n> 第一种：通过window的webcontent对象，使用此种方式需要单独开出一个打印的窗口，可以将该窗口隐藏，但是通信调用相对复杂。\n第二种：使用页面的webview元素调用打印，可以将webview隐藏在调用的页面中，通信方式比较简单。\n\n两个对象调用打印方法的使用方式都一样。\n\n本文是通过第二种方法实现静默打印。\n\n三、实现过程：\n1、要实现打印功能，首先要知道我们的设备上有哪些打印机。方法是：在渲染线程通过electron的ipcRenderer对象发送事件到主线程获取。（本文的渲染线程可以当做为一个print.vue文件）\n（1）主线程（electron.js）伪代码如下：\n```javascript\n//引入electron\nimport electron from 'electron';\n```\n\n\n//创建一个浏览器对象\n```javascript\nconst window = new electron.BrowserWindow({\n    width,\n    height,\n    frame: false,\n    show: false,\n    backgroundColor: '#4b5b79',\n    minWidth: 1024,\n    minHeight: 768,\n    webPreferences: { webSecurity: false },\n});\n  \n//在主线程下，通过ipcMain对象监听渲染线程传过来的getPrinterList事件\nelectron.ipcMain.on('getPrinterList', (event) => {\n    //主线程获取打印机列表\n    const list = window.webContents.getPrinters();\n    \n    //通过webContents发送事件到渲染线程，同时将打印机列表也传过去\n    window.webContents.send('getPrinterList', list);\n});\n```\n\n（2）渲染线程(print.vue文件)伪代码如下：\n```html\n<template>\n</template>\n<script>\n    //引入ipcRenderer对象,该对象和主线程的ipcMain通讯\n    import { ipcRenderer } from 'electron';\n    \n    //渲染线程主动发送getPrinterList事件到主线程请求打印机列表\n    ipcRenderer.send('getPrinterList'); \n    \n    //监听主线程获取到打印机列表后的回调\n      ipcRenderer.once('getPrinterList', (event, data) => {\n        //data就是打印机列表\n        this.printList = data;\n      });\n</script>\n\n//获取打印机列表完成\n```\n\n2、（重头戏来了）获取打印机列表后，就需要通过electron自带的\"webview\"标签实现小票排版。\"webview\"是什么？可以把它当做\"iframe\"标签，它里面显示的是你需要打印的内容。\n（1）使用\"webview\"之前，需要新建一个print.html文件，把你要打印的内容通过print.html显示出来。我们项目的需求是将要打印的内容通过canvas画出后，再将canvas转成图片资源（base64），然后放到\"webview\"里面显示，伪代码如下：\n```html\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>Document</title>\n  <style>\n  //@page样式是用来设置打印机打印出来的样式，例如设置小票外边距样式\n    @page {\n      margin: 0px;\n    }\n  </style>\n</head>\n<body id='bd'>\n</body>\n<script>\n    //引入ipcRenderer对象\n  const {ipcRenderer} = require('electron')\n  \n  //监听渲染线程传过来的webview-print-render事件\n  ipcRenderer.on('webview-print-render', (event, deviceInfo) => {\n    // 动态创建一个img标签，然后插入到<body>中。deviceInfo是渲染线程传过来的数据\n    let html = '';\n    html = `<img src=\"${deviceInfo.imgSource}\"\n     width=\"${deviceInfo.imgWidth}px\"\n     height=\"${deviceInfo.imgHeight}px\">`;\n    document.getElementById('bd').innerHTML = html;\n    \n    //当图片插入到页面后，通过ipcRenderer对象的sendToHost方法和渲染线程通讯，告诉渲染线程打印的内容已经准备完毕，请开始打印操作\n    ipcRenderer.sendToHost('webview-print-do');\n  });\n</script>\n</html>\n\n```\n\n复制代码\n（2）html文件创建完成后，将print.html引入到《webview src=\"./xxxx/print.html\"》。该\"webview\"需要显式的定义在print.vue文件中，但需要将它用v-show=\"false\"隐藏，不能用v-if，因为我们需要\"webview\"的dom节点存在于页面上，只是不展示而已。\n```html\n<template>\n  <div v-show=\"false\">\n    <webview ref=\"printWebview\" src=\"./xxxx/print.html\" nodeintegration/>\n  </div>\n</template>\n\n<script>\nmounted() {\n    //当vue节点渲染完成后，获取<webview>节点\n    const webview = this.$refs.printWebview;\n    \n    //监听<webview>里面的消息，也就是监听print.html里面的ipcRenderer.sendToHost发送的事件，当该事件发送成功后就会进入下面的回调事件中执行打印操作。\n    webview.addEventListener('ipc-message', (event) => {\n      if (event.channel === 'webview-print-do') {\n        //如果收到<webview>传过来的事件，名为\"webview-print-do\"，就执行 webview.print打印方法，打印<webview>里面的内容。\n        webview.print(\n          {\n            //是否是静默打印\n            silent: true,\n            printBackground: true,\n            //打印机的名称，就是本文一开始获得的打印机列表其中一个\n            deviceName: 'xxx',\n          },\n          (data) => {\n            //这个回调是打印后的回调事件，data为true就是打印成功，为false就打印失败\n            console.log('webview success', data);\n          },\n        );\n      }\n    });\n},\n</script>\n```\n\n到这里本electron调用打印机的功能就实现了。但本文章有很多细节没有讲到，只是大概的给了一个思路，如果写的有不对之处，还望见谅。\n\n作者：ding1379\n链接：https://juejin.im/post/5bf8b580e51d4522143b7b03\n来源：掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n","slug":"electron-vue项目实现打印小票功能","published":1,"updated":"2019-11-07T01:59:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznyc003nh5s6v5qnvbph","content":"<p>前言：该文章需要一定的electron基础同学。如需了解更多相关信息，请移步electron官方文档。<br>一、需求：<br>公司项目需要通过electron调用系统打印机，实现打印小票的功能。</p>\n<a id=\"more\"></a>\n<p>二、分析：<br>electron打印大概有两种：</p>\n<blockquote>\n<p>第一种：通过window的webcontent对象，使用此种方式需要单独开出一个打印的窗口，可以将该窗口隐藏，但是通信调用相对复杂。<br>第二种：使用页面的webview元素调用打印，可以将webview隐藏在调用的页面中，通信方式比较简单。</p>\n</blockquote>\n<p>两个对象调用打印方法的使用方式都一样。</p>\n<p>本文是通过第二种方法实现静默打印。</p>\n<p>三、实现过程：<br>1、要实现打印功能，首先要知道我们的设备上有哪些打印机。方法是：在渲染线程通过electron的ipcRenderer对象发送事件到主线程获取。（本文的渲染线程可以当做为一个print.vue文件）<br>（1）主线程（electron.js）伪代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//引入electron</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> electron <span class=\"keyword\">from</span> <span class=\"string\">'electron'</span>;</span><br></pre></td></tr></table></figure></p>\n<p>//创建一个浏览器对象<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">window</span> = <span class=\"keyword\">new</span> electron.BrowserWindow(&#123;</span><br><span class=\"line\">    width,</span><br><span class=\"line\">    height,</span><br><span class=\"line\">    frame: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    show: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    backgroundColor: <span class=\"string\">'#4b5b79'</span>,</span><br><span class=\"line\">    minWidth: <span class=\"number\">1024</span>,</span><br><span class=\"line\">    minHeight: <span class=\"number\">768</span>,</span><br><span class=\"line\">    webPreferences: &#123; <span class=\"attr\">webSecurity</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//在主线程下，通过ipcMain对象监听渲染线程传过来的getPrinterList事件</span></span><br><span class=\"line\">electron.ipcMain.on(<span class=\"string\">'getPrinterList'</span>, (event) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">//主线程获取打印机列表</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> list = <span class=\"built_in\">window</span>.webContents.getPrinters();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//通过webContents发送事件到渲染线程，同时将打印机列表也传过去</span></span><br><span class=\"line\">    <span class=\"built_in\">window</span>.webContents.send(<span class=\"string\">'getPrinterList'</span>, list);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>（2）渲染线程(print.vue文件)伪代码如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//引入ipcRenderer对象,该对象和主线程的ipcMain通讯</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">import</span> &#123; ipcRenderer &#125; <span class=\"keyword\">from</span> <span class=\"string\">'electron'</span>;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//渲染线程主动发送getPrinterList事件到主线程请求打印机列表</span></span></span><br><span class=\"line\"><span class=\"javascript\">    ipcRenderer.send(<span class=\"string\">'getPrinterList'</span>); </span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//监听主线程获取到打印机列表后的回调</span></span></span><br><span class=\"line\"><span class=\"javascript\">      ipcRenderer.once(<span class=\"string\">'getPrinterList'</span>, (event, data) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//data就是打印机列表</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.printList = data;</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">//获取打印机列表完成</span><br></pre></td></tr></table></figure></p>\n<p>2、（重头戏来了）获取打印机列表后，就需要通过electron自带的”webview”标签实现小票排版。”webview”是什么？可以把它当做”iframe”标签，它里面显示的是你需要打印的内容。<br>（1）使用”webview”之前，需要新建一个print.html文件，把你要打印的内容通过print.html显示出来。我们项目的需求是将要打印的内容通过canvas画出后，再将canvas转成图片资源（base64），然后放到”webview”里面显示，伪代码如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  //@page样式是用来设置打印机打印出来的样式，例如设置小票外边距样式</span><br><span class=\"line\">    @page &#123;</span><br><span class=\"line\">      margin: 0px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">id</span>=<span class=\"string\">'bd'</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//引入ipcRenderer对象</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">const</span> &#123;ipcRenderer&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron'</span>)</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">//监听渲染线程传过来的webview-print-render事件</span></span></span><br><span class=\"line\"><span class=\"javascript\">  ipcRenderer.on(<span class=\"string\">'webview-print-render'</span>, (event, deviceInfo) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 动态创建一个img标签，然后插入到&lt;body&gt;中。deviceInfo是渲染线程传过来的数据</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> html = <span class=\"string\">''</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">    html = <span class=\"string\">`&lt;img src=\"<span class=\"subst\">$&#123;deviceInfo.imgSource&#125;</span>\"</span></span></span><br><span class=\"line\"><span class=\"javascript\">     width=<span class=\"string\">\"$&#123;deviceInfo.imgWidth&#125;px\"</span></span></span><br><span class=\"line\"><span class=\"javascript\">     height=<span class=\"string\">\"$&#123;deviceInfo.imgHeight&#125;px\"</span>&gt;<span class=\"string\">`;</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'bd'</span>).innerHTML = html;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//当图片插入到页面后，通过ipcRenderer对象的sendToHost方法和渲染线程通讯，告诉渲染线程打印的内容已经准备完毕，请开始打印操作</span></span></span><br><span class=\"line\"><span class=\"javascript\">    ipcRenderer.sendToHost(<span class=\"string\">'webview-print-do'</span>);</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>复制代码<br>（2）html文件创建完成后，将print.html引入到《webview src=”./xxxx/print.html”》。该”webview”需要显式的定义在print.vue文件中，但需要将它用v-show=”false”隐藏，不能用v-if，因为我们需要”webview”的dom节点存在于页面上，只是不展示而已。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">webview</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"printWebview\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./xxxx/print.html\"</span> <span class=\"attr\">nodeintegration</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">mounted() &#123;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//当vue节点渲染完成后，获取&lt;webview&gt;节点</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> webview = <span class=\"keyword\">this</span>.$refs.printWebview;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//监听&lt;webview&gt;里面的消息，也就是监听print.html里面的ipcRenderer.sendToHost发送的事件，当该事件发送成功后就会进入下面的回调事件中执行打印操作。</span></span></span><br><span class=\"line\"><span class=\"javascript\">    webview.addEventListener(<span class=\"string\">'ipc-message'</span>, (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">if</span> (event.channel === <span class=\"string\">'webview-print-do'</span>) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        //如果收到<span class=\"tag\">&lt;<span class=\"name\">webview</span>&gt;</span>传过来的事件，名为\"webview-print-do\"，就执行 webview.print打印方法，打印<span class=\"tag\">&lt;<span class=\"name\">webview</span>&gt;</span>里面的内容。</span></span><br><span class=\"line\">        webview.print(</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">//是否是静默打印</span></span></span><br><span class=\"line\"><span class=\"javascript\">            silent: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            printBackground: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">//打印机的名称，就是本文一开始获得的打印机列表其中一个</span></span></span><br><span class=\"line\"><span class=\"javascript\">            deviceName: <span class=\"string\">'xxx'</span>,</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          (data) =&gt; &#123;</span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">//这个回调是打印后的回调事件，data为true就是打印成功，为false就打印失败</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'webview success'</span>, data);</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>到这里本electron调用打印机的功能就实现了。但本文章有很多细节没有讲到，只是大概的给了一个思路，如果写的有不对之处，还望见谅。</p>\n<p>作者：ding1379<br>链接：<a href=\"https://juejin.im/post/5bf8b580e51d4522143b7b03\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5bf8b580e51d4522143b7b03</a><br>来源：掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n","site":{"data":{}},"excerpt":"<p>前言：该文章需要一定的electron基础同学。如需了解更多相关信息，请移步electron官方文档。<br>一、需求：<br>公司项目需要通过electron调用系统打印机，实现打印小票的功能。</p>","more":"<p>二、分析：<br>electron打印大概有两种：</p>\n<blockquote>\n<p>第一种：通过window的webcontent对象，使用此种方式需要单独开出一个打印的窗口，可以将该窗口隐藏，但是通信调用相对复杂。<br>第二种：使用页面的webview元素调用打印，可以将webview隐藏在调用的页面中，通信方式比较简单。</p>\n</blockquote>\n<p>两个对象调用打印方法的使用方式都一样。</p>\n<p>本文是通过第二种方法实现静默打印。</p>\n<p>三、实现过程：<br>1、要实现打印功能，首先要知道我们的设备上有哪些打印机。方法是：在渲染线程通过electron的ipcRenderer对象发送事件到主线程获取。（本文的渲染线程可以当做为一个print.vue文件）<br>（1）主线程（electron.js）伪代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//引入electron</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> electron <span class=\"keyword\">from</span> <span class=\"string\">'electron'</span>;</span><br></pre></td></tr></table></figure></p>\n<p>//创建一个浏览器对象<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">window</span> = <span class=\"keyword\">new</span> electron.BrowserWindow(&#123;</span><br><span class=\"line\">    width,</span><br><span class=\"line\">    height,</span><br><span class=\"line\">    frame: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    show: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    backgroundColor: <span class=\"string\">'#4b5b79'</span>,</span><br><span class=\"line\">    minWidth: <span class=\"number\">1024</span>,</span><br><span class=\"line\">    minHeight: <span class=\"number\">768</span>,</span><br><span class=\"line\">    webPreferences: &#123; <span class=\"attr\">webSecurity</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//在主线程下，通过ipcMain对象监听渲染线程传过来的getPrinterList事件</span></span><br><span class=\"line\">electron.ipcMain.on(<span class=\"string\">'getPrinterList'</span>, (event) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">//主线程获取打印机列表</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> list = <span class=\"built_in\">window</span>.webContents.getPrinters();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//通过webContents发送事件到渲染线程，同时将打印机列表也传过去</span></span><br><span class=\"line\">    <span class=\"built_in\">window</span>.webContents.send(<span class=\"string\">'getPrinterList'</span>, list);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>（2）渲染线程(print.vue文件)伪代码如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//引入ipcRenderer对象,该对象和主线程的ipcMain通讯</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">import</span> &#123; ipcRenderer &#125; <span class=\"keyword\">from</span> <span class=\"string\">'electron'</span>;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//渲染线程主动发送getPrinterList事件到主线程请求打印机列表</span></span></span><br><span class=\"line\"><span class=\"javascript\">    ipcRenderer.send(<span class=\"string\">'getPrinterList'</span>); </span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//监听主线程获取到打印机列表后的回调</span></span></span><br><span class=\"line\"><span class=\"javascript\">      ipcRenderer.once(<span class=\"string\">'getPrinterList'</span>, (event, data) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//data就是打印机列表</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.printList = data;</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">//获取打印机列表完成</span><br></pre></td></tr></table></figure></p>\n<p>2、（重头戏来了）获取打印机列表后，就需要通过electron自带的”webview”标签实现小票排版。”webview”是什么？可以把它当做”iframe”标签，它里面显示的是你需要打印的内容。<br>（1）使用”webview”之前，需要新建一个print.html文件，把你要打印的内容通过print.html显示出来。我们项目的需求是将要打印的内容通过canvas画出后，再将canvas转成图片资源（base64），然后放到”webview”里面显示，伪代码如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  //@page样式是用来设置打印机打印出来的样式，例如设置小票外边距样式</span><br><span class=\"line\">    @page &#123;</span><br><span class=\"line\">      margin: 0px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">id</span>=<span class=\"string\">'bd'</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//引入ipcRenderer对象</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">const</span> &#123;ipcRenderer&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron'</span>)</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">//监听渲染线程传过来的webview-print-render事件</span></span></span><br><span class=\"line\"><span class=\"javascript\">  ipcRenderer.on(<span class=\"string\">'webview-print-render'</span>, (event, deviceInfo) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 动态创建一个img标签，然后插入到&lt;body&gt;中。deviceInfo是渲染线程传过来的数据</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> html = <span class=\"string\">''</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">    html = <span class=\"string\">`&lt;img src=\"<span class=\"subst\">$&#123;deviceInfo.imgSource&#125;</span>\"</span></span></span><br><span class=\"line\"><span class=\"javascript\">     width=<span class=\"string\">\"$&#123;deviceInfo.imgWidth&#125;px\"</span></span></span><br><span class=\"line\"><span class=\"javascript\">     height=<span class=\"string\">\"$&#123;deviceInfo.imgHeight&#125;px\"</span>&gt;<span class=\"string\">`;</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'bd'</span>).innerHTML = html;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//当图片插入到页面后，通过ipcRenderer对象的sendToHost方法和渲染线程通讯，告诉渲染线程打印的内容已经准备完毕，请开始打印操作</span></span></span><br><span class=\"line\"><span class=\"javascript\">    ipcRenderer.sendToHost(<span class=\"string\">'webview-print-do'</span>);</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>复制代码<br>（2）html文件创建完成后，将print.html引入到《webview src=”./xxxx/print.html”》。该”webview”需要显式的定义在print.vue文件中，但需要将它用v-show=”false”隐藏，不能用v-if，因为我们需要”webview”的dom节点存在于页面上，只是不展示而已。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">webview</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"printWebview\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./xxxx/print.html\"</span> <span class=\"attr\">nodeintegration</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">mounted() &#123;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//当vue节点渲染完成后，获取&lt;webview&gt;节点</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> webview = <span class=\"keyword\">this</span>.$refs.printWebview;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//监听&lt;webview&gt;里面的消息，也就是监听print.html里面的ipcRenderer.sendToHost发送的事件，当该事件发送成功后就会进入下面的回调事件中执行打印操作。</span></span></span><br><span class=\"line\"><span class=\"javascript\">    webview.addEventListener(<span class=\"string\">'ipc-message'</span>, (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">if</span> (event.channel === <span class=\"string\">'webview-print-do'</span>) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        //如果收到<span class=\"tag\">&lt;<span class=\"name\">webview</span>&gt;</span>传过来的事件，名为\"webview-print-do\"，就执行 webview.print打印方法，打印<span class=\"tag\">&lt;<span class=\"name\">webview</span>&gt;</span>里面的内容。</span></span><br><span class=\"line\">        webview.print(</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">//是否是静默打印</span></span></span><br><span class=\"line\"><span class=\"javascript\">            silent: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            printBackground: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">//打印机的名称，就是本文一开始获得的打印机列表其中一个</span></span></span><br><span class=\"line\"><span class=\"javascript\">            deviceName: <span class=\"string\">'xxx'</span>,</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          (data) =&gt; &#123;</span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">//这个回调是打印后的回调事件，data为true就是打印成功，为false就打印失败</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'webview success'</span>, data);</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>到这里本electron调用打印机的功能就实现了。但本文章有很多细节没有讲到，只是大概的给了一个思路，如果写的有不对之处，还望见谅。</p>\n<p>作者：ding1379<br>链接：<a href=\"https://juejin.im/post/5bf8b580e51d4522143b7b03\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5bf8b580e51d4522143b7b03</a><br>来源：掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>"},{"title":"electron开发实践-快速了解electron是什么","toc":false,"date":"2019-07-02T06:08:06.000Z","_content":"\n## 大纲\n- 目的\n- electron能做什么\n- 为什么使用electron\n- 如何更好的使用electron\n\n## 目的\n当有人问你能不能开发桌面应用的时候你的回答应该是：“可以，目前我们已经可以使用web技术通过electron框架，创建交互和体验都非常不错的桌面应用了”\n\n<!-- more -->\n\n## electron能做什么\n定义：electron能够使用javascript，html和css构建跨平台的桌面应用。\n\n从定义上我们知道用js、css、html就能创建桌面应用，同时我们也可以使用vue+webpack等框架来提高开发效率，开发一个桌面应用像开发web页面一样。\n\n它能够做浏览器做不到的部分，比如更方便的文件操作，获取系统的各种信息和状态等。\n![image.png](http://blogimage.houjiyi.com/FnHGxVyS5oJfNLKvFYs9ShKLWZqw)\n\n开源、跨平台，已经有非常多的应用使用electron来开发，它的存在使你不用再为不同平台独立开发而烦恼，它能够一套代码运行在windows、macos、linux三个平台上\n\n## 为什么使用electron\n一个工具或者框架的产生一定是解决了某个技术上的痛点，electron也不例外，不同平台的桌面应用使用不同语言进行开发，维护发版等非业务细节工作量繁重。electron能够解决这个问题，或者说他给了一个相对easy的解决方案，一套代码运行在三端，打包发布、自动更新都提供了相应的方式，开发者使用这个框架能够极大提高开发体验，尤其是web开发者。\n\n原理：用浏览器将web应用打包成一个桌面应用。\n\n优势：\n1. Web技术\n2. 开源\n3. 跨平台\n4. 化繁为简：自动更新、原生菜单和通知、崩溃报告、调试和性能分析、windows安装程序\n\n## 如何更好的使用electron\n\n既然我们是使用开发web应用的方式来开发electron，这里换句话说就是如何更好的使用web技术来开发electron，我们将最新的前端开发方式与electron结合，也就能够大大提高我们的开发效率，同时技术栈只需要简单扩展就达到了能够开发桌面应用的目的。\n\n[electron-vue](electron-vue) 框架目前已经有人完成，其思路就是将vue单页应用的开发方式和electron相结合，使得开发人员在使用electron的时候经常感觉自己是在开发一个web应用。\n\n只有当与系统进行交互或者打包发版的时候才会用到electron提到的功能。\n","source":"_posts/electron开发实践-快速了解electron是什么.md","raw":"---\ntitle: electron开发实践-快速了解electron是什么\ntags:\n  - 知识点备忘\ncategories:\n  - Web开发\ntoc: false\ndate: 2019-07-02 14:08:06\n---\n\n## 大纲\n- 目的\n- electron能做什么\n- 为什么使用electron\n- 如何更好的使用electron\n\n## 目的\n当有人问你能不能开发桌面应用的时候你的回答应该是：“可以，目前我们已经可以使用web技术通过electron框架，创建交互和体验都非常不错的桌面应用了”\n\n<!-- more -->\n\n## electron能做什么\n定义：electron能够使用javascript，html和css构建跨平台的桌面应用。\n\n从定义上我们知道用js、css、html就能创建桌面应用，同时我们也可以使用vue+webpack等框架来提高开发效率，开发一个桌面应用像开发web页面一样。\n\n它能够做浏览器做不到的部分，比如更方便的文件操作，获取系统的各种信息和状态等。\n![image.png](http://blogimage.houjiyi.com/FnHGxVyS5oJfNLKvFYs9ShKLWZqw)\n\n开源、跨平台，已经有非常多的应用使用electron来开发，它的存在使你不用再为不同平台独立开发而烦恼，它能够一套代码运行在windows、macos、linux三个平台上\n\n## 为什么使用electron\n一个工具或者框架的产生一定是解决了某个技术上的痛点，electron也不例外，不同平台的桌面应用使用不同语言进行开发，维护发版等非业务细节工作量繁重。electron能够解决这个问题，或者说他给了一个相对easy的解决方案，一套代码运行在三端，打包发布、自动更新都提供了相应的方式，开发者使用这个框架能够极大提高开发体验，尤其是web开发者。\n\n原理：用浏览器将web应用打包成一个桌面应用。\n\n优势：\n1. Web技术\n2. 开源\n3. 跨平台\n4. 化繁为简：自动更新、原生菜单和通知、崩溃报告、调试和性能分析、windows安装程序\n\n## 如何更好的使用electron\n\n既然我们是使用开发web应用的方式来开发electron，这里换句话说就是如何更好的使用web技术来开发electron，我们将最新的前端开发方式与electron结合，也就能够大大提高我们的开发效率，同时技术栈只需要简单扩展就达到了能够开发桌面应用的目的。\n\n[electron-vue](electron-vue) 框架目前已经有人完成，其思路就是将vue单页应用的开发方式和electron相结合，使得开发人员在使用electron的时候经常感觉自己是在开发一个web应用。\n\n只有当与系统进行交互或者打包发版的时候才会用到electron提到的功能。\n","slug":"electron开发实践-快速了解electron是什么","published":1,"updated":"2019-11-07T01:59:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznye003qh5s6948jsczo","content":"<h2 id=\"大纲\"><a href=\"#大纲\" class=\"headerlink\" title=\"大纲\"></a>大纲</h2><ul>\n<li>目的</li>\n<li>electron能做什么</li>\n<li>为什么使用electron</li>\n<li>如何更好的使用electron</li>\n</ul>\n<h2 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h2><p>当有人问你能不能开发桌面应用的时候你的回答应该是：“可以，目前我们已经可以使用web技术通过electron框架，创建交互和体验都非常不错的桌面应用了”</p>\n<a id=\"more\"></a>\n<h2 id=\"electron能做什么\"><a href=\"#electron能做什么\" class=\"headerlink\" title=\"electron能做什么\"></a>electron能做什么</h2><p>定义：electron能够使用javascript，html和css构建跨平台的桌面应用。</p>\n<p>从定义上我们知道用js、css、html就能创建桌面应用，同时我们也可以使用vue+webpack等框架来提高开发效率，开发一个桌面应用像开发web页面一样。</p>\n<p>它能够做浏览器做不到的部分，比如更方便的文件操作，获取系统的各种信息和状态等。<br><img src=\"http://blogimage.houjiyi.com/FnHGxVyS5oJfNLKvFYs9ShKLWZqw\" alt=\"image.png\"></p>\n<p>开源、跨平台，已经有非常多的应用使用electron来开发，它的存在使你不用再为不同平台独立开发而烦恼，它能够一套代码运行在windows、macos、linux三个平台上</p>\n<h2 id=\"为什么使用electron\"><a href=\"#为什么使用electron\" class=\"headerlink\" title=\"为什么使用electron\"></a>为什么使用electron</h2><p>一个工具或者框架的产生一定是解决了某个技术上的痛点，electron也不例外，不同平台的桌面应用使用不同语言进行开发，维护发版等非业务细节工作量繁重。electron能够解决这个问题，或者说他给了一个相对easy的解决方案，一套代码运行在三端，打包发布、自动更新都提供了相应的方式，开发者使用这个框架能够极大提高开发体验，尤其是web开发者。</p>\n<p>原理：用浏览器将web应用打包成一个桌面应用。</p>\n<p>优势：</p>\n<ol>\n<li>Web技术</li>\n<li>开源</li>\n<li>跨平台</li>\n<li>化繁为简：自动更新、原生菜单和通知、崩溃报告、调试和性能分析、windows安装程序</li>\n</ol>\n<h2 id=\"如何更好的使用electron\"><a href=\"#如何更好的使用electron\" class=\"headerlink\" title=\"如何更好的使用electron\"></a>如何更好的使用electron</h2><p>既然我们是使用开发web应用的方式来开发electron，这里换句话说就是如何更好的使用web技术来开发electron，我们将最新的前端开发方式与electron结合，也就能够大大提高我们的开发效率，同时技术栈只需要简单扩展就达到了能够开发桌面应用的目的。</p>\n<p><a href=\"electron-vue\">electron-vue</a> 框架目前已经有人完成，其思路就是将vue单页应用的开发方式和electron相结合，使得开发人员在使用electron的时候经常感觉自己是在开发一个web应用。</p>\n<p>只有当与系统进行交互或者打包发版的时候才会用到electron提到的功能。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"大纲\"><a href=\"#大纲\" class=\"headerlink\" title=\"大纲\"></a>大纲</h2><ul>\n<li>目的</li>\n<li>electron能做什么</li>\n<li>为什么使用electron</li>\n<li>如何更好的使用electron</li>\n</ul>\n<h2 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h2><p>当有人问你能不能开发桌面应用的时候你的回答应该是：“可以，目前我们已经可以使用web技术通过electron框架，创建交互和体验都非常不错的桌面应用了”</p>","more":"<h2 id=\"electron能做什么\"><a href=\"#electron能做什么\" class=\"headerlink\" title=\"electron能做什么\"></a>electron能做什么</h2><p>定义：electron能够使用javascript，html和css构建跨平台的桌面应用。</p>\n<p>从定义上我们知道用js、css、html就能创建桌面应用，同时我们也可以使用vue+webpack等框架来提高开发效率，开发一个桌面应用像开发web页面一样。</p>\n<p>它能够做浏览器做不到的部分，比如更方便的文件操作，获取系统的各种信息和状态等。<br><img src=\"http://blogimage.houjiyi.com/FnHGxVyS5oJfNLKvFYs9ShKLWZqw\" alt=\"image.png\"></p>\n<p>开源、跨平台，已经有非常多的应用使用electron来开发，它的存在使你不用再为不同平台独立开发而烦恼，它能够一套代码运行在windows、macos、linux三个平台上</p>\n<h2 id=\"为什么使用electron\"><a href=\"#为什么使用electron\" class=\"headerlink\" title=\"为什么使用electron\"></a>为什么使用electron</h2><p>一个工具或者框架的产生一定是解决了某个技术上的痛点，electron也不例外，不同平台的桌面应用使用不同语言进行开发，维护发版等非业务细节工作量繁重。electron能够解决这个问题，或者说他给了一个相对easy的解决方案，一套代码运行在三端，打包发布、自动更新都提供了相应的方式，开发者使用这个框架能够极大提高开发体验，尤其是web开发者。</p>\n<p>原理：用浏览器将web应用打包成一个桌面应用。</p>\n<p>优势：</p>\n<ol>\n<li>Web技术</li>\n<li>开源</li>\n<li>跨平台</li>\n<li>化繁为简：自动更新、原生菜单和通知、崩溃报告、调试和性能分析、windows安装程序</li>\n</ol>\n<h2 id=\"如何更好的使用electron\"><a href=\"#如何更好的使用electron\" class=\"headerlink\" title=\"如何更好的使用electron\"></a>如何更好的使用electron</h2><p>既然我们是使用开发web应用的方式来开发electron，这里换句话说就是如何更好的使用web技术来开发electron，我们将最新的前端开发方式与electron结合，也就能够大大提高我们的开发效率，同时技术栈只需要简单扩展就达到了能够开发桌面应用的目的。</p>\n<p><a href=\"electron-vue\">electron-vue</a> 框架目前已经有人完成，其思路就是将vue单页应用的开发方式和electron相结合，使得开发人员在使用electron的时候经常感觉自己是在开发一个web应用。</p>\n<p>只有当与系统进行交互或者打包发版的时候才会用到electron提到的功能。</p>"},{"title":"export default 和 export 区别","toc":false,"date":"2019-07-04T05:08:10.000Z","_content":"\n1. export 与 export default 均可用于导出常量、函数、文件、模块等\n2. 你可以在其它文件或模块中通 import 导入\n3. 在一个文件或模块中，export、import可以有多个，export default仅有一个\n4. 通过 export 方式导出，在导入时要加{ }，export default 则不需要\n\n```javascript\n// export\nexport class Login extends Component {...}\nimport {Login} from './login';\n\n//export default\nexport default class Home extends Component {...}\nimport Home from './home';\n```\n","source":"_posts/export-default-和-export-区别.md","raw":"---\ntitle: export default 和 export 区别\ntags:\n  - javascript\ncategories:\n  - Web开发\ntoc: false\ndate: 2019-07-04 13:08:10\n---\n\n1. export 与 export default 均可用于导出常量、函数、文件、模块等\n2. 你可以在其它文件或模块中通 import 导入\n3. 在一个文件或模块中，export、import可以有多个，export default仅有一个\n4. 通过 export 方式导出，在导入时要加{ }，export default 则不需要\n\n```javascript\n// export\nexport class Login extends Component {...}\nimport {Login} from './login';\n\n//export default\nexport default class Home extends Component {...}\nimport Home from './home';\n```\n","slug":"export-default-和-export-区别","published":1,"updated":"2019-11-07T02:17:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznyg003th5s6dyq7s66z","content":"<ol>\n<li>export 与 export default 均可用于导出常量、函数、文件、模块等</li>\n<li>你可以在其它文件或模块中通 import 导入</li>\n<li>在一个文件或模块中，export、import可以有多个，export default仅有一个</li>\n<li>通过 export 方式导出，在导入时要加{ }，export default 则不需要</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// export</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Login</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;...&#125;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;Login&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./login'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//export default</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Home</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;...&#125;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Home <span class=\"keyword\">from</span> <span class=\"string\">'./home'</span>;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>export 与 export default 均可用于导出常量、函数、文件、模块等</li>\n<li>你可以在其它文件或模块中通 import 导入</li>\n<li>在一个文件或模块中，export、import可以有多个，export default仅有一个</li>\n<li>通过 export 方式导出，在导入时要加{ }，export default 则不需要</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// export</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Login</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;...&#125;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;Login&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./login'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//export default</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Home</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;...&#125;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Home <span class=\"keyword\">from</span> <span class=\"string\">'./home'</span>;</span><br></pre></td></tr></table></figure>\n"},{"title":"electron静默打印不生效","toc":false,"date":"2019-03-29T01:40:04.000Z","_content":"\nElectron静默打印始终是不生效的，不知道网上那么多教程最后有没有真正生效，先记录下，继续研究。\n<!-- more -->\n","source":"_posts/electron静默打印不生效.md","raw":"---\ntitle: electron静默打印不生效\ntags:\n  - electron\ncategories:\n  - Web开发\ntoc: false\ndate: 2019-03-29 09:40:04\n---\n\nElectron静默打印始终是不生效的，不知道网上那么多教程最后有没有真正生效，先记录下，继续研究。\n<!-- more -->\n","slug":"electron静默打印不生效","published":1,"updated":"2019-11-07T02:00:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznyh003wh5s62uwuf93w","content":"<p>Electron静默打印始终是不生效的，不知道网上那么多教程最后有没有真正生效，先记录下，继续研究。<br><a id=\"more\"></a></p>\n","site":{"data":{}},"excerpt":"<p>Electron静默打印始终是不生效的，不知道网上那么多教程最后有没有真正生效，先记录下，继续研究。<br>","more":"</p>"},{"title":"dnsmasq (简体中文)","toc":false,"date":"2018-01-06T22:17:10.000Z","_content":"\nDnsmasq 提供 DNS 缓存和 DHCP 服务功能。作为域名解析服务器(DNS)，dnsmasq可以通过缓存 DNS 请求来提高对访问过的网址的连接速度。作为DHCP 服务器，dnsmasq 可以用于为局域网电脑分配内网ip地址和提供路由。DNS和DHCP两个功能可以同时或分别单独实现。dnsmasq轻量且易配置，适用于个人用户或少于50台主机的网络。此外它还自带了一个 PXE 服务器。\n<!-- more -->\n## 安装\n从官方仓库中安装 dnsmasq。\n## 配置\n编辑 dnsmasq 的配置文件 /etc/dnsmasq.conf 。这个文件包含大量的选项注释。\n\n```\n警告: dnsmasq 默认启用其 DNS 服务器。如果不需要，必须明确地将其 DNS 端口设置为 0 禁用它：\n----\n/etc/dnsmasq.conf\n----\nport=0\n```\n\n```\n提示： 查看配置文件语法是否正确，可执行下列命令：\n$ dnsmasq --test\n```\n## DNS 缓存设置\n要在单台电脑上以守护进程方式启动dnsmasq做DNS缓存服务器，编辑/etc/dnsmasq.conf，添加监听地址：\n\n```\nlisten-address=127.0.0.1\n```\n\n如果用此主机为局域网提供默认 DNS，请用为该主机绑定固定 IP 地址，设置：\n\n```\nlisten-address=192.168.x.x\n```\n这种情况建议配置静态IP\n\n多个ip地址设置:\n\n```\nlisten-address=127.0.0.1,192.168.x.x \n```\n\n### DNS 地址文件\n在配置好dnsmasq后，你需要编辑/etc/resolv.conf让DHCP客户端首先将本地地址(localhost)加入 DNS 文件(/etc/resolv.conf)，然后再通过其他DNS服务器解析地址。配置好DHCP客户端后需要重新启动网络来使设置生效\n\n#### resolv.conf\n一种选择是一个纯粹的 resolv.conf 配置。要做到这一点，才使第一个域名服务器在/etc/resolv.conf 中指向localhost：\n\n```\n/etc/resolv.conf\n\nnameserver 127.0.0.1\n# External nameservers\n...\n```\n\n现在，DNS查询将首先解析dnsmasq，只检查外部的服务器如果DNSMasq无法解析查询. dhcpcd, 不幸的是，往往默认覆盖 /etc/resolv.conf, 所以如果你使用DHCP，这里有一个好主意来保护 /etc/resolv.conf,要做到这一点，追加 nohook resolv.conf到dhcpcd的配置文件：\n\n```\n/etc/dhcpcd.conf\n...\nnohook resolv.conf\n```\n\n也可以保护您的resolv.conf不被修改：\n\n```\n# chattr +i /etc/resolv.conf\n```\n\n##### 三个以上域名服务器\nLinux 处理 DNS 请求时有个限制，在 resolv.conf 中最多只能配置三个域名服务器（nameserver）。作为一种变通方法,可以在 resolv.conf 文件中只保留 localhost 作为域名服务器，然后为外部域名服务器另外创建 resolv-file 文件。首先，为 dnsmasq 新建一个域名解析文件：\n\n```\n/etc/resolv.dnsmasq.conf\n# Google's nameservers, for example\nnameserver 8.8.8.8\nnameserver 8.8.4.4\n```\n然后编辑 /etc/dnsmasq.conf 让 dnsmasq 使用新创建的域名解析文件：\n\n```\n/etc/dnsmasq.conf\n...\nresolv-file=/etc/resolv.dnsmasq.conf\n...\n```\n\n#### 使用dhcpcd\ndhcpcd 可以是通过创建（或编辑）/etc/resolv.conf.head文件或 /etc/resolv.conf.tail文件来指定dns服务器，使/etc/resolv.conf不会被每次都被dhcpcd重写\n\n```\necho \"nameserver 127.0.0.1\" > /etc/resolv.conf.head #设置dns服务器为127.0.0.1\n```\n\n#### 使用dhclient\n要使用 dhclient， 取消 /etc/dhclient.conf 文件中如下行的注释：\n\n```\nprepend domain-name-servers 127.0.0.1;\n```\n\n### 使用NetworkManager\nNetworkManager 可以靠自身配置文件的设置项启动 dnsmasq 。在 NetworkManager.conf 文件的 [main] 节段添加 dns=dnsmasq 配置语句，然后禁用由 systemd 启动的 dnsmasq.service:\n\n```\n/etc/NetworkManager/NetworkManager.conf\n[main]\nplugins=keyfile\ndns=dnsmasq\n```\n\n可以在 /etc/NetworkManager/dnsmasq.d/ 目录下为 dnsmasq 创建自定义配置文件。例如，调整 DNS 缓存大小（保存在内存中）：\n\n```\n/etc/NetworkManager/dnsmasq.d/cache\ncache-size=1000\n```\n\ndnsmasq 被 NetworkManager 启动后，此目录下配置文件中的配置将取代默认配置。\n\n```\n提示： 这种方法可以让你启用特定域名的自定义DNS设置。例如: \nserver=/example1.com/exemple2.com/xx.xxx.xxx.x \n改变第一个DNS地址，浏览以下网站example1.com, example2.com\n使用xx.xxx.xxx.xx。\nThis method is preferred to a global DNS configuration \nwhen using particular DNS nameservers which lack of speed, \nstability, privacy and security.\n```\n#### IPv6\n启用 dnsmasq 在 NetworkManager 可能会中断仅持IPv6的DNS查询 (例如 dig -6 [hostname]) 否则将工作。 为了解决这个问题，创建以下文件将配置 dnsmasq 总是监听IPv6的loopback：\n\n```\n/etc/NetworkManager/dnsmasq.d/ipv6_listen.conf\nlisten-address=::1\n```\n\n此外， dnsmasq不优先考虑上游IPv6的DNS。不幸的是NetworkManager已不这样做 (Ubuntu Bug)。 一种解决方法是将禁用IPv4 DNS的NetworkManager的配置，假设存在。\n#### 其他方式\n另一种选择是在NetworkManagers“设置（通常通过右键单击小程序）和手动输入设置。设置将取决于前端中使用的类型;这个过程通常涉及右击小程序，编辑（或创建）一个配置文件，然后选择DHCP类型为“自动（指定地址）。”DNS地址将需要输入，通常以这种形式：127.0.0.1, DNS-server-one, ....\n\n## DHCP 服务器设置\ndnsmasq默认关闭DHCP功能，如果该主机需要为局域网中的其他设备提供IP和路由，应该对dnsmasq 配置文件(/etc/dnsmasq.conf)必要的配置如下：\n\n```\n# Only listen to routers' LAN NIC.  Doing so opens up tcp/udp port 53 to\n# localhost and udp port 67 to world:\ninterface=<LAN-NIC>\n\n# dnsmasq will open tcp/udp port 53 and udp port 67 to world to help with\n# dynamic interfaces (assigning dynamic ips). Dnsmasq will discard world\n# requests to them, but the paranoid might like to close them and let the \n# kernel handle them:\nbind-interfaces\n\n# Dynamic range of IPs to make available to LAN pc\ndhcp-range=192.168.111.50,192.168.111.100,12h\n\n# If you’d like to have dnsmasq assign static IPs, bind the LAN computer's\n# NIC MAC address:\ndhcp-host=aa:bb:cc:dd:ee:ff,192.168.111.50\n```\n## 启动守护进程\n设置为开机启动：\n\n```\n# systemctl enable dnsmasq\n```\n\n立即启动 dnsmashq：\n\n```\n# systemctl start dnsmasq\n```\n\n查看dnsmasq是否启动正常，查看系统日志：\n\n```\n# journalctl -u dnsmasq\n```\n需要重启网络服务以使 DHCP 客户端重建一个新的 /etc/resolv.conf。\n## 测试\n### DNS 缓存\n要测试查询速度，请访问一个 dnsmasq 启动后没有访问过的网站，执行 (dig (位于 dnsutils[broken link: replaced by bind-tools] 软件包):\n\n```\n$ dig archlinux.org | grep \"Query time\"\n```\n再次运行命令，因为使用了缓存，查询时间应该大大缩短。\n### DHCP 服务器\n从一个连接到使用了 dnsmasq 的计算机的计算机，配置它使用 DHCP 自动获取 IP 地址，然后尝试连接到你平时使用的网络。\n## 小技巧\n### 避免OpenDNS重定向Google请求\n要避免 OpenDNS 重定向所有 Google 请求到他们自己的搜索服务器，添加以下内容到 /etc/dnsmasq.conf：\n\n```\nserver=/www.google.com/X.X.X.X\n```\n\n用你的 ISP 的 DNS 服务器/路由器的 IP 替代 X.X.X.X 。\n\n### 查看租约\n```\ncat /var/lib/misc/dnsmasq.leases\n```\n### 添加自定义域\n它可以将一个自定义域添加到主机中的（本地）网络：\n\n```\nlocal=/home.lan/\ndomain=home.lan\n```\n\n在这个例子中可以ping主机/设备 (例如:您的主机文件中的定义) hostname.home.lan.\n\n取消扩展主机添加自定义域的主机条目：存在\n\n```\nexpand-hosts\n```\n\n如果没有这个设置，你必须域添加到/etc/hosts中的条目。\n","source":"_posts/dnsmasq官方文档.md","raw":"---\ntitle: dnsmasq (简体中文)\ntags:\n  - 运维\ncategories:\n  - 后端开发\ntoc: false\ndate: 2018-01-07 06:17:10\n---\n\nDnsmasq 提供 DNS 缓存和 DHCP 服务功能。作为域名解析服务器(DNS)，dnsmasq可以通过缓存 DNS 请求来提高对访问过的网址的连接速度。作为DHCP 服务器，dnsmasq 可以用于为局域网电脑分配内网ip地址和提供路由。DNS和DHCP两个功能可以同时或分别单独实现。dnsmasq轻量且易配置，适用于个人用户或少于50台主机的网络。此外它还自带了一个 PXE 服务器。\n<!-- more -->\n## 安装\n从官方仓库中安装 dnsmasq。\n## 配置\n编辑 dnsmasq 的配置文件 /etc/dnsmasq.conf 。这个文件包含大量的选项注释。\n\n```\n警告: dnsmasq 默认启用其 DNS 服务器。如果不需要，必须明确地将其 DNS 端口设置为 0 禁用它：\n----\n/etc/dnsmasq.conf\n----\nport=0\n```\n\n```\n提示： 查看配置文件语法是否正确，可执行下列命令：\n$ dnsmasq --test\n```\n## DNS 缓存设置\n要在单台电脑上以守护进程方式启动dnsmasq做DNS缓存服务器，编辑/etc/dnsmasq.conf，添加监听地址：\n\n```\nlisten-address=127.0.0.1\n```\n\n如果用此主机为局域网提供默认 DNS，请用为该主机绑定固定 IP 地址，设置：\n\n```\nlisten-address=192.168.x.x\n```\n这种情况建议配置静态IP\n\n多个ip地址设置:\n\n```\nlisten-address=127.0.0.1,192.168.x.x \n```\n\n### DNS 地址文件\n在配置好dnsmasq后，你需要编辑/etc/resolv.conf让DHCP客户端首先将本地地址(localhost)加入 DNS 文件(/etc/resolv.conf)，然后再通过其他DNS服务器解析地址。配置好DHCP客户端后需要重新启动网络来使设置生效\n\n#### resolv.conf\n一种选择是一个纯粹的 resolv.conf 配置。要做到这一点，才使第一个域名服务器在/etc/resolv.conf 中指向localhost：\n\n```\n/etc/resolv.conf\n\nnameserver 127.0.0.1\n# External nameservers\n...\n```\n\n现在，DNS查询将首先解析dnsmasq，只检查外部的服务器如果DNSMasq无法解析查询. dhcpcd, 不幸的是，往往默认覆盖 /etc/resolv.conf, 所以如果你使用DHCP，这里有一个好主意来保护 /etc/resolv.conf,要做到这一点，追加 nohook resolv.conf到dhcpcd的配置文件：\n\n```\n/etc/dhcpcd.conf\n...\nnohook resolv.conf\n```\n\n也可以保护您的resolv.conf不被修改：\n\n```\n# chattr +i /etc/resolv.conf\n```\n\n##### 三个以上域名服务器\nLinux 处理 DNS 请求时有个限制，在 resolv.conf 中最多只能配置三个域名服务器（nameserver）。作为一种变通方法,可以在 resolv.conf 文件中只保留 localhost 作为域名服务器，然后为外部域名服务器另外创建 resolv-file 文件。首先，为 dnsmasq 新建一个域名解析文件：\n\n```\n/etc/resolv.dnsmasq.conf\n# Google's nameservers, for example\nnameserver 8.8.8.8\nnameserver 8.8.4.4\n```\n然后编辑 /etc/dnsmasq.conf 让 dnsmasq 使用新创建的域名解析文件：\n\n```\n/etc/dnsmasq.conf\n...\nresolv-file=/etc/resolv.dnsmasq.conf\n...\n```\n\n#### 使用dhcpcd\ndhcpcd 可以是通过创建（或编辑）/etc/resolv.conf.head文件或 /etc/resolv.conf.tail文件来指定dns服务器，使/etc/resolv.conf不会被每次都被dhcpcd重写\n\n```\necho \"nameserver 127.0.0.1\" > /etc/resolv.conf.head #设置dns服务器为127.0.0.1\n```\n\n#### 使用dhclient\n要使用 dhclient， 取消 /etc/dhclient.conf 文件中如下行的注释：\n\n```\nprepend domain-name-servers 127.0.0.1;\n```\n\n### 使用NetworkManager\nNetworkManager 可以靠自身配置文件的设置项启动 dnsmasq 。在 NetworkManager.conf 文件的 [main] 节段添加 dns=dnsmasq 配置语句，然后禁用由 systemd 启动的 dnsmasq.service:\n\n```\n/etc/NetworkManager/NetworkManager.conf\n[main]\nplugins=keyfile\ndns=dnsmasq\n```\n\n可以在 /etc/NetworkManager/dnsmasq.d/ 目录下为 dnsmasq 创建自定义配置文件。例如，调整 DNS 缓存大小（保存在内存中）：\n\n```\n/etc/NetworkManager/dnsmasq.d/cache\ncache-size=1000\n```\n\ndnsmasq 被 NetworkManager 启动后，此目录下配置文件中的配置将取代默认配置。\n\n```\n提示： 这种方法可以让你启用特定域名的自定义DNS设置。例如: \nserver=/example1.com/exemple2.com/xx.xxx.xxx.x \n改变第一个DNS地址，浏览以下网站example1.com, example2.com\n使用xx.xxx.xxx.xx。\nThis method is preferred to a global DNS configuration \nwhen using particular DNS nameservers which lack of speed, \nstability, privacy and security.\n```\n#### IPv6\n启用 dnsmasq 在 NetworkManager 可能会中断仅持IPv6的DNS查询 (例如 dig -6 [hostname]) 否则将工作。 为了解决这个问题，创建以下文件将配置 dnsmasq 总是监听IPv6的loopback：\n\n```\n/etc/NetworkManager/dnsmasq.d/ipv6_listen.conf\nlisten-address=::1\n```\n\n此外， dnsmasq不优先考虑上游IPv6的DNS。不幸的是NetworkManager已不这样做 (Ubuntu Bug)。 一种解决方法是将禁用IPv4 DNS的NetworkManager的配置，假设存在。\n#### 其他方式\n另一种选择是在NetworkManagers“设置（通常通过右键单击小程序）和手动输入设置。设置将取决于前端中使用的类型;这个过程通常涉及右击小程序，编辑（或创建）一个配置文件，然后选择DHCP类型为“自动（指定地址）。”DNS地址将需要输入，通常以这种形式：127.0.0.1, DNS-server-one, ....\n\n## DHCP 服务器设置\ndnsmasq默认关闭DHCP功能，如果该主机需要为局域网中的其他设备提供IP和路由，应该对dnsmasq 配置文件(/etc/dnsmasq.conf)必要的配置如下：\n\n```\n# Only listen to routers' LAN NIC.  Doing so opens up tcp/udp port 53 to\n# localhost and udp port 67 to world:\ninterface=<LAN-NIC>\n\n# dnsmasq will open tcp/udp port 53 and udp port 67 to world to help with\n# dynamic interfaces (assigning dynamic ips). Dnsmasq will discard world\n# requests to them, but the paranoid might like to close them and let the \n# kernel handle them:\nbind-interfaces\n\n# Dynamic range of IPs to make available to LAN pc\ndhcp-range=192.168.111.50,192.168.111.100,12h\n\n# If you’d like to have dnsmasq assign static IPs, bind the LAN computer's\n# NIC MAC address:\ndhcp-host=aa:bb:cc:dd:ee:ff,192.168.111.50\n```\n## 启动守护进程\n设置为开机启动：\n\n```\n# systemctl enable dnsmasq\n```\n\n立即启动 dnsmashq：\n\n```\n# systemctl start dnsmasq\n```\n\n查看dnsmasq是否启动正常，查看系统日志：\n\n```\n# journalctl -u dnsmasq\n```\n需要重启网络服务以使 DHCP 客户端重建一个新的 /etc/resolv.conf。\n## 测试\n### DNS 缓存\n要测试查询速度，请访问一个 dnsmasq 启动后没有访问过的网站，执行 (dig (位于 dnsutils[broken link: replaced by bind-tools] 软件包):\n\n```\n$ dig archlinux.org | grep \"Query time\"\n```\n再次运行命令，因为使用了缓存，查询时间应该大大缩短。\n### DHCP 服务器\n从一个连接到使用了 dnsmasq 的计算机的计算机，配置它使用 DHCP 自动获取 IP 地址，然后尝试连接到你平时使用的网络。\n## 小技巧\n### 避免OpenDNS重定向Google请求\n要避免 OpenDNS 重定向所有 Google 请求到他们自己的搜索服务器，添加以下内容到 /etc/dnsmasq.conf：\n\n```\nserver=/www.google.com/X.X.X.X\n```\n\n用你的 ISP 的 DNS 服务器/路由器的 IP 替代 X.X.X.X 。\n\n### 查看租约\n```\ncat /var/lib/misc/dnsmasq.leases\n```\n### 添加自定义域\n它可以将一个自定义域添加到主机中的（本地）网络：\n\n```\nlocal=/home.lan/\ndomain=home.lan\n```\n\n在这个例子中可以ping主机/设备 (例如:您的主机文件中的定义) hostname.home.lan.\n\n取消扩展主机添加自定义域的主机条目：存在\n\n```\nexpand-hosts\n```\n\n如果没有这个设置，你必须域添加到/etc/hosts中的条目。\n","slug":"dnsmasq官方文档","published":1,"updated":"2019-11-07T01:59:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznyj0040h5s6fnogsp1q","content":"<p>Dnsmasq 提供 DNS 缓存和 DHCP 服务功能。作为域名解析服务器(DNS)，dnsmasq可以通过缓存 DNS 请求来提高对访问过的网址的连接速度。作为DHCP 服务器，dnsmasq 可以用于为局域网电脑分配内网ip地址和提供路由。DNS和DHCP两个功能可以同时或分别单独实现。dnsmasq轻量且易配置，适用于个人用户或少于50台主机的网络。此外它还自带了一个 PXE 服务器。<br><a id=\"more\"></a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>从官方仓库中安装 dnsmasq。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>编辑 dnsmasq 的配置文件 /etc/dnsmasq.conf 。这个文件包含大量的选项注释。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">警告: dnsmasq 默认启用其 DNS 服务器。如果不需要，必须明确地将其 DNS 端口设置为 0 禁用它：</span><br><span class=\"line\">----</span><br><span class=\"line\">/etc/dnsmasq.conf</span><br><span class=\"line\">----</span><br><span class=\"line\">port=0</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">提示： 查看配置文件语法是否正确，可执行下列命令：</span><br><span class=\"line\">$ dnsmasq --test</span><br></pre></td></tr></table></figure>\n<h2 id=\"DNS-缓存设置\"><a href=\"#DNS-缓存设置\" class=\"headerlink\" title=\"DNS 缓存设置\"></a>DNS 缓存设置</h2><p>要在单台电脑上以守护进程方式启动dnsmasq做DNS缓存服务器，编辑/etc/dnsmasq.conf，添加监听地址：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen-address=127.0.0.1</span><br></pre></td></tr></table></figure>\n<p>如果用此主机为局域网提供默认 DNS，请用为该主机绑定固定 IP 地址，设置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen-address=192.168.x.x</span><br></pre></td></tr></table></figure>\n<p>这种情况建议配置静态IP</p>\n<p>多个ip地址设置:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen-address=127.0.0.1,192.168.x.x</span><br></pre></td></tr></table></figure>\n<h3 id=\"DNS-地址文件\"><a href=\"#DNS-地址文件\" class=\"headerlink\" title=\"DNS 地址文件\"></a>DNS 地址文件</h3><p>在配置好dnsmasq后，你需要编辑/etc/resolv.conf让DHCP客户端首先将本地地址(localhost)加入 DNS 文件(/etc/resolv.conf)，然后再通过其他DNS服务器解析地址。配置好DHCP客户端后需要重新启动网络来使设置生效</p>\n<h4 id=\"resolv-conf\"><a href=\"#resolv-conf\" class=\"headerlink\" title=\"resolv.conf\"></a>resolv.conf</h4><p>一种选择是一个纯粹的 resolv.conf 配置。要做到这一点，才使第一个域名服务器在/etc/resolv.conf 中指向localhost：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/resolv.conf</span><br><span class=\"line\"></span><br><span class=\"line\">nameserver 127.0.0.1</span><br><span class=\"line\"># External nameservers</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>现在，DNS查询将首先解析dnsmasq，只检查外部的服务器如果DNSMasq无法解析查询. dhcpcd, 不幸的是，往往默认覆盖 /etc/resolv.conf, 所以如果你使用DHCP，这里有一个好主意来保护 /etc/resolv.conf,要做到这一点，追加 nohook resolv.conf到dhcpcd的配置文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/dhcpcd.conf</span><br><span class=\"line\">...</span><br><span class=\"line\">nohook resolv.conf</span><br></pre></td></tr></table></figure>\n<p>也可以保护您的resolv.conf不被修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># chattr +i /etc/resolv.conf</span><br></pre></td></tr></table></figure>\n<h5 id=\"三个以上域名服务器\"><a href=\"#三个以上域名服务器\" class=\"headerlink\" title=\"三个以上域名服务器\"></a>三个以上域名服务器</h5><p>Linux 处理 DNS 请求时有个限制，在 resolv.conf 中最多只能配置三个域名服务器（nameserver）。作为一种变通方法,可以在 resolv.conf 文件中只保留 localhost 作为域名服务器，然后为外部域名服务器另外创建 resolv-file 文件。首先，为 dnsmasq 新建一个域名解析文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/resolv.dnsmasq.conf</span><br><span class=\"line\"># Google&apos;s nameservers, for example</span><br><span class=\"line\">nameserver 8.8.8.8</span><br><span class=\"line\">nameserver 8.8.4.4</span><br></pre></td></tr></table></figure>\n<p>然后编辑 /etc/dnsmasq.conf 让 dnsmasq 使用新创建的域名解析文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/dnsmasq.conf</span><br><span class=\"line\">...</span><br><span class=\"line\">resolv-file=/etc/resolv.dnsmasq.conf</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用dhcpcd\"><a href=\"#使用dhcpcd\" class=\"headerlink\" title=\"使用dhcpcd\"></a>使用dhcpcd</h4><p>dhcpcd 可以是通过创建（或编辑）/etc/resolv.conf.head文件或 /etc/resolv.conf.tail文件来指定dns服务器，使/etc/resolv.conf不会被每次都被dhcpcd重写</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;nameserver 127.0.0.1&quot; &gt; /etc/resolv.conf.head #设置dns服务器为127.0.0.1</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用dhclient\"><a href=\"#使用dhclient\" class=\"headerlink\" title=\"使用dhclient\"></a>使用dhclient</h4><p>要使用 dhclient， 取消 /etc/dhclient.conf 文件中如下行的注释：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">prepend domain-name-servers 127.0.0.1;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用NetworkManager\"><a href=\"#使用NetworkManager\" class=\"headerlink\" title=\"使用NetworkManager\"></a>使用NetworkManager</h3><p>NetworkManager 可以靠自身配置文件的设置项启动 dnsmasq 。在 NetworkManager.conf 文件的 [main] 节段添加 dns=dnsmasq 配置语句，然后禁用由 systemd 启动的 dnsmasq.service:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/NetworkManager/NetworkManager.conf</span><br><span class=\"line\">[main]</span><br><span class=\"line\">plugins=keyfile</span><br><span class=\"line\">dns=dnsmasq</span><br></pre></td></tr></table></figure>\n<p>可以在 /etc/NetworkManager/dnsmasq.d/ 目录下为 dnsmasq 创建自定义配置文件。例如，调整 DNS 缓存大小（保存在内存中）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/NetworkManager/dnsmasq.d/cache</span><br><span class=\"line\">cache-size=1000</span><br></pre></td></tr></table></figure>\n<p>dnsmasq 被 NetworkManager 启动后，此目录下配置文件中的配置将取代默认配置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">提示： 这种方法可以让你启用特定域名的自定义DNS设置。例如: </span><br><span class=\"line\">server=/example1.com/exemple2.com/xx.xxx.xxx.x </span><br><span class=\"line\">改变第一个DNS地址，浏览以下网站example1.com, example2.com</span><br><span class=\"line\">使用xx.xxx.xxx.xx。</span><br><span class=\"line\">This method is preferred to a global DNS configuration </span><br><span class=\"line\">when using particular DNS nameservers which lack of speed, </span><br><span class=\"line\">stability, privacy and security.</span><br></pre></td></tr></table></figure>\n<h4 id=\"IPv6\"><a href=\"#IPv6\" class=\"headerlink\" title=\"IPv6\"></a>IPv6</h4><p>启用 dnsmasq 在 NetworkManager 可能会中断仅持IPv6的DNS查询 (例如 dig -6 [hostname]) 否则将工作。 为了解决这个问题，创建以下文件将配置 dnsmasq 总是监听IPv6的loopback：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/NetworkManager/dnsmasq.d/ipv6_listen.conf</span><br><span class=\"line\">listen-address=::1</span><br></pre></td></tr></table></figure>\n<p>此外， dnsmasq不优先考虑上游IPv6的DNS。不幸的是NetworkManager已不这样做 (Ubuntu Bug)。 一种解决方法是将禁用IPv4 DNS的NetworkManager的配置，假设存在。</p>\n<h4 id=\"其他方式\"><a href=\"#其他方式\" class=\"headerlink\" title=\"其他方式\"></a>其他方式</h4><p>另一种选择是在NetworkManagers“设置（通常通过右键单击小程序）和手动输入设置。设置将取决于前端中使用的类型;这个过程通常涉及右击小程序，编辑（或创建）一个配置文件，然后选择DHCP类型为“自动（指定地址）。”DNS地址将需要输入，通常以这种形式：127.0.0.1, DNS-server-one, ….</p>\n<h2 id=\"DHCP-服务器设置\"><a href=\"#DHCP-服务器设置\" class=\"headerlink\" title=\"DHCP 服务器设置\"></a>DHCP 服务器设置</h2><p>dnsmasq默认关闭DHCP功能，如果该主机需要为局域网中的其他设备提供IP和路由，应该对dnsmasq 配置文件(/etc/dnsmasq.conf)必要的配置如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Only listen to routers&apos; LAN NIC.  Doing so opens up tcp/udp port 53 to</span><br><span class=\"line\"># localhost and udp port 67 to world:</span><br><span class=\"line\">interface=&lt;LAN-NIC&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># dnsmasq will open tcp/udp port 53 and udp port 67 to world to help with</span><br><span class=\"line\"># dynamic interfaces (assigning dynamic ips). Dnsmasq will discard world</span><br><span class=\"line\"># requests to them, but the paranoid might like to close them and let the </span><br><span class=\"line\"># kernel handle them:</span><br><span class=\"line\">bind-interfaces</span><br><span class=\"line\"></span><br><span class=\"line\"># Dynamic range of IPs to make available to LAN pc</span><br><span class=\"line\">dhcp-range=192.168.111.50,192.168.111.100,12h</span><br><span class=\"line\"></span><br><span class=\"line\"># If you’d like to have dnsmasq assign static IPs, bind the LAN computer&apos;s</span><br><span class=\"line\"># NIC MAC address:</span><br><span class=\"line\">dhcp-host=aa:bb:cc:dd:ee:ff,192.168.111.50</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动守护进程\"><a href=\"#启动守护进程\" class=\"headerlink\" title=\"启动守护进程\"></a>启动守护进程</h2><p>设置为开机启动：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># systemctl enable dnsmasq</span><br></pre></td></tr></table></figure>\n<p>立即启动 dnsmashq：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># systemctl start dnsmasq</span><br></pre></td></tr></table></figure>\n<p>查看dnsmasq是否启动正常，查看系统日志：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># journalctl -u dnsmasq</span><br></pre></td></tr></table></figure>\n<p>需要重启网络服务以使 DHCP 客户端重建一个新的 /etc/resolv.conf。</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><h3 id=\"DNS-缓存\"><a href=\"#DNS-缓存\" class=\"headerlink\" title=\"DNS 缓存\"></a>DNS 缓存</h3><p>要测试查询速度，请访问一个 dnsmasq 启动后没有访问过的网站，执行 (dig (位于 dnsutils[broken link: replaced by bind-tools] 软件包):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ dig archlinux.org | grep &quot;Query time&quot;</span><br></pre></td></tr></table></figure>\n<p>再次运行命令，因为使用了缓存，查询时间应该大大缩短。</p>\n<h3 id=\"DHCP-服务器\"><a href=\"#DHCP-服务器\" class=\"headerlink\" title=\"DHCP 服务器\"></a>DHCP 服务器</h3><p>从一个连接到使用了 dnsmasq 的计算机的计算机，配置它使用 DHCP 自动获取 IP 地址，然后尝试连接到你平时使用的网络。</p>\n<h2 id=\"小技巧\"><a href=\"#小技巧\" class=\"headerlink\" title=\"小技巧\"></a>小技巧</h2><h3 id=\"避免OpenDNS重定向Google请求\"><a href=\"#避免OpenDNS重定向Google请求\" class=\"headerlink\" title=\"避免OpenDNS重定向Google请求\"></a>避免OpenDNS重定向Google请求</h3><p>要避免 OpenDNS 重定向所有 Google 请求到他们自己的搜索服务器，添加以下内容到 /etc/dnsmasq.conf：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server=/www.google.com/X.X.X.X</span><br></pre></td></tr></table></figure>\n<p>用你的 ISP 的 DNS 服务器/路由器的 IP 替代 X.X.X.X 。</p>\n<h3 id=\"查看租约\"><a href=\"#查看租约\" class=\"headerlink\" title=\"查看租约\"></a>查看租约</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /var/lib/misc/dnsmasq.leases</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加自定义域\"><a href=\"#添加自定义域\" class=\"headerlink\" title=\"添加自定义域\"></a>添加自定义域</h3><p>它可以将一个自定义域添加到主机中的（本地）网络：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local=/home.lan/</span><br><span class=\"line\">domain=home.lan</span><br></pre></td></tr></table></figure>\n<p>在这个例子中可以ping主机/设备 (例如:您的主机文件中的定义) hostname.home.lan.</p>\n<p>取消扩展主机添加自定义域的主机条目：存在</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expand-hosts</span><br></pre></td></tr></table></figure>\n<p>如果没有这个设置，你必须域添加到/etc/hosts中的条目。</p>\n","site":{"data":{}},"excerpt":"<p>Dnsmasq 提供 DNS 缓存和 DHCP 服务功能。作为域名解析服务器(DNS)，dnsmasq可以通过缓存 DNS 请求来提高对访问过的网址的连接速度。作为DHCP 服务器，dnsmasq 可以用于为局域网电脑分配内网ip地址和提供路由。DNS和DHCP两个功能可以同时或分别单独实现。dnsmasq轻量且易配置，适用于个人用户或少于50台主机的网络。此外它还自带了一个 PXE 服务器。<br>","more":"</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>从官方仓库中安装 dnsmasq。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>编辑 dnsmasq 的配置文件 /etc/dnsmasq.conf 。这个文件包含大量的选项注释。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">警告: dnsmasq 默认启用其 DNS 服务器。如果不需要，必须明确地将其 DNS 端口设置为 0 禁用它：</span><br><span class=\"line\">----</span><br><span class=\"line\">/etc/dnsmasq.conf</span><br><span class=\"line\">----</span><br><span class=\"line\">port=0</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">提示： 查看配置文件语法是否正确，可执行下列命令：</span><br><span class=\"line\">$ dnsmasq --test</span><br></pre></td></tr></table></figure>\n<h2 id=\"DNS-缓存设置\"><a href=\"#DNS-缓存设置\" class=\"headerlink\" title=\"DNS 缓存设置\"></a>DNS 缓存设置</h2><p>要在单台电脑上以守护进程方式启动dnsmasq做DNS缓存服务器，编辑/etc/dnsmasq.conf，添加监听地址：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen-address=127.0.0.1</span><br></pre></td></tr></table></figure>\n<p>如果用此主机为局域网提供默认 DNS，请用为该主机绑定固定 IP 地址，设置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen-address=192.168.x.x</span><br></pre></td></tr></table></figure>\n<p>这种情况建议配置静态IP</p>\n<p>多个ip地址设置:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen-address=127.0.0.1,192.168.x.x</span><br></pre></td></tr></table></figure>\n<h3 id=\"DNS-地址文件\"><a href=\"#DNS-地址文件\" class=\"headerlink\" title=\"DNS 地址文件\"></a>DNS 地址文件</h3><p>在配置好dnsmasq后，你需要编辑/etc/resolv.conf让DHCP客户端首先将本地地址(localhost)加入 DNS 文件(/etc/resolv.conf)，然后再通过其他DNS服务器解析地址。配置好DHCP客户端后需要重新启动网络来使设置生效</p>\n<h4 id=\"resolv-conf\"><a href=\"#resolv-conf\" class=\"headerlink\" title=\"resolv.conf\"></a>resolv.conf</h4><p>一种选择是一个纯粹的 resolv.conf 配置。要做到这一点，才使第一个域名服务器在/etc/resolv.conf 中指向localhost：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/resolv.conf</span><br><span class=\"line\"></span><br><span class=\"line\">nameserver 127.0.0.1</span><br><span class=\"line\"># External nameservers</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>现在，DNS查询将首先解析dnsmasq，只检查外部的服务器如果DNSMasq无法解析查询. dhcpcd, 不幸的是，往往默认覆盖 /etc/resolv.conf, 所以如果你使用DHCP，这里有一个好主意来保护 /etc/resolv.conf,要做到这一点，追加 nohook resolv.conf到dhcpcd的配置文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/dhcpcd.conf</span><br><span class=\"line\">...</span><br><span class=\"line\">nohook resolv.conf</span><br></pre></td></tr></table></figure>\n<p>也可以保护您的resolv.conf不被修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># chattr +i /etc/resolv.conf</span><br></pre></td></tr></table></figure>\n<h5 id=\"三个以上域名服务器\"><a href=\"#三个以上域名服务器\" class=\"headerlink\" title=\"三个以上域名服务器\"></a>三个以上域名服务器</h5><p>Linux 处理 DNS 请求时有个限制，在 resolv.conf 中最多只能配置三个域名服务器（nameserver）。作为一种变通方法,可以在 resolv.conf 文件中只保留 localhost 作为域名服务器，然后为外部域名服务器另外创建 resolv-file 文件。首先，为 dnsmasq 新建一个域名解析文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/resolv.dnsmasq.conf</span><br><span class=\"line\"># Google&apos;s nameservers, for example</span><br><span class=\"line\">nameserver 8.8.8.8</span><br><span class=\"line\">nameserver 8.8.4.4</span><br></pre></td></tr></table></figure>\n<p>然后编辑 /etc/dnsmasq.conf 让 dnsmasq 使用新创建的域名解析文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/dnsmasq.conf</span><br><span class=\"line\">...</span><br><span class=\"line\">resolv-file=/etc/resolv.dnsmasq.conf</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用dhcpcd\"><a href=\"#使用dhcpcd\" class=\"headerlink\" title=\"使用dhcpcd\"></a>使用dhcpcd</h4><p>dhcpcd 可以是通过创建（或编辑）/etc/resolv.conf.head文件或 /etc/resolv.conf.tail文件来指定dns服务器，使/etc/resolv.conf不会被每次都被dhcpcd重写</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;nameserver 127.0.0.1&quot; &gt; /etc/resolv.conf.head #设置dns服务器为127.0.0.1</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用dhclient\"><a href=\"#使用dhclient\" class=\"headerlink\" title=\"使用dhclient\"></a>使用dhclient</h4><p>要使用 dhclient， 取消 /etc/dhclient.conf 文件中如下行的注释：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">prepend domain-name-servers 127.0.0.1;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用NetworkManager\"><a href=\"#使用NetworkManager\" class=\"headerlink\" title=\"使用NetworkManager\"></a>使用NetworkManager</h3><p>NetworkManager 可以靠自身配置文件的设置项启动 dnsmasq 。在 NetworkManager.conf 文件的 [main] 节段添加 dns=dnsmasq 配置语句，然后禁用由 systemd 启动的 dnsmasq.service:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/NetworkManager/NetworkManager.conf</span><br><span class=\"line\">[main]</span><br><span class=\"line\">plugins=keyfile</span><br><span class=\"line\">dns=dnsmasq</span><br></pre></td></tr></table></figure>\n<p>可以在 /etc/NetworkManager/dnsmasq.d/ 目录下为 dnsmasq 创建自定义配置文件。例如，调整 DNS 缓存大小（保存在内存中）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/NetworkManager/dnsmasq.d/cache</span><br><span class=\"line\">cache-size=1000</span><br></pre></td></tr></table></figure>\n<p>dnsmasq 被 NetworkManager 启动后，此目录下配置文件中的配置将取代默认配置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">提示： 这种方法可以让你启用特定域名的自定义DNS设置。例如: </span><br><span class=\"line\">server=/example1.com/exemple2.com/xx.xxx.xxx.x </span><br><span class=\"line\">改变第一个DNS地址，浏览以下网站example1.com, example2.com</span><br><span class=\"line\">使用xx.xxx.xxx.xx。</span><br><span class=\"line\">This method is preferred to a global DNS configuration </span><br><span class=\"line\">when using particular DNS nameservers which lack of speed, </span><br><span class=\"line\">stability, privacy and security.</span><br></pre></td></tr></table></figure>\n<h4 id=\"IPv6\"><a href=\"#IPv6\" class=\"headerlink\" title=\"IPv6\"></a>IPv6</h4><p>启用 dnsmasq 在 NetworkManager 可能会中断仅持IPv6的DNS查询 (例如 dig -6 [hostname]) 否则将工作。 为了解决这个问题，创建以下文件将配置 dnsmasq 总是监听IPv6的loopback：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/NetworkManager/dnsmasq.d/ipv6_listen.conf</span><br><span class=\"line\">listen-address=::1</span><br></pre></td></tr></table></figure>\n<p>此外， dnsmasq不优先考虑上游IPv6的DNS。不幸的是NetworkManager已不这样做 (Ubuntu Bug)。 一种解决方法是将禁用IPv4 DNS的NetworkManager的配置，假设存在。</p>\n<h4 id=\"其他方式\"><a href=\"#其他方式\" class=\"headerlink\" title=\"其他方式\"></a>其他方式</h4><p>另一种选择是在NetworkManagers“设置（通常通过右键单击小程序）和手动输入设置。设置将取决于前端中使用的类型;这个过程通常涉及右击小程序，编辑（或创建）一个配置文件，然后选择DHCP类型为“自动（指定地址）。”DNS地址将需要输入，通常以这种形式：127.0.0.1, DNS-server-one, ….</p>\n<h2 id=\"DHCP-服务器设置\"><a href=\"#DHCP-服务器设置\" class=\"headerlink\" title=\"DHCP 服务器设置\"></a>DHCP 服务器设置</h2><p>dnsmasq默认关闭DHCP功能，如果该主机需要为局域网中的其他设备提供IP和路由，应该对dnsmasq 配置文件(/etc/dnsmasq.conf)必要的配置如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Only listen to routers&apos; LAN NIC.  Doing so opens up tcp/udp port 53 to</span><br><span class=\"line\"># localhost and udp port 67 to world:</span><br><span class=\"line\">interface=&lt;LAN-NIC&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># dnsmasq will open tcp/udp port 53 and udp port 67 to world to help with</span><br><span class=\"line\"># dynamic interfaces (assigning dynamic ips). Dnsmasq will discard world</span><br><span class=\"line\"># requests to them, but the paranoid might like to close them and let the </span><br><span class=\"line\"># kernel handle them:</span><br><span class=\"line\">bind-interfaces</span><br><span class=\"line\"></span><br><span class=\"line\"># Dynamic range of IPs to make available to LAN pc</span><br><span class=\"line\">dhcp-range=192.168.111.50,192.168.111.100,12h</span><br><span class=\"line\"></span><br><span class=\"line\"># If you’d like to have dnsmasq assign static IPs, bind the LAN computer&apos;s</span><br><span class=\"line\"># NIC MAC address:</span><br><span class=\"line\">dhcp-host=aa:bb:cc:dd:ee:ff,192.168.111.50</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动守护进程\"><a href=\"#启动守护进程\" class=\"headerlink\" title=\"启动守护进程\"></a>启动守护进程</h2><p>设置为开机启动：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># systemctl enable dnsmasq</span><br></pre></td></tr></table></figure>\n<p>立即启动 dnsmashq：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># systemctl start dnsmasq</span><br></pre></td></tr></table></figure>\n<p>查看dnsmasq是否启动正常，查看系统日志：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># journalctl -u dnsmasq</span><br></pre></td></tr></table></figure>\n<p>需要重启网络服务以使 DHCP 客户端重建一个新的 /etc/resolv.conf。</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><h3 id=\"DNS-缓存\"><a href=\"#DNS-缓存\" class=\"headerlink\" title=\"DNS 缓存\"></a>DNS 缓存</h3><p>要测试查询速度，请访问一个 dnsmasq 启动后没有访问过的网站，执行 (dig (位于 dnsutils[broken link: replaced by bind-tools] 软件包):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ dig archlinux.org | grep &quot;Query time&quot;</span><br></pre></td></tr></table></figure>\n<p>再次运行命令，因为使用了缓存，查询时间应该大大缩短。</p>\n<h3 id=\"DHCP-服务器\"><a href=\"#DHCP-服务器\" class=\"headerlink\" title=\"DHCP 服务器\"></a>DHCP 服务器</h3><p>从一个连接到使用了 dnsmasq 的计算机的计算机，配置它使用 DHCP 自动获取 IP 地址，然后尝试连接到你平时使用的网络。</p>\n<h2 id=\"小技巧\"><a href=\"#小技巧\" class=\"headerlink\" title=\"小技巧\"></a>小技巧</h2><h3 id=\"避免OpenDNS重定向Google请求\"><a href=\"#避免OpenDNS重定向Google请求\" class=\"headerlink\" title=\"避免OpenDNS重定向Google请求\"></a>避免OpenDNS重定向Google请求</h3><p>要避免 OpenDNS 重定向所有 Google 请求到他们自己的搜索服务器，添加以下内容到 /etc/dnsmasq.conf：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server=/www.google.com/X.X.X.X</span><br></pre></td></tr></table></figure>\n<p>用你的 ISP 的 DNS 服务器/路由器的 IP 替代 X.X.X.X 。</p>\n<h3 id=\"查看租约\"><a href=\"#查看租约\" class=\"headerlink\" title=\"查看租约\"></a>查看租约</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /var/lib/misc/dnsmasq.leases</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加自定义域\"><a href=\"#添加自定义域\" class=\"headerlink\" title=\"添加自定义域\"></a>添加自定义域</h3><p>它可以将一个自定义域添加到主机中的（本地）网络：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local=/home.lan/</span><br><span class=\"line\">domain=home.lan</span><br></pre></td></tr></table></figure>\n<p>在这个例子中可以ping主机/设备 (例如:您的主机文件中的定义) hostname.home.lan.</p>\n<p>取消扩展主机添加自定义域的主机条目：存在</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expand-hosts</span><br></pre></td></tr></table></figure>\n<p>如果没有这个设置，你必须域添加到/etc/hosts中的条目。</p>"},{"title":"free命令","toc":false,"date":"2018-01-24T03:03:06.000Z","_content":"\nfree命令可以显示当前系统未使用的和已使用的内存数目，还可以显示被内核使用的内存缓冲区。\n\n## 语法\n\n```\nfree(选项)\n```\n\n<!-- more -->\n\n## 选项\n\n```\n-b：以Byte为单位显示内存使用情况；\n-k：以KB为单位显示内存使用情况；\n-m：以MB为单位显示内存使用情况；\n-o：不显示缓冲区调节列；\n-s<间隔秒数>：持续观察内存使用状况；\n-t：显示内存总和列；\n-V：显示版本信息。\n```\n\n## 实例\n\n```\nfree -m\n             total       used       free     shared    buffers     cached\nMem:          2016       1973         42          0        163       1497\n-/+ buffers/cache:        312       1703\nSwap:         4094          0       4094\n```\n\n### 第一部分Mem行解释：\n```\ntotal：内存总数；\nused：已经使用的内存数；\nfree：空闲的内存数；\nshared：当前已经废弃不用；\nbuffers Buffer：缓存内存数；\ncached Page：缓存内存数。\n```\n\n关系：total = used + free\n\n### 第二部分(-/+ buffers/cache)解释:\n\n```\n(-buffers/cache) used内存数：第一部分Mem行中的 used – buffers – cached\n(+buffers/cache) free内存数: 第一部分Mem行中的 free + buffers + cached\n```\n\n可见-buffers/cache反映的是被程序实实在在吃掉的内存，而+buffers/cache反映的是可以挪用的内存总数。\n\n第三部分是指交换分区。\n","source":"_posts/free命令.md","raw":"---\ntitle: free命令\ntags:\n  - linux\ncategories:\n  - 后端开发\ntoc: false\ndate: 2018-01-24 11:03:06\n---\n\nfree命令可以显示当前系统未使用的和已使用的内存数目，还可以显示被内核使用的内存缓冲区。\n\n## 语法\n\n```\nfree(选项)\n```\n\n<!-- more -->\n\n## 选项\n\n```\n-b：以Byte为单位显示内存使用情况；\n-k：以KB为单位显示内存使用情况；\n-m：以MB为单位显示内存使用情况；\n-o：不显示缓冲区调节列；\n-s<间隔秒数>：持续观察内存使用状况；\n-t：显示内存总和列；\n-V：显示版本信息。\n```\n\n## 实例\n\n```\nfree -m\n             total       used       free     shared    buffers     cached\nMem:          2016       1973         42          0        163       1497\n-/+ buffers/cache:        312       1703\nSwap:         4094          0       4094\n```\n\n### 第一部分Mem行解释：\n```\ntotal：内存总数；\nused：已经使用的内存数；\nfree：空闲的内存数；\nshared：当前已经废弃不用；\nbuffers Buffer：缓存内存数；\ncached Page：缓存内存数。\n```\n\n关系：total = used + free\n\n### 第二部分(-/+ buffers/cache)解释:\n\n```\n(-buffers/cache) used内存数：第一部分Mem行中的 used – buffers – cached\n(+buffers/cache) free内存数: 第一部分Mem行中的 free + buffers + cached\n```\n\n可见-buffers/cache反映的是被程序实实在在吃掉的内存，而+buffers/cache反映的是可以挪用的内存总数。\n\n第三部分是指交换分区。\n","slug":"free命令","published":1,"updated":"2019-11-07T02:17:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznyn0043h5s6q3aepnin","content":"<p>free命令可以显示当前系统未使用的和已使用的内存数目，还可以显示被内核使用的内存缓冲区。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">free(选项)</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-b：以Byte为单位显示内存使用情况；</span><br><span class=\"line\">-k：以KB为单位显示内存使用情况；</span><br><span class=\"line\">-m：以MB为单位显示内存使用情况；</span><br><span class=\"line\">-o：不显示缓冲区调节列；</span><br><span class=\"line\">-s&lt;间隔秒数&gt;：持续观察内存使用状况；</span><br><span class=\"line\">-t：显示内存总和列；</span><br><span class=\"line\">-V：显示版本信息。</span><br></pre></td></tr></table></figure>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">free -m</span><br><span class=\"line\">             total       used       free     shared    buffers     cached</span><br><span class=\"line\">Mem:          2016       1973         42          0        163       1497</span><br><span class=\"line\">-/+ buffers/cache:        312       1703</span><br><span class=\"line\">Swap:         4094          0       4094</span><br></pre></td></tr></table></figure>\n<h3 id=\"第一部分Mem行解释：\"><a href=\"#第一部分Mem行解释：\" class=\"headerlink\" title=\"第一部分Mem行解释：\"></a>第一部分Mem行解释：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total：内存总数；</span><br><span class=\"line\">used：已经使用的内存数；</span><br><span class=\"line\">free：空闲的内存数；</span><br><span class=\"line\">shared：当前已经废弃不用；</span><br><span class=\"line\">buffers Buffer：缓存内存数；</span><br><span class=\"line\">cached Page：缓存内存数。</span><br></pre></td></tr></table></figure>\n<p>关系：total = used + free</p>\n<h3 id=\"第二部分-buffers-cache-解释\"><a href=\"#第二部分-buffers-cache-解释\" class=\"headerlink\" title=\"第二部分(-/+ buffers/cache)解释:\"></a>第二部分(-/+ buffers/cache)解释:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(-buffers/cache) used内存数：第一部分Mem行中的 used – buffers – cached</span><br><span class=\"line\">(+buffers/cache) free内存数: 第一部分Mem行中的 free + buffers + cached</span><br></pre></td></tr></table></figure>\n<p>可见-buffers/cache反映的是被程序实实在在吃掉的内存，而+buffers/cache反映的是可以挪用的内存总数。</p>\n<p>第三部分是指交换分区。</p>\n","site":{"data":{}},"excerpt":"<p>free命令可以显示当前系统未使用的和已使用的内存数目，还可以显示被内核使用的内存缓冲区。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">free(选项)</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-b：以Byte为单位显示内存使用情况；</span><br><span class=\"line\">-k：以KB为单位显示内存使用情况；</span><br><span class=\"line\">-m：以MB为单位显示内存使用情况；</span><br><span class=\"line\">-o：不显示缓冲区调节列；</span><br><span class=\"line\">-s&lt;间隔秒数&gt;：持续观察内存使用状况；</span><br><span class=\"line\">-t：显示内存总和列；</span><br><span class=\"line\">-V：显示版本信息。</span><br></pre></td></tr></table></figure>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">free -m</span><br><span class=\"line\">             total       used       free     shared    buffers     cached</span><br><span class=\"line\">Mem:          2016       1973         42          0        163       1497</span><br><span class=\"line\">-/+ buffers/cache:        312       1703</span><br><span class=\"line\">Swap:         4094          0       4094</span><br></pre></td></tr></table></figure>\n<h3 id=\"第一部分Mem行解释：\"><a href=\"#第一部分Mem行解释：\" class=\"headerlink\" title=\"第一部分Mem行解释：\"></a>第一部分Mem行解释：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total：内存总数；</span><br><span class=\"line\">used：已经使用的内存数；</span><br><span class=\"line\">free：空闲的内存数；</span><br><span class=\"line\">shared：当前已经废弃不用；</span><br><span class=\"line\">buffers Buffer：缓存内存数；</span><br><span class=\"line\">cached Page：缓存内存数。</span><br></pre></td></tr></table></figure>\n<p>关系：total = used + free</p>\n<h3 id=\"第二部分-buffers-cache-解释\"><a href=\"#第二部分-buffers-cache-解释\" class=\"headerlink\" title=\"第二部分(-/+ buffers/cache)解释:\"></a>第二部分(-/+ buffers/cache)解释:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(-buffers/cache) used内存数：第一部分Mem行中的 used – buffers – cached</span><br><span class=\"line\">(+buffers/cache) free内存数: 第一部分Mem行中的 free + buffers + cached</span><br></pre></td></tr></table></figure>\n<p>可见-buffers/cache反映的是被程序实实在在吃掉的内存，而+buffers/cache反映的是可以挪用的内存总数。</p>\n<p>第三部分是指交换分区。</p>"},{"title":"koajs框架下创建二维码生成服务","toc":false,"date":"2017-11-01T09:50:10.000Z","_content":"\n通过node-qrcode项目能够快速搭建一个生成二维码的服务器，但是在各种框架下如何使用呢，比如我们用的koajs，同时希望这是一个动态生成图片的服务，也就是返回的就是图片信息，而不是通过一次get请求得到图片url，然后再把url放到图片src中，这种方式一来会增加客户端的复杂程度，二来生成的图片需要服务器资源存储\n\n<!-- more -->\n\n这时候我们就需要一个类似服务的链接，将需要二维码展示的字符串编码后传给后端则能得到一个需要的图片，代码如下：\n\n```\n\n/**\n * 获取二维码接口\n *\n * txt 参数为二维码展示内容，如果不存在或者为空默认生成乐视网地址\n *\n * 接口地址：http://myhost/service/getQrCode/encodeuricomponentStr\n *\n */\n\nvar QRCode = require('qrcode');\n\n/**\n * 通过包装方法，能够使用yield同步获取得到结果\n * @param text\n * @returns {Function}\n */\nvar getQRCode = function(text) {\n    return function (done) {\n        QRCode.toDataURL(text, {\n            margin: 1\n        }, function (err, dataUrl) {\n            done(null, dataUrl);\n        });\n    }\n}\n\n/**\n *\n * 经过一番尝试这样处理方式比较合理，不用操作文件\n * 尝试1：QRCode.toFile生成图片存到本地，通过fs读文件，返回浏览器，可以使用但是占用磁盘资源，维护成本相对较大\n * 尝试2：QRCode.toDataURL得到图片的base64格式，删除掉前边的固定图片标识，将base64转成buffer通过koajs输出\n * 尝试2的做法比较优雅，不会产生文件，更不会存在文件读写操作，只要服务器是稳定的，图片就一定能够出来\n * \n * 缺点就是当服务失效后，所有二维码将不再存在。\n * \n * 由于我们的参数传递是放在路径里，当然也能放在查询字符串里，这里用的是路径\n * 好处就是能够使用cdn缓存，如果服务挂了，访问过的链接二维码图片在cdn还能缓存一段时间\n * 同时能减少一部分服务器压力\n */\nexports.init = function* () {\n    var txt = decodeURIComponent(this.params.txt || 'http:myhost');\n    var dataUrl = yield getQRCode(txt);\n    // 去掉生成dataUrl里边的固定标识，剩下的就是base64字符\n    var base64 = dataUrl.replace(/^data:image\\/\\w+;base64,/, \"\")\n    var dataBuffer = new Buffer(base64, 'base64');\n    this.set('content-type', 'image/png');\n    this.status = 200;\n    this.body = dataBuffer;\n};\n\n```\n\n最后验证CDN是否生效的方法也很简单，监听特定请求的二维码请求，第一次能够打到服务器上，之后的请求不再走服务器即可\n```\n tail -f /var/logs/nginx/access.log | grep \"service/getQrCode/myuniquestr\"\n```\n","source":"_posts/koajs框架下创建二维码生成服务.md","raw":"---\ntitle: koajs框架下创建二维码生成服务\ntags:\n  - nodejs\ncategories:\n  - NodeJS\ntoc: false\ndate: 2017-11-01 17:50:10\n---\n\n通过node-qrcode项目能够快速搭建一个生成二维码的服务器，但是在各种框架下如何使用呢，比如我们用的koajs，同时希望这是一个动态生成图片的服务，也就是返回的就是图片信息，而不是通过一次get请求得到图片url，然后再把url放到图片src中，这种方式一来会增加客户端的复杂程度，二来生成的图片需要服务器资源存储\n\n<!-- more -->\n\n这时候我们就需要一个类似服务的链接，将需要二维码展示的字符串编码后传给后端则能得到一个需要的图片，代码如下：\n\n```\n\n/**\n * 获取二维码接口\n *\n * txt 参数为二维码展示内容，如果不存在或者为空默认生成乐视网地址\n *\n * 接口地址：http://myhost/service/getQrCode/encodeuricomponentStr\n *\n */\n\nvar QRCode = require('qrcode');\n\n/**\n * 通过包装方法，能够使用yield同步获取得到结果\n * @param text\n * @returns {Function}\n */\nvar getQRCode = function(text) {\n    return function (done) {\n        QRCode.toDataURL(text, {\n            margin: 1\n        }, function (err, dataUrl) {\n            done(null, dataUrl);\n        });\n    }\n}\n\n/**\n *\n * 经过一番尝试这样处理方式比较合理，不用操作文件\n * 尝试1：QRCode.toFile生成图片存到本地，通过fs读文件，返回浏览器，可以使用但是占用磁盘资源，维护成本相对较大\n * 尝试2：QRCode.toDataURL得到图片的base64格式，删除掉前边的固定图片标识，将base64转成buffer通过koajs输出\n * 尝试2的做法比较优雅，不会产生文件，更不会存在文件读写操作，只要服务器是稳定的，图片就一定能够出来\n * \n * 缺点就是当服务失效后，所有二维码将不再存在。\n * \n * 由于我们的参数传递是放在路径里，当然也能放在查询字符串里，这里用的是路径\n * 好处就是能够使用cdn缓存，如果服务挂了，访问过的链接二维码图片在cdn还能缓存一段时间\n * 同时能减少一部分服务器压力\n */\nexports.init = function* () {\n    var txt = decodeURIComponent(this.params.txt || 'http:myhost');\n    var dataUrl = yield getQRCode(txt);\n    // 去掉生成dataUrl里边的固定标识，剩下的就是base64字符\n    var base64 = dataUrl.replace(/^data:image\\/\\w+;base64,/, \"\")\n    var dataBuffer = new Buffer(base64, 'base64');\n    this.set('content-type', 'image/png');\n    this.status = 200;\n    this.body = dataBuffer;\n};\n\n```\n\n最后验证CDN是否生效的方法也很简单，监听特定请求的二维码请求，第一次能够打到服务器上，之后的请求不再走服务器即可\n```\n tail -f /var/logs/nginx/access.log | grep \"service/getQrCode/myuniquestr\"\n```\n","slug":"koajs框架下创建二维码生成服务","published":1,"updated":"2019-11-07T02:17:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznyp0047h5s6n3ihq5sh","content":"<p>通过node-qrcode项目能够快速搭建一个生成二维码的服务器，但是在各种框架下如何使用呢，比如我们用的koajs，同时希望这是一个动态生成图片的服务，也就是返回的就是图片信息，而不是通过一次get请求得到图片url，然后再把url放到图片src中，这种方式一来会增加客户端的复杂程度，二来生成的图片需要服务器资源存储</p>\n<a id=\"more\"></a>\n<p>这时候我们就需要一个类似服务的链接，将需要二维码展示的字符串编码后传给后端则能得到一个需要的图片，代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 获取二维码接口</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * txt 参数为二维码展示内容，如果不存在或者为空默认生成乐视网地址</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * 接口地址：http://myhost/service/getQrCode/encodeuricomponentStr</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">var QRCode = require(&apos;qrcode&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 通过包装方法，能够使用yield同步获取得到结果</span><br><span class=\"line\"> * @param text</span><br><span class=\"line\"> * @returns &#123;Function&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var getQRCode = function(text) &#123;</span><br><span class=\"line\">    return function (done) &#123;</span><br><span class=\"line\">        QRCode.toDataURL(text, &#123;</span><br><span class=\"line\">            margin: 1</span><br><span class=\"line\">        &#125;, function (err, dataUrl) &#123;</span><br><span class=\"line\">            done(null, dataUrl);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * 经过一番尝试这样处理方式比较合理，不用操作文件</span><br><span class=\"line\"> * 尝试1：QRCode.toFile生成图片存到本地，通过fs读文件，返回浏览器，可以使用但是占用磁盘资源，维护成本相对较大</span><br><span class=\"line\"> * 尝试2：QRCode.toDataURL得到图片的base64格式，删除掉前边的固定图片标识，将base64转成buffer通过koajs输出</span><br><span class=\"line\"> * 尝试2的做法比较优雅，不会产生文件，更不会存在文件读写操作，只要服务器是稳定的，图片就一定能够出来</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * 缺点就是当服务失效后，所有二维码将不再存在。</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * 由于我们的参数传递是放在路径里，当然也能放在查询字符串里，这里用的是路径</span><br><span class=\"line\"> * 好处就是能够使用cdn缓存，如果服务挂了，访问过的链接二维码图片在cdn还能缓存一段时间</span><br><span class=\"line\"> * 同时能减少一部分服务器压力</span><br><span class=\"line\"> */</span><br><span class=\"line\">exports.init = function* () &#123;</span><br><span class=\"line\">    var txt = decodeURIComponent(this.params.txt || &apos;http:myhost&apos;);</span><br><span class=\"line\">    var dataUrl = yield getQRCode(txt);</span><br><span class=\"line\">    // 去掉生成dataUrl里边的固定标识，剩下的就是base64字符</span><br><span class=\"line\">    var base64 = dataUrl.replace(/^data:image\\/\\w+;base64,/, &quot;&quot;)</span><br><span class=\"line\">    var dataBuffer = new Buffer(base64, &apos;base64&apos;);</span><br><span class=\"line\">    this.set(&apos;content-type&apos;, &apos;image/png&apos;);</span><br><span class=\"line\">    this.status = 200;</span><br><span class=\"line\">    this.body = dataBuffer;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>最后验证CDN是否生效的方法也很简单，监听特定请求的二维码请求，第一次能够打到服务器上，之后的请求不再走服务器即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tail -f /var/logs/nginx/access.log | grep &quot;service/getQrCode/myuniquestr&quot;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>通过node-qrcode项目能够快速搭建一个生成二维码的服务器，但是在各种框架下如何使用呢，比如我们用的koajs，同时希望这是一个动态生成图片的服务，也就是返回的就是图片信息，而不是通过一次get请求得到图片url，然后再把url放到图片src中，这种方式一来会增加客户端的复杂程度，二来生成的图片需要服务器资源存储</p>","more":"<p>这时候我们就需要一个类似服务的链接，将需要二维码展示的字符串编码后传给后端则能得到一个需要的图片，代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 获取二维码接口</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * txt 参数为二维码展示内容，如果不存在或者为空默认生成乐视网地址</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * 接口地址：http://myhost/service/getQrCode/encodeuricomponentStr</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">var QRCode = require(&apos;qrcode&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 通过包装方法，能够使用yield同步获取得到结果</span><br><span class=\"line\"> * @param text</span><br><span class=\"line\"> * @returns &#123;Function&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var getQRCode = function(text) &#123;</span><br><span class=\"line\">    return function (done) &#123;</span><br><span class=\"line\">        QRCode.toDataURL(text, &#123;</span><br><span class=\"line\">            margin: 1</span><br><span class=\"line\">        &#125;, function (err, dataUrl) &#123;</span><br><span class=\"line\">            done(null, dataUrl);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * 经过一番尝试这样处理方式比较合理，不用操作文件</span><br><span class=\"line\"> * 尝试1：QRCode.toFile生成图片存到本地，通过fs读文件，返回浏览器，可以使用但是占用磁盘资源，维护成本相对较大</span><br><span class=\"line\"> * 尝试2：QRCode.toDataURL得到图片的base64格式，删除掉前边的固定图片标识，将base64转成buffer通过koajs输出</span><br><span class=\"line\"> * 尝试2的做法比较优雅，不会产生文件，更不会存在文件读写操作，只要服务器是稳定的，图片就一定能够出来</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * 缺点就是当服务失效后，所有二维码将不再存在。</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * 由于我们的参数传递是放在路径里，当然也能放在查询字符串里，这里用的是路径</span><br><span class=\"line\"> * 好处就是能够使用cdn缓存，如果服务挂了，访问过的链接二维码图片在cdn还能缓存一段时间</span><br><span class=\"line\"> * 同时能减少一部分服务器压力</span><br><span class=\"line\"> */</span><br><span class=\"line\">exports.init = function* () &#123;</span><br><span class=\"line\">    var txt = decodeURIComponent(this.params.txt || &apos;http:myhost&apos;);</span><br><span class=\"line\">    var dataUrl = yield getQRCode(txt);</span><br><span class=\"line\">    // 去掉生成dataUrl里边的固定标识，剩下的就是base64字符</span><br><span class=\"line\">    var base64 = dataUrl.replace(/^data:image\\/\\w+;base64,/, &quot;&quot;)</span><br><span class=\"line\">    var dataBuffer = new Buffer(base64, &apos;base64&apos;);</span><br><span class=\"line\">    this.set(&apos;content-type&apos;, &apos;image/png&apos;);</span><br><span class=\"line\">    this.status = 200;</span><br><span class=\"line\">    this.body = dataBuffer;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>最后验证CDN是否生效的方法也很简单，监听特定请求的二维码请求，第一次能够打到服务器上，之后的请求不再走服务器即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tail -f /var/logs/nginx/access.log | grep &quot;service/getQrCode/myuniquestr&quot;</span><br></pre></td></tr></table></figure></p>"},{"title":"linux下使用npm install无法安装成功的问题","toc":false,"date":"2019-08-13T08:44:58.000Z","_content":"\n```bash\nsudo npm install\n```\n\n可能是权限问题\n","source":"_posts/linux下使用npm-install无法安装成功的问题.md","raw":"---\ntitle: linux下使用npm install无法安装成功的问题\ntags:\n  - nodejs\ncategories:\n  - Web开发\ntoc: false\ndate: 2019-08-13 16:44:58\n---\n\n```bash\nsudo npm install\n```\n\n可能是权限问题\n","slug":"linux下使用npm-install无法安装成功的问题","published":1,"updated":"2019-11-07T02:17:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznyq004ah5s6qbrgl9tk","content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install</span><br></pre></td></tr></table></figure>\n<p>可能是权限问题</p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install</span><br></pre></td></tr></table></figure>\n<p>可能是权限问题</p>\n"},{"title":"java.lang.UnsatisfiedLinkError: dlopen failed","toc":false,"date":"2019-04-03T15:16:03.000Z","_content":"\n今天在做一个SDK开发的时候，因为library中用到了.so库文件，所以我直接从之前的项目中复制过来对应的.so文件到libs中，但是开发完成后，运行直接到native方法处就崩溃。。。我一脸蒙蔽哈。。。 \n这TM什么情况，在native处崩溃后，没有任何错误提示，搞的我1个小时定位问题。。。 \n最后实在搞不了了，还是写了个日志输出代码，发现这个错误：\n<!--more-->\n```java.lang.UnsatisfiedLinkError: dlopen failed: file offset for the library \"/data/app/com.shangxiaom.micms_library-1/lib/arm/librkecg.so\" >= file size: 0 >= 0\n    at java.lang.Runtime.loadLibrary(Runtime.java:372)\n    at java.lang.System.loadLibrary(System.java:1076)\n    at rkhy.com.ecg.common.algorithm.RKECG.<clinit>(RKECG.java:5)\n    at rkhy.com.ecg.common.algorithm.RKECG.initAlgorithm(Native Method)\n    at com.shangxiaom.micms_library.RKECGActivity$4$1.run(RKECGActivity.java:173)\n    at java.lang.Thread.run(Thread.java:818)\n\n```\n\n这什么情况！！！我的.so库的size怎么会是0呢？？ 之前的项目一直在用啊~~\n\n我赶快打开工程的目录，看到这个.so库竟然真的是0.。。。。这什么情况啊~~复制过来的怎么size怎么会是0 呢？？完全摸不着头脑！！！！\n\n好吧~~ 既然这样，先修改问题吧。。 重新拷贝一下.so库文件吧。。。\n\n仅以此文记录此坑。~\n--------------------- \n作者：慵懒的树獭 \n来源：CSDN \n原文：https://blog.csdn.net/shangming150/article/details/81120664 \n版权声明：本文为博主原创文章，转载请附上博文链接！\n","source":"_posts/java-lang-UnsatisfiedLinkError-dlopen-failed.md","raw":"---\ntitle: 'java.lang.UnsatisfiedLinkError: dlopen failed'\ntags:\n  - apicloud\ncategories:\n  - 移动开发\ntoc: false\ndate: 2019-04-03 23:16:03\n---\n\n今天在做一个SDK开发的时候，因为library中用到了.so库文件，所以我直接从之前的项目中复制过来对应的.so文件到libs中，但是开发完成后，运行直接到native方法处就崩溃。。。我一脸蒙蔽哈。。。 \n这TM什么情况，在native处崩溃后，没有任何错误提示，搞的我1个小时定位问题。。。 \n最后实在搞不了了，还是写了个日志输出代码，发现这个错误：\n<!--more-->\n```java.lang.UnsatisfiedLinkError: dlopen failed: file offset for the library \"/data/app/com.shangxiaom.micms_library-1/lib/arm/librkecg.so\" >= file size: 0 >= 0\n    at java.lang.Runtime.loadLibrary(Runtime.java:372)\n    at java.lang.System.loadLibrary(System.java:1076)\n    at rkhy.com.ecg.common.algorithm.RKECG.<clinit>(RKECG.java:5)\n    at rkhy.com.ecg.common.algorithm.RKECG.initAlgorithm(Native Method)\n    at com.shangxiaom.micms_library.RKECGActivity$4$1.run(RKECGActivity.java:173)\n    at java.lang.Thread.run(Thread.java:818)\n\n```\n\n这什么情况！！！我的.so库的size怎么会是0呢？？ 之前的项目一直在用啊~~\n\n我赶快打开工程的目录，看到这个.so库竟然真的是0.。。。。这什么情况啊~~复制过来的怎么size怎么会是0 呢？？完全摸不着头脑！！！！\n\n好吧~~ 既然这样，先修改问题吧。。 重新拷贝一下.so库文件吧。。。\n\n仅以此文记录此坑。~\n--------------------- \n作者：慵懒的树獭 \n来源：CSDN \n原文：https://blog.csdn.net/shangming150/article/details/81120664 \n版权声明：本文为博主原创文章，转载请附上博文链接！\n","slug":"java-lang-UnsatisfiedLinkError-dlopen-failed","published":1,"updated":"2019-11-07T02:17:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznys004dh5s69uinlj17","content":"<p>今天在做一个SDK开发的时候，因为library中用到了.so库文件，所以我直接从之前的项目中复制过来对应的.so文件到libs中，但是开发完成后，运行直接到native方法处就崩溃。。。我一脸蒙蔽哈。。。<br>这TM什么情况，在native处崩溃后，没有任何错误提示，搞的我1个小时定位问题。。。<br>最后实在搞不了了，还是写了个日志输出代码，发现这个错误：<br><a id=\"more\"></a><br><figure class=\"highlight plain\"><figcaption><span>dlopen failed: file offset for the library \"/data/app/com.shangxiaom.micms_library-1/lib/arm/librkecg.so\" ></span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">at java.lang.Runtime.loadLibrary(Runtime.java:372)</span><br><span class=\"line\">at java.lang.System.loadLibrary(System.java:1076)</span><br><span class=\"line\">at rkhy.com.ecg.common.algorithm.RKECG.&lt;clinit&gt;(RKECG.java:5)</span><br><span class=\"line\">at rkhy.com.ecg.common.algorithm.RKECG.initAlgorithm(Native Method)</span><br><span class=\"line\">at com.shangxiaom.micms_library.RKECGActivity$4$1.run(RKECGActivity.java:173)</span><br><span class=\"line\">at java.lang.Thread.run(Thread.java:818)</span><br></pre></td></tr></table></figure></p>\n<p>这什么情况！！！我的.so库的size怎么会是0呢？？ 之前的项目一直在用啊~~</p>\n<p>我赶快打开工程的目录，看到这个.so库竟然真的是0.。。。。这什么情况啊~~复制过来的怎么size怎么会是0 呢？？完全摸不着头脑！！！！</p>\n<p>好吧~~ 既然这样，先修改问题吧。。 重新拷贝一下.so库文件吧。。。</p>\n<h2 id=\"仅以此文记录此坑。\"><a href=\"#仅以此文记录此坑。\" class=\"headerlink\" title=\"仅以此文记录此坑。~\"></a>仅以此文记录此坑。~</h2><p>作者：慵懒的树獭<br>来源：CSDN<br>原文：<a href=\"https://blog.csdn.net/shangming150/article/details/81120664\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/shangming150/article/details/81120664</a><br>版权声明：本文为博主原创文章，转载请附上博文链接！</p>\n","site":{"data":{}},"excerpt":"<p>今天在做一个SDK开发的时候，因为library中用到了.so库文件，所以我直接从之前的项目中复制过来对应的.so文件到libs中，但是开发完成后，运行直接到native方法处就崩溃。。。我一脸蒙蔽哈。。。<br>这TM什么情况，在native处崩溃后，没有任何错误提示，搞的我1个小时定位问题。。。<br>最后实在搞不了了，还是写了个日志输出代码，发现这个错误：<br>","more":"<br><figure class=\"highlight plain\"><figcaption><span>dlopen failed: file offset for the library \"/data/app/com.shangxiaom.micms_library-1/lib/arm/librkecg.so\" ></span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">at java.lang.Runtime.loadLibrary(Runtime.java:372)</span><br><span class=\"line\">at java.lang.System.loadLibrary(System.java:1076)</span><br><span class=\"line\">at rkhy.com.ecg.common.algorithm.RKECG.&lt;clinit&gt;(RKECG.java:5)</span><br><span class=\"line\">at rkhy.com.ecg.common.algorithm.RKECG.initAlgorithm(Native Method)</span><br><span class=\"line\">at com.shangxiaom.micms_library.RKECGActivity$4$1.run(RKECGActivity.java:173)</span><br><span class=\"line\">at java.lang.Thread.run(Thread.java:818)</span><br></pre></td></tr></table></figure></p>\n<p>这什么情况！！！我的.so库的size怎么会是0呢？？ 之前的项目一直在用啊~~</p>\n<p>我赶快打开工程的目录，看到这个.so库竟然真的是0.。。。。这什么情况啊~~复制过来的怎么size怎么会是0 呢？？完全摸不着头脑！！！！</p>\n<p>好吧~~ 既然这样，先修改问题吧。。 重新拷贝一下.so库文件吧。。。</p>\n<h2 id=\"仅以此文记录此坑。\"><a href=\"#仅以此文记录此坑。\" class=\"headerlink\" title=\"仅以此文记录此坑。~\"></a>仅以此文记录此坑。~</h2><p>作者：慵懒的树獭<br>来源：CSDN<br>原文：<a href=\"https://blog.csdn.net/shangming150/article/details/81120664\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/shangming150/article/details/81120664</a><br>版权声明：本文为博主原创文章，转载请附上博文链接！</p>"},{"title":"mkdir 用法","toc":false,"date":"2018-01-02T06:41:08.000Z","_content":"\n这次主要想记录的是\n\n```\nmkdir -p folder1/folder2/folder3  # 没有文件夹则创建文件夹\n```\n\n帮助文档可以看下边：\n\n```\n用法：mkdir [选项]... 目录...\nCreate the DIRECTORY(ies), if they do not already exist.\n\nMandatory arguments to long options are mandatory for short options too.\n  -m, --mode=MODE   set file mode (as in chmod), not a=rwx - umask\n  -p, --parents     no error if existing, make parent directories as needed\n  -v, --verbose     print a message for each created directory\n  -Z                   set SELinux security context of each created directory\n                         to the default type\n      --context[=CTX]  like -Z, or if CTX is specified then set the SELinux\n                         or SMACK security context to CTX\n      --help\t\t显示此帮助信息并退出\n      --version\t\t显示版本信息并退出\n\nGNU coreutils online help: <http://www.gnu.org/software/coreutils/>\n请向<http://translationproject.org/team/zh_CN.html> 报告mkdir 的翻译错误\n要获取完整文档，请运行：info coreutils 'mkdir invocation'\n\n```\n","source":"_posts/mkdir-用法.md","raw":"---\ntitle: mkdir 用法\ntags:\n  - linux\ncategories:\n  - 后端开发\ntoc: false\ndate: 2018-01-02 14:41:08\n---\n\n这次主要想记录的是\n\n```\nmkdir -p folder1/folder2/folder3  # 没有文件夹则创建文件夹\n```\n\n帮助文档可以看下边：\n\n```\n用法：mkdir [选项]... 目录...\nCreate the DIRECTORY(ies), if they do not already exist.\n\nMandatory arguments to long options are mandatory for short options too.\n  -m, --mode=MODE   set file mode (as in chmod), not a=rwx - umask\n  -p, --parents     no error if existing, make parent directories as needed\n  -v, --verbose     print a message for each created directory\n  -Z                   set SELinux security context of each created directory\n                         to the default type\n      --context[=CTX]  like -Z, or if CTX is specified then set the SELinux\n                         or SMACK security context to CTX\n      --help\t\t显示此帮助信息并退出\n      --version\t\t显示版本信息并退出\n\nGNU coreutils online help: <http://www.gnu.org/software/coreutils/>\n请向<http://translationproject.org/team/zh_CN.html> 报告mkdir 的翻译错误\n要获取完整文档，请运行：info coreutils 'mkdir invocation'\n\n```\n","slug":"mkdir-用法","published":1,"updated":"2019-11-07T02:17:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznyv004hh5s6qeb35luo","content":"<p>这次主要想记录的是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p folder1/folder2/folder3  # 没有文件夹则创建文件夹</span><br></pre></td></tr></table></figure>\n<p>帮助文档可以看下边：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用法：mkdir [选项]... 目录...</span><br><span class=\"line\">Create the DIRECTORY(ies), if they do not already exist.</span><br><span class=\"line\"></span><br><span class=\"line\">Mandatory arguments to long options are mandatory for short options too.</span><br><span class=\"line\">  -m, --mode=MODE   set file mode (as in chmod), not a=rwx - umask</span><br><span class=\"line\">  -p, --parents     no error if existing, make parent directories as needed</span><br><span class=\"line\">  -v, --verbose     print a message for each created directory</span><br><span class=\"line\">  -Z                   set SELinux security context of each created directory</span><br><span class=\"line\">                         to the default type</span><br><span class=\"line\">      --context[=CTX]  like -Z, or if CTX is specified then set the SELinux</span><br><span class=\"line\">                         or SMACK security context to CTX</span><br><span class=\"line\">      --help\t\t显示此帮助信息并退出</span><br><span class=\"line\">      --version\t\t显示版本信息并退出</span><br><span class=\"line\"></span><br><span class=\"line\">GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;</span><br><span class=\"line\">请向&lt;http://translationproject.org/team/zh_CN.html&gt; 报告mkdir 的翻译错误</span><br><span class=\"line\">要获取完整文档，请运行：info coreutils &apos;mkdir invocation&apos;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>这次主要想记录的是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p folder1/folder2/folder3  # 没有文件夹则创建文件夹</span><br></pre></td></tr></table></figure>\n<p>帮助文档可以看下边：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用法：mkdir [选项]... 目录...</span><br><span class=\"line\">Create the DIRECTORY(ies), if they do not already exist.</span><br><span class=\"line\"></span><br><span class=\"line\">Mandatory arguments to long options are mandatory for short options too.</span><br><span class=\"line\">  -m, --mode=MODE   set file mode (as in chmod), not a=rwx - umask</span><br><span class=\"line\">  -p, --parents     no error if existing, make parent directories as needed</span><br><span class=\"line\">  -v, --verbose     print a message for each created directory</span><br><span class=\"line\">  -Z                   set SELinux security context of each created directory</span><br><span class=\"line\">                         to the default type</span><br><span class=\"line\">      --context[=CTX]  like -Z, or if CTX is specified then set the SELinux</span><br><span class=\"line\">                         or SMACK security context to CTX</span><br><span class=\"line\">      --help\t\t显示此帮助信息并退出</span><br><span class=\"line\">      --version\t\t显示版本信息并退出</span><br><span class=\"line\"></span><br><span class=\"line\">GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;</span><br><span class=\"line\">请向&lt;http://translationproject.org/team/zh_CN.html&gt; 报告mkdir 的翻译错误</span><br><span class=\"line\">要获取完整文档，请运行：info coreutils &apos;mkdir invocation&apos;</span><br></pre></td></tr></table></figure>\n"},{"title":"linux查看端口占用情况","toc":false,"date":"2018-04-08T07:25:10.000Z","_content":"\n1. 查看5150端口占用的命令行如下：\n\n```\nlsof -i:5150\n```\n\n不识别lsof，则执行`yum install lsof -y`\n\n结果如下:\n\n```\nCOMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\nnode    6055 root   19u  IPv6  29137      0t0  TCP *:atmp (LISTEN)\nnode    6055 root   21u  IPv6  29139      0t0  TCP localhost.localdomain:atmp->192.168.34.11:59258 (ESTABLISHED)\n```\n\n2. 如果想杀掉node进程则使用\n\n```\nsudo kill 6055\n```\n","source":"_posts/linux查看端口占用情况.md","raw":"---\ntitle: linux查看端口占用情况\ntags:\n  - linux\ncategories:\n  - 后端开发\ntoc: false\ndate: 2018-04-08 15:25:10\n---\n\n1. 查看5150端口占用的命令行如下：\n\n```\nlsof -i:5150\n```\n\n不识别lsof，则执行`yum install lsof -y`\n\n结果如下:\n\n```\nCOMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\nnode    6055 root   19u  IPv6  29137      0t0  TCP *:atmp (LISTEN)\nnode    6055 root   21u  IPv6  29139      0t0  TCP localhost.localdomain:atmp->192.168.34.11:59258 (ESTABLISHED)\n```\n\n2. 如果想杀掉node进程则使用\n\n```\nsudo kill 6055\n```\n","slug":"linux查看端口占用情况","published":1,"updated":"2019-11-07T02:17:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznyw004kh5s6uoasoqmm","content":"<ol>\n<li>查看5150端口占用的命令行如下：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof -i:5150</span><br></pre></td></tr></table></figure>\n<p>不识别lsof，则执行<code>yum install lsof -y</code></p>\n<p>结果如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class=\"line\">node    6055 root   19u  IPv6  29137      0t0  TCP *:atmp (LISTEN)</span><br><span class=\"line\">node    6055 root   21u  IPv6  29139      0t0  TCP localhost.localdomain:atmp-&gt;192.168.34.11:59258 (ESTABLISHED)</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>如果想杀掉node进程则使用</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo kill 6055</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>查看5150端口占用的命令行如下：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof -i:5150</span><br></pre></td></tr></table></figure>\n<p>不识别lsof，则执行<code>yum install lsof -y</code></p>\n<p>结果如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class=\"line\">node    6055 root   19u  IPv6  29137      0t0  TCP *:atmp (LISTEN)</span><br><span class=\"line\">node    6055 root   21u  IPv6  29139      0t0  TCP localhost.localdomain:atmp-&gt;192.168.34.11:59258 (ESTABLISHED)</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>如果想杀掉node进程则使用</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo kill 6055</span><br></pre></td></tr></table></figure>\n"},{"title":"nginx单页应用基本配置","toc":false,"date":"2018-03-25T02:10:09.000Z","_content":"\n我们经常会用到nginx单页应用，同时我们部署的时候需要注意一点就是单页应用的所有页面入口都是相同的, nginx上怎么配置呢\n\n<!-- more -->\n如下：\n\n```\nserver {\n    listen 80;\n    charset utf-8;\n    root /your/root;\n    index index.html index.htm;\n    location / {\n        try_files $uri $uri/ /index.html;\n    }\n}\n```\n","source":"_posts/nginx单页应用基本配置.md","raw":"---\ntitle: nginx单页应用基本配置\ntags:\n  - nginx\ncategories:\n  - 后端开发\ntoc: false\ndate: 2018-03-25 10:10:09\n---\n\n我们经常会用到nginx单页应用，同时我们部署的时候需要注意一点就是单页应用的所有页面入口都是相同的, nginx上怎么配置呢\n\n<!-- more -->\n如下：\n\n```\nserver {\n    listen 80;\n    charset utf-8;\n    root /your/root;\n    index index.html index.htm;\n    location / {\n        try_files $uri $uri/ /index.html;\n    }\n}\n```\n","slug":"nginx单页应用基本配置","published":1,"updated":"2019-11-07T02:17:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznyy004oh5s64ewjyrka","content":"<p>我们经常会用到nginx单页应用，同时我们部署的时候需要注意一点就是单页应用的所有页面入口都是相同的, nginx上怎么配置呢</p>\n<a id=\"more\"></a>\n<p>如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    charset utf-8;</span><br><span class=\"line\">    root /your/root;</span><br><span class=\"line\">    index index.html index.htm;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        try_files $uri $uri/ /index.html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>我们经常会用到nginx单页应用，同时我们部署的时候需要注意一点就是单页应用的所有页面入口都是相同的, nginx上怎么配置呢</p>","more":"<p>如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    charset utf-8;</span><br><span class=\"line\">    root /your/root;</span><br><span class=\"line\">    index index.html index.htm;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        try_files $uri $uri/ /index.html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"getaddrinfo ENOTFOUND localhost解决办法","originContent":"","toc":false,"date":"2021-03-15T06:05:54.000Z","_content":"\nmpvue npm run dev 报错Error: getaddrinfo ENOTFOUND localhost解决办法\n\n打开hosts文件 添加127.0.0.1 localhost","source":"_posts/getaddrinfo-ENOTFOUND-localhost解决办法.md","raw":"---\ntitle: getaddrinfo ENOTFOUND localhost解决办法\ntags:\n  - Web开发\noriginContent: ''\ncategories:\n  - H5开发\ntoc: false\ndate: 2021-03-15 14:05:54\n---\n\nmpvue npm run dev 报错Error: getaddrinfo ENOTFOUND localhost解决办法\n\n打开hosts文件 添加127.0.0.1 localhost","slug":"getaddrinfo-ENOTFOUND-localhost解决办法","published":1,"updated":"2021-03-15T06:05:54.364Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznz0004rh5s61hgxhsej","content":"<p>mpvue npm run dev 报错Error: getaddrinfo ENOTFOUND localhost解决办法</p>\n<p>打开hosts文件 添加127.0.0.1 localhost</p>\n","site":{"data":{}},"excerpt":"","more":"<p>mpvue npm run dev 报错Error: getaddrinfo ENOTFOUND localhost解决办法</p>\n<p>打开hosts文件 添加127.0.0.1 localhost</p>\n"},{"title":"nginx设置cookie点滴感悟","toc":false,"date":"2018-04-11T05:54:55.000Z","_content":"\n公司有一个简单需求：利用nginx的ngx_http_auth_request_module模块设计一个鉴权接口，将鉴权接口返回的字符串赋值给$trueValue，设置到cookie的Value中。\n\n面对这个简单需求，首先，去百度搜索nginx、cookie等相关的关键字，有价值的内容不多，而且写的不够详细，令自己踩了不少坑，所以萌生了写作本文的想法。\n\n搜索后，我首先利用百度知道 https://zhidao.baidu.com/question/519658630466299605.html 这篇文章，能成功设置cookie。本地浏览器向nginx发送一个get/post请求，利用chrome开发者工具查看应答报文的头部已包含set_cookie字段，同时，在Resources标签可见已写入库，如下图1所示。但是，仅仅按照这文章这么做的话，Domain、Expires字段均为默认值，显然这不符合最终要求。\n\n接下来，继续搜索找到 http://www.iteye.com/problems/60159 这篇文章，文中在上篇文章的基础上，设置了自定义的domain、expires等字段。但是，这文章写得太简略了，根本没讲清楚使用原则是什么，无法让人彻底明白每个key应该如何设置，这为我的使用埋下一个坑。当我使用时，原封不动粘贴上面这个链接的add_header指令内容到自己nginx.conf中。经测试，在应答报文中的确包含了set-cookie字段（我们知道，浏览器获知了应答报文的set-cookie字段的信息，即可在本地保留cookie），但是没有入库(即在图1中查询不到任何信息)。\n\n所以就继续搜索，想解决没有入库的问题。此时，我这边思路出现了问题，错误地做出了如下判断：\n\n1. 认为使用add_header指令时，我的字段格式有问题，希望通过将如下指令的双引号换成单引号、增加或者删除空格、更改时间格式等方式让cookie入库，结果折腾好长时间宣告失败。\n\n```\nadd_header \"Set-Cookie\" \"rec_id=$rec_id;domain=.test1.com;path=/;expires=Mon, 29-Jun-2015 06:11:17 GMT\";\n```\n\n2. 认为本地chrome浏览器的设置有问题，遂尝试换成IE、Firefox等其他浏览器，看一下能否正常入库，经实验后，均无法正常入库。\n3. 认为add_header指令本身的问题，遂尝试ngx_http_userid_module这个专门用于设置cookie的nginx模块。\n\nngx_http_userid_module模块有专门的语句设置path、expires、domain等字段。但是，我通篇阅读了有关这个模块的nginx官网( http://nginx.org/en/docs/http/ngx_http_userid_module.html )文档后，竟然没有找到设置cookie Value的方式。以前也遇到过这种官方文档写作不明确的情况，比如：post_action指令在nginx官方文档找不到任何说明，但是实际上是可以使用的。没办法，只能自己尝试。我感觉既然userid_name指令是用来设置cookie name的，那么如果我用userid_name uid=\"myCookieValue\"这样，能不能成功呢？实验后，发现的确可以将cookie name设置成uid，cookie Value设置成\"myCookieValue\"。\n\n本以为这样就能完成任务了，坑爹的事儿又来了。如果这么用的话，竟然不支持nginx变量！比如，我设置userid_name uid=$trueValue，其中的$trueValue在nginx.conf中已赋值，但浏览器访问nginx后获取的Value值，竟然是$trueValue，而不是$trueValue中存储的值！这就尴尬了，这条路又走不通了。\n\n走了这么多弯路后，又开始大量搜索相关资料。终于 https://segmentfault.com/q/1010000006116583 中给出了\"同源原则\"，这简单的四字提示。我突然想到我的add_header指令中的domain字段设置的是.test1.com，而nginx的虚拟主机配置的域名是www.abc.com，这两者是不一致的，很有可能根据同源原则，只有这两者一致后，cookie才能设置成功。最后，经过实验，证明了我的判断是正确的。\n\n好了，文章抄到这里作为备忘，自己的设置如下：\n\n```\nserver {\n        listen                  80;\n        server_name             xxx.xx.com;\n        charset                 utf-8;\n        add_header Set-Cookie   'client_ip=$proxy_add_x_forwarded_for;domain=xxx.xx.com;path=/;';\n\n        index index.html;\n        root  /letv/www;\n}\n```\n","source":"_posts/nginx设置cookie点滴感悟.md","raw":"---\ntitle: nginx设置cookie点滴感悟\ntags:\n  - nginx\ncategories:\n  - 后端开发\ntoc: false\ndate: 2018-04-11 13:54:55\n---\n\n公司有一个简单需求：利用nginx的ngx_http_auth_request_module模块设计一个鉴权接口，将鉴权接口返回的字符串赋值给$trueValue，设置到cookie的Value中。\n\n面对这个简单需求，首先，去百度搜索nginx、cookie等相关的关键字，有价值的内容不多，而且写的不够详细，令自己踩了不少坑，所以萌生了写作本文的想法。\n\n搜索后，我首先利用百度知道 https://zhidao.baidu.com/question/519658630466299605.html 这篇文章，能成功设置cookie。本地浏览器向nginx发送一个get/post请求，利用chrome开发者工具查看应答报文的头部已包含set_cookie字段，同时，在Resources标签可见已写入库，如下图1所示。但是，仅仅按照这文章这么做的话，Domain、Expires字段均为默认值，显然这不符合最终要求。\n\n接下来，继续搜索找到 http://www.iteye.com/problems/60159 这篇文章，文中在上篇文章的基础上，设置了自定义的domain、expires等字段。但是，这文章写得太简略了，根本没讲清楚使用原则是什么，无法让人彻底明白每个key应该如何设置，这为我的使用埋下一个坑。当我使用时，原封不动粘贴上面这个链接的add_header指令内容到自己nginx.conf中。经测试，在应答报文中的确包含了set-cookie字段（我们知道，浏览器获知了应答报文的set-cookie字段的信息，即可在本地保留cookie），但是没有入库(即在图1中查询不到任何信息)。\n\n所以就继续搜索，想解决没有入库的问题。此时，我这边思路出现了问题，错误地做出了如下判断：\n\n1. 认为使用add_header指令时，我的字段格式有问题，希望通过将如下指令的双引号换成单引号、增加或者删除空格、更改时间格式等方式让cookie入库，结果折腾好长时间宣告失败。\n\n```\nadd_header \"Set-Cookie\" \"rec_id=$rec_id;domain=.test1.com;path=/;expires=Mon, 29-Jun-2015 06:11:17 GMT\";\n```\n\n2. 认为本地chrome浏览器的设置有问题，遂尝试换成IE、Firefox等其他浏览器，看一下能否正常入库，经实验后，均无法正常入库。\n3. 认为add_header指令本身的问题，遂尝试ngx_http_userid_module这个专门用于设置cookie的nginx模块。\n\nngx_http_userid_module模块有专门的语句设置path、expires、domain等字段。但是，我通篇阅读了有关这个模块的nginx官网( http://nginx.org/en/docs/http/ngx_http_userid_module.html )文档后，竟然没有找到设置cookie Value的方式。以前也遇到过这种官方文档写作不明确的情况，比如：post_action指令在nginx官方文档找不到任何说明，但是实际上是可以使用的。没办法，只能自己尝试。我感觉既然userid_name指令是用来设置cookie name的，那么如果我用userid_name uid=\"myCookieValue\"这样，能不能成功呢？实验后，发现的确可以将cookie name设置成uid，cookie Value设置成\"myCookieValue\"。\n\n本以为这样就能完成任务了，坑爹的事儿又来了。如果这么用的话，竟然不支持nginx变量！比如，我设置userid_name uid=$trueValue，其中的$trueValue在nginx.conf中已赋值，但浏览器访问nginx后获取的Value值，竟然是$trueValue，而不是$trueValue中存储的值！这就尴尬了，这条路又走不通了。\n\n走了这么多弯路后，又开始大量搜索相关资料。终于 https://segmentfault.com/q/1010000006116583 中给出了\"同源原则\"，这简单的四字提示。我突然想到我的add_header指令中的domain字段设置的是.test1.com，而nginx的虚拟主机配置的域名是www.abc.com，这两者是不一致的，很有可能根据同源原则，只有这两者一致后，cookie才能设置成功。最后，经过实验，证明了我的判断是正确的。\n\n好了，文章抄到这里作为备忘，自己的设置如下：\n\n```\nserver {\n        listen                  80;\n        server_name             xxx.xx.com;\n        charset                 utf-8;\n        add_header Set-Cookie   'client_ip=$proxy_add_x_forwarded_for;domain=xxx.xx.com;path=/;';\n\n        index index.html;\n        root  /letv/www;\n}\n```\n","slug":"nginx设置cookie点滴感悟","published":1,"updated":"2019-11-07T02:17:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznz4004vh5s6fm7qffml","content":"<p>公司有一个简单需求：利用nginx的ngx_http_auth_request_module模块设计一个鉴权接口，将鉴权接口返回的字符串赋值给$trueValue，设置到cookie的Value中。</p>\n<p>面对这个简单需求，首先，去百度搜索nginx、cookie等相关的关键字，有价值的内容不多，而且写的不够详细，令自己踩了不少坑，所以萌生了写作本文的想法。</p>\n<p>搜索后，我首先利用百度知道 <a href=\"https://zhidao.baidu.com/question/519658630466299605.html\" target=\"_blank\" rel=\"noopener\">https://zhidao.baidu.com/question/519658630466299605.html</a> 这篇文章，能成功设置cookie。本地浏览器向nginx发送一个get/post请求，利用chrome开发者工具查看应答报文的头部已包含set_cookie字段，同时，在Resources标签可见已写入库，如下图1所示。但是，仅仅按照这文章这么做的话，Domain、Expires字段均为默认值，显然这不符合最终要求。</p>\n<p>接下来，继续搜索找到 <a href=\"http://www.iteye.com/problems/60159\" target=\"_blank\" rel=\"noopener\">http://www.iteye.com/problems/60159</a> 这篇文章，文中在上篇文章的基础上，设置了自定义的domain、expires等字段。但是，这文章写得太简略了，根本没讲清楚使用原则是什么，无法让人彻底明白每个key应该如何设置，这为我的使用埋下一个坑。当我使用时，原封不动粘贴上面这个链接的add_header指令内容到自己nginx.conf中。经测试，在应答报文中的确包含了set-cookie字段（我们知道，浏览器获知了应答报文的set-cookie字段的信息，即可在本地保留cookie），但是没有入库(即在图1中查询不到任何信息)。</p>\n<p>所以就继续搜索，想解决没有入库的问题。此时，我这边思路出现了问题，错误地做出了如下判断：</p>\n<ol>\n<li>认为使用add_header指令时，我的字段格式有问题，希望通过将如下指令的双引号换成单引号、增加或者删除空格、更改时间格式等方式让cookie入库，结果折腾好长时间宣告失败。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add_header &quot;Set-Cookie&quot; &quot;rec_id=$rec_id;domain=.test1.com;path=/;expires=Mon, 29-Jun-2015 06:11:17 GMT&quot;;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>认为本地chrome浏览器的设置有问题，遂尝试换成IE、Firefox等其他浏览器，看一下能否正常入库，经实验后，均无法正常入库。</li>\n<li>认为add_header指令本身的问题，遂尝试ngx_http_userid_module这个专门用于设置cookie的nginx模块。</li>\n</ol>\n<p>ngx_http_userid_module模块有专门的语句设置path、expires、domain等字段。但是，我通篇阅读了有关这个模块的nginx官网( <a href=\"http://nginx.org/en/docs/http/ngx_http_userid_module.html\" target=\"_blank\" rel=\"noopener\">http://nginx.org/en/docs/http/ngx_http_userid_module.html</a> )文档后，竟然没有找到设置cookie Value的方式。以前也遇到过这种官方文档写作不明确的情况，比如：post_action指令在nginx官方文档找不到任何说明，但是实际上是可以使用的。没办法，只能自己尝试。我感觉既然userid_name指令是用来设置cookie name的，那么如果我用userid_name uid=”myCookieValue”这样，能不能成功呢？实验后，发现的确可以将cookie name设置成uid，cookie Value设置成”myCookieValue”。</p>\n<p>本以为这样就能完成任务了，坑爹的事儿又来了。如果这么用的话，竟然不支持nginx变量！比如，我设置userid_name uid=$trueValue，其中的$trueValue在nginx.conf中已赋值，但浏览器访问nginx后获取的Value值，竟然是$trueValue，而不是$trueValue中存储的值！这就尴尬了，这条路又走不通了。</p>\n<p>走了这么多弯路后，又开始大量搜索相关资料。终于 <a href=\"https://segmentfault.com/q/1010000006116583\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/q/1010000006116583</a> 中给出了”同源原则”，这简单的四字提示。我突然想到我的add_header指令中的domain字段设置的是.test1.com，而nginx的虚拟主机配置的域名是<a href=\"http://www.abc.com，这两者是不一致的，很有可能根据同源原则，只有这两者一致后，cookie才能设置成功。最后，经过实验，证明了我的判断是正确的。\" target=\"_blank\" rel=\"noopener\">www.abc.com，这两者是不一致的，很有可能根据同源原则，只有这两者一致后，cookie才能设置成功。最后，经过实验，证明了我的判断是正确的。</a></p>\n<p>好了，文章抄到这里作为备忘，自己的设置如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen                  80;</span><br><span class=\"line\">        server_name             xxx.xx.com;</span><br><span class=\"line\">        charset                 utf-8;</span><br><span class=\"line\">        add_header Set-Cookie   &apos;client_ip=$proxy_add_x_forwarded_for;domain=xxx.xx.com;path=/;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">        index index.html;</span><br><span class=\"line\">        root  /letv/www;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>公司有一个简单需求：利用nginx的ngx_http_auth_request_module模块设计一个鉴权接口，将鉴权接口返回的字符串赋值给$trueValue，设置到cookie的Value中。</p>\n<p>面对这个简单需求，首先，去百度搜索nginx、cookie等相关的关键字，有价值的内容不多，而且写的不够详细，令自己踩了不少坑，所以萌生了写作本文的想法。</p>\n<p>搜索后，我首先利用百度知道 <a href=\"https://zhidao.baidu.com/question/519658630466299605.html\" target=\"_blank\" rel=\"noopener\">https://zhidao.baidu.com/question/519658630466299605.html</a> 这篇文章，能成功设置cookie。本地浏览器向nginx发送一个get/post请求，利用chrome开发者工具查看应答报文的头部已包含set_cookie字段，同时，在Resources标签可见已写入库，如下图1所示。但是，仅仅按照这文章这么做的话，Domain、Expires字段均为默认值，显然这不符合最终要求。</p>\n<p>接下来，继续搜索找到 <a href=\"http://www.iteye.com/problems/60159\" target=\"_blank\" rel=\"noopener\">http://www.iteye.com/problems/60159</a> 这篇文章，文中在上篇文章的基础上，设置了自定义的domain、expires等字段。但是，这文章写得太简略了，根本没讲清楚使用原则是什么，无法让人彻底明白每个key应该如何设置，这为我的使用埋下一个坑。当我使用时，原封不动粘贴上面这个链接的add_header指令内容到自己nginx.conf中。经测试，在应答报文中的确包含了set-cookie字段（我们知道，浏览器获知了应答报文的set-cookie字段的信息，即可在本地保留cookie），但是没有入库(即在图1中查询不到任何信息)。</p>\n<p>所以就继续搜索，想解决没有入库的问题。此时，我这边思路出现了问题，错误地做出了如下判断：</p>\n<ol>\n<li>认为使用add_header指令时，我的字段格式有问题，希望通过将如下指令的双引号换成单引号、增加或者删除空格、更改时间格式等方式让cookie入库，结果折腾好长时间宣告失败。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add_header &quot;Set-Cookie&quot; &quot;rec_id=$rec_id;domain=.test1.com;path=/;expires=Mon, 29-Jun-2015 06:11:17 GMT&quot;;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>认为本地chrome浏览器的设置有问题，遂尝试换成IE、Firefox等其他浏览器，看一下能否正常入库，经实验后，均无法正常入库。</li>\n<li>认为add_header指令本身的问题，遂尝试ngx_http_userid_module这个专门用于设置cookie的nginx模块。</li>\n</ol>\n<p>ngx_http_userid_module模块有专门的语句设置path、expires、domain等字段。但是，我通篇阅读了有关这个模块的nginx官网( <a href=\"http://nginx.org/en/docs/http/ngx_http_userid_module.html\" target=\"_blank\" rel=\"noopener\">http://nginx.org/en/docs/http/ngx_http_userid_module.html</a> )文档后，竟然没有找到设置cookie Value的方式。以前也遇到过这种官方文档写作不明确的情况，比如：post_action指令在nginx官方文档找不到任何说明，但是实际上是可以使用的。没办法，只能自己尝试。我感觉既然userid_name指令是用来设置cookie name的，那么如果我用userid_name uid=”myCookieValue”这样，能不能成功呢？实验后，发现的确可以将cookie name设置成uid，cookie Value设置成”myCookieValue”。</p>\n<p>本以为这样就能完成任务了，坑爹的事儿又来了。如果这么用的话，竟然不支持nginx变量！比如，我设置userid_name uid=$trueValue，其中的$trueValue在nginx.conf中已赋值，但浏览器访问nginx后获取的Value值，竟然是$trueValue，而不是$trueValue中存储的值！这就尴尬了，这条路又走不通了。</p>\n<p>走了这么多弯路后，又开始大量搜索相关资料。终于 <a href=\"https://segmentfault.com/q/1010000006116583\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/q/1010000006116583</a> 中给出了”同源原则”，这简单的四字提示。我突然想到我的add_header指令中的domain字段设置的是.test1.com，而nginx的虚拟主机配置的域名是<a href=\"http://www.abc.com，这两者是不一致的，很有可能根据同源原则，只有这两者一致后，cookie才能设置成功。最后，经过实验，证明了我的判断是正确的。\" target=\"_blank\" rel=\"noopener\">www.abc.com，这两者是不一致的，很有可能根据同源原则，只有这两者一致后，cookie才能设置成功。最后，经过实验，证明了我的判断是正确的。</a></p>\n<p>好了，文章抄到这里作为备忘，自己的设置如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen                  80;</span><br><span class=\"line\">        server_name             xxx.xx.com;</span><br><span class=\"line\">        charset                 utf-8;</span><br><span class=\"line\">        add_header Set-Cookie   &apos;client_ip=$proxy_add_x_forwarded_for;domain=xxx.xx.com;path=/;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">        index index.html;</span><br><span class=\"line\">        root  /letv/www;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"nodejs redis doc","toc":false,"date":"2017-10-10T14:48:05.000Z","_content":"\nredis - a node.js redis client\n===========================\n\n[![Build Status](https://travis-ci.org/NodeRedis/node_redis.svg?branch=master)](https://travis-ci.org/NodeRedis/node_redis)\n[![Coverage Status](https://coveralls.io/repos/NodeRedis/node_redis/badge.svg?branch=)](https://coveralls.io/r/NodeRedis/node_redis?branch=)\n[![Windows Tests](https://img.shields.io/appveyor/ci/BridgeAR/node-redis/master.svg?label=Windows%20Tests)](https://ci.appveyor.com/project/BridgeAR/node-redis/branch/master)\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/NodeRedis/node_redis?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\nThis is a complete and feature rich Redis client for node.js. __It supports all\nRedis commands__ and focuses on high performance.\n\n<!-- more -->\n\nInstall with:\n\n    npm install redis\n\n## Usage Example\n\n```js\nvar redis = require(\"redis\"),\n    client = redis.createClient();\n\n// if you'd like to select database 3, instead of 0 (default), call\n// client.select(3, function() { /* ... */ });\n\nclient.on(\"error\", function (err) {\n    console.log(\"Error \" + err);\n});\n\nclient.set(\"string key\", \"string val\", redis.print);\nclient.hset(\"hash key\", \"hashtest 1\", \"some value\", redis.print);\nclient.hset([\"hash key\", \"hashtest 2\", \"some other value\"], redis.print);\nclient.hkeys(\"hash key\", function (err, replies) {\n    console.log(replies.length + \" replies:\");\n    replies.forEach(function (reply, i) {\n        console.log(\"    \" + i + \": \" + reply);\n    });\n    client.quit();\n});\n```\n\nThis will display:\n\n    mjr:~/work/node_redis (master)$ node example.js\n    Reply: OK\n    Reply: 0\n    Reply: 0\n    2 replies:\n        0: hashtest 1\n        1: hashtest 2\n    mjr:~/work/node_redis (master)$\n\nNote that the API is entirely asynchronous. To get data back from the server,\nyou'll need to use a callback. From v.2.6 on the API supports camelCase and\nsnake_case and all options / variables / events etc. can be used either way. It\nis recommended to use camelCase as this is the default for the Node.js\nlandscape.\n\n### Promises\n\nYou can also use node_redis with promises by promisifying node_redis with\n[bluebird](https://github.com/petkaantonov/bluebird) as in:\n\n```js\nvar redis = require('redis');\nbluebird.promisifyAll(redis.RedisClient.prototype);\nbluebird.promisifyAll(redis.Multi.prototype);\n```\n\nIt'll add a *Async* to all node_redis functions (e.g. return client.getAsync().then())\n\n```js\n// We expect a value 'foo': 'bar' to be present\n// So instead of writing client.get('foo', cb); you have to write:\nreturn client.getAsync('foo').then(function(res) {\n    console.log(res); // => 'bar'\n});\n\n// Using multi with promises looks like:\n\nreturn client.multi().get('foo').execAsync().then(function(res) {\n    console.log(res); // => 'bar'\n});\n```\n\n### Sending Commands\n\nEach Redis command is exposed as a function on the `client` object.\nAll functions take either an `args` Array plus optional `callback` Function or\na variable number of individual arguments followed by an optional callback.\nExamples:\n\n```js\nclient.hmset([\"key\", \"test keys 1\", \"test val 1\", \"test keys 2\", \"test val 2\"], function (err, res) {});\n// Works the same as\nclient.hmset(\"key\", [\"test keys 1\", \"test val 1\", \"test keys 2\", \"test val 2\"], function (err, res) {});\n// Or\nclient.hmset(\"key\", \"test keys 1\", \"test val 1\", \"test keys 2\", \"test val 2\", function (err, res) {});\n```\n\nCare should be taken with user input if arrays are possible (via body-parser, query string or other method), as single arguments could be unintentionally interpreted as multiple args.\n\nNote that in either form the `callback` is optional:\n\n```js\nclient.set(\"some key\", \"some val\");\nclient.set([\"some other key\", \"some val\"]);\n```\n\nIf the key is missing, reply will be null. Only if the [Redis Command\nReference](http://redis.io/commands) states something else it will not be null.\n\n```js\nclient.get(\"missingkey\", function(err, reply) {\n    // reply is null when the key is missing\n    console.log(reply);\n});\n```\n\nFor a list of Redis commands, see [Redis Command Reference](http://redis.io/commands)\n\nMinimal parsing is done on the replies. Commands that return a integer return\nJavaScript Numbers, arrays return JavaScript Array. `HGETALL` returns an Object\nkeyed by the hash keys. All strings will either be returned as string or as\nbuffer depending on your setting. Please be aware that sending null, undefined\nand Boolean values will result in the value coerced to a string!\n\n# Redis Commands\n\nThis library is a 1 to 1 mapping to [Redis commands](https://redis.io/commands).\nIt is not a cache library so please refer to Redis commands page for full usage\ndetails.\n\nExample setting key to auto expire using [SET command](https://redis.io/commands/set)\n\n```js\n// this key will expire after 10 seconds\nclient.set('key', 'value!', 'EX', 10);\n```\n\n# API\n\n## Connection and other Events\n\n`client` will emit some events about the state of the connection to the Redis server.\n\n### \"ready\"\n\n`client` will emit `ready` once a connection is established. Commands issued\nbefore the `ready` event are queued, then replayed just before this event is\nemitted.\n\n### \"connect\"\n\n`client` will emit `connect` as soon as the stream is connected to the server.\n\n### \"reconnecting\"\n\n`client` will emit `reconnecting` when trying to reconnect to the Redis server\nafter losing the connection. Listeners are passed an object containing `delay`\n(in ms) and `attempt` (the attempt #) attributes.\n\n### \"error\"\n\n`client` will emit `error` when encountering an error connecting to the Redis\nserver or when any other in node_redis occurs. If you use a command without\ncallback and encounter a ReplyError it is going to be emitted to the error\nlistener.\n\nSo please attach the error listener to node_redis.\n\n### \"end\"\n\n`client` will emit `end` when an established Redis server connection has closed.\n\n### \"drain\" (deprecated)\n\n`client` will emit `drain` when the TCP connection to the Redis server has been\nbuffering, but is now writable. This event can be used to stream commands in to\nRedis and adapt to backpressure.\n\nIf the stream is buffering `client.should_buffer` is set to true. Otherwise the\nvariable is always set to false. That way you can decide when to reduce your\nsend rate and resume sending commands when you get `drain`.\n\nYou can also check the return value of each command as it will also return the\nbackpressure indicator (deprecated). If false is returned the stream had to\nbuffer.\n\n### \"warning\"\n\n`client` will emit `warning` when password was set but none is needed and if a\ndeprecated option / function / similar is used.\n\n### \"idle\" (deprecated)\n\n`client` will emit `idle` when there are no outstanding commands that are\nawaiting a response.\n\n## redis.createClient()\nIf you have `redis-server` running on the same machine as node, then the\ndefaults for port and host are probably fine and you don't need to supply any\narguments. `createClient()` returns a `RedisClient` object. Otherwise,\n`createClient()` accepts these arguments:\n\n* `redis.createClient([options])`\n* `redis.createClient(unix_socket[, options])`\n* `redis.createClient(redis_url[, options])`\n* `redis.createClient(port[, host][, options])`\n\n__Tip:__ If the Redis server runs on the same machine as the client consider\nusing unix sockets if possible to increase throughput.\n\n#### `options` object properties\n| Property  | Default   | Description |\n|-----------|-----------|-------------|\n| host      | 127.0.0.1 | IP address of the Redis server |\n| port      | 6379      | Port of the Redis server |\n| path      | null      | The UNIX socket string of the Redis server |\n| url       | null      | The URL of the Redis server. Format: `[redis:]//[[user][:password@]][host][:port][/db-number][?db=db-number[&password=bar[&option=value]]]` (More info avaliable at [IANA](http://www.iana.org/assignments/uri-schemes/prov/redis)). |\n| parser    | javascript | __Deprecated__ Use either the built-in JS parser [`javascript`]() or the native [`hiredis`]() parser. __Note__ `node_redis` < 2.6 uses hiredis as default if installed. This changed in v.2.6.0. |\n| string_numbers | null | Set to `true`, `node_redis` will return Redis number values as Strings instead of javascript Numbers. Useful if you need to handle big numbers (above `Number.MAX_SAFE_INTEGER === 2^53`). Hiredis is incapable of this behavior, so setting this option to `true` will result in the built-in javascript parser being used no matter the value of the `parser` option. |\n| return_buffers | false | If set to `true`, then all replies will be sent to callbacks as Buffers instead of Strings. |\n| detect_buffers | false | If set to `true`, then replies will be sent to callbacks as Buffers. This option lets you switch between Buffers and Strings on a per-command basis, whereas `return_buffers` applies to every command on a client. __Note__: This doesn't work properly with the pubsub mode. A subscriber has to either always return Strings or Buffers. |\n| socket_keepalive | true | If set to `true`, the keep-alive functionality is enabled on the underlying socket. |\n| no_ready_check | false |  When a connection is established to the Redis server, the server might still be loading the database from disk. While loading, the server will not respond to any commands. To work around this, `node_redis` has a \"ready check\" which sends the `INFO` command to the server. The response from the `INFO` command indicates whether the server is ready for more commands. When ready, `node_redis` emits a `ready` event. Setting `no_ready_check` to `true` will inhibit this check. |\n| enable_offline_queue |  true | By default, if there is no active connection to the Redis server, commands are added to a queue and are executed once the connection has been established. Setting `enable_offline_queue` to `false` will disable this feature and the callback will be executed immediately with an error, or an error will be emitted if no callback is specified. |\n| retry_max_delay | null | __Deprecated__ _Please use `retry_strategy` instead._ By default, every time the client tries to connect and fails, the reconnection delay almost doubles. This delay normally grows infinitely, but setting `retry_max_delay` limits it to the maximum value provided in milliseconds. |\n| connect_timeout | 3600000 | __Deprecated__ _Please use `retry_strategy` instead._ Setting `connect_timeout` limits the total time for the client to connect and reconnect. The value is provided in milliseconds and is counted from the moment a new client is created or from the time the connection is lost. The last retry is going to happen exactly at the timeout time. Default is to try connecting until the default system socket timeout has been exceeded and to try reconnecting until 1h has elapsed. |\n| max_attempts | 0 | __Deprecated__ _Please use `retry_strategy` instead._ By default, a client will try reconnecting until connected. Setting `max_attempts` limits total amount of connection attempts. Setting this to 1 will prevent any reconnect attempt. |\n| retry_unfulfilled_commands | false | If set to `true`, all commands that were unfulfilled while the connection is lost will be retried after the connection has been reestablished. Use this with caution if you use state altering commands (e.g. `incr`). This is especially useful if you use blocking commands. |\n| password | null | If set, client will run Redis auth command on connect. Alias `auth_pass` __Note__ `node_redis` < 2.5 must use `auth_pass` |\n| db | null | If set, client will run Redis `select` command on connect. |\n| family | IPv4 | You can force using IPv6 if you set the family to 'IPv6'. See Node.js [net](https://nodejs.org/api/net.html) or [dns](https://nodejs.org/api/dns.html) modules on how to use the family type. |\n| disable_resubscribing | false | If set to `true`, a client won't resubscribe after disconnecting. |\n| rename_commands | null | Passing an object with renamed commands to use instead of the original functions. For example, if you renamed the command KEYS to \"DO-NOT-USE\" then the rename_commands object would be: `{ KEYS : \"DO-NOT-USE\" }` . See the [Redis security topics](http://redis.io/topics/security) for more info. |\n| tls | null | An object containing options to pass to [tls.connect](http://nodejs.org/api/tls.html#tls_tls_connect_port_host_options_callback) to set up a TLS connection to Redis (if, for example, it is set up to be accessible via a tunnel). |\n| prefix | null | A string used to prefix all used keys (e.g. `namespace:test`). Please be aware that the `keys` command will not be prefixed. The `keys` command has a \"pattern\" as argument and no key and it would be impossible to determine the existing keys in Redis if this would be prefixed. |\n| retry_strategy | function | A function that receives an options object as parameter including the retry `attempt`, the `total_retry_time` indicating how much time passed since the last time connected, the `error` why the connection was lost and the number of `times_connected` in total. If you return a number from this function, the retry will happen exactly after that time in milliseconds. If you return a non-number, no further retry will happen and all offline commands are flushed with errors. Return an error to return that specific error to all offline commands. Example below. |\n\n```js\nvar redis = require(\"redis\");\nvar client = redis.createClient({detect_buffers: true});\n\nclient.set(\"foo_rand000000000000\", \"OK\");\n\n// This will return a JavaScript String\nclient.get(\"foo_rand000000000000\", function (err, reply) {\n    console.log(reply.toString()); // Will print `OK`\n});\n\n// This will return a Buffer since original key is specified as a Buffer\nclient.get(new Buffer(\"foo_rand000000000000\"), function (err, reply) {\n    console.log(reply.toString()); // Will print `<Buffer 4f 4b>`\n});\nclient.quit();\n```\n\nretry_strategy example\n\n```js\nvar client = redis.createClient({\n    retry_strategy: function (options) {\n        if (options.error && options.error.code === 'ECONNREFUSED') {\n            // End reconnecting on a specific error and flush all commands with\n            // a individual error\n            return new Error('The server refused the connection');\n        }\n        if (options.total_retry_time > 1000 * 60 * 60) {\n            // End reconnecting after a specific timeout and flush all commands\n            // with a individual error\n            return new Error('Retry time exhausted');\n        }\n        if (options.attempt > 10) {\n            // End reconnecting with built in error\n            return undefined;\n        }\n        // reconnect after\n        return Math.min(options.attempt * 100, 3000);\n    }\n});\n```\n\n## client.auth(password[, callback])\n\nWhen connecting to a Redis server that requires authentication, the `AUTH`\ncommand must be sent as the first command after connecting. This can be tricky\nto coordinate with reconnections, the ready check, etc. To make this easier,\n`client.auth()` stashes `password` and will send it after each connection,\nincluding reconnections. `callback` is invoked only once, after the response to\nthe very first `AUTH` command sent.\nNOTE: Your call to `client.auth()` should not be inside the ready handler. If\nyou are doing this wrong, `client` will emit an error that looks\nsomething like this `Error: Ready check failed: ERR operation not permitted`.\n\n## backpressure\n\n### stream\n\nThe client exposed the used [stream](https://nodejs.org/api/stream.html) in\n`client.stream` and if the stream or client had to\n[buffer](https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback)\nthe command in `client.should_buffer`. In combination this can be used to\nimplement backpressure by checking the buffer state before sending a command and\nlistening to the stream\n[drain](https://nodejs.org/api/stream.html#stream_event_drain) event.\n\n## client.quit()\n\nThis sends the quit command to the redis server and ends cleanly right after all\nrunning commands were properly handled. If this is called while reconnecting\n(and therefore no connection to the redis server exists) it is going to end the\nconnection right away instead of resulting in further reconnections! All offline\ncommands are going to be flushed with an error in that case.\n\n## client.end(flush)\n\nForcibly close the connection to the Redis server. Note that this does not wait\nuntil all replies have been parsed. If you want to exit cleanly, call\n`client.quit()` as mentioned above.\n\nYou should set flush to true, if you are not absolutely sure you do not care\nabout any other commands. If you set flush to false all still running commands\nwill silently fail.\n\nThis example closes the connection to the Redis server before the replies have\nbeen read. You probably don't want to do this:\n\n```js\nvar redis = require(\"redis\"),\n    client = redis.createClient();\n\nclient.set(\"foo_rand000000000000\", \"some fantastic value\", function (err, reply) {\n    // This will either result in an error (flush parameter is set to true)\n    // or will silently fail and this callback will not be called at all (flush set to false)\n    console.log(err);\n});\nclient.end(true); // No further commands will be processed\nclient.get(\"foo_rand000000000000\", function (err, reply) {\n    console.log(err); // => 'The connection has already been closed.'\n});\n```\n\n`client.end()` without the flush parameter set to true should NOT be used in production!\n\n## Error handling (>= v.2.6)\n\nCurrently the following error subclasses exist:\n\n* `RedisError`: _All errors_ returned by the client\n* `ReplyError` subclass of `RedisError`: All errors returned by __Redis__ itself\n* `AbortError` subclass of `RedisError`: All commands that could not finish due\n  to what ever reason\n* `ParserError` subclass of `RedisError`: Returned in case of a parser error\n  (this should not happen)\n* `AggregateError` subclass of `AbortError`: Emitted in case multiple unresolved\n  commands without callback got rejected in debug_mode instead of lots of\n  `AbortError`s.\n\nAll error classes are exported by the module.\n\nExample:\n```js\nvar redis = require('./');\nvar assert = require('assert');\nvar client = redis.createClient();\n\nclient.on('error', function (err) {\n    assert(err instanceof Error);\n    assert(err instanceof redis.AbortError);\n    assert(err instanceof redis.AggregateError);\n    // The set and get get aggregated in here\n    assert.strictEqual(err.errors.length, 2);\n    assert.strictEqual(err.code, 'NR_CLOSED');\n});\nclient.set('foo', 123, 'bar', function (err, res) { // Too many arguments\n    assert(err instanceof redis.ReplyError); // => true\n    assert.strictEqual(err.command, 'SET');\n    assert.deepStrictEqual(err.args, ['foo', 123, 'bar']);\n\n    redis.debug_mode = true;\n    client.set('foo', 'bar');\n    client.get('foo');\n    process.nextTick(function () {\n        // Force closing the connection while the command did not yet return\n        client.end(true);\n        redis.debug_mode = false;\n    });\n});\n\n```\n\nEvery `ReplyError` contains the `command` name in all-caps and the arguments (`args`).\n\nIf node_redis emits a library error because of another error, the triggering\nerror is added to the returned error as `origin` attribute.\n\n___Error codes___\n\nnode_redis returns a `NR_CLOSED` error code if the clients connection dropped.\nIf a command unresolved command got rejected a `UNCERTAIN_STATE` code is\nreturned. A `CONNECTION_BROKEN` error code is used in case node_redis gives up\nto reconnect.\n\n## client.unref()\n\nCall `unref()` on the underlying socket connection to the Redis server, allowing\nthe program to exit once no more commands are pending.\n\nThis is an **experimental** feature, and only supports a subset of the Redis\nprotocol. Any commands where client state is saved on the Redis server, e.g.\n`*SUBSCRIBE` or the blocking `BL*` commands will *NOT* work with `.unref()`.\n\n```js\nvar redis = require(\"redis\")\nvar client = redis.createClient()\n\n/*\n    Calling unref() will allow this program to exit immediately after the get\n    command finishes. Otherwise the client would hang as long as the\n    client-server connection is alive.\n*/\nclient.unref()\nclient.get(\"foo\", function (err, value){\n    if (err) throw(err)\n    console.log(value)\n})\n```\n\n## Friendlier hash commands\n\nMost Redis commands take a single String or an Array of Strings as arguments,\nand replies are sent back as a single String or an Array of Strings. When\ndealing with hash values, there are a couple of useful exceptions to this.\n\n### client.hgetall(hash, callback)\n\nThe reply from an HGETALL command will be converted into a JavaScript Object by\n`node_redis`. That way you can interact with the responses using JavaScript\nsyntax.\n\nExample:\n\n```js\nclient.hmset(\"hosts\", \"mjr\", \"1\", \"another\", \"23\", \"home\", \"1234\");\nclient.hgetall(\"hosts\", function (err, obj) {\n    console.dir(obj);\n});\n```\n\nOutput:\n\n```js\n{ mjr: '1', another: '23', home: '1234' }\n```\n\n### client.hmset(hash, obj[, callback])\n\nMultiple values in a hash can be set by supplying an object:\n\n```js\nclient.HMSET(key2, {\n    \"0123456789\": \"abcdefghij\", // NOTE: key and value will be coerced to strings\n    \"some manner of key\": \"a type of value\"\n});\n```\n\nThe properties and values of this Object will be set as keys and values in the\nRedis hash.\n\n### client.hmset(hash, key1, val1, ... keyn, valn, [callback])\n\nMultiple values may also be set by supplying a list:\n\n```js\nclient.HMSET(key1, \"0123456789\", \"abcdefghij\", \"some manner of key\", \"a type of value\");\n```\n\n## Publish / Subscribe\n\nExample of the publish / subscribe API. This program opens two\nclient connections, subscribes to a channel on one of them, and publishes to that\nchannel on the other:\n\n```js\nvar redis = require(\"redis\");\nvar sub = redis.createClient(), pub = redis.createClient();\nvar msg_count = 0;\n\nsub.on(\"subscribe\", function (channel, count) {\n    pub.publish(\"a nice channel\", \"I am sending a message.\");\n    pub.publish(\"a nice channel\", \"I am sending a second message.\");\n    pub.publish(\"a nice channel\", \"I am sending my last message.\");\n});\n\nsub.on(\"message\", function (channel, message) {\n    console.log(\"sub channel \" + channel + \": \" + message);\n    msg_count += 1;\n    if (msg_count === 3) {\n        sub.unsubscribe();\n        sub.quit();\n        pub.quit();\n    }\n});\n\nsub.subscribe(\"a nice channel\");\n```\n\nWhen a client issues a `SUBSCRIBE` or `PSUBSCRIBE`, that connection is put into\na \"subscriber\" mode. At that point, only commands that modify the subscription\nset are valid and quit (and depending on the redis version ping as well). When\nthe subscription set is empty, the connection is put back into regular mode.\n\nIf you need to send regular commands to Redis while in subscriber mode, just\nopen another connection with a new client (hint: use `client.duplicate()`).\n\n## Subscriber Events\n\nIf a client has subscriptions active, it may emit these events:\n\n### \"message\" (channel, message)\n\nClient will emit `message` for every message received that matches an active subscription.\nListeners are passed the channel name as `channel` and the message as `message`.\n\n### \"pmessage\" (pattern, channel, message)\n\nClient will emit `pmessage` for every message received that matches an active\nsubscription pattern. Listeners are passed the original pattern used with\n`PSUBSCRIBE` as `pattern`, the sending channel name as `channel`, and the\nmessage as `message`.\n\n### \"message_buffer\" (channel, message)\n\nThis is the same as the `message` event with the exception, that it is always\ngoing to emit a buffer. If you listen to the `message` event at the same time as\nthe `message_buffer`, it is always going to emit a string.\n\n### \"pmessage_buffer\" (pattern, channel, message)\n\nThis is the same as the `pmessage` event with the exception, that it is always\ngoing to emit a buffer. If you listen to the `pmessage` event at the same time\nas the `pmessage_buffer`, it is always going to emit a string.\n\n### \"subscribe\" (channel, count)\n\nClient will emit `subscribe` in response to a `SUBSCRIBE` command. Listeners are\npassed the channel name as `channel` and the new count of subscriptions for this\nclient as `count`.\n\n### \"psubscribe\" (pattern, count)\n\nClient will emit `psubscribe` in response to a `PSUBSCRIBE` command. Listeners\nare passed the original pattern as `pattern`, and the new count of subscriptions\nfor this client as `count`.\n\n### \"unsubscribe\" (channel, count)\n\nClient will emit `unsubscribe` in response to a `UNSUBSCRIBE` command. Listeners\nare passed the channel name as `channel` and the new count of subscriptions for\nthis client as `count`. When `count` is 0, this client has left subscriber mode\nand no more subscriber events will be emitted.\n\n### \"punsubscribe\" (pattern, count)\n\nClient will emit `punsubscribe` in response to a `PUNSUBSCRIBE` command.\nListeners are passed the channel name as `channel` and the new count of\nsubscriptions for this client as `count`. When `count` is 0, this client has\nleft subscriber mode and no more subscriber events will be emitted.\n\n## client.multi([commands])\n\n`MULTI` commands are queued up until an `EXEC` is issued, and then all commands\nare run atomically by Redis. The interface in `node_redis` is to return an\nindividual `Multi` object by calling `client.multi()`. If any command fails to\nqueue, all commands are rolled back and none is going to be executed (For\nfurther information look at\n[transactions](http://redis.io/topics/transactions)).\n\n```js\nvar redis  = require(\"./index\"),\n    client = redis.createClient(), set_size = 20;\n\nclient.sadd(\"bigset\", \"a member\");\nclient.sadd(\"bigset\", \"another member\");\n\nwhile (set_size > 0) {\n    client.sadd(\"bigset\", \"member \" + set_size);\n    set_size -= 1;\n}\n\n// multi chain with an individual callback\nclient.multi()\n    .scard(\"bigset\")\n    .smembers(\"bigset\")\n    .keys(\"*\", function (err, replies) {\n        // NOTE: code in this callback is NOT atomic\n        // this only happens after the the .exec call finishes.\n        client.mget(replies, redis.print);\n    })\n    .dbsize()\n    .exec(function (err, replies) {\n        console.log(\"MULTI got \" + replies.length + \" replies\");\n        replies.forEach(function (reply, index) {\n            console.log(\"Reply \" + index + \": \" + reply.toString());\n        });\n    });\n```\n\n### Multi.exec([callback])\n\n`client.multi()` is a constructor that returns a `Multi` object. `Multi` objects\nshare all of the same command methods as `client` objects do. Commands are\nqueued up inside the `Multi` object until `Multi.exec()` is invoked.\n\nIf your code contains an syntax error an EXECABORT error is going to be thrown\nand all commands are going to be aborted. That error contains a `.errors`\nproperty that contains the concrete errors.\nIf all commands were queued successfully and an error is thrown by redis while\nprocessing the commands that error is going to be returned in the result array!\nNo other command is going to be aborted though than the onces failing.\n\nYou can either chain together `MULTI` commands as in the above example, or you\ncan queue individual commands while still sending regular client command as in\nthis example:\n\n```js\nvar redis  = require(\"redis\"),\n    client = redis.createClient(), multi;\n\n// start a separate multi command queue\nmulti = client.multi();\nmulti.incr(\"incr thing\", redis.print);\nmulti.incr(\"incr other thing\", redis.print);\n\n// runs immediately\nclient.mset(\"incr thing\", 100, \"incr other thing\", 1, redis.print);\n\n// drains multi queue and runs atomically\nmulti.exec(function (err, replies) {\n    console.log(replies); // 101, 2\n});\n```\n\nIn addition to adding commands to the `MULTI` queue individually, you can also\npass an array of commands and arguments to the constructor:\n\n```js\nvar redis  = require(\"redis\"),\n    client = redis.createClient();\n\nclient.multi([\n    [\"mget\", \"multifoo\", \"multibar\", redis.print],\n    [\"incr\", \"multifoo\"],\n    [\"incr\", \"multibar\"]\n]).exec(function (err, replies) {\n    console.log(replies);\n});\n```\n\n### Multi.exec_atomic([callback])\n\nIdentical to Multi.exec but with the difference that executing a single command\nwill not use transactions.\n\n## client.batch([commands])\n\nIdentical to .multi without transactions. This is recommended if you want to\nexecute many commands at once but don't have to rely on transactions.\n\n`BATCH` commands are queued up until an `EXEC` is issued, and then all commands\nare run atomically by Redis. The interface in `node_redis` is to return an\nindividual `Batch` object by calling `client.batch()`. The only difference\nbetween .batch and .multi is that no transaction is going to be used.\nBe aware that the errors are - just like in multi statements - in the result.\nOtherwise both, errors and results could be returned at the same time.\n\nIf you fire many commands at once this is going to boost the execution speed\nsignificantly compared to firing the same commands in a loop without waiting for\nthe result! See the benchmarks for further comparison. Please remember that all\ncommands are kept in memory until they are fired.\n\n## Monitor mode\n\nRedis supports the `MONITOR` command, which lets you see all commands received\nby the Redis server across all client connections, including from other client\nlibraries and other computers.\n\nA `monitor` event is going to be emitted for every command fired from any client\nconnected to the server including the monitoring client itself. The callback for\nthe `monitor` event takes a timestamp from the Redis server, an array of command\narguments and the raw monitoring string.\n\nExample:\n\n```js\nvar client  = require(\"redis\").createClient();\nclient.monitor(function (err, res) {\n    console.log(\"Entering monitoring mode.\");\n});\nclient.set('foo', 'bar');\n\nclient.on(\"monitor\", function (time, args, raw_reply) {\n    console.log(time + \": \" + args); // 1458910076.446514:['set', 'foo', 'bar']\n});\n```\n\n# Extras\n\nSome other things you might like to know about.\n\n## client.server_info\n\nAfter the ready probe completes, the results from the INFO command are saved in\nthe `client.server_info` object.\n\nThe `versions` key contains an array of the elements of the version string for\neasy comparison.\n\n    > client.server_info.redis_version\n    '2.3.0'\n    > client.server_info.versions\n    [ 2, 3, 0 ]\n\n## redis.print()\n\nA handy callback function for displaying return values when testing. Example:\n\n```js\nvar redis = require(\"redis\"),\n    client = redis.createClient();\n\nclient.on(\"connect\", function () {\n    client.set(\"foo_rand000000000000\", \"some fantastic value\", redis.print);\n    client.get(\"foo_rand000000000000\", redis.print);\n});\n```\n\nThis will print:\n\n    Reply: OK\n    Reply: some fantastic value\n\nNote that this program will not exit cleanly because the client is still connected.\n\n## Multi-word commands\n\nTo execute redis multi-word commands like `SCRIPT LOAD` or `CLIENT LIST` pass\nthe second word as first parameter:\n\n    client.script('load', 'return 1');\n    client.multi().script('load', 'return 1').exec(...);\n    client.multi([['script', 'load', 'return 1']]).exec(...);\n\n## client.duplicate([options][, callback])\n\nDuplicate all current options and return a new redisClient instance. All options\npassed to the duplicate function are going to replace the original option. If\nyou pass a callback, duplicate is going to wait until the client is ready and\nreturns it in the callback. If an error occurs in the meanwhile, that is going\nto return an error instead in the callback.\n\nOne example of when to use duplicate() would be to accommodate the connection-\nblocking redis commands BRPOP, BLPOP, and BRPOPLPUSH.  If these commands\nare used on the same redisClient instance as non-blocking commands, the\nnon-blocking ones may be queued up until after the blocking ones finish.\n\n    var Redis=require('redis');\n    var client = Redis.createClient();\n    var clientBlocking = client.duplicate();\n\n    var get = function() {\n        console.log(\"get called\");\n        client.get(\"any_key\",function() { console.log(\"get returned\"); });\n        setTimeout( get, 1000 );\n    };\n    var brpop = function() {\n        console.log(\"brpop called\");\n        clientBlocking.brpop(\"nonexistent\", 5, function() {\n            console.log(\"brpop return\");\n            setTimeout( brpop, 1000 );\n        });\n    };\n    get();\n    brpop();\n\nAnother reason to use duplicate() is when multiple DBs on the same server are\naccessed via the redis SELECT command.  Each DB could use its own connection.\n\n## client.send_command(command_name[, [args][, callback]])\n\nAll Redis commands have been added to the `client` object. However, if new\ncommands are introduced before this library is updated or if you want to add\nindividual commands you can use `send_command()` to send arbitrary commands to\nRedis.\n\nAll commands are sent as multi-bulk commands. `args` can either be an Array of\narguments, or omitted / set to undefined.\n\n## client.add_command(command_name)\n\nCalling add_command will add a new command to the prototype. The exact command\nname will be used when calling using this new command. Using arbitrary arguments\nis possible as with any other command.\n\n## client.connected\n\nBoolean tracking the state of the connection to the Redis server.\n\n## client.command_queue_length\n\nThe number of commands that have been sent to the Redis server but not yet\nreplied to. You can use this to enforce some kind of maximum queue depth for\ncommands while connected.\n\n## client.offline_queue_length\n\nThe number of commands that have been queued up for a future connection. You can\nuse this to enforce some kind of maximum queue depth for pre-connection\ncommands.\n\n### Commands with Optional and Keyword arguments\n\nThis applies to anything that uses an optional `[WITHSCORES]` or `[LIMIT offset\ncount]` in the [redis.io/commands](http://redis.io/commands) documentation.\n\nExample:\n\n```js\nvar args = [ 'myzset', 1, 'one', 2, 'two', 3, 'three', 99, 'ninety-nine' ];\nclient.zadd(args, function (err, response) {\n    if (err) throw err;\n    console.log('added '+response+' items.');\n\n    // -Infinity and +Infinity also work\n    var args1 = [ 'myzset', '+inf', '-inf' ];\n    client.zrevrangebyscore(args1, function (err, response) {\n        if (err) throw err;\n        console.log('example1', response);\n        // write your code here\n    });\n\n    var max = 3, min = 1, offset = 1, count = 2;\n    var args2 = [ 'myzset', max, min, 'WITHSCORES', 'LIMIT', offset, count ];\n    client.zrevrangebyscore(args2, function (err, response) {\n        if (err) throw err;\n        console.log('example2', response);\n        // write your code here\n    });\n});\n```\n\n## Performance\n\nMuch effort has been spent to make `node_redis` as fast as possible for common\noperations.\n\n```\nLenovo T450s, i7-5600U and 12gb memory\nclients: 1, NodeJS: 6.2.0, Redis: 3.2.0, parser: javascript, connected by: tcp\n         PING,         1/1 avg/max:   0.02/  5.26 2501ms total,   46916 ops/sec\n         PING,  batch 50/1 avg/max:   0.06/  4.35 2501ms total,  755178 ops/sec\n   SET 4B str,         1/1 avg/max:   0.02/  4.75 2501ms total,   40856 ops/sec\n   SET 4B str,  batch 50/1 avg/max:   0.11/  1.51 2501ms total,  432727 ops/sec\n   SET 4B buf,         1/1 avg/max:   0.05/  2.76 2501ms total,   20659 ops/sec\n   SET 4B buf,  batch 50/1 avg/max:   0.25/  1.76 2501ms total,  194962 ops/sec\n   GET 4B str,         1/1 avg/max:   0.02/  1.55 2501ms total,   45156 ops/sec\n   GET 4B str,  batch 50/1 avg/max:   0.09/  3.15 2501ms total,  524110 ops/sec\n   GET 4B buf,         1/1 avg/max:   0.02/  3.07 2501ms total,   44563 ops/sec\n   GET 4B buf,  batch 50/1 avg/max:   0.10/  3.18 2501ms total,  473171 ops/sec\n SET 4KiB str,         1/1 avg/max:   0.03/  1.54 2501ms total,   32627 ops/sec\n SET 4KiB str,  batch 50/1 avg/max:   0.34/  1.89 2501ms total,  146861 ops/sec\n SET 4KiB buf,         1/1 avg/max:   0.05/  2.85 2501ms total,   20688 ops/sec\n SET 4KiB buf,  batch 50/1 avg/max:   0.36/  1.83 2501ms total,  138165 ops/sec\n GET 4KiB str,         1/1 avg/max:   0.02/  1.37 2501ms total,   39389 ops/sec\n GET 4KiB str,  batch 50/1 avg/max:   0.24/  1.81 2501ms total,  208157 ops/sec\n GET 4KiB buf,         1/1 avg/max:   0.02/  2.63 2501ms total,   39918 ops/sec\n GET 4KiB buf,  batch 50/1 avg/max:   0.31/  8.56 2501ms total,  161575 ops/sec\n         INCR,         1/1 avg/max:   0.02/  4.69 2501ms total,   45685 ops/sec\n         INCR,  batch 50/1 avg/max:   0.09/  3.06 2501ms total,  539964 ops/sec\n        LPUSH,         1/1 avg/max:   0.02/  3.04 2501ms total,   41253 ops/sec\n        LPUSH,  batch 50/1 avg/max:   0.12/  1.94 2501ms total,  425090 ops/sec\n    LRANGE 10,         1/1 avg/max:   0.02/  2.28 2501ms total,   39850 ops/sec\n    LRANGE 10,  batch 50/1 avg/max:   0.25/  1.85 2501ms total,  194302 ops/sec\n   LRANGE 100,         1/1 avg/max:   0.05/  2.93 2501ms total,   21026 ops/sec\n   LRANGE 100,  batch 50/1 avg/max:   1.52/  2.89 2501ms total,   32767 ops/sec\n SET 4MiB str,         1/1 avg/max:   5.16/ 15.55 2502ms total,     193 ops/sec\n SET 4MiB str,  batch 20/1 avg/max:  89.73/ 99.96 2513ms total,     223 ops/sec\n SET 4MiB buf,         1/1 avg/max:   2.23/  8.35 2501ms total,     446 ops/sec\n SET 4MiB buf,  batch 20/1 avg/max:  41.47/ 50.91 2530ms total,     482 ops/sec\n GET 4MiB str,         1/1 avg/max:   2.79/ 10.91 2502ms total,     358 ops/sec\n GET 4MiB str,  batch 20/1 avg/max: 101.61/118.11 2541ms total,     197 ops/sec\n GET 4MiB buf,         1/1 avg/max:   2.32/ 14.93 2502ms total,     430 ops/sec\n GET 4MiB buf,  batch 20/1 avg/max:  65.01/ 84.72 2536ms total,     308 ops/sec\n ```\n\n## Debugging\n\nTo get debug output run your `node_redis` application with `NODE_DEBUG=redis`.\n\nThis is also going to result in good stack traces opposed to useless ones\notherwise for any async operation.\nIf you only want to have good stack traces but not the debug output run your\napplication in development mode instead (`NODE_ENV=development`).\n\nGood stack traces are only activated in development and debug mode as this\nresults in a significant performance penalty.\n\n___Comparison___:\nUseless stack trace:\n```\nReplyError: ERR wrong number of arguments for 'set' command\n    at parseError (/home/ruben/repos/redis/node_modules/redis-parser/lib/parser.js:158:12)\n    at parseType (/home/ruben/repos/redis/node_modules/redis-parser/lib/parser.js:219:14)\n```\nGood stack trace:\n```\nReplyError: ERR wrong number of arguments for 'set' command\n    at new Command (/home/ruben/repos/redis/lib/command.js:9:902)\n    at RedisClient.set (/home/ruben/repos/redis/lib/commands.js:9:3238)\n    at Context.<anonymous> (/home/ruben/repos/redis/test/good_stacks.spec.js:20:20)\n    at callFnAsync (/home/ruben/repos/redis/node_modules/mocha/lib/runnable.js:349:8)\n    at Test.Runnable.run (/home/ruben/repos/redis/node_modules/mocha/lib/runnable.js:301:7)\n    at Runner.runTest (/home/ruben/repos/redis/node_modules/mocha/lib/runner.js:422:10)\n    at /home/ruben/repos/redis/node_modules/mocha/lib/runner.js:528:12\n    at next (/home/ruben/repos/redis/node_modules/mocha/lib/runner.js:342:14)\n    at /home/ruben/repos/redis/node_modules/mocha/lib/runner.js:352:7\n    at next (/home/ruben/repos/redis/node_modules/mocha/lib/runner.js:284:14)\n    at Immediate._onImmediate (/home/ruben/repos/redis/node_modules/mocha/lib/runner.js:320:5)\n    at processImmediate [as _immediateCallback] (timers.js:383:17)\n```\n\n## How to Contribute\n- Open a pull request or an issue about what you want to implement / change. We're glad for any help!\n - Please be aware that we'll only accept fully tested code.\n\n## Contributors\n\nThe original author of node_redis is [Matthew Ranney](https://github.com/mranney)\n\nThe current lead maintainer is [Ruben Bridgewater](https://github.com/BridgeAR)\n\nMany [others](https://github.com/NodeRedis/node_redis/graphs/contributors)\ncontributed to `node_redis` too. Thanks to all of them!\n\n## License\n\n[MIT](LICENSE)\n\n### Consolidation: It's time for celebration\n\nRight now there are two great redis clients around and both have some advantages\nabove each other. We speak about ioredis and node_redis. So after talking to\neach other about how we could improve in working together we (that is @luin and\n@BridgeAR) decided to work towards a single library on the long run. But step by\nstep.\n\nFirst of all, we want to split small parts of our libraries into others so that\nwe're both able to use the same code. Those libraries are going to be maintained\nunder the NodeRedis organization. This is going to reduce the maintenance\noverhead, allows others to use the very same code, if they need it and it's way\neasyer for others to contribute to both libraries.\n\nWe're very happy about this step towards working together as we both want to\ngive you the best redis experience possible.\n\nIf you want to join our cause by help maintaining something, please don't\nhesitate to contact either one of us.\n","source":"_posts/nodejs-redis-doc.md","raw":"---\ntitle: nodejs redis doc\ntags:\n  - nodejs\ncategories:\n  - NodeJS\ntoc: false\ndate: 2017-10-10 22:48:05\n---\n\nredis - a node.js redis client\n===========================\n\n[![Build Status](https://travis-ci.org/NodeRedis/node_redis.svg?branch=master)](https://travis-ci.org/NodeRedis/node_redis)\n[![Coverage Status](https://coveralls.io/repos/NodeRedis/node_redis/badge.svg?branch=)](https://coveralls.io/r/NodeRedis/node_redis?branch=)\n[![Windows Tests](https://img.shields.io/appveyor/ci/BridgeAR/node-redis/master.svg?label=Windows%20Tests)](https://ci.appveyor.com/project/BridgeAR/node-redis/branch/master)\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/NodeRedis/node_redis?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\nThis is a complete and feature rich Redis client for node.js. __It supports all\nRedis commands__ and focuses on high performance.\n\n<!-- more -->\n\nInstall with:\n\n    npm install redis\n\n## Usage Example\n\n```js\nvar redis = require(\"redis\"),\n    client = redis.createClient();\n\n// if you'd like to select database 3, instead of 0 (default), call\n// client.select(3, function() { /* ... */ });\n\nclient.on(\"error\", function (err) {\n    console.log(\"Error \" + err);\n});\n\nclient.set(\"string key\", \"string val\", redis.print);\nclient.hset(\"hash key\", \"hashtest 1\", \"some value\", redis.print);\nclient.hset([\"hash key\", \"hashtest 2\", \"some other value\"], redis.print);\nclient.hkeys(\"hash key\", function (err, replies) {\n    console.log(replies.length + \" replies:\");\n    replies.forEach(function (reply, i) {\n        console.log(\"    \" + i + \": \" + reply);\n    });\n    client.quit();\n});\n```\n\nThis will display:\n\n    mjr:~/work/node_redis (master)$ node example.js\n    Reply: OK\n    Reply: 0\n    Reply: 0\n    2 replies:\n        0: hashtest 1\n        1: hashtest 2\n    mjr:~/work/node_redis (master)$\n\nNote that the API is entirely asynchronous. To get data back from the server,\nyou'll need to use a callback. From v.2.6 on the API supports camelCase and\nsnake_case and all options / variables / events etc. can be used either way. It\nis recommended to use camelCase as this is the default for the Node.js\nlandscape.\n\n### Promises\n\nYou can also use node_redis with promises by promisifying node_redis with\n[bluebird](https://github.com/petkaantonov/bluebird) as in:\n\n```js\nvar redis = require('redis');\nbluebird.promisifyAll(redis.RedisClient.prototype);\nbluebird.promisifyAll(redis.Multi.prototype);\n```\n\nIt'll add a *Async* to all node_redis functions (e.g. return client.getAsync().then())\n\n```js\n// We expect a value 'foo': 'bar' to be present\n// So instead of writing client.get('foo', cb); you have to write:\nreturn client.getAsync('foo').then(function(res) {\n    console.log(res); // => 'bar'\n});\n\n// Using multi with promises looks like:\n\nreturn client.multi().get('foo').execAsync().then(function(res) {\n    console.log(res); // => 'bar'\n});\n```\n\n### Sending Commands\n\nEach Redis command is exposed as a function on the `client` object.\nAll functions take either an `args` Array plus optional `callback` Function or\na variable number of individual arguments followed by an optional callback.\nExamples:\n\n```js\nclient.hmset([\"key\", \"test keys 1\", \"test val 1\", \"test keys 2\", \"test val 2\"], function (err, res) {});\n// Works the same as\nclient.hmset(\"key\", [\"test keys 1\", \"test val 1\", \"test keys 2\", \"test val 2\"], function (err, res) {});\n// Or\nclient.hmset(\"key\", \"test keys 1\", \"test val 1\", \"test keys 2\", \"test val 2\", function (err, res) {});\n```\n\nCare should be taken with user input if arrays are possible (via body-parser, query string or other method), as single arguments could be unintentionally interpreted as multiple args.\n\nNote that in either form the `callback` is optional:\n\n```js\nclient.set(\"some key\", \"some val\");\nclient.set([\"some other key\", \"some val\"]);\n```\n\nIf the key is missing, reply will be null. Only if the [Redis Command\nReference](http://redis.io/commands) states something else it will not be null.\n\n```js\nclient.get(\"missingkey\", function(err, reply) {\n    // reply is null when the key is missing\n    console.log(reply);\n});\n```\n\nFor a list of Redis commands, see [Redis Command Reference](http://redis.io/commands)\n\nMinimal parsing is done on the replies. Commands that return a integer return\nJavaScript Numbers, arrays return JavaScript Array. `HGETALL` returns an Object\nkeyed by the hash keys. All strings will either be returned as string or as\nbuffer depending on your setting. Please be aware that sending null, undefined\nand Boolean values will result in the value coerced to a string!\n\n# Redis Commands\n\nThis library is a 1 to 1 mapping to [Redis commands](https://redis.io/commands).\nIt is not a cache library so please refer to Redis commands page for full usage\ndetails.\n\nExample setting key to auto expire using [SET command](https://redis.io/commands/set)\n\n```js\n// this key will expire after 10 seconds\nclient.set('key', 'value!', 'EX', 10);\n```\n\n# API\n\n## Connection and other Events\n\n`client` will emit some events about the state of the connection to the Redis server.\n\n### \"ready\"\n\n`client` will emit `ready` once a connection is established. Commands issued\nbefore the `ready` event are queued, then replayed just before this event is\nemitted.\n\n### \"connect\"\n\n`client` will emit `connect` as soon as the stream is connected to the server.\n\n### \"reconnecting\"\n\n`client` will emit `reconnecting` when trying to reconnect to the Redis server\nafter losing the connection. Listeners are passed an object containing `delay`\n(in ms) and `attempt` (the attempt #) attributes.\n\n### \"error\"\n\n`client` will emit `error` when encountering an error connecting to the Redis\nserver or when any other in node_redis occurs. If you use a command without\ncallback and encounter a ReplyError it is going to be emitted to the error\nlistener.\n\nSo please attach the error listener to node_redis.\n\n### \"end\"\n\n`client` will emit `end` when an established Redis server connection has closed.\n\n### \"drain\" (deprecated)\n\n`client` will emit `drain` when the TCP connection to the Redis server has been\nbuffering, but is now writable. This event can be used to stream commands in to\nRedis and adapt to backpressure.\n\nIf the stream is buffering `client.should_buffer` is set to true. Otherwise the\nvariable is always set to false. That way you can decide when to reduce your\nsend rate and resume sending commands when you get `drain`.\n\nYou can also check the return value of each command as it will also return the\nbackpressure indicator (deprecated). If false is returned the stream had to\nbuffer.\n\n### \"warning\"\n\n`client` will emit `warning` when password was set but none is needed and if a\ndeprecated option / function / similar is used.\n\n### \"idle\" (deprecated)\n\n`client` will emit `idle` when there are no outstanding commands that are\nawaiting a response.\n\n## redis.createClient()\nIf you have `redis-server` running on the same machine as node, then the\ndefaults for port and host are probably fine and you don't need to supply any\narguments. `createClient()` returns a `RedisClient` object. Otherwise,\n`createClient()` accepts these arguments:\n\n* `redis.createClient([options])`\n* `redis.createClient(unix_socket[, options])`\n* `redis.createClient(redis_url[, options])`\n* `redis.createClient(port[, host][, options])`\n\n__Tip:__ If the Redis server runs on the same machine as the client consider\nusing unix sockets if possible to increase throughput.\n\n#### `options` object properties\n| Property  | Default   | Description |\n|-----------|-----------|-------------|\n| host      | 127.0.0.1 | IP address of the Redis server |\n| port      | 6379      | Port of the Redis server |\n| path      | null      | The UNIX socket string of the Redis server |\n| url       | null      | The URL of the Redis server. Format: `[redis:]//[[user][:password@]][host][:port][/db-number][?db=db-number[&password=bar[&option=value]]]` (More info avaliable at [IANA](http://www.iana.org/assignments/uri-schemes/prov/redis)). |\n| parser    | javascript | __Deprecated__ Use either the built-in JS parser [`javascript`]() or the native [`hiredis`]() parser. __Note__ `node_redis` < 2.6 uses hiredis as default if installed. This changed in v.2.6.0. |\n| string_numbers | null | Set to `true`, `node_redis` will return Redis number values as Strings instead of javascript Numbers. Useful if you need to handle big numbers (above `Number.MAX_SAFE_INTEGER === 2^53`). Hiredis is incapable of this behavior, so setting this option to `true` will result in the built-in javascript parser being used no matter the value of the `parser` option. |\n| return_buffers | false | If set to `true`, then all replies will be sent to callbacks as Buffers instead of Strings. |\n| detect_buffers | false | If set to `true`, then replies will be sent to callbacks as Buffers. This option lets you switch between Buffers and Strings on a per-command basis, whereas `return_buffers` applies to every command on a client. __Note__: This doesn't work properly with the pubsub mode. A subscriber has to either always return Strings or Buffers. |\n| socket_keepalive | true | If set to `true`, the keep-alive functionality is enabled on the underlying socket. |\n| no_ready_check | false |  When a connection is established to the Redis server, the server might still be loading the database from disk. While loading, the server will not respond to any commands. To work around this, `node_redis` has a \"ready check\" which sends the `INFO` command to the server. The response from the `INFO` command indicates whether the server is ready for more commands. When ready, `node_redis` emits a `ready` event. Setting `no_ready_check` to `true` will inhibit this check. |\n| enable_offline_queue |  true | By default, if there is no active connection to the Redis server, commands are added to a queue and are executed once the connection has been established. Setting `enable_offline_queue` to `false` will disable this feature and the callback will be executed immediately with an error, or an error will be emitted if no callback is specified. |\n| retry_max_delay | null | __Deprecated__ _Please use `retry_strategy` instead._ By default, every time the client tries to connect and fails, the reconnection delay almost doubles. This delay normally grows infinitely, but setting `retry_max_delay` limits it to the maximum value provided in milliseconds. |\n| connect_timeout | 3600000 | __Deprecated__ _Please use `retry_strategy` instead._ Setting `connect_timeout` limits the total time for the client to connect and reconnect. The value is provided in milliseconds and is counted from the moment a new client is created or from the time the connection is lost. The last retry is going to happen exactly at the timeout time. Default is to try connecting until the default system socket timeout has been exceeded and to try reconnecting until 1h has elapsed. |\n| max_attempts | 0 | __Deprecated__ _Please use `retry_strategy` instead._ By default, a client will try reconnecting until connected. Setting `max_attempts` limits total amount of connection attempts. Setting this to 1 will prevent any reconnect attempt. |\n| retry_unfulfilled_commands | false | If set to `true`, all commands that were unfulfilled while the connection is lost will be retried after the connection has been reestablished. Use this with caution if you use state altering commands (e.g. `incr`). This is especially useful if you use blocking commands. |\n| password | null | If set, client will run Redis auth command on connect. Alias `auth_pass` __Note__ `node_redis` < 2.5 must use `auth_pass` |\n| db | null | If set, client will run Redis `select` command on connect. |\n| family | IPv4 | You can force using IPv6 if you set the family to 'IPv6'. See Node.js [net](https://nodejs.org/api/net.html) or [dns](https://nodejs.org/api/dns.html) modules on how to use the family type. |\n| disable_resubscribing | false | If set to `true`, a client won't resubscribe after disconnecting. |\n| rename_commands | null | Passing an object with renamed commands to use instead of the original functions. For example, if you renamed the command KEYS to \"DO-NOT-USE\" then the rename_commands object would be: `{ KEYS : \"DO-NOT-USE\" }` . See the [Redis security topics](http://redis.io/topics/security) for more info. |\n| tls | null | An object containing options to pass to [tls.connect](http://nodejs.org/api/tls.html#tls_tls_connect_port_host_options_callback) to set up a TLS connection to Redis (if, for example, it is set up to be accessible via a tunnel). |\n| prefix | null | A string used to prefix all used keys (e.g. `namespace:test`). Please be aware that the `keys` command will not be prefixed. The `keys` command has a \"pattern\" as argument and no key and it would be impossible to determine the existing keys in Redis if this would be prefixed. |\n| retry_strategy | function | A function that receives an options object as parameter including the retry `attempt`, the `total_retry_time` indicating how much time passed since the last time connected, the `error` why the connection was lost and the number of `times_connected` in total. If you return a number from this function, the retry will happen exactly after that time in milliseconds. If you return a non-number, no further retry will happen and all offline commands are flushed with errors. Return an error to return that specific error to all offline commands. Example below. |\n\n```js\nvar redis = require(\"redis\");\nvar client = redis.createClient({detect_buffers: true});\n\nclient.set(\"foo_rand000000000000\", \"OK\");\n\n// This will return a JavaScript String\nclient.get(\"foo_rand000000000000\", function (err, reply) {\n    console.log(reply.toString()); // Will print `OK`\n});\n\n// This will return a Buffer since original key is specified as a Buffer\nclient.get(new Buffer(\"foo_rand000000000000\"), function (err, reply) {\n    console.log(reply.toString()); // Will print `<Buffer 4f 4b>`\n});\nclient.quit();\n```\n\nretry_strategy example\n\n```js\nvar client = redis.createClient({\n    retry_strategy: function (options) {\n        if (options.error && options.error.code === 'ECONNREFUSED') {\n            // End reconnecting on a specific error and flush all commands with\n            // a individual error\n            return new Error('The server refused the connection');\n        }\n        if (options.total_retry_time > 1000 * 60 * 60) {\n            // End reconnecting after a specific timeout and flush all commands\n            // with a individual error\n            return new Error('Retry time exhausted');\n        }\n        if (options.attempt > 10) {\n            // End reconnecting with built in error\n            return undefined;\n        }\n        // reconnect after\n        return Math.min(options.attempt * 100, 3000);\n    }\n});\n```\n\n## client.auth(password[, callback])\n\nWhen connecting to a Redis server that requires authentication, the `AUTH`\ncommand must be sent as the first command after connecting. This can be tricky\nto coordinate with reconnections, the ready check, etc. To make this easier,\n`client.auth()` stashes `password` and will send it after each connection,\nincluding reconnections. `callback` is invoked only once, after the response to\nthe very first `AUTH` command sent.\nNOTE: Your call to `client.auth()` should not be inside the ready handler. If\nyou are doing this wrong, `client` will emit an error that looks\nsomething like this `Error: Ready check failed: ERR operation not permitted`.\n\n## backpressure\n\n### stream\n\nThe client exposed the used [stream](https://nodejs.org/api/stream.html) in\n`client.stream` and if the stream or client had to\n[buffer](https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback)\nthe command in `client.should_buffer`. In combination this can be used to\nimplement backpressure by checking the buffer state before sending a command and\nlistening to the stream\n[drain](https://nodejs.org/api/stream.html#stream_event_drain) event.\n\n## client.quit()\n\nThis sends the quit command to the redis server and ends cleanly right after all\nrunning commands were properly handled. If this is called while reconnecting\n(and therefore no connection to the redis server exists) it is going to end the\nconnection right away instead of resulting in further reconnections! All offline\ncommands are going to be flushed with an error in that case.\n\n## client.end(flush)\n\nForcibly close the connection to the Redis server. Note that this does not wait\nuntil all replies have been parsed. If you want to exit cleanly, call\n`client.quit()` as mentioned above.\n\nYou should set flush to true, if you are not absolutely sure you do not care\nabout any other commands. If you set flush to false all still running commands\nwill silently fail.\n\nThis example closes the connection to the Redis server before the replies have\nbeen read. You probably don't want to do this:\n\n```js\nvar redis = require(\"redis\"),\n    client = redis.createClient();\n\nclient.set(\"foo_rand000000000000\", \"some fantastic value\", function (err, reply) {\n    // This will either result in an error (flush parameter is set to true)\n    // or will silently fail and this callback will not be called at all (flush set to false)\n    console.log(err);\n});\nclient.end(true); // No further commands will be processed\nclient.get(\"foo_rand000000000000\", function (err, reply) {\n    console.log(err); // => 'The connection has already been closed.'\n});\n```\n\n`client.end()` without the flush parameter set to true should NOT be used in production!\n\n## Error handling (>= v.2.6)\n\nCurrently the following error subclasses exist:\n\n* `RedisError`: _All errors_ returned by the client\n* `ReplyError` subclass of `RedisError`: All errors returned by __Redis__ itself\n* `AbortError` subclass of `RedisError`: All commands that could not finish due\n  to what ever reason\n* `ParserError` subclass of `RedisError`: Returned in case of a parser error\n  (this should not happen)\n* `AggregateError` subclass of `AbortError`: Emitted in case multiple unresolved\n  commands without callback got rejected in debug_mode instead of lots of\n  `AbortError`s.\n\nAll error classes are exported by the module.\n\nExample:\n```js\nvar redis = require('./');\nvar assert = require('assert');\nvar client = redis.createClient();\n\nclient.on('error', function (err) {\n    assert(err instanceof Error);\n    assert(err instanceof redis.AbortError);\n    assert(err instanceof redis.AggregateError);\n    // The set and get get aggregated in here\n    assert.strictEqual(err.errors.length, 2);\n    assert.strictEqual(err.code, 'NR_CLOSED');\n});\nclient.set('foo', 123, 'bar', function (err, res) { // Too many arguments\n    assert(err instanceof redis.ReplyError); // => true\n    assert.strictEqual(err.command, 'SET');\n    assert.deepStrictEqual(err.args, ['foo', 123, 'bar']);\n\n    redis.debug_mode = true;\n    client.set('foo', 'bar');\n    client.get('foo');\n    process.nextTick(function () {\n        // Force closing the connection while the command did not yet return\n        client.end(true);\n        redis.debug_mode = false;\n    });\n});\n\n```\n\nEvery `ReplyError` contains the `command` name in all-caps and the arguments (`args`).\n\nIf node_redis emits a library error because of another error, the triggering\nerror is added to the returned error as `origin` attribute.\n\n___Error codes___\n\nnode_redis returns a `NR_CLOSED` error code if the clients connection dropped.\nIf a command unresolved command got rejected a `UNCERTAIN_STATE` code is\nreturned. A `CONNECTION_BROKEN` error code is used in case node_redis gives up\nto reconnect.\n\n## client.unref()\n\nCall `unref()` on the underlying socket connection to the Redis server, allowing\nthe program to exit once no more commands are pending.\n\nThis is an **experimental** feature, and only supports a subset of the Redis\nprotocol. Any commands where client state is saved on the Redis server, e.g.\n`*SUBSCRIBE` or the blocking `BL*` commands will *NOT* work with `.unref()`.\n\n```js\nvar redis = require(\"redis\")\nvar client = redis.createClient()\n\n/*\n    Calling unref() will allow this program to exit immediately after the get\n    command finishes. Otherwise the client would hang as long as the\n    client-server connection is alive.\n*/\nclient.unref()\nclient.get(\"foo\", function (err, value){\n    if (err) throw(err)\n    console.log(value)\n})\n```\n\n## Friendlier hash commands\n\nMost Redis commands take a single String or an Array of Strings as arguments,\nand replies are sent back as a single String or an Array of Strings. When\ndealing with hash values, there are a couple of useful exceptions to this.\n\n### client.hgetall(hash, callback)\n\nThe reply from an HGETALL command will be converted into a JavaScript Object by\n`node_redis`. That way you can interact with the responses using JavaScript\nsyntax.\n\nExample:\n\n```js\nclient.hmset(\"hosts\", \"mjr\", \"1\", \"another\", \"23\", \"home\", \"1234\");\nclient.hgetall(\"hosts\", function (err, obj) {\n    console.dir(obj);\n});\n```\n\nOutput:\n\n```js\n{ mjr: '1', another: '23', home: '1234' }\n```\n\n### client.hmset(hash, obj[, callback])\n\nMultiple values in a hash can be set by supplying an object:\n\n```js\nclient.HMSET(key2, {\n    \"0123456789\": \"abcdefghij\", // NOTE: key and value will be coerced to strings\n    \"some manner of key\": \"a type of value\"\n});\n```\n\nThe properties and values of this Object will be set as keys and values in the\nRedis hash.\n\n### client.hmset(hash, key1, val1, ... keyn, valn, [callback])\n\nMultiple values may also be set by supplying a list:\n\n```js\nclient.HMSET(key1, \"0123456789\", \"abcdefghij\", \"some manner of key\", \"a type of value\");\n```\n\n## Publish / Subscribe\n\nExample of the publish / subscribe API. This program opens two\nclient connections, subscribes to a channel on one of them, and publishes to that\nchannel on the other:\n\n```js\nvar redis = require(\"redis\");\nvar sub = redis.createClient(), pub = redis.createClient();\nvar msg_count = 0;\n\nsub.on(\"subscribe\", function (channel, count) {\n    pub.publish(\"a nice channel\", \"I am sending a message.\");\n    pub.publish(\"a nice channel\", \"I am sending a second message.\");\n    pub.publish(\"a nice channel\", \"I am sending my last message.\");\n});\n\nsub.on(\"message\", function (channel, message) {\n    console.log(\"sub channel \" + channel + \": \" + message);\n    msg_count += 1;\n    if (msg_count === 3) {\n        sub.unsubscribe();\n        sub.quit();\n        pub.quit();\n    }\n});\n\nsub.subscribe(\"a nice channel\");\n```\n\nWhen a client issues a `SUBSCRIBE` or `PSUBSCRIBE`, that connection is put into\na \"subscriber\" mode. At that point, only commands that modify the subscription\nset are valid and quit (and depending on the redis version ping as well). When\nthe subscription set is empty, the connection is put back into regular mode.\n\nIf you need to send regular commands to Redis while in subscriber mode, just\nopen another connection with a new client (hint: use `client.duplicate()`).\n\n## Subscriber Events\n\nIf a client has subscriptions active, it may emit these events:\n\n### \"message\" (channel, message)\n\nClient will emit `message` for every message received that matches an active subscription.\nListeners are passed the channel name as `channel` and the message as `message`.\n\n### \"pmessage\" (pattern, channel, message)\n\nClient will emit `pmessage` for every message received that matches an active\nsubscription pattern. Listeners are passed the original pattern used with\n`PSUBSCRIBE` as `pattern`, the sending channel name as `channel`, and the\nmessage as `message`.\n\n### \"message_buffer\" (channel, message)\n\nThis is the same as the `message` event with the exception, that it is always\ngoing to emit a buffer. If you listen to the `message` event at the same time as\nthe `message_buffer`, it is always going to emit a string.\n\n### \"pmessage_buffer\" (pattern, channel, message)\n\nThis is the same as the `pmessage` event with the exception, that it is always\ngoing to emit a buffer. If you listen to the `pmessage` event at the same time\nas the `pmessage_buffer`, it is always going to emit a string.\n\n### \"subscribe\" (channel, count)\n\nClient will emit `subscribe` in response to a `SUBSCRIBE` command. Listeners are\npassed the channel name as `channel` and the new count of subscriptions for this\nclient as `count`.\n\n### \"psubscribe\" (pattern, count)\n\nClient will emit `psubscribe` in response to a `PSUBSCRIBE` command. Listeners\nare passed the original pattern as `pattern`, and the new count of subscriptions\nfor this client as `count`.\n\n### \"unsubscribe\" (channel, count)\n\nClient will emit `unsubscribe` in response to a `UNSUBSCRIBE` command. Listeners\nare passed the channel name as `channel` and the new count of subscriptions for\nthis client as `count`. When `count` is 0, this client has left subscriber mode\nand no more subscriber events will be emitted.\n\n### \"punsubscribe\" (pattern, count)\n\nClient will emit `punsubscribe` in response to a `PUNSUBSCRIBE` command.\nListeners are passed the channel name as `channel` and the new count of\nsubscriptions for this client as `count`. When `count` is 0, this client has\nleft subscriber mode and no more subscriber events will be emitted.\n\n## client.multi([commands])\n\n`MULTI` commands are queued up until an `EXEC` is issued, and then all commands\nare run atomically by Redis. The interface in `node_redis` is to return an\nindividual `Multi` object by calling `client.multi()`. If any command fails to\nqueue, all commands are rolled back and none is going to be executed (For\nfurther information look at\n[transactions](http://redis.io/topics/transactions)).\n\n```js\nvar redis  = require(\"./index\"),\n    client = redis.createClient(), set_size = 20;\n\nclient.sadd(\"bigset\", \"a member\");\nclient.sadd(\"bigset\", \"another member\");\n\nwhile (set_size > 0) {\n    client.sadd(\"bigset\", \"member \" + set_size);\n    set_size -= 1;\n}\n\n// multi chain with an individual callback\nclient.multi()\n    .scard(\"bigset\")\n    .smembers(\"bigset\")\n    .keys(\"*\", function (err, replies) {\n        // NOTE: code in this callback is NOT atomic\n        // this only happens after the the .exec call finishes.\n        client.mget(replies, redis.print);\n    })\n    .dbsize()\n    .exec(function (err, replies) {\n        console.log(\"MULTI got \" + replies.length + \" replies\");\n        replies.forEach(function (reply, index) {\n            console.log(\"Reply \" + index + \": \" + reply.toString());\n        });\n    });\n```\n\n### Multi.exec([callback])\n\n`client.multi()` is a constructor that returns a `Multi` object. `Multi` objects\nshare all of the same command methods as `client` objects do. Commands are\nqueued up inside the `Multi` object until `Multi.exec()` is invoked.\n\nIf your code contains an syntax error an EXECABORT error is going to be thrown\nand all commands are going to be aborted. That error contains a `.errors`\nproperty that contains the concrete errors.\nIf all commands were queued successfully and an error is thrown by redis while\nprocessing the commands that error is going to be returned in the result array!\nNo other command is going to be aborted though than the onces failing.\n\nYou can either chain together `MULTI` commands as in the above example, or you\ncan queue individual commands while still sending regular client command as in\nthis example:\n\n```js\nvar redis  = require(\"redis\"),\n    client = redis.createClient(), multi;\n\n// start a separate multi command queue\nmulti = client.multi();\nmulti.incr(\"incr thing\", redis.print);\nmulti.incr(\"incr other thing\", redis.print);\n\n// runs immediately\nclient.mset(\"incr thing\", 100, \"incr other thing\", 1, redis.print);\n\n// drains multi queue and runs atomically\nmulti.exec(function (err, replies) {\n    console.log(replies); // 101, 2\n});\n```\n\nIn addition to adding commands to the `MULTI` queue individually, you can also\npass an array of commands and arguments to the constructor:\n\n```js\nvar redis  = require(\"redis\"),\n    client = redis.createClient();\n\nclient.multi([\n    [\"mget\", \"multifoo\", \"multibar\", redis.print],\n    [\"incr\", \"multifoo\"],\n    [\"incr\", \"multibar\"]\n]).exec(function (err, replies) {\n    console.log(replies);\n});\n```\n\n### Multi.exec_atomic([callback])\n\nIdentical to Multi.exec but with the difference that executing a single command\nwill not use transactions.\n\n## client.batch([commands])\n\nIdentical to .multi without transactions. This is recommended if you want to\nexecute many commands at once but don't have to rely on transactions.\n\n`BATCH` commands are queued up until an `EXEC` is issued, and then all commands\nare run atomically by Redis. The interface in `node_redis` is to return an\nindividual `Batch` object by calling `client.batch()`. The only difference\nbetween .batch and .multi is that no transaction is going to be used.\nBe aware that the errors are - just like in multi statements - in the result.\nOtherwise both, errors and results could be returned at the same time.\n\nIf you fire many commands at once this is going to boost the execution speed\nsignificantly compared to firing the same commands in a loop without waiting for\nthe result! See the benchmarks for further comparison. Please remember that all\ncommands are kept in memory until they are fired.\n\n## Monitor mode\n\nRedis supports the `MONITOR` command, which lets you see all commands received\nby the Redis server across all client connections, including from other client\nlibraries and other computers.\n\nA `monitor` event is going to be emitted for every command fired from any client\nconnected to the server including the monitoring client itself. The callback for\nthe `monitor` event takes a timestamp from the Redis server, an array of command\narguments and the raw monitoring string.\n\nExample:\n\n```js\nvar client  = require(\"redis\").createClient();\nclient.monitor(function (err, res) {\n    console.log(\"Entering monitoring mode.\");\n});\nclient.set('foo', 'bar');\n\nclient.on(\"monitor\", function (time, args, raw_reply) {\n    console.log(time + \": \" + args); // 1458910076.446514:['set', 'foo', 'bar']\n});\n```\n\n# Extras\n\nSome other things you might like to know about.\n\n## client.server_info\n\nAfter the ready probe completes, the results from the INFO command are saved in\nthe `client.server_info` object.\n\nThe `versions` key contains an array of the elements of the version string for\neasy comparison.\n\n    > client.server_info.redis_version\n    '2.3.0'\n    > client.server_info.versions\n    [ 2, 3, 0 ]\n\n## redis.print()\n\nA handy callback function for displaying return values when testing. Example:\n\n```js\nvar redis = require(\"redis\"),\n    client = redis.createClient();\n\nclient.on(\"connect\", function () {\n    client.set(\"foo_rand000000000000\", \"some fantastic value\", redis.print);\n    client.get(\"foo_rand000000000000\", redis.print);\n});\n```\n\nThis will print:\n\n    Reply: OK\n    Reply: some fantastic value\n\nNote that this program will not exit cleanly because the client is still connected.\n\n## Multi-word commands\n\nTo execute redis multi-word commands like `SCRIPT LOAD` or `CLIENT LIST` pass\nthe second word as first parameter:\n\n    client.script('load', 'return 1');\n    client.multi().script('load', 'return 1').exec(...);\n    client.multi([['script', 'load', 'return 1']]).exec(...);\n\n## client.duplicate([options][, callback])\n\nDuplicate all current options and return a new redisClient instance. All options\npassed to the duplicate function are going to replace the original option. If\nyou pass a callback, duplicate is going to wait until the client is ready and\nreturns it in the callback. If an error occurs in the meanwhile, that is going\nto return an error instead in the callback.\n\nOne example of when to use duplicate() would be to accommodate the connection-\nblocking redis commands BRPOP, BLPOP, and BRPOPLPUSH.  If these commands\nare used on the same redisClient instance as non-blocking commands, the\nnon-blocking ones may be queued up until after the blocking ones finish.\n\n    var Redis=require('redis');\n    var client = Redis.createClient();\n    var clientBlocking = client.duplicate();\n\n    var get = function() {\n        console.log(\"get called\");\n        client.get(\"any_key\",function() { console.log(\"get returned\"); });\n        setTimeout( get, 1000 );\n    };\n    var brpop = function() {\n        console.log(\"brpop called\");\n        clientBlocking.brpop(\"nonexistent\", 5, function() {\n            console.log(\"brpop return\");\n            setTimeout( brpop, 1000 );\n        });\n    };\n    get();\n    brpop();\n\nAnother reason to use duplicate() is when multiple DBs on the same server are\naccessed via the redis SELECT command.  Each DB could use its own connection.\n\n## client.send_command(command_name[, [args][, callback]])\n\nAll Redis commands have been added to the `client` object. However, if new\ncommands are introduced before this library is updated or if you want to add\nindividual commands you can use `send_command()` to send arbitrary commands to\nRedis.\n\nAll commands are sent as multi-bulk commands. `args` can either be an Array of\narguments, or omitted / set to undefined.\n\n## client.add_command(command_name)\n\nCalling add_command will add a new command to the prototype. The exact command\nname will be used when calling using this new command. Using arbitrary arguments\nis possible as with any other command.\n\n## client.connected\n\nBoolean tracking the state of the connection to the Redis server.\n\n## client.command_queue_length\n\nThe number of commands that have been sent to the Redis server but not yet\nreplied to. You can use this to enforce some kind of maximum queue depth for\ncommands while connected.\n\n## client.offline_queue_length\n\nThe number of commands that have been queued up for a future connection. You can\nuse this to enforce some kind of maximum queue depth for pre-connection\ncommands.\n\n### Commands with Optional and Keyword arguments\n\nThis applies to anything that uses an optional `[WITHSCORES]` or `[LIMIT offset\ncount]` in the [redis.io/commands](http://redis.io/commands) documentation.\n\nExample:\n\n```js\nvar args = [ 'myzset', 1, 'one', 2, 'two', 3, 'three', 99, 'ninety-nine' ];\nclient.zadd(args, function (err, response) {\n    if (err) throw err;\n    console.log('added '+response+' items.');\n\n    // -Infinity and +Infinity also work\n    var args1 = [ 'myzset', '+inf', '-inf' ];\n    client.zrevrangebyscore(args1, function (err, response) {\n        if (err) throw err;\n        console.log('example1', response);\n        // write your code here\n    });\n\n    var max = 3, min = 1, offset = 1, count = 2;\n    var args2 = [ 'myzset', max, min, 'WITHSCORES', 'LIMIT', offset, count ];\n    client.zrevrangebyscore(args2, function (err, response) {\n        if (err) throw err;\n        console.log('example2', response);\n        // write your code here\n    });\n});\n```\n\n## Performance\n\nMuch effort has been spent to make `node_redis` as fast as possible for common\noperations.\n\n```\nLenovo T450s, i7-5600U and 12gb memory\nclients: 1, NodeJS: 6.2.0, Redis: 3.2.0, parser: javascript, connected by: tcp\n         PING,         1/1 avg/max:   0.02/  5.26 2501ms total,   46916 ops/sec\n         PING,  batch 50/1 avg/max:   0.06/  4.35 2501ms total,  755178 ops/sec\n   SET 4B str,         1/1 avg/max:   0.02/  4.75 2501ms total,   40856 ops/sec\n   SET 4B str,  batch 50/1 avg/max:   0.11/  1.51 2501ms total,  432727 ops/sec\n   SET 4B buf,         1/1 avg/max:   0.05/  2.76 2501ms total,   20659 ops/sec\n   SET 4B buf,  batch 50/1 avg/max:   0.25/  1.76 2501ms total,  194962 ops/sec\n   GET 4B str,         1/1 avg/max:   0.02/  1.55 2501ms total,   45156 ops/sec\n   GET 4B str,  batch 50/1 avg/max:   0.09/  3.15 2501ms total,  524110 ops/sec\n   GET 4B buf,         1/1 avg/max:   0.02/  3.07 2501ms total,   44563 ops/sec\n   GET 4B buf,  batch 50/1 avg/max:   0.10/  3.18 2501ms total,  473171 ops/sec\n SET 4KiB str,         1/1 avg/max:   0.03/  1.54 2501ms total,   32627 ops/sec\n SET 4KiB str,  batch 50/1 avg/max:   0.34/  1.89 2501ms total,  146861 ops/sec\n SET 4KiB buf,         1/1 avg/max:   0.05/  2.85 2501ms total,   20688 ops/sec\n SET 4KiB buf,  batch 50/1 avg/max:   0.36/  1.83 2501ms total,  138165 ops/sec\n GET 4KiB str,         1/1 avg/max:   0.02/  1.37 2501ms total,   39389 ops/sec\n GET 4KiB str,  batch 50/1 avg/max:   0.24/  1.81 2501ms total,  208157 ops/sec\n GET 4KiB buf,         1/1 avg/max:   0.02/  2.63 2501ms total,   39918 ops/sec\n GET 4KiB buf,  batch 50/1 avg/max:   0.31/  8.56 2501ms total,  161575 ops/sec\n         INCR,         1/1 avg/max:   0.02/  4.69 2501ms total,   45685 ops/sec\n         INCR,  batch 50/1 avg/max:   0.09/  3.06 2501ms total,  539964 ops/sec\n        LPUSH,         1/1 avg/max:   0.02/  3.04 2501ms total,   41253 ops/sec\n        LPUSH,  batch 50/1 avg/max:   0.12/  1.94 2501ms total,  425090 ops/sec\n    LRANGE 10,         1/1 avg/max:   0.02/  2.28 2501ms total,   39850 ops/sec\n    LRANGE 10,  batch 50/1 avg/max:   0.25/  1.85 2501ms total,  194302 ops/sec\n   LRANGE 100,         1/1 avg/max:   0.05/  2.93 2501ms total,   21026 ops/sec\n   LRANGE 100,  batch 50/1 avg/max:   1.52/  2.89 2501ms total,   32767 ops/sec\n SET 4MiB str,         1/1 avg/max:   5.16/ 15.55 2502ms total,     193 ops/sec\n SET 4MiB str,  batch 20/1 avg/max:  89.73/ 99.96 2513ms total,     223 ops/sec\n SET 4MiB buf,         1/1 avg/max:   2.23/  8.35 2501ms total,     446 ops/sec\n SET 4MiB buf,  batch 20/1 avg/max:  41.47/ 50.91 2530ms total,     482 ops/sec\n GET 4MiB str,         1/1 avg/max:   2.79/ 10.91 2502ms total,     358 ops/sec\n GET 4MiB str,  batch 20/1 avg/max: 101.61/118.11 2541ms total,     197 ops/sec\n GET 4MiB buf,         1/1 avg/max:   2.32/ 14.93 2502ms total,     430 ops/sec\n GET 4MiB buf,  batch 20/1 avg/max:  65.01/ 84.72 2536ms total,     308 ops/sec\n ```\n\n## Debugging\n\nTo get debug output run your `node_redis` application with `NODE_DEBUG=redis`.\n\nThis is also going to result in good stack traces opposed to useless ones\notherwise for any async operation.\nIf you only want to have good stack traces but not the debug output run your\napplication in development mode instead (`NODE_ENV=development`).\n\nGood stack traces are only activated in development and debug mode as this\nresults in a significant performance penalty.\n\n___Comparison___:\nUseless stack trace:\n```\nReplyError: ERR wrong number of arguments for 'set' command\n    at parseError (/home/ruben/repos/redis/node_modules/redis-parser/lib/parser.js:158:12)\n    at parseType (/home/ruben/repos/redis/node_modules/redis-parser/lib/parser.js:219:14)\n```\nGood stack trace:\n```\nReplyError: ERR wrong number of arguments for 'set' command\n    at new Command (/home/ruben/repos/redis/lib/command.js:9:902)\n    at RedisClient.set (/home/ruben/repos/redis/lib/commands.js:9:3238)\n    at Context.<anonymous> (/home/ruben/repos/redis/test/good_stacks.spec.js:20:20)\n    at callFnAsync (/home/ruben/repos/redis/node_modules/mocha/lib/runnable.js:349:8)\n    at Test.Runnable.run (/home/ruben/repos/redis/node_modules/mocha/lib/runnable.js:301:7)\n    at Runner.runTest (/home/ruben/repos/redis/node_modules/mocha/lib/runner.js:422:10)\n    at /home/ruben/repos/redis/node_modules/mocha/lib/runner.js:528:12\n    at next (/home/ruben/repos/redis/node_modules/mocha/lib/runner.js:342:14)\n    at /home/ruben/repos/redis/node_modules/mocha/lib/runner.js:352:7\n    at next (/home/ruben/repos/redis/node_modules/mocha/lib/runner.js:284:14)\n    at Immediate._onImmediate (/home/ruben/repos/redis/node_modules/mocha/lib/runner.js:320:5)\n    at processImmediate [as _immediateCallback] (timers.js:383:17)\n```\n\n## How to Contribute\n- Open a pull request or an issue about what you want to implement / change. We're glad for any help!\n - Please be aware that we'll only accept fully tested code.\n\n## Contributors\n\nThe original author of node_redis is [Matthew Ranney](https://github.com/mranney)\n\nThe current lead maintainer is [Ruben Bridgewater](https://github.com/BridgeAR)\n\nMany [others](https://github.com/NodeRedis/node_redis/graphs/contributors)\ncontributed to `node_redis` too. Thanks to all of them!\n\n## License\n\n[MIT](LICENSE)\n\n### Consolidation: It's time for celebration\n\nRight now there are two great redis clients around and both have some advantages\nabove each other. We speak about ioredis and node_redis. So after talking to\neach other about how we could improve in working together we (that is @luin and\n@BridgeAR) decided to work towards a single library on the long run. But step by\nstep.\n\nFirst of all, we want to split small parts of our libraries into others so that\nwe're both able to use the same code. Those libraries are going to be maintained\nunder the NodeRedis organization. This is going to reduce the maintenance\noverhead, allows others to use the very same code, if they need it and it's way\neasyer for others to contribute to both libraries.\n\nWe're very happy about this step towards working together as we both want to\ngive you the best redis experience possible.\n\nIf you want to join our cause by help maintaining something, please don't\nhesitate to contact either one of us.\n","slug":"nodejs-redis-doc","published":1,"updated":"2019-11-07T02:17:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznz8004yh5s630apni4e","content":"<h1 id=\"redis-a-node-js-redis-client\"><a href=\"#redis-a-node-js-redis-client\" class=\"headerlink\" title=\"redis - a node.js redis client\"></a>redis - a node.js redis client</h1><p><a href=\"https://travis-ci.org/NodeRedis/node_redis\" target=\"_blank\" rel=\"noopener\"><img src=\"https://travis-ci.org/NodeRedis/node_redis.svg?branch=master\" alt=\"Build Status\"></a><br><a href=\"https://coveralls.io/r/NodeRedis/node_redis?branch=\" target=\"_blank\" rel=\"noopener\"><img src=\"https://coveralls.io/repos/NodeRedis/node_redis/badge.svg?branch=\" alt=\"Coverage Status\"></a><br><a href=\"https://ci.appveyor.com/project/BridgeAR/node-redis/branch/master\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/appveyor/ci/BridgeAR/node-redis/master.svg?label=Windows%20Tests\" alt=\"Windows Tests\"></a><br><a href=\"https://gitter.im/NodeRedis/node_redis?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge\" target=\"_blank\" rel=\"noopener\"><img src=\"https://badges.gitter.im/Join%20Chat.svg\" alt=\"Gitter\"></a></p>\n<p>This is a complete and feature rich Redis client for node.js. <strong>It supports all<br>Redis commands</strong> and focuses on high performance.</p>\n<a id=\"more\"></a>\n<p>Install with:</p>\n<pre><code>npm install redis\n</code></pre><h2 id=\"Usage-Example\"><a href=\"#Usage-Example\" class=\"headerlink\" title=\"Usage Example\"></a>Usage Example</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> redis = <span class=\"built_in\">require</span>(<span class=\"string\">\"redis\"</span>),</span><br><span class=\"line\">    client = redis.createClient();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// if you'd like to select database 3, instead of 0 (default), call</span></span><br><span class=\"line\"><span class=\"comment\">// client.select(3, function() &#123; /* ... */ &#125;);</span></span><br><span class=\"line\"></span><br><span class=\"line\">client.on(<span class=\"string\">\"error\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Error \"</span> + err);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">client.set(<span class=\"string\">\"string key\"</span>, <span class=\"string\">\"string val\"</span>, redis.print);</span><br><span class=\"line\">client.hset(<span class=\"string\">\"hash key\"</span>, <span class=\"string\">\"hashtest 1\"</span>, <span class=\"string\">\"some value\"</span>, redis.print);</span><br><span class=\"line\">client.hset([<span class=\"string\">\"hash key\"</span>, <span class=\"string\">\"hashtest 2\"</span>, <span class=\"string\">\"some other value\"</span>], redis.print);</span><br><span class=\"line\">client.hkeys(<span class=\"string\">\"hash key\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, replies</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(replies.length + <span class=\"string\">\" replies:\"</span>);</span><br><span class=\"line\">    replies.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">reply, i</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"    \"</span> + i + <span class=\"string\">\": \"</span> + reply);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    client.quit();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>This will display:</p>\n<pre><code>mjr:~/work/node_redis (master)$ node example.js\nReply: OK\nReply: 0\nReply: 0\n2 replies:\n    0: hashtest 1\n    1: hashtest 2\nmjr:~/work/node_redis (master)$\n</code></pre><p>Note that the API is entirely asynchronous. To get data back from the server,<br>you’ll need to use a callback. From v.2.6 on the API supports camelCase and<br>snake_case and all options / variables / events etc. can be used either way. It<br>is recommended to use camelCase as this is the default for the Node.js<br>landscape.</p>\n<h3 id=\"Promises\"><a href=\"#Promises\" class=\"headerlink\" title=\"Promises\"></a>Promises</h3><p>You can also use node_redis with promises by promisifying node_redis with<br><a href=\"https://github.com/petkaantonov/bluebird\" target=\"_blank\" rel=\"noopener\">bluebird</a> as in:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> redis = <span class=\"built_in\">require</span>(<span class=\"string\">'redis'</span>);</span><br><span class=\"line\">bluebird.promisifyAll(redis.RedisClient.prototype);</span><br><span class=\"line\">bluebird.promisifyAll(redis.Multi.prototype);</span><br></pre></td></tr></table></figure>\n<p>It’ll add a <em>Async</em> to all node_redis functions (e.g. return client.getAsync().then())</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// We expect a value 'foo': 'bar' to be present</span></span><br><span class=\"line\"><span class=\"comment\">// So instead of writing client.get('foo', cb); you have to write:</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> client.getAsync(<span class=\"string\">'foo'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res); <span class=\"comment\">// =&gt; 'bar'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Using multi with promises looks like:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> client.multi().get(<span class=\"string\">'foo'</span>).execAsync().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res); <span class=\"comment\">// =&gt; 'bar'</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Sending-Commands\"><a href=\"#Sending-Commands\" class=\"headerlink\" title=\"Sending Commands\"></a>Sending Commands</h3><p>Each Redis command is exposed as a function on the <code>client</code> object.<br>All functions take either an <code>args</code> Array plus optional <code>callback</code> Function or<br>a variable number of individual arguments followed by an optional callback.<br>Examples:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client.hmset([<span class=\"string\">\"key\"</span>, <span class=\"string\">\"test keys 1\"</span>, <span class=\"string\">\"test val 1\"</span>, <span class=\"string\">\"test keys 2\"</span>, <span class=\"string\">\"test val 2\"</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;&#125;);</span><br><span class=\"line\"><span class=\"comment\">// Works the same as</span></span><br><span class=\"line\">client.hmset(<span class=\"string\">\"key\"</span>, [<span class=\"string\">\"test keys 1\"</span>, <span class=\"string\">\"test val 1\"</span>, <span class=\"string\">\"test keys 2\"</span>, <span class=\"string\">\"test val 2\"</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;&#125;);</span><br><span class=\"line\"><span class=\"comment\">// Or</span></span><br><span class=\"line\">client.hmset(<span class=\"string\">\"key\"</span>, <span class=\"string\">\"test keys 1\"</span>, <span class=\"string\">\"test val 1\"</span>, <span class=\"string\">\"test keys 2\"</span>, <span class=\"string\">\"test val 2\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure>\n<p>Care should be taken with user input if arrays are possible (via body-parser, query string or other method), as single arguments could be unintentionally interpreted as multiple args.</p>\n<p>Note that in either form the <code>callback</code> is optional:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client.set(<span class=\"string\">\"some key\"</span>, <span class=\"string\">\"some val\"</span>);</span><br><span class=\"line\">client.set([<span class=\"string\">\"some other key\"</span>, <span class=\"string\">\"some val\"</span>]);</span><br></pre></td></tr></table></figure>\n<p>If the key is missing, reply will be null. Only if the <a href=\"http://redis.io/commands\" target=\"_blank\" rel=\"noopener\">Redis Command<br>Reference</a> states something else it will not be null.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client.get(<span class=\"string\">\"missingkey\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, reply</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// reply is null when the key is missing</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(reply);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>For a list of Redis commands, see <a href=\"http://redis.io/commands\" target=\"_blank\" rel=\"noopener\">Redis Command Reference</a></p>\n<p>Minimal parsing is done on the replies. Commands that return a integer return<br>JavaScript Numbers, arrays return JavaScript Array. <code>HGETALL</code> returns an Object<br>keyed by the hash keys. All strings will either be returned as string or as<br>buffer depending on your setting. Please be aware that sending null, undefined<br>and Boolean values will result in the value coerced to a string!</p>\n<h1 id=\"Redis-Commands\"><a href=\"#Redis-Commands\" class=\"headerlink\" title=\"Redis Commands\"></a>Redis Commands</h1><p>This library is a 1 to 1 mapping to <a href=\"https://redis.io/commands\" target=\"_blank\" rel=\"noopener\">Redis commands</a>.<br>It is not a cache library so please refer to Redis commands page for full usage<br>details.</p>\n<p>Example setting key to auto expire using <a href=\"https://redis.io/commands/set\" target=\"_blank\" rel=\"noopener\">SET command</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// this key will expire after 10 seconds</span></span><br><span class=\"line\">client.set(<span class=\"string\">'key'</span>, <span class=\"string\">'value!'</span>, <span class=\"string\">'EX'</span>, <span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<h1 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h1><h2 id=\"Connection-and-other-Events\"><a href=\"#Connection-and-other-Events\" class=\"headerlink\" title=\"Connection and other Events\"></a>Connection and other Events</h2><p><code>client</code> will emit some events about the state of the connection to the Redis server.</p>\n<h3 id=\"“ready”\"><a href=\"#“ready”\" class=\"headerlink\" title=\"“ready”\"></a>“ready”</h3><p><code>client</code> will emit <code>ready</code> once a connection is established. Commands issued<br>before the <code>ready</code> event are queued, then replayed just before this event is<br>emitted.</p>\n<h3 id=\"“connect”\"><a href=\"#“connect”\" class=\"headerlink\" title=\"“connect”\"></a>“connect”</h3><p><code>client</code> will emit <code>connect</code> as soon as the stream is connected to the server.</p>\n<h3 id=\"“reconnecting”\"><a href=\"#“reconnecting”\" class=\"headerlink\" title=\"“reconnecting”\"></a>“reconnecting”</h3><p><code>client</code> will emit <code>reconnecting</code> when trying to reconnect to the Redis server<br>after losing the connection. Listeners are passed an object containing <code>delay</code><br>(in ms) and <code>attempt</code> (the attempt #) attributes.</p>\n<h3 id=\"“error”\"><a href=\"#“error”\" class=\"headerlink\" title=\"“error”\"></a>“error”</h3><p><code>client</code> will emit <code>error</code> when encountering an error connecting to the Redis<br>server or when any other in node_redis occurs. If you use a command without<br>callback and encounter a ReplyError it is going to be emitted to the error<br>listener.</p>\n<p>So please attach the error listener to node_redis.</p>\n<h3 id=\"“end”\"><a href=\"#“end”\" class=\"headerlink\" title=\"“end”\"></a>“end”</h3><p><code>client</code> will emit <code>end</code> when an established Redis server connection has closed.</p>\n<h3 id=\"“drain”-deprecated\"><a href=\"#“drain”-deprecated\" class=\"headerlink\" title=\"“drain” (deprecated)\"></a>“drain” (deprecated)</h3><p><code>client</code> will emit <code>drain</code> when the TCP connection to the Redis server has been<br>buffering, but is now writable. This event can be used to stream commands in to<br>Redis and adapt to backpressure.</p>\n<p>If the stream is buffering <code>client.should_buffer</code> is set to true. Otherwise the<br>variable is always set to false. That way you can decide when to reduce your<br>send rate and resume sending commands when you get <code>drain</code>.</p>\n<p>You can also check the return value of each command as it will also return the<br>backpressure indicator (deprecated). If false is returned the stream had to<br>buffer.</p>\n<h3 id=\"“warning”\"><a href=\"#“warning”\" class=\"headerlink\" title=\"“warning”\"></a>“warning”</h3><p><code>client</code> will emit <code>warning</code> when password was set but none is needed and if a<br>deprecated option / function / similar is used.</p>\n<h3 id=\"“idle”-deprecated\"><a href=\"#“idle”-deprecated\" class=\"headerlink\" title=\"“idle” (deprecated)\"></a>“idle” (deprecated)</h3><p><code>client</code> will emit <code>idle</code> when there are no outstanding commands that are<br>awaiting a response.</p>\n<h2 id=\"redis-createClient\"><a href=\"#redis-createClient\" class=\"headerlink\" title=\"redis.createClient()\"></a>redis.createClient()</h2><p>If you have <code>redis-server</code> running on the same machine as node, then the<br>defaults for port and host are probably fine and you don’t need to supply any<br>arguments. <code>createClient()</code> returns a <code>RedisClient</code> object. Otherwise,<br><code>createClient()</code> accepts these arguments:</p>\n<ul>\n<li><code>redis.createClient([options])</code></li>\n<li><code>redis.createClient(unix_socket[, options])</code></li>\n<li><code>redis.createClient(redis_url[, options])</code></li>\n<li><code>redis.createClient(port[, host][, options])</code></li>\n</ul>\n<p><strong>Tip:</strong> If the Redis server runs on the same machine as the client consider<br>using unix sockets if possible to increase throughput.</p>\n<h4 id=\"options-object-properties\"><a href=\"#options-object-properties\" class=\"headerlink\" title=\"options object properties\"></a><code>options</code> object properties</h4><table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>host</td>\n<td>127.0.0.1</td>\n<td>IP address of the Redis server</td>\n</tr>\n<tr>\n<td>port</td>\n<td>6379</td>\n<td>Port of the Redis server</td>\n</tr>\n<tr>\n<td>path</td>\n<td>null</td>\n<td>The UNIX socket string of the Redis server</td>\n</tr>\n<tr>\n<td>url</td>\n<td>null</td>\n<td>The URL of the Redis server. Format: <code>[redis:]//[[user][:password@]][host][:port][/db-number][?db=db-number[&amp;password=bar[&amp;option=value]]]</code> (More info avaliable at <a href=\"http://www.iana.org/assignments/uri-schemes/prov/redis\" target=\"_blank\" rel=\"noopener\">IANA</a>).</td>\n</tr>\n<tr>\n<td>parser</td>\n<td>javascript</td>\n<td><strong>Deprecated</strong> Use either the built-in JS parser <a href><code>javascript</code></a> or the native <a href><code>hiredis</code></a> parser. <strong>Note</strong> <code>node_redis</code> &lt; 2.6 uses hiredis as default if installed. This changed in v.2.6.0.</td>\n</tr>\n<tr>\n<td>string_numbers</td>\n<td>null</td>\n<td>Set to <code>true</code>, <code>node_redis</code> will return Redis number values as Strings instead of javascript Numbers. Useful if you need to handle big numbers (above <code>Number.MAX_SAFE_INTEGER === 2^53</code>). Hiredis is incapable of this behavior, so setting this option to <code>true</code> will result in the built-in javascript parser being used no matter the value of the <code>parser</code> option.</td>\n</tr>\n<tr>\n<td>return_buffers</td>\n<td>false</td>\n<td>If set to <code>true</code>, then all replies will be sent to callbacks as Buffers instead of Strings.</td>\n</tr>\n<tr>\n<td>detect_buffers</td>\n<td>false</td>\n<td>If set to <code>true</code>, then replies will be sent to callbacks as Buffers. This option lets you switch between Buffers and Strings on a per-command basis, whereas <code>return_buffers</code> applies to every command on a client. <strong>Note</strong>: This doesn’t work properly with the pubsub mode. A subscriber has to either always return Strings or Buffers.</td>\n</tr>\n<tr>\n<td>socket_keepalive</td>\n<td>true</td>\n<td>If set to <code>true</code>, the keep-alive functionality is enabled on the underlying socket.</td>\n</tr>\n<tr>\n<td>no_ready_check</td>\n<td>false</td>\n<td>When a connection is established to the Redis server, the server might still be loading the database from disk. While loading, the server will not respond to any commands. To work around this, <code>node_redis</code> has a “ready check” which sends the <code>INFO</code> command to the server. The response from the <code>INFO</code> command indicates whether the server is ready for more commands. When ready, <code>node_redis</code> emits a <code>ready</code> event. Setting <code>no_ready_check</code> to <code>true</code> will inhibit this check.</td>\n</tr>\n<tr>\n<td>enable_offline_queue</td>\n<td>true</td>\n<td>By default, if there is no active connection to the Redis server, commands are added to a queue and are executed once the connection has been established. Setting <code>enable_offline_queue</code> to <code>false</code> will disable this feature and the callback will be executed immediately with an error, or an error will be emitted if no callback is specified.</td>\n</tr>\n<tr>\n<td>retry_max_delay</td>\n<td>null</td>\n<td><strong>Deprecated</strong> _Please use <code>retry_strategy</code> instead._ By default, every time the client tries to connect and fails, the reconnection delay almost doubles. This delay normally grows infinitely, but setting <code>retry_max_delay</code> limits it to the maximum value provided in milliseconds.</td>\n</tr>\n<tr>\n<td>connect_timeout</td>\n<td>3600000</td>\n<td><strong>Deprecated</strong> _Please use <code>retry_strategy</code> instead._ Setting <code>connect_timeout</code> limits the total time for the client to connect and reconnect. The value is provided in milliseconds and is counted from the moment a new client is created or from the time the connection is lost. The last retry is going to happen exactly at the timeout time. Default is to try connecting until the default system socket timeout has been exceeded and to try reconnecting until 1h has elapsed.</td>\n</tr>\n<tr>\n<td>max_attempts</td>\n<td>0</td>\n<td><strong>Deprecated</strong> _Please use <code>retry_strategy</code> instead._ By default, a client will try reconnecting until connected. Setting <code>max_attempts</code> limits total amount of connection attempts. Setting this to 1 will prevent any reconnect attempt.</td>\n</tr>\n<tr>\n<td>retry_unfulfilled_commands</td>\n<td>false</td>\n<td>If set to <code>true</code>, all commands that were unfulfilled while the connection is lost will be retried after the connection has been reestablished. Use this with caution if you use state altering commands (e.g. <code>incr</code>). This is especially useful if you use blocking commands.</td>\n</tr>\n<tr>\n<td>password</td>\n<td>null</td>\n<td>If set, client will run Redis auth command on connect. Alias <code>auth_pass</code> <strong>Note</strong> <code>node_redis</code> &lt; 2.5 must use <code>auth_pass</code></td>\n</tr>\n<tr>\n<td>db</td>\n<td>null</td>\n<td>If set, client will run Redis <code>select</code> command on connect.</td>\n</tr>\n<tr>\n<td>family</td>\n<td>IPv4</td>\n<td>You can force using IPv6 if you set the family to ‘IPv6’. See Node.js <a href=\"https://nodejs.org/api/net.html\" target=\"_blank\" rel=\"noopener\">net</a> or <a href=\"https://nodejs.org/api/dns.html\" target=\"_blank\" rel=\"noopener\">dns</a> modules on how to use the family type.</td>\n</tr>\n<tr>\n<td>disable_resubscribing</td>\n<td>false</td>\n<td>If set to <code>true</code>, a client won’t resubscribe after disconnecting.</td>\n</tr>\n<tr>\n<td>rename_commands</td>\n<td>null</td>\n<td>Passing an object with renamed commands to use instead of the original functions. For example, if you renamed the command KEYS to “DO-NOT-USE” then the rename_commands object would be: <code>{ KEYS : &quot;DO-NOT-USE&quot; }</code> . See the <a href=\"http://redis.io/topics/security\" target=\"_blank\" rel=\"noopener\">Redis security topics</a> for more info.</td>\n</tr>\n<tr>\n<td>tls</td>\n<td>null</td>\n<td>An object containing options to pass to <a href=\"http://nodejs.org/api/tls.html#tls_tls_connect_port_host_options_callback\" target=\"_blank\" rel=\"noopener\">tls.connect</a> to set up a TLS connection to Redis (if, for example, it is set up to be accessible via a tunnel).</td>\n</tr>\n<tr>\n<td>prefix</td>\n<td>null</td>\n<td>A string used to prefix all used keys (e.g. <code>namespace:test</code>). Please be aware that the <code>keys</code> command will not be prefixed. The <code>keys</code> command has a “pattern” as argument and no key and it would be impossible to determine the existing keys in Redis if this would be prefixed.</td>\n</tr>\n<tr>\n<td>retry_strategy</td>\n<td>function</td>\n<td>A function that receives an options object as parameter including the retry <code>attempt</code>, the <code>total_retry_time</code> indicating how much time passed since the last time connected, the <code>error</code> why the connection was lost and the number of <code>times_connected</code> in total. If you return a number from this function, the retry will happen exactly after that time in milliseconds. If you return a non-number, no further retry will happen and all offline commands are flushed with errors. Return an error to return that specific error to all offline commands. Example below.</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> redis = <span class=\"built_in\">require</span>(<span class=\"string\">\"redis\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> client = redis.createClient(&#123;<span class=\"attr\">detect_buffers</span>: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">client.set(<span class=\"string\">\"foo_rand000000000000\"</span>, <span class=\"string\">\"OK\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// This will return a JavaScript String</span></span><br><span class=\"line\">client.get(<span class=\"string\">\"foo_rand000000000000\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, reply</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(reply.toString()); <span class=\"comment\">// Will print `OK`</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// This will return a Buffer since original key is specified as a Buffer</span></span><br><span class=\"line\">client.get(<span class=\"keyword\">new</span> Buffer(<span class=\"string\">\"foo_rand000000000000\"</span>), <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, reply</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(reply.toString()); <span class=\"comment\">// Will print `&lt;Buffer 4f 4b&gt;`</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">client.quit();</span><br></pre></td></tr></table></figure>\n<p>retry_strategy example</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> client = redis.createClient(&#123;</span><br><span class=\"line\">    retry_strategy: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (options.error &amp;&amp; options.error.code === <span class=\"string\">'ECONNREFUSED'</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// End reconnecting on a specific error and flush all commands with</span></span><br><span class=\"line\">            <span class=\"comment\">// a individual error</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'The server refused the connection'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (options.total_retry_time &gt; <span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// End reconnecting after a specific timeout and flush all commands</span></span><br><span class=\"line\">            <span class=\"comment\">// with a individual error</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Retry time exhausted'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (options.attempt &gt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// End reconnecting with built in error</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// reconnect after</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.min(options.attempt * <span class=\"number\">100</span>, <span class=\"number\">3000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"client-auth-password-callback\"><a href=\"#client-auth-password-callback\" class=\"headerlink\" title=\"client.auth(password[, callback])\"></a>client.auth(password[, callback])</h2><p>When connecting to a Redis server that requires authentication, the <code>AUTH</code><br>command must be sent as the first command after connecting. This can be tricky<br>to coordinate with reconnections, the ready check, etc. To make this easier,<br><code>client.auth()</code> stashes <code>password</code> and will send it after each connection,<br>including reconnections. <code>callback</code> is invoked only once, after the response to<br>the very first <code>AUTH</code> command sent.<br>NOTE: Your call to <code>client.auth()</code> should not be inside the ready handler. If<br>you are doing this wrong, <code>client</code> will emit an error that looks<br>something like this <code>Error: Ready check failed: ERR operation not permitted</code>.</p>\n<h2 id=\"backpressure\"><a href=\"#backpressure\" class=\"headerlink\" title=\"backpressure\"></a>backpressure</h2><h3 id=\"stream\"><a href=\"#stream\" class=\"headerlink\" title=\"stream\"></a>stream</h3><p>The client exposed the used <a href=\"https://nodejs.org/api/stream.html\" target=\"_blank\" rel=\"noopener\">stream</a> in<br><code>client.stream</code> and if the stream or client had to<br><a href=\"https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback\" target=\"_blank\" rel=\"noopener\">buffer</a><br>the command in <code>client.should_buffer</code>. In combination this can be used to<br>implement backpressure by checking the buffer state before sending a command and<br>listening to the stream<br><a href=\"https://nodejs.org/api/stream.html#stream_event_drain\" target=\"_blank\" rel=\"noopener\">drain</a> event.</p>\n<h2 id=\"client-quit\"><a href=\"#client-quit\" class=\"headerlink\" title=\"client.quit()\"></a>client.quit()</h2><p>This sends the quit command to the redis server and ends cleanly right after all<br>running commands were properly handled. If this is called while reconnecting<br>(and therefore no connection to the redis server exists) it is going to end the<br>connection right away instead of resulting in further reconnections! All offline<br>commands are going to be flushed with an error in that case.</p>\n<h2 id=\"client-end-flush\"><a href=\"#client-end-flush\" class=\"headerlink\" title=\"client.end(flush)\"></a>client.end(flush)</h2><p>Forcibly close the connection to the Redis server. Note that this does not wait<br>until all replies have been parsed. If you want to exit cleanly, call<br><code>client.quit()</code> as mentioned above.</p>\n<p>You should set flush to true, if you are not absolutely sure you do not care<br>about any other commands. If you set flush to false all still running commands<br>will silently fail.</p>\n<p>This example closes the connection to the Redis server before the replies have<br>been read. You probably don’t want to do this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> redis = <span class=\"built_in\">require</span>(<span class=\"string\">\"redis\"</span>),</span><br><span class=\"line\">    client = redis.createClient();</span><br><span class=\"line\"></span><br><span class=\"line\">client.set(<span class=\"string\">\"foo_rand000000000000\"</span>, <span class=\"string\">\"some fantastic value\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, reply</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// This will either result in an error (flush parameter is set to true)</span></span><br><span class=\"line\">    <span class=\"comment\">// or will silently fail and this callback will not be called at all (flush set to false)</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">client.end(<span class=\"literal\">true</span>); <span class=\"comment\">// No further commands will be processed</span></span><br><span class=\"line\">client.get(<span class=\"string\">\"foo_rand000000000000\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, reply</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err); <span class=\"comment\">// =&gt; 'The connection has already been closed.'</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><code>client.end()</code> without the flush parameter set to true should NOT be used in production!</p>\n<h2 id=\"Error-handling-gt-v-2-6\"><a href=\"#Error-handling-gt-v-2-6\" class=\"headerlink\" title=\"Error handling (&gt;= v.2.6)\"></a>Error handling (&gt;= v.2.6)</h2><p>Currently the following error subclasses exist:</p>\n<ul>\n<li><code>RedisError</code>: <em>All errors</em> returned by the client</li>\n<li><code>ReplyError</code> subclass of <code>RedisError</code>: All errors returned by <strong>Redis</strong> itself</li>\n<li><code>AbortError</code> subclass of <code>RedisError</code>: All commands that could not finish due<br>to what ever reason</li>\n<li><code>ParserError</code> subclass of <code>RedisError</code>: Returned in case of a parser error<br>(this should not happen)</li>\n<li><code>AggregateError</code> subclass of <code>AbortError</code>: Emitted in case multiple unresolved<br>commands without callback got rejected in debug_mode instead of lots of<br><code>AbortError</code>s.</li>\n</ul>\n<p>All error classes are exported by the module.</p>\n<p>Example:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> redis = <span class=\"built_in\">require</span>(<span class=\"string\">'./'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> assert = <span class=\"built_in\">require</span>(<span class=\"string\">'assert'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> client = redis.createClient();</span><br><span class=\"line\"></span><br><span class=\"line\">client.on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    assert(err <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Error</span>);</span><br><span class=\"line\">    assert(err <span class=\"keyword\">instanceof</span> redis.AbortError);</span><br><span class=\"line\">    assert(err <span class=\"keyword\">instanceof</span> redis.AggregateError);</span><br><span class=\"line\">    <span class=\"comment\">// The set and get get aggregated in here</span></span><br><span class=\"line\">    assert.strictEqual(err.errors.length, <span class=\"number\">2</span>);</span><br><span class=\"line\">    assert.strictEqual(err.code, <span class=\"string\">'NR_CLOSED'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">client.set(<span class=\"string\">'foo'</span>, <span class=\"number\">123</span>, <span class=\"string\">'bar'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123; <span class=\"comment\">// Too many arguments</span></span><br><span class=\"line\">    assert(err <span class=\"keyword\">instanceof</span> redis.ReplyError); <span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\">    assert.strictEqual(err.command, <span class=\"string\">'SET'</span>);</span><br><span class=\"line\">    assert.deepStrictEqual(err.args, [<span class=\"string\">'foo'</span>, <span class=\"number\">123</span>, <span class=\"string\">'bar'</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    redis.debug_mode = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    client.set(<span class=\"string\">'foo'</span>, <span class=\"string\">'bar'</span>);</span><br><span class=\"line\">    client.get(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\">    process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Force closing the connection while the command did not yet return</span></span><br><span class=\"line\">        client.end(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        redis.debug_mode = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>Every <code>ReplyError</code> contains the <code>command</code> name in all-caps and the arguments (<code>args</code>).</p>\n<p>If node_redis emits a library error because of another error, the triggering<br>error is added to the returned error as <code>origin</code> attribute.</p>\n<p><strong><em>Error codes</em></strong></p>\n<p>node_redis returns a <code>NR_CLOSED</code> error code if the clients connection dropped.<br>If a command unresolved command got rejected a <code>UNCERTAIN_STATE</code> code is<br>returned. A <code>CONNECTION_BROKEN</code> error code is used in case node_redis gives up<br>to reconnect.</p>\n<h2 id=\"client-unref\"><a href=\"#client-unref\" class=\"headerlink\" title=\"client.unref()\"></a>client.unref()</h2><p>Call <code>unref()</code> on the underlying socket connection to the Redis server, allowing<br>the program to exit once no more commands are pending.</p>\n<p>This is an <strong>experimental</strong> feature, and only supports a subset of the Redis<br>protocol. Any commands where client state is saved on the Redis server, e.g.<br><code>*SUBSCRIBE</code> or the blocking <code>BL*</code> commands will <em>NOT</em> work with <code>.unref()</code>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> redis = <span class=\"built_in\">require</span>(<span class=\"string\">\"redis\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> client = redis.createClient()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    Calling unref() will allow this program to exit immediately after the get</span></span><br><span class=\"line\"><span class=\"comment\">    command finishes. Otherwise the client would hang as long as the</span></span><br><span class=\"line\"><span class=\"comment\">    client-server connection is alive.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">client.unref()</span><br><span class=\"line\">client.get(<span class=\"string\">\"foo\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, value</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span>(err)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Friendlier-hash-commands\"><a href=\"#Friendlier-hash-commands\" class=\"headerlink\" title=\"Friendlier hash commands\"></a>Friendlier hash commands</h2><p>Most Redis commands take a single String or an Array of Strings as arguments,<br>and replies are sent back as a single String or an Array of Strings. When<br>dealing with hash values, there are a couple of useful exceptions to this.</p>\n<h3 id=\"client-hgetall-hash-callback\"><a href=\"#client-hgetall-hash-callback\" class=\"headerlink\" title=\"client.hgetall(hash, callback)\"></a>client.hgetall(hash, callback)</h3><p>The reply from an HGETALL command will be converted into a JavaScript Object by<br><code>node_redis</code>. That way you can interact with the responses using JavaScript<br>syntax.</p>\n<p>Example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client.hmset(<span class=\"string\">\"hosts\"</span>, <span class=\"string\">\"mjr\"</span>, <span class=\"string\">\"1\"</span>, <span class=\"string\">\"another\"</span>, <span class=\"string\">\"23\"</span>, <span class=\"string\">\"home\"</span>, <span class=\"string\">\"1234\"</span>);</span><br><span class=\"line\">client.hgetall(<span class=\"string\">\"hosts\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.dir(obj);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Output:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">mjr</span>: <span class=\"string\">'1'</span>, <span class=\"attr\">another</span>: <span class=\"string\">'23'</span>, <span class=\"attr\">home</span>: <span class=\"string\">'1234'</span> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"client-hmset-hash-obj-callback\"><a href=\"#client-hmset-hash-obj-callback\" class=\"headerlink\" title=\"client.hmset(hash, obj[, callback])\"></a>client.hmset(hash, obj[, callback])</h3><p>Multiple values in a hash can be set by supplying an object:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client.HMSET(key2, &#123;</span><br><span class=\"line\">    <span class=\"string\">\"0123456789\"</span>: <span class=\"string\">\"abcdefghij\"</span>, <span class=\"comment\">// <span class=\"doctag\">NOTE:</span> key and value will be coerced to strings</span></span><br><span class=\"line\">    <span class=\"string\">\"some manner of key\"</span>: <span class=\"string\">\"a type of value\"</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>The properties and values of this Object will be set as keys and values in the<br>Redis hash.</p>\n<h3 id=\"client-hmset-hash-key1-val1-…-keyn-valn-callback\"><a href=\"#client-hmset-hash-key1-val1-…-keyn-valn-callback\" class=\"headerlink\" title=\"client.hmset(hash, key1, val1, … keyn, valn, [callback])\"></a>client.hmset(hash, key1, val1, … keyn, valn, [callback])</h3><p>Multiple values may also be set by supplying a list:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client.HMSET(key1, <span class=\"string\">\"0123456789\"</span>, <span class=\"string\">\"abcdefghij\"</span>, <span class=\"string\">\"some manner of key\"</span>, <span class=\"string\">\"a type of value\"</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Publish-Subscribe\"><a href=\"#Publish-Subscribe\" class=\"headerlink\" title=\"Publish / Subscribe\"></a>Publish / Subscribe</h2><p>Example of the publish / subscribe API. This program opens two<br>client connections, subscribes to a channel on one of them, and publishes to that<br>channel on the other:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> redis = <span class=\"built_in\">require</span>(<span class=\"string\">\"redis\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> sub = redis.createClient(), pub = redis.createClient();</span><br><span class=\"line\"><span class=\"keyword\">var</span> msg_count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">sub.on(<span class=\"string\">\"subscribe\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">channel, count</span>) </span>&#123;</span><br><span class=\"line\">    pub.publish(<span class=\"string\">\"a nice channel\"</span>, <span class=\"string\">\"I am sending a message.\"</span>);</span><br><span class=\"line\">    pub.publish(<span class=\"string\">\"a nice channel\"</span>, <span class=\"string\">\"I am sending a second message.\"</span>);</span><br><span class=\"line\">    pub.publish(<span class=\"string\">\"a nice channel\"</span>, <span class=\"string\">\"I am sending my last message.\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">sub.on(<span class=\"string\">\"message\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">channel, message</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"sub channel \"</span> + channel + <span class=\"string\">\": \"</span> + message);</span><br><span class=\"line\">    msg_count += <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (msg_count === <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        sub.unsubscribe();</span><br><span class=\"line\">        sub.quit();</span><br><span class=\"line\">        pub.quit();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">sub.subscribe(<span class=\"string\">\"a nice channel\"</span>);</span><br></pre></td></tr></table></figure>\n<p>When a client issues a <code>SUBSCRIBE</code> or <code>PSUBSCRIBE</code>, that connection is put into<br>a “subscriber” mode. At that point, only commands that modify the subscription<br>set are valid and quit (and depending on the redis version ping as well). When<br>the subscription set is empty, the connection is put back into regular mode.</p>\n<p>If you need to send regular commands to Redis while in subscriber mode, just<br>open another connection with a new client (hint: use <code>client.duplicate()</code>).</p>\n<h2 id=\"Subscriber-Events\"><a href=\"#Subscriber-Events\" class=\"headerlink\" title=\"Subscriber Events\"></a>Subscriber Events</h2><p>If a client has subscriptions active, it may emit these events:</p>\n<h3 id=\"“message”-channel-message\"><a href=\"#“message”-channel-message\" class=\"headerlink\" title=\"“message” (channel, message)\"></a>“message” (channel, message)</h3><p>Client will emit <code>message</code> for every message received that matches an active subscription.<br>Listeners are passed the channel name as <code>channel</code> and the message as <code>message</code>.</p>\n<h3 id=\"“pmessage”-pattern-channel-message\"><a href=\"#“pmessage”-pattern-channel-message\" class=\"headerlink\" title=\"“pmessage” (pattern, channel, message)\"></a>“pmessage” (pattern, channel, message)</h3><p>Client will emit <code>pmessage</code> for every message received that matches an active<br>subscription pattern. Listeners are passed the original pattern used with<br><code>PSUBSCRIBE</code> as <code>pattern</code>, the sending channel name as <code>channel</code>, and the<br>message as <code>message</code>.</p>\n<h3 id=\"“message-buffer”-channel-message\"><a href=\"#“message-buffer”-channel-message\" class=\"headerlink\" title=\"“message_buffer” (channel, message)\"></a>“message_buffer” (channel, message)</h3><p>This is the same as the <code>message</code> event with the exception, that it is always<br>going to emit a buffer. If you listen to the <code>message</code> event at the same time as<br>the <code>message_buffer</code>, it is always going to emit a string.</p>\n<h3 id=\"“pmessage-buffer”-pattern-channel-message\"><a href=\"#“pmessage-buffer”-pattern-channel-message\" class=\"headerlink\" title=\"“pmessage_buffer” (pattern, channel, message)\"></a>“pmessage_buffer” (pattern, channel, message)</h3><p>This is the same as the <code>pmessage</code> event with the exception, that it is always<br>going to emit a buffer. If you listen to the <code>pmessage</code> event at the same time<br>as the <code>pmessage_buffer</code>, it is always going to emit a string.</p>\n<h3 id=\"“subscribe”-channel-count\"><a href=\"#“subscribe”-channel-count\" class=\"headerlink\" title=\"“subscribe” (channel, count)\"></a>“subscribe” (channel, count)</h3><p>Client will emit <code>subscribe</code> in response to a <code>SUBSCRIBE</code> command. Listeners are<br>passed the channel name as <code>channel</code> and the new count of subscriptions for this<br>client as <code>count</code>.</p>\n<h3 id=\"“psubscribe”-pattern-count\"><a href=\"#“psubscribe”-pattern-count\" class=\"headerlink\" title=\"“psubscribe” (pattern, count)\"></a>“psubscribe” (pattern, count)</h3><p>Client will emit <code>psubscribe</code> in response to a <code>PSUBSCRIBE</code> command. Listeners<br>are passed the original pattern as <code>pattern</code>, and the new count of subscriptions<br>for this client as <code>count</code>.</p>\n<h3 id=\"“unsubscribe”-channel-count\"><a href=\"#“unsubscribe”-channel-count\" class=\"headerlink\" title=\"“unsubscribe” (channel, count)\"></a>“unsubscribe” (channel, count)</h3><p>Client will emit <code>unsubscribe</code> in response to a <code>UNSUBSCRIBE</code> command. Listeners<br>are passed the channel name as <code>channel</code> and the new count of subscriptions for<br>this client as <code>count</code>. When <code>count</code> is 0, this client has left subscriber mode<br>and no more subscriber events will be emitted.</p>\n<h3 id=\"“punsubscribe”-pattern-count\"><a href=\"#“punsubscribe”-pattern-count\" class=\"headerlink\" title=\"“punsubscribe” (pattern, count)\"></a>“punsubscribe” (pattern, count)</h3><p>Client will emit <code>punsubscribe</code> in response to a <code>PUNSUBSCRIBE</code> command.<br>Listeners are passed the channel name as <code>channel</code> and the new count of<br>subscriptions for this client as <code>count</code>. When <code>count</code> is 0, this client has<br>left subscriber mode and no more subscriber events will be emitted.</p>\n<h2 id=\"client-multi-commands\"><a href=\"#client-multi-commands\" class=\"headerlink\" title=\"client.multi([commands])\"></a>client.multi([commands])</h2><p><code>MULTI</code> commands are queued up until an <code>EXEC</code> is issued, and then all commands<br>are run atomically by Redis. The interface in <code>node_redis</code> is to return an<br>individual <code>Multi</code> object by calling <code>client.multi()</code>. If any command fails to<br>queue, all commands are rolled back and none is going to be executed (For<br>further information look at<br><a href=\"http://redis.io/topics/transactions\" target=\"_blank\" rel=\"noopener\">transactions</a>).</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> redis  = <span class=\"built_in\">require</span>(<span class=\"string\">\"./index\"</span>),</span><br><span class=\"line\">    client = redis.createClient(), set_size = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">client.sadd(<span class=\"string\">\"bigset\"</span>, <span class=\"string\">\"a member\"</span>);</span><br><span class=\"line\">client.sadd(<span class=\"string\">\"bigset\"</span>, <span class=\"string\">\"another member\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (set_size &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    client.sadd(<span class=\"string\">\"bigset\"</span>, <span class=\"string\">\"member \"</span> + set_size);</span><br><span class=\"line\">    set_size -= <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// multi chain with an individual callback</span></span><br><span class=\"line\">client.multi()</span><br><span class=\"line\">    .scard(<span class=\"string\">\"bigset\"</span>)</span><br><span class=\"line\">    .smembers(<span class=\"string\">\"bigset\"</span>)</span><br><span class=\"line\">    .keys(<span class=\"string\">\"*\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, replies</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">NOTE:</span> code in this callback is NOT atomic</span></span><br><span class=\"line\">        <span class=\"comment\">// this only happens after the the .exec call finishes.</span></span><br><span class=\"line\">        client.mget(replies, redis.print);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .dbsize()</span><br><span class=\"line\">    .exec(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, replies</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"MULTI got \"</span> + replies.length + <span class=\"string\">\" replies\"</span>);</span><br><span class=\"line\">        replies.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">reply, index</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Reply \"</span> + index + <span class=\"string\">\": \"</span> + reply.toString());</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Multi-exec-callback\"><a href=\"#Multi-exec-callback\" class=\"headerlink\" title=\"Multi.exec([callback])\"></a>Multi.exec([callback])</h3><p><code>client.multi()</code> is a constructor that returns a <code>Multi</code> object. <code>Multi</code> objects<br>share all of the same command methods as <code>client</code> objects do. Commands are<br>queued up inside the <code>Multi</code> object until <code>Multi.exec()</code> is invoked.</p>\n<p>If your code contains an syntax error an EXECABORT error is going to be thrown<br>and all commands are going to be aborted. That error contains a <code>.errors</code><br>property that contains the concrete errors.<br>If all commands were queued successfully and an error is thrown by redis while<br>processing the commands that error is going to be returned in the result array!<br>No other command is going to be aborted though than the onces failing.</p>\n<p>You can either chain together <code>MULTI</code> commands as in the above example, or you<br>can queue individual commands while still sending regular client command as in<br>this example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> redis  = <span class=\"built_in\">require</span>(<span class=\"string\">\"redis\"</span>),</span><br><span class=\"line\">    client = redis.createClient(), multi;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// start a separate multi command queue</span></span><br><span class=\"line\">multi = client.multi();</span><br><span class=\"line\">multi.incr(<span class=\"string\">\"incr thing\"</span>, redis.print);</span><br><span class=\"line\">multi.incr(<span class=\"string\">\"incr other thing\"</span>, redis.print);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// runs immediately</span></span><br><span class=\"line\">client.mset(<span class=\"string\">\"incr thing\"</span>, <span class=\"number\">100</span>, <span class=\"string\">\"incr other thing\"</span>, <span class=\"number\">1</span>, redis.print);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// drains multi queue and runs atomically</span></span><br><span class=\"line\">multi.exec(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, replies</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(replies); <span class=\"comment\">// 101, 2</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>In addition to adding commands to the <code>MULTI</code> queue individually, you can also<br>pass an array of commands and arguments to the constructor:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> redis  = <span class=\"built_in\">require</span>(<span class=\"string\">\"redis\"</span>),</span><br><span class=\"line\">    client = redis.createClient();</span><br><span class=\"line\"></span><br><span class=\"line\">client.multi([</span><br><span class=\"line\">    [<span class=\"string\">\"mget\"</span>, <span class=\"string\">\"multifoo\"</span>, <span class=\"string\">\"multibar\"</span>, redis.print],</span><br><span class=\"line\">    [<span class=\"string\">\"incr\"</span>, <span class=\"string\">\"multifoo\"</span>],</span><br><span class=\"line\">    [<span class=\"string\">\"incr\"</span>, <span class=\"string\">\"multibar\"</span>]</span><br><span class=\"line\">]).exec(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, replies</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(replies);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Multi-exec-atomic-callback\"><a href=\"#Multi-exec-atomic-callback\" class=\"headerlink\" title=\"Multi.exec_atomic([callback])\"></a>Multi.exec_atomic([callback])</h3><p>Identical to Multi.exec but with the difference that executing a single command<br>will not use transactions.</p>\n<h2 id=\"client-batch-commands\"><a href=\"#client-batch-commands\" class=\"headerlink\" title=\"client.batch([commands])\"></a>client.batch([commands])</h2><p>Identical to .multi without transactions. This is recommended if you want to<br>execute many commands at once but don’t have to rely on transactions.</p>\n<p><code>BATCH</code> commands are queued up until an <code>EXEC</code> is issued, and then all commands<br>are run atomically by Redis. The interface in <code>node_redis</code> is to return an<br>individual <code>Batch</code> object by calling <code>client.batch()</code>. The only difference<br>between .batch and .multi is that no transaction is going to be used.<br>Be aware that the errors are - just like in multi statements - in the result.<br>Otherwise both, errors and results could be returned at the same time.</p>\n<p>If you fire many commands at once this is going to boost the execution speed<br>significantly compared to firing the same commands in a loop without waiting for<br>the result! See the benchmarks for further comparison. Please remember that all<br>commands are kept in memory until they are fired.</p>\n<h2 id=\"Monitor-mode\"><a href=\"#Monitor-mode\" class=\"headerlink\" title=\"Monitor mode\"></a>Monitor mode</h2><p>Redis supports the <code>MONITOR</code> command, which lets you see all commands received<br>by the Redis server across all client connections, including from other client<br>libraries and other computers.</p>\n<p>A <code>monitor</code> event is going to be emitted for every command fired from any client<br>connected to the server including the monitoring client itself. The callback for<br>the <code>monitor</code> event takes a timestamp from the Redis server, an array of command<br>arguments and the raw monitoring string.</p>\n<p>Example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> client  = <span class=\"built_in\">require</span>(<span class=\"string\">\"redis\"</span>).createClient();</span><br><span class=\"line\">client.monitor(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Entering monitoring mode.\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">client.set(<span class=\"string\">'foo'</span>, <span class=\"string\">'bar'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">client.on(<span class=\"string\">\"monitor\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">time, args, raw_reply</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(time + <span class=\"string\">\": \"</span> + args); <span class=\"comment\">// 1458910076.446514:['set', 'foo', 'bar']</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"Extras\"><a href=\"#Extras\" class=\"headerlink\" title=\"Extras\"></a>Extras</h1><p>Some other things you might like to know about.</p>\n<h2 id=\"client-server-info\"><a href=\"#client-server-info\" class=\"headerlink\" title=\"client.server_info\"></a>client.server_info</h2><p>After the ready probe completes, the results from the INFO command are saved in<br>the <code>client.server_info</code> object.</p>\n<p>The <code>versions</code> key contains an array of the elements of the version string for<br>easy comparison.</p>\n<pre><code>&gt; client.server_info.redis_version\n&apos;2.3.0&apos;\n&gt; client.server_info.versions\n[ 2, 3, 0 ]\n</code></pre><h2 id=\"redis-print\"><a href=\"#redis-print\" class=\"headerlink\" title=\"redis.print()\"></a>redis.print()</h2><p>A handy callback function for displaying return values when testing. Example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> redis = <span class=\"built_in\">require</span>(<span class=\"string\">\"redis\"</span>),</span><br><span class=\"line\">    client = redis.createClient();</span><br><span class=\"line\"></span><br><span class=\"line\">client.on(<span class=\"string\">\"connect\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    client.set(<span class=\"string\">\"foo_rand000000000000\"</span>, <span class=\"string\">\"some fantastic value\"</span>, redis.print);</span><br><span class=\"line\">    client.get(<span class=\"string\">\"foo_rand000000000000\"</span>, redis.print);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>This will print:</p>\n<pre><code>Reply: OK\nReply: some fantastic value\n</code></pre><p>Note that this program will not exit cleanly because the client is still connected.</p>\n<h2 id=\"Multi-word-commands\"><a href=\"#Multi-word-commands\" class=\"headerlink\" title=\"Multi-word commands\"></a>Multi-word commands</h2><p>To execute redis multi-word commands like <code>SCRIPT LOAD</code> or <code>CLIENT LIST</code> pass<br>the second word as first parameter:</p>\n<pre><code>client.script(&apos;load&apos;, &apos;return 1&apos;);\nclient.multi().script(&apos;load&apos;, &apos;return 1&apos;).exec(...);\nclient.multi([[&apos;script&apos;, &apos;load&apos;, &apos;return 1&apos;]]).exec(...);\n</code></pre><h2 id=\"client-duplicate-options-callback\"><a href=\"#client-duplicate-options-callback\" class=\"headerlink\" title=\"client.duplicate([options][, callback])\"></a>client.duplicate([options][, callback])</h2><p>Duplicate all current options and return a new redisClient instance. All options<br>passed to the duplicate function are going to replace the original option. If<br>you pass a callback, duplicate is going to wait until the client is ready and<br>returns it in the callback. If an error occurs in the meanwhile, that is going<br>to return an error instead in the callback.</p>\n<p>One example of when to use duplicate() would be to accommodate the connection-<br>blocking redis commands BRPOP, BLPOP, and BRPOPLPUSH.  If these commands<br>are used on the same redisClient instance as non-blocking commands, the<br>non-blocking ones may be queued up until after the blocking ones finish.</p>\n<pre><code>var Redis=require(&apos;redis&apos;);\nvar client = Redis.createClient();\nvar clientBlocking = client.duplicate();\n\nvar get = function() {\n    console.log(&quot;get called&quot;);\n    client.get(&quot;any_key&quot;,function() { console.log(&quot;get returned&quot;); });\n    setTimeout( get, 1000 );\n};\nvar brpop = function() {\n    console.log(&quot;brpop called&quot;);\n    clientBlocking.brpop(&quot;nonexistent&quot;, 5, function() {\n        console.log(&quot;brpop return&quot;);\n        setTimeout( brpop, 1000 );\n    });\n};\nget();\nbrpop();\n</code></pre><p>Another reason to use duplicate() is when multiple DBs on the same server are<br>accessed via the redis SELECT command.  Each DB could use its own connection.</p>\n<h2 id=\"client-send-command-command-name-args-callback\"><a href=\"#client-send-command-command-name-args-callback\" class=\"headerlink\" title=\"client.send_command(command_name[, [args][, callback]])\"></a>client.send_command(command_name[, [args][, callback]])</h2><p>All Redis commands have been added to the <code>client</code> object. However, if new<br>commands are introduced before this library is updated or if you want to add<br>individual commands you can use <code>send_command()</code> to send arbitrary commands to<br>Redis.</p>\n<p>All commands are sent as multi-bulk commands. <code>args</code> can either be an Array of<br>arguments, or omitted / set to undefined.</p>\n<h2 id=\"client-add-command-command-name\"><a href=\"#client-add-command-command-name\" class=\"headerlink\" title=\"client.add_command(command_name)\"></a>client.add_command(command_name)</h2><p>Calling add_command will add a new command to the prototype. The exact command<br>name will be used when calling using this new command. Using arbitrary arguments<br>is possible as with any other command.</p>\n<h2 id=\"client-connected\"><a href=\"#client-connected\" class=\"headerlink\" title=\"client.connected\"></a>client.connected</h2><p>Boolean tracking the state of the connection to the Redis server.</p>\n<h2 id=\"client-command-queue-length\"><a href=\"#client-command-queue-length\" class=\"headerlink\" title=\"client.command_queue_length\"></a>client.command_queue_length</h2><p>The number of commands that have been sent to the Redis server but not yet<br>replied to. You can use this to enforce some kind of maximum queue depth for<br>commands while connected.</p>\n<h2 id=\"client-offline-queue-length\"><a href=\"#client-offline-queue-length\" class=\"headerlink\" title=\"client.offline_queue_length\"></a>client.offline_queue_length</h2><p>The number of commands that have been queued up for a future connection. You can<br>use this to enforce some kind of maximum queue depth for pre-connection<br>commands.</p>\n<h3 id=\"Commands-with-Optional-and-Keyword-arguments\"><a href=\"#Commands-with-Optional-and-Keyword-arguments\" class=\"headerlink\" title=\"Commands with Optional and Keyword arguments\"></a>Commands with Optional and Keyword arguments</h3><p>This applies to anything that uses an optional <code>[WITHSCORES]</code> or <code>[LIMIT offset\ncount]</code> in the <a href=\"http://redis.io/commands\" target=\"_blank\" rel=\"noopener\">redis.io/commands</a> documentation.</p>\n<p>Example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> args = [ <span class=\"string\">'myzset'</span>, <span class=\"number\">1</span>, <span class=\"string\">'one'</span>, <span class=\"number\">2</span>, <span class=\"string\">'two'</span>, <span class=\"number\">3</span>, <span class=\"string\">'three'</span>, <span class=\"number\">99</span>, <span class=\"string\">'ninety-nine'</span> ];</span><br><span class=\"line\">client.zadd(args, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, response</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'added '</span>+response+<span class=\"string\">' items.'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// -Infinity and +Infinity also work</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> args1 = [ <span class=\"string\">'myzset'</span>, <span class=\"string\">'+inf'</span>, <span class=\"string\">'-inf'</span> ];</span><br><span class=\"line\">    client.zrevrangebyscore(args1, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, response</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'example1'</span>, response);</span><br><span class=\"line\">        <span class=\"comment\">// write your code here</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> max = <span class=\"number\">3</span>, min = <span class=\"number\">1</span>, offset = <span class=\"number\">1</span>, count = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> args2 = [ <span class=\"string\">'myzset'</span>, max, min, <span class=\"string\">'WITHSCORES'</span>, <span class=\"string\">'LIMIT'</span>, offset, count ];</span><br><span class=\"line\">    client.zrevrangebyscore(args2, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, response</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'example2'</span>, response);</span><br><span class=\"line\">        <span class=\"comment\">// write your code here</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Performance\"><a href=\"#Performance\" class=\"headerlink\" title=\"Performance\"></a>Performance</h2><p>Much effort has been spent to make <code>node_redis</code> as fast as possible for common<br>operations.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Lenovo T450s, i7-5600U and 12gb memory</span><br><span class=\"line\">clients: 1, NodeJS: 6.2.0, Redis: 3.2.0, parser: javascript, connected by: tcp</span><br><span class=\"line\">         PING,         1/1 avg/max:   0.02/  5.26 2501ms total,   46916 ops/sec</span><br><span class=\"line\">         PING,  batch 50/1 avg/max:   0.06/  4.35 2501ms total,  755178 ops/sec</span><br><span class=\"line\">   SET 4B str,         1/1 avg/max:   0.02/  4.75 2501ms total,   40856 ops/sec</span><br><span class=\"line\">   SET 4B str,  batch 50/1 avg/max:   0.11/  1.51 2501ms total,  432727 ops/sec</span><br><span class=\"line\">   SET 4B buf,         1/1 avg/max:   0.05/  2.76 2501ms total,   20659 ops/sec</span><br><span class=\"line\">   SET 4B buf,  batch 50/1 avg/max:   0.25/  1.76 2501ms total,  194962 ops/sec</span><br><span class=\"line\">   GET 4B str,         1/1 avg/max:   0.02/  1.55 2501ms total,   45156 ops/sec</span><br><span class=\"line\">   GET 4B str,  batch 50/1 avg/max:   0.09/  3.15 2501ms total,  524110 ops/sec</span><br><span class=\"line\">   GET 4B buf,         1/1 avg/max:   0.02/  3.07 2501ms total,   44563 ops/sec</span><br><span class=\"line\">   GET 4B buf,  batch 50/1 avg/max:   0.10/  3.18 2501ms total,  473171 ops/sec</span><br><span class=\"line\"> SET 4KiB str,         1/1 avg/max:   0.03/  1.54 2501ms total,   32627 ops/sec</span><br><span class=\"line\"> SET 4KiB str,  batch 50/1 avg/max:   0.34/  1.89 2501ms total,  146861 ops/sec</span><br><span class=\"line\"> SET 4KiB buf,         1/1 avg/max:   0.05/  2.85 2501ms total,   20688 ops/sec</span><br><span class=\"line\"> SET 4KiB buf,  batch 50/1 avg/max:   0.36/  1.83 2501ms total,  138165 ops/sec</span><br><span class=\"line\"> GET 4KiB str,         1/1 avg/max:   0.02/  1.37 2501ms total,   39389 ops/sec</span><br><span class=\"line\"> GET 4KiB str,  batch 50/1 avg/max:   0.24/  1.81 2501ms total,  208157 ops/sec</span><br><span class=\"line\"> GET 4KiB buf,         1/1 avg/max:   0.02/  2.63 2501ms total,   39918 ops/sec</span><br><span class=\"line\"> GET 4KiB buf,  batch 50/1 avg/max:   0.31/  8.56 2501ms total,  161575 ops/sec</span><br><span class=\"line\">         INCR,         1/1 avg/max:   0.02/  4.69 2501ms total,   45685 ops/sec</span><br><span class=\"line\">         INCR,  batch 50/1 avg/max:   0.09/  3.06 2501ms total,  539964 ops/sec</span><br><span class=\"line\">        LPUSH,         1/1 avg/max:   0.02/  3.04 2501ms total,   41253 ops/sec</span><br><span class=\"line\">        LPUSH,  batch 50/1 avg/max:   0.12/  1.94 2501ms total,  425090 ops/sec</span><br><span class=\"line\">    LRANGE 10,         1/1 avg/max:   0.02/  2.28 2501ms total,   39850 ops/sec</span><br><span class=\"line\">    LRANGE 10,  batch 50/1 avg/max:   0.25/  1.85 2501ms total,  194302 ops/sec</span><br><span class=\"line\">   LRANGE 100,         1/1 avg/max:   0.05/  2.93 2501ms total,   21026 ops/sec</span><br><span class=\"line\">   LRANGE 100,  batch 50/1 avg/max:   1.52/  2.89 2501ms total,   32767 ops/sec</span><br><span class=\"line\"> SET 4MiB str,         1/1 avg/max:   5.16/ 15.55 2502ms total,     193 ops/sec</span><br><span class=\"line\"> SET 4MiB str,  batch 20/1 avg/max:  89.73/ 99.96 2513ms total,     223 ops/sec</span><br><span class=\"line\"> SET 4MiB buf,         1/1 avg/max:   2.23/  8.35 2501ms total,     446 ops/sec</span><br><span class=\"line\"> SET 4MiB buf,  batch 20/1 avg/max:  41.47/ 50.91 2530ms total,     482 ops/sec</span><br><span class=\"line\"> GET 4MiB str,         1/1 avg/max:   2.79/ 10.91 2502ms total,     358 ops/sec</span><br><span class=\"line\"> GET 4MiB str,  batch 20/1 avg/max: 101.61/118.11 2541ms total,     197 ops/sec</span><br><span class=\"line\"> GET 4MiB buf,         1/1 avg/max:   2.32/ 14.93 2502ms total,     430 ops/sec</span><br><span class=\"line\"> GET 4MiB buf,  batch 20/1 avg/max:  65.01/ 84.72 2536ms total,     308 ops/sec</span><br></pre></td></tr></table></figure>\n<h2 id=\"Debugging\"><a href=\"#Debugging\" class=\"headerlink\" title=\"Debugging\"></a>Debugging</h2><p>To get debug output run your <code>node_redis</code> application with <code>NODE_DEBUG=redis</code>.</p>\n<p>This is also going to result in good stack traces opposed to useless ones<br>otherwise for any async operation.<br>If you only want to have good stack traces but not the debug output run your<br>application in development mode instead (<code>NODE_ENV=development</code>).</p>\n<p>Good stack traces are only activated in development and debug mode as this<br>results in a significant performance penalty.</p>\n<p><strong><em>Comparison</em></strong>:<br>Useless stack trace:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReplyError: ERR wrong number of arguments for &apos;set&apos; command</span><br><span class=\"line\">    at parseError (/home/ruben/repos/redis/node_modules/redis-parser/lib/parser.js:158:12)</span><br><span class=\"line\">    at parseType (/home/ruben/repos/redis/node_modules/redis-parser/lib/parser.js:219:14)</span><br></pre></td></tr></table></figure></p>\n<p>Good stack trace:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReplyError: ERR wrong number of arguments for &apos;set&apos; command</span><br><span class=\"line\">    at new Command (/home/ruben/repos/redis/lib/command.js:9:902)</span><br><span class=\"line\">    at RedisClient.set (/home/ruben/repos/redis/lib/commands.js:9:3238)</span><br><span class=\"line\">    at Context.&lt;anonymous&gt; (/home/ruben/repos/redis/test/good_stacks.spec.js:20:20)</span><br><span class=\"line\">    at callFnAsync (/home/ruben/repos/redis/node_modules/mocha/lib/runnable.js:349:8)</span><br><span class=\"line\">    at Test.Runnable.run (/home/ruben/repos/redis/node_modules/mocha/lib/runnable.js:301:7)</span><br><span class=\"line\">    at Runner.runTest (/home/ruben/repos/redis/node_modules/mocha/lib/runner.js:422:10)</span><br><span class=\"line\">    at /home/ruben/repos/redis/node_modules/mocha/lib/runner.js:528:12</span><br><span class=\"line\">    at next (/home/ruben/repos/redis/node_modules/mocha/lib/runner.js:342:14)</span><br><span class=\"line\">    at /home/ruben/repos/redis/node_modules/mocha/lib/runner.js:352:7</span><br><span class=\"line\">    at next (/home/ruben/repos/redis/node_modules/mocha/lib/runner.js:284:14)</span><br><span class=\"line\">    at Immediate._onImmediate (/home/ruben/repos/redis/node_modules/mocha/lib/runner.js:320:5)</span><br><span class=\"line\">    at processImmediate [as _immediateCallback] (timers.js:383:17)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"How-to-Contribute\"><a href=\"#How-to-Contribute\" class=\"headerlink\" title=\"How to Contribute\"></a>How to Contribute</h2><ul>\n<li>Open a pull request or an issue about what you want to implement / change. We’re glad for any help!<ul>\n<li>Please be aware that we’ll only accept fully tested code.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Contributors\"><a href=\"#Contributors\" class=\"headerlink\" title=\"Contributors\"></a>Contributors</h2><p>The original author of node_redis is <a href=\"https://github.com/mranney\" target=\"_blank\" rel=\"noopener\">Matthew Ranney</a></p>\n<p>The current lead maintainer is <a href=\"https://github.com/BridgeAR\" target=\"_blank\" rel=\"noopener\">Ruben Bridgewater</a></p>\n<p>Many <a href=\"https://github.com/NodeRedis/node_redis/graphs/contributors\" target=\"_blank\" rel=\"noopener\">others</a><br>contributed to <code>node_redis</code> too. Thanks to all of them!</p>\n<h2 id=\"License\"><a href=\"#License\" class=\"headerlink\" title=\"License\"></a>License</h2><p><a href=\"LICENSE\">MIT</a></p>\n<h3 id=\"Consolidation-It’s-time-for-celebration\"><a href=\"#Consolidation-It’s-time-for-celebration\" class=\"headerlink\" title=\"Consolidation: It’s time for celebration\"></a>Consolidation: It’s time for celebration</h3><p>Right now there are two great redis clients around and both have some advantages<br>above each other. We speak about ioredis and node_redis. So after talking to<br>each other about how we could improve in working together we (that is @luin and<br>@BridgeAR) decided to work towards a single library on the long run. But step by<br>step.</p>\n<p>First of all, we want to split small parts of our libraries into others so that<br>we’re both able to use the same code. Those libraries are going to be maintained<br>under the NodeRedis organization. This is going to reduce the maintenance<br>overhead, allows others to use the very same code, if they need it and it’s way<br>easyer for others to contribute to both libraries.</p>\n<p>We’re very happy about this step towards working together as we both want to<br>give you the best redis experience possible.</p>\n<p>If you want to join our cause by help maintaining something, please don’t<br>hesitate to contact either one of us.</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"redis-a-node-js-redis-client\"><a href=\"#redis-a-node-js-redis-client\" class=\"headerlink\" title=\"redis - a node.js redis client\"></a>redis - a node.js redis client</h1><p><a href=\"https://travis-ci.org/NodeRedis/node_redis\" target=\"_blank\" rel=\"noopener\"><img src=\"https://travis-ci.org/NodeRedis/node_redis.svg?branch=master\" alt=\"Build Status\"></a><br><a href=\"https://coveralls.io/r/NodeRedis/node_redis?branch=\" target=\"_blank\" rel=\"noopener\"><img src=\"https://coveralls.io/repos/NodeRedis/node_redis/badge.svg?branch=\" alt=\"Coverage Status\"></a><br><a href=\"https://ci.appveyor.com/project/BridgeAR/node-redis/branch/master\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/appveyor/ci/BridgeAR/node-redis/master.svg?label=Windows%20Tests\" alt=\"Windows Tests\"></a><br><a href=\"https://gitter.im/NodeRedis/node_redis?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge\" target=\"_blank\" rel=\"noopener\"><img src=\"https://badges.gitter.im/Join%20Chat.svg\" alt=\"Gitter\"></a></p>\n<p>This is a complete and feature rich Redis client for node.js. <strong>It supports all<br>Redis commands</strong> and focuses on high performance.</p>","more":"<p>Install with:</p>\n<pre><code>npm install redis\n</code></pre><h2 id=\"Usage-Example\"><a href=\"#Usage-Example\" class=\"headerlink\" title=\"Usage Example\"></a>Usage Example</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> redis = <span class=\"built_in\">require</span>(<span class=\"string\">\"redis\"</span>),</span><br><span class=\"line\">    client = redis.createClient();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// if you'd like to select database 3, instead of 0 (default), call</span></span><br><span class=\"line\"><span class=\"comment\">// client.select(3, function() &#123; /* ... */ &#125;);</span></span><br><span class=\"line\"></span><br><span class=\"line\">client.on(<span class=\"string\">\"error\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Error \"</span> + err);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">client.set(<span class=\"string\">\"string key\"</span>, <span class=\"string\">\"string val\"</span>, redis.print);</span><br><span class=\"line\">client.hset(<span class=\"string\">\"hash key\"</span>, <span class=\"string\">\"hashtest 1\"</span>, <span class=\"string\">\"some value\"</span>, redis.print);</span><br><span class=\"line\">client.hset([<span class=\"string\">\"hash key\"</span>, <span class=\"string\">\"hashtest 2\"</span>, <span class=\"string\">\"some other value\"</span>], redis.print);</span><br><span class=\"line\">client.hkeys(<span class=\"string\">\"hash key\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, replies</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(replies.length + <span class=\"string\">\" replies:\"</span>);</span><br><span class=\"line\">    replies.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">reply, i</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"    \"</span> + i + <span class=\"string\">\": \"</span> + reply);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    client.quit();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>This will display:</p>\n<pre><code>mjr:~/work/node_redis (master)$ node example.js\nReply: OK\nReply: 0\nReply: 0\n2 replies:\n    0: hashtest 1\n    1: hashtest 2\nmjr:~/work/node_redis (master)$\n</code></pre><p>Note that the API is entirely asynchronous. To get data back from the server,<br>you’ll need to use a callback. From v.2.6 on the API supports camelCase and<br>snake_case and all options / variables / events etc. can be used either way. It<br>is recommended to use camelCase as this is the default for the Node.js<br>landscape.</p>\n<h3 id=\"Promises\"><a href=\"#Promises\" class=\"headerlink\" title=\"Promises\"></a>Promises</h3><p>You can also use node_redis with promises by promisifying node_redis with<br><a href=\"https://github.com/petkaantonov/bluebird\" target=\"_blank\" rel=\"noopener\">bluebird</a> as in:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> redis = <span class=\"built_in\">require</span>(<span class=\"string\">'redis'</span>);</span><br><span class=\"line\">bluebird.promisifyAll(redis.RedisClient.prototype);</span><br><span class=\"line\">bluebird.promisifyAll(redis.Multi.prototype);</span><br></pre></td></tr></table></figure>\n<p>It’ll add a <em>Async</em> to all node_redis functions (e.g. return client.getAsync().then())</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// We expect a value 'foo': 'bar' to be present</span></span><br><span class=\"line\"><span class=\"comment\">// So instead of writing client.get('foo', cb); you have to write:</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> client.getAsync(<span class=\"string\">'foo'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res); <span class=\"comment\">// =&gt; 'bar'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Using multi with promises looks like:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> client.multi().get(<span class=\"string\">'foo'</span>).execAsync().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res); <span class=\"comment\">// =&gt; 'bar'</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Sending-Commands\"><a href=\"#Sending-Commands\" class=\"headerlink\" title=\"Sending Commands\"></a>Sending Commands</h3><p>Each Redis command is exposed as a function on the <code>client</code> object.<br>All functions take either an <code>args</code> Array plus optional <code>callback</code> Function or<br>a variable number of individual arguments followed by an optional callback.<br>Examples:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client.hmset([<span class=\"string\">\"key\"</span>, <span class=\"string\">\"test keys 1\"</span>, <span class=\"string\">\"test val 1\"</span>, <span class=\"string\">\"test keys 2\"</span>, <span class=\"string\">\"test val 2\"</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;&#125;);</span><br><span class=\"line\"><span class=\"comment\">// Works the same as</span></span><br><span class=\"line\">client.hmset(<span class=\"string\">\"key\"</span>, [<span class=\"string\">\"test keys 1\"</span>, <span class=\"string\">\"test val 1\"</span>, <span class=\"string\">\"test keys 2\"</span>, <span class=\"string\">\"test val 2\"</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;&#125;);</span><br><span class=\"line\"><span class=\"comment\">// Or</span></span><br><span class=\"line\">client.hmset(<span class=\"string\">\"key\"</span>, <span class=\"string\">\"test keys 1\"</span>, <span class=\"string\">\"test val 1\"</span>, <span class=\"string\">\"test keys 2\"</span>, <span class=\"string\">\"test val 2\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure>\n<p>Care should be taken with user input if arrays are possible (via body-parser, query string or other method), as single arguments could be unintentionally interpreted as multiple args.</p>\n<p>Note that in either form the <code>callback</code> is optional:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client.set(<span class=\"string\">\"some key\"</span>, <span class=\"string\">\"some val\"</span>);</span><br><span class=\"line\">client.set([<span class=\"string\">\"some other key\"</span>, <span class=\"string\">\"some val\"</span>]);</span><br></pre></td></tr></table></figure>\n<p>If the key is missing, reply will be null. Only if the <a href=\"http://redis.io/commands\" target=\"_blank\" rel=\"noopener\">Redis Command<br>Reference</a> states something else it will not be null.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client.get(<span class=\"string\">\"missingkey\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, reply</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// reply is null when the key is missing</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(reply);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>For a list of Redis commands, see <a href=\"http://redis.io/commands\" target=\"_blank\" rel=\"noopener\">Redis Command Reference</a></p>\n<p>Minimal parsing is done on the replies. Commands that return a integer return<br>JavaScript Numbers, arrays return JavaScript Array. <code>HGETALL</code> returns an Object<br>keyed by the hash keys. All strings will either be returned as string or as<br>buffer depending on your setting. Please be aware that sending null, undefined<br>and Boolean values will result in the value coerced to a string!</p>\n<h1 id=\"Redis-Commands\"><a href=\"#Redis-Commands\" class=\"headerlink\" title=\"Redis Commands\"></a>Redis Commands</h1><p>This library is a 1 to 1 mapping to <a href=\"https://redis.io/commands\" target=\"_blank\" rel=\"noopener\">Redis commands</a>.<br>It is not a cache library so please refer to Redis commands page for full usage<br>details.</p>\n<p>Example setting key to auto expire using <a href=\"https://redis.io/commands/set\" target=\"_blank\" rel=\"noopener\">SET command</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// this key will expire after 10 seconds</span></span><br><span class=\"line\">client.set(<span class=\"string\">'key'</span>, <span class=\"string\">'value!'</span>, <span class=\"string\">'EX'</span>, <span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<h1 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h1><h2 id=\"Connection-and-other-Events\"><a href=\"#Connection-and-other-Events\" class=\"headerlink\" title=\"Connection and other Events\"></a>Connection and other Events</h2><p><code>client</code> will emit some events about the state of the connection to the Redis server.</p>\n<h3 id=\"“ready”\"><a href=\"#“ready”\" class=\"headerlink\" title=\"“ready”\"></a>“ready”</h3><p><code>client</code> will emit <code>ready</code> once a connection is established. Commands issued<br>before the <code>ready</code> event are queued, then replayed just before this event is<br>emitted.</p>\n<h3 id=\"“connect”\"><a href=\"#“connect”\" class=\"headerlink\" title=\"“connect”\"></a>“connect”</h3><p><code>client</code> will emit <code>connect</code> as soon as the stream is connected to the server.</p>\n<h3 id=\"“reconnecting”\"><a href=\"#“reconnecting”\" class=\"headerlink\" title=\"“reconnecting”\"></a>“reconnecting”</h3><p><code>client</code> will emit <code>reconnecting</code> when trying to reconnect to the Redis server<br>after losing the connection. Listeners are passed an object containing <code>delay</code><br>(in ms) and <code>attempt</code> (the attempt #) attributes.</p>\n<h3 id=\"“error”\"><a href=\"#“error”\" class=\"headerlink\" title=\"“error”\"></a>“error”</h3><p><code>client</code> will emit <code>error</code> when encountering an error connecting to the Redis<br>server or when any other in node_redis occurs. If you use a command without<br>callback and encounter a ReplyError it is going to be emitted to the error<br>listener.</p>\n<p>So please attach the error listener to node_redis.</p>\n<h3 id=\"“end”\"><a href=\"#“end”\" class=\"headerlink\" title=\"“end”\"></a>“end”</h3><p><code>client</code> will emit <code>end</code> when an established Redis server connection has closed.</p>\n<h3 id=\"“drain”-deprecated\"><a href=\"#“drain”-deprecated\" class=\"headerlink\" title=\"“drain” (deprecated)\"></a>“drain” (deprecated)</h3><p><code>client</code> will emit <code>drain</code> when the TCP connection to the Redis server has been<br>buffering, but is now writable. This event can be used to stream commands in to<br>Redis and adapt to backpressure.</p>\n<p>If the stream is buffering <code>client.should_buffer</code> is set to true. Otherwise the<br>variable is always set to false. That way you can decide when to reduce your<br>send rate and resume sending commands when you get <code>drain</code>.</p>\n<p>You can also check the return value of each command as it will also return the<br>backpressure indicator (deprecated). If false is returned the stream had to<br>buffer.</p>\n<h3 id=\"“warning”\"><a href=\"#“warning”\" class=\"headerlink\" title=\"“warning”\"></a>“warning”</h3><p><code>client</code> will emit <code>warning</code> when password was set but none is needed and if a<br>deprecated option / function / similar is used.</p>\n<h3 id=\"“idle”-deprecated\"><a href=\"#“idle”-deprecated\" class=\"headerlink\" title=\"“idle” (deprecated)\"></a>“idle” (deprecated)</h3><p><code>client</code> will emit <code>idle</code> when there are no outstanding commands that are<br>awaiting a response.</p>\n<h2 id=\"redis-createClient\"><a href=\"#redis-createClient\" class=\"headerlink\" title=\"redis.createClient()\"></a>redis.createClient()</h2><p>If you have <code>redis-server</code> running on the same machine as node, then the<br>defaults for port and host are probably fine and you don’t need to supply any<br>arguments. <code>createClient()</code> returns a <code>RedisClient</code> object. Otherwise,<br><code>createClient()</code> accepts these arguments:</p>\n<ul>\n<li><code>redis.createClient([options])</code></li>\n<li><code>redis.createClient(unix_socket[, options])</code></li>\n<li><code>redis.createClient(redis_url[, options])</code></li>\n<li><code>redis.createClient(port[, host][, options])</code></li>\n</ul>\n<p><strong>Tip:</strong> If the Redis server runs on the same machine as the client consider<br>using unix sockets if possible to increase throughput.</p>\n<h4 id=\"options-object-properties\"><a href=\"#options-object-properties\" class=\"headerlink\" title=\"options object properties\"></a><code>options</code> object properties</h4><table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>host</td>\n<td>127.0.0.1</td>\n<td>IP address of the Redis server</td>\n</tr>\n<tr>\n<td>port</td>\n<td>6379</td>\n<td>Port of the Redis server</td>\n</tr>\n<tr>\n<td>path</td>\n<td>null</td>\n<td>The UNIX socket string of the Redis server</td>\n</tr>\n<tr>\n<td>url</td>\n<td>null</td>\n<td>The URL of the Redis server. Format: <code>[redis:]//[[user][:password@]][host][:port][/db-number][?db=db-number[&amp;password=bar[&amp;option=value]]]</code> (More info avaliable at <a href=\"http://www.iana.org/assignments/uri-schemes/prov/redis\" target=\"_blank\" rel=\"noopener\">IANA</a>).</td>\n</tr>\n<tr>\n<td>parser</td>\n<td>javascript</td>\n<td><strong>Deprecated</strong> Use either the built-in JS parser <a href><code>javascript</code></a> or the native <a href><code>hiredis</code></a> parser. <strong>Note</strong> <code>node_redis</code> &lt; 2.6 uses hiredis as default if installed. This changed in v.2.6.0.</td>\n</tr>\n<tr>\n<td>string_numbers</td>\n<td>null</td>\n<td>Set to <code>true</code>, <code>node_redis</code> will return Redis number values as Strings instead of javascript Numbers. Useful if you need to handle big numbers (above <code>Number.MAX_SAFE_INTEGER === 2^53</code>). Hiredis is incapable of this behavior, so setting this option to <code>true</code> will result in the built-in javascript parser being used no matter the value of the <code>parser</code> option.</td>\n</tr>\n<tr>\n<td>return_buffers</td>\n<td>false</td>\n<td>If set to <code>true</code>, then all replies will be sent to callbacks as Buffers instead of Strings.</td>\n</tr>\n<tr>\n<td>detect_buffers</td>\n<td>false</td>\n<td>If set to <code>true</code>, then replies will be sent to callbacks as Buffers. This option lets you switch between Buffers and Strings on a per-command basis, whereas <code>return_buffers</code> applies to every command on a client. <strong>Note</strong>: This doesn’t work properly with the pubsub mode. A subscriber has to either always return Strings or Buffers.</td>\n</tr>\n<tr>\n<td>socket_keepalive</td>\n<td>true</td>\n<td>If set to <code>true</code>, the keep-alive functionality is enabled on the underlying socket.</td>\n</tr>\n<tr>\n<td>no_ready_check</td>\n<td>false</td>\n<td>When a connection is established to the Redis server, the server might still be loading the database from disk. While loading, the server will not respond to any commands. To work around this, <code>node_redis</code> has a “ready check” which sends the <code>INFO</code> command to the server. The response from the <code>INFO</code> command indicates whether the server is ready for more commands. When ready, <code>node_redis</code> emits a <code>ready</code> event. Setting <code>no_ready_check</code> to <code>true</code> will inhibit this check.</td>\n</tr>\n<tr>\n<td>enable_offline_queue</td>\n<td>true</td>\n<td>By default, if there is no active connection to the Redis server, commands are added to a queue and are executed once the connection has been established. Setting <code>enable_offline_queue</code> to <code>false</code> will disable this feature and the callback will be executed immediately with an error, or an error will be emitted if no callback is specified.</td>\n</tr>\n<tr>\n<td>retry_max_delay</td>\n<td>null</td>\n<td><strong>Deprecated</strong> _Please use <code>retry_strategy</code> instead._ By default, every time the client tries to connect and fails, the reconnection delay almost doubles. This delay normally grows infinitely, but setting <code>retry_max_delay</code> limits it to the maximum value provided in milliseconds.</td>\n</tr>\n<tr>\n<td>connect_timeout</td>\n<td>3600000</td>\n<td><strong>Deprecated</strong> _Please use <code>retry_strategy</code> instead._ Setting <code>connect_timeout</code> limits the total time for the client to connect and reconnect. The value is provided in milliseconds and is counted from the moment a new client is created or from the time the connection is lost. The last retry is going to happen exactly at the timeout time. Default is to try connecting until the default system socket timeout has been exceeded and to try reconnecting until 1h has elapsed.</td>\n</tr>\n<tr>\n<td>max_attempts</td>\n<td>0</td>\n<td><strong>Deprecated</strong> _Please use <code>retry_strategy</code> instead._ By default, a client will try reconnecting until connected. Setting <code>max_attempts</code> limits total amount of connection attempts. Setting this to 1 will prevent any reconnect attempt.</td>\n</tr>\n<tr>\n<td>retry_unfulfilled_commands</td>\n<td>false</td>\n<td>If set to <code>true</code>, all commands that were unfulfilled while the connection is lost will be retried after the connection has been reestablished. Use this with caution if you use state altering commands (e.g. <code>incr</code>). This is especially useful if you use blocking commands.</td>\n</tr>\n<tr>\n<td>password</td>\n<td>null</td>\n<td>If set, client will run Redis auth command on connect. Alias <code>auth_pass</code> <strong>Note</strong> <code>node_redis</code> &lt; 2.5 must use <code>auth_pass</code></td>\n</tr>\n<tr>\n<td>db</td>\n<td>null</td>\n<td>If set, client will run Redis <code>select</code> command on connect.</td>\n</tr>\n<tr>\n<td>family</td>\n<td>IPv4</td>\n<td>You can force using IPv6 if you set the family to ‘IPv6’. See Node.js <a href=\"https://nodejs.org/api/net.html\" target=\"_blank\" rel=\"noopener\">net</a> or <a href=\"https://nodejs.org/api/dns.html\" target=\"_blank\" rel=\"noopener\">dns</a> modules on how to use the family type.</td>\n</tr>\n<tr>\n<td>disable_resubscribing</td>\n<td>false</td>\n<td>If set to <code>true</code>, a client won’t resubscribe after disconnecting.</td>\n</tr>\n<tr>\n<td>rename_commands</td>\n<td>null</td>\n<td>Passing an object with renamed commands to use instead of the original functions. For example, if you renamed the command KEYS to “DO-NOT-USE” then the rename_commands object would be: <code>{ KEYS : &quot;DO-NOT-USE&quot; }</code> . See the <a href=\"http://redis.io/topics/security\" target=\"_blank\" rel=\"noopener\">Redis security topics</a> for more info.</td>\n</tr>\n<tr>\n<td>tls</td>\n<td>null</td>\n<td>An object containing options to pass to <a href=\"http://nodejs.org/api/tls.html#tls_tls_connect_port_host_options_callback\" target=\"_blank\" rel=\"noopener\">tls.connect</a> to set up a TLS connection to Redis (if, for example, it is set up to be accessible via a tunnel).</td>\n</tr>\n<tr>\n<td>prefix</td>\n<td>null</td>\n<td>A string used to prefix all used keys (e.g. <code>namespace:test</code>). Please be aware that the <code>keys</code> command will not be prefixed. The <code>keys</code> command has a “pattern” as argument and no key and it would be impossible to determine the existing keys in Redis if this would be prefixed.</td>\n</tr>\n<tr>\n<td>retry_strategy</td>\n<td>function</td>\n<td>A function that receives an options object as parameter including the retry <code>attempt</code>, the <code>total_retry_time</code> indicating how much time passed since the last time connected, the <code>error</code> why the connection was lost and the number of <code>times_connected</code> in total. If you return a number from this function, the retry will happen exactly after that time in milliseconds. If you return a non-number, no further retry will happen and all offline commands are flushed with errors. Return an error to return that specific error to all offline commands. Example below.</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> redis = <span class=\"built_in\">require</span>(<span class=\"string\">\"redis\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> client = redis.createClient(&#123;<span class=\"attr\">detect_buffers</span>: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">client.set(<span class=\"string\">\"foo_rand000000000000\"</span>, <span class=\"string\">\"OK\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// This will return a JavaScript String</span></span><br><span class=\"line\">client.get(<span class=\"string\">\"foo_rand000000000000\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, reply</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(reply.toString()); <span class=\"comment\">// Will print `OK`</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// This will return a Buffer since original key is specified as a Buffer</span></span><br><span class=\"line\">client.get(<span class=\"keyword\">new</span> Buffer(<span class=\"string\">\"foo_rand000000000000\"</span>), <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, reply</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(reply.toString()); <span class=\"comment\">// Will print `&lt;Buffer 4f 4b&gt;`</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">client.quit();</span><br></pre></td></tr></table></figure>\n<p>retry_strategy example</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> client = redis.createClient(&#123;</span><br><span class=\"line\">    retry_strategy: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (options.error &amp;&amp; options.error.code === <span class=\"string\">'ECONNREFUSED'</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// End reconnecting on a specific error and flush all commands with</span></span><br><span class=\"line\">            <span class=\"comment\">// a individual error</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'The server refused the connection'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (options.total_retry_time &gt; <span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// End reconnecting after a specific timeout and flush all commands</span></span><br><span class=\"line\">            <span class=\"comment\">// with a individual error</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Retry time exhausted'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (options.attempt &gt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// End reconnecting with built in error</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// reconnect after</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.min(options.attempt * <span class=\"number\">100</span>, <span class=\"number\">3000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"client-auth-password-callback\"><a href=\"#client-auth-password-callback\" class=\"headerlink\" title=\"client.auth(password[, callback])\"></a>client.auth(password[, callback])</h2><p>When connecting to a Redis server that requires authentication, the <code>AUTH</code><br>command must be sent as the first command after connecting. This can be tricky<br>to coordinate with reconnections, the ready check, etc. To make this easier,<br><code>client.auth()</code> stashes <code>password</code> and will send it after each connection,<br>including reconnections. <code>callback</code> is invoked only once, after the response to<br>the very first <code>AUTH</code> command sent.<br>NOTE: Your call to <code>client.auth()</code> should not be inside the ready handler. If<br>you are doing this wrong, <code>client</code> will emit an error that looks<br>something like this <code>Error: Ready check failed: ERR operation not permitted</code>.</p>\n<h2 id=\"backpressure\"><a href=\"#backpressure\" class=\"headerlink\" title=\"backpressure\"></a>backpressure</h2><h3 id=\"stream\"><a href=\"#stream\" class=\"headerlink\" title=\"stream\"></a>stream</h3><p>The client exposed the used <a href=\"https://nodejs.org/api/stream.html\" target=\"_blank\" rel=\"noopener\">stream</a> in<br><code>client.stream</code> and if the stream or client had to<br><a href=\"https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback\" target=\"_blank\" rel=\"noopener\">buffer</a><br>the command in <code>client.should_buffer</code>. In combination this can be used to<br>implement backpressure by checking the buffer state before sending a command and<br>listening to the stream<br><a href=\"https://nodejs.org/api/stream.html#stream_event_drain\" target=\"_blank\" rel=\"noopener\">drain</a> event.</p>\n<h2 id=\"client-quit\"><a href=\"#client-quit\" class=\"headerlink\" title=\"client.quit()\"></a>client.quit()</h2><p>This sends the quit command to the redis server and ends cleanly right after all<br>running commands were properly handled. If this is called while reconnecting<br>(and therefore no connection to the redis server exists) it is going to end the<br>connection right away instead of resulting in further reconnections! All offline<br>commands are going to be flushed with an error in that case.</p>\n<h2 id=\"client-end-flush\"><a href=\"#client-end-flush\" class=\"headerlink\" title=\"client.end(flush)\"></a>client.end(flush)</h2><p>Forcibly close the connection to the Redis server. Note that this does not wait<br>until all replies have been parsed. If you want to exit cleanly, call<br><code>client.quit()</code> as mentioned above.</p>\n<p>You should set flush to true, if you are not absolutely sure you do not care<br>about any other commands. If you set flush to false all still running commands<br>will silently fail.</p>\n<p>This example closes the connection to the Redis server before the replies have<br>been read. You probably don’t want to do this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> redis = <span class=\"built_in\">require</span>(<span class=\"string\">\"redis\"</span>),</span><br><span class=\"line\">    client = redis.createClient();</span><br><span class=\"line\"></span><br><span class=\"line\">client.set(<span class=\"string\">\"foo_rand000000000000\"</span>, <span class=\"string\">\"some fantastic value\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, reply</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// This will either result in an error (flush parameter is set to true)</span></span><br><span class=\"line\">    <span class=\"comment\">// or will silently fail and this callback will not be called at all (flush set to false)</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">client.end(<span class=\"literal\">true</span>); <span class=\"comment\">// No further commands will be processed</span></span><br><span class=\"line\">client.get(<span class=\"string\">\"foo_rand000000000000\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, reply</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err); <span class=\"comment\">// =&gt; 'The connection has already been closed.'</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><code>client.end()</code> without the flush parameter set to true should NOT be used in production!</p>\n<h2 id=\"Error-handling-gt-v-2-6\"><a href=\"#Error-handling-gt-v-2-6\" class=\"headerlink\" title=\"Error handling (&gt;= v.2.6)\"></a>Error handling (&gt;= v.2.6)</h2><p>Currently the following error subclasses exist:</p>\n<ul>\n<li><code>RedisError</code>: <em>All errors</em> returned by the client</li>\n<li><code>ReplyError</code> subclass of <code>RedisError</code>: All errors returned by <strong>Redis</strong> itself</li>\n<li><code>AbortError</code> subclass of <code>RedisError</code>: All commands that could not finish due<br>to what ever reason</li>\n<li><code>ParserError</code> subclass of <code>RedisError</code>: Returned in case of a parser error<br>(this should not happen)</li>\n<li><code>AggregateError</code> subclass of <code>AbortError</code>: Emitted in case multiple unresolved<br>commands without callback got rejected in debug_mode instead of lots of<br><code>AbortError</code>s.</li>\n</ul>\n<p>All error classes are exported by the module.</p>\n<p>Example:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> redis = <span class=\"built_in\">require</span>(<span class=\"string\">'./'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> assert = <span class=\"built_in\">require</span>(<span class=\"string\">'assert'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> client = redis.createClient();</span><br><span class=\"line\"></span><br><span class=\"line\">client.on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    assert(err <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Error</span>);</span><br><span class=\"line\">    assert(err <span class=\"keyword\">instanceof</span> redis.AbortError);</span><br><span class=\"line\">    assert(err <span class=\"keyword\">instanceof</span> redis.AggregateError);</span><br><span class=\"line\">    <span class=\"comment\">// The set and get get aggregated in here</span></span><br><span class=\"line\">    assert.strictEqual(err.errors.length, <span class=\"number\">2</span>);</span><br><span class=\"line\">    assert.strictEqual(err.code, <span class=\"string\">'NR_CLOSED'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">client.set(<span class=\"string\">'foo'</span>, <span class=\"number\">123</span>, <span class=\"string\">'bar'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123; <span class=\"comment\">// Too many arguments</span></span><br><span class=\"line\">    assert(err <span class=\"keyword\">instanceof</span> redis.ReplyError); <span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\">    assert.strictEqual(err.command, <span class=\"string\">'SET'</span>);</span><br><span class=\"line\">    assert.deepStrictEqual(err.args, [<span class=\"string\">'foo'</span>, <span class=\"number\">123</span>, <span class=\"string\">'bar'</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    redis.debug_mode = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    client.set(<span class=\"string\">'foo'</span>, <span class=\"string\">'bar'</span>);</span><br><span class=\"line\">    client.get(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\">    process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Force closing the connection while the command did not yet return</span></span><br><span class=\"line\">        client.end(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        redis.debug_mode = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>Every <code>ReplyError</code> contains the <code>command</code> name in all-caps and the arguments (<code>args</code>).</p>\n<p>If node_redis emits a library error because of another error, the triggering<br>error is added to the returned error as <code>origin</code> attribute.</p>\n<p><strong><em>Error codes</em></strong></p>\n<p>node_redis returns a <code>NR_CLOSED</code> error code if the clients connection dropped.<br>If a command unresolved command got rejected a <code>UNCERTAIN_STATE</code> code is<br>returned. A <code>CONNECTION_BROKEN</code> error code is used in case node_redis gives up<br>to reconnect.</p>\n<h2 id=\"client-unref\"><a href=\"#client-unref\" class=\"headerlink\" title=\"client.unref()\"></a>client.unref()</h2><p>Call <code>unref()</code> on the underlying socket connection to the Redis server, allowing<br>the program to exit once no more commands are pending.</p>\n<p>This is an <strong>experimental</strong> feature, and only supports a subset of the Redis<br>protocol. Any commands where client state is saved on the Redis server, e.g.<br><code>*SUBSCRIBE</code> or the blocking <code>BL*</code> commands will <em>NOT</em> work with <code>.unref()</code>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> redis = <span class=\"built_in\">require</span>(<span class=\"string\">\"redis\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> client = redis.createClient()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    Calling unref() will allow this program to exit immediately after the get</span></span><br><span class=\"line\"><span class=\"comment\">    command finishes. Otherwise the client would hang as long as the</span></span><br><span class=\"line\"><span class=\"comment\">    client-server connection is alive.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">client.unref()</span><br><span class=\"line\">client.get(<span class=\"string\">\"foo\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, value</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span>(err)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Friendlier-hash-commands\"><a href=\"#Friendlier-hash-commands\" class=\"headerlink\" title=\"Friendlier hash commands\"></a>Friendlier hash commands</h2><p>Most Redis commands take a single String or an Array of Strings as arguments,<br>and replies are sent back as a single String or an Array of Strings. When<br>dealing with hash values, there are a couple of useful exceptions to this.</p>\n<h3 id=\"client-hgetall-hash-callback\"><a href=\"#client-hgetall-hash-callback\" class=\"headerlink\" title=\"client.hgetall(hash, callback)\"></a>client.hgetall(hash, callback)</h3><p>The reply from an HGETALL command will be converted into a JavaScript Object by<br><code>node_redis</code>. That way you can interact with the responses using JavaScript<br>syntax.</p>\n<p>Example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client.hmset(<span class=\"string\">\"hosts\"</span>, <span class=\"string\">\"mjr\"</span>, <span class=\"string\">\"1\"</span>, <span class=\"string\">\"another\"</span>, <span class=\"string\">\"23\"</span>, <span class=\"string\">\"home\"</span>, <span class=\"string\">\"1234\"</span>);</span><br><span class=\"line\">client.hgetall(<span class=\"string\">\"hosts\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.dir(obj);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Output:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">mjr</span>: <span class=\"string\">'1'</span>, <span class=\"attr\">another</span>: <span class=\"string\">'23'</span>, <span class=\"attr\">home</span>: <span class=\"string\">'1234'</span> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"client-hmset-hash-obj-callback\"><a href=\"#client-hmset-hash-obj-callback\" class=\"headerlink\" title=\"client.hmset(hash, obj[, callback])\"></a>client.hmset(hash, obj[, callback])</h3><p>Multiple values in a hash can be set by supplying an object:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client.HMSET(key2, &#123;</span><br><span class=\"line\">    <span class=\"string\">\"0123456789\"</span>: <span class=\"string\">\"abcdefghij\"</span>, <span class=\"comment\">// <span class=\"doctag\">NOTE:</span> key and value will be coerced to strings</span></span><br><span class=\"line\">    <span class=\"string\">\"some manner of key\"</span>: <span class=\"string\">\"a type of value\"</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>The properties and values of this Object will be set as keys and values in the<br>Redis hash.</p>\n<h3 id=\"client-hmset-hash-key1-val1-…-keyn-valn-callback\"><a href=\"#client-hmset-hash-key1-val1-…-keyn-valn-callback\" class=\"headerlink\" title=\"client.hmset(hash, key1, val1, … keyn, valn, [callback])\"></a>client.hmset(hash, key1, val1, … keyn, valn, [callback])</h3><p>Multiple values may also be set by supplying a list:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client.HMSET(key1, <span class=\"string\">\"0123456789\"</span>, <span class=\"string\">\"abcdefghij\"</span>, <span class=\"string\">\"some manner of key\"</span>, <span class=\"string\">\"a type of value\"</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Publish-Subscribe\"><a href=\"#Publish-Subscribe\" class=\"headerlink\" title=\"Publish / Subscribe\"></a>Publish / Subscribe</h2><p>Example of the publish / subscribe API. This program opens two<br>client connections, subscribes to a channel on one of them, and publishes to that<br>channel on the other:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> redis = <span class=\"built_in\">require</span>(<span class=\"string\">\"redis\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> sub = redis.createClient(), pub = redis.createClient();</span><br><span class=\"line\"><span class=\"keyword\">var</span> msg_count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">sub.on(<span class=\"string\">\"subscribe\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">channel, count</span>) </span>&#123;</span><br><span class=\"line\">    pub.publish(<span class=\"string\">\"a nice channel\"</span>, <span class=\"string\">\"I am sending a message.\"</span>);</span><br><span class=\"line\">    pub.publish(<span class=\"string\">\"a nice channel\"</span>, <span class=\"string\">\"I am sending a second message.\"</span>);</span><br><span class=\"line\">    pub.publish(<span class=\"string\">\"a nice channel\"</span>, <span class=\"string\">\"I am sending my last message.\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">sub.on(<span class=\"string\">\"message\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">channel, message</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"sub channel \"</span> + channel + <span class=\"string\">\": \"</span> + message);</span><br><span class=\"line\">    msg_count += <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (msg_count === <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        sub.unsubscribe();</span><br><span class=\"line\">        sub.quit();</span><br><span class=\"line\">        pub.quit();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">sub.subscribe(<span class=\"string\">\"a nice channel\"</span>);</span><br></pre></td></tr></table></figure>\n<p>When a client issues a <code>SUBSCRIBE</code> or <code>PSUBSCRIBE</code>, that connection is put into<br>a “subscriber” mode. At that point, only commands that modify the subscription<br>set are valid and quit (and depending on the redis version ping as well). When<br>the subscription set is empty, the connection is put back into regular mode.</p>\n<p>If you need to send regular commands to Redis while in subscriber mode, just<br>open another connection with a new client (hint: use <code>client.duplicate()</code>).</p>\n<h2 id=\"Subscriber-Events\"><a href=\"#Subscriber-Events\" class=\"headerlink\" title=\"Subscriber Events\"></a>Subscriber Events</h2><p>If a client has subscriptions active, it may emit these events:</p>\n<h3 id=\"“message”-channel-message\"><a href=\"#“message”-channel-message\" class=\"headerlink\" title=\"“message” (channel, message)\"></a>“message” (channel, message)</h3><p>Client will emit <code>message</code> for every message received that matches an active subscription.<br>Listeners are passed the channel name as <code>channel</code> and the message as <code>message</code>.</p>\n<h3 id=\"“pmessage”-pattern-channel-message\"><a href=\"#“pmessage”-pattern-channel-message\" class=\"headerlink\" title=\"“pmessage” (pattern, channel, message)\"></a>“pmessage” (pattern, channel, message)</h3><p>Client will emit <code>pmessage</code> for every message received that matches an active<br>subscription pattern. Listeners are passed the original pattern used with<br><code>PSUBSCRIBE</code> as <code>pattern</code>, the sending channel name as <code>channel</code>, and the<br>message as <code>message</code>.</p>\n<h3 id=\"“message-buffer”-channel-message\"><a href=\"#“message-buffer”-channel-message\" class=\"headerlink\" title=\"“message_buffer” (channel, message)\"></a>“message_buffer” (channel, message)</h3><p>This is the same as the <code>message</code> event with the exception, that it is always<br>going to emit a buffer. If you listen to the <code>message</code> event at the same time as<br>the <code>message_buffer</code>, it is always going to emit a string.</p>\n<h3 id=\"“pmessage-buffer”-pattern-channel-message\"><a href=\"#“pmessage-buffer”-pattern-channel-message\" class=\"headerlink\" title=\"“pmessage_buffer” (pattern, channel, message)\"></a>“pmessage_buffer” (pattern, channel, message)</h3><p>This is the same as the <code>pmessage</code> event with the exception, that it is always<br>going to emit a buffer. If you listen to the <code>pmessage</code> event at the same time<br>as the <code>pmessage_buffer</code>, it is always going to emit a string.</p>\n<h3 id=\"“subscribe”-channel-count\"><a href=\"#“subscribe”-channel-count\" class=\"headerlink\" title=\"“subscribe” (channel, count)\"></a>“subscribe” (channel, count)</h3><p>Client will emit <code>subscribe</code> in response to a <code>SUBSCRIBE</code> command. Listeners are<br>passed the channel name as <code>channel</code> and the new count of subscriptions for this<br>client as <code>count</code>.</p>\n<h3 id=\"“psubscribe”-pattern-count\"><a href=\"#“psubscribe”-pattern-count\" class=\"headerlink\" title=\"“psubscribe” (pattern, count)\"></a>“psubscribe” (pattern, count)</h3><p>Client will emit <code>psubscribe</code> in response to a <code>PSUBSCRIBE</code> command. Listeners<br>are passed the original pattern as <code>pattern</code>, and the new count of subscriptions<br>for this client as <code>count</code>.</p>\n<h3 id=\"“unsubscribe”-channel-count\"><a href=\"#“unsubscribe”-channel-count\" class=\"headerlink\" title=\"“unsubscribe” (channel, count)\"></a>“unsubscribe” (channel, count)</h3><p>Client will emit <code>unsubscribe</code> in response to a <code>UNSUBSCRIBE</code> command. Listeners<br>are passed the channel name as <code>channel</code> and the new count of subscriptions for<br>this client as <code>count</code>. When <code>count</code> is 0, this client has left subscriber mode<br>and no more subscriber events will be emitted.</p>\n<h3 id=\"“punsubscribe”-pattern-count\"><a href=\"#“punsubscribe”-pattern-count\" class=\"headerlink\" title=\"“punsubscribe” (pattern, count)\"></a>“punsubscribe” (pattern, count)</h3><p>Client will emit <code>punsubscribe</code> in response to a <code>PUNSUBSCRIBE</code> command.<br>Listeners are passed the channel name as <code>channel</code> and the new count of<br>subscriptions for this client as <code>count</code>. When <code>count</code> is 0, this client has<br>left subscriber mode and no more subscriber events will be emitted.</p>\n<h2 id=\"client-multi-commands\"><a href=\"#client-multi-commands\" class=\"headerlink\" title=\"client.multi([commands])\"></a>client.multi([commands])</h2><p><code>MULTI</code> commands are queued up until an <code>EXEC</code> is issued, and then all commands<br>are run atomically by Redis. The interface in <code>node_redis</code> is to return an<br>individual <code>Multi</code> object by calling <code>client.multi()</code>. If any command fails to<br>queue, all commands are rolled back and none is going to be executed (For<br>further information look at<br><a href=\"http://redis.io/topics/transactions\" target=\"_blank\" rel=\"noopener\">transactions</a>).</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> redis  = <span class=\"built_in\">require</span>(<span class=\"string\">\"./index\"</span>),</span><br><span class=\"line\">    client = redis.createClient(), set_size = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">client.sadd(<span class=\"string\">\"bigset\"</span>, <span class=\"string\">\"a member\"</span>);</span><br><span class=\"line\">client.sadd(<span class=\"string\">\"bigset\"</span>, <span class=\"string\">\"another member\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (set_size &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    client.sadd(<span class=\"string\">\"bigset\"</span>, <span class=\"string\">\"member \"</span> + set_size);</span><br><span class=\"line\">    set_size -= <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// multi chain with an individual callback</span></span><br><span class=\"line\">client.multi()</span><br><span class=\"line\">    .scard(<span class=\"string\">\"bigset\"</span>)</span><br><span class=\"line\">    .smembers(<span class=\"string\">\"bigset\"</span>)</span><br><span class=\"line\">    .keys(<span class=\"string\">\"*\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, replies</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">NOTE:</span> code in this callback is NOT atomic</span></span><br><span class=\"line\">        <span class=\"comment\">// this only happens after the the .exec call finishes.</span></span><br><span class=\"line\">        client.mget(replies, redis.print);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .dbsize()</span><br><span class=\"line\">    .exec(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, replies</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"MULTI got \"</span> + replies.length + <span class=\"string\">\" replies\"</span>);</span><br><span class=\"line\">        replies.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">reply, index</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Reply \"</span> + index + <span class=\"string\">\": \"</span> + reply.toString());</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Multi-exec-callback\"><a href=\"#Multi-exec-callback\" class=\"headerlink\" title=\"Multi.exec([callback])\"></a>Multi.exec([callback])</h3><p><code>client.multi()</code> is a constructor that returns a <code>Multi</code> object. <code>Multi</code> objects<br>share all of the same command methods as <code>client</code> objects do. Commands are<br>queued up inside the <code>Multi</code> object until <code>Multi.exec()</code> is invoked.</p>\n<p>If your code contains an syntax error an EXECABORT error is going to be thrown<br>and all commands are going to be aborted. That error contains a <code>.errors</code><br>property that contains the concrete errors.<br>If all commands were queued successfully and an error is thrown by redis while<br>processing the commands that error is going to be returned in the result array!<br>No other command is going to be aborted though than the onces failing.</p>\n<p>You can either chain together <code>MULTI</code> commands as in the above example, or you<br>can queue individual commands while still sending regular client command as in<br>this example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> redis  = <span class=\"built_in\">require</span>(<span class=\"string\">\"redis\"</span>),</span><br><span class=\"line\">    client = redis.createClient(), multi;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// start a separate multi command queue</span></span><br><span class=\"line\">multi = client.multi();</span><br><span class=\"line\">multi.incr(<span class=\"string\">\"incr thing\"</span>, redis.print);</span><br><span class=\"line\">multi.incr(<span class=\"string\">\"incr other thing\"</span>, redis.print);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// runs immediately</span></span><br><span class=\"line\">client.mset(<span class=\"string\">\"incr thing\"</span>, <span class=\"number\">100</span>, <span class=\"string\">\"incr other thing\"</span>, <span class=\"number\">1</span>, redis.print);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// drains multi queue and runs atomically</span></span><br><span class=\"line\">multi.exec(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, replies</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(replies); <span class=\"comment\">// 101, 2</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>In addition to adding commands to the <code>MULTI</code> queue individually, you can also<br>pass an array of commands and arguments to the constructor:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> redis  = <span class=\"built_in\">require</span>(<span class=\"string\">\"redis\"</span>),</span><br><span class=\"line\">    client = redis.createClient();</span><br><span class=\"line\"></span><br><span class=\"line\">client.multi([</span><br><span class=\"line\">    [<span class=\"string\">\"mget\"</span>, <span class=\"string\">\"multifoo\"</span>, <span class=\"string\">\"multibar\"</span>, redis.print],</span><br><span class=\"line\">    [<span class=\"string\">\"incr\"</span>, <span class=\"string\">\"multifoo\"</span>],</span><br><span class=\"line\">    [<span class=\"string\">\"incr\"</span>, <span class=\"string\">\"multibar\"</span>]</span><br><span class=\"line\">]).exec(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, replies</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(replies);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Multi-exec-atomic-callback\"><a href=\"#Multi-exec-atomic-callback\" class=\"headerlink\" title=\"Multi.exec_atomic([callback])\"></a>Multi.exec_atomic([callback])</h3><p>Identical to Multi.exec but with the difference that executing a single command<br>will not use transactions.</p>\n<h2 id=\"client-batch-commands\"><a href=\"#client-batch-commands\" class=\"headerlink\" title=\"client.batch([commands])\"></a>client.batch([commands])</h2><p>Identical to .multi without transactions. This is recommended if you want to<br>execute many commands at once but don’t have to rely on transactions.</p>\n<p><code>BATCH</code> commands are queued up until an <code>EXEC</code> is issued, and then all commands<br>are run atomically by Redis. The interface in <code>node_redis</code> is to return an<br>individual <code>Batch</code> object by calling <code>client.batch()</code>. The only difference<br>between .batch and .multi is that no transaction is going to be used.<br>Be aware that the errors are - just like in multi statements - in the result.<br>Otherwise both, errors and results could be returned at the same time.</p>\n<p>If you fire many commands at once this is going to boost the execution speed<br>significantly compared to firing the same commands in a loop without waiting for<br>the result! See the benchmarks for further comparison. Please remember that all<br>commands are kept in memory until they are fired.</p>\n<h2 id=\"Monitor-mode\"><a href=\"#Monitor-mode\" class=\"headerlink\" title=\"Monitor mode\"></a>Monitor mode</h2><p>Redis supports the <code>MONITOR</code> command, which lets you see all commands received<br>by the Redis server across all client connections, including from other client<br>libraries and other computers.</p>\n<p>A <code>monitor</code> event is going to be emitted for every command fired from any client<br>connected to the server including the monitoring client itself. The callback for<br>the <code>monitor</code> event takes a timestamp from the Redis server, an array of command<br>arguments and the raw monitoring string.</p>\n<p>Example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> client  = <span class=\"built_in\">require</span>(<span class=\"string\">\"redis\"</span>).createClient();</span><br><span class=\"line\">client.monitor(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Entering monitoring mode.\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">client.set(<span class=\"string\">'foo'</span>, <span class=\"string\">'bar'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">client.on(<span class=\"string\">\"monitor\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">time, args, raw_reply</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(time + <span class=\"string\">\": \"</span> + args); <span class=\"comment\">// 1458910076.446514:['set', 'foo', 'bar']</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"Extras\"><a href=\"#Extras\" class=\"headerlink\" title=\"Extras\"></a>Extras</h1><p>Some other things you might like to know about.</p>\n<h2 id=\"client-server-info\"><a href=\"#client-server-info\" class=\"headerlink\" title=\"client.server_info\"></a>client.server_info</h2><p>After the ready probe completes, the results from the INFO command are saved in<br>the <code>client.server_info</code> object.</p>\n<p>The <code>versions</code> key contains an array of the elements of the version string for<br>easy comparison.</p>\n<pre><code>&gt; client.server_info.redis_version\n&apos;2.3.0&apos;\n&gt; client.server_info.versions\n[ 2, 3, 0 ]\n</code></pre><h2 id=\"redis-print\"><a href=\"#redis-print\" class=\"headerlink\" title=\"redis.print()\"></a>redis.print()</h2><p>A handy callback function for displaying return values when testing. Example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> redis = <span class=\"built_in\">require</span>(<span class=\"string\">\"redis\"</span>),</span><br><span class=\"line\">    client = redis.createClient();</span><br><span class=\"line\"></span><br><span class=\"line\">client.on(<span class=\"string\">\"connect\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    client.set(<span class=\"string\">\"foo_rand000000000000\"</span>, <span class=\"string\">\"some fantastic value\"</span>, redis.print);</span><br><span class=\"line\">    client.get(<span class=\"string\">\"foo_rand000000000000\"</span>, redis.print);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>This will print:</p>\n<pre><code>Reply: OK\nReply: some fantastic value\n</code></pre><p>Note that this program will not exit cleanly because the client is still connected.</p>\n<h2 id=\"Multi-word-commands\"><a href=\"#Multi-word-commands\" class=\"headerlink\" title=\"Multi-word commands\"></a>Multi-word commands</h2><p>To execute redis multi-word commands like <code>SCRIPT LOAD</code> or <code>CLIENT LIST</code> pass<br>the second word as first parameter:</p>\n<pre><code>client.script(&apos;load&apos;, &apos;return 1&apos;);\nclient.multi().script(&apos;load&apos;, &apos;return 1&apos;).exec(...);\nclient.multi([[&apos;script&apos;, &apos;load&apos;, &apos;return 1&apos;]]).exec(...);\n</code></pre><h2 id=\"client-duplicate-options-callback\"><a href=\"#client-duplicate-options-callback\" class=\"headerlink\" title=\"client.duplicate([options][, callback])\"></a>client.duplicate([options][, callback])</h2><p>Duplicate all current options and return a new redisClient instance. All options<br>passed to the duplicate function are going to replace the original option. If<br>you pass a callback, duplicate is going to wait until the client is ready and<br>returns it in the callback. If an error occurs in the meanwhile, that is going<br>to return an error instead in the callback.</p>\n<p>One example of when to use duplicate() would be to accommodate the connection-<br>blocking redis commands BRPOP, BLPOP, and BRPOPLPUSH.  If these commands<br>are used on the same redisClient instance as non-blocking commands, the<br>non-blocking ones may be queued up until after the blocking ones finish.</p>\n<pre><code>var Redis=require(&apos;redis&apos;);\nvar client = Redis.createClient();\nvar clientBlocking = client.duplicate();\n\nvar get = function() {\n    console.log(&quot;get called&quot;);\n    client.get(&quot;any_key&quot;,function() { console.log(&quot;get returned&quot;); });\n    setTimeout( get, 1000 );\n};\nvar brpop = function() {\n    console.log(&quot;brpop called&quot;);\n    clientBlocking.brpop(&quot;nonexistent&quot;, 5, function() {\n        console.log(&quot;brpop return&quot;);\n        setTimeout( brpop, 1000 );\n    });\n};\nget();\nbrpop();\n</code></pre><p>Another reason to use duplicate() is when multiple DBs on the same server are<br>accessed via the redis SELECT command.  Each DB could use its own connection.</p>\n<h2 id=\"client-send-command-command-name-args-callback\"><a href=\"#client-send-command-command-name-args-callback\" class=\"headerlink\" title=\"client.send_command(command_name[, [args][, callback]])\"></a>client.send_command(command_name[, [args][, callback]])</h2><p>All Redis commands have been added to the <code>client</code> object. However, if new<br>commands are introduced before this library is updated or if you want to add<br>individual commands you can use <code>send_command()</code> to send arbitrary commands to<br>Redis.</p>\n<p>All commands are sent as multi-bulk commands. <code>args</code> can either be an Array of<br>arguments, or omitted / set to undefined.</p>\n<h2 id=\"client-add-command-command-name\"><a href=\"#client-add-command-command-name\" class=\"headerlink\" title=\"client.add_command(command_name)\"></a>client.add_command(command_name)</h2><p>Calling add_command will add a new command to the prototype. The exact command<br>name will be used when calling using this new command. Using arbitrary arguments<br>is possible as with any other command.</p>\n<h2 id=\"client-connected\"><a href=\"#client-connected\" class=\"headerlink\" title=\"client.connected\"></a>client.connected</h2><p>Boolean tracking the state of the connection to the Redis server.</p>\n<h2 id=\"client-command-queue-length\"><a href=\"#client-command-queue-length\" class=\"headerlink\" title=\"client.command_queue_length\"></a>client.command_queue_length</h2><p>The number of commands that have been sent to the Redis server but not yet<br>replied to. You can use this to enforce some kind of maximum queue depth for<br>commands while connected.</p>\n<h2 id=\"client-offline-queue-length\"><a href=\"#client-offline-queue-length\" class=\"headerlink\" title=\"client.offline_queue_length\"></a>client.offline_queue_length</h2><p>The number of commands that have been queued up for a future connection. You can<br>use this to enforce some kind of maximum queue depth for pre-connection<br>commands.</p>\n<h3 id=\"Commands-with-Optional-and-Keyword-arguments\"><a href=\"#Commands-with-Optional-and-Keyword-arguments\" class=\"headerlink\" title=\"Commands with Optional and Keyword arguments\"></a>Commands with Optional and Keyword arguments</h3><p>This applies to anything that uses an optional <code>[WITHSCORES]</code> or <code>[LIMIT offset\ncount]</code> in the <a href=\"http://redis.io/commands\" target=\"_blank\" rel=\"noopener\">redis.io/commands</a> documentation.</p>\n<p>Example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> args = [ <span class=\"string\">'myzset'</span>, <span class=\"number\">1</span>, <span class=\"string\">'one'</span>, <span class=\"number\">2</span>, <span class=\"string\">'two'</span>, <span class=\"number\">3</span>, <span class=\"string\">'three'</span>, <span class=\"number\">99</span>, <span class=\"string\">'ninety-nine'</span> ];</span><br><span class=\"line\">client.zadd(args, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, response</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'added '</span>+response+<span class=\"string\">' items.'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// -Infinity and +Infinity also work</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> args1 = [ <span class=\"string\">'myzset'</span>, <span class=\"string\">'+inf'</span>, <span class=\"string\">'-inf'</span> ];</span><br><span class=\"line\">    client.zrevrangebyscore(args1, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, response</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'example1'</span>, response);</span><br><span class=\"line\">        <span class=\"comment\">// write your code here</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> max = <span class=\"number\">3</span>, min = <span class=\"number\">1</span>, offset = <span class=\"number\">1</span>, count = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> args2 = [ <span class=\"string\">'myzset'</span>, max, min, <span class=\"string\">'WITHSCORES'</span>, <span class=\"string\">'LIMIT'</span>, offset, count ];</span><br><span class=\"line\">    client.zrevrangebyscore(args2, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, response</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'example2'</span>, response);</span><br><span class=\"line\">        <span class=\"comment\">// write your code here</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Performance\"><a href=\"#Performance\" class=\"headerlink\" title=\"Performance\"></a>Performance</h2><p>Much effort has been spent to make <code>node_redis</code> as fast as possible for common<br>operations.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Lenovo T450s, i7-5600U and 12gb memory</span><br><span class=\"line\">clients: 1, NodeJS: 6.2.0, Redis: 3.2.0, parser: javascript, connected by: tcp</span><br><span class=\"line\">         PING,         1/1 avg/max:   0.02/  5.26 2501ms total,   46916 ops/sec</span><br><span class=\"line\">         PING,  batch 50/1 avg/max:   0.06/  4.35 2501ms total,  755178 ops/sec</span><br><span class=\"line\">   SET 4B str,         1/1 avg/max:   0.02/  4.75 2501ms total,   40856 ops/sec</span><br><span class=\"line\">   SET 4B str,  batch 50/1 avg/max:   0.11/  1.51 2501ms total,  432727 ops/sec</span><br><span class=\"line\">   SET 4B buf,         1/1 avg/max:   0.05/  2.76 2501ms total,   20659 ops/sec</span><br><span class=\"line\">   SET 4B buf,  batch 50/1 avg/max:   0.25/  1.76 2501ms total,  194962 ops/sec</span><br><span class=\"line\">   GET 4B str,         1/1 avg/max:   0.02/  1.55 2501ms total,   45156 ops/sec</span><br><span class=\"line\">   GET 4B str,  batch 50/1 avg/max:   0.09/  3.15 2501ms total,  524110 ops/sec</span><br><span class=\"line\">   GET 4B buf,         1/1 avg/max:   0.02/  3.07 2501ms total,   44563 ops/sec</span><br><span class=\"line\">   GET 4B buf,  batch 50/1 avg/max:   0.10/  3.18 2501ms total,  473171 ops/sec</span><br><span class=\"line\"> SET 4KiB str,         1/1 avg/max:   0.03/  1.54 2501ms total,   32627 ops/sec</span><br><span class=\"line\"> SET 4KiB str,  batch 50/1 avg/max:   0.34/  1.89 2501ms total,  146861 ops/sec</span><br><span class=\"line\"> SET 4KiB buf,         1/1 avg/max:   0.05/  2.85 2501ms total,   20688 ops/sec</span><br><span class=\"line\"> SET 4KiB buf,  batch 50/1 avg/max:   0.36/  1.83 2501ms total,  138165 ops/sec</span><br><span class=\"line\"> GET 4KiB str,         1/1 avg/max:   0.02/  1.37 2501ms total,   39389 ops/sec</span><br><span class=\"line\"> GET 4KiB str,  batch 50/1 avg/max:   0.24/  1.81 2501ms total,  208157 ops/sec</span><br><span class=\"line\"> GET 4KiB buf,         1/1 avg/max:   0.02/  2.63 2501ms total,   39918 ops/sec</span><br><span class=\"line\"> GET 4KiB buf,  batch 50/1 avg/max:   0.31/  8.56 2501ms total,  161575 ops/sec</span><br><span class=\"line\">         INCR,         1/1 avg/max:   0.02/  4.69 2501ms total,   45685 ops/sec</span><br><span class=\"line\">         INCR,  batch 50/1 avg/max:   0.09/  3.06 2501ms total,  539964 ops/sec</span><br><span class=\"line\">        LPUSH,         1/1 avg/max:   0.02/  3.04 2501ms total,   41253 ops/sec</span><br><span class=\"line\">        LPUSH,  batch 50/1 avg/max:   0.12/  1.94 2501ms total,  425090 ops/sec</span><br><span class=\"line\">    LRANGE 10,         1/1 avg/max:   0.02/  2.28 2501ms total,   39850 ops/sec</span><br><span class=\"line\">    LRANGE 10,  batch 50/1 avg/max:   0.25/  1.85 2501ms total,  194302 ops/sec</span><br><span class=\"line\">   LRANGE 100,         1/1 avg/max:   0.05/  2.93 2501ms total,   21026 ops/sec</span><br><span class=\"line\">   LRANGE 100,  batch 50/1 avg/max:   1.52/  2.89 2501ms total,   32767 ops/sec</span><br><span class=\"line\"> SET 4MiB str,         1/1 avg/max:   5.16/ 15.55 2502ms total,     193 ops/sec</span><br><span class=\"line\"> SET 4MiB str,  batch 20/1 avg/max:  89.73/ 99.96 2513ms total,     223 ops/sec</span><br><span class=\"line\"> SET 4MiB buf,         1/1 avg/max:   2.23/  8.35 2501ms total,     446 ops/sec</span><br><span class=\"line\"> SET 4MiB buf,  batch 20/1 avg/max:  41.47/ 50.91 2530ms total,     482 ops/sec</span><br><span class=\"line\"> GET 4MiB str,         1/1 avg/max:   2.79/ 10.91 2502ms total,     358 ops/sec</span><br><span class=\"line\"> GET 4MiB str,  batch 20/1 avg/max: 101.61/118.11 2541ms total,     197 ops/sec</span><br><span class=\"line\"> GET 4MiB buf,         1/1 avg/max:   2.32/ 14.93 2502ms total,     430 ops/sec</span><br><span class=\"line\"> GET 4MiB buf,  batch 20/1 avg/max:  65.01/ 84.72 2536ms total,     308 ops/sec</span><br></pre></td></tr></table></figure>\n<h2 id=\"Debugging\"><a href=\"#Debugging\" class=\"headerlink\" title=\"Debugging\"></a>Debugging</h2><p>To get debug output run your <code>node_redis</code> application with <code>NODE_DEBUG=redis</code>.</p>\n<p>This is also going to result in good stack traces opposed to useless ones<br>otherwise for any async operation.<br>If you only want to have good stack traces but not the debug output run your<br>application in development mode instead (<code>NODE_ENV=development</code>).</p>\n<p>Good stack traces are only activated in development and debug mode as this<br>results in a significant performance penalty.</p>\n<p><strong><em>Comparison</em></strong>:<br>Useless stack trace:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReplyError: ERR wrong number of arguments for &apos;set&apos; command</span><br><span class=\"line\">    at parseError (/home/ruben/repos/redis/node_modules/redis-parser/lib/parser.js:158:12)</span><br><span class=\"line\">    at parseType (/home/ruben/repos/redis/node_modules/redis-parser/lib/parser.js:219:14)</span><br></pre></td></tr></table></figure></p>\n<p>Good stack trace:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReplyError: ERR wrong number of arguments for &apos;set&apos; command</span><br><span class=\"line\">    at new Command (/home/ruben/repos/redis/lib/command.js:9:902)</span><br><span class=\"line\">    at RedisClient.set (/home/ruben/repos/redis/lib/commands.js:9:3238)</span><br><span class=\"line\">    at Context.&lt;anonymous&gt; (/home/ruben/repos/redis/test/good_stacks.spec.js:20:20)</span><br><span class=\"line\">    at callFnAsync (/home/ruben/repos/redis/node_modules/mocha/lib/runnable.js:349:8)</span><br><span class=\"line\">    at Test.Runnable.run (/home/ruben/repos/redis/node_modules/mocha/lib/runnable.js:301:7)</span><br><span class=\"line\">    at Runner.runTest (/home/ruben/repos/redis/node_modules/mocha/lib/runner.js:422:10)</span><br><span class=\"line\">    at /home/ruben/repos/redis/node_modules/mocha/lib/runner.js:528:12</span><br><span class=\"line\">    at next (/home/ruben/repos/redis/node_modules/mocha/lib/runner.js:342:14)</span><br><span class=\"line\">    at /home/ruben/repos/redis/node_modules/mocha/lib/runner.js:352:7</span><br><span class=\"line\">    at next (/home/ruben/repos/redis/node_modules/mocha/lib/runner.js:284:14)</span><br><span class=\"line\">    at Immediate._onImmediate (/home/ruben/repos/redis/node_modules/mocha/lib/runner.js:320:5)</span><br><span class=\"line\">    at processImmediate [as _immediateCallback] (timers.js:383:17)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"How-to-Contribute\"><a href=\"#How-to-Contribute\" class=\"headerlink\" title=\"How to Contribute\"></a>How to Contribute</h2><ul>\n<li>Open a pull request or an issue about what you want to implement / change. We’re glad for any help!<ul>\n<li>Please be aware that we’ll only accept fully tested code.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Contributors\"><a href=\"#Contributors\" class=\"headerlink\" title=\"Contributors\"></a>Contributors</h2><p>The original author of node_redis is <a href=\"https://github.com/mranney\" target=\"_blank\" rel=\"noopener\">Matthew Ranney</a></p>\n<p>The current lead maintainer is <a href=\"https://github.com/BridgeAR\" target=\"_blank\" rel=\"noopener\">Ruben Bridgewater</a></p>\n<p>Many <a href=\"https://github.com/NodeRedis/node_redis/graphs/contributors\" target=\"_blank\" rel=\"noopener\">others</a><br>contributed to <code>node_redis</code> too. Thanks to all of them!</p>\n<h2 id=\"License\"><a href=\"#License\" class=\"headerlink\" title=\"License\"></a>License</h2><p><a href=\"LICENSE\">MIT</a></p>\n<h3 id=\"Consolidation-It’s-time-for-celebration\"><a href=\"#Consolidation-It’s-time-for-celebration\" class=\"headerlink\" title=\"Consolidation: It’s time for celebration\"></a>Consolidation: It’s time for celebration</h3><p>Right now there are two great redis clients around and both have some advantages<br>above each other. We speak about ioredis and node_redis. So after talking to<br>each other about how we could improve in working together we (that is @luin and<br>@BridgeAR) decided to work towards a single library on the long run. But step by<br>step.</p>\n<p>First of all, we want to split small parts of our libraries into others so that<br>we’re both able to use the same code. Those libraries are going to be maintained<br>under the NodeRedis organization. This is going to reduce the maintenance<br>overhead, allows others to use the very same code, if they need it and it’s way<br>easyer for others to contribute to both libraries.</p>\n<p>We’re very happy about this step towards working together as we both want to<br>give you the best redis experience possible.</p>\n<p>If you want to join our cause by help maintaining something, please don’t<br>hesitate to contact either one of us.</p>"},{"title":"nodejs项目缓存策略","toc":false,"date":"2018-01-10T11:17:10.000Z","_content":"\n项目中一定会用到缓存，能够最大程度的减少服务器压力，但有时候不同业务场景对缓存的使用方式也有所不同，比如我们项目服务端使用的memcached缓存，但当页面大于1M的时候缓存就无法保存，这样缓存的功能就无效了。\n\n之前的逻辑就是缓存失效后逻辑代码组装\n","source":"_posts/nodejs项目缓存策略.md","raw":"---\ntitle: nodejs项目缓存策略\ntags:\n  - nodejs\ncategories:\n  - NodeJS\ntoc: false\ndate: 2018-01-10 19:17:10\n---\n\n项目中一定会用到缓存，能够最大程度的减少服务器压力，但有时候不同业务场景对缓存的使用方式也有所不同，比如我们项目服务端使用的memcached缓存，但当页面大于1M的时候缓存就无法保存，这样缓存的功能就无效了。\n\n之前的逻辑就是缓存失效后逻辑代码组装\n","slug":"nodejs项目缓存策略","published":1,"updated":"2019-11-07T02:17:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznzd0052h5s68r3jqyfa","content":"<p>项目中一定会用到缓存，能够最大程度的减少服务器压力，但有时候不同业务场景对缓存的使用方式也有所不同，比如我们项目服务端使用的memcached缓存，但当页面大于1M的时候缓存就无法保存，这样缓存的功能就无效了。</p>\n<p>之前的逻辑就是缓存失效后逻辑代码组装</p>\n","site":{"data":{}},"excerpt":"","more":"<p>项目中一定会用到缓存，能够最大程度的减少服务器压力，但有时候不同业务场景对缓存的使用方式也有所不同，比如我们项目服务端使用的memcached缓存，但当页面大于1M的时候缓存就无法保存，这样缓存的功能就无效了。</p>\n<p>之前的逻辑就是缓存失效后逻辑代码组装</p>\n"},{"title":"nvm永久切换node版本","toc":false,"date":"2017-12-26T07:30:23.000Z","_content":"\n一行命令而已：\n\n```\nnvm alias default 7.6.0\n```\n\n通过 `nvm use 7.6.0` 只能在当前控制台临时修改版本，为了避免麻烦，可以使用上边的命令修改。\n","source":"_posts/nvm-切换node版本.md","raw":"---\ntitle: nvm永久切换node版本\ntags:\n  - nodejs\ncategories:\n  - NodeJS\ntoc: false\ndate: 2017-12-26 15:30:23\n---\n\n一行命令而已：\n\n```\nnvm alias default 7.6.0\n```\n\n通过 `nvm use 7.6.0` 只能在当前控制台临时修改版本，为了避免麻烦，可以使用上边的命令修改。\n","slug":"nvm-切换node版本","published":1,"updated":"2019-11-07T02:17:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznze0055h5s6641xcpds","content":"<p>一行命令而已：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm alias default 7.6.0</span><br></pre></td></tr></table></figure>\n<p>通过 <code>nvm use 7.6.0</code> 只能在当前控制台临时修改版本，为了避免麻烦，可以使用上边的命令修改。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>一行命令而已：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm alias default 7.6.0</span><br></pre></td></tr></table></figure>\n<p>通过 <code>nvm use 7.6.0</code> 只能在当前控制台临时修改版本，为了避免麻烦，可以使用上边的命令修改。</p>\n"},{"title":"nodejs+redis应用","toc":false,"date":"2017-10-10T03:20:26.000Z","_content":"\n1. 什么是Redis\n\n\tRedis是一个基于BSD开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API.\n\n\t<!-- more -->\n\t\n\t1. Redis存储的是一个个的键值对\n\t2. 通常用Redis做缓存数据库\n\t3. Redis的五种数据类型(字符串，哈希，链表，无序集合，有序集合)\n\n2. Redis安装\n\n\tRedis官方不支持windows安装，所以我们这里以centos7 为例：\n\t\n\t```\n\t$ rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\n\t$ rpm -Uvh https://centos7.iuscommunity.org/ius-release.rpm\n\t$ yum install redis -y\n\t$ systemctl start redis\n\t$ systemctl enable redis\n\t$ systemctl status redis\n\t```\n\n3. Redis运行\n\tRedis服务器默认使用6379端口\n\t\n\t> resis-server\n\t\n\t也可以自己指定端口\n\t\n\t> redis-server --port 6380\n\t\n\t客户端通过\n\t\n\t> redis-cli\n\t\n\t来连接数据库服务器\n\t\n\t也可以指定服务器地址和端口\n\t\n\t> redis-cli -h 127.0.0.1 -p 6380\n\t\n\t测试客户端和服务器是否连通\n\t\n\t> PING\n\t\n\t返回PONG说明连通了\n\n\t![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/QQ20171010-140354.png)\n\n4. Redis的基本使用\n\n\t4.1 字符串\n\t\n\tset key value 设置key的value\n\t\n\tget key 得到key的value\n\t\n\tincr key key如果是整型自增1\n\t\n\tkeys * 得到所有key\n\t\n\t![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/QQ20171010-140737.png)\n\n\t4.2 哈希\n\t\n\thset key filed value 设置key对象的field属性的value\n\t\n\thget key filed 得到key对象的field属性的value\n\t\n\thgetall key 得到key对象的所有的属性和值\n\n\t![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-141134.png)\n\n\t4.3 链表\n\t\n\t适合存储社交网站的新鲜事\n\t\n\tlpush key value [value ...] 向链表key左边添加元素\n\t\n\trpush key value [value...] 向链表key右边添加元素\n\t\n\tlpop key 移除key链表左边第一个元素\n\t\n\trpop key 移除key链表右边第一元素\n\t\n\tlrange key start stop 获取链表中某一段，包含最大值，-1表示最后一个元素\n\t![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-141515.png)\n\n\t4.4 集合类型\n\t\n\t适合存储文章的标签，因为是唯一的\n\t\n\tsadd key member [member ...] 向集合key中添加元素，如果元素已经存在则忽略\n\t\n\tsrem key member [member ...] 从集合key中删除元素\n\t\n\tsmembers key 返回集合key中所有的元素\n\t\n\tsinter key [key ...] 多个集合执行交集运算\n\t\n\tsdiff key [key ...] 多个集合执行差集运算\n\t\n\tsunion key [key ...] 多个集合执行并集运算\n\t![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-141834.png)\n\n\t4.5 有序集合\n\t\n\t适用于通过文章访问量排序\n\t\n\tzadd key score member [score member ...] 向有序集合key中加入一个或多个元素和分数，如果元素已经存在，则替换分数\n\t\n\tzrem key member [member ...] 删除集合中一个或多个元素\n\t\n\tzrange key start stop [withscores] 按元素分数从小到大顺序返回元素，如需获得对应元素的分数，在尾部加上withscores\n\t\n\tzrevrange key start stop [withscores] 按元素分数从大到小顺序返回元素\n\t![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-142158.png)\n\n5.Redis 数据库桌面管理工具\n\n下载地址:http://redisdesktop.com/download\n\n可以很方便的管理Redis数据库里的键值对\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-150845@2x.png)\n\n6.Redis 数据库其他说明\nRedis默认支持16个数据库，编号0~15，每个数据库是独立的不能相互访问，可以通过\n\n> SELECT 数据库编号\n\n来更换数据库\n\nRedis不支持自定义数据库名字\n\nRedis不支持每个数据库设置不同的密码\n\n我们可以通过配置参数database修改支持的数据库个数，当选择的数据库编号超过最大数据库编号，默认使用最大数据库编号的数据库\n\n清空当前数据库的所有内容\n\n> flushdb\n\n清空所有数据库的所有内容\n\n> flushall\n\n随机返回当前数据库的一个键\n\n> randomkey\n\n删除一个或多个key\n\n> del key\n\n返回给定哈希表中所有键的值\n\n> hvals key\n\n**如果需要将redis用作缓存，可以设置生存时间，这样就不会持久化存储**\n\n设置某个键的生存时间\n\n1.(以秒为单位)\n\n> expire key time\n\n2.(以毫秒为单位)\n\n> pexpire key time\n\n以秒为单位返回给定key的剩余生存时间，没有设置生存时间则返回-1\n\n> ttl key\n\n下面我们来看一下怎么样在nodejs中使用redis\n\n1. 安装redis模块\n\n\t> npm install redis\n\n\t通过redis.createClient(port,host,options)来连接redis服务器\n\n```\nvar redis = require(\"redis\"),\n    client = redis.createClient(6380,\"117.121.25.228\",{});\n\nexports.throw = function(bottle,callback){\n    bottle.time = bottle.time || Date.now();\n    var bottleId = Math.random().toString(16);\n    var type = {male:0,female:1};\n    console.log(type[bottle.type]);\n    /*client.SELECT选择数据库编号*/\n    client.SELECT(type[bottle.type],function(){\n        /*client.HMSET 保存哈希键值*/\n        client.HMSET(bottleId,bottle,function(err,result){\n            if(err){\n                return callback({code:0,msg:\"过会儿再来试试吧！\"});\n            }\n            callback({code:1,msg:result});\n            /*设置过期时间为1天*/\n            client.EXPIRE(bottleId,86400);\n        });\n    });\n}\nexports.pick = function(info,callback){\n    var type = {all:Math.round(Math.random()),male:0,female:1};\n    info.type = info.type || 'all';\n    client.SELECT(type[info.type],function(){\n        /*随机返回当前数据库的一个键*/\n        client.RANDOMKEY(function(err,bottleId){\n            if(!bottleId){\n                return callback({code:0,msg:\"大海空空如也...\"});\n            }\n            /*根据key返回哈希对象*/\n            client.HGETALL(bottleId,function(err,bottle){\n                if(err){\n                    return callback({code:0,msg:\"漂流瓶破损了...\"});\n                }\n                callback({code:1,msg:bottle});\n                /*根据key删除键值*/\n                client.DEL(bottleId);\n            });\n        });\n    });\n}\n```\n\n作者：隔壁陈叔叔\n\n链接：[http://www.jianshu.com/p/dbc1da93eae5](http://www.jianshu.com/p/dbc1da93eae5)\n\n來源：简书\n\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n","source":"_posts/nodejs+redis应用.md","raw":"---\ntitle: nodejs+redis应用\ntags:\n  - redis\ncategories:\n  - NodeJS\ntoc: false\ndate: 2017-10-10 11:20:26\n---\n\n1. 什么是Redis\n\n\tRedis是一个基于BSD开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API.\n\n\t<!-- more -->\n\t\n\t1. Redis存储的是一个个的键值对\n\t2. 通常用Redis做缓存数据库\n\t3. Redis的五种数据类型(字符串，哈希，链表，无序集合，有序集合)\n\n2. Redis安装\n\n\tRedis官方不支持windows安装，所以我们这里以centos7 为例：\n\t\n\t```\n\t$ rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\n\t$ rpm -Uvh https://centos7.iuscommunity.org/ius-release.rpm\n\t$ yum install redis -y\n\t$ systemctl start redis\n\t$ systemctl enable redis\n\t$ systemctl status redis\n\t```\n\n3. Redis运行\n\tRedis服务器默认使用6379端口\n\t\n\t> resis-server\n\t\n\t也可以自己指定端口\n\t\n\t> redis-server --port 6380\n\t\n\t客户端通过\n\t\n\t> redis-cli\n\t\n\t来连接数据库服务器\n\t\n\t也可以指定服务器地址和端口\n\t\n\t> redis-cli -h 127.0.0.1 -p 6380\n\t\n\t测试客户端和服务器是否连通\n\t\n\t> PING\n\t\n\t返回PONG说明连通了\n\n\t![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/QQ20171010-140354.png)\n\n4. Redis的基本使用\n\n\t4.1 字符串\n\t\n\tset key value 设置key的value\n\t\n\tget key 得到key的value\n\t\n\tincr key key如果是整型自增1\n\t\n\tkeys * 得到所有key\n\t\n\t![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/QQ20171010-140737.png)\n\n\t4.2 哈希\n\t\n\thset key filed value 设置key对象的field属性的value\n\t\n\thget key filed 得到key对象的field属性的value\n\t\n\thgetall key 得到key对象的所有的属性和值\n\n\t![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-141134.png)\n\n\t4.3 链表\n\t\n\t适合存储社交网站的新鲜事\n\t\n\tlpush key value [value ...] 向链表key左边添加元素\n\t\n\trpush key value [value...] 向链表key右边添加元素\n\t\n\tlpop key 移除key链表左边第一个元素\n\t\n\trpop key 移除key链表右边第一元素\n\t\n\tlrange key start stop 获取链表中某一段，包含最大值，-1表示最后一个元素\n\t![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-141515.png)\n\n\t4.4 集合类型\n\t\n\t适合存储文章的标签，因为是唯一的\n\t\n\tsadd key member [member ...] 向集合key中添加元素，如果元素已经存在则忽略\n\t\n\tsrem key member [member ...] 从集合key中删除元素\n\t\n\tsmembers key 返回集合key中所有的元素\n\t\n\tsinter key [key ...] 多个集合执行交集运算\n\t\n\tsdiff key [key ...] 多个集合执行差集运算\n\t\n\tsunion key [key ...] 多个集合执行并集运算\n\t![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-141834.png)\n\n\t4.5 有序集合\n\t\n\t适用于通过文章访问量排序\n\t\n\tzadd key score member [score member ...] 向有序集合key中加入一个或多个元素和分数，如果元素已经存在，则替换分数\n\t\n\tzrem key member [member ...] 删除集合中一个或多个元素\n\t\n\tzrange key start stop [withscores] 按元素分数从小到大顺序返回元素，如需获得对应元素的分数，在尾部加上withscores\n\t\n\tzrevrange key start stop [withscores] 按元素分数从大到小顺序返回元素\n\t![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-142158.png)\n\n5.Redis 数据库桌面管理工具\n\n下载地址:http://redisdesktop.com/download\n\n可以很方便的管理Redis数据库里的键值对\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-150845@2x.png)\n\n6.Redis 数据库其他说明\nRedis默认支持16个数据库，编号0~15，每个数据库是独立的不能相互访问，可以通过\n\n> SELECT 数据库编号\n\n来更换数据库\n\nRedis不支持自定义数据库名字\n\nRedis不支持每个数据库设置不同的密码\n\n我们可以通过配置参数database修改支持的数据库个数，当选择的数据库编号超过最大数据库编号，默认使用最大数据库编号的数据库\n\n清空当前数据库的所有内容\n\n> flushdb\n\n清空所有数据库的所有内容\n\n> flushall\n\n随机返回当前数据库的一个键\n\n> randomkey\n\n删除一个或多个key\n\n> del key\n\n返回给定哈希表中所有键的值\n\n> hvals key\n\n**如果需要将redis用作缓存，可以设置生存时间，这样就不会持久化存储**\n\n设置某个键的生存时间\n\n1.(以秒为单位)\n\n> expire key time\n\n2.(以毫秒为单位)\n\n> pexpire key time\n\n以秒为单位返回给定key的剩余生存时间，没有设置生存时间则返回-1\n\n> ttl key\n\n下面我们来看一下怎么样在nodejs中使用redis\n\n1. 安装redis模块\n\n\t> npm install redis\n\n\t通过redis.createClient(port,host,options)来连接redis服务器\n\n```\nvar redis = require(\"redis\"),\n    client = redis.createClient(6380,\"117.121.25.228\",{});\n\nexports.throw = function(bottle,callback){\n    bottle.time = bottle.time || Date.now();\n    var bottleId = Math.random().toString(16);\n    var type = {male:0,female:1};\n    console.log(type[bottle.type]);\n    /*client.SELECT选择数据库编号*/\n    client.SELECT(type[bottle.type],function(){\n        /*client.HMSET 保存哈希键值*/\n        client.HMSET(bottleId,bottle,function(err,result){\n            if(err){\n                return callback({code:0,msg:\"过会儿再来试试吧！\"});\n            }\n            callback({code:1,msg:result});\n            /*设置过期时间为1天*/\n            client.EXPIRE(bottleId,86400);\n        });\n    });\n}\nexports.pick = function(info,callback){\n    var type = {all:Math.round(Math.random()),male:0,female:1};\n    info.type = info.type || 'all';\n    client.SELECT(type[info.type],function(){\n        /*随机返回当前数据库的一个键*/\n        client.RANDOMKEY(function(err,bottleId){\n            if(!bottleId){\n                return callback({code:0,msg:\"大海空空如也...\"});\n            }\n            /*根据key返回哈希对象*/\n            client.HGETALL(bottleId,function(err,bottle){\n                if(err){\n                    return callback({code:0,msg:\"漂流瓶破损了...\"});\n                }\n                callback({code:1,msg:bottle});\n                /*根据key删除键值*/\n                client.DEL(bottleId);\n            });\n        });\n    });\n}\n```\n\n作者：隔壁陈叔叔\n\n链接：[http://www.jianshu.com/p/dbc1da93eae5](http://www.jianshu.com/p/dbc1da93eae5)\n\n來源：简书\n\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n","slug":"nodejs+redis应用","published":1,"updated":"2019-11-07T02:17:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznzi0059h5s6q9t4b20y","content":"<ol>\n<li><p>什么是Redis</p>\n<p> Redis是一个基于BSD开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API.</p>\n <a id=\"more\"></a>\n<ol>\n<li>Redis存储的是一个个的键值对</li>\n<li>通常用Redis做缓存数据库</li>\n<li>Redis的五种数据类型(字符串，哈希，链表，无序集合，有序集合)</li>\n</ol>\n</li>\n<li><p>Redis安装</p>\n<p> Redis官方不支持windows安装，所以我们这里以centos7 为例：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class=\"line\">$ rpm -Uvh https://centos7.iuscommunity.org/ius-release.rpm</span><br><span class=\"line\">$ yum install redis -y</span><br><span class=\"line\">$ systemctl start redis</span><br><span class=\"line\">$ systemctl enable redis</span><br><span class=\"line\">$ systemctl status redis</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Redis运行<br> Redis服务器默认使用6379端口</p>\n<blockquote>\n<p>resis-server</p>\n</blockquote>\n<p> 也可以自己指定端口</p>\n<blockquote>\n<p>redis-server –port 6380</p>\n</blockquote>\n<p> 客户端通过</p>\n<blockquote>\n<p>redis-cli</p>\n</blockquote>\n<p> 来连接数据库服务器</p>\n<p> 也可以指定服务器地址和端口</p>\n<blockquote>\n<p>redis-cli -h 127.0.0.1 -p 6380</p>\n</blockquote>\n<p> 测试客户端和服务器是否连通</p>\n<blockquote>\n<p>PING</p>\n</blockquote>\n<p> 返回PONG说明连通了</p>\n<p> <img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/QQ20171010-140354.png\" alt></p>\n</li>\n<li><p>Redis的基本使用</p>\n<p> 4.1 字符串</p>\n<p> set key value 设置key的value</p>\n<p> get key 得到key的value</p>\n<p> incr key key如果是整型自增1</p>\n<p> keys * 得到所有key</p>\n<p> <img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/QQ20171010-140737.png\" alt></p>\n<p> 4.2 哈希</p>\n<p> hset key filed value 设置key对象的field属性的value</p>\n<p> hget key filed 得到key对象的field属性的value</p>\n<p> hgetall key 得到key对象的所有的属性和值</p>\n<p> <img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-141134.png\" alt></p>\n<p> 4.3 链表</p>\n<p> 适合存储社交网站的新鲜事</p>\n<p> lpush key value [value …] 向链表key左边添加元素</p>\n<p> rpush key value [value…] 向链表key右边添加元素</p>\n<p> lpop key 移除key链表左边第一个元素</p>\n<p> rpop key 移除key链表右边第一元素</p>\n<p> lrange key start stop 获取链表中某一段，包含最大值，-1表示最后一个元素<br> <img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-141515.png\" alt></p>\n<p> 4.4 集合类型</p>\n<p> 适合存储文章的标签，因为是唯一的</p>\n<p> sadd key member [member …] 向集合key中添加元素，如果元素已经存在则忽略</p>\n<p> srem key member [member …] 从集合key中删除元素</p>\n<p> smembers key 返回集合key中所有的元素</p>\n<p> sinter key [key …] 多个集合执行交集运算</p>\n<p> sdiff key [key …] 多个集合执行差集运算</p>\n<p> sunion key [key …] 多个集合执行并集运算<br> <img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-141834.png\" alt></p>\n<p> 4.5 有序集合</p>\n<p> 适用于通过文章访问量排序</p>\n<p> zadd key score member [score member …] 向有序集合key中加入一个或多个元素和分数，如果元素已经存在，则替换分数</p>\n<p> zrem key member [member …] 删除集合中一个或多个元素</p>\n<p> zrange key start stop [withscores] 按元素分数从小到大顺序返回元素，如需获得对应元素的分数，在尾部加上withscores</p>\n<p> zrevrange key start stop [withscores] 按元素分数从大到小顺序返回元素<br> <img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-142158.png\" alt></p>\n</li>\n</ol>\n<p>5.Redis 数据库桌面管理工具</p>\n<p>下载地址:<a href=\"http://redisdesktop.com/download\" target=\"_blank\" rel=\"noopener\">http://redisdesktop.com/download</a></p>\n<p>可以很方便的管理Redis数据库里的键值对<br><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-150845@2x.png\" alt></p>\n<p>6.Redis 数据库其他说明<br>Redis默认支持16个数据库，编号0~15，每个数据库是独立的不能相互访问，可以通过</p>\n<blockquote>\n<p>SELECT 数据库编号</p>\n</blockquote>\n<p>来更换数据库</p>\n<p>Redis不支持自定义数据库名字</p>\n<p>Redis不支持每个数据库设置不同的密码</p>\n<p>我们可以通过配置参数database修改支持的数据库个数，当选择的数据库编号超过最大数据库编号，默认使用最大数据库编号的数据库</p>\n<p>清空当前数据库的所有内容</p>\n<blockquote>\n<p>flushdb</p>\n</blockquote>\n<p>清空所有数据库的所有内容</p>\n<blockquote>\n<p>flushall</p>\n</blockquote>\n<p>随机返回当前数据库的一个键</p>\n<blockquote>\n<p>randomkey</p>\n</blockquote>\n<p>删除一个或多个key</p>\n<blockquote>\n<p>del key</p>\n</blockquote>\n<p>返回给定哈希表中所有键的值</p>\n<blockquote>\n<p>hvals key</p>\n</blockquote>\n<p><strong>如果需要将redis用作缓存，可以设置生存时间，这样就不会持久化存储</strong></p>\n<p>设置某个键的生存时间</p>\n<p>1.(以秒为单位)</p>\n<blockquote>\n<p>expire key time</p>\n</blockquote>\n<p>2.(以毫秒为单位)</p>\n<blockquote>\n<p>pexpire key time</p>\n</blockquote>\n<p>以秒为单位返回给定key的剩余生存时间，没有设置生存时间则返回-1</p>\n<blockquote>\n<p>ttl key</p>\n</blockquote>\n<p>下面我们来看一下怎么样在nodejs中使用redis</p>\n<ol>\n<li><p>安装redis模块</p>\n<blockquote>\n<p>npm install redis</p>\n</blockquote>\n<p> 通过redis.createClient(port,host,options)来连接redis服务器</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var redis = require(&quot;redis&quot;),</span><br><span class=\"line\">    client = redis.createClient(6380,&quot;117.121.25.228&quot;,&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">exports.throw = function(bottle,callback)&#123;</span><br><span class=\"line\">    bottle.time = bottle.time || Date.now();</span><br><span class=\"line\">    var bottleId = Math.random().toString(16);</span><br><span class=\"line\">    var type = &#123;male:0,female:1&#125;;</span><br><span class=\"line\">    console.log(type[bottle.type]);</span><br><span class=\"line\">    /*client.SELECT选择数据库编号*/</span><br><span class=\"line\">    client.SELECT(type[bottle.type],function()&#123;</span><br><span class=\"line\">        /*client.HMSET 保存哈希键值*/</span><br><span class=\"line\">        client.HMSET(bottleId,bottle,function(err,result)&#123;</span><br><span class=\"line\">            if(err)&#123;</span><br><span class=\"line\">                return callback(&#123;code:0,msg:&quot;过会儿再来试试吧！&quot;&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            callback(&#123;code:1,msg:result&#125;);</span><br><span class=\"line\">            /*设置过期时间为1天*/</span><br><span class=\"line\">            client.EXPIRE(bottleId,86400);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">exports.pick = function(info,callback)&#123;</span><br><span class=\"line\">    var type = &#123;all:Math.round(Math.random()),male:0,female:1&#125;;</span><br><span class=\"line\">    info.type = info.type || &apos;all&apos;;</span><br><span class=\"line\">    client.SELECT(type[info.type],function()&#123;</span><br><span class=\"line\">        /*随机返回当前数据库的一个键*/</span><br><span class=\"line\">        client.RANDOMKEY(function(err,bottleId)&#123;</span><br><span class=\"line\">            if(!bottleId)&#123;</span><br><span class=\"line\">                return callback(&#123;code:0,msg:&quot;大海空空如也...&quot;&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            /*根据key返回哈希对象*/</span><br><span class=\"line\">            client.HGETALL(bottleId,function(err,bottle)&#123;</span><br><span class=\"line\">                if(err)&#123;</span><br><span class=\"line\">                    return callback(&#123;code:0,msg:&quot;漂流瓶破损了...&quot;&#125;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                callback(&#123;code:1,msg:bottle&#125;);</span><br><span class=\"line\">                /*根据key删除键值*/</span><br><span class=\"line\">                client.DEL(bottleId);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>作者：隔壁陈叔叔</p>\n<p>链接：<a href=\"http://www.jianshu.com/p/dbc1da93eae5\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/dbc1da93eae5</a></p>\n<p>來源：简书</p>\n<p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n","site":{"data":{}},"excerpt":"<ol>\n<li><p>什么是Redis</p>\n<p> Redis是一个基于BSD开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API.</p>","more":"<ol>\n<li>Redis存储的是一个个的键值对</li>\n<li>通常用Redis做缓存数据库</li>\n<li>Redis的五种数据类型(字符串，哈希，链表，无序集合，有序集合)</li>\n</ol>\n</li>\n<li><p>Redis安装</p>\n<p> Redis官方不支持windows安装，所以我们这里以centos7 为例：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class=\"line\">$ rpm -Uvh https://centos7.iuscommunity.org/ius-release.rpm</span><br><span class=\"line\">$ yum install redis -y</span><br><span class=\"line\">$ systemctl start redis</span><br><span class=\"line\">$ systemctl enable redis</span><br><span class=\"line\">$ systemctl status redis</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Redis运行<br> Redis服务器默认使用6379端口</p>\n<blockquote>\n<p>resis-server</p>\n</blockquote>\n<p> 也可以自己指定端口</p>\n<blockquote>\n<p>redis-server –port 6380</p>\n</blockquote>\n<p> 客户端通过</p>\n<blockquote>\n<p>redis-cli</p>\n</blockquote>\n<p> 来连接数据库服务器</p>\n<p> 也可以指定服务器地址和端口</p>\n<blockquote>\n<p>redis-cli -h 127.0.0.1 -p 6380</p>\n</blockquote>\n<p> 测试客户端和服务器是否连通</p>\n<blockquote>\n<p>PING</p>\n</blockquote>\n<p> 返回PONG说明连通了</p>\n<p> <img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/QQ20171010-140354.png\" alt></p>\n</li>\n<li><p>Redis的基本使用</p>\n<p> 4.1 字符串</p>\n<p> set key value 设置key的value</p>\n<p> get key 得到key的value</p>\n<p> incr key key如果是整型自增1</p>\n<p> keys * 得到所有key</p>\n<p> <img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/QQ20171010-140737.png\" alt></p>\n<p> 4.2 哈希</p>\n<p> hset key filed value 设置key对象的field属性的value</p>\n<p> hget key filed 得到key对象的field属性的value</p>\n<p> hgetall key 得到key对象的所有的属性和值</p>\n<p> <img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-141134.png\" alt></p>\n<p> 4.3 链表</p>\n<p> 适合存储社交网站的新鲜事</p>\n<p> lpush key value [value …] 向链表key左边添加元素</p>\n<p> rpush key value [value…] 向链表key右边添加元素</p>\n<p> lpop key 移除key链表左边第一个元素</p>\n<p> rpop key 移除key链表右边第一元素</p>\n<p> lrange key start stop 获取链表中某一段，包含最大值，-1表示最后一个元素<br> <img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-141515.png\" alt></p>\n<p> 4.4 集合类型</p>\n<p> 适合存储文章的标签，因为是唯一的</p>\n<p> sadd key member [member …] 向集合key中添加元素，如果元素已经存在则忽略</p>\n<p> srem key member [member …] 从集合key中删除元素</p>\n<p> smembers key 返回集合key中所有的元素</p>\n<p> sinter key [key …] 多个集合执行交集运算</p>\n<p> sdiff key [key …] 多个集合执行差集运算</p>\n<p> sunion key [key …] 多个集合执行并集运算<br> <img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-141834.png\" alt></p>\n<p> 4.5 有序集合</p>\n<p> 适用于通过文章访问量排序</p>\n<p> zadd key score member [score member …] 向有序集合key中加入一个或多个元素和分数，如果元素已经存在，则替换分数</p>\n<p> zrem key member [member …] 删除集合中一个或多个元素</p>\n<p> zrange key start stop [withscores] 按元素分数从小到大顺序返回元素，如需获得对应元素的分数，在尾部加上withscores</p>\n<p> zrevrange key start stop [withscores] 按元素分数从大到小顺序返回元素<br> <img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-142158.png\" alt></p>\n</li>\n</ol>\n<p>5.Redis 数据库桌面管理工具</p>\n<p>下载地址:<a href=\"http://redisdesktop.com/download\" target=\"_blank\" rel=\"noopener\">http://redisdesktop.com/download</a></p>\n<p>可以很方便的管理Redis数据库里的键值对<br><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/QQ20171010-150845@2x.png\" alt></p>\n<p>6.Redis 数据库其他说明<br>Redis默认支持16个数据库，编号0~15，每个数据库是独立的不能相互访问，可以通过</p>\n<blockquote>\n<p>SELECT 数据库编号</p>\n</blockquote>\n<p>来更换数据库</p>\n<p>Redis不支持自定义数据库名字</p>\n<p>Redis不支持每个数据库设置不同的密码</p>\n<p>我们可以通过配置参数database修改支持的数据库个数，当选择的数据库编号超过最大数据库编号，默认使用最大数据库编号的数据库</p>\n<p>清空当前数据库的所有内容</p>\n<blockquote>\n<p>flushdb</p>\n</blockquote>\n<p>清空所有数据库的所有内容</p>\n<blockquote>\n<p>flushall</p>\n</blockquote>\n<p>随机返回当前数据库的一个键</p>\n<blockquote>\n<p>randomkey</p>\n</blockquote>\n<p>删除一个或多个key</p>\n<blockquote>\n<p>del key</p>\n</blockquote>\n<p>返回给定哈希表中所有键的值</p>\n<blockquote>\n<p>hvals key</p>\n</blockquote>\n<p><strong>如果需要将redis用作缓存，可以设置生存时间，这样就不会持久化存储</strong></p>\n<p>设置某个键的生存时间</p>\n<p>1.(以秒为单位)</p>\n<blockquote>\n<p>expire key time</p>\n</blockquote>\n<p>2.(以毫秒为单位)</p>\n<blockquote>\n<p>pexpire key time</p>\n</blockquote>\n<p>以秒为单位返回给定key的剩余生存时间，没有设置生存时间则返回-1</p>\n<blockquote>\n<p>ttl key</p>\n</blockquote>\n<p>下面我们来看一下怎么样在nodejs中使用redis</p>\n<ol>\n<li><p>安装redis模块</p>\n<blockquote>\n<p>npm install redis</p>\n</blockquote>\n<p> 通过redis.createClient(port,host,options)来连接redis服务器</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var redis = require(&quot;redis&quot;),</span><br><span class=\"line\">    client = redis.createClient(6380,&quot;117.121.25.228&quot;,&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">exports.throw = function(bottle,callback)&#123;</span><br><span class=\"line\">    bottle.time = bottle.time || Date.now();</span><br><span class=\"line\">    var bottleId = Math.random().toString(16);</span><br><span class=\"line\">    var type = &#123;male:0,female:1&#125;;</span><br><span class=\"line\">    console.log(type[bottle.type]);</span><br><span class=\"line\">    /*client.SELECT选择数据库编号*/</span><br><span class=\"line\">    client.SELECT(type[bottle.type],function()&#123;</span><br><span class=\"line\">        /*client.HMSET 保存哈希键值*/</span><br><span class=\"line\">        client.HMSET(bottleId,bottle,function(err,result)&#123;</span><br><span class=\"line\">            if(err)&#123;</span><br><span class=\"line\">                return callback(&#123;code:0,msg:&quot;过会儿再来试试吧！&quot;&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            callback(&#123;code:1,msg:result&#125;);</span><br><span class=\"line\">            /*设置过期时间为1天*/</span><br><span class=\"line\">            client.EXPIRE(bottleId,86400);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">exports.pick = function(info,callback)&#123;</span><br><span class=\"line\">    var type = &#123;all:Math.round(Math.random()),male:0,female:1&#125;;</span><br><span class=\"line\">    info.type = info.type || &apos;all&apos;;</span><br><span class=\"line\">    client.SELECT(type[info.type],function()&#123;</span><br><span class=\"line\">        /*随机返回当前数据库的一个键*/</span><br><span class=\"line\">        client.RANDOMKEY(function(err,bottleId)&#123;</span><br><span class=\"line\">            if(!bottleId)&#123;</span><br><span class=\"line\">                return callback(&#123;code:0,msg:&quot;大海空空如也...&quot;&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            /*根据key返回哈希对象*/</span><br><span class=\"line\">            client.HGETALL(bottleId,function(err,bottle)&#123;</span><br><span class=\"line\">                if(err)&#123;</span><br><span class=\"line\">                    return callback(&#123;code:0,msg:&quot;漂流瓶破损了...&quot;&#125;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                callback(&#123;code:1,msg:bottle&#125;);</span><br><span class=\"line\">                /*根据key删除键值*/</span><br><span class=\"line\">                client.DEL(bottleId);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>作者：隔壁陈叔叔</p>\n<p>链接：<a href=\"http://www.jianshu.com/p/dbc1da93eae5\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/dbc1da93eae5</a></p>\n<p>來源：简书</p>\n<p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>"},{"title":"npm使用淘宝镜像","toc":false,"date":"2017-09-22T10:21:51.000Z","_content":"\n> 淘宝的npm镜像地址为：[https://registry.npm.taobao.org](https://registry.npm.taobao.org) \n\n<!-- more -->\n\n# 临时使用\n```\nnpm --registry https://registry.npm.taobao.org install xxx\n```\n\n# 永久使用\n```\nnpm config set registry https://registry.npm.taobao.org\n```\n\n配置后使用npm config get registry来看是否已经发生变化\n\n还有一种方式是通过使用cnpm，但是这种方式会有一个问题，通过cnpm安装的组件很多会在目录前边带有版本号，个人认为这个效果很差，由于它是一个软连接的方式进行的引用，在windows系统甚至会报错，所以在无法翻墙的情况下，使用永久的用法还是不错的。\n","source":"_posts/npm使用淘宝镜像.md","raw":"---\ntitle: npm使用淘宝镜像\ntags:\n  - nodejs\ncategories:\n  - NodeJS\ntoc: false\ndate: 2017-09-22 18:21:51\n---\n\n> 淘宝的npm镜像地址为：[https://registry.npm.taobao.org](https://registry.npm.taobao.org) \n\n<!-- more -->\n\n# 临时使用\n```\nnpm --registry https://registry.npm.taobao.org install xxx\n```\n\n# 永久使用\n```\nnpm config set registry https://registry.npm.taobao.org\n```\n\n配置后使用npm config get registry来看是否已经发生变化\n\n还有一种方式是通过使用cnpm，但是这种方式会有一个问题，通过cnpm安装的组件很多会在目录前边带有版本号，个人认为这个效果很差，由于它是一个软连接的方式进行的引用，在windows系统甚至会报错，所以在无法翻墙的情况下，使用永久的用法还是不错的。\n","slug":"npm使用淘宝镜像","published":1,"updated":"2019-11-07T02:17:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznzj005ch5s6r9ulyqgl","content":"<blockquote>\n<p>淘宝的npm镜像地址为：<a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a> </p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"临时使用\"><a href=\"#临时使用\" class=\"headerlink\" title=\"临时使用\"></a>临时使用</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm --registry https://registry.npm.taobao.org install xxx</span><br></pre></td></tr></table></figure>\n<h1 id=\"永久使用\"><a href=\"#永久使用\" class=\"headerlink\" title=\"永久使用\"></a>永久使用</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<p>配置后使用npm config get registry来看是否已经发生变化</p>\n<p>还有一种方式是通过使用cnpm，但是这种方式会有一个问题，通过cnpm安装的组件很多会在目录前边带有版本号，个人认为这个效果很差，由于它是一个软连接的方式进行的引用，在windows系统甚至会报错，所以在无法翻墙的情况下，使用永久的用法还是不错的。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>淘宝的npm镜像地址为：<a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a> </p>\n</blockquote>","more":"<h1 id=\"临时使用\"><a href=\"#临时使用\" class=\"headerlink\" title=\"临时使用\"></a>临时使用</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm --registry https://registry.npm.taobao.org install xxx</span><br></pre></td></tr></table></figure>\n<h1 id=\"永久使用\"><a href=\"#永久使用\" class=\"headerlink\" title=\"永久使用\"></a>永久使用</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<p>配置后使用npm config get registry来看是否已经发生变化</p>\n<p>还有一种方式是通过使用cnpm，但是这种方式会有一个问题，通过cnpm安装的组件很多会在目录前边带有版本号，个人认为这个效果很差，由于它是一个软连接的方式进行的引用，在windows系统甚至会报错，所以在无法翻墙的情况下，使用永久的用法还是不错的。</p>"},{"title":"pomelo之rpc坑","toc":false,"date":"2018-03-12T08:15:05.000Z","_content":"\n在使用pomelo的RPC功能时，由于不清楚它的尿性，最后的回调没有传入，导致一个问题\n\n服务器上总是有\n\n```\nrpc request timeout\nrpc callback timeout\n```\n\n的错误输出。但是却不影响业务，于是去代码里面搜索\n\n在mailbox那个文件中有这个输出\n\n原因是在每个rpc调用的时候会设置一个callback的timeout。\n\n若是在这个timeout内没有调用callback，则会产生如上输出\n\n后来果断在rpc中将callback传入，整个世界清静了。\n\n另外说一句，官方的chat示例中就有这个错误的示例。它在调用kick的时候callback传入的Null，不出意外的，一会以后它的输出也是rpc timeout….\n\n[原文地址](http://blog.csdn.net/nynyvkhhiiii/article/details/49757095)\n","source":"_posts/pomelo之rpc坑.md","raw":"---\ntitle: pomelo之rpc坑\ntags:\n  - pomelo\ncategories:\n  - 后端开发\ntoc: false\ndate: 2018-03-12 16:15:05\n---\n\n在使用pomelo的RPC功能时，由于不清楚它的尿性，最后的回调没有传入，导致一个问题\n\n服务器上总是有\n\n```\nrpc request timeout\nrpc callback timeout\n```\n\n的错误输出。但是却不影响业务，于是去代码里面搜索\n\n在mailbox那个文件中有这个输出\n\n原因是在每个rpc调用的时候会设置一个callback的timeout。\n\n若是在这个timeout内没有调用callback，则会产生如上输出\n\n后来果断在rpc中将callback传入，整个世界清静了。\n\n另外说一句，官方的chat示例中就有这个错误的示例。它在调用kick的时候callback传入的Null，不出意外的，一会以后它的输出也是rpc timeout….\n\n[原文地址](http://blog.csdn.net/nynyvkhhiiii/article/details/49757095)\n","slug":"pomelo之rpc坑","published":1,"updated":"2019-11-07T02:17:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznzl005gh5s6b26dpim8","content":"<p>在使用pomelo的RPC功能时，由于不清楚它的尿性，最后的回调没有传入，导致一个问题</p>\n<p>服务器上总是有</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpc request timeout</span><br><span class=\"line\">rpc callback timeout</span><br></pre></td></tr></table></figure>\n<p>的错误输出。但是却不影响业务，于是去代码里面搜索</p>\n<p>在mailbox那个文件中有这个输出</p>\n<p>原因是在每个rpc调用的时候会设置一个callback的timeout。</p>\n<p>若是在这个timeout内没有调用callback，则会产生如上输出</p>\n<p>后来果断在rpc中将callback传入，整个世界清静了。</p>\n<p>另外说一句，官方的chat示例中就有这个错误的示例。它在调用kick的时候callback传入的Null，不出意外的，一会以后它的输出也是rpc timeout….</p>\n<p><a href=\"http://blog.csdn.net/nynyvkhhiiii/article/details/49757095\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在使用pomelo的RPC功能时，由于不清楚它的尿性，最后的回调没有传入，导致一个问题</p>\n<p>服务器上总是有</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpc request timeout</span><br><span class=\"line\">rpc callback timeout</span><br></pre></td></tr></table></figure>\n<p>的错误输出。但是却不影响业务，于是去代码里面搜索</p>\n<p>在mailbox那个文件中有这个输出</p>\n<p>原因是在每个rpc调用的时候会设置一个callback的timeout。</p>\n<p>若是在这个timeout内没有调用callback，则会产生如上输出</p>\n<p>后来果断在rpc中将callback传入，整个世界清静了。</p>\n<p>另外说一句，官方的chat示例中就有这个错误的示例。它在调用kick的时候callback传入的Null，不出意外的，一会以后它的输出也是rpc timeout….</p>\n<p><a href=\"http://blog.csdn.net/nynyvkhhiiii/article/details/49757095\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n"},{"title":"pm2启动npm下服务的命令","toc":false,"date":"2018-03-27T06:40:07.000Z","_content":"\n有时候我们的项目只有npm命令执行启动，这时候还想用pm2来管理该怎么做呢：\n\n```\n# 其中run start就是npm指令 npm run start\npm2 start npm --name 'yourprojectname' -- run start\n```\n","source":"_posts/pm2启动npm下服务的命令.md","raw":"---\ntitle: pm2启动npm下服务的命令\ntags:\n  - nodejs\ncategories:\n  - NodeJS\ntoc: false\ndate: 2018-03-27 14:40:07\n---\n\n有时候我们的项目只有npm命令执行启动，这时候还想用pm2来管理该怎么做呢：\n\n```\n# 其中run start就是npm指令 npm run start\npm2 start npm --name 'yourprojectname' -- run start\n```\n","slug":"pm2启动npm下服务的命令","published":1,"updated":"2019-11-07T02:17:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznzn005jh5s6p4mbzcc9","content":"<p>有时候我们的项目只有npm命令执行启动，这时候还想用pm2来管理该怎么做呢：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 其中run start就是npm指令 npm run start</span><br><span class=\"line\">pm2 start npm --name &apos;yourprojectname&apos; -- run start</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>有时候我们的项目只有npm命令执行启动，这时候还想用pm2来管理该怎么做呢：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 其中run start就是npm指令 npm run start</span><br><span class=\"line\">pm2 start npm --name &apos;yourprojectname&apos; -- run start</span><br></pre></td></tr></table></figure>\n"},{"title":"vagrant ssh 本机连接方式","toc":false,"date":"2018-04-08T12:27:02.000Z","_content":"\nvagrant 启动虚拟机以后想通过本机的命令行进行连接，这时候需要用到openssh\n\n1. 安装openssh\n\n```\nyum install openssh-* -y\n```\n\n2. 查看及启动sshd\n\n```\nsystemctl status sshd\nsystemctl restart sshd\n```\n\n3. 修改配置文件\n\n```\nvi /etc/ssh/sshd_config\n```\n\n4. 去掉两处注释\n\n```\nPort 22\nListenAddress 0.0.0.0\n```\n\n5. 修改一处配置\n\n```\nPasswordAuthentication yes\n```\n\n有了这些东西就可以在别的机器上ssh到这个机器了，同时可以使用linux-ssh远程不输入密码\n","source":"_posts/vagrant-ssh-本机连接方式.md","raw":"---\ntitle: vagrant ssh 本机连接方式\ntags:\n  - vagrant\ncategories:\n  - 后端开发\ntoc: false\ndate: 2018-04-08 20:27:02\n---\n\nvagrant 启动虚拟机以后想通过本机的命令行进行连接，这时候需要用到openssh\n\n1. 安装openssh\n\n```\nyum install openssh-* -y\n```\n\n2. 查看及启动sshd\n\n```\nsystemctl status sshd\nsystemctl restart sshd\n```\n\n3. 修改配置文件\n\n```\nvi /etc/ssh/sshd_config\n```\n\n4. 去掉两处注释\n\n```\nPort 22\nListenAddress 0.0.0.0\n```\n\n5. 修改一处配置\n\n```\nPasswordAuthentication yes\n```\n\n有了这些东西就可以在别的机器上ssh到这个机器了，同时可以使用linux-ssh远程不输入密码\n","slug":"vagrant-ssh-本机连接方式","published":1,"updated":"2019-11-07T02:19:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznzo005nh5s6958nhpjn","content":"<p>vagrant 启动虚拟机以后想通过本机的命令行进行连接，这时候需要用到openssh</p>\n<ol>\n<li>安装openssh</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install openssh-* -y</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>查看及启动sshd</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status sshd</span><br><span class=\"line\">systemctl restart sshd</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>修改配置文件</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>去掉两处注释</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Port 22</span><br><span class=\"line\">ListenAddress 0.0.0.0</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>修改一处配置</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PasswordAuthentication yes</span><br></pre></td></tr></table></figure>\n<p>有了这些东西就可以在别的机器上ssh到这个机器了，同时可以使用linux-ssh远程不输入密码</p>\n","site":{"data":{}},"excerpt":"","more":"<p>vagrant 启动虚拟机以后想通过本机的命令行进行连接，这时候需要用到openssh</p>\n<ol>\n<li>安装openssh</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install openssh-* -y</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>查看及启动sshd</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status sshd</span><br><span class=\"line\">systemctl restart sshd</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>修改配置文件</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>去掉两处注释</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Port 22</span><br><span class=\"line\">ListenAddress 0.0.0.0</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>修改一处配置</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PasswordAuthentication yes</span><br></pre></td></tr></table></figure>\n<p>有了这些东西就可以在别的机器上ssh到这个机器了，同时可以使用linux-ssh远程不输入密码</p>\n"},{"title":"pomelo的HelloWorld","toc":false,"date":"2018-02-28T04:04:05.000Z","_content":"\n老传统，让我们也先从HelloWorld这个例子开始吧。\n\n## 新建项目\n\n使用pomelo的命令行工具可以**快速创建一个项目**，命令如下：\n\n```\npomelo init ./HelloWorld 或 pomelo init HelloWorld\n```\n\n或者你也可以使用下面的三个命令：\n\n```\nmkdir HelloWorld\ncd HelloWorld\npomelo init\n```\n\n这两种创建方式是等价的，更多关于pomelo命令行使用的文档，请参阅[pomelo命令行工具使用](https://github.com/NetEase/pomelo/wiki/pomelo%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8)。在初始化项目的时候，用户需要选择其底层使用的通信协议，分为socket.io和websocket，**选择1或2回车即可**。\n\n<!-- more -->\n\n然后，进入到HelloWorld文件夹，安装依赖包：\n\n```\nsh npm-install.sh\n```\n\nwindows用户，可以直接运行 `npm-install.bat`\n\n## 项目目录结构\n让我们来看看一个pomelo项目的大致结构\n\n新建立的项目结构如下图所示：\n\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/pomelo/HelloWorldFolder.png)\n\n该目录结构很清楚地展示了游戏项目的前后端分层结构，分别在各个目录下填写相关代码，即可快速开发游戏。下面对各个目录进行简要分析：\n\n### game-server\n**game-server是用pomelo框架搭建的游戏服务器**，以文件app.js作为入口，运行游戏的所有逻辑和功能。在接下来的开发中，**所有游戏逻辑、功能、配置等都在该目录下进行**。\n\n* app子目录\n\n这个目录下放置所有的**游戏服务器代码**的地方，用户在**这里实现不同类型的服务器**，添加对应的Handler，Remote等等。\n\n* config子目录\n\n**game-server下config包括了游戏服务器的所有配置信息**。配置信息以JSON文件的格式进行定义，包含有日志、master、server等服务器的配置信息。该目录还可以进行扩展，对数据库配置信息、地图信息和数值表等信息进行定义。总而言之，**这里是放着所有游戏服务器相关的配置信息的地方**。\n\n* logs子目录\n\n日志是项目中不可或缺的，可以对项目的运行情况进行很好的备份，也是系统运维的参考数据之一，**logs存放了游戏服务器所有的日志信息**。\n\n### shared\n\n**shared存放一些前后端、game-server与web-server共用代码**，由于都是javascript代码，那么对于一些工具或者算法代码，就可以前后端共用，极大地提高了代码重用性。\n\n### web-server\n\nweb-server是用express 3.x框架搭建的web服务器，以文件app.js作为入口，当然开发者可以选择Nginx等其他web服务器。如果游戏的客户端不是web的话，如Android平台的话，这个目录就不是必须的了。当然，**在这个例子中，我们的客户端是web，所以web服务器还是必须的**。\n\n## 启动项目\n对于我们这个例子来说，由于客户端是web，所以必须启动game-server(游戏服务器)和web-server(web服务器)\n\n启动game-server服务器：\n\n```\ncd game-server\npomelo start\n```\n\n启动web-server服务器：\n\n```\ncd web-server\nnode app \n```\n\n在启动过程中可能会有端口号冲突导致启动不成功，只需在config里面修改使用的端口号即可。如果上面的启动都没有问题的话，我们就可以对我们的HelloWorld进行测试了。用浏览器(推荐使用chrome)访问 http://localhost:3001或者 http://127.0.0.1:3001 即可, 点击Test Game Server，提示 game server is ok 说明运行成功，如下图所示：\n\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/pomelo/helloworld_test_snapshot.png)\n\n## 查看服务器\n可以使用`pomelo list`查看已经启动的服务器，如下图所示：\n\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/pomelo/list_snapshot.png)\n\n服务器状态可以查看5种状态信息：\n\n* serverId：服务器的serverId，同config配置表中的id。\n* serverType：服务器的serverType，同config配置表中的type。\n* pid：服务器对应的进程pid。\n* heapUsed：该服务器已经使用的堆大小（单位：兆）。\n* uptime：该服务器启动时长（单位：分钟）。\n\n## 关闭项目\n\n可以使用以下两种方式关闭项目：\n\n```\ncd game-server\npomelo stop\n```\n\n或者\n\n```\ncd game-server\npomelo kill\n```\n\n其中`pomelo stop`比较优雅，`pomelo kill`比较粗暴，安全性低，开发环境下可以使用，产品环境慎用，更详细的pomelo命令行用法请参阅[pomelo命令行工具使用](https://github.com/NetEase/pomelo/wiki/pomelo%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8)。\n\n## 小结\n到这里为止，我们已经成功安装了pomelo，并成功运行了HelloWorld。接下来，建议你看一下pomelo整体的一个较详细的概述。 如果你已经迫不及待地想写代码，可以去pomelo例子教程, 那里以一个chat应用为例，一步一步地向你展示如何来使用pomelo进行一个实际应用的开发，以及pomelo的一些API的使用方式等。\n","source":"_posts/pomelo的HelloWorld.md","raw":"---\ntitle: pomelo的HelloWorld\ntags:\n  - pomelo\ncategories:\n  - 后端开发\ntoc: false\ndate: 2018-02-28 12:04:05\n---\n\n老传统，让我们也先从HelloWorld这个例子开始吧。\n\n## 新建项目\n\n使用pomelo的命令行工具可以**快速创建一个项目**，命令如下：\n\n```\npomelo init ./HelloWorld 或 pomelo init HelloWorld\n```\n\n或者你也可以使用下面的三个命令：\n\n```\nmkdir HelloWorld\ncd HelloWorld\npomelo init\n```\n\n这两种创建方式是等价的，更多关于pomelo命令行使用的文档，请参阅[pomelo命令行工具使用](https://github.com/NetEase/pomelo/wiki/pomelo%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8)。在初始化项目的时候，用户需要选择其底层使用的通信协议，分为socket.io和websocket，**选择1或2回车即可**。\n\n<!-- more -->\n\n然后，进入到HelloWorld文件夹，安装依赖包：\n\n```\nsh npm-install.sh\n```\n\nwindows用户，可以直接运行 `npm-install.bat`\n\n## 项目目录结构\n让我们来看看一个pomelo项目的大致结构\n\n新建立的项目结构如下图所示：\n\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/pomelo/HelloWorldFolder.png)\n\n该目录结构很清楚地展示了游戏项目的前后端分层结构，分别在各个目录下填写相关代码，即可快速开发游戏。下面对各个目录进行简要分析：\n\n### game-server\n**game-server是用pomelo框架搭建的游戏服务器**，以文件app.js作为入口，运行游戏的所有逻辑和功能。在接下来的开发中，**所有游戏逻辑、功能、配置等都在该目录下进行**。\n\n* app子目录\n\n这个目录下放置所有的**游戏服务器代码**的地方，用户在**这里实现不同类型的服务器**，添加对应的Handler，Remote等等。\n\n* config子目录\n\n**game-server下config包括了游戏服务器的所有配置信息**。配置信息以JSON文件的格式进行定义，包含有日志、master、server等服务器的配置信息。该目录还可以进行扩展，对数据库配置信息、地图信息和数值表等信息进行定义。总而言之，**这里是放着所有游戏服务器相关的配置信息的地方**。\n\n* logs子目录\n\n日志是项目中不可或缺的，可以对项目的运行情况进行很好的备份，也是系统运维的参考数据之一，**logs存放了游戏服务器所有的日志信息**。\n\n### shared\n\n**shared存放一些前后端、game-server与web-server共用代码**，由于都是javascript代码，那么对于一些工具或者算法代码，就可以前后端共用，极大地提高了代码重用性。\n\n### web-server\n\nweb-server是用express 3.x框架搭建的web服务器，以文件app.js作为入口，当然开发者可以选择Nginx等其他web服务器。如果游戏的客户端不是web的话，如Android平台的话，这个目录就不是必须的了。当然，**在这个例子中，我们的客户端是web，所以web服务器还是必须的**。\n\n## 启动项目\n对于我们这个例子来说，由于客户端是web，所以必须启动game-server(游戏服务器)和web-server(web服务器)\n\n启动game-server服务器：\n\n```\ncd game-server\npomelo start\n```\n\n启动web-server服务器：\n\n```\ncd web-server\nnode app \n```\n\n在启动过程中可能会有端口号冲突导致启动不成功，只需在config里面修改使用的端口号即可。如果上面的启动都没有问题的话，我们就可以对我们的HelloWorld进行测试了。用浏览器(推荐使用chrome)访问 http://localhost:3001或者 http://127.0.0.1:3001 即可, 点击Test Game Server，提示 game server is ok 说明运行成功，如下图所示：\n\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/pomelo/helloworld_test_snapshot.png)\n\n## 查看服务器\n可以使用`pomelo list`查看已经启动的服务器，如下图所示：\n\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/pomelo/list_snapshot.png)\n\n服务器状态可以查看5种状态信息：\n\n* serverId：服务器的serverId，同config配置表中的id。\n* serverType：服务器的serverType，同config配置表中的type。\n* pid：服务器对应的进程pid。\n* heapUsed：该服务器已经使用的堆大小（单位：兆）。\n* uptime：该服务器启动时长（单位：分钟）。\n\n## 关闭项目\n\n可以使用以下两种方式关闭项目：\n\n```\ncd game-server\npomelo stop\n```\n\n或者\n\n```\ncd game-server\npomelo kill\n```\n\n其中`pomelo stop`比较优雅，`pomelo kill`比较粗暴，安全性低，开发环境下可以使用，产品环境慎用，更详细的pomelo命令行用法请参阅[pomelo命令行工具使用](https://github.com/NetEase/pomelo/wiki/pomelo%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8)。\n\n## 小结\n到这里为止，我们已经成功安装了pomelo，并成功运行了HelloWorld。接下来，建议你看一下pomelo整体的一个较详细的概述。 如果你已经迫不及待地想写代码，可以去pomelo例子教程, 那里以一个chat应用为例，一步一步地向你展示如何来使用pomelo进行一个实际应用的开发，以及pomelo的一些API的使用方式等。\n","slug":"pomelo的HelloWorld","published":1,"updated":"2019-11-07T02:17:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznzq005qh5s6rb7il4nj","content":"<p>老传统，让我们也先从HelloWorld这个例子开始吧。</p>\n<h2 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h2><p>使用pomelo的命令行工具可以<strong>快速创建一个项目</strong>，命令如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pomelo init ./HelloWorld 或 pomelo init HelloWorld</span><br></pre></td></tr></table></figure>\n<p>或者你也可以使用下面的三个命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir HelloWorld</span><br><span class=\"line\">cd HelloWorld</span><br><span class=\"line\">pomelo init</span><br></pre></td></tr></table></figure>\n<p>这两种创建方式是等价的，更多关于pomelo命令行使用的文档，请参阅<a href=\"https://github.com/NetEase/pomelo/wiki/pomelo%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8\" target=\"_blank\" rel=\"noopener\">pomelo命令行工具使用</a>。在初始化项目的时候，用户需要选择其底层使用的通信协议，分为socket.io和websocket，<strong>选择1或2回车即可</strong>。</p>\n<a id=\"more\"></a>\n<p>然后，进入到HelloWorld文件夹，安装依赖包：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh npm-install.sh</span><br></pre></td></tr></table></figure>\n<p>windows用户，可以直接运行 <code>npm-install.bat</code></p>\n<h2 id=\"项目目录结构\"><a href=\"#项目目录结构\" class=\"headerlink\" title=\"项目目录结构\"></a>项目目录结构</h2><p>让我们来看看一个pomelo项目的大致结构</p>\n<p>新建立的项目结构如下图所示：</p>\n<p><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/pomelo/HelloWorldFolder.png\" alt></p>\n<p>该目录结构很清楚地展示了游戏项目的前后端分层结构，分别在各个目录下填写相关代码，即可快速开发游戏。下面对各个目录进行简要分析：</p>\n<h3 id=\"game-server\"><a href=\"#game-server\" class=\"headerlink\" title=\"game-server\"></a>game-server</h3><p><strong>game-server是用pomelo框架搭建的游戏服务器</strong>，以文件app.js作为入口，运行游戏的所有逻辑和功能。在接下来的开发中，<strong>所有游戏逻辑、功能、配置等都在该目录下进行</strong>。</p>\n<ul>\n<li>app子目录</li>\n</ul>\n<p>这个目录下放置所有的<strong>游戏服务器代码</strong>的地方，用户在<strong>这里实现不同类型的服务器</strong>，添加对应的Handler，Remote等等。</p>\n<ul>\n<li>config子目录</li>\n</ul>\n<p><strong>game-server下config包括了游戏服务器的所有配置信息</strong>。配置信息以JSON文件的格式进行定义，包含有日志、master、server等服务器的配置信息。该目录还可以进行扩展，对数据库配置信息、地图信息和数值表等信息进行定义。总而言之，<strong>这里是放着所有游戏服务器相关的配置信息的地方</strong>。</p>\n<ul>\n<li>logs子目录</li>\n</ul>\n<p>日志是项目中不可或缺的，可以对项目的运行情况进行很好的备份，也是系统运维的参考数据之一，<strong>logs存放了游戏服务器所有的日志信息</strong>。</p>\n<h3 id=\"shared\"><a href=\"#shared\" class=\"headerlink\" title=\"shared\"></a>shared</h3><p><strong>shared存放一些前后端、game-server与web-server共用代码</strong>，由于都是javascript代码，那么对于一些工具或者算法代码，就可以前后端共用，极大地提高了代码重用性。</p>\n<h3 id=\"web-server\"><a href=\"#web-server\" class=\"headerlink\" title=\"web-server\"></a>web-server</h3><p>web-server是用express 3.x框架搭建的web服务器，以文件app.js作为入口，当然开发者可以选择Nginx等其他web服务器。如果游戏的客户端不是web的话，如Android平台的话，这个目录就不是必须的了。当然，<strong>在这个例子中，我们的客户端是web，所以web服务器还是必须的</strong>。</p>\n<h2 id=\"启动项目\"><a href=\"#启动项目\" class=\"headerlink\" title=\"启动项目\"></a>启动项目</h2><p>对于我们这个例子来说，由于客户端是web，所以必须启动game-server(游戏服务器)和web-server(web服务器)</p>\n<p>启动game-server服务器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd game-server</span><br><span class=\"line\">pomelo start</span><br></pre></td></tr></table></figure>\n<p>启动web-server服务器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd web-server</span><br><span class=\"line\">node app</span><br></pre></td></tr></table></figure>\n<p>在启动过程中可能会有端口号冲突导致启动不成功，只需在config里面修改使用的端口号即可。如果上面的启动都没有问题的话，我们就可以对我们的HelloWorld进行测试了。用浏览器(推荐使用chrome)访问 <a href=\"http://localhost:3001或者\" target=\"_blank\" rel=\"noopener\">http://localhost:3001或者</a> <a href=\"http://127.0.0.1:3001\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:3001</a> 即可, 点击Test Game Server，提示 game server is ok 说明运行成功，如下图所示：</p>\n<p><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/pomelo/helloworld_test_snapshot.png\" alt></p>\n<h2 id=\"查看服务器\"><a href=\"#查看服务器\" class=\"headerlink\" title=\"查看服务器\"></a>查看服务器</h2><p>可以使用<code>pomelo list</code>查看已经启动的服务器，如下图所示：</p>\n<p><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/pomelo/list_snapshot.png\" alt></p>\n<p>服务器状态可以查看5种状态信息：</p>\n<ul>\n<li>serverId：服务器的serverId，同config配置表中的id。</li>\n<li>serverType：服务器的serverType，同config配置表中的type。</li>\n<li>pid：服务器对应的进程pid。</li>\n<li>heapUsed：该服务器已经使用的堆大小（单位：兆）。</li>\n<li>uptime：该服务器启动时长（单位：分钟）。</li>\n</ul>\n<h2 id=\"关闭项目\"><a href=\"#关闭项目\" class=\"headerlink\" title=\"关闭项目\"></a>关闭项目</h2><p>可以使用以下两种方式关闭项目：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd game-server</span><br><span class=\"line\">pomelo stop</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd game-server</span><br><span class=\"line\">pomelo kill</span><br></pre></td></tr></table></figure>\n<p>其中<code>pomelo stop</code>比较优雅，<code>pomelo kill</code>比较粗暴，安全性低，开发环境下可以使用，产品环境慎用，更详细的pomelo命令行用法请参阅<a href=\"https://github.com/NetEase/pomelo/wiki/pomelo%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8\" target=\"_blank\" rel=\"noopener\">pomelo命令行工具使用</a>。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>到这里为止，我们已经成功安装了pomelo，并成功运行了HelloWorld。接下来，建议你看一下pomelo整体的一个较详细的概述。 如果你已经迫不及待地想写代码，可以去pomelo例子教程, 那里以一个chat应用为例，一步一步地向你展示如何来使用pomelo进行一个实际应用的开发，以及pomelo的一些API的使用方式等。</p>\n","site":{"data":{}},"excerpt":"<p>老传统，让我们也先从HelloWorld这个例子开始吧。</p>\n<h2 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h2><p>使用pomelo的命令行工具可以<strong>快速创建一个项目</strong>，命令如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pomelo init ./HelloWorld 或 pomelo init HelloWorld</span><br></pre></td></tr></table></figure>\n<p>或者你也可以使用下面的三个命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir HelloWorld</span><br><span class=\"line\">cd HelloWorld</span><br><span class=\"line\">pomelo init</span><br></pre></td></tr></table></figure>\n<p>这两种创建方式是等价的，更多关于pomelo命令行使用的文档，请参阅<a href=\"https://github.com/NetEase/pomelo/wiki/pomelo%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8\" target=\"_blank\" rel=\"noopener\">pomelo命令行工具使用</a>。在初始化项目的时候，用户需要选择其底层使用的通信协议，分为socket.io和websocket，<strong>选择1或2回车即可</strong>。</p>","more":"<p>然后，进入到HelloWorld文件夹，安装依赖包：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh npm-install.sh</span><br></pre></td></tr></table></figure>\n<p>windows用户，可以直接运行 <code>npm-install.bat</code></p>\n<h2 id=\"项目目录结构\"><a href=\"#项目目录结构\" class=\"headerlink\" title=\"项目目录结构\"></a>项目目录结构</h2><p>让我们来看看一个pomelo项目的大致结构</p>\n<p>新建立的项目结构如下图所示：</p>\n<p><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/pomelo/HelloWorldFolder.png\" alt></p>\n<p>该目录结构很清楚地展示了游戏项目的前后端分层结构，分别在各个目录下填写相关代码，即可快速开发游戏。下面对各个目录进行简要分析：</p>\n<h3 id=\"game-server\"><a href=\"#game-server\" class=\"headerlink\" title=\"game-server\"></a>game-server</h3><p><strong>game-server是用pomelo框架搭建的游戏服务器</strong>，以文件app.js作为入口，运行游戏的所有逻辑和功能。在接下来的开发中，<strong>所有游戏逻辑、功能、配置等都在该目录下进行</strong>。</p>\n<ul>\n<li>app子目录</li>\n</ul>\n<p>这个目录下放置所有的<strong>游戏服务器代码</strong>的地方，用户在<strong>这里实现不同类型的服务器</strong>，添加对应的Handler，Remote等等。</p>\n<ul>\n<li>config子目录</li>\n</ul>\n<p><strong>game-server下config包括了游戏服务器的所有配置信息</strong>。配置信息以JSON文件的格式进行定义，包含有日志、master、server等服务器的配置信息。该目录还可以进行扩展，对数据库配置信息、地图信息和数值表等信息进行定义。总而言之，<strong>这里是放着所有游戏服务器相关的配置信息的地方</strong>。</p>\n<ul>\n<li>logs子目录</li>\n</ul>\n<p>日志是项目中不可或缺的，可以对项目的运行情况进行很好的备份，也是系统运维的参考数据之一，<strong>logs存放了游戏服务器所有的日志信息</strong>。</p>\n<h3 id=\"shared\"><a href=\"#shared\" class=\"headerlink\" title=\"shared\"></a>shared</h3><p><strong>shared存放一些前后端、game-server与web-server共用代码</strong>，由于都是javascript代码，那么对于一些工具或者算法代码，就可以前后端共用，极大地提高了代码重用性。</p>\n<h3 id=\"web-server\"><a href=\"#web-server\" class=\"headerlink\" title=\"web-server\"></a>web-server</h3><p>web-server是用express 3.x框架搭建的web服务器，以文件app.js作为入口，当然开发者可以选择Nginx等其他web服务器。如果游戏的客户端不是web的话，如Android平台的话，这个目录就不是必须的了。当然，<strong>在这个例子中，我们的客户端是web，所以web服务器还是必须的</strong>。</p>\n<h2 id=\"启动项目\"><a href=\"#启动项目\" class=\"headerlink\" title=\"启动项目\"></a>启动项目</h2><p>对于我们这个例子来说，由于客户端是web，所以必须启动game-server(游戏服务器)和web-server(web服务器)</p>\n<p>启动game-server服务器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd game-server</span><br><span class=\"line\">pomelo start</span><br></pre></td></tr></table></figure>\n<p>启动web-server服务器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd web-server</span><br><span class=\"line\">node app</span><br></pre></td></tr></table></figure>\n<p>在启动过程中可能会有端口号冲突导致启动不成功，只需在config里面修改使用的端口号即可。如果上面的启动都没有问题的话，我们就可以对我们的HelloWorld进行测试了。用浏览器(推荐使用chrome)访问 <a href=\"http://localhost:3001或者\" target=\"_blank\" rel=\"noopener\">http://localhost:3001或者</a> <a href=\"http://127.0.0.1:3001\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:3001</a> 即可, 点击Test Game Server，提示 game server is ok 说明运行成功，如下图所示：</p>\n<p><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/pomelo/helloworld_test_snapshot.png\" alt></p>\n<h2 id=\"查看服务器\"><a href=\"#查看服务器\" class=\"headerlink\" title=\"查看服务器\"></a>查看服务器</h2><p>可以使用<code>pomelo list</code>查看已经启动的服务器，如下图所示：</p>\n<p><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/pomelo/list_snapshot.png\" alt></p>\n<p>服务器状态可以查看5种状态信息：</p>\n<ul>\n<li>serverId：服务器的serverId，同config配置表中的id。</li>\n<li>serverType：服务器的serverType，同config配置表中的type。</li>\n<li>pid：服务器对应的进程pid。</li>\n<li>heapUsed：该服务器已经使用的堆大小（单位：兆）。</li>\n<li>uptime：该服务器启动时长（单位：分钟）。</li>\n</ul>\n<h2 id=\"关闭项目\"><a href=\"#关闭项目\" class=\"headerlink\" title=\"关闭项目\"></a>关闭项目</h2><p>可以使用以下两种方式关闭项目：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd game-server</span><br><span class=\"line\">pomelo stop</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd game-server</span><br><span class=\"line\">pomelo kill</span><br></pre></td></tr></table></figure>\n<p>其中<code>pomelo stop</code>比较优雅，<code>pomelo kill</code>比较粗暴，安全性低，开发环境下可以使用，产品环境慎用，更详细的pomelo命令行用法请参阅<a href=\"https://github.com/NetEase/pomelo/wiki/pomelo%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8\" target=\"_blank\" rel=\"noopener\">pomelo命令行工具使用</a>。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>到这里为止，我们已经成功安装了pomelo，并成功运行了HelloWorld。接下来，建议你看一下pomelo整体的一个较详细的概述。 如果你已经迫不及待地想写代码，可以去pomelo例子教程, 那里以一个chat应用为例，一步一步地向你展示如何来使用pomelo进行一个实际应用的开发，以及pomelo的一些API的使用方式等。</p>"},{"title":"uptime命令","toc":false,"date":"2018-01-24T02:48:47.000Z","_content":"\nuptime命令能够打印系统总共运行了多长时间和系统的平均负载。uptime命令可以显示的信息显示依次为：现在时间、系统已经运行了多长时间、目前有多少登陆用户、系统在过去的1分钟、5分钟和15分钟内的平均负载。\n\n## 语法\n\n```\nuptime(选项)\n```\n\n## 选项\n\n```\n-V：显示指令的版本信息。\n```\n\n## 实例\n\n使用uptime命令查看系统负载：\n\n```\n[root@LinServ-1 ~]# uptime -V    #显示uptime命令版本信息\nprocps version 3.2.7\n\n[root@LinServ-1 ~]# uptime\n 15:31:30 up 127 days,  3:00,  1 user,  load average: 0.00, 0.00, 0.00\n```\n\n<!-- more -->\n\n显示内容说明：\n\n```\n15:31:30             //系统当前时间\nup 127 days,  3:00   //主机已运行时间,时间越大，说明你的机器越稳定。\n1 user               //用户连接数，是总连接数而不是用户数\nload average: 0.00, 0.00, 0.00         // 系统平均负载，统计最近1，5，15分钟的系统平均负载\n```\n\n那么什么是系统平均负载呢？ 系统平均负载是指在特定时间间隔内运行队列中的平均进程数。\n\n如果每个CPU内核的当前活动进程数不大于3的话，那么系统的性能是良好的。如果每个CPU内核的任务数大于5，那么这台机器的性能有严重问题。\n\n如果你的linux主机是1个双核CPU的话，当Load Average 为6的时候说明机器已经被充分使用了。\n\n[原文地址](http://man.linuxde.net/uptime)\n","source":"_posts/uptime命令.md","raw":"---\ntitle: uptime命令\ntags:\n  - linux\ncategories:\n  - 后端开发\ntoc: false\ndate: 2018-01-24 10:48:47\n---\n\nuptime命令能够打印系统总共运行了多长时间和系统的平均负载。uptime命令可以显示的信息显示依次为：现在时间、系统已经运行了多长时间、目前有多少登陆用户、系统在过去的1分钟、5分钟和15分钟内的平均负载。\n\n## 语法\n\n```\nuptime(选项)\n```\n\n## 选项\n\n```\n-V：显示指令的版本信息。\n```\n\n## 实例\n\n使用uptime命令查看系统负载：\n\n```\n[root@LinServ-1 ~]# uptime -V    #显示uptime命令版本信息\nprocps version 3.2.7\n\n[root@LinServ-1 ~]# uptime\n 15:31:30 up 127 days,  3:00,  1 user,  load average: 0.00, 0.00, 0.00\n```\n\n<!-- more -->\n\n显示内容说明：\n\n```\n15:31:30             //系统当前时间\nup 127 days,  3:00   //主机已运行时间,时间越大，说明你的机器越稳定。\n1 user               //用户连接数，是总连接数而不是用户数\nload average: 0.00, 0.00, 0.00         // 系统平均负载，统计最近1，5，15分钟的系统平均负载\n```\n\n那么什么是系统平均负载呢？ 系统平均负载是指在特定时间间隔内运行队列中的平均进程数。\n\n如果每个CPU内核的当前活动进程数不大于3的话，那么系统的性能是良好的。如果每个CPU内核的任务数大于5，那么这台机器的性能有严重问题。\n\n如果你的linux主机是1个双核CPU的话，当Load Average 为6的时候说明机器已经被充分使用了。\n\n[原文地址](http://man.linuxde.net/uptime)\n","slug":"uptime命令","published":1,"updated":"2019-11-07T02:19:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznzs005uh5s65bzf4ghw","content":"<p>uptime命令能够打印系统总共运行了多长时间和系统的平均负载。uptime命令可以显示的信息显示依次为：现在时间、系统已经运行了多长时间、目前有多少登陆用户、系统在过去的1分钟、5分钟和15分钟内的平均负载。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uptime(选项)</span><br></pre></td></tr></table></figure>\n<h2 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-V：显示指令的版本信息。</span><br></pre></td></tr></table></figure>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>使用uptime命令查看系统负载：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@LinServ-1 ~]# uptime -V    #显示uptime命令版本信息</span><br><span class=\"line\">procps version 3.2.7</span><br><span class=\"line\"></span><br><span class=\"line\">[root@LinServ-1 ~]# uptime</span><br><span class=\"line\"> 15:31:30 up 127 days,  3:00,  1 user,  load average: 0.00, 0.00, 0.00</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>显示内容说明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">15:31:30             //系统当前时间</span><br><span class=\"line\">up 127 days,  3:00   //主机已运行时间,时间越大，说明你的机器越稳定。</span><br><span class=\"line\">1 user               //用户连接数，是总连接数而不是用户数</span><br><span class=\"line\">load average: 0.00, 0.00, 0.00         // 系统平均负载，统计最近1，5，15分钟的系统平均负载</span><br></pre></td></tr></table></figure>\n<p>那么什么是系统平均负载呢？ 系统平均负载是指在特定时间间隔内运行队列中的平均进程数。</p>\n<p>如果每个CPU内核的当前活动进程数不大于3的话，那么系统的性能是良好的。如果每个CPU内核的任务数大于5，那么这台机器的性能有严重问题。</p>\n<p>如果你的linux主机是1个双核CPU的话，当Load Average 为6的时候说明机器已经被充分使用了。</p>\n<p><a href=\"http://man.linuxde.net/uptime\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n","site":{"data":{}},"excerpt":"<p>uptime命令能够打印系统总共运行了多长时间和系统的平均负载。uptime命令可以显示的信息显示依次为：现在时间、系统已经运行了多长时间、目前有多少登陆用户、系统在过去的1分钟、5分钟和15分钟内的平均负载。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uptime(选项)</span><br></pre></td></tr></table></figure>\n<h2 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-V：显示指令的版本信息。</span><br></pre></td></tr></table></figure>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>使用uptime命令查看系统负载：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@LinServ-1 ~]# uptime -V    #显示uptime命令版本信息</span><br><span class=\"line\">procps version 3.2.7</span><br><span class=\"line\"></span><br><span class=\"line\">[root@LinServ-1 ~]# uptime</span><br><span class=\"line\"> 15:31:30 up 127 days,  3:00,  1 user,  load average: 0.00, 0.00, 0.00</span><br></pre></td></tr></table></figure>","more":"<p>显示内容说明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">15:31:30             //系统当前时间</span><br><span class=\"line\">up 127 days,  3:00   //主机已运行时间,时间越大，说明你的机器越稳定。</span><br><span class=\"line\">1 user               //用户连接数，是总连接数而不是用户数</span><br><span class=\"line\">load average: 0.00, 0.00, 0.00         // 系统平均负载，统计最近1，5，15分钟的系统平均负载</span><br></pre></td></tr></table></figure>\n<p>那么什么是系统平均负载呢？ 系统平均负载是指在特定时间间隔内运行队列中的平均进程数。</p>\n<p>如果每个CPU内核的当前活动进程数不大于3的话，那么系统的性能是良好的。如果每个CPU内核的任务数大于5，那么这台机器的性能有严重问题。</p>\n<p>如果你的linux主机是1个双核CPU的话，当Load Average 为6的时候说明机器已经被充分使用了。</p>\n<p><a href=\"http://man.linuxde.net/uptime\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>"},{"title":"vue源码中有ts语法，vscode查看提示错误问题","toc":false,"date":"2019-07-05T06:17:34.000Z","_content":"\n![image.png](http://blogimage.houjiyi.com/FgAljCtSYWGdSzOMaARnwcGI80gg)\n\n这个原因是因为vscode默认开启了对js文件的验证检查，可以在用户设置区禁用它，如图最后一行\n\n![image.png](http://blogimage.houjiyi.com/FvlhISS_7KW8RUIaNJ2zNXY1B0ir)\n\n这样即可让vscode不再错误的验证了。\n","source":"_posts/vue源码中有ts语法，vscode查看提示错误问题.md","raw":"---\ntitle: vue源码中有ts语法，vscode查看提示错误问题\ntags:\n  - 知识点备忘\ncategories:\n  - Web开发\ntoc: false\ndate: 2019-07-05 14:17:34\n---\n\n![image.png](http://blogimage.houjiyi.com/FgAljCtSYWGdSzOMaARnwcGI80gg)\n\n这个原因是因为vscode默认开启了对js文件的验证检查，可以在用户设置区禁用它，如图最后一行\n\n![image.png](http://blogimage.houjiyi.com/FvlhISS_7KW8RUIaNJ2zNXY1B0ir)\n\n这样即可让vscode不再错误的验证了。\n","slug":"vue源码中有ts语法，vscode查看提示错误问题","published":1,"updated":"2019-11-07T02:19:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznzt005xh5s69uo5sj09","content":"<p><img src=\"http://blogimage.houjiyi.com/FgAljCtSYWGdSzOMaARnwcGI80gg\" alt=\"image.png\"></p>\n<p>这个原因是因为vscode默认开启了对js文件的验证检查，可以在用户设置区禁用它，如图最后一行</p>\n<p><img src=\"http://blogimage.houjiyi.com/FvlhISS_7KW8RUIaNJ2zNXY1B0ir\" alt=\"image.png\"></p>\n<p>这样即可让vscode不再错误的验证了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://blogimage.houjiyi.com/FgAljCtSYWGdSzOMaARnwcGI80gg\" alt=\"image.png\"></p>\n<p>这个原因是因为vscode默认开启了对js文件的验证检查，可以在用户设置区禁用它，如图最后一行</p>\n<p><img src=\"http://blogimage.houjiyi.com/FvlhISS_7KW8RUIaNJ2zNXY1B0ir\" alt=\"image.png\"></p>\n<p>这样即可让vscode不再错误的验证了。</p>\n"},{"title":"vi命令","toc":false,"date":"2018-01-23T04:05:10.000Z","_content":"\nvi命令是UNIX操作系统和类UNIX操作系统中最通用的全屏幕纯文本编辑器。Linux中的vi编辑器叫vim，它是vi的增强版（vi Improved），与vi编辑器完全兼容，而且实现了很多增强功能。\n\nvi编辑器支持编辑模式和命令模式，编辑模式下可以完成文本的编辑功能，命令模式下可以完成对文件的操作命令，要正确使用vi编辑器就必须熟练掌握着两种模式的切换。默认情况下，打开vi编辑器后自动进入命令模式。从编辑模式切换到命令模式使用“esc”键，从命令模式切换到编辑模式使用“A”、“a”、“O”、“o”、“I”、“i”键。\n\nvi编辑器提供了丰富的内置命令，有些内置命令使用键盘组合键即可完成，有些内置命令则需要以冒号“：”开头输入。常用内置命令如下：\n\n<!-- more -->\n\n```\nCtrl+u：向文件首翻半屏；\nCtrl+d：向文件尾翻半屏；\nCtrl+f：向文件尾翻一屏；\nCtrl+b：向文件首翻一屏；\nEsc：从编辑模式切换到命令模式；\nZZ：命令模式下保存当前文件所做的修改后退出vi；\n:行号：光标跳转到指定行的行首；\n:$：光标跳转到最后一行的行首；\nx或X：删除一个字符，x删除光标后的，而X删除光标前的；\nD：删除从当前光标到光标所在行尾的全部字符；\ndd：删除光标行正行内容；\nndd：删除当前行及其后n-1行；\nnyy：将当前行及其下n行的内容保存到寄存器？中，其中？为一个字母，n为一个数字；\np：粘贴文本操作，用于将缓存区的内容粘贴到当前光标所在位置的下方；\nP：粘贴文本操作，用于将缓存区的内容粘贴到当前光标所在位置的上方；\n/字符串：文本查找操作，用于从当前光标所在位置开始向文件尾部查找指定字符串的内容，查找的字符串会被加亮显示；\n？name：文本查找操作，用于从当前光标所在位置开始向文件头部查找指定字符串的内容，查找的字符串会被加亮显示；\na，bs/F/T：替换文本操作，用于在第a行到第b行之间，将F字符串换成T字符串。其中，“s/”表示进行替换操作；\na：在当前字符后添加文本；\nA：在行末添加文本；\ni：在当前字符前插入文本；\nI：在行首插入文本；\no：在当前行后面插入一空行；\nO：在当前行前面插入一空行；\n:wq：在命令模式下，执行存盘退出操作；\n:w：在命令模式下，执行存盘操作；\n:w！：在命令模式下，执行强制存盘操作；\n:q：在命令模式下，执行退出vi操作；\n:q！：在命令模式下，执行强制退出vi操作；\n:e文件名：在命令模式下，打开并编辑指定名称的文件；\n:n：在命令模式下，如果同时打开多个文件，则继续编辑下一个文件；\n:f：在命令模式下，用于显示当前的文件名、光标所在行的行号以及显示比例；\n:set number：在命令模式下，用于在最左端显示行号；\n:set nonumber：在命令模式下，用于在最左端不显示行号；\n```\n\n## 语法\n\n```\nvi(选项)(参数)\n```\n\n## 选项\n\n```\n+<行号>：从指定行号的行开始先是文本内容；\n-b：以二进制模式打开文件，用于编辑二进制文件和可执行文件；\n-c<指令>：在完成对第一个文件编辑任务后，执行给出的指令；\n-d：以diff模式打开文件，当多个文件编辑时，显示文件差异部分；\n-l：使用lisp模式，打开“lisp”和“showmatch”；\n-m：取消写文件功能，重设“write”选项；\n-M：关闭修改功能；\n-n：不实用缓存功能；\n-o<文件数目>：指定同时打开指定数目的文件；\n-R：以只读方式打开文件；\n-s：安静模式，不现实指令的任何错误信息。\n```\n\n## 参数\n\n```\n文件列表：指定要编辑的文件列表。多个文件之间使用空格分隔开。\n```\n\n## 知识扩展\n\nvi编辑器有三种工作方式：命令方式、输入方式和ex转义方式。通过相应的命令或操作，在这三种工作方式之间可以进行转换。\n\n### 命令方式\n\n在Shell提示符后输入命令vi，进入vi编辑器，并处于vi的命令方式。此时，从键盘上输入的任何字符都被作为编辑命令来解释，例如，a(append）表示附加命令，i(insert）表示插入命令，x表示删除字符命令等。如果输入的字符不是vi的合法命令，则机器发出“报警声”，光标不移动。另外，在命令方式下输入的字符（即vi命令）并不在屏幕上显示出来，例如，输入i，屏幕上并无变化，但通过执行i命令，编辑器的工作方式却发生变化：由命令方式变为输入方式。\n\n### 输入方式\n\n通过输入vi的插入命令（i）、附加命令（a）、打开命令（o）、替换命令（s）、修改命令(c）或取代命令（r）可以从命令方式进入输入方式。在输入方式下，从键盘上输入的所有字符都被插入到正在编辑的缓冲区中，被当做该文件的正文。进入输入方式后，输入的可见字符都在屏幕上显示出来，而编辑命令不再起作用，仅作为普通字母出现。例如，在命令方式下输入字母i，进到输入方式，然后再输入i，就在屏幕上相应光标处添加一个字母i。\n\n由输入方式回到命令方式的办法是按下Esc键。如果已在命令方式下，那么按下Esc键就会发出“嘟嘟”声。为了确保用户想执行的vi命令是在命令方式下输入的，不妨多按几下Esc键，听到嘟声后再输入命令。\n\n### ex转义方式\n\nvi和ex编辑器的功能是相同的，二者的主要区别是用户界面。在vi中，命令通常是单个字母，如a,x,r等。而在ex中，命令是以Enter；键结束的命令行。vi有一个专门的“转义”命令，可访问很多面向行的ex命令。为使用ex转义方式，可输入一个冒号（:）。作为ex命令提示符，冒号出现在状态行（通常在屏幕最下一行）。按下中断键（通常是Del键），可终止正在执行的命令。多数文件管理命令都是在ex转义方式下执行的（例如，读取文件，把编辑缓冲区的内容写到文件中等）。转义命令执行后，自动回到命令方式。例如：\n\n```\n:1,$s/I/i/g 按Enter键\n```\n\n则从文件第一行至文件末尾（$）将大写I全部替换成小写i。vi编辑器的三种工作方式之间的转换如图所示。\n\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/vi.jpg)\n \n \n [原文地址](http://man.linuxde.net/vi)\n","source":"_posts/vi命令.md","raw":"---\ntitle: vi命令\ntags:\n  - linux\ncategories:\n  - 后端开发\ntoc: false\ndate: 2018-01-23 12:05:10\n---\n\nvi命令是UNIX操作系统和类UNIX操作系统中最通用的全屏幕纯文本编辑器。Linux中的vi编辑器叫vim，它是vi的增强版（vi Improved），与vi编辑器完全兼容，而且实现了很多增强功能。\n\nvi编辑器支持编辑模式和命令模式，编辑模式下可以完成文本的编辑功能，命令模式下可以完成对文件的操作命令，要正确使用vi编辑器就必须熟练掌握着两种模式的切换。默认情况下，打开vi编辑器后自动进入命令模式。从编辑模式切换到命令模式使用“esc”键，从命令模式切换到编辑模式使用“A”、“a”、“O”、“o”、“I”、“i”键。\n\nvi编辑器提供了丰富的内置命令，有些内置命令使用键盘组合键即可完成，有些内置命令则需要以冒号“：”开头输入。常用内置命令如下：\n\n<!-- more -->\n\n```\nCtrl+u：向文件首翻半屏；\nCtrl+d：向文件尾翻半屏；\nCtrl+f：向文件尾翻一屏；\nCtrl+b：向文件首翻一屏；\nEsc：从编辑模式切换到命令模式；\nZZ：命令模式下保存当前文件所做的修改后退出vi；\n:行号：光标跳转到指定行的行首；\n:$：光标跳转到最后一行的行首；\nx或X：删除一个字符，x删除光标后的，而X删除光标前的；\nD：删除从当前光标到光标所在行尾的全部字符；\ndd：删除光标行正行内容；\nndd：删除当前行及其后n-1行；\nnyy：将当前行及其下n行的内容保存到寄存器？中，其中？为一个字母，n为一个数字；\np：粘贴文本操作，用于将缓存区的内容粘贴到当前光标所在位置的下方；\nP：粘贴文本操作，用于将缓存区的内容粘贴到当前光标所在位置的上方；\n/字符串：文本查找操作，用于从当前光标所在位置开始向文件尾部查找指定字符串的内容，查找的字符串会被加亮显示；\n？name：文本查找操作，用于从当前光标所在位置开始向文件头部查找指定字符串的内容，查找的字符串会被加亮显示；\na，bs/F/T：替换文本操作，用于在第a行到第b行之间，将F字符串换成T字符串。其中，“s/”表示进行替换操作；\na：在当前字符后添加文本；\nA：在行末添加文本；\ni：在当前字符前插入文本；\nI：在行首插入文本；\no：在当前行后面插入一空行；\nO：在当前行前面插入一空行；\n:wq：在命令模式下，执行存盘退出操作；\n:w：在命令模式下，执行存盘操作；\n:w！：在命令模式下，执行强制存盘操作；\n:q：在命令模式下，执行退出vi操作；\n:q！：在命令模式下，执行强制退出vi操作；\n:e文件名：在命令模式下，打开并编辑指定名称的文件；\n:n：在命令模式下，如果同时打开多个文件，则继续编辑下一个文件；\n:f：在命令模式下，用于显示当前的文件名、光标所在行的行号以及显示比例；\n:set number：在命令模式下，用于在最左端显示行号；\n:set nonumber：在命令模式下，用于在最左端不显示行号；\n```\n\n## 语法\n\n```\nvi(选项)(参数)\n```\n\n## 选项\n\n```\n+<行号>：从指定行号的行开始先是文本内容；\n-b：以二进制模式打开文件，用于编辑二进制文件和可执行文件；\n-c<指令>：在完成对第一个文件编辑任务后，执行给出的指令；\n-d：以diff模式打开文件，当多个文件编辑时，显示文件差异部分；\n-l：使用lisp模式，打开“lisp”和“showmatch”；\n-m：取消写文件功能，重设“write”选项；\n-M：关闭修改功能；\n-n：不实用缓存功能；\n-o<文件数目>：指定同时打开指定数目的文件；\n-R：以只读方式打开文件；\n-s：安静模式，不现实指令的任何错误信息。\n```\n\n## 参数\n\n```\n文件列表：指定要编辑的文件列表。多个文件之间使用空格分隔开。\n```\n\n## 知识扩展\n\nvi编辑器有三种工作方式：命令方式、输入方式和ex转义方式。通过相应的命令或操作，在这三种工作方式之间可以进行转换。\n\n### 命令方式\n\n在Shell提示符后输入命令vi，进入vi编辑器，并处于vi的命令方式。此时，从键盘上输入的任何字符都被作为编辑命令来解释，例如，a(append）表示附加命令，i(insert）表示插入命令，x表示删除字符命令等。如果输入的字符不是vi的合法命令，则机器发出“报警声”，光标不移动。另外，在命令方式下输入的字符（即vi命令）并不在屏幕上显示出来，例如，输入i，屏幕上并无变化，但通过执行i命令，编辑器的工作方式却发生变化：由命令方式变为输入方式。\n\n### 输入方式\n\n通过输入vi的插入命令（i）、附加命令（a）、打开命令（o）、替换命令（s）、修改命令(c）或取代命令（r）可以从命令方式进入输入方式。在输入方式下，从键盘上输入的所有字符都被插入到正在编辑的缓冲区中，被当做该文件的正文。进入输入方式后，输入的可见字符都在屏幕上显示出来，而编辑命令不再起作用，仅作为普通字母出现。例如，在命令方式下输入字母i，进到输入方式，然后再输入i，就在屏幕上相应光标处添加一个字母i。\n\n由输入方式回到命令方式的办法是按下Esc键。如果已在命令方式下，那么按下Esc键就会发出“嘟嘟”声。为了确保用户想执行的vi命令是在命令方式下输入的，不妨多按几下Esc键，听到嘟声后再输入命令。\n\n### ex转义方式\n\nvi和ex编辑器的功能是相同的，二者的主要区别是用户界面。在vi中，命令通常是单个字母，如a,x,r等。而在ex中，命令是以Enter；键结束的命令行。vi有一个专门的“转义”命令，可访问很多面向行的ex命令。为使用ex转义方式，可输入一个冒号（:）。作为ex命令提示符，冒号出现在状态行（通常在屏幕最下一行）。按下中断键（通常是Del键），可终止正在执行的命令。多数文件管理命令都是在ex转义方式下执行的（例如，读取文件，把编辑缓冲区的内容写到文件中等）。转义命令执行后，自动回到命令方式。例如：\n\n```\n:1,$s/I/i/g 按Enter键\n```\n\n则从文件第一行至文件末尾（$）将大写I全部替换成小写i。vi编辑器的三种工作方式之间的转换如图所示。\n\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/vi.jpg)\n \n \n [原文地址](http://man.linuxde.net/vi)\n","slug":"vi命令","published":1,"updated":"2019-11-07T02:19:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznzu0061h5s631jnl58q","content":"<p>vi命令是UNIX操作系统和类UNIX操作系统中最通用的全屏幕纯文本编辑器。Linux中的vi编辑器叫vim，它是vi的增强版（vi Improved），与vi编辑器完全兼容，而且实现了很多增强功能。</p>\n<p>vi编辑器支持编辑模式和命令模式，编辑模式下可以完成文本的编辑功能，命令模式下可以完成对文件的操作命令，要正确使用vi编辑器就必须熟练掌握着两种模式的切换。默认情况下，打开vi编辑器后自动进入命令模式。从编辑模式切换到命令模式使用“esc”键，从命令模式切换到编辑模式使用“A”、“a”、“O”、“o”、“I”、“i”键。</p>\n<p>vi编辑器提供了丰富的内置命令，有些内置命令使用键盘组合键即可完成，有些内置命令则需要以冒号“：”开头输入。常用内置命令如下：</p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ctrl+u：向文件首翻半屏；</span><br><span class=\"line\">Ctrl+d：向文件尾翻半屏；</span><br><span class=\"line\">Ctrl+f：向文件尾翻一屏；</span><br><span class=\"line\">Ctrl+b：向文件首翻一屏；</span><br><span class=\"line\">Esc：从编辑模式切换到命令模式；</span><br><span class=\"line\">ZZ：命令模式下保存当前文件所做的修改后退出vi；</span><br><span class=\"line\">:行号：光标跳转到指定行的行首；</span><br><span class=\"line\">:$：光标跳转到最后一行的行首；</span><br><span class=\"line\">x或X：删除一个字符，x删除光标后的，而X删除光标前的；</span><br><span class=\"line\">D：删除从当前光标到光标所在行尾的全部字符；</span><br><span class=\"line\">dd：删除光标行正行内容；</span><br><span class=\"line\">ndd：删除当前行及其后n-1行；</span><br><span class=\"line\">nyy：将当前行及其下n行的内容保存到寄存器？中，其中？为一个字母，n为一个数字；</span><br><span class=\"line\">p：粘贴文本操作，用于将缓存区的内容粘贴到当前光标所在位置的下方；</span><br><span class=\"line\">P：粘贴文本操作，用于将缓存区的内容粘贴到当前光标所在位置的上方；</span><br><span class=\"line\">/字符串：文本查找操作，用于从当前光标所在位置开始向文件尾部查找指定字符串的内容，查找的字符串会被加亮显示；</span><br><span class=\"line\">？name：文本查找操作，用于从当前光标所在位置开始向文件头部查找指定字符串的内容，查找的字符串会被加亮显示；</span><br><span class=\"line\">a，bs/F/T：替换文本操作，用于在第a行到第b行之间，将F字符串换成T字符串。其中，“s/”表示进行替换操作；</span><br><span class=\"line\">a：在当前字符后添加文本；</span><br><span class=\"line\">A：在行末添加文本；</span><br><span class=\"line\">i：在当前字符前插入文本；</span><br><span class=\"line\">I：在行首插入文本；</span><br><span class=\"line\">o：在当前行后面插入一空行；</span><br><span class=\"line\">O：在当前行前面插入一空行；</span><br><span class=\"line\">:wq：在命令模式下，执行存盘退出操作；</span><br><span class=\"line\">:w：在命令模式下，执行存盘操作；</span><br><span class=\"line\">:w！：在命令模式下，执行强制存盘操作；</span><br><span class=\"line\">:q：在命令模式下，执行退出vi操作；</span><br><span class=\"line\">:q！：在命令模式下，执行强制退出vi操作；</span><br><span class=\"line\">:e文件名：在命令模式下，打开并编辑指定名称的文件；</span><br><span class=\"line\">:n：在命令模式下，如果同时打开多个文件，则继续编辑下一个文件；</span><br><span class=\"line\">:f：在命令模式下，用于显示当前的文件名、光标所在行的行号以及显示比例；</span><br><span class=\"line\">:set number：在命令模式下，用于在最左端显示行号；</span><br><span class=\"line\">:set nonumber：在命令模式下，用于在最左端不显示行号；</span><br></pre></td></tr></table></figure>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi(选项)(参数)</span><br></pre></td></tr></table></figure>\n<h2 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+&lt;行号&gt;：从指定行号的行开始先是文本内容；</span><br><span class=\"line\">-b：以二进制模式打开文件，用于编辑二进制文件和可执行文件；</span><br><span class=\"line\">-c&lt;指令&gt;：在完成对第一个文件编辑任务后，执行给出的指令；</span><br><span class=\"line\">-d：以diff模式打开文件，当多个文件编辑时，显示文件差异部分；</span><br><span class=\"line\">-l：使用lisp模式，打开“lisp”和“showmatch”；</span><br><span class=\"line\">-m：取消写文件功能，重设“write”选项；</span><br><span class=\"line\">-M：关闭修改功能；</span><br><span class=\"line\">-n：不实用缓存功能；</span><br><span class=\"line\">-o&lt;文件数目&gt;：指定同时打开指定数目的文件；</span><br><span class=\"line\">-R：以只读方式打开文件；</span><br><span class=\"line\">-s：安静模式，不现实指令的任何错误信息。</span><br></pre></td></tr></table></figure>\n<h2 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">文件列表：指定要编辑的文件列表。多个文件之间使用空格分隔开。</span><br></pre></td></tr></table></figure>\n<h2 id=\"知识扩展\"><a href=\"#知识扩展\" class=\"headerlink\" title=\"知识扩展\"></a>知识扩展</h2><p>vi编辑器有三种工作方式：命令方式、输入方式和ex转义方式。通过相应的命令或操作，在这三种工作方式之间可以进行转换。</p>\n<h3 id=\"命令方式\"><a href=\"#命令方式\" class=\"headerlink\" title=\"命令方式\"></a>命令方式</h3><p>在Shell提示符后输入命令vi，进入vi编辑器，并处于vi的命令方式。此时，从键盘上输入的任何字符都被作为编辑命令来解释，例如，a(append）表示附加命令，i(insert）表示插入命令，x表示删除字符命令等。如果输入的字符不是vi的合法命令，则机器发出“报警声”，光标不移动。另外，在命令方式下输入的字符（即vi命令）并不在屏幕上显示出来，例如，输入i，屏幕上并无变化，但通过执行i命令，编辑器的工作方式却发生变化：由命令方式变为输入方式。</p>\n<h3 id=\"输入方式\"><a href=\"#输入方式\" class=\"headerlink\" title=\"输入方式\"></a>输入方式</h3><p>通过输入vi的插入命令（i）、附加命令（a）、打开命令（o）、替换命令（s）、修改命令(c）或取代命令（r）可以从命令方式进入输入方式。在输入方式下，从键盘上输入的所有字符都被插入到正在编辑的缓冲区中，被当做该文件的正文。进入输入方式后，输入的可见字符都在屏幕上显示出来，而编辑命令不再起作用，仅作为普通字母出现。例如，在命令方式下输入字母i，进到输入方式，然后再输入i，就在屏幕上相应光标处添加一个字母i。</p>\n<p>由输入方式回到命令方式的办法是按下Esc键。如果已在命令方式下，那么按下Esc键就会发出“嘟嘟”声。为了确保用户想执行的vi命令是在命令方式下输入的，不妨多按几下Esc键，听到嘟声后再输入命令。</p>\n<h3 id=\"ex转义方式\"><a href=\"#ex转义方式\" class=\"headerlink\" title=\"ex转义方式\"></a>ex转义方式</h3><p>vi和ex编辑器的功能是相同的，二者的主要区别是用户界面。在vi中，命令通常是单个字母，如a,x,r等。而在ex中，命令是以Enter；键结束的命令行。vi有一个专门的“转义”命令，可访问很多面向行的ex命令。为使用ex转义方式，可输入一个冒号（:）。作为ex命令提示符，冒号出现在状态行（通常在屏幕最下一行）。按下中断键（通常是Del键），可终止正在执行的命令。多数文件管理命令都是在ex转义方式下执行的（例如，读取文件，把编辑缓冲区的内容写到文件中等）。转义命令执行后，自动回到命令方式。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:1,$s/I/i/g 按Enter键</span><br></pre></td></tr></table></figure>\n<p>则从文件第一行至文件末尾（$）将大写I全部替换成小写i。vi编辑器的三种工作方式之间的转换如图所示。</p>\n<p><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/vi.jpg\" alt></p>\n<p> <a href=\"http://man.linuxde.net/vi\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n","site":{"data":{}},"excerpt":"<p>vi命令是UNIX操作系统和类UNIX操作系统中最通用的全屏幕纯文本编辑器。Linux中的vi编辑器叫vim，它是vi的增强版（vi Improved），与vi编辑器完全兼容，而且实现了很多增强功能。</p>\n<p>vi编辑器支持编辑模式和命令模式，编辑模式下可以完成文本的编辑功能，命令模式下可以完成对文件的操作命令，要正确使用vi编辑器就必须熟练掌握着两种模式的切换。默认情况下，打开vi编辑器后自动进入命令模式。从编辑模式切换到命令模式使用“esc”键，从命令模式切换到编辑模式使用“A”、“a”、“O”、“o”、“I”、“i”键。</p>\n<p>vi编辑器提供了丰富的内置命令，有些内置命令使用键盘组合键即可完成，有些内置命令则需要以冒号“：”开头输入。常用内置命令如下：</p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ctrl+u：向文件首翻半屏；</span><br><span class=\"line\">Ctrl+d：向文件尾翻半屏；</span><br><span class=\"line\">Ctrl+f：向文件尾翻一屏；</span><br><span class=\"line\">Ctrl+b：向文件首翻一屏；</span><br><span class=\"line\">Esc：从编辑模式切换到命令模式；</span><br><span class=\"line\">ZZ：命令模式下保存当前文件所做的修改后退出vi；</span><br><span class=\"line\">:行号：光标跳转到指定行的行首；</span><br><span class=\"line\">:$：光标跳转到最后一行的行首；</span><br><span class=\"line\">x或X：删除一个字符，x删除光标后的，而X删除光标前的；</span><br><span class=\"line\">D：删除从当前光标到光标所在行尾的全部字符；</span><br><span class=\"line\">dd：删除光标行正行内容；</span><br><span class=\"line\">ndd：删除当前行及其后n-1行；</span><br><span class=\"line\">nyy：将当前行及其下n行的内容保存到寄存器？中，其中？为一个字母，n为一个数字；</span><br><span class=\"line\">p：粘贴文本操作，用于将缓存区的内容粘贴到当前光标所在位置的下方；</span><br><span class=\"line\">P：粘贴文本操作，用于将缓存区的内容粘贴到当前光标所在位置的上方；</span><br><span class=\"line\">/字符串：文本查找操作，用于从当前光标所在位置开始向文件尾部查找指定字符串的内容，查找的字符串会被加亮显示；</span><br><span class=\"line\">？name：文本查找操作，用于从当前光标所在位置开始向文件头部查找指定字符串的内容，查找的字符串会被加亮显示；</span><br><span class=\"line\">a，bs/F/T：替换文本操作，用于在第a行到第b行之间，将F字符串换成T字符串。其中，“s/”表示进行替换操作；</span><br><span class=\"line\">a：在当前字符后添加文本；</span><br><span class=\"line\">A：在行末添加文本；</span><br><span class=\"line\">i：在当前字符前插入文本；</span><br><span class=\"line\">I：在行首插入文本；</span><br><span class=\"line\">o：在当前行后面插入一空行；</span><br><span class=\"line\">O：在当前行前面插入一空行；</span><br><span class=\"line\">:wq：在命令模式下，执行存盘退出操作；</span><br><span class=\"line\">:w：在命令模式下，执行存盘操作；</span><br><span class=\"line\">:w！：在命令模式下，执行强制存盘操作；</span><br><span class=\"line\">:q：在命令模式下，执行退出vi操作；</span><br><span class=\"line\">:q！：在命令模式下，执行强制退出vi操作；</span><br><span class=\"line\">:e文件名：在命令模式下，打开并编辑指定名称的文件；</span><br><span class=\"line\">:n：在命令模式下，如果同时打开多个文件，则继续编辑下一个文件；</span><br><span class=\"line\">:f：在命令模式下，用于显示当前的文件名、光标所在行的行号以及显示比例；</span><br><span class=\"line\">:set number：在命令模式下，用于在最左端显示行号；</span><br><span class=\"line\">:set nonumber：在命令模式下，用于在最左端不显示行号；</span><br></pre></td></tr></table></figure>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi(选项)(参数)</span><br></pre></td></tr></table></figure>\n<h2 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+&lt;行号&gt;：从指定行号的行开始先是文本内容；</span><br><span class=\"line\">-b：以二进制模式打开文件，用于编辑二进制文件和可执行文件；</span><br><span class=\"line\">-c&lt;指令&gt;：在完成对第一个文件编辑任务后，执行给出的指令；</span><br><span class=\"line\">-d：以diff模式打开文件，当多个文件编辑时，显示文件差异部分；</span><br><span class=\"line\">-l：使用lisp模式，打开“lisp”和“showmatch”；</span><br><span class=\"line\">-m：取消写文件功能，重设“write”选项；</span><br><span class=\"line\">-M：关闭修改功能；</span><br><span class=\"line\">-n：不实用缓存功能；</span><br><span class=\"line\">-o&lt;文件数目&gt;：指定同时打开指定数目的文件；</span><br><span class=\"line\">-R：以只读方式打开文件；</span><br><span class=\"line\">-s：安静模式，不现实指令的任何错误信息。</span><br></pre></td></tr></table></figure>\n<h2 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">文件列表：指定要编辑的文件列表。多个文件之间使用空格分隔开。</span><br></pre></td></tr></table></figure>\n<h2 id=\"知识扩展\"><a href=\"#知识扩展\" class=\"headerlink\" title=\"知识扩展\"></a>知识扩展</h2><p>vi编辑器有三种工作方式：命令方式、输入方式和ex转义方式。通过相应的命令或操作，在这三种工作方式之间可以进行转换。</p>\n<h3 id=\"命令方式\"><a href=\"#命令方式\" class=\"headerlink\" title=\"命令方式\"></a>命令方式</h3><p>在Shell提示符后输入命令vi，进入vi编辑器，并处于vi的命令方式。此时，从键盘上输入的任何字符都被作为编辑命令来解释，例如，a(append）表示附加命令，i(insert）表示插入命令，x表示删除字符命令等。如果输入的字符不是vi的合法命令，则机器发出“报警声”，光标不移动。另外，在命令方式下输入的字符（即vi命令）并不在屏幕上显示出来，例如，输入i，屏幕上并无变化，但通过执行i命令，编辑器的工作方式却发生变化：由命令方式变为输入方式。</p>\n<h3 id=\"输入方式\"><a href=\"#输入方式\" class=\"headerlink\" title=\"输入方式\"></a>输入方式</h3><p>通过输入vi的插入命令（i）、附加命令（a）、打开命令（o）、替换命令（s）、修改命令(c）或取代命令（r）可以从命令方式进入输入方式。在输入方式下，从键盘上输入的所有字符都被插入到正在编辑的缓冲区中，被当做该文件的正文。进入输入方式后，输入的可见字符都在屏幕上显示出来，而编辑命令不再起作用，仅作为普通字母出现。例如，在命令方式下输入字母i，进到输入方式，然后再输入i，就在屏幕上相应光标处添加一个字母i。</p>\n<p>由输入方式回到命令方式的办法是按下Esc键。如果已在命令方式下，那么按下Esc键就会发出“嘟嘟”声。为了确保用户想执行的vi命令是在命令方式下输入的，不妨多按几下Esc键，听到嘟声后再输入命令。</p>\n<h3 id=\"ex转义方式\"><a href=\"#ex转义方式\" class=\"headerlink\" title=\"ex转义方式\"></a>ex转义方式</h3><p>vi和ex编辑器的功能是相同的，二者的主要区别是用户界面。在vi中，命令通常是单个字母，如a,x,r等。而在ex中，命令是以Enter；键结束的命令行。vi有一个专门的“转义”命令，可访问很多面向行的ex命令。为使用ex转义方式，可输入一个冒号（:）。作为ex命令提示符，冒号出现在状态行（通常在屏幕最下一行）。按下中断键（通常是Del键），可终止正在执行的命令。多数文件管理命令都是在ex转义方式下执行的（例如，读取文件，把编辑缓冲区的内容写到文件中等）。转义命令执行后，自动回到命令方式。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:1,$s/I/i/g 按Enter键</span><br></pre></td></tr></table></figure>\n<p>则从文件第一行至文件末尾（$）将大写I全部替换成小写i。vi编辑器的三种工作方式之间的转换如图所示。</p>\n<p><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/vi.jpg\" alt></p>\n<p> <a href=\"http://man.linuxde.net/vi\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>"},{"title":"webpack之proxyTable设置跨域","toc":false,"date":"2019-07-01T07:23:46.000Z","_content":"\n这里我简单说明下自己需要记住的地方就是怎么实现跨域，当我们在开发的时候使用的是第三方的api，如果这个api不支持跨域，那么我们就要做一层代理，这个代理工作通常是由后端人员来完成的，原理也很简单就是搭建一个服务器，提供一个接口透传的机制，将跨域数据请求过来以后在传给自己的接口返回，换句话说跨域是浏览器里出现的，服务端是没有跨域这一说的，只要你有服务器就可以解决这个问题。当然在实际开发中我们后端可能还没搭建这个服务，那么前端在开发的时候完全可以使用proxyTable来实现自己跨域拿数据的目的。最后上线还是要接口支持跨域的，因为这时候没有本地开发环境也就没法实现跨域了。\n\n详细内容如下：\n\n<!-- more -->\n\n## 为什么要使用proxyTable\n- **很简单，两个字，跨域。**\n- 在平时项目的开发环境中，经常会遇到跨域的问题，尤其是使用vue-cli这种脚手架工具开发时，由于项目本身启动本地服务是需要占用一个端口的，所以必然会产生跨域的问题。当然跨域有多种解决方式，这里就不一一例举，下次弄篇文章单独讲，在使用webpack做构建工具的项目中使用proxyTable代理实现跨域是一种比较方便的选择。\n\n## 如何使用proxyTable\n还是拿之前使用过的vue-cli举例。我们首先要在项目目录中找到根目录下config文件夹下的index.js文件。由于我们是在开发环境下使用，自然而然是要配置在dev里面：\n\n```javascript\ndev: {\n  env: require('./dev.env'),\n  port: 8080,\n  autoOpenBrowser: true,\n  assetsSubDirectory: 'static',\n  assetsPublicPath: '/',\n  proxyTable: {\n    '/api': {\n      target: 'http://www.abc.com',  //目标接口域名\n      changeOrigin: true,  //是否跨域\n      pathRewrite: {\n        '^/api': '/api'   //重写接口\n      }\n    },\n  cssSourceMap: false\n}\n```\n上面这段代码的效果就是将本地8080端口的一个请求代理到了 http://www.abc.com 这一域名下：\n\n`'http://localhost:8080/api' ===> 'http://www.abc.com/api'`\n\n## 没有统一项目名下的使用\n上面那种情况是有一个统一的项目名api的，所以说是比较好匹配的，就相当于说直接将以api开头的接口名代理一下换成目标域名访问就好了，可是如果说后台返给我们前端的接口没有了统一的项目名呢？之前，我是一个个单独去做了转换，接口少还没什么关系，但多了肯定是不现实的，前段时间在一次面试中受到了面试官的启发想到了这样一种取巧的方案：\n\n```javascript\n//先人为给接口地址前面加上一个自定义的项目名\nlet someApi = 'api' + '/xx/xx';\n\ndev: {\n  env: require('./dev.env'),\n  port: 8080,\n  autoOpenBrowser: true,\n  assetsSubDirectory: 'static',\n  assetsPublicPath: '/',\n  proxyTable: {\n    '/api': {\n      target: 'http://www.abc.com',  //目标接口域名\n      changeOrigin: true,  //是否跨域\n      pathRewrite: {\n        '^/api': '/'   //重写接口\n      }\n    },\n  cssSourceMap: false\n}\n```\n这里的项目名api是我们人为加上去的，经过代理之后就没了，这样我们在配置代理这里还是只需要配置一份就够了，只是在写接口地址时要注意区分开发环境和线上环境就可以了。\n\n## 关于proxyTable的原理\n\n我在网上查了一下，这个代理实际上是利用http-proxy-middleware这个插件完成的，具体到这个插件的运行机制，由于是英文再加上能力有限就没深究了。但我想探究的是这种代理方式实际上是如何做到的，我看网上有人说实际上就是我们的本地服务器将请求转发给了目标服务器。之所以出现跨域是因为浏览器有同源策略的限制，但服务器是没有的，所以这种代理方式能够实现的机制大体就是：\n\n> 本地服务器 --》 代理 --》目标服务器 --》拿到数据后通过代理伪装成本地服务请求的返回值 ---》然后浏览器就顺利收到了我们想要的数据\n\n这是我的简单理解，按这个理解来说的话只要服务器允许跨域，任何人都能够拿到它的数据吗？那样同源策略不就大大弱化了吗？目前对这个问题还不是太理解，希望有想法的小伙伴留言指正！\n\n原文地址：[https://www.cnblogs.com/wancheng7/p/8987694.html](https://www.cnblogs.com/wancheng7/p/8987694.html)\n","source":"_posts/webpack之proxyTable设置跨域.md","raw":"---\ntitle: webpack之proxyTable设置跨域\ntags:\n  - 知识点备忘\ncategories:\n  - Web开发\ntoc: false\ndate: 2019-07-01 15:23:46\n---\n\n这里我简单说明下自己需要记住的地方就是怎么实现跨域，当我们在开发的时候使用的是第三方的api，如果这个api不支持跨域，那么我们就要做一层代理，这个代理工作通常是由后端人员来完成的，原理也很简单就是搭建一个服务器，提供一个接口透传的机制，将跨域数据请求过来以后在传给自己的接口返回，换句话说跨域是浏览器里出现的，服务端是没有跨域这一说的，只要你有服务器就可以解决这个问题。当然在实际开发中我们后端可能还没搭建这个服务，那么前端在开发的时候完全可以使用proxyTable来实现自己跨域拿数据的目的。最后上线还是要接口支持跨域的，因为这时候没有本地开发环境也就没法实现跨域了。\n\n详细内容如下：\n\n<!-- more -->\n\n## 为什么要使用proxyTable\n- **很简单，两个字，跨域。**\n- 在平时项目的开发环境中，经常会遇到跨域的问题，尤其是使用vue-cli这种脚手架工具开发时，由于项目本身启动本地服务是需要占用一个端口的，所以必然会产生跨域的问题。当然跨域有多种解决方式，这里就不一一例举，下次弄篇文章单独讲，在使用webpack做构建工具的项目中使用proxyTable代理实现跨域是一种比较方便的选择。\n\n## 如何使用proxyTable\n还是拿之前使用过的vue-cli举例。我们首先要在项目目录中找到根目录下config文件夹下的index.js文件。由于我们是在开发环境下使用，自然而然是要配置在dev里面：\n\n```javascript\ndev: {\n  env: require('./dev.env'),\n  port: 8080,\n  autoOpenBrowser: true,\n  assetsSubDirectory: 'static',\n  assetsPublicPath: '/',\n  proxyTable: {\n    '/api': {\n      target: 'http://www.abc.com',  //目标接口域名\n      changeOrigin: true,  //是否跨域\n      pathRewrite: {\n        '^/api': '/api'   //重写接口\n      }\n    },\n  cssSourceMap: false\n}\n```\n上面这段代码的效果就是将本地8080端口的一个请求代理到了 http://www.abc.com 这一域名下：\n\n`'http://localhost:8080/api' ===> 'http://www.abc.com/api'`\n\n## 没有统一项目名下的使用\n上面那种情况是有一个统一的项目名api的，所以说是比较好匹配的，就相当于说直接将以api开头的接口名代理一下换成目标域名访问就好了，可是如果说后台返给我们前端的接口没有了统一的项目名呢？之前，我是一个个单独去做了转换，接口少还没什么关系，但多了肯定是不现实的，前段时间在一次面试中受到了面试官的启发想到了这样一种取巧的方案：\n\n```javascript\n//先人为给接口地址前面加上一个自定义的项目名\nlet someApi = 'api' + '/xx/xx';\n\ndev: {\n  env: require('./dev.env'),\n  port: 8080,\n  autoOpenBrowser: true,\n  assetsSubDirectory: 'static',\n  assetsPublicPath: '/',\n  proxyTable: {\n    '/api': {\n      target: 'http://www.abc.com',  //目标接口域名\n      changeOrigin: true,  //是否跨域\n      pathRewrite: {\n        '^/api': '/'   //重写接口\n      }\n    },\n  cssSourceMap: false\n}\n```\n这里的项目名api是我们人为加上去的，经过代理之后就没了，这样我们在配置代理这里还是只需要配置一份就够了，只是在写接口地址时要注意区分开发环境和线上环境就可以了。\n\n## 关于proxyTable的原理\n\n我在网上查了一下，这个代理实际上是利用http-proxy-middleware这个插件完成的，具体到这个插件的运行机制，由于是英文再加上能力有限就没深究了。但我想探究的是这种代理方式实际上是如何做到的，我看网上有人说实际上就是我们的本地服务器将请求转发给了目标服务器。之所以出现跨域是因为浏览器有同源策略的限制，但服务器是没有的，所以这种代理方式能够实现的机制大体就是：\n\n> 本地服务器 --》 代理 --》目标服务器 --》拿到数据后通过代理伪装成本地服务请求的返回值 ---》然后浏览器就顺利收到了我们想要的数据\n\n这是我的简单理解，按这个理解来说的话只要服务器允许跨域，任何人都能够拿到它的数据吗？那样同源策略不就大大弱化了吗？目前对这个问题还不是太理解，希望有想法的小伙伴留言指正！\n\n原文地址：[https://www.cnblogs.com/wancheng7/p/8987694.html](https://www.cnblogs.com/wancheng7/p/8987694.html)\n","slug":"webpack之proxyTable设置跨域","published":1,"updated":"2019-11-07T02:19:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznzv0064h5s6p1zfng06","content":"<p>这里我简单说明下自己需要记住的地方就是怎么实现跨域，当我们在开发的时候使用的是第三方的api，如果这个api不支持跨域，那么我们就要做一层代理，这个代理工作通常是由后端人员来完成的，原理也很简单就是搭建一个服务器，提供一个接口透传的机制，将跨域数据请求过来以后在传给自己的接口返回，换句话说跨域是浏览器里出现的，服务端是没有跨域这一说的，只要你有服务器就可以解决这个问题。当然在实际开发中我们后端可能还没搭建这个服务，那么前端在开发的时候完全可以使用proxyTable来实现自己跨域拿数据的目的。最后上线还是要接口支持跨域的，因为这时候没有本地开发环境也就没法实现跨域了。</p>\n<p>详细内容如下：</p>\n<a id=\"more\"></a>\n<h2 id=\"为什么要使用proxyTable\"><a href=\"#为什么要使用proxyTable\" class=\"headerlink\" title=\"为什么要使用proxyTable\"></a>为什么要使用proxyTable</h2><ul>\n<li><strong>很简单，两个字，跨域。</strong></li>\n<li>在平时项目的开发环境中，经常会遇到跨域的问题，尤其是使用vue-cli这种脚手架工具开发时，由于项目本身启动本地服务是需要占用一个端口的，所以必然会产生跨域的问题。当然跨域有多种解决方式，这里就不一一例举，下次弄篇文章单独讲，在使用webpack做构建工具的项目中使用proxyTable代理实现跨域是一种比较方便的选择。</li>\n</ul>\n<h2 id=\"如何使用proxyTable\"><a href=\"#如何使用proxyTable\" class=\"headerlink\" title=\"如何使用proxyTable\"></a>如何使用proxyTable</h2><p>还是拿之前使用过的vue-cli举例。我们首先要在项目目录中找到根目录下config文件夹下的index.js文件。由于我们是在开发环境下使用，自然而然是要配置在dev里面：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dev: &#123;</span><br><span class=\"line\">  env: <span class=\"built_in\">require</span>(<span class=\"string\">'./dev.env'</span>),</span><br><span class=\"line\">  port: <span class=\"number\">8080</span>,</span><br><span class=\"line\">  autoOpenBrowser: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  assetsSubDirectory: <span class=\"string\">'static'</span>,</span><br><span class=\"line\">  assetsPublicPath: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">  proxyTable: &#123;</span><br><span class=\"line\">    <span class=\"string\">'/api'</span>: &#123;</span><br><span class=\"line\">      target: <span class=\"string\">'http://www.abc.com'</span>,  <span class=\"comment\">//目标接口域名</span></span><br><span class=\"line\">      changeOrigin: <span class=\"literal\">true</span>,  <span class=\"comment\">//是否跨域</span></span><br><span class=\"line\">      pathRewrite: &#123;</span><br><span class=\"line\">        <span class=\"string\">'^/api'</span>: <span class=\"string\">'/api'</span>   <span class=\"comment\">//重写接口</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  cssSourceMap: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面这段代码的效果就是将本地8080端口的一个请求代理到了 <a href=\"http://www.abc.com\" target=\"_blank\" rel=\"noopener\">http://www.abc.com</a> 这一域名下：</p>\n<p><code>&#39;http://localhost:8080/api&#39; ===&gt; &#39;http://www.abc.com/api&#39;</code></p>\n<h2 id=\"没有统一项目名下的使用\"><a href=\"#没有统一项目名下的使用\" class=\"headerlink\" title=\"没有统一项目名下的使用\"></a>没有统一项目名下的使用</h2><p>上面那种情况是有一个统一的项目名api的，所以说是比较好匹配的，就相当于说直接将以api开头的接口名代理一下换成目标域名访问就好了，可是如果说后台返给我们前端的接口没有了统一的项目名呢？之前，我是一个个单独去做了转换，接口少还没什么关系，但多了肯定是不现实的，前段时间在一次面试中受到了面试官的启发想到了这样一种取巧的方案：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//先人为给接口地址前面加上一个自定义的项目名</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> someApi = <span class=\"string\">'api'</span> + <span class=\"string\">'/xx/xx'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">dev: &#123;</span><br><span class=\"line\">  env: <span class=\"built_in\">require</span>(<span class=\"string\">'./dev.env'</span>),</span><br><span class=\"line\">  port: <span class=\"number\">8080</span>,</span><br><span class=\"line\">  autoOpenBrowser: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  assetsSubDirectory: <span class=\"string\">'static'</span>,</span><br><span class=\"line\">  assetsPublicPath: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">  proxyTable: &#123;</span><br><span class=\"line\">    <span class=\"string\">'/api'</span>: &#123;</span><br><span class=\"line\">      target: <span class=\"string\">'http://www.abc.com'</span>,  <span class=\"comment\">//目标接口域名</span></span><br><span class=\"line\">      changeOrigin: <span class=\"literal\">true</span>,  <span class=\"comment\">//是否跨域</span></span><br><span class=\"line\">      pathRewrite: &#123;</span><br><span class=\"line\">        <span class=\"string\">'^/api'</span>: <span class=\"string\">'/'</span>   <span class=\"comment\">//重写接口</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  cssSourceMap: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的项目名api是我们人为加上去的，经过代理之后就没了，这样我们在配置代理这里还是只需要配置一份就够了，只是在写接口地址时要注意区分开发环境和线上环境就可以了。</p>\n<h2 id=\"关于proxyTable的原理\"><a href=\"#关于proxyTable的原理\" class=\"headerlink\" title=\"关于proxyTable的原理\"></a>关于proxyTable的原理</h2><p>我在网上查了一下，这个代理实际上是利用http-proxy-middleware这个插件完成的，具体到这个插件的运行机制，由于是英文再加上能力有限就没深究了。但我想探究的是这种代理方式实际上是如何做到的，我看网上有人说实际上就是我们的本地服务器将请求转发给了目标服务器。之所以出现跨域是因为浏览器有同源策略的限制，但服务器是没有的，所以这种代理方式能够实现的机制大体就是：</p>\n<blockquote>\n<p>本地服务器 –》 代理 –》目标服务器 –》拿到数据后通过代理伪装成本地服务请求的返回值 —》然后浏览器就顺利收到了我们想要的数据</p>\n</blockquote>\n<p>这是我的简单理解，按这个理解来说的话只要服务器允许跨域，任何人都能够拿到它的数据吗？那样同源策略不就大大弱化了吗？目前对这个问题还不是太理解，希望有想法的小伙伴留言指正！</p>\n<p>原文地址：<a href=\"https://www.cnblogs.com/wancheng7/p/8987694.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/wancheng7/p/8987694.html</a></p>\n","site":{"data":{}},"excerpt":"<p>这里我简单说明下自己需要记住的地方就是怎么实现跨域，当我们在开发的时候使用的是第三方的api，如果这个api不支持跨域，那么我们就要做一层代理，这个代理工作通常是由后端人员来完成的，原理也很简单就是搭建一个服务器，提供一个接口透传的机制，将跨域数据请求过来以后在传给自己的接口返回，换句话说跨域是浏览器里出现的，服务端是没有跨域这一说的，只要你有服务器就可以解决这个问题。当然在实际开发中我们后端可能还没搭建这个服务，那么前端在开发的时候完全可以使用proxyTable来实现自己跨域拿数据的目的。最后上线还是要接口支持跨域的，因为这时候没有本地开发环境也就没法实现跨域了。</p>\n<p>详细内容如下：</p>","more":"<h2 id=\"为什么要使用proxyTable\"><a href=\"#为什么要使用proxyTable\" class=\"headerlink\" title=\"为什么要使用proxyTable\"></a>为什么要使用proxyTable</h2><ul>\n<li><strong>很简单，两个字，跨域。</strong></li>\n<li>在平时项目的开发环境中，经常会遇到跨域的问题，尤其是使用vue-cli这种脚手架工具开发时，由于项目本身启动本地服务是需要占用一个端口的，所以必然会产生跨域的问题。当然跨域有多种解决方式，这里就不一一例举，下次弄篇文章单独讲，在使用webpack做构建工具的项目中使用proxyTable代理实现跨域是一种比较方便的选择。</li>\n</ul>\n<h2 id=\"如何使用proxyTable\"><a href=\"#如何使用proxyTable\" class=\"headerlink\" title=\"如何使用proxyTable\"></a>如何使用proxyTable</h2><p>还是拿之前使用过的vue-cli举例。我们首先要在项目目录中找到根目录下config文件夹下的index.js文件。由于我们是在开发环境下使用，自然而然是要配置在dev里面：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dev: &#123;</span><br><span class=\"line\">  env: <span class=\"built_in\">require</span>(<span class=\"string\">'./dev.env'</span>),</span><br><span class=\"line\">  port: <span class=\"number\">8080</span>,</span><br><span class=\"line\">  autoOpenBrowser: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  assetsSubDirectory: <span class=\"string\">'static'</span>,</span><br><span class=\"line\">  assetsPublicPath: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">  proxyTable: &#123;</span><br><span class=\"line\">    <span class=\"string\">'/api'</span>: &#123;</span><br><span class=\"line\">      target: <span class=\"string\">'http://www.abc.com'</span>,  <span class=\"comment\">//目标接口域名</span></span><br><span class=\"line\">      changeOrigin: <span class=\"literal\">true</span>,  <span class=\"comment\">//是否跨域</span></span><br><span class=\"line\">      pathRewrite: &#123;</span><br><span class=\"line\">        <span class=\"string\">'^/api'</span>: <span class=\"string\">'/api'</span>   <span class=\"comment\">//重写接口</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  cssSourceMap: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面这段代码的效果就是将本地8080端口的一个请求代理到了 <a href=\"http://www.abc.com\" target=\"_blank\" rel=\"noopener\">http://www.abc.com</a> 这一域名下：</p>\n<p><code>&#39;http://localhost:8080/api&#39; ===&gt; &#39;http://www.abc.com/api&#39;</code></p>\n<h2 id=\"没有统一项目名下的使用\"><a href=\"#没有统一项目名下的使用\" class=\"headerlink\" title=\"没有统一项目名下的使用\"></a>没有统一项目名下的使用</h2><p>上面那种情况是有一个统一的项目名api的，所以说是比较好匹配的，就相当于说直接将以api开头的接口名代理一下换成目标域名访问就好了，可是如果说后台返给我们前端的接口没有了统一的项目名呢？之前，我是一个个单独去做了转换，接口少还没什么关系，但多了肯定是不现实的，前段时间在一次面试中受到了面试官的启发想到了这样一种取巧的方案：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//先人为给接口地址前面加上一个自定义的项目名</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> someApi = <span class=\"string\">'api'</span> + <span class=\"string\">'/xx/xx'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">dev: &#123;</span><br><span class=\"line\">  env: <span class=\"built_in\">require</span>(<span class=\"string\">'./dev.env'</span>),</span><br><span class=\"line\">  port: <span class=\"number\">8080</span>,</span><br><span class=\"line\">  autoOpenBrowser: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  assetsSubDirectory: <span class=\"string\">'static'</span>,</span><br><span class=\"line\">  assetsPublicPath: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">  proxyTable: &#123;</span><br><span class=\"line\">    <span class=\"string\">'/api'</span>: &#123;</span><br><span class=\"line\">      target: <span class=\"string\">'http://www.abc.com'</span>,  <span class=\"comment\">//目标接口域名</span></span><br><span class=\"line\">      changeOrigin: <span class=\"literal\">true</span>,  <span class=\"comment\">//是否跨域</span></span><br><span class=\"line\">      pathRewrite: &#123;</span><br><span class=\"line\">        <span class=\"string\">'^/api'</span>: <span class=\"string\">'/'</span>   <span class=\"comment\">//重写接口</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  cssSourceMap: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的项目名api是我们人为加上去的，经过代理之后就没了，这样我们在配置代理这里还是只需要配置一份就够了，只是在写接口地址时要注意区分开发环境和线上环境就可以了。</p>\n<h2 id=\"关于proxyTable的原理\"><a href=\"#关于proxyTable的原理\" class=\"headerlink\" title=\"关于proxyTable的原理\"></a>关于proxyTable的原理</h2><p>我在网上查了一下，这个代理实际上是利用http-proxy-middleware这个插件完成的，具体到这个插件的运行机制，由于是英文再加上能力有限就没深究了。但我想探究的是这种代理方式实际上是如何做到的，我看网上有人说实际上就是我们的本地服务器将请求转发给了目标服务器。之所以出现跨域是因为浏览器有同源策略的限制，但服务器是没有的，所以这种代理方式能够实现的机制大体就是：</p>\n<blockquote>\n<p>本地服务器 –》 代理 –》目标服务器 –》拿到数据后通过代理伪装成本地服务请求的返回值 —》然后浏览器就顺利收到了我们想要的数据</p>\n</blockquote>\n<p>这是我的简单理解，按这个理解来说的话只要服务器允许跨域，任何人都能够拿到它的数据吗？那样同源策略不就大大弱化了吗？目前对这个问题还不是太理解，希望有想法的小伙伴留言指正！</p>\n<p>原文地址：<a href=\"https://www.cnblogs.com/wancheng7/p/8987694.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/wancheng7/p/8987694.html</a></p>"},{"title":"vue条形码和二维码","toc":false,"date":"2019-03-28T09:43:44.000Z","_content":"\n先上效果图：\n\n![image.png](http://blogimage.houjiyi.com/Fj469wO3rqk9MbPqM0lh4bVQusYO)\n<!--more-->\n### 条形码：\n1. 安装jsbarcode\n```bash \nnpm install jsbarcode --save\n```\n2. 在使用的页面：\n```javascript\nimport JsBarcode from 'jsbarcode'\n```\n\n3. html\n```html\n<img id=\"barcode\" />\n```\n4. js: \n```javascript\nmounted(){            \n  JsBarcode(\"#barcode\", \"\", {\n    format: \"CODE128\",//选择要使用的条形码类型                \n    text: '条形码的数据',                \n    displayValue: true,//是否在条形码下方显示文字                \n    textPosition: \"bottom\"//设置文本的垂直位置            \n  })                 \n}\n```\n\n### 二维码：\n1. npm install jr-qrcode --save\n2. 在使用的页面：  import jrQrcode from \"jr-qrcode\"\n3. html：**qrcodeImg**在**data**里面声明一下\n```html\n<img :src=\"qrcodeImg\" alt=\"\" class=\"qrcodeImg\">\n```\n4. js:\n```javascript\nmounted() {            \n  this.qrcodeImg = jrQrcode.getQrBase64('条形码的数据')        \n}\n```\n\n作者：小丸子超级可爱\n链接：https://www.jianshu.com/p/7453e7247c3c\n来源：简书\n简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。\n","source":"_posts/vue条形码和二维码.md","raw":"---\ntitle: vue条形码和二维码\ntags:\n  - 知识点备忘\ncategories:\n  - Web开发\ntoc: false\ndate: 2019-03-28 17:43:44\n---\n\n先上效果图：\n\n![image.png](http://blogimage.houjiyi.com/Fj469wO3rqk9MbPqM0lh4bVQusYO)\n<!--more-->\n### 条形码：\n1. 安装jsbarcode\n```bash \nnpm install jsbarcode --save\n```\n2. 在使用的页面：\n```javascript\nimport JsBarcode from 'jsbarcode'\n```\n\n3. html\n```html\n<img id=\"barcode\" />\n```\n4. js: \n```javascript\nmounted(){            \n  JsBarcode(\"#barcode\", \"\", {\n    format: \"CODE128\",//选择要使用的条形码类型                \n    text: '条形码的数据',                \n    displayValue: true,//是否在条形码下方显示文字                \n    textPosition: \"bottom\"//设置文本的垂直位置            \n  })                 \n}\n```\n\n### 二维码：\n1. npm install jr-qrcode --save\n2. 在使用的页面：  import jrQrcode from \"jr-qrcode\"\n3. html：**qrcodeImg**在**data**里面声明一下\n```html\n<img :src=\"qrcodeImg\" alt=\"\" class=\"qrcodeImg\">\n```\n4. js:\n```javascript\nmounted() {            \n  this.qrcodeImg = jrQrcode.getQrBase64('条形码的数据')        \n}\n```\n\n作者：小丸子超级可爱\n链接：https://www.jianshu.com/p/7453e7247c3c\n来源：简书\n简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。\n","slug":"vue条形码和二维码","published":1,"updated":"2019-11-07T02:19:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockznzx0068h5s68pvgor0p","content":"<p>先上效果图：</p>\n<p><img src=\"http://blogimage.houjiyi.com/Fj469wO3rqk9MbPqM0lh4bVQusYO\" alt=\"image.png\"><br><a id=\"more\"></a></p>\n<h3 id=\"条形码：\"><a href=\"#条形码：\" class=\"headerlink\" title=\"条形码：\"></a>条形码：</h3><ol>\n<li><p>安装jsbarcode</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install jsbarcode --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在使用的页面：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> JsBarcode <span class=\"keyword\">from</span> <span class=\"string\">'jsbarcode'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">id</span>=<span class=\"string\">\"barcode\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>js: </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mounted()&#123;            </span><br><span class=\"line\">  JsBarcode(<span class=\"string\">\"#barcode\"</span>, <span class=\"string\">\"\"</span>, &#123;</span><br><span class=\"line\">    format: <span class=\"string\">\"CODE128\"</span>,<span class=\"comment\">//选择要使用的条形码类型                </span></span><br><span class=\"line\">    text: <span class=\"string\">'条形码的数据'</span>,                </span><br><span class=\"line\">    displayValue: <span class=\"literal\">true</span>,<span class=\"comment\">//是否在条形码下方显示文字                </span></span><br><span class=\"line\">    textPosition: <span class=\"string\">\"bottom\"</span><span class=\"comment\">//设置文本的垂直位置            </span></span><br><span class=\"line\">  &#125;)                 </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"二维码：\"><a href=\"#二维码：\" class=\"headerlink\" title=\"二维码：\"></a>二维码：</h3><ol>\n<li>npm install jr-qrcode –save</li>\n<li>在使用的页面：  import jrQrcode from “jr-qrcode”</li>\n<li><p>html：<strong>qrcodeImg</strong>在<strong>data</strong>里面声明一下</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"qrcodeImg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"qrcodeImg\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>js:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mounted() &#123;            </span><br><span class=\"line\">  <span class=\"keyword\">this</span>.qrcodeImg = jrQrcode.getQrBase64(<span class=\"string\">'条形码的数据'</span>)        </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>作者：小丸子超级可爱<br>链接：<a href=\"https://www.jianshu.com/p/7453e7247c3c\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/7453e7247c3c</a><br>来源：简书<br>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p>\n","site":{"data":{}},"excerpt":"<p>先上效果图：</p>\n<p><img src=\"http://blogimage.houjiyi.com/Fj469wO3rqk9MbPqM0lh4bVQusYO\" alt=\"image.png\"><br>","more":"</p>\n<h3 id=\"条形码：\"><a href=\"#条形码：\" class=\"headerlink\" title=\"条形码：\"></a>条形码：</h3><ol>\n<li><p>安装jsbarcode</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install jsbarcode --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在使用的页面：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> JsBarcode <span class=\"keyword\">from</span> <span class=\"string\">'jsbarcode'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">id</span>=<span class=\"string\">\"barcode\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>js: </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mounted()&#123;            </span><br><span class=\"line\">  JsBarcode(<span class=\"string\">\"#barcode\"</span>, <span class=\"string\">\"\"</span>, &#123;</span><br><span class=\"line\">    format: <span class=\"string\">\"CODE128\"</span>,<span class=\"comment\">//选择要使用的条形码类型                </span></span><br><span class=\"line\">    text: <span class=\"string\">'条形码的数据'</span>,                </span><br><span class=\"line\">    displayValue: <span class=\"literal\">true</span>,<span class=\"comment\">//是否在条形码下方显示文字                </span></span><br><span class=\"line\">    textPosition: <span class=\"string\">\"bottom\"</span><span class=\"comment\">//设置文本的垂直位置            </span></span><br><span class=\"line\">  &#125;)                 </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"二维码：\"><a href=\"#二维码：\" class=\"headerlink\" title=\"二维码：\"></a>二维码：</h3><ol>\n<li>npm install jr-qrcode –save</li>\n<li>在使用的页面：  import jrQrcode from “jr-qrcode”</li>\n<li><p>html：<strong>qrcodeImg</strong>在<strong>data</strong>里面声明一下</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"qrcodeImg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"qrcodeImg\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>js:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mounted() &#123;            </span><br><span class=\"line\">  <span class=\"keyword\">this</span>.qrcodeImg = jrQrcode.getQrBase64(<span class=\"string\">'条形码的数据'</span>)        </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>作者：小丸子超级可爱<br>链接：<a href=\"https://www.jianshu.com/p/7453e7247c3c\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/7453e7247c3c</a><br>来源：简书<br>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p>"},{"title":"web页面播放amr文件","toc":false,"date":"2019-04-18T07:26:17.000Z","_content":"\n> git地址：[https://github.com/alex374/amr-player](https://github.com/alex374/amr-player)\n\ndemo如下：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Title</title>\n  <script src=\"./amrnb.js\"></script>\n  <script src=\"./amrplayer.js\"></script>\n  <script type=\"text/javascript\">\n    var player = new AmrPlayer('http://yxl.github.io/opencore-amr-js/yuan.amr', function(){\n      console.log('--------success--------')\n      console.log(`success`)\n      console.log('--------success--------')\n    }, function(e){\n      console.log('--------process--------')\n      console.log(e)\n      console.log('--------process--------')\n    });\n  </script>\n</head>\n<body>\n<input id=\"button\" type=\"button\" value=\"button\">\n<script type=\"text/javascript\">\n  document.getElementById('button').addEventListener('click', function(){\n    player.play()\n  })\n</script>\n</body>\n</html>\n```\n","source":"_posts/web页面播放amr文件.md","raw":"---\ntitle: web页面播放amr文件\ntags:\n  - 知识点备忘\ncategories:\n  - Web开发\ntoc: false\ndate: 2019-04-18 15:26:17\n---\n\n> git地址：[https://github.com/alex374/amr-player](https://github.com/alex374/amr-player)\n\ndemo如下：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Title</title>\n  <script src=\"./amrnb.js\"></script>\n  <script src=\"./amrplayer.js\"></script>\n  <script type=\"text/javascript\">\n    var player = new AmrPlayer('http://yxl.github.io/opencore-amr-js/yuan.amr', function(){\n      console.log('--------success--------')\n      console.log(`success`)\n      console.log('--------success--------')\n    }, function(e){\n      console.log('--------process--------')\n      console.log(e)\n      console.log('--------process--------')\n    });\n  </script>\n</head>\n<body>\n<input id=\"button\" type=\"button\" value=\"button\">\n<script type=\"text/javascript\">\n  document.getElementById('button').addEventListener('click', function(){\n    player.play()\n  })\n</script>\n</body>\n</html>\n```\n","slug":"web页面播放amr文件","published":1,"updated":"2019-11-07T02:19:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo00006bh5s6gi5732zf","content":"<blockquote>\n<p>git地址：<a href=\"https://github.com/alex374/amr-player\" target=\"_blank\" rel=\"noopener\">https://github.com/alex374/amr-player</a></p>\n</blockquote>\n<p>demo如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./amrnb.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./amrplayer.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> player = <span class=\"keyword\">new</span> AmrPlayer(<span class=\"string\">'http://yxl.github.io/opencore-amr-js/yuan.amr'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'--------success--------'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`success`</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'--------success--------'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'--------process--------'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(e)</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'--------process--------'</span>)</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"button\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'button'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\">    player.play()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>git地址：<a href=\"https://github.com/alex374/amr-player\" target=\"_blank\" rel=\"noopener\">https://github.com/alex374/amr-player</a></p>\n</blockquote>\n<p>demo如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./amrnb.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./amrplayer.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> player = <span class=\"keyword\">new</span> AmrPlayer(<span class=\"string\">'http://yxl.github.io/opencore-amr-js/yuan.amr'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'--------success--------'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`success`</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'--------success--------'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'--------process--------'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(e)</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'--------process--------'</span>)</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"button\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'button'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\">    player.play()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"wget命令","toc":false,"date":"2018-01-17T09:17:01.000Z","_content":"\nwget命令用来从指定的URL下载文件。wget非常稳定，它在带宽很窄的情况下和不稳定网络中有很强的适应性，如果是由于网络的原因下载失败，wget会不断的尝试，直到整个文件下载完毕。如果是服务器打断下载过程，它会再次联到服务器上从停止的地方继续下载。这对从那些限定了链接时间的服务器上下载大文件非常有用。\n\n## 语法\n\n```\nwget(选项)(参数)\n```\n<!-- more -->\n## 选项\n\n```\n-a<日志文件>：在指定的日志文件中记录资料的执行过程；\n-A<后缀名>：指定要下载文件的后缀名，多个后缀名之间使用逗号进行分隔；\n-b：进行后台的方式运行wget；\n-B<连接地址>：设置参考的连接地址的基地地址；\n-c：继续执行上次终端的任务；\n-C<标志>：设置服务器数据块功能标志on为激活，off为关闭，默认值为on；\n-d：调试模式运行指令；\n-D<域名列表>：设置顺着的域名列表，域名之间用“，”分隔；\n-e<指令>：作为文件“.wgetrc”中的一部分执行指定的指令；\n-h：显示指令帮助信息；\n-i<文件>：从指定文件获取要下载的URL地址；\n-l<目录列表>：设置顺着的目录列表，多个目录用“，”分隔；\n-L：仅顺着关联的连接；\n-r：递归下载方式；\n-nc：文件存在时，下载文件不覆盖原有文件；\n-nv：下载时只显示更新和出错信息，不显示指令的详细执行过程；\n-q：不显示指令执行过程；\n-nh：不查询主机名称；\n-v：显示详细执行过程；\n-V：显示版本信息；\n--passive-ftp：使用被动模式PASV连接FTP服务器；\n--follow-ftp：从HTML文件中下载FTP连接文件。\n```\n\n## 参数\nURL：下载指定的URL地址。\n\n## 实例\n\n### 使用wget下载单个文件\n```\nwget http://www.linuxde.net/testfile.zip\n```\n以下的例子是从网络下载一个文件并保存在当前目录，在下载的过程中会显示进度条，包含（下载完成百分比，已经下载的字节，当前下载速度，剩余下载时间）。\n\n### 下载并以不同的文件名保存\n```\nwget -O wordpress.zip http://www.linuxde.net/download.aspx?id=1080\n```\n\nwget默认会以最后一个符合`/`的后面的字符来命令，对于动态链接的下载通常文件名会不正确。\n\n错误：下面的例子会下载一个文件并以名称`download.aspx?id=1080`保存:\n\n```\nwget http://www.linuxde.net/download?id=1\n```\n\n即使下载的文件是zip格式，它仍然以`download.php?id=1080`命令。\n\n正确：为了解决这个问题，我们可以使用参数`-O`来指定一个文件名：\n\n```\nwget -O wordpress.zip http://www.linuxde.net/download.aspx?id=1080\n```\n\n### wget限速下载\n```\nwget --limit-rate=300k http://www.linuxde.net/testfile.zip\n```\n\n当你执行wget的时候，它默认会占用全部可能的宽带下载。但是当你准备下载一个大文件，而你还需要下载其它文件时就有必要限速了。\n\n### 使用wget断点续传\n\n```\nwget -c http://www.linuxde.net/testfile.zip\n```\n\n使用`wget -c`重新启动下载中断的文件，对于我们下载大文件时突然由于网络等原因中断非常有帮助，我们可以继续接着下载而不是重新下载一个文件。需要继续中断的下载时可以使用`-c`参数。\n\n### 使用wget后台下载\n```\nwget -b http://www.linuxde.net/testfile.zip\n\nContinuing in background, pid 1840.\nOutput will be written to `wget-log'.\n```\n\n对于下载非常大的文件的时候，我们可以使用参数`-b`进行后台下载，你可以使用以下命令来察看下载进度：\n\n```\ntail -f wget-log\n```\n\n### tail -f wget-log\n```\nwget --user-agent=\"Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.648.204 Safari/534.16\" http://www.linuxde.net/testfile.zip\n```\n\n有些网站能通过根据判断代理名称不是浏览器而拒绝你的下载请求。不过你可以通过`--user-agent`参数伪装。\n\n### 测试下载链接\n当你打算进行定时下载，你应该在预定时间测试下载链接是否有效。我们可以增加`--spider`参数进行检查。\n\n```\nwget --spider URL\n```\n\n如果下载链接正确，将会显示:\n\n```\nSpider mode enabled. Check if remote file exists.\nHTTP request sent, awaiting response... 200 OK\nLength: unspecified [text/html]\nRemote file exists and could contain further links,\nbut recursion is disabled -- not retrieving.\n```\n\n这保证了下载能在预定的时间进行，但当你给错了一个链接，将会显示如下错误:\n\n```\nwget --spider url\nSpider mode enabled. Check if remote file exists.\nHTTP request sent, awaiting response... 404 Not Found\nRemote file does not exist -- broken link!!!\n```\n\n你可以在以下几种情况下使用`--spider`参数：\n\n1. 定时下载之前进行检查\n2. 间隔检测网站是否可用\n3. 检查网站页面的死链接\n\n### 增加重试次数\n\n```\nwget --tries=40 URL\n```\n\n如果网络有问题或下载一个大文件也有可能失败。wget默认重试20次连接下载文件。如果需要，你可以使用--tries增加重试次数。\n\n### 下载多个文件\n\n```\nwget -i filelist.txt\n```\n\n首先，保存一份下载链接文件：\n\n```\ncat > filelist.txt\nurl1\nurl2\nurl3\nurl4\n```\n\n接着使用这个文件和参数`-i`下载。\n\n### 镜像网站\n\n```\nwget --mirror -p --convert-links -P ./LOCAL URL\n```\n\n下载整个网站到本地。\n\n* `--miror`开户镜像下载。\n* `-p`下载所有为了html页面显示正常的文件。\n* `--convert-links`下载后，转换成本地的链接。\n* `-P ./LOCAL`保存所有文件和目录到本地指定目录。\n\n### 过滤指定格式下载\n\n```\nwget --reject=gif URL\n```\n\n下载一个网站，但你不希望下载图片，可以使用这条命令。\n\n### 把下载信息存入日志文件\n\n```\nwget -o download.log URL\n```\n\n不希望下载信息直接显示在终端而是在一个日志文件，可以使用。\n\n### 限制总下载文件大小\n```\nwget -Q5m -i filelist.txt\n```\n当你想要下载的文件超过5M而退出下载，你可以使用。注意：这个参数对单个文件下载不起作用，只能递归下载时才有效。\n\n### 下载指定格式文件\n```\nwget -r -A.pdf url\n```\n\n可以在以下情况使用该功能：\n\n* 下载一个网站的所有图片。\n* 下载一个网站的所有视频。\n* 下载一个网站的所有PDF文件。\n\n### FTP下载\n```\nwget ftp-url\nwget --ftp-user=USERNAME --ftp-password=PASSWORD url\n```\n可以使用wget来完成ftp链接的下载。\n\n使用wget匿名ftp下载： \n\n```\nwget ftp-url\n```\n\n使用wget用户名和密码认证的ftp下载：\n\n```\nwget --ftp-user=USERNAME --ftp-password=PASSWORD url\n```\n\n[原文地址](http://man.linuxde.net/wget)\n","source":"_posts/wget命令.md","raw":"---\ntitle: wget命令\ntags:\n  - linux\ncategories:\n  - 后端开发\ntoc: false\ndate: 2018-01-17 17:17:01\n---\n\nwget命令用来从指定的URL下载文件。wget非常稳定，它在带宽很窄的情况下和不稳定网络中有很强的适应性，如果是由于网络的原因下载失败，wget会不断的尝试，直到整个文件下载完毕。如果是服务器打断下载过程，它会再次联到服务器上从停止的地方继续下载。这对从那些限定了链接时间的服务器上下载大文件非常有用。\n\n## 语法\n\n```\nwget(选项)(参数)\n```\n<!-- more -->\n## 选项\n\n```\n-a<日志文件>：在指定的日志文件中记录资料的执行过程；\n-A<后缀名>：指定要下载文件的后缀名，多个后缀名之间使用逗号进行分隔；\n-b：进行后台的方式运行wget；\n-B<连接地址>：设置参考的连接地址的基地地址；\n-c：继续执行上次终端的任务；\n-C<标志>：设置服务器数据块功能标志on为激活，off为关闭，默认值为on；\n-d：调试模式运行指令；\n-D<域名列表>：设置顺着的域名列表，域名之间用“，”分隔；\n-e<指令>：作为文件“.wgetrc”中的一部分执行指定的指令；\n-h：显示指令帮助信息；\n-i<文件>：从指定文件获取要下载的URL地址；\n-l<目录列表>：设置顺着的目录列表，多个目录用“，”分隔；\n-L：仅顺着关联的连接；\n-r：递归下载方式；\n-nc：文件存在时，下载文件不覆盖原有文件；\n-nv：下载时只显示更新和出错信息，不显示指令的详细执行过程；\n-q：不显示指令执行过程；\n-nh：不查询主机名称；\n-v：显示详细执行过程；\n-V：显示版本信息；\n--passive-ftp：使用被动模式PASV连接FTP服务器；\n--follow-ftp：从HTML文件中下载FTP连接文件。\n```\n\n## 参数\nURL：下载指定的URL地址。\n\n## 实例\n\n### 使用wget下载单个文件\n```\nwget http://www.linuxde.net/testfile.zip\n```\n以下的例子是从网络下载一个文件并保存在当前目录，在下载的过程中会显示进度条，包含（下载完成百分比，已经下载的字节，当前下载速度，剩余下载时间）。\n\n### 下载并以不同的文件名保存\n```\nwget -O wordpress.zip http://www.linuxde.net/download.aspx?id=1080\n```\n\nwget默认会以最后一个符合`/`的后面的字符来命令，对于动态链接的下载通常文件名会不正确。\n\n错误：下面的例子会下载一个文件并以名称`download.aspx?id=1080`保存:\n\n```\nwget http://www.linuxde.net/download?id=1\n```\n\n即使下载的文件是zip格式，它仍然以`download.php?id=1080`命令。\n\n正确：为了解决这个问题，我们可以使用参数`-O`来指定一个文件名：\n\n```\nwget -O wordpress.zip http://www.linuxde.net/download.aspx?id=1080\n```\n\n### wget限速下载\n```\nwget --limit-rate=300k http://www.linuxde.net/testfile.zip\n```\n\n当你执行wget的时候，它默认会占用全部可能的宽带下载。但是当你准备下载一个大文件，而你还需要下载其它文件时就有必要限速了。\n\n### 使用wget断点续传\n\n```\nwget -c http://www.linuxde.net/testfile.zip\n```\n\n使用`wget -c`重新启动下载中断的文件，对于我们下载大文件时突然由于网络等原因中断非常有帮助，我们可以继续接着下载而不是重新下载一个文件。需要继续中断的下载时可以使用`-c`参数。\n\n### 使用wget后台下载\n```\nwget -b http://www.linuxde.net/testfile.zip\n\nContinuing in background, pid 1840.\nOutput will be written to `wget-log'.\n```\n\n对于下载非常大的文件的时候，我们可以使用参数`-b`进行后台下载，你可以使用以下命令来察看下载进度：\n\n```\ntail -f wget-log\n```\n\n### tail -f wget-log\n```\nwget --user-agent=\"Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.648.204 Safari/534.16\" http://www.linuxde.net/testfile.zip\n```\n\n有些网站能通过根据判断代理名称不是浏览器而拒绝你的下载请求。不过你可以通过`--user-agent`参数伪装。\n\n### 测试下载链接\n当你打算进行定时下载，你应该在预定时间测试下载链接是否有效。我们可以增加`--spider`参数进行检查。\n\n```\nwget --spider URL\n```\n\n如果下载链接正确，将会显示:\n\n```\nSpider mode enabled. Check if remote file exists.\nHTTP request sent, awaiting response... 200 OK\nLength: unspecified [text/html]\nRemote file exists and could contain further links,\nbut recursion is disabled -- not retrieving.\n```\n\n这保证了下载能在预定的时间进行，但当你给错了一个链接，将会显示如下错误:\n\n```\nwget --spider url\nSpider mode enabled. Check if remote file exists.\nHTTP request sent, awaiting response... 404 Not Found\nRemote file does not exist -- broken link!!!\n```\n\n你可以在以下几种情况下使用`--spider`参数：\n\n1. 定时下载之前进行检查\n2. 间隔检测网站是否可用\n3. 检查网站页面的死链接\n\n### 增加重试次数\n\n```\nwget --tries=40 URL\n```\n\n如果网络有问题或下载一个大文件也有可能失败。wget默认重试20次连接下载文件。如果需要，你可以使用--tries增加重试次数。\n\n### 下载多个文件\n\n```\nwget -i filelist.txt\n```\n\n首先，保存一份下载链接文件：\n\n```\ncat > filelist.txt\nurl1\nurl2\nurl3\nurl4\n```\n\n接着使用这个文件和参数`-i`下载。\n\n### 镜像网站\n\n```\nwget --mirror -p --convert-links -P ./LOCAL URL\n```\n\n下载整个网站到本地。\n\n* `--miror`开户镜像下载。\n* `-p`下载所有为了html页面显示正常的文件。\n* `--convert-links`下载后，转换成本地的链接。\n* `-P ./LOCAL`保存所有文件和目录到本地指定目录。\n\n### 过滤指定格式下载\n\n```\nwget --reject=gif URL\n```\n\n下载一个网站，但你不希望下载图片，可以使用这条命令。\n\n### 把下载信息存入日志文件\n\n```\nwget -o download.log URL\n```\n\n不希望下载信息直接显示在终端而是在一个日志文件，可以使用。\n\n### 限制总下载文件大小\n```\nwget -Q5m -i filelist.txt\n```\n当你想要下载的文件超过5M而退出下载，你可以使用。注意：这个参数对单个文件下载不起作用，只能递归下载时才有效。\n\n### 下载指定格式文件\n```\nwget -r -A.pdf url\n```\n\n可以在以下情况使用该功能：\n\n* 下载一个网站的所有图片。\n* 下载一个网站的所有视频。\n* 下载一个网站的所有PDF文件。\n\n### FTP下载\n```\nwget ftp-url\nwget --ftp-user=USERNAME --ftp-password=PASSWORD url\n```\n可以使用wget来完成ftp链接的下载。\n\n使用wget匿名ftp下载： \n\n```\nwget ftp-url\n```\n\n使用wget用户名和密码认证的ftp下载：\n\n```\nwget --ftp-user=USERNAME --ftp-password=PASSWORD url\n```\n\n[原文地址](http://man.linuxde.net/wget)\n","slug":"wget命令","published":1,"updated":"2019-11-07T02:19:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo02006fh5s6nkltdkl4","content":"<p>wget命令用来从指定的URL下载文件。wget非常稳定，它在带宽很窄的情况下和不稳定网络中有很强的适应性，如果是由于网络的原因下载失败，wget会不断的尝试，直到整个文件下载完毕。如果是服务器打断下载过程，它会再次联到服务器上从停止的地方继续下载。这对从那些限定了链接时间的服务器上下载大文件非常有用。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget(选项)(参数)</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-a&lt;日志文件&gt;：在指定的日志文件中记录资料的执行过程；</span><br><span class=\"line\">-A&lt;后缀名&gt;：指定要下载文件的后缀名，多个后缀名之间使用逗号进行分隔；</span><br><span class=\"line\">-b：进行后台的方式运行wget；</span><br><span class=\"line\">-B&lt;连接地址&gt;：设置参考的连接地址的基地地址；</span><br><span class=\"line\">-c：继续执行上次终端的任务；</span><br><span class=\"line\">-C&lt;标志&gt;：设置服务器数据块功能标志on为激活，off为关闭，默认值为on；</span><br><span class=\"line\">-d：调试模式运行指令；</span><br><span class=\"line\">-D&lt;域名列表&gt;：设置顺着的域名列表，域名之间用“，”分隔；</span><br><span class=\"line\">-e&lt;指令&gt;：作为文件“.wgetrc”中的一部分执行指定的指令；</span><br><span class=\"line\">-h：显示指令帮助信息；</span><br><span class=\"line\">-i&lt;文件&gt;：从指定文件获取要下载的URL地址；</span><br><span class=\"line\">-l&lt;目录列表&gt;：设置顺着的目录列表，多个目录用“，”分隔；</span><br><span class=\"line\">-L：仅顺着关联的连接；</span><br><span class=\"line\">-r：递归下载方式；</span><br><span class=\"line\">-nc：文件存在时，下载文件不覆盖原有文件；</span><br><span class=\"line\">-nv：下载时只显示更新和出错信息，不显示指令的详细执行过程；</span><br><span class=\"line\">-q：不显示指令执行过程；</span><br><span class=\"line\">-nh：不查询主机名称；</span><br><span class=\"line\">-v：显示详细执行过程；</span><br><span class=\"line\">-V：显示版本信息；</span><br><span class=\"line\">--passive-ftp：使用被动模式PASV连接FTP服务器；</span><br><span class=\"line\">--follow-ftp：从HTML文件中下载FTP连接文件。</span><br></pre></td></tr></table></figure>\n<h2 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h2><p>URL：下载指定的URL地址。</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><h3 id=\"使用wget下载单个文件\"><a href=\"#使用wget下载单个文件\" class=\"headerlink\" title=\"使用wget下载单个文件\"></a>使用wget下载单个文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://www.linuxde.net/testfile.zip</span><br></pre></td></tr></table></figure>\n<p>以下的例子是从网络下载一个文件并保存在当前目录，在下载的过程中会显示进度条，包含（下载完成百分比，已经下载的字节，当前下载速度，剩余下载时间）。</p>\n<h3 id=\"下载并以不同的文件名保存\"><a href=\"#下载并以不同的文件名保存\" class=\"headerlink\" title=\"下载并以不同的文件名保存\"></a>下载并以不同的文件名保存</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -O wordpress.zip http://www.linuxde.net/download.aspx?id=1080</span><br></pre></td></tr></table></figure>\n<p>wget默认会以最后一个符合<code>/</code>的后面的字符来命令，对于动态链接的下载通常文件名会不正确。</p>\n<p>错误：下面的例子会下载一个文件并以名称<code>download.aspx?id=1080</code>保存:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://www.linuxde.net/download?id=1</span><br></pre></td></tr></table></figure>\n<p>即使下载的文件是zip格式，它仍然以<code>download.php?id=1080</code>命令。</p>\n<p>正确：为了解决这个问题，我们可以使用参数<code>-O</code>来指定一个文件名：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -O wordpress.zip http://www.linuxde.net/download.aspx?id=1080</span><br></pre></td></tr></table></figure>\n<h3 id=\"wget限速下载\"><a href=\"#wget限速下载\" class=\"headerlink\" title=\"wget限速下载\"></a>wget限速下载</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --limit-rate=300k http://www.linuxde.net/testfile.zip</span><br></pre></td></tr></table></figure>\n<p>当你执行wget的时候，它默认会占用全部可能的宽带下载。但是当你准备下载一个大文件，而你还需要下载其它文件时就有必要限速了。</p>\n<h3 id=\"使用wget断点续传\"><a href=\"#使用wget断点续传\" class=\"headerlink\" title=\"使用wget断点续传\"></a>使用wget断点续传</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -c http://www.linuxde.net/testfile.zip</span><br></pre></td></tr></table></figure>\n<p>使用<code>wget -c</code>重新启动下载中断的文件，对于我们下载大文件时突然由于网络等原因中断非常有帮助，我们可以继续接着下载而不是重新下载一个文件。需要继续中断的下载时可以使用<code>-c</code>参数。</p>\n<h3 id=\"使用wget后台下载\"><a href=\"#使用wget后台下载\" class=\"headerlink\" title=\"使用wget后台下载\"></a>使用wget后台下载</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -b http://www.linuxde.net/testfile.zip</span><br><span class=\"line\"></span><br><span class=\"line\">Continuing in background, pid 1840.</span><br><span class=\"line\">Output will be written to `wget-log&apos;.</span><br></pre></td></tr></table></figure>\n<p>对于下载非常大的文件的时候，我们可以使用参数<code>-b</code>进行后台下载，你可以使用以下命令来察看下载进度：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tail -f wget-log</span><br></pre></td></tr></table></figure>\n<h3 id=\"tail-f-wget-log\"><a href=\"#tail-f-wget-log\" class=\"headerlink\" title=\"tail -f wget-log\"></a>tail -f wget-log</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --user-agent=&quot;Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.648.204 Safari/534.16&quot; http://www.linuxde.net/testfile.zip</span><br></pre></td></tr></table></figure>\n<p>有些网站能通过根据判断代理名称不是浏览器而拒绝你的下载请求。不过你可以通过<code>--user-agent</code>参数伪装。</p>\n<h3 id=\"测试下载链接\"><a href=\"#测试下载链接\" class=\"headerlink\" title=\"测试下载链接\"></a>测试下载链接</h3><p>当你打算进行定时下载，你应该在预定时间测试下载链接是否有效。我们可以增加<code>--spider</code>参数进行检查。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --spider URL</span><br></pre></td></tr></table></figure>\n<p>如果下载链接正确，将会显示:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Spider mode enabled. Check if remote file exists.</span><br><span class=\"line\">HTTP request sent, awaiting response... 200 OK</span><br><span class=\"line\">Length: unspecified [text/html]</span><br><span class=\"line\">Remote file exists and could contain further links,</span><br><span class=\"line\">but recursion is disabled -- not retrieving.</span><br></pre></td></tr></table></figure>\n<p>这保证了下载能在预定的时间进行，但当你给错了一个链接，将会显示如下错误:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --spider url</span><br><span class=\"line\">Spider mode enabled. Check if remote file exists.</span><br><span class=\"line\">HTTP request sent, awaiting response... 404 Not Found</span><br><span class=\"line\">Remote file does not exist -- broken link!!!</span><br></pre></td></tr></table></figure>\n<p>你可以在以下几种情况下使用<code>--spider</code>参数：</p>\n<ol>\n<li>定时下载之前进行检查</li>\n<li>间隔检测网站是否可用</li>\n<li>检查网站页面的死链接</li>\n</ol>\n<h3 id=\"增加重试次数\"><a href=\"#增加重试次数\" class=\"headerlink\" title=\"增加重试次数\"></a>增加重试次数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --tries=40 URL</span><br></pre></td></tr></table></figure>\n<p>如果网络有问题或下载一个大文件也有可能失败。wget默认重试20次连接下载文件。如果需要，你可以使用–tries增加重试次数。</p>\n<h3 id=\"下载多个文件\"><a href=\"#下载多个文件\" class=\"headerlink\" title=\"下载多个文件\"></a>下载多个文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -i filelist.txt</span><br></pre></td></tr></table></figure>\n<p>首先，保存一份下载链接文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; filelist.txt</span><br><span class=\"line\">url1</span><br><span class=\"line\">url2</span><br><span class=\"line\">url3</span><br><span class=\"line\">url4</span><br></pre></td></tr></table></figure>\n<p>接着使用这个文件和参数<code>-i</code>下载。</p>\n<h3 id=\"镜像网站\"><a href=\"#镜像网站\" class=\"headerlink\" title=\"镜像网站\"></a>镜像网站</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --mirror -p --convert-links -P ./LOCAL URL</span><br></pre></td></tr></table></figure>\n<p>下载整个网站到本地。</p>\n<ul>\n<li><code>--miror</code>开户镜像下载。</li>\n<li><code>-p</code>下载所有为了html页面显示正常的文件。</li>\n<li><code>--convert-links</code>下载后，转换成本地的链接。</li>\n<li><code>-P ./LOCAL</code>保存所有文件和目录到本地指定目录。</li>\n</ul>\n<h3 id=\"过滤指定格式下载\"><a href=\"#过滤指定格式下载\" class=\"headerlink\" title=\"过滤指定格式下载\"></a>过滤指定格式下载</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --reject=gif URL</span><br></pre></td></tr></table></figure>\n<p>下载一个网站，但你不希望下载图片，可以使用这条命令。</p>\n<h3 id=\"把下载信息存入日志文件\"><a href=\"#把下载信息存入日志文件\" class=\"headerlink\" title=\"把下载信息存入日志文件\"></a>把下载信息存入日志文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -o download.log URL</span><br></pre></td></tr></table></figure>\n<p>不希望下载信息直接显示在终端而是在一个日志文件，可以使用。</p>\n<h3 id=\"限制总下载文件大小\"><a href=\"#限制总下载文件大小\" class=\"headerlink\" title=\"限制总下载文件大小\"></a>限制总下载文件大小</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -Q5m -i filelist.txt</span><br></pre></td></tr></table></figure>\n<p>当你想要下载的文件超过5M而退出下载，你可以使用。注意：这个参数对单个文件下载不起作用，只能递归下载时才有效。</p>\n<h3 id=\"下载指定格式文件\"><a href=\"#下载指定格式文件\" class=\"headerlink\" title=\"下载指定格式文件\"></a>下载指定格式文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -r -A.pdf url</span><br></pre></td></tr></table></figure>\n<p>可以在以下情况使用该功能：</p>\n<ul>\n<li>下载一个网站的所有图片。</li>\n<li>下载一个网站的所有视频。</li>\n<li>下载一个网站的所有PDF文件。</li>\n</ul>\n<h3 id=\"FTP下载\"><a href=\"#FTP下载\" class=\"headerlink\" title=\"FTP下载\"></a>FTP下载</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget ftp-url</span><br><span class=\"line\">wget --ftp-user=USERNAME --ftp-password=PASSWORD url</span><br></pre></td></tr></table></figure>\n<p>可以使用wget来完成ftp链接的下载。</p>\n<p>使用wget匿名ftp下载： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget ftp-url</span><br></pre></td></tr></table></figure>\n<p>使用wget用户名和密码认证的ftp下载：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --ftp-user=USERNAME --ftp-password=PASSWORD url</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://man.linuxde.net/wget\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n","site":{"data":{}},"excerpt":"<p>wget命令用来从指定的URL下载文件。wget非常稳定，它在带宽很窄的情况下和不稳定网络中有很强的适应性，如果是由于网络的原因下载失败，wget会不断的尝试，直到整个文件下载完毕。如果是服务器打断下载过程，它会再次联到服务器上从停止的地方继续下载。这对从那些限定了链接时间的服务器上下载大文件非常有用。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget(选项)(参数)</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-a&lt;日志文件&gt;：在指定的日志文件中记录资料的执行过程；</span><br><span class=\"line\">-A&lt;后缀名&gt;：指定要下载文件的后缀名，多个后缀名之间使用逗号进行分隔；</span><br><span class=\"line\">-b：进行后台的方式运行wget；</span><br><span class=\"line\">-B&lt;连接地址&gt;：设置参考的连接地址的基地地址；</span><br><span class=\"line\">-c：继续执行上次终端的任务；</span><br><span class=\"line\">-C&lt;标志&gt;：设置服务器数据块功能标志on为激活，off为关闭，默认值为on；</span><br><span class=\"line\">-d：调试模式运行指令；</span><br><span class=\"line\">-D&lt;域名列表&gt;：设置顺着的域名列表，域名之间用“，”分隔；</span><br><span class=\"line\">-e&lt;指令&gt;：作为文件“.wgetrc”中的一部分执行指定的指令；</span><br><span class=\"line\">-h：显示指令帮助信息；</span><br><span class=\"line\">-i&lt;文件&gt;：从指定文件获取要下载的URL地址；</span><br><span class=\"line\">-l&lt;目录列表&gt;：设置顺着的目录列表，多个目录用“，”分隔；</span><br><span class=\"line\">-L：仅顺着关联的连接；</span><br><span class=\"line\">-r：递归下载方式；</span><br><span class=\"line\">-nc：文件存在时，下载文件不覆盖原有文件；</span><br><span class=\"line\">-nv：下载时只显示更新和出错信息，不显示指令的详细执行过程；</span><br><span class=\"line\">-q：不显示指令执行过程；</span><br><span class=\"line\">-nh：不查询主机名称；</span><br><span class=\"line\">-v：显示详细执行过程；</span><br><span class=\"line\">-V：显示版本信息；</span><br><span class=\"line\">--passive-ftp：使用被动模式PASV连接FTP服务器；</span><br><span class=\"line\">--follow-ftp：从HTML文件中下载FTP连接文件。</span><br></pre></td></tr></table></figure>\n<h2 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h2><p>URL：下载指定的URL地址。</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><h3 id=\"使用wget下载单个文件\"><a href=\"#使用wget下载单个文件\" class=\"headerlink\" title=\"使用wget下载单个文件\"></a>使用wget下载单个文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://www.linuxde.net/testfile.zip</span><br></pre></td></tr></table></figure>\n<p>以下的例子是从网络下载一个文件并保存在当前目录，在下载的过程中会显示进度条，包含（下载完成百分比，已经下载的字节，当前下载速度，剩余下载时间）。</p>\n<h3 id=\"下载并以不同的文件名保存\"><a href=\"#下载并以不同的文件名保存\" class=\"headerlink\" title=\"下载并以不同的文件名保存\"></a>下载并以不同的文件名保存</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -O wordpress.zip http://www.linuxde.net/download.aspx?id=1080</span><br></pre></td></tr></table></figure>\n<p>wget默认会以最后一个符合<code>/</code>的后面的字符来命令，对于动态链接的下载通常文件名会不正确。</p>\n<p>错误：下面的例子会下载一个文件并以名称<code>download.aspx?id=1080</code>保存:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://www.linuxde.net/download?id=1</span><br></pre></td></tr></table></figure>\n<p>即使下载的文件是zip格式，它仍然以<code>download.php?id=1080</code>命令。</p>\n<p>正确：为了解决这个问题，我们可以使用参数<code>-O</code>来指定一个文件名：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -O wordpress.zip http://www.linuxde.net/download.aspx?id=1080</span><br></pre></td></tr></table></figure>\n<h3 id=\"wget限速下载\"><a href=\"#wget限速下载\" class=\"headerlink\" title=\"wget限速下载\"></a>wget限速下载</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --limit-rate=300k http://www.linuxde.net/testfile.zip</span><br></pre></td></tr></table></figure>\n<p>当你执行wget的时候，它默认会占用全部可能的宽带下载。但是当你准备下载一个大文件，而你还需要下载其它文件时就有必要限速了。</p>\n<h3 id=\"使用wget断点续传\"><a href=\"#使用wget断点续传\" class=\"headerlink\" title=\"使用wget断点续传\"></a>使用wget断点续传</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -c http://www.linuxde.net/testfile.zip</span><br></pre></td></tr></table></figure>\n<p>使用<code>wget -c</code>重新启动下载中断的文件，对于我们下载大文件时突然由于网络等原因中断非常有帮助，我们可以继续接着下载而不是重新下载一个文件。需要继续中断的下载时可以使用<code>-c</code>参数。</p>\n<h3 id=\"使用wget后台下载\"><a href=\"#使用wget后台下载\" class=\"headerlink\" title=\"使用wget后台下载\"></a>使用wget后台下载</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -b http://www.linuxde.net/testfile.zip</span><br><span class=\"line\"></span><br><span class=\"line\">Continuing in background, pid 1840.</span><br><span class=\"line\">Output will be written to `wget-log&apos;.</span><br></pre></td></tr></table></figure>\n<p>对于下载非常大的文件的时候，我们可以使用参数<code>-b</code>进行后台下载，你可以使用以下命令来察看下载进度：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tail -f wget-log</span><br></pre></td></tr></table></figure>\n<h3 id=\"tail-f-wget-log\"><a href=\"#tail-f-wget-log\" class=\"headerlink\" title=\"tail -f wget-log\"></a>tail -f wget-log</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --user-agent=&quot;Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.648.204 Safari/534.16&quot; http://www.linuxde.net/testfile.zip</span><br></pre></td></tr></table></figure>\n<p>有些网站能通过根据判断代理名称不是浏览器而拒绝你的下载请求。不过你可以通过<code>--user-agent</code>参数伪装。</p>\n<h3 id=\"测试下载链接\"><a href=\"#测试下载链接\" class=\"headerlink\" title=\"测试下载链接\"></a>测试下载链接</h3><p>当你打算进行定时下载，你应该在预定时间测试下载链接是否有效。我们可以增加<code>--spider</code>参数进行检查。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --spider URL</span><br></pre></td></tr></table></figure>\n<p>如果下载链接正确，将会显示:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Spider mode enabled. Check if remote file exists.</span><br><span class=\"line\">HTTP request sent, awaiting response... 200 OK</span><br><span class=\"line\">Length: unspecified [text/html]</span><br><span class=\"line\">Remote file exists and could contain further links,</span><br><span class=\"line\">but recursion is disabled -- not retrieving.</span><br></pre></td></tr></table></figure>\n<p>这保证了下载能在预定的时间进行，但当你给错了一个链接，将会显示如下错误:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --spider url</span><br><span class=\"line\">Spider mode enabled. Check if remote file exists.</span><br><span class=\"line\">HTTP request sent, awaiting response... 404 Not Found</span><br><span class=\"line\">Remote file does not exist -- broken link!!!</span><br></pre></td></tr></table></figure>\n<p>你可以在以下几种情况下使用<code>--spider</code>参数：</p>\n<ol>\n<li>定时下载之前进行检查</li>\n<li>间隔检测网站是否可用</li>\n<li>检查网站页面的死链接</li>\n</ol>\n<h3 id=\"增加重试次数\"><a href=\"#增加重试次数\" class=\"headerlink\" title=\"增加重试次数\"></a>增加重试次数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --tries=40 URL</span><br></pre></td></tr></table></figure>\n<p>如果网络有问题或下载一个大文件也有可能失败。wget默认重试20次连接下载文件。如果需要，你可以使用–tries增加重试次数。</p>\n<h3 id=\"下载多个文件\"><a href=\"#下载多个文件\" class=\"headerlink\" title=\"下载多个文件\"></a>下载多个文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -i filelist.txt</span><br></pre></td></tr></table></figure>\n<p>首先，保存一份下载链接文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; filelist.txt</span><br><span class=\"line\">url1</span><br><span class=\"line\">url2</span><br><span class=\"line\">url3</span><br><span class=\"line\">url4</span><br></pre></td></tr></table></figure>\n<p>接着使用这个文件和参数<code>-i</code>下载。</p>\n<h3 id=\"镜像网站\"><a href=\"#镜像网站\" class=\"headerlink\" title=\"镜像网站\"></a>镜像网站</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --mirror -p --convert-links -P ./LOCAL URL</span><br></pre></td></tr></table></figure>\n<p>下载整个网站到本地。</p>\n<ul>\n<li><code>--miror</code>开户镜像下载。</li>\n<li><code>-p</code>下载所有为了html页面显示正常的文件。</li>\n<li><code>--convert-links</code>下载后，转换成本地的链接。</li>\n<li><code>-P ./LOCAL</code>保存所有文件和目录到本地指定目录。</li>\n</ul>\n<h3 id=\"过滤指定格式下载\"><a href=\"#过滤指定格式下载\" class=\"headerlink\" title=\"过滤指定格式下载\"></a>过滤指定格式下载</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --reject=gif URL</span><br></pre></td></tr></table></figure>\n<p>下载一个网站，但你不希望下载图片，可以使用这条命令。</p>\n<h3 id=\"把下载信息存入日志文件\"><a href=\"#把下载信息存入日志文件\" class=\"headerlink\" title=\"把下载信息存入日志文件\"></a>把下载信息存入日志文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -o download.log URL</span><br></pre></td></tr></table></figure>\n<p>不希望下载信息直接显示在终端而是在一个日志文件，可以使用。</p>\n<h3 id=\"限制总下载文件大小\"><a href=\"#限制总下载文件大小\" class=\"headerlink\" title=\"限制总下载文件大小\"></a>限制总下载文件大小</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -Q5m -i filelist.txt</span><br></pre></td></tr></table></figure>\n<p>当你想要下载的文件超过5M而退出下载，你可以使用。注意：这个参数对单个文件下载不起作用，只能递归下载时才有效。</p>\n<h3 id=\"下载指定格式文件\"><a href=\"#下载指定格式文件\" class=\"headerlink\" title=\"下载指定格式文件\"></a>下载指定格式文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -r -A.pdf url</span><br></pre></td></tr></table></figure>\n<p>可以在以下情况使用该功能：</p>\n<ul>\n<li>下载一个网站的所有图片。</li>\n<li>下载一个网站的所有视频。</li>\n<li>下载一个网站的所有PDF文件。</li>\n</ul>\n<h3 id=\"FTP下载\"><a href=\"#FTP下载\" class=\"headerlink\" title=\"FTP下载\"></a>FTP下载</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget ftp-url</span><br><span class=\"line\">wget --ftp-user=USERNAME --ftp-password=PASSWORD url</span><br></pre></td></tr></table></figure>\n<p>可以使用wget来完成ftp链接的下载。</p>\n<p>使用wget匿名ftp下载： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget ftp-url</span><br></pre></td></tr></table></figure>\n<p>使用wget用户名和密码认证的ftp下载：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --ftp-user=USERNAME --ftp-password=PASSWORD url</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://man.linuxde.net/wget\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>"},{"title":"websocket https 连接","toc":false,"date":"2018-04-02T06:14:26.000Z","_content":"\n最近部署项目需要用到wss连接，这时候就需要自己配置nginx对应的https配置，\nwss连接实际上是通过https连接的，默认支持，所以我的配置如下：\n\n```\nmap $http_upgrade $connection_upgrade {\n    default upgrade;\n    '' close;\n}\n\nserver {\n        listen       443 ssl;\n        server_name  XXX.XX.XXX;\n\n        ssl on;\n        ssl_certificate ./keys/XXX.XX.XXX.crt;\n        ssl_certificate_key ./keys/XXX.XX.XXX.key;\n        ssl_session_timeout 5m;\n        ssl_protocols SSLv2 SSLv3 TLSv1;\n        ssl_ciphers HIGH:!aNULL:!MD5;\n        ssl_prefer_server_ciphers on;\n\n        access_log  /letv/logs/nginx/socket.access.log main;\n        error_log /letv/logs/nginx/socket.err.log;\n\n        root            /letv/www;\n        location /gate {\n                proxy_pass https://127.0.0.1:3010;\n                proxy_redirect      off;\n                proxy_set_header X-Real-IP        $remote_addr;\n                proxy_set_header Host             $host;\n                proxy_set_header X-Forwarded-For  $proxy_add_x_forwarded_for;\n\n                proxy_http_version  1.1;\n                proxy_set_header    Upgrade $http_upgrade;\n                proxy_set_header    Connection 'upgrade';\n        }\n\n        location /connector_1 {\n                proxy_pass https://127.0.0.1:4010;\n                proxy_redirect      off;\n                proxy_set_header X-Real-IP        $remote_addr;\n                proxy_set_header Host             $host;\n                proxy_set_header X-Forwarded-For  $proxy_add_x_forwarded_for;\n\n                proxy_http_version  1.1;\n                proxy_set_header    Upgrade $http_upgrade;\n                proxy_set_header    Connection 'upgrade';\n        }\n\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n                root   html;\n        }\n}\n```\n\n其中通过路由做了反向代理，这么做的坏处是开发环境不太好整，最好是运维开放这几个websocket端口\n\n找到运维，有些开放的，使用开放的就好了\n\n公司机器的外网非80端口被禁用了不少，找到运维才知道有哪些是不被禁用的，我们使用不被禁用的就没必要再配置那么多nginx配置了。\n\n公司内网wiki地址：http://wiki.letv.cn/pages/viewpage.action?pageId=56973252\n\n最后的配置方式如下即可：\n\n```\nmap $http_upgrade $connection_upgrade {\n    default upgrade;\n    '' close;\n}\n\nserver {\n        listen       443 ssl;\n        server_name  XXX.XX.XXX;\n\n        ssl on;\n        ssl_certificate ./keys/XXX.XX.XXX.crt;\n        ssl_certificate_key ./keys/XXX.XX.XXX.key;\n        ssl_session_timeout 5m;\n        ssl_protocols SSLv2 SSLv3 TLSv1;\n        ssl_ciphers HIGH:!aNULL:!MD5;\n        ssl_prefer_server_ciphers on;\n\n        access_log  /letv/logs/nginx/socket.access.log main;\n        error_log /letv/logs/nginx/socket.err.log;\n\n        root            /letv/www;\n\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n                root   html;\n        }\n}\n```\n","source":"_posts/websocket-https-连接.md","raw":"---\ntitle: websocket https 连接\ntags:\n  - websocket\ncategories:\n  - Web开发\ntoc: false\ndate: 2018-04-02 14:14:26\n---\n\n最近部署项目需要用到wss连接，这时候就需要自己配置nginx对应的https配置，\nwss连接实际上是通过https连接的，默认支持，所以我的配置如下：\n\n```\nmap $http_upgrade $connection_upgrade {\n    default upgrade;\n    '' close;\n}\n\nserver {\n        listen       443 ssl;\n        server_name  XXX.XX.XXX;\n\n        ssl on;\n        ssl_certificate ./keys/XXX.XX.XXX.crt;\n        ssl_certificate_key ./keys/XXX.XX.XXX.key;\n        ssl_session_timeout 5m;\n        ssl_protocols SSLv2 SSLv3 TLSv1;\n        ssl_ciphers HIGH:!aNULL:!MD5;\n        ssl_prefer_server_ciphers on;\n\n        access_log  /letv/logs/nginx/socket.access.log main;\n        error_log /letv/logs/nginx/socket.err.log;\n\n        root            /letv/www;\n        location /gate {\n                proxy_pass https://127.0.0.1:3010;\n                proxy_redirect      off;\n                proxy_set_header X-Real-IP        $remote_addr;\n                proxy_set_header Host             $host;\n                proxy_set_header X-Forwarded-For  $proxy_add_x_forwarded_for;\n\n                proxy_http_version  1.1;\n                proxy_set_header    Upgrade $http_upgrade;\n                proxy_set_header    Connection 'upgrade';\n        }\n\n        location /connector_1 {\n                proxy_pass https://127.0.0.1:4010;\n                proxy_redirect      off;\n                proxy_set_header X-Real-IP        $remote_addr;\n                proxy_set_header Host             $host;\n                proxy_set_header X-Forwarded-For  $proxy_add_x_forwarded_for;\n\n                proxy_http_version  1.1;\n                proxy_set_header    Upgrade $http_upgrade;\n                proxy_set_header    Connection 'upgrade';\n        }\n\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n                root   html;\n        }\n}\n```\n\n其中通过路由做了反向代理，这么做的坏处是开发环境不太好整，最好是运维开放这几个websocket端口\n\n找到运维，有些开放的，使用开放的就好了\n\n公司机器的外网非80端口被禁用了不少，找到运维才知道有哪些是不被禁用的，我们使用不被禁用的就没必要再配置那么多nginx配置了。\n\n公司内网wiki地址：http://wiki.letv.cn/pages/viewpage.action?pageId=56973252\n\n最后的配置方式如下即可：\n\n```\nmap $http_upgrade $connection_upgrade {\n    default upgrade;\n    '' close;\n}\n\nserver {\n        listen       443 ssl;\n        server_name  XXX.XX.XXX;\n\n        ssl on;\n        ssl_certificate ./keys/XXX.XX.XXX.crt;\n        ssl_certificate_key ./keys/XXX.XX.XXX.key;\n        ssl_session_timeout 5m;\n        ssl_protocols SSLv2 SSLv3 TLSv1;\n        ssl_ciphers HIGH:!aNULL:!MD5;\n        ssl_prefer_server_ciphers on;\n\n        access_log  /letv/logs/nginx/socket.access.log main;\n        error_log /letv/logs/nginx/socket.err.log;\n\n        root            /letv/www;\n\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n                root   html;\n        }\n}\n```\n","slug":"websocket-https-连接","published":1,"updated":"2019-11-07T02:19:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo04006ih5s6avf5k1bu","content":"<p>最近部署项目需要用到wss连接，这时候就需要自己配置nginx对应的https配置，<br>wss连接实际上是通过https连接的，默认支持，所以我的配置如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map $http_upgrade $connection_upgrade &#123;</span><br><span class=\"line\">    default upgrade;</span><br><span class=\"line\">    &apos;&apos; close;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen       443 ssl;</span><br><span class=\"line\">        server_name  XXX.XX.XXX;</span><br><span class=\"line\"></span><br><span class=\"line\">        ssl on;</span><br><span class=\"line\">        ssl_certificate ./keys/XXX.XX.XXX.crt;</span><br><span class=\"line\">        ssl_certificate_key ./keys/XXX.XX.XXX.key;</span><br><span class=\"line\">        ssl_session_timeout 5m;</span><br><span class=\"line\">        ssl_protocols SSLv2 SSLv3 TLSv1;</span><br><span class=\"line\">        ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class=\"line\">        ssl_prefer_server_ciphers on;</span><br><span class=\"line\"></span><br><span class=\"line\">        access_log  /letv/logs/nginx/socket.access.log main;</span><br><span class=\"line\">        error_log /letv/logs/nginx/socket.err.log;</span><br><span class=\"line\"></span><br><span class=\"line\">        root            /letv/www;</span><br><span class=\"line\">        location /gate &#123;</span><br><span class=\"line\">                proxy_pass https://127.0.0.1:3010;</span><br><span class=\"line\">                proxy_redirect      off;</span><br><span class=\"line\">                proxy_set_header X-Real-IP        $remote_addr;</span><br><span class=\"line\">                proxy_set_header Host             $host;</span><br><span class=\"line\">                proxy_set_header X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class=\"line\"></span><br><span class=\"line\">                proxy_http_version  1.1;</span><br><span class=\"line\">                proxy_set_header    Upgrade $http_upgrade;</span><br><span class=\"line\">                proxy_set_header    Connection &apos;upgrade&apos;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location /connector_1 &#123;</span><br><span class=\"line\">                proxy_pass https://127.0.0.1:4010;</span><br><span class=\"line\">                proxy_redirect      off;</span><br><span class=\"line\">                proxy_set_header X-Real-IP        $remote_addr;</span><br><span class=\"line\">                proxy_set_header Host             $host;</span><br><span class=\"line\">                proxy_set_header X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class=\"line\"></span><br><span class=\"line\">                proxy_http_version  1.1;</span><br><span class=\"line\">                proxy_set_header    Upgrade $http_upgrade;</span><br><span class=\"line\">                proxy_set_header    Connection &apos;upgrade&apos;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">                root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中通过路由做了反向代理，这么做的坏处是开发环境不太好整，最好是运维开放这几个websocket端口</p>\n<p>找到运维，有些开放的，使用开放的就好了</p>\n<p>公司机器的外网非80端口被禁用了不少，找到运维才知道有哪些是不被禁用的，我们使用不被禁用的就没必要再配置那么多nginx配置了。</p>\n<p>公司内网wiki地址：<a href=\"http://wiki.letv.cn/pages/viewpage.action?pageId=56973252\" target=\"_blank\" rel=\"noopener\">http://wiki.letv.cn/pages/viewpage.action?pageId=56973252</a></p>\n<p>最后的配置方式如下即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map $http_upgrade $connection_upgrade &#123;</span><br><span class=\"line\">    default upgrade;</span><br><span class=\"line\">    &apos;&apos; close;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen       443 ssl;</span><br><span class=\"line\">        server_name  XXX.XX.XXX;</span><br><span class=\"line\"></span><br><span class=\"line\">        ssl on;</span><br><span class=\"line\">        ssl_certificate ./keys/XXX.XX.XXX.crt;</span><br><span class=\"line\">        ssl_certificate_key ./keys/XXX.XX.XXX.key;</span><br><span class=\"line\">        ssl_session_timeout 5m;</span><br><span class=\"line\">        ssl_protocols SSLv2 SSLv3 TLSv1;</span><br><span class=\"line\">        ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class=\"line\">        ssl_prefer_server_ciphers on;</span><br><span class=\"line\"></span><br><span class=\"line\">        access_log  /letv/logs/nginx/socket.access.log main;</span><br><span class=\"line\">        error_log /letv/logs/nginx/socket.err.log;</span><br><span class=\"line\"></span><br><span class=\"line\">        root            /letv/www;</span><br><span class=\"line\"></span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">                root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>最近部署项目需要用到wss连接，这时候就需要自己配置nginx对应的https配置，<br>wss连接实际上是通过https连接的，默认支持，所以我的配置如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map $http_upgrade $connection_upgrade &#123;</span><br><span class=\"line\">    default upgrade;</span><br><span class=\"line\">    &apos;&apos; close;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen       443 ssl;</span><br><span class=\"line\">        server_name  XXX.XX.XXX;</span><br><span class=\"line\"></span><br><span class=\"line\">        ssl on;</span><br><span class=\"line\">        ssl_certificate ./keys/XXX.XX.XXX.crt;</span><br><span class=\"line\">        ssl_certificate_key ./keys/XXX.XX.XXX.key;</span><br><span class=\"line\">        ssl_session_timeout 5m;</span><br><span class=\"line\">        ssl_protocols SSLv2 SSLv3 TLSv1;</span><br><span class=\"line\">        ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class=\"line\">        ssl_prefer_server_ciphers on;</span><br><span class=\"line\"></span><br><span class=\"line\">        access_log  /letv/logs/nginx/socket.access.log main;</span><br><span class=\"line\">        error_log /letv/logs/nginx/socket.err.log;</span><br><span class=\"line\"></span><br><span class=\"line\">        root            /letv/www;</span><br><span class=\"line\">        location /gate &#123;</span><br><span class=\"line\">                proxy_pass https://127.0.0.1:3010;</span><br><span class=\"line\">                proxy_redirect      off;</span><br><span class=\"line\">                proxy_set_header X-Real-IP        $remote_addr;</span><br><span class=\"line\">                proxy_set_header Host             $host;</span><br><span class=\"line\">                proxy_set_header X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class=\"line\"></span><br><span class=\"line\">                proxy_http_version  1.1;</span><br><span class=\"line\">                proxy_set_header    Upgrade $http_upgrade;</span><br><span class=\"line\">                proxy_set_header    Connection &apos;upgrade&apos;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location /connector_1 &#123;</span><br><span class=\"line\">                proxy_pass https://127.0.0.1:4010;</span><br><span class=\"line\">                proxy_redirect      off;</span><br><span class=\"line\">                proxy_set_header X-Real-IP        $remote_addr;</span><br><span class=\"line\">                proxy_set_header Host             $host;</span><br><span class=\"line\">                proxy_set_header X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class=\"line\"></span><br><span class=\"line\">                proxy_http_version  1.1;</span><br><span class=\"line\">                proxy_set_header    Upgrade $http_upgrade;</span><br><span class=\"line\">                proxy_set_header    Connection &apos;upgrade&apos;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">                root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中通过路由做了反向代理，这么做的坏处是开发环境不太好整，最好是运维开放这几个websocket端口</p>\n<p>找到运维，有些开放的，使用开放的就好了</p>\n<p>公司机器的外网非80端口被禁用了不少，找到运维才知道有哪些是不被禁用的，我们使用不被禁用的就没必要再配置那么多nginx配置了。</p>\n<p>公司内网wiki地址：<a href=\"http://wiki.letv.cn/pages/viewpage.action?pageId=56973252\" target=\"_blank\" rel=\"noopener\">http://wiki.letv.cn/pages/viewpage.action?pageId=56973252</a></p>\n<p>最后的配置方式如下即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map $http_upgrade $connection_upgrade &#123;</span><br><span class=\"line\">    default upgrade;</span><br><span class=\"line\">    &apos;&apos; close;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen       443 ssl;</span><br><span class=\"line\">        server_name  XXX.XX.XXX;</span><br><span class=\"line\"></span><br><span class=\"line\">        ssl on;</span><br><span class=\"line\">        ssl_certificate ./keys/XXX.XX.XXX.crt;</span><br><span class=\"line\">        ssl_certificate_key ./keys/XXX.XX.XXX.key;</span><br><span class=\"line\">        ssl_session_timeout 5m;</span><br><span class=\"line\">        ssl_protocols SSLv2 SSLv3 TLSv1;</span><br><span class=\"line\">        ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class=\"line\">        ssl_prefer_server_ciphers on;</span><br><span class=\"line\"></span><br><span class=\"line\">        access_log  /letv/logs/nginx/socket.access.log main;</span><br><span class=\"line\">        error_log /letv/logs/nginx/socket.err.log;</span><br><span class=\"line\"></span><br><span class=\"line\">        root            /letv/www;</span><br><span class=\"line\"></span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">                root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"【Linuc-CentOS 】通过yum安装 指定版本的nodejs","toc":false,"date":"2019-08-13T08:40:12.000Z","_content":"\n```bash\ncurl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -\nsudo yum -y install nodejs\n```\n","source":"_posts/【Linuc-CentOS-】通过yum安装-指定版本的nodejs.md","raw":"---\ntitle: 【Linuc-CentOS 】通过yum安装 指定版本的nodejs\ntags:\n  - javascript\ncategories:\n  - Web开发\ntoc: false\ndate: 2019-08-13 16:40:12\n---\n\n```bash\ncurl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -\nsudo yum -y install nodejs\n```\n","slug":"【Linuc-CentOS-】通过yum安装-指定版本的nodejs","published":1,"updated":"2019-11-07T02:24:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo06006lh5s6nyv8nz45","content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -</span><br><span class=\"line\">sudo yum -y install nodejs</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -</span><br><span class=\"line\">sudo yum -y install nodejs</span><br></pre></td></tr></table></figure>\n"},{"title":"“我在星巴克坐了3个月”：那些假装上班的被裁中年人","toc":false,"date":"2019-07-05T08:57:29.000Z","_content":"\n中年的到来总会让人感到不安，让人联想到失业，如果这样的事情真的发生，我们能做些什么？\n\n其实，“经济寒冬带来的时间红利，正是成长的最好时机。”希望这篇文章对你有所启发。\n\n<!-- more -->\n\n## 1. “36岁，中产，失业”\n\n\n昨天下午闲逛，突然遇见一个老朋友，他一个人坐在咖啡厅，对着笔记本，噼里啪啦地打字。\n\n那时，他本应该坐在CBD的某个高档写字楼的办公室里，处理着世界各地纷至沓来的邮件。\n\n抬头看见我，他尴尬地笑了笑，然后邀请我坐下。\n\n其实，那一刻我已经猜到怎么回事。\n\n我有些意外。虽然今年大家都不好过，可他失业还是让我难以接受。我知道他从公司刚成立就加入了，从小主管一路坐到总监，几乎是和公司一起成长起来的。\n\n更令我震惊的是，朋友失业已经三个月了。\n\n这三个月里，他每天都装作正常上下班，上午去新公司面试，下午坐在星巴克改简历，午饭就在便利店买点便当凑合下。有时候碰到老婆视频，还得赶紧躲到附近的写字楼装作出来跑业务。\n\n他调侃道，失个业像搞特务一样。因为上个月没给老婆钱存定期，还被她怀疑在外面有了情况。\n\n朋友叹气，本来以为很快能找到新工作，所以就没告诉家里人。可没想到他有那么多年的工作经验，又做过很多被业内称赞的案子，但却没有一家靠谱的大公司要他。\n\n本来也有几家谈得不错的，可一谈到年龄又都没有下文了。\n\n朋友今年36岁，刚过了职场上心照不宣的“生死线”。\n\n“36岁，中产，失业”几个字在我脑海里久久挥之不去。\n\n\n## 2. “你永远不知道失业和未来，哪一个会先来”\n\n\n你永远不知道，失业和未来，哪一个会先来，而更可怕的是，对中产来说，失业不仅意味着穷，还有失去你的地位。\n\n很多中产都感到自己的处境很尴尬。要说他们没钱，可小孩吃的是高档奶粉，上的是国际学校，参加的夏令营也全都在海外；但要说他们有钱，买了房子却背了一身房贷，家里老人生病了都不敢住院。\n\n事实上，他们那些有品质的生活，全靠每个月的工资死扛，一下没了工作，后果可想而知。\n\n于是他们不敢将失业的消息告诉家人，因为无法承受家人的担心和埋怨。\n\n更无奈的是，他们也无法向朋友和同事开口求助。因为他们清楚得知道，别人和他交朋友，都是因为他的资源。而资源，靠的是圈子，圈子靠的是工作。没有工作，也就没有人会轻易对他伸出援手。\n\n所以，他们无论如何也要一个人苦撑。\n\n不由得想起电影《东京奏鸣曲》中，失业的高管父亲没了公司的保障，一夜之间沦为被招聘人员看不起的无业人员，只给他提供保安和保洁之类的工作。\n\n在现实面前，父亲只能选择接受。但为了隐瞒自己失业，他白天在商场里穿着脏兮兮的红色制服，下班回家的时候就在厕所打扮得西装革履。\n\n可失业的事实还是让他在家庭中感到无力，大儿子完全不理会他的话，小儿子也时不时地反抗，他和妻子也越来越不知道怎么交流。失去了经济来源，他也跟着失去了一家之主的尊严。\n\n更悲惨的是，他在社会上也再找不到自己的一点地位。看着别人能光明正大地穿西服，他也羡慕万分。\n\n最终他感到自己在城市中就像一块被废弃的垃圾，所以在马路中间停下，任由货车撞向自己。\n\n我们不得不接受这样的现实，看似光鲜亮丽的中产，实则不堪一击。\n\n\n## 3. 跌至谷底 更容易看清人生\n\n\n朋友说在星巴克的三个月，他也想了很多。\n\n这些年他一直觉得自己在职场上如鱼得水，可当他被迫停下来，才意识到自己只顾一味追求升职加薪，却忽略了工作不是只埋头干活就行了。\n\n朋友的话让我深有同感。\n\n很多时候我们都是被迫在奔跑，即使已经意识到应该停下来充实一下，却总告诫自己你停下时候，别人还在前进。\n\n但这个社会并不是只要跑得快就会赢，也不是落后就会一败涂地。\n\n新世界首富杰夫·贝索斯是亚马逊网上书店的创始人。在他的带领下，亚马逊已经成为全球最成功的电子商务网店之一。\n\n但其实从1995年创业后的近20年时间里，亚马逊几乎没有净利润。\n\n在这默默无闻的20年里，贝索斯没有随大流去追逐一个又一个热点，而是让自己一直处于长线思维中。\n\n他把工作大楼的名字命名为Day1，目的是提醒公司和自己，要像Day1状态下的公司那样“耐心地实验，播下种子，保护幼苗”。\n\n这期间，利润的牺牲让亚马逊换来用户滚雪球般的增长，而在网上销售书籍的过程中，贝索斯也一直在寻找新的创意。\n\n他发现，他可以像卖电子书那样，将音乐和DVD等书籍的邻近业务也从库存推到推荐引擎。然后将线上产品扩大到了玩具和电子产品，最后是任何可以零售的东西。\n\n后来他又一次利用这个知识，把亚马逊打造成了一个独立卖家平台，开放给了曾经是它竞争对手的卖家。\n\n如今亚马逊早已成为一个庞大的网上零售帝国，价值9000亿美元。\n\n这个成就离不开贝索斯对时间的体验。他曾说：很多技能，需要时间的积累才能真正开花。\n\n时间能让人们看清世界和行业到底在发生着什么，能让人们了解自己喜欢和擅长的事，能帮人们保证知识的输入。时间给了人们超越别人的机会。\n\n所以，有时候脚步慢一点，学得多一点，反而收获会更多。\n\n## 4. 经济寒冬带来的时间红利 正是成长的最好时机\n\n\n据说每个在职场待久了的人，每天心里都有几十次想辞职的冲动。但并不是谁都有说走就走的勇气。\n\n毕竟想跳槽工资太低，想创业勇气又不够，于是在这种彷徨的状态下继续为了房子、车子、奶粉忍受，也让自己在梦想和现实之间越来越迷茫。\n\n可好不容易接受了这种两难的状态，又遇到了失业寒潮，于是更加不知道未来在哪里。\n\n很多时候，我们就是被这样的不安、焦虑绑在了原地。这时的生活经验和思想都是单一的、程序化的，所以我们无法看清自己前方的路。\n\n其实当时代要我们停下来，反而更容易看清人生。\n\n最近，看到易到创始人周航的《重新理解创业》这本书，在书中他反思了自己创立易到以来走对或走错的每一步。\n\n周航在2010年创办易到，这是我国第一家网约车平台，可是在后来的网约车大战中，易到市场份额不断降低。后来周航把公司卖给了乐视，而他自己彻底退出易到。\n\n他在书中反思：当初易到获取客户的办法是从营销上想办法，而现在回过头来明白，是产品本身影响客户的选择；当初易到在融资期间犯了很多错误，现在回过头来看，要在别人看好你的时候尽量多融资。\n\n如今周航已经走出创业失败的低谷，成为一名投资人，他把创业失败后的很多反思都运用到了新身份中。\n\n通常我们都认为，人生应该不停地向前看。可如果一直是这样，我们永远都会拿过去的方法过今天的日子，还期待着明天会更好。显然这是一件不可能的事。\n\n作家弗里德曼在《感谢你迟到》写道：人暂停的时候会引发思考。\n\n你开始以一种全新的角度重新设想什么事是可能做到的，而且，最重要的是，你开始与你内心深处最坚定的信仰重新建立联系。\n\n所以，当危机是一种事实时，不妨停一停，储蓄力量准备跑得更远。\n\n请记住，经济寒冬带来的时间红利，正是成长的最好时机。\n","source":"_posts/“我在星巴克坐了3个月”：那些假装上班的被裁中年人.md","raw":"---\ntitle: “我在星巴克坐了3个月”：那些假装上班的被裁中年人\ntags:\n  - 意义\ncategories:\n  - 生活玩乐\ntoc: false\ndate: 2019-07-05 16:57:29\n---\n\n中年的到来总会让人感到不安，让人联想到失业，如果这样的事情真的发生，我们能做些什么？\n\n其实，“经济寒冬带来的时间红利，正是成长的最好时机。”希望这篇文章对你有所启发。\n\n<!-- more -->\n\n## 1. “36岁，中产，失业”\n\n\n昨天下午闲逛，突然遇见一个老朋友，他一个人坐在咖啡厅，对着笔记本，噼里啪啦地打字。\n\n那时，他本应该坐在CBD的某个高档写字楼的办公室里，处理着世界各地纷至沓来的邮件。\n\n抬头看见我，他尴尬地笑了笑，然后邀请我坐下。\n\n其实，那一刻我已经猜到怎么回事。\n\n我有些意外。虽然今年大家都不好过，可他失业还是让我难以接受。我知道他从公司刚成立就加入了，从小主管一路坐到总监，几乎是和公司一起成长起来的。\n\n更令我震惊的是，朋友失业已经三个月了。\n\n这三个月里，他每天都装作正常上下班，上午去新公司面试，下午坐在星巴克改简历，午饭就在便利店买点便当凑合下。有时候碰到老婆视频，还得赶紧躲到附近的写字楼装作出来跑业务。\n\n他调侃道，失个业像搞特务一样。因为上个月没给老婆钱存定期，还被她怀疑在外面有了情况。\n\n朋友叹气，本来以为很快能找到新工作，所以就没告诉家里人。可没想到他有那么多年的工作经验，又做过很多被业内称赞的案子，但却没有一家靠谱的大公司要他。\n\n本来也有几家谈得不错的，可一谈到年龄又都没有下文了。\n\n朋友今年36岁，刚过了职场上心照不宣的“生死线”。\n\n“36岁，中产，失业”几个字在我脑海里久久挥之不去。\n\n\n## 2. “你永远不知道失业和未来，哪一个会先来”\n\n\n你永远不知道，失业和未来，哪一个会先来，而更可怕的是，对中产来说，失业不仅意味着穷，还有失去你的地位。\n\n很多中产都感到自己的处境很尴尬。要说他们没钱，可小孩吃的是高档奶粉，上的是国际学校，参加的夏令营也全都在海外；但要说他们有钱，买了房子却背了一身房贷，家里老人生病了都不敢住院。\n\n事实上，他们那些有品质的生活，全靠每个月的工资死扛，一下没了工作，后果可想而知。\n\n于是他们不敢将失业的消息告诉家人，因为无法承受家人的担心和埋怨。\n\n更无奈的是，他们也无法向朋友和同事开口求助。因为他们清楚得知道，别人和他交朋友，都是因为他的资源。而资源，靠的是圈子，圈子靠的是工作。没有工作，也就没有人会轻易对他伸出援手。\n\n所以，他们无论如何也要一个人苦撑。\n\n不由得想起电影《东京奏鸣曲》中，失业的高管父亲没了公司的保障，一夜之间沦为被招聘人员看不起的无业人员，只给他提供保安和保洁之类的工作。\n\n在现实面前，父亲只能选择接受。但为了隐瞒自己失业，他白天在商场里穿着脏兮兮的红色制服，下班回家的时候就在厕所打扮得西装革履。\n\n可失业的事实还是让他在家庭中感到无力，大儿子完全不理会他的话，小儿子也时不时地反抗，他和妻子也越来越不知道怎么交流。失去了经济来源，他也跟着失去了一家之主的尊严。\n\n更悲惨的是，他在社会上也再找不到自己的一点地位。看着别人能光明正大地穿西服，他也羡慕万分。\n\n最终他感到自己在城市中就像一块被废弃的垃圾，所以在马路中间停下，任由货车撞向自己。\n\n我们不得不接受这样的现实，看似光鲜亮丽的中产，实则不堪一击。\n\n\n## 3. 跌至谷底 更容易看清人生\n\n\n朋友说在星巴克的三个月，他也想了很多。\n\n这些年他一直觉得自己在职场上如鱼得水，可当他被迫停下来，才意识到自己只顾一味追求升职加薪，却忽略了工作不是只埋头干活就行了。\n\n朋友的话让我深有同感。\n\n很多时候我们都是被迫在奔跑，即使已经意识到应该停下来充实一下，却总告诫自己你停下时候，别人还在前进。\n\n但这个社会并不是只要跑得快就会赢，也不是落后就会一败涂地。\n\n新世界首富杰夫·贝索斯是亚马逊网上书店的创始人。在他的带领下，亚马逊已经成为全球最成功的电子商务网店之一。\n\n但其实从1995年创业后的近20年时间里，亚马逊几乎没有净利润。\n\n在这默默无闻的20年里，贝索斯没有随大流去追逐一个又一个热点，而是让自己一直处于长线思维中。\n\n他把工作大楼的名字命名为Day1，目的是提醒公司和自己，要像Day1状态下的公司那样“耐心地实验，播下种子，保护幼苗”。\n\n这期间，利润的牺牲让亚马逊换来用户滚雪球般的增长，而在网上销售书籍的过程中，贝索斯也一直在寻找新的创意。\n\n他发现，他可以像卖电子书那样，将音乐和DVD等书籍的邻近业务也从库存推到推荐引擎。然后将线上产品扩大到了玩具和电子产品，最后是任何可以零售的东西。\n\n后来他又一次利用这个知识，把亚马逊打造成了一个独立卖家平台，开放给了曾经是它竞争对手的卖家。\n\n如今亚马逊早已成为一个庞大的网上零售帝国，价值9000亿美元。\n\n这个成就离不开贝索斯对时间的体验。他曾说：很多技能，需要时间的积累才能真正开花。\n\n时间能让人们看清世界和行业到底在发生着什么，能让人们了解自己喜欢和擅长的事，能帮人们保证知识的输入。时间给了人们超越别人的机会。\n\n所以，有时候脚步慢一点，学得多一点，反而收获会更多。\n\n## 4. 经济寒冬带来的时间红利 正是成长的最好时机\n\n\n据说每个在职场待久了的人，每天心里都有几十次想辞职的冲动。但并不是谁都有说走就走的勇气。\n\n毕竟想跳槽工资太低，想创业勇气又不够，于是在这种彷徨的状态下继续为了房子、车子、奶粉忍受，也让自己在梦想和现实之间越来越迷茫。\n\n可好不容易接受了这种两难的状态，又遇到了失业寒潮，于是更加不知道未来在哪里。\n\n很多时候，我们就是被这样的不安、焦虑绑在了原地。这时的生活经验和思想都是单一的、程序化的，所以我们无法看清自己前方的路。\n\n其实当时代要我们停下来，反而更容易看清人生。\n\n最近，看到易到创始人周航的《重新理解创业》这本书，在书中他反思了自己创立易到以来走对或走错的每一步。\n\n周航在2010年创办易到，这是我国第一家网约车平台，可是在后来的网约车大战中，易到市场份额不断降低。后来周航把公司卖给了乐视，而他自己彻底退出易到。\n\n他在书中反思：当初易到获取客户的办法是从营销上想办法，而现在回过头来明白，是产品本身影响客户的选择；当初易到在融资期间犯了很多错误，现在回过头来看，要在别人看好你的时候尽量多融资。\n\n如今周航已经走出创业失败的低谷，成为一名投资人，他把创业失败后的很多反思都运用到了新身份中。\n\n通常我们都认为，人生应该不停地向前看。可如果一直是这样，我们永远都会拿过去的方法过今天的日子，还期待着明天会更好。显然这是一件不可能的事。\n\n作家弗里德曼在《感谢你迟到》写道：人暂停的时候会引发思考。\n\n你开始以一种全新的角度重新设想什么事是可能做到的，而且，最重要的是，你开始与你内心深处最坚定的信仰重新建立联系。\n\n所以，当危机是一种事实时，不妨停一停，储蓄力量准备跑得更远。\n\n请记住，经济寒冬带来的时间红利，正是成长的最好时机。\n","slug":"“我在星巴克坐了3个月”：那些假装上班的被裁中年人","published":1,"updated":"2019-11-07T02:19:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo07006ph5s61xav5662","content":"<p>中年的到来总会让人感到不安，让人联想到失业，如果这样的事情真的发生，我们能做些什么？</p>\n<p>其实，“经济寒冬带来的时间红利，正是成长的最好时机。”希望这篇文章对你有所启发。</p>\n<a id=\"more\"></a>\n<h2 id=\"1-“36岁，中产，失业”\"><a href=\"#1-“36岁，中产，失业”\" class=\"headerlink\" title=\"1. “36岁，中产，失业”\"></a>1. “36岁，中产，失业”</h2><p>昨天下午闲逛，突然遇见一个老朋友，他一个人坐在咖啡厅，对着笔记本，噼里啪啦地打字。</p>\n<p>那时，他本应该坐在CBD的某个高档写字楼的办公室里，处理着世界各地纷至沓来的邮件。</p>\n<p>抬头看见我，他尴尬地笑了笑，然后邀请我坐下。</p>\n<p>其实，那一刻我已经猜到怎么回事。</p>\n<p>我有些意外。虽然今年大家都不好过，可他失业还是让我难以接受。我知道他从公司刚成立就加入了，从小主管一路坐到总监，几乎是和公司一起成长起来的。</p>\n<p>更令我震惊的是，朋友失业已经三个月了。</p>\n<p>这三个月里，他每天都装作正常上下班，上午去新公司面试，下午坐在星巴克改简历，午饭就在便利店买点便当凑合下。有时候碰到老婆视频，还得赶紧躲到附近的写字楼装作出来跑业务。</p>\n<p>他调侃道，失个业像搞特务一样。因为上个月没给老婆钱存定期，还被她怀疑在外面有了情况。</p>\n<p>朋友叹气，本来以为很快能找到新工作，所以就没告诉家里人。可没想到他有那么多年的工作经验，又做过很多被业内称赞的案子，但却没有一家靠谱的大公司要他。</p>\n<p>本来也有几家谈得不错的，可一谈到年龄又都没有下文了。</p>\n<p>朋友今年36岁，刚过了职场上心照不宣的“生死线”。</p>\n<p>“36岁，中产，失业”几个字在我脑海里久久挥之不去。</p>\n<h2 id=\"2-“你永远不知道失业和未来，哪一个会先来”\"><a href=\"#2-“你永远不知道失业和未来，哪一个会先来”\" class=\"headerlink\" title=\"2. “你永远不知道失业和未来，哪一个会先来”\"></a>2. “你永远不知道失业和未来，哪一个会先来”</h2><p>你永远不知道，失业和未来，哪一个会先来，而更可怕的是，对中产来说，失业不仅意味着穷，还有失去你的地位。</p>\n<p>很多中产都感到自己的处境很尴尬。要说他们没钱，可小孩吃的是高档奶粉，上的是国际学校，参加的夏令营也全都在海外；但要说他们有钱，买了房子却背了一身房贷，家里老人生病了都不敢住院。</p>\n<p>事实上，他们那些有品质的生活，全靠每个月的工资死扛，一下没了工作，后果可想而知。</p>\n<p>于是他们不敢将失业的消息告诉家人，因为无法承受家人的担心和埋怨。</p>\n<p>更无奈的是，他们也无法向朋友和同事开口求助。因为他们清楚得知道，别人和他交朋友，都是因为他的资源。而资源，靠的是圈子，圈子靠的是工作。没有工作，也就没有人会轻易对他伸出援手。</p>\n<p>所以，他们无论如何也要一个人苦撑。</p>\n<p>不由得想起电影《东京奏鸣曲》中，失业的高管父亲没了公司的保障，一夜之间沦为被招聘人员看不起的无业人员，只给他提供保安和保洁之类的工作。</p>\n<p>在现实面前，父亲只能选择接受。但为了隐瞒自己失业，他白天在商场里穿着脏兮兮的红色制服，下班回家的时候就在厕所打扮得西装革履。</p>\n<p>可失业的事实还是让他在家庭中感到无力，大儿子完全不理会他的话，小儿子也时不时地反抗，他和妻子也越来越不知道怎么交流。失去了经济来源，他也跟着失去了一家之主的尊严。</p>\n<p>更悲惨的是，他在社会上也再找不到自己的一点地位。看着别人能光明正大地穿西服，他也羡慕万分。</p>\n<p>最终他感到自己在城市中就像一块被废弃的垃圾，所以在马路中间停下，任由货车撞向自己。</p>\n<p>我们不得不接受这样的现实，看似光鲜亮丽的中产，实则不堪一击。</p>\n<h2 id=\"3-跌至谷底-更容易看清人生\"><a href=\"#3-跌至谷底-更容易看清人生\" class=\"headerlink\" title=\"3. 跌至谷底 更容易看清人生\"></a>3. 跌至谷底 更容易看清人生</h2><p>朋友说在星巴克的三个月，他也想了很多。</p>\n<p>这些年他一直觉得自己在职场上如鱼得水，可当他被迫停下来，才意识到自己只顾一味追求升职加薪，却忽略了工作不是只埋头干活就行了。</p>\n<p>朋友的话让我深有同感。</p>\n<p>很多时候我们都是被迫在奔跑，即使已经意识到应该停下来充实一下，却总告诫自己你停下时候，别人还在前进。</p>\n<p>但这个社会并不是只要跑得快就会赢，也不是落后就会一败涂地。</p>\n<p>新世界首富杰夫·贝索斯是亚马逊网上书店的创始人。在他的带领下，亚马逊已经成为全球最成功的电子商务网店之一。</p>\n<p>但其实从1995年创业后的近20年时间里，亚马逊几乎没有净利润。</p>\n<p>在这默默无闻的20年里，贝索斯没有随大流去追逐一个又一个热点，而是让自己一直处于长线思维中。</p>\n<p>他把工作大楼的名字命名为Day1，目的是提醒公司和自己，要像Day1状态下的公司那样“耐心地实验，播下种子，保护幼苗”。</p>\n<p>这期间，利润的牺牲让亚马逊换来用户滚雪球般的增长，而在网上销售书籍的过程中，贝索斯也一直在寻找新的创意。</p>\n<p>他发现，他可以像卖电子书那样，将音乐和DVD等书籍的邻近业务也从库存推到推荐引擎。然后将线上产品扩大到了玩具和电子产品，最后是任何可以零售的东西。</p>\n<p>后来他又一次利用这个知识，把亚马逊打造成了一个独立卖家平台，开放给了曾经是它竞争对手的卖家。</p>\n<p>如今亚马逊早已成为一个庞大的网上零售帝国，价值9000亿美元。</p>\n<p>这个成就离不开贝索斯对时间的体验。他曾说：很多技能，需要时间的积累才能真正开花。</p>\n<p>时间能让人们看清世界和行业到底在发生着什么，能让人们了解自己喜欢和擅长的事，能帮人们保证知识的输入。时间给了人们超越别人的机会。</p>\n<p>所以，有时候脚步慢一点，学得多一点，反而收获会更多。</p>\n<h2 id=\"4-经济寒冬带来的时间红利-正是成长的最好时机\"><a href=\"#4-经济寒冬带来的时间红利-正是成长的最好时机\" class=\"headerlink\" title=\"4. 经济寒冬带来的时间红利 正是成长的最好时机\"></a>4. 经济寒冬带来的时间红利 正是成长的最好时机</h2><p>据说每个在职场待久了的人，每天心里都有几十次想辞职的冲动。但并不是谁都有说走就走的勇气。</p>\n<p>毕竟想跳槽工资太低，想创业勇气又不够，于是在这种彷徨的状态下继续为了房子、车子、奶粉忍受，也让自己在梦想和现实之间越来越迷茫。</p>\n<p>可好不容易接受了这种两难的状态，又遇到了失业寒潮，于是更加不知道未来在哪里。</p>\n<p>很多时候，我们就是被这样的不安、焦虑绑在了原地。这时的生活经验和思想都是单一的、程序化的，所以我们无法看清自己前方的路。</p>\n<p>其实当时代要我们停下来，反而更容易看清人生。</p>\n<p>最近，看到易到创始人周航的《重新理解创业》这本书，在书中他反思了自己创立易到以来走对或走错的每一步。</p>\n<p>周航在2010年创办易到，这是我国第一家网约车平台，可是在后来的网约车大战中，易到市场份额不断降低。后来周航把公司卖给了乐视，而他自己彻底退出易到。</p>\n<p>他在书中反思：当初易到获取客户的办法是从营销上想办法，而现在回过头来明白，是产品本身影响客户的选择；当初易到在融资期间犯了很多错误，现在回过头来看，要在别人看好你的时候尽量多融资。</p>\n<p>如今周航已经走出创业失败的低谷，成为一名投资人，他把创业失败后的很多反思都运用到了新身份中。</p>\n<p>通常我们都认为，人生应该不停地向前看。可如果一直是这样，我们永远都会拿过去的方法过今天的日子，还期待着明天会更好。显然这是一件不可能的事。</p>\n<p>作家弗里德曼在《感谢你迟到》写道：人暂停的时候会引发思考。</p>\n<p>你开始以一种全新的角度重新设想什么事是可能做到的，而且，最重要的是，你开始与你内心深处最坚定的信仰重新建立联系。</p>\n<p>所以，当危机是一种事实时，不妨停一停，储蓄力量准备跑得更远。</p>\n<p>请记住，经济寒冬带来的时间红利，正是成长的最好时机。</p>\n","site":{"data":{}},"excerpt":"<p>中年的到来总会让人感到不安，让人联想到失业，如果这样的事情真的发生，我们能做些什么？</p>\n<p>其实，“经济寒冬带来的时间红利，正是成长的最好时机。”希望这篇文章对你有所启发。</p>","more":"<h2 id=\"1-“36岁，中产，失业”\"><a href=\"#1-“36岁，中产，失业”\" class=\"headerlink\" title=\"1. “36岁，中产，失业”\"></a>1. “36岁，中产，失业”</h2><p>昨天下午闲逛，突然遇见一个老朋友，他一个人坐在咖啡厅，对着笔记本，噼里啪啦地打字。</p>\n<p>那时，他本应该坐在CBD的某个高档写字楼的办公室里，处理着世界各地纷至沓来的邮件。</p>\n<p>抬头看见我，他尴尬地笑了笑，然后邀请我坐下。</p>\n<p>其实，那一刻我已经猜到怎么回事。</p>\n<p>我有些意外。虽然今年大家都不好过，可他失业还是让我难以接受。我知道他从公司刚成立就加入了，从小主管一路坐到总监，几乎是和公司一起成长起来的。</p>\n<p>更令我震惊的是，朋友失业已经三个月了。</p>\n<p>这三个月里，他每天都装作正常上下班，上午去新公司面试，下午坐在星巴克改简历，午饭就在便利店买点便当凑合下。有时候碰到老婆视频，还得赶紧躲到附近的写字楼装作出来跑业务。</p>\n<p>他调侃道，失个业像搞特务一样。因为上个月没给老婆钱存定期，还被她怀疑在外面有了情况。</p>\n<p>朋友叹气，本来以为很快能找到新工作，所以就没告诉家里人。可没想到他有那么多年的工作经验，又做过很多被业内称赞的案子，但却没有一家靠谱的大公司要他。</p>\n<p>本来也有几家谈得不错的，可一谈到年龄又都没有下文了。</p>\n<p>朋友今年36岁，刚过了职场上心照不宣的“生死线”。</p>\n<p>“36岁，中产，失业”几个字在我脑海里久久挥之不去。</p>\n<h2 id=\"2-“你永远不知道失业和未来，哪一个会先来”\"><a href=\"#2-“你永远不知道失业和未来，哪一个会先来”\" class=\"headerlink\" title=\"2. “你永远不知道失业和未来，哪一个会先来”\"></a>2. “你永远不知道失业和未来，哪一个会先来”</h2><p>你永远不知道，失业和未来，哪一个会先来，而更可怕的是，对中产来说，失业不仅意味着穷，还有失去你的地位。</p>\n<p>很多中产都感到自己的处境很尴尬。要说他们没钱，可小孩吃的是高档奶粉，上的是国际学校，参加的夏令营也全都在海外；但要说他们有钱，买了房子却背了一身房贷，家里老人生病了都不敢住院。</p>\n<p>事实上，他们那些有品质的生活，全靠每个月的工资死扛，一下没了工作，后果可想而知。</p>\n<p>于是他们不敢将失业的消息告诉家人，因为无法承受家人的担心和埋怨。</p>\n<p>更无奈的是，他们也无法向朋友和同事开口求助。因为他们清楚得知道，别人和他交朋友，都是因为他的资源。而资源，靠的是圈子，圈子靠的是工作。没有工作，也就没有人会轻易对他伸出援手。</p>\n<p>所以，他们无论如何也要一个人苦撑。</p>\n<p>不由得想起电影《东京奏鸣曲》中，失业的高管父亲没了公司的保障，一夜之间沦为被招聘人员看不起的无业人员，只给他提供保安和保洁之类的工作。</p>\n<p>在现实面前，父亲只能选择接受。但为了隐瞒自己失业，他白天在商场里穿着脏兮兮的红色制服，下班回家的时候就在厕所打扮得西装革履。</p>\n<p>可失业的事实还是让他在家庭中感到无力，大儿子完全不理会他的话，小儿子也时不时地反抗，他和妻子也越来越不知道怎么交流。失去了经济来源，他也跟着失去了一家之主的尊严。</p>\n<p>更悲惨的是，他在社会上也再找不到自己的一点地位。看着别人能光明正大地穿西服，他也羡慕万分。</p>\n<p>最终他感到自己在城市中就像一块被废弃的垃圾，所以在马路中间停下，任由货车撞向自己。</p>\n<p>我们不得不接受这样的现实，看似光鲜亮丽的中产，实则不堪一击。</p>\n<h2 id=\"3-跌至谷底-更容易看清人生\"><a href=\"#3-跌至谷底-更容易看清人生\" class=\"headerlink\" title=\"3. 跌至谷底 更容易看清人生\"></a>3. 跌至谷底 更容易看清人生</h2><p>朋友说在星巴克的三个月，他也想了很多。</p>\n<p>这些年他一直觉得自己在职场上如鱼得水，可当他被迫停下来，才意识到自己只顾一味追求升职加薪，却忽略了工作不是只埋头干活就行了。</p>\n<p>朋友的话让我深有同感。</p>\n<p>很多时候我们都是被迫在奔跑，即使已经意识到应该停下来充实一下，却总告诫自己你停下时候，别人还在前进。</p>\n<p>但这个社会并不是只要跑得快就会赢，也不是落后就会一败涂地。</p>\n<p>新世界首富杰夫·贝索斯是亚马逊网上书店的创始人。在他的带领下，亚马逊已经成为全球最成功的电子商务网店之一。</p>\n<p>但其实从1995年创业后的近20年时间里，亚马逊几乎没有净利润。</p>\n<p>在这默默无闻的20年里，贝索斯没有随大流去追逐一个又一个热点，而是让自己一直处于长线思维中。</p>\n<p>他把工作大楼的名字命名为Day1，目的是提醒公司和自己，要像Day1状态下的公司那样“耐心地实验，播下种子，保护幼苗”。</p>\n<p>这期间，利润的牺牲让亚马逊换来用户滚雪球般的增长，而在网上销售书籍的过程中，贝索斯也一直在寻找新的创意。</p>\n<p>他发现，他可以像卖电子书那样，将音乐和DVD等书籍的邻近业务也从库存推到推荐引擎。然后将线上产品扩大到了玩具和电子产品，最后是任何可以零售的东西。</p>\n<p>后来他又一次利用这个知识，把亚马逊打造成了一个独立卖家平台，开放给了曾经是它竞争对手的卖家。</p>\n<p>如今亚马逊早已成为一个庞大的网上零售帝国，价值9000亿美元。</p>\n<p>这个成就离不开贝索斯对时间的体验。他曾说：很多技能，需要时间的积累才能真正开花。</p>\n<p>时间能让人们看清世界和行业到底在发生着什么，能让人们了解自己喜欢和擅长的事，能帮人们保证知识的输入。时间给了人们超越别人的机会。</p>\n<p>所以，有时候脚步慢一点，学得多一点，反而收获会更多。</p>\n<h2 id=\"4-经济寒冬带来的时间红利-正是成长的最好时机\"><a href=\"#4-经济寒冬带来的时间红利-正是成长的最好时机\" class=\"headerlink\" title=\"4. 经济寒冬带来的时间红利 正是成长的最好时机\"></a>4. 经济寒冬带来的时间红利 正是成长的最好时机</h2><p>据说每个在职场待久了的人，每天心里都有几十次想辞职的冲动。但并不是谁都有说走就走的勇气。</p>\n<p>毕竟想跳槽工资太低，想创业勇气又不够，于是在这种彷徨的状态下继续为了房子、车子、奶粉忍受，也让自己在梦想和现实之间越来越迷茫。</p>\n<p>可好不容易接受了这种两难的状态，又遇到了失业寒潮，于是更加不知道未来在哪里。</p>\n<p>很多时候，我们就是被这样的不安、焦虑绑在了原地。这时的生活经验和思想都是单一的、程序化的，所以我们无法看清自己前方的路。</p>\n<p>其实当时代要我们停下来，反而更容易看清人生。</p>\n<p>最近，看到易到创始人周航的《重新理解创业》这本书，在书中他反思了自己创立易到以来走对或走错的每一步。</p>\n<p>周航在2010年创办易到，这是我国第一家网约车平台，可是在后来的网约车大战中，易到市场份额不断降低。后来周航把公司卖给了乐视，而他自己彻底退出易到。</p>\n<p>他在书中反思：当初易到获取客户的办法是从营销上想办法，而现在回过头来明白，是产品本身影响客户的选择；当初易到在融资期间犯了很多错误，现在回过头来看，要在别人看好你的时候尽量多融资。</p>\n<p>如今周航已经走出创业失败的低谷，成为一名投资人，他把创业失败后的很多反思都运用到了新身份中。</p>\n<p>通常我们都认为，人生应该不停地向前看。可如果一直是这样，我们永远都会拿过去的方法过今天的日子，还期待着明天会更好。显然这是一件不可能的事。</p>\n<p>作家弗里德曼在《感谢你迟到》写道：人暂停的时候会引发思考。</p>\n<p>你开始以一种全新的角度重新设想什么事是可能做到的，而且，最重要的是，你开始与你内心深处最坚定的信仰重新建立联系。</p>\n<p>所以，当危机是一种事实时，不妨停一停，储蓄力量准备跑得更远。</p>\n<p>请记住，经济寒冬带来的时间红利，正是成长的最好时机。</p>"},{"title":"一个人逐渐变高级的3种迹象","toc":false,"date":"2019-05-21T02:07:00.000Z","_content":"\n![image.png](http://blogimage.houjiyi.com/FmkSsf4LBlqsHW4uxclwDWQYtmUP)\n记得朋友问过我一个问题：一个人，到底是怎样慢慢变平庸的？\n\n我告诉他，一个人的状态，往往是由他的心态和作为所决定的。\n\n换句话说，当一个人放任自我，无所事事，慢慢的，他就会变得无趣且庸俗；相反的，当一个人不断精进自我，立德修身，渐渐的，他就会变得有趣且高级。\n\n其实，只要认真观察，你会发现那些渐渐变高级的人都在过着相似的生活。\n<!-- more -->\n\n1. 享受独处\n\n韩国首尔郊区的一大片草地上，有一个“监狱”酒店。\n\n这家仿照监狱建造的酒店，既是酒店，也是“监狱”。\n![image.png](http://blogimage.houjiyi.com/FgS28gOFDmW4JVJFBL_z64EBY-qm)\n\n入住这里的每一位客人，都会被没收手机和一切电子产品，然后统一换上“蓝色囚服”。\n\n酒店房间内的设施只能满足一个人最基本的生活需求，除此之外，没有任何娱乐设施。\n\n就这样一家堪称“虐人”的酒店，一周的住宿费用大约需要50万韩元，也就是3000元人民币左右。\n![image.png](http://blogimage.houjiyi.com/FkQaalfeqPG5Rg7cirEEiUqWPIDt)\n\n据说，这家酒店经常供不应求，许多人都愿意跑到那里，一个人安安静静地待上许久。\n\n《乌合之众》里有这样一段话：\n\n人一到群体中，智商就严重降低，为了获得认同，个体愿意抛弃是非，用智商去换取那份让人备感安全的归属感。\n\n这大概就是人们渐渐放弃伪合群，而愿意独处的主要缘故吧。\n\n蒋勋说过：\n\n孤独是生命圆满的开始，没有与自己独处的经验，不会懂得和别人相处。所以，生命里第一个爱恋的对象应该是自己，我相信，这个生命走出去时不会慌张。相反地，一个在外面如无头苍蝇乱闯的生命，最怕孤独。\n\n余华在《在细雨中呼喊》中也写过一段话：\n\n我不再装模作样地拥有很多朋友，而是回到了孤单之中，以真正的我开始了独自的生活。\n\n有时我也会因为寂寞而难以忍受空虚的折磨，但我宁愿以这样的方式来维护自己的自尊，也不愿以耻辱为代价去换取那种表面的朋友。\n\n一个人，若学不会独处，不善于自我净化，注定会变得庸俗。\n\n2. 追求简单\n\n看过一个故事。\n\n教皇问米开朗基罗：“请告诉我你才华横溢的秘密，你是如何创造出《大卫》这一经典雕像的？”\n\n听完，米开朗基罗答道：“很简单，我把所有不是大卫的大理石都去除，大卫就诞生了。”\n\n人生的许多事情，又何尝不是如此。\n\n你要的是一块石头，而不是所有石头。那么，你只要专注于你想要的事物上，把其他多余的部分一一去除，这样你就能看到你一直渴慕的“大卫”。\n\n古人说“大道至简”。\n\n君子不役于物。\n\n做任何事情亦主张“简”，以舍去不必要的多余之物。\n\n可以说，简单，是一个人最高级的追求。\n\n苹果创始人乔布斯一生都信仰“少即是多”：\n\n乔布斯总是穿着同一种款式的衣服；\n\n在苹果的产品上也尽量减少多余的设计；\n\n就连他的家，家居物品也十分精简：一张爱因斯坦的照片、一盏蒂芬妮桌灯、一把椅子和一张床。\n\n简单，让他更加明白什么才是真正想要的。\n\n美国学者梭罗跑到瓦尔登湖边上，在一个小木屋里独居了2年2个月后，也感慨道：\n\n我愿意深深地扎入生活，吮尽生活的骨髓，过得扎实，简单。把一切不属于生活的内容剔除得干净利落，把生活逼到绝处，用最基本的形式，简单，简单，再简单。\n\n事实上，生活形式的简单，不意味着人生乏味单调；相反的，它更能让我们看到一个人的高级。\n\n3. 不惧年龄\n\n前段时间，杨丽萍在她的微博上晒了一张照片。\n![image.png](http://blogimage.houjiyi.com/FkqEPhMrwbyzk1CcZfM82mbp7pJN)\n\n这是在她演出完之后，摄影师陈玲在后台为她拍下的。\n\n这个让无数人艳羡的背影主人，如今已经61岁了。\n\n对于未来的舞蹈事业，她直言：“我们村落的人，80岁还在舞蹈。”\n\n就这样，当年那个爱美、废寝忘食、永不服输的杨丽萍，至今未曾改变。\n\n许多人的人生，会因为年龄的增长而越来越屈服于世俗的眼光，最后束手就擒地按照他人所设定的方式工作、生活。\n\n但其实，年龄从来不应该成为你人生的绊脚石，相反，因为它的存在，你的人生会越发绚丽多彩。\n\n看过一段杨澜近期的采访，谈起年龄，杨澜显得冷静从容：\n\n我今年正好是50岁，我怀着欣喜的心情去迎接我的50岁。\n\n时间真的是我的朋友，它给了我这么多的阅历：给了我一份事业、家庭；有朋友圈；有自己对于世界的看法；有知识、有能力；为什么要去害怕时间呢？\n\n我反而是抱着一种拥抱时间，和庆祝生命这样的一种心态，去迎接每一年。\n\n刘嘉玲一次也被主持人问到：“你最享受人生的哪一段时光？”\n\n刘嘉玲笑了笑，笃定地回答：“最享受现在，此刻就是我最好的时光。”\n\n那时候的她51岁。\n\n刘嘉玲对这句话的解释让人记忆犹新：\n\n20多岁的女孩就该是20多的味道，青春洋溢，很美；\n\n30多岁的女人了解了很多生活，眼睛里开始有了故事，也很美；\n\n50多岁的女人，像我，虽然皮肤的质地没那么漂亮了，但我眼神的光芒却是年轻人没有的。\n\n每个年龄，其实都有每个年龄的味道，每个年龄，其实都是恰到好处的自己。\n\n电影《奇迹男孩》有一句话：\n\n我的皱纹，我的白发，它们就像一张张地图，告诉别人我去过哪儿，经历过什么。\n\n只要随着年龄的增长，你在不断地成长，让断地自我突破，那么你就会无惧于时间的流逝。\n\n换句话说，越努力越高级的人生，越是无惧年龄。\n\n米兰•昆德拉说：\n\n“永远不要认为我们可以逃避，我们的每一步都决定着最后的结局，我们的脚步正在走向我们自己选定的终点。”\n\n如果你想摆脱庸俗，不断提升自我层次，现在的你就应该认真审视当下所走的每一步。\n\n共勉。\n\n作者：精读君\n\n链接：https://www.jianshu.com/p/49eb167c305f\n\n来源：简书\n\n简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。\n","source":"_posts/一个人逐渐变高级的3种迹象.md","raw":"---\ntitle: 一个人逐渐变高级的3种迹象\ntags:\n  - 意义\ncategories:\n  - 生活玩乐\ntoc: false\ndate: 2019-05-21 10:07:00\n---\n\n![image.png](http://blogimage.houjiyi.com/FmkSsf4LBlqsHW4uxclwDWQYtmUP)\n记得朋友问过我一个问题：一个人，到底是怎样慢慢变平庸的？\n\n我告诉他，一个人的状态，往往是由他的心态和作为所决定的。\n\n换句话说，当一个人放任自我，无所事事，慢慢的，他就会变得无趣且庸俗；相反的，当一个人不断精进自我，立德修身，渐渐的，他就会变得有趣且高级。\n\n其实，只要认真观察，你会发现那些渐渐变高级的人都在过着相似的生活。\n<!-- more -->\n\n1. 享受独处\n\n韩国首尔郊区的一大片草地上，有一个“监狱”酒店。\n\n这家仿照监狱建造的酒店，既是酒店，也是“监狱”。\n![image.png](http://blogimage.houjiyi.com/FgS28gOFDmW4JVJFBL_z64EBY-qm)\n\n入住这里的每一位客人，都会被没收手机和一切电子产品，然后统一换上“蓝色囚服”。\n\n酒店房间内的设施只能满足一个人最基本的生活需求，除此之外，没有任何娱乐设施。\n\n就这样一家堪称“虐人”的酒店，一周的住宿费用大约需要50万韩元，也就是3000元人民币左右。\n![image.png](http://blogimage.houjiyi.com/FkQaalfeqPG5Rg7cirEEiUqWPIDt)\n\n据说，这家酒店经常供不应求，许多人都愿意跑到那里，一个人安安静静地待上许久。\n\n《乌合之众》里有这样一段话：\n\n人一到群体中，智商就严重降低，为了获得认同，个体愿意抛弃是非，用智商去换取那份让人备感安全的归属感。\n\n这大概就是人们渐渐放弃伪合群，而愿意独处的主要缘故吧。\n\n蒋勋说过：\n\n孤独是生命圆满的开始，没有与自己独处的经验，不会懂得和别人相处。所以，生命里第一个爱恋的对象应该是自己，我相信，这个生命走出去时不会慌张。相反地，一个在外面如无头苍蝇乱闯的生命，最怕孤独。\n\n余华在《在细雨中呼喊》中也写过一段话：\n\n我不再装模作样地拥有很多朋友，而是回到了孤单之中，以真正的我开始了独自的生活。\n\n有时我也会因为寂寞而难以忍受空虚的折磨，但我宁愿以这样的方式来维护自己的自尊，也不愿以耻辱为代价去换取那种表面的朋友。\n\n一个人，若学不会独处，不善于自我净化，注定会变得庸俗。\n\n2. 追求简单\n\n看过一个故事。\n\n教皇问米开朗基罗：“请告诉我你才华横溢的秘密，你是如何创造出《大卫》这一经典雕像的？”\n\n听完，米开朗基罗答道：“很简单，我把所有不是大卫的大理石都去除，大卫就诞生了。”\n\n人生的许多事情，又何尝不是如此。\n\n你要的是一块石头，而不是所有石头。那么，你只要专注于你想要的事物上，把其他多余的部分一一去除，这样你就能看到你一直渴慕的“大卫”。\n\n古人说“大道至简”。\n\n君子不役于物。\n\n做任何事情亦主张“简”，以舍去不必要的多余之物。\n\n可以说，简单，是一个人最高级的追求。\n\n苹果创始人乔布斯一生都信仰“少即是多”：\n\n乔布斯总是穿着同一种款式的衣服；\n\n在苹果的产品上也尽量减少多余的设计；\n\n就连他的家，家居物品也十分精简：一张爱因斯坦的照片、一盏蒂芬妮桌灯、一把椅子和一张床。\n\n简单，让他更加明白什么才是真正想要的。\n\n美国学者梭罗跑到瓦尔登湖边上，在一个小木屋里独居了2年2个月后，也感慨道：\n\n我愿意深深地扎入生活，吮尽生活的骨髓，过得扎实，简单。把一切不属于生活的内容剔除得干净利落，把生活逼到绝处，用最基本的形式，简单，简单，再简单。\n\n事实上，生活形式的简单，不意味着人生乏味单调；相反的，它更能让我们看到一个人的高级。\n\n3. 不惧年龄\n\n前段时间，杨丽萍在她的微博上晒了一张照片。\n![image.png](http://blogimage.houjiyi.com/FkqEPhMrwbyzk1CcZfM82mbp7pJN)\n\n这是在她演出完之后，摄影师陈玲在后台为她拍下的。\n\n这个让无数人艳羡的背影主人，如今已经61岁了。\n\n对于未来的舞蹈事业，她直言：“我们村落的人，80岁还在舞蹈。”\n\n就这样，当年那个爱美、废寝忘食、永不服输的杨丽萍，至今未曾改变。\n\n许多人的人生，会因为年龄的增长而越来越屈服于世俗的眼光，最后束手就擒地按照他人所设定的方式工作、生活。\n\n但其实，年龄从来不应该成为你人生的绊脚石，相反，因为它的存在，你的人生会越发绚丽多彩。\n\n看过一段杨澜近期的采访，谈起年龄，杨澜显得冷静从容：\n\n我今年正好是50岁，我怀着欣喜的心情去迎接我的50岁。\n\n时间真的是我的朋友，它给了我这么多的阅历：给了我一份事业、家庭；有朋友圈；有自己对于世界的看法；有知识、有能力；为什么要去害怕时间呢？\n\n我反而是抱着一种拥抱时间，和庆祝生命这样的一种心态，去迎接每一年。\n\n刘嘉玲一次也被主持人问到：“你最享受人生的哪一段时光？”\n\n刘嘉玲笑了笑，笃定地回答：“最享受现在，此刻就是我最好的时光。”\n\n那时候的她51岁。\n\n刘嘉玲对这句话的解释让人记忆犹新：\n\n20多岁的女孩就该是20多的味道，青春洋溢，很美；\n\n30多岁的女人了解了很多生活，眼睛里开始有了故事，也很美；\n\n50多岁的女人，像我，虽然皮肤的质地没那么漂亮了，但我眼神的光芒却是年轻人没有的。\n\n每个年龄，其实都有每个年龄的味道，每个年龄，其实都是恰到好处的自己。\n\n电影《奇迹男孩》有一句话：\n\n我的皱纹，我的白发，它们就像一张张地图，告诉别人我去过哪儿，经历过什么。\n\n只要随着年龄的增长，你在不断地成长，让断地自我突破，那么你就会无惧于时间的流逝。\n\n换句话说，越努力越高级的人生，越是无惧年龄。\n\n米兰•昆德拉说：\n\n“永远不要认为我们可以逃避，我们的每一步都决定着最后的结局，我们的脚步正在走向我们自己选定的终点。”\n\n如果你想摆脱庸俗，不断提升自我层次，现在的你就应该认真审视当下所走的每一步。\n\n共勉。\n\n作者：精读君\n\n链接：https://www.jianshu.com/p/49eb167c305f\n\n来源：简书\n\n简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。\n","slug":"一个人逐渐变高级的3种迹象","published":1,"updated":"2019-11-07T02:24:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo09006sh5s63dxjatbd","content":"<p><img src=\"http://blogimage.houjiyi.com/FmkSsf4LBlqsHW4uxclwDWQYtmUP\" alt=\"image.png\"><br>记得朋友问过我一个问题：一个人，到底是怎样慢慢变平庸的？</p>\n<p>我告诉他，一个人的状态，往往是由他的心态和作为所决定的。</p>\n<p>换句话说，当一个人放任自我，无所事事，慢慢的，他就会变得无趣且庸俗；相反的，当一个人不断精进自我，立德修身，渐渐的，他就会变得有趣且高级。</p>\n<p>其实，只要认真观察，你会发现那些渐渐变高级的人都在过着相似的生活。<br><a id=\"more\"></a></p>\n<ol>\n<li>享受独处</li>\n</ol>\n<p>韩国首尔郊区的一大片草地上，有一个“监狱”酒店。</p>\n<p>这家仿照监狱建造的酒店，既是酒店，也是“监狱”。<br><img src=\"http://blogimage.houjiyi.com/FgS28gOFDmW4JVJFBL_z64EBY-qm\" alt=\"image.png\"></p>\n<p>入住这里的每一位客人，都会被没收手机和一切电子产品，然后统一换上“蓝色囚服”。</p>\n<p>酒店房间内的设施只能满足一个人最基本的生活需求，除此之外，没有任何娱乐设施。</p>\n<p>就这样一家堪称“虐人”的酒店，一周的住宿费用大约需要50万韩元，也就是3000元人民币左右。<br><img src=\"http://blogimage.houjiyi.com/FkQaalfeqPG5Rg7cirEEiUqWPIDt\" alt=\"image.png\"></p>\n<p>据说，这家酒店经常供不应求，许多人都愿意跑到那里，一个人安安静静地待上许久。</p>\n<p>《乌合之众》里有这样一段话：</p>\n<p>人一到群体中，智商就严重降低，为了获得认同，个体愿意抛弃是非，用智商去换取那份让人备感安全的归属感。</p>\n<p>这大概就是人们渐渐放弃伪合群，而愿意独处的主要缘故吧。</p>\n<p>蒋勋说过：</p>\n<p>孤独是生命圆满的开始，没有与自己独处的经验，不会懂得和别人相处。所以，生命里第一个爱恋的对象应该是自己，我相信，这个生命走出去时不会慌张。相反地，一个在外面如无头苍蝇乱闯的生命，最怕孤独。</p>\n<p>余华在《在细雨中呼喊》中也写过一段话：</p>\n<p>我不再装模作样地拥有很多朋友，而是回到了孤单之中，以真正的我开始了独自的生活。</p>\n<p>有时我也会因为寂寞而难以忍受空虚的折磨，但我宁愿以这样的方式来维护自己的自尊，也不愿以耻辱为代价去换取那种表面的朋友。</p>\n<p>一个人，若学不会独处，不善于自我净化，注定会变得庸俗。</p>\n<ol start=\"2\">\n<li>追求简单</li>\n</ol>\n<p>看过一个故事。</p>\n<p>教皇问米开朗基罗：“请告诉我你才华横溢的秘密，你是如何创造出《大卫》这一经典雕像的？”</p>\n<p>听完，米开朗基罗答道：“很简单，我把所有不是大卫的大理石都去除，大卫就诞生了。”</p>\n<p>人生的许多事情，又何尝不是如此。</p>\n<p>你要的是一块石头，而不是所有石头。那么，你只要专注于你想要的事物上，把其他多余的部分一一去除，这样你就能看到你一直渴慕的“大卫”。</p>\n<p>古人说“大道至简”。</p>\n<p>君子不役于物。</p>\n<p>做任何事情亦主张“简”，以舍去不必要的多余之物。</p>\n<p>可以说，简单，是一个人最高级的追求。</p>\n<p>苹果创始人乔布斯一生都信仰“少即是多”：</p>\n<p>乔布斯总是穿着同一种款式的衣服；</p>\n<p>在苹果的产品上也尽量减少多余的设计；</p>\n<p>就连他的家，家居物品也十分精简：一张爱因斯坦的照片、一盏蒂芬妮桌灯、一把椅子和一张床。</p>\n<p>简单，让他更加明白什么才是真正想要的。</p>\n<p>美国学者梭罗跑到瓦尔登湖边上，在一个小木屋里独居了2年2个月后，也感慨道：</p>\n<p>我愿意深深地扎入生活，吮尽生活的骨髓，过得扎实，简单。把一切不属于生活的内容剔除得干净利落，把生活逼到绝处，用最基本的形式，简单，简单，再简单。</p>\n<p>事实上，生活形式的简单，不意味着人生乏味单调；相反的，它更能让我们看到一个人的高级。</p>\n<ol start=\"3\">\n<li>不惧年龄</li>\n</ol>\n<p>前段时间，杨丽萍在她的微博上晒了一张照片。<br><img src=\"http://blogimage.houjiyi.com/FkqEPhMrwbyzk1CcZfM82mbp7pJN\" alt=\"image.png\"></p>\n<p>这是在她演出完之后，摄影师陈玲在后台为她拍下的。</p>\n<p>这个让无数人艳羡的背影主人，如今已经61岁了。</p>\n<p>对于未来的舞蹈事业，她直言：“我们村落的人，80岁还在舞蹈。”</p>\n<p>就这样，当年那个爱美、废寝忘食、永不服输的杨丽萍，至今未曾改变。</p>\n<p>许多人的人生，会因为年龄的增长而越来越屈服于世俗的眼光，最后束手就擒地按照他人所设定的方式工作、生活。</p>\n<p>但其实，年龄从来不应该成为你人生的绊脚石，相反，因为它的存在，你的人生会越发绚丽多彩。</p>\n<p>看过一段杨澜近期的采访，谈起年龄，杨澜显得冷静从容：</p>\n<p>我今年正好是50岁，我怀着欣喜的心情去迎接我的50岁。</p>\n<p>时间真的是我的朋友，它给了我这么多的阅历：给了我一份事业、家庭；有朋友圈；有自己对于世界的看法；有知识、有能力；为什么要去害怕时间呢？</p>\n<p>我反而是抱着一种拥抱时间，和庆祝生命这样的一种心态，去迎接每一年。</p>\n<p>刘嘉玲一次也被主持人问到：“你最享受人生的哪一段时光？”</p>\n<p>刘嘉玲笑了笑，笃定地回答：“最享受现在，此刻就是我最好的时光。”</p>\n<p>那时候的她51岁。</p>\n<p>刘嘉玲对这句话的解释让人记忆犹新：</p>\n<p>20多岁的女孩就该是20多的味道，青春洋溢，很美；</p>\n<p>30多岁的女人了解了很多生活，眼睛里开始有了故事，也很美；</p>\n<p>50多岁的女人，像我，虽然皮肤的质地没那么漂亮了，但我眼神的光芒却是年轻人没有的。</p>\n<p>每个年龄，其实都有每个年龄的味道，每个年龄，其实都是恰到好处的自己。</p>\n<p>电影《奇迹男孩》有一句话：</p>\n<p>我的皱纹，我的白发，它们就像一张张地图，告诉别人我去过哪儿，经历过什么。</p>\n<p>只要随着年龄的增长，你在不断地成长，让断地自我突破，那么你就会无惧于时间的流逝。</p>\n<p>换句话说，越努力越高级的人生，越是无惧年龄。</p>\n<p>米兰•昆德拉说：</p>\n<p>“永远不要认为我们可以逃避，我们的每一步都决定着最后的结局，我们的脚步正在走向我们自己选定的终点。”</p>\n<p>如果你想摆脱庸俗，不断提升自我层次，现在的你就应该认真审视当下所走的每一步。</p>\n<p>共勉。</p>\n<p>作者：精读君</p>\n<p>链接：<a href=\"https://www.jianshu.com/p/49eb167c305f\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/49eb167c305f</a></p>\n<p>来源：简书</p>\n<p>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://blogimage.houjiyi.com/FmkSsf4LBlqsHW4uxclwDWQYtmUP\" alt=\"image.png\"><br>记得朋友问过我一个问题：一个人，到底是怎样慢慢变平庸的？</p>\n<p>我告诉他，一个人的状态，往往是由他的心态和作为所决定的。</p>\n<p>换句话说，当一个人放任自我，无所事事，慢慢的，他就会变得无趣且庸俗；相反的，当一个人不断精进自我，立德修身，渐渐的，他就会变得有趣且高级。</p>\n<p>其实，只要认真观察，你会发现那些渐渐变高级的人都在过着相似的生活。<br>","more":"</p>\n<ol>\n<li>享受独处</li>\n</ol>\n<p>韩国首尔郊区的一大片草地上，有一个“监狱”酒店。</p>\n<p>这家仿照监狱建造的酒店，既是酒店，也是“监狱”。<br><img src=\"http://blogimage.houjiyi.com/FgS28gOFDmW4JVJFBL_z64EBY-qm\" alt=\"image.png\"></p>\n<p>入住这里的每一位客人，都会被没收手机和一切电子产品，然后统一换上“蓝色囚服”。</p>\n<p>酒店房间内的设施只能满足一个人最基本的生活需求，除此之外，没有任何娱乐设施。</p>\n<p>就这样一家堪称“虐人”的酒店，一周的住宿费用大约需要50万韩元，也就是3000元人民币左右。<br><img src=\"http://blogimage.houjiyi.com/FkQaalfeqPG5Rg7cirEEiUqWPIDt\" alt=\"image.png\"></p>\n<p>据说，这家酒店经常供不应求，许多人都愿意跑到那里，一个人安安静静地待上许久。</p>\n<p>《乌合之众》里有这样一段话：</p>\n<p>人一到群体中，智商就严重降低，为了获得认同，个体愿意抛弃是非，用智商去换取那份让人备感安全的归属感。</p>\n<p>这大概就是人们渐渐放弃伪合群，而愿意独处的主要缘故吧。</p>\n<p>蒋勋说过：</p>\n<p>孤独是生命圆满的开始，没有与自己独处的经验，不会懂得和别人相处。所以，生命里第一个爱恋的对象应该是自己，我相信，这个生命走出去时不会慌张。相反地，一个在外面如无头苍蝇乱闯的生命，最怕孤独。</p>\n<p>余华在《在细雨中呼喊》中也写过一段话：</p>\n<p>我不再装模作样地拥有很多朋友，而是回到了孤单之中，以真正的我开始了独自的生活。</p>\n<p>有时我也会因为寂寞而难以忍受空虚的折磨，但我宁愿以这样的方式来维护自己的自尊，也不愿以耻辱为代价去换取那种表面的朋友。</p>\n<p>一个人，若学不会独处，不善于自我净化，注定会变得庸俗。</p>\n<ol start=\"2\">\n<li>追求简单</li>\n</ol>\n<p>看过一个故事。</p>\n<p>教皇问米开朗基罗：“请告诉我你才华横溢的秘密，你是如何创造出《大卫》这一经典雕像的？”</p>\n<p>听完，米开朗基罗答道：“很简单，我把所有不是大卫的大理石都去除，大卫就诞生了。”</p>\n<p>人生的许多事情，又何尝不是如此。</p>\n<p>你要的是一块石头，而不是所有石头。那么，你只要专注于你想要的事物上，把其他多余的部分一一去除，这样你就能看到你一直渴慕的“大卫”。</p>\n<p>古人说“大道至简”。</p>\n<p>君子不役于物。</p>\n<p>做任何事情亦主张“简”，以舍去不必要的多余之物。</p>\n<p>可以说，简单，是一个人最高级的追求。</p>\n<p>苹果创始人乔布斯一生都信仰“少即是多”：</p>\n<p>乔布斯总是穿着同一种款式的衣服；</p>\n<p>在苹果的产品上也尽量减少多余的设计；</p>\n<p>就连他的家，家居物品也十分精简：一张爱因斯坦的照片、一盏蒂芬妮桌灯、一把椅子和一张床。</p>\n<p>简单，让他更加明白什么才是真正想要的。</p>\n<p>美国学者梭罗跑到瓦尔登湖边上，在一个小木屋里独居了2年2个月后，也感慨道：</p>\n<p>我愿意深深地扎入生活，吮尽生活的骨髓，过得扎实，简单。把一切不属于生活的内容剔除得干净利落，把生活逼到绝处，用最基本的形式，简单，简单，再简单。</p>\n<p>事实上，生活形式的简单，不意味着人生乏味单调；相反的，它更能让我们看到一个人的高级。</p>\n<ol start=\"3\">\n<li>不惧年龄</li>\n</ol>\n<p>前段时间，杨丽萍在她的微博上晒了一张照片。<br><img src=\"http://blogimage.houjiyi.com/FkqEPhMrwbyzk1CcZfM82mbp7pJN\" alt=\"image.png\"></p>\n<p>这是在她演出完之后，摄影师陈玲在后台为她拍下的。</p>\n<p>这个让无数人艳羡的背影主人，如今已经61岁了。</p>\n<p>对于未来的舞蹈事业，她直言：“我们村落的人，80岁还在舞蹈。”</p>\n<p>就这样，当年那个爱美、废寝忘食、永不服输的杨丽萍，至今未曾改变。</p>\n<p>许多人的人生，会因为年龄的增长而越来越屈服于世俗的眼光，最后束手就擒地按照他人所设定的方式工作、生活。</p>\n<p>但其实，年龄从来不应该成为你人生的绊脚石，相反，因为它的存在，你的人生会越发绚丽多彩。</p>\n<p>看过一段杨澜近期的采访，谈起年龄，杨澜显得冷静从容：</p>\n<p>我今年正好是50岁，我怀着欣喜的心情去迎接我的50岁。</p>\n<p>时间真的是我的朋友，它给了我这么多的阅历：给了我一份事业、家庭；有朋友圈；有自己对于世界的看法；有知识、有能力；为什么要去害怕时间呢？</p>\n<p>我反而是抱着一种拥抱时间，和庆祝生命这样的一种心态，去迎接每一年。</p>\n<p>刘嘉玲一次也被主持人问到：“你最享受人生的哪一段时光？”</p>\n<p>刘嘉玲笑了笑，笃定地回答：“最享受现在，此刻就是我最好的时光。”</p>\n<p>那时候的她51岁。</p>\n<p>刘嘉玲对这句话的解释让人记忆犹新：</p>\n<p>20多岁的女孩就该是20多的味道，青春洋溢，很美；</p>\n<p>30多岁的女人了解了很多生活，眼睛里开始有了故事，也很美；</p>\n<p>50多岁的女人，像我，虽然皮肤的质地没那么漂亮了，但我眼神的光芒却是年轻人没有的。</p>\n<p>每个年龄，其实都有每个年龄的味道，每个年龄，其实都是恰到好处的自己。</p>\n<p>电影《奇迹男孩》有一句话：</p>\n<p>我的皱纹，我的白发，它们就像一张张地图，告诉别人我去过哪儿，经历过什么。</p>\n<p>只要随着年龄的增长，你在不断地成长，让断地自我突破，那么你就会无惧于时间的流逝。</p>\n<p>换句话说，越努力越高级的人生，越是无惧年龄。</p>\n<p>米兰•昆德拉说：</p>\n<p>“永远不要认为我们可以逃避，我们的每一步都决定着最后的结局，我们的脚步正在走向我们自己选定的终点。”</p>\n<p>如果你想摆脱庸俗，不断提升自我层次，现在的你就应该认真审视当下所走的每一步。</p>\n<p>共勉。</p>\n<p>作者：精读君</p>\n<p>链接：<a href=\"https://www.jianshu.com/p/49eb167c305f\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/49eb167c305f</a></p>\n<p>来源：简书</p>\n<p>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p>"},{"title":"一些职位的简写","toc":false,"date":"2018-01-24T03:56:41.000Z","_content":"\nRD – Research & Develop 研发工程师\n\nFE – Front End 前端工程师\n\nBE – Back End 后端工程师\n\nQA – Quality Assurance 测试工程师\n\nDBA – Database Administrator 数据库\n\nPM – Product & Marketing 产品经理\n\nTS – Technology Support 技术支持\n\nOP – Operation 运维工程师\n\nUE(UX) – User Experience 用户体验设计师\n\nUI – User Interface 用户界面设计师\n\nUER – User Experience Research 用户研究\n\n<!-- more -->\n\n----------\n\n企业各职位英文缩写：\n\nGM(General Manager)总经理\n\nVP(Vice President)副总裁\n\nFVP(First Vice President)第一副总裁\n\nAVP(Assistant Vice President)副总裁助理\n\nCEO(Chief Executive Officer)首席执行官，类似总经理、总裁，是企业的法人代表。\n\nCOO(Chief Operations Officer)首席运营官，类似常务总经理\n\nCFO(Chief Financial Officer)首席财务官，类似财务总经理\n\nCIO(Chief Information Officer)首席信息官，主管企业信息的收集和发布\n\nCTO(Chief technology officer)首席技术官 类似总工程师\n\nHRD(Human Resource Director)人力资源总监\n\nOD(Operations Director)运营总监\n\nMD(Marketing Director)市场总监\n\nOM(Operations Manager)运作经理\n\nPM(Production Manager)生产经理\n\n(Product Manager)产品经理\n\n----------\n\nCAO: Art 艺术总监\n\nCBO: Business 商务总监\n\nCCO: Content 内容总监\n\nCDO: Development 开发总监\n\nCGO: Gonverment 政府关系\n\nCHO: Human resource 人事总监\n\nCJO: Jet 把营运指标都加一个或多个零使公司市值像火箭般上升的人\n\nCKO: Knowledge 知识总监\n\nCLO: Labour 工会主席\n\nCMO: Marketing 市场总监\n\nCNO: Negotiation 首席谈判代表CPO: Public relation 公关总监\n\nCQO: Quality control 质控总监\n\nCRO: Research 研究总监\n\nCSO: Sales 销售总监\n\nCUO: User 客户总监\n\nCVO: Valuation 评估总监\n\nCWO: Women 妇联主席\n\nCXO: 什么都可以管的不管部部长\n\nCYO: Yes 什么都点头的老好人\n\nCZO: 现在排最后，等待接班的太子\n","source":"_posts/一些职位的简写.md","raw":"---\ntitle: 一些职位的简写\ntags:\n  - 基本知识\ncategories:\n  - 项目总结\ntoc: false\ndate: 2018-01-24 11:56:41\n---\n\nRD – Research & Develop 研发工程师\n\nFE – Front End 前端工程师\n\nBE – Back End 后端工程师\n\nQA – Quality Assurance 测试工程师\n\nDBA – Database Administrator 数据库\n\nPM – Product & Marketing 产品经理\n\nTS – Technology Support 技术支持\n\nOP – Operation 运维工程师\n\nUE(UX) – User Experience 用户体验设计师\n\nUI – User Interface 用户界面设计师\n\nUER – User Experience Research 用户研究\n\n<!-- more -->\n\n----------\n\n企业各职位英文缩写：\n\nGM(General Manager)总经理\n\nVP(Vice President)副总裁\n\nFVP(First Vice President)第一副总裁\n\nAVP(Assistant Vice President)副总裁助理\n\nCEO(Chief Executive Officer)首席执行官，类似总经理、总裁，是企业的法人代表。\n\nCOO(Chief Operations Officer)首席运营官，类似常务总经理\n\nCFO(Chief Financial Officer)首席财务官，类似财务总经理\n\nCIO(Chief Information Officer)首席信息官，主管企业信息的收集和发布\n\nCTO(Chief technology officer)首席技术官 类似总工程师\n\nHRD(Human Resource Director)人力资源总监\n\nOD(Operations Director)运营总监\n\nMD(Marketing Director)市场总监\n\nOM(Operations Manager)运作经理\n\nPM(Production Manager)生产经理\n\n(Product Manager)产品经理\n\n----------\n\nCAO: Art 艺术总监\n\nCBO: Business 商务总监\n\nCCO: Content 内容总监\n\nCDO: Development 开发总监\n\nCGO: Gonverment 政府关系\n\nCHO: Human resource 人事总监\n\nCJO: Jet 把营运指标都加一个或多个零使公司市值像火箭般上升的人\n\nCKO: Knowledge 知识总监\n\nCLO: Labour 工会主席\n\nCMO: Marketing 市场总监\n\nCNO: Negotiation 首席谈判代表CPO: Public relation 公关总监\n\nCQO: Quality control 质控总监\n\nCRO: Research 研究总监\n\nCSO: Sales 销售总监\n\nCUO: User 客户总监\n\nCVO: Valuation 评估总监\n\nCWO: Women 妇联主席\n\nCXO: 什么都可以管的不管部部长\n\nCYO: Yes 什么都点头的老好人\n\nCZO: 现在排最后，等待接班的太子\n","slug":"一些职位的简写","published":1,"updated":"2019-11-07T02:24:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo0a006xh5s63eeumhbn","content":"<p>RD – Research &amp; Develop 研发工程师</p>\n<p>FE – Front End 前端工程师</p>\n<p>BE – Back End 后端工程师</p>\n<p>QA – Quality Assurance 测试工程师</p>\n<p>DBA – Database Administrator 数据库</p>\n<p>PM – Product &amp; Marketing 产品经理</p>\n<p>TS – Technology Support 技术支持</p>\n<p>OP – Operation 运维工程师</p>\n<p>UE(UX) – User Experience 用户体验设计师</p>\n<p>UI – User Interface 用户界面设计师</p>\n<p>UER – User Experience Research 用户研究</p>\n<a id=\"more\"></a>\n<hr>\n<p>企业各职位英文缩写：</p>\n<p>GM(General Manager)总经理</p>\n<p>VP(Vice President)副总裁</p>\n<p>FVP(First Vice President)第一副总裁</p>\n<p>AVP(Assistant Vice President)副总裁助理</p>\n<p>CEO(Chief Executive Officer)首席执行官，类似总经理、总裁，是企业的法人代表。</p>\n<p>COO(Chief Operations Officer)首席运营官，类似常务总经理</p>\n<p>CFO(Chief Financial Officer)首席财务官，类似财务总经理</p>\n<p>CIO(Chief Information Officer)首席信息官，主管企业信息的收集和发布</p>\n<p>CTO(Chief technology officer)首席技术官 类似总工程师</p>\n<p>HRD(Human Resource Director)人力资源总监</p>\n<p>OD(Operations Director)运营总监</p>\n<p>MD(Marketing Director)市场总监</p>\n<p>OM(Operations Manager)运作经理</p>\n<p>PM(Production Manager)生产经理</p>\n<p>(Product Manager)产品经理</p>\n<hr>\n<p>CAO: Art 艺术总监</p>\n<p>CBO: Business 商务总监</p>\n<p>CCO: Content 内容总监</p>\n<p>CDO: Development 开发总监</p>\n<p>CGO: Gonverment 政府关系</p>\n<p>CHO: Human resource 人事总监</p>\n<p>CJO: Jet 把营运指标都加一个或多个零使公司市值像火箭般上升的人</p>\n<p>CKO: Knowledge 知识总监</p>\n<p>CLO: Labour 工会主席</p>\n<p>CMO: Marketing 市场总监</p>\n<p>CNO: Negotiation 首席谈判代表CPO: Public relation 公关总监</p>\n<p>CQO: Quality control 质控总监</p>\n<p>CRO: Research 研究总监</p>\n<p>CSO: Sales 销售总监</p>\n<p>CUO: User 客户总监</p>\n<p>CVO: Valuation 评估总监</p>\n<p>CWO: Women 妇联主席</p>\n<p>CXO: 什么都可以管的不管部部长</p>\n<p>CYO: Yes 什么都点头的老好人</p>\n<p>CZO: 现在排最后，等待接班的太子</p>\n","site":{"data":{}},"excerpt":"<p>RD – Research &amp; Develop 研发工程师</p>\n<p>FE – Front End 前端工程师</p>\n<p>BE – Back End 后端工程师</p>\n<p>QA – Quality Assurance 测试工程师</p>\n<p>DBA – Database Administrator 数据库</p>\n<p>PM – Product &amp; Marketing 产品经理</p>\n<p>TS – Technology Support 技术支持</p>\n<p>OP – Operation 运维工程师</p>\n<p>UE(UX) – User Experience 用户体验设计师</p>\n<p>UI – User Interface 用户界面设计师</p>\n<p>UER – User Experience Research 用户研究</p>","more":"<hr>\n<p>企业各职位英文缩写：</p>\n<p>GM(General Manager)总经理</p>\n<p>VP(Vice President)副总裁</p>\n<p>FVP(First Vice President)第一副总裁</p>\n<p>AVP(Assistant Vice President)副总裁助理</p>\n<p>CEO(Chief Executive Officer)首席执行官，类似总经理、总裁，是企业的法人代表。</p>\n<p>COO(Chief Operations Officer)首席运营官，类似常务总经理</p>\n<p>CFO(Chief Financial Officer)首席财务官，类似财务总经理</p>\n<p>CIO(Chief Information Officer)首席信息官，主管企业信息的收集和发布</p>\n<p>CTO(Chief technology officer)首席技术官 类似总工程师</p>\n<p>HRD(Human Resource Director)人力资源总监</p>\n<p>OD(Operations Director)运营总监</p>\n<p>MD(Marketing Director)市场总监</p>\n<p>OM(Operations Manager)运作经理</p>\n<p>PM(Production Manager)生产经理</p>\n<p>(Product Manager)产品经理</p>\n<hr>\n<p>CAO: Art 艺术总监</p>\n<p>CBO: Business 商务总监</p>\n<p>CCO: Content 内容总监</p>\n<p>CDO: Development 开发总监</p>\n<p>CGO: Gonverment 政府关系</p>\n<p>CHO: Human resource 人事总监</p>\n<p>CJO: Jet 把营运指标都加一个或多个零使公司市值像火箭般上升的人</p>\n<p>CKO: Knowledge 知识总监</p>\n<p>CLO: Labour 工会主席</p>\n<p>CMO: Marketing 市场总监</p>\n<p>CNO: Negotiation 首席谈判代表CPO: Public relation 公关总监</p>\n<p>CQO: Quality control 质控总监</p>\n<p>CRO: Research 研究总监</p>\n<p>CSO: Sales 销售总监</p>\n<p>CUO: User 客户总监</p>\n<p>CVO: Valuation 评估总监</p>\n<p>CWO: Women 妇联主席</p>\n<p>CXO: 什么都可以管的不管部部长</p>\n<p>CYO: Yes 什么都点头的老好人</p>\n<p>CZO: 现在排最后，等待接班的太子</p>"},{"title":"【译】关于JavaScript 数组你应该知道的事情","toc":false,"date":"2019-04-25T09:28:07.000Z","_content":"\n首先做一个粗体声明：**循环经常是无用的，并且使得代码很难阅读**。\n当谈到迭代一个数组的时候，无论你想去查找元素，排序或者任何其他的事，都有可能存在一个数组的方法供你使用。\n\n然而，尽管它们有用，但其中一些仍然不被人了解。我会努力为你展示一些有用的方法。把这篇文章当做对 JavaScript 数组方法的指引吧。\n注意： 在开始之前，不得不了解一件事：我比较偏爱函数式编程。所以我倾向于使用的方法不会直接改变原来的数组。这种方法，我避免了副作用。我不是说不应该改变数组，但至少要了解那些方法会改变，那些会有副作用。副作用导致不想要的改变，而不想要的改变带来bugs！\n了解到这里，我们可以开始正文了。\n\n<!-- more -->\n\n### 必不可少的\n\n当跟数组打交道时，有四件事你应该清楚：`map,filter,reduce`和 展开操作符。它们富有力量。\n\n#### map\n\n你可以在很多种情况下使用它。基本地，每次你需要修改数组的元素时，考虑使用 `map`。\n\n它接受一个参数：一个方法，在每一个数组元素上调用。然后返回一个**新的数组**，所以没有副作用。\n\n```javascript\nconst numbers = [1, 2, 3, 4]\n\nconst numbersPlusOne = numbers.map(n => n + 1) // 每个元素 +1\nconsole.log(numbersPlusOne) // [2, 3, 4, 5]\n```\n\n你也能创建一个新数组，用于保留对象的一个特殊属性：\n\n```javascript\nconst allActivities = [\n  { title: 'My activity', coordinates: [50.123, 3.291] },\n  { title: 'Another activity', coordinates: [1.238, 4.292] },\n  // etc.\n]\n\nconst allCoordinates = allActivities.map(activity => activity.coordinates)\nconsole.log(allCoordinates) // [[50.123, 3.291], [1.238, 4.292]]\n```\n\n所以，请记住，当你需要去**转换**数组时，考虑使用**map**。\n\n#### filter\n\n这个方法的名字在这里十分准确的：当你想去过滤数组的时候使用它。\n\n如同`map`所做，它接受一个函数作为它的唯一参数，在数组的每个元素上调用。这个方法返回一个布尔值：\n\n- `true` 如果你需要在数组中保留元素\n- `false` 如果你不想保留它\n\n接着你会得到一个带有你想要保留的元素的新数组。\n\n举个例子，你可以在数组中只保留奇数：\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5, 6]\nconst oddNumbers = numbers.filter(n => n % 2 !== 0)\nconsole.log(oddNumbers) // [1, 3, 5]\n```\n\n或者你可以在数组中移除特殊的项：\n\n```javascript\nconst participants = [\n  { id: 'a3f47', username: 'john' },\n  { id: 'fek28', username: 'mary' },\n  { id: 'n3j44', username: 'sam' },\n]\n\nfunction removeParticipant(participants, id) {\n  return participants.filter(participant => participant.id !== id)\n}\n\nconsole.log(removeParticipant(participants, 'a3f47')) //  [{ id: 'fek28', username: 'mary' }, { id: 'n3j44', username: 'sam' }];\n```\n\n#### reduce\n\n个人认为是最难理解的方法。但是如果你一旦掌握它，很多疯狂的事情你都可以用它做到。\n\n基本地， `reduce` 使用有值的数组然后组合成一个新的值。它接受两个参数，一个回调方法就是我们的 **reducer** 和一个可选的初始化的值（默认是数组的第一个项）。这个 reducer 自己使用四个参数：\n\n- 累计：在你的 reducer 中累积的返回值\n- 当前数组的值\n- 当前索引\n- 当前调用 reduce 的数组\n\n大多数时候，你只需要使用前两个参数：累计值和当前值。\n\n抛开这些理论。来看看常见的一个 `reduce` 的例子。\n\n```javascript\nconst numbers = [37, 12, 28, 4, 9]\nconst total = numbers.reduce((total, n) => total + n)\nconsole.log(total) // 90\n```\n\n在第一个遍历时，这个累计值，也就是 `total`，使用了初始化为 37 的值。它返回的值是 37 + `n` 并且 `n` 等于 12，因此得到 49.在第二次遍历时，累加值是 49，返回值是 49 + 28 = 77。如此继续直到第四次。\n\n`reduce` 是很强大的，你可以实际使用它去构建很多数组的方法，比如 `map` 或者 `filter`：\n\n```javascript\nconst map = (arr, fn) => {\n  return arr.reduce((mappedArr, element) => {\n    return [...mappedArr, fn(element)]\n  }, [])\n}\n\nconsole.log(map([1, 2, 3, 4], n => n + 1)) // [2, 3, 4, 5]\n\nconst filter = (arr, fn) => {\n  return arr.reduce((filteredArr, element) => {\n    return fn(element) ? [...filteredArr] : [...filteredArr, element]\n  }, [])\n}\n\nconsole.log(filter([1, 2, 3, 4, 5, 6], n => n % 2 === 0)) // [1, 3, 5]\n```\n\n根本上看，我们给 `reduce` 一个初始默认值 `[]`：我们的累计值。对于 `map`，我们运行一个方法，它的结果是累加到最后，多亏了 **展开操作符**（不必担心，后面讨论）。对于 `filter`，几乎是相似的，除了我们在元素上运行过滤函数。如果返回 true，我们返回前一个数组，否则在数组最后添加当前元素。\n\n我们来看一个更高级的例子：深度展开数组，也就是说把 `[1, 2, 3, [4, [[[5, [6, 7]]]], 8]]` 样的数组转换成 `[1, 2, 3, 4, 5, 6, 7, 8]` 样的。\n\n```javascript\nfunction flatDeep(arr) {\n  return arr.reduce((flattenArray, element) => {\n    return Array.isArray(element)\n      ? [...flattenArray, ...flatDeep(element)]\n      : [...flattenArray, element]\n  }, [])\n}\n\nconsole.log(flatDeep([1, 2, 3, [4, [[[5, [6, 7]]]], 8]])) // [1, 2, 3, 4, 5, 6, 7, 8]\n```\n这个例子有点像 `map`，除了我们用到了递归。我不想去解释这个用法，它超出了这篇文章的范围。但是，如果你想了解更多的关于递归的知识，请参考这篇[优质的文章](https://guillaumebogard.dev/blog/what-is-recursion/)。\n\n### 展开操作（ES2015）\n\n我知道这不是一个方法。但是，在处理数组时，使用展开操作可以帮助你做很多事情。事实上，你可以在另一个数组中使用它展开一个数组的值。从这一点来说，你可以复制一个数组，或者连接多个数组。\n\n```javascript\nconst numbers = [1, 2, 3]\nconst numbersCopy = [...numbers]\nconsole.log(numbersCopy) // [1, 2, 3]\n\nconst otherNumbers = [4, 5, 6]\nconst numbersConcatenated = [...numbers, ...otherNumbers]\nconsole.log(numbersConcatenated) // [1, 2, 3, 4, 5, 6]\n```\n注意：：展开操作符对原数组做了一次浅拷贝。但什么是 浅拷贝？🤔\n\n额，浅拷贝是尽可能少的复制原数组。当你有一个数组包含数字，字符串或者布尔值（基本类型），它们是没问题的，这些值被真正复制。然而，对于 **对象和数组** 而言，这是不同的。只有 **对原值的引用** 会被复制！因此，如果你创建一个包含对象的数组的浅拷贝，然后在拷贝的数组中修改了对象，它也会修改原数组的对象，因为它们是 **同一个引用**。\n\n```javascript\nconst arr = ['foo', 42, { name: 'Thomas' }]\nlet copy = [...arr]\n\ncopy[0] = 'bar'\n\nconsole.log(arr) // No mutations: [\"foo\", 42, { name: \"Thomas\" }]\nconsole.log(copy) // [\"bar\", 42, { name: \"Thomas\" }]\n\ncopy[2].name = 'Hello'\n\nconsole.log(arr) // /!\\ MUTATION [\"foo\", 42, { name: \"Hello\" }]\nconsole.log(copy) // [\"bar\", 42, { name: \"Hello\" }]\n```\n\n所以，如果你想去“真正地”靠谱一个包含对象或者数组的是维护组，你可以使用 lodash 的方法 cloneDeep。但是不要觉得必须做这样的事。这里的目标是 意识到事情是如何运作的。\n\n### 最好了解的\n\n下面你看到的方法，是最好了解一下的，同时它们能帮助你解决某些问题，比如在数组中搜索一个元素，取出数组的部分或者更多。\n\n你曾经尝试用过 `indexOf` 去查找一个数组中是否存在某个东西吗？这是一个糟糕的方式对吧？幸运的是，`includes` 为我们做到了这些。给 `includes` 一个参数，然后会在数组里面搜索它，如果一个元素存在的话。\n\n```javascript\nconst sports = ['football', 'archery', 'judo']\nconst hasFootball = sports.includes('football')\nconsole.log(hasFootball) // true\n```\n#### concat\n\nconcat 方法可以用来合并两个或者更多的数组。\n\n```javascript\nconst numbers = [1, 2, 3]\nconst otherNumbers = [4, 5, 6]\n\nconst numbersConcatenated = numbers.concat(otherNumbers)\nconsole.log(numbersConcatenated) // [1, 2, 3, 4, 5, 6]\n\n// You can merge as many arrays as you want\nfunction concatAll(arr, ...arrays) {\n  return arr.concat(...arrays)\n}\n\nconsole.log(concatAll([1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12])) // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n```\n\n#### forEach\n\n无论何时你想为数组的每个元素执行一些事情时，可以使用 forEach。它使用一个函数作为参数，然后给它三个参数：当前值，索引，和当前数组。\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5]\nnumbers.forEach(console.log)\n// 1 0 [ 1, 2, 3 ]\n// 2 1 [ 1, 2, 3 ]\n// 3 2 [ 1, 2, 3 ]\n```\n\n#### indexOf\n\n这个用来在给定的数组中找出第一个被发现的元素的索引。 `indexOf` 也广泛用于检查元素是否在一个数组中。不过老实说，我如今已经不这样使用了。\n\n```javascript\nconst sports = ['football', 'archery', 'judo']\n\nconst judoIndex = sports.indexOf('judo')\nconsole.log(judoIndex) // 2\n```\n\n#### find\n`find` 方法十分类似于 `filter` 方法。你必须提供一个函数用于测试数组的元素。然而，`find` 一旦发现有一个元素通过测试，就立即停止测试其他元素。不用于 `filter`，`filter` 将会迭代整个数组，无论情况如何。\n\n```javascript\nconst users = [\n  { id: 'af35', name: 'john' },\n  { id: '6gbe', name: 'mary' },\n  { id: '932j', name: 'gary' },\n]\n\nconst user = users.find(user => user.id === '6gbe')\nconsole.log(user) // { id: '6gbe', name: 'mary' }\n```\n\n所以使用 `filter`，当你想去过滤整个数组时。使用 `find` 在当你确定在数组中找某个唯一元素的时候。\n\n#### findIndex\n\n这个方法完全跟 find 相同除了它返回第一个发现元素的索引，而不是直接返回元素。\n\n```javascript\nconst users = [\n  { id: 'af35', name: 'john' },\n  { id: '6gbe', name: 'mary' },\n  { id: '932j', name: 'gary' },\n]\n\nconst user = users.findIndex(user => user.id === '6gbe')\nconsole.log(user) // 1\n```\n\n你或许认为 `findIndex` 跟 `indexOf` 是相同的。额……不完全是。`indexOf` 的第一个元素是基本值（布尔，数字，字符串，null，undefined或者一个 symbol）而`findIndex`的第一个元素是一个回调方法。\n所以当你需要搜索在数组中的一个元素的基本值时，使用 `indexOf`。如果有更复杂的元素，比如object，使用 `findIndex`。\n\n#### slice\n\n当你需要取出或者复制数组的一部分，可以使用 `slice`。但是注意，像展开操作符一样， slice 返回部分的浅拷贝！\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5]\nconst copy = numbers.slice()\n```\n\n我在文章的开始谈到，循环是没有什么用的。来用一个例子说明你如何摆脱它。\n\n假设你想去从 API 中去除一定量的聊天记录里，然后展示它们中的 5 条。有两种方式实现：一种是循环，另一种是 `slice`。\n\n```javascript\n// 传统方式\n// 用循环来决定消息的数量\nconst nbMessages = messages.length < 5 ? messages.length : 5\nlet messagesToShow = []\nfor (let i = 0; i < nbMessages; i++) {\n  messagesToShow.push(posts[i])\n}\n\n// 假设 arr 少于 5 个元素\n// slice 将会返回原数组的整个浅拷贝\nconst messagesToShow = messages.slice(0, 5)\n```\n\n#### some\n\n如果你想测试数组中 至少有一个元素 通过测试，那么可以使用 `some`。就像是 `map`,`filter`,和 `find`，`some` 用回调函数作为参数。它返回 `ture`，如果至少一个元素通过测试，返回 `true` 否则返回 `false`。\n\n当你处理权限问题的时候，可以使用 `some`：\n\n```javascript\nconst users = [\n  {\n    id: 'fe34',\n    permissions: ['read', 'write'],\n  },\n  {\n    id: 'a198',\n    permissions: [],\n  },\n  {\n    id: '18aa',\n    permissions: ['delete', 'read', 'write'],\n  },\n]\n\nconst hasDeletePermission = users.some(user =>\n  user.permissions.includes('delete')\n)\nconsole.log(hasDeletePermission) // true\n```\n\n#### every\n\n类似 `some`，不同的是 `ever` 测试了所有的元素是否满足条件（而不是 至少一个）。\n\n```javascript\nconst users = [\n  {\n    id: 'fe34',\n    permissions: ['read', 'write'],\n  },\n  {\n    id: 'a198',\n    permissions: [],\n  },\n  {\n    id: '18aa',\n    permissions: ['delete', 'read', 'write'],\n  },\n]\n\nconst hasAllReadPermission = users.every(user =>\n  user.permissions.includes('read')\n)\nconsole.log(hasAllReadPermission) // false\n```\n#### flat(ES2019)\n这是一个即将到来的招牌方法， 在JavaScript 世界中。大致而言，`flat` 创建一个新数组，通过组合所有的子数组元素。接受一个参数，数值类型，代表你想展开的深度。\n```javascript\nconst numbers = [1, 2, [3, 4, [5, [6, 7]], [[[[8]]]]]]\n\nconst numbersflattenOnce = numbers.flat()\nconsole.log(numbersflattenOnce) // [1, 2, 3, 4, Array[2], Array[1]]\n\nconst numbersflattenTwice = numbers.flat(2)\nconsole.log(numbersflattenTwice) // [1, 2, 3, 4, 5, Array[2], Array[1]]\n\nconst numbersFlattenInfinity = numbers.flat(Infinity)\nconsole.log(numbersFlattenInfinity) // [1, 2, 3, 4, 5, 6, 7, 8]\n```\n#### flatMap(ES2019)\n\n猜猜这个方法干什么？我打赌你可以做到顾名思义。\n\n首先在每个元素上运行一个 mapping 方法。接着一次性展示数据。十分简单！\n\n```javascript\nconst sentences = [\n  'This is a sentence',\n  'This is another sentence',\n  \"I can't find any original phrases\",\n]\n\nconst allWords = sentences.flatMap(sentence => sentence.split(' '))\nconsole.log(allWords) // [\"This\", \"is\", \"a\", \"sentence\", \"This\", \"is\", \"another\", \"sentence\", \"I\", \"can't\", \"find\", \"any\", \"original\", \"phrases\"]\n```\n这个例子中，数组里有一些句子，然而我们想得到所有的单词。不使用 `map` 去把所有的句子分割成单词然后展开数组，你可以直接使用 `flatMap`。\n与 `flatMap` 无关的，你可以使用 `reduce` 方法来计算单词的数量（只是展示另一种 `reduce` 的用法）\n\n```javascript\nconst wordsCount = allWords.reduce((count, word) => {\n  count[word] = count[word] ? count[word] + 1 : 1\n  return count\n}, {})\nconsole.log(wordsCount) // { This: 2, is: 2, a: 1, sentence: 2, another: 1, I: 1, \"can't\": 1, find: 1, any: 1, original: 1, phrases: 1, }\n```\nflatMap 经常用于响应式编程，这里有个[例子](https://link.juejin.im/?target=http%3A%2F%2Freactivex.io%2Fdocumentation%2Foperators%2Fflatmap.html)。\n\n#### join\n如果你需要基于数组元素创建字符串，`join` 正是你所寻找的。它允许通过链接数组元素来创建一个新的字符串，通过提供的分割符分割。\n\n举个例子，你可以使用 `join` 一眼展示活动的参与者：\n\n```javascript\nconst participants = ['john', 'mary', 'gary']\nconst participantsFormatted = participants.join(', ')\nconsole.log(participantsFormatted) // john, mary, gary\n```\n下面的例子更真实，在于你想先过滤参与者然后得到他们的名字。\n\n```javascript\nconst potentialParticipants = [\n  { id: 'k38i', name: 'john', age: 17 },\n  { id: 'baf3', name: 'mary', age: 13 },\n  { id: 'a111', name: 'gary', age: 24 },\n  { id: 'fx34', name: 'emma', age: 34 },\n]\n\nconst participantsFormatted = potentialParticipants\n  .filter(user => user.age > 18)\n  .map(user => user.name)\n  .join(', ')\n\nconsole.log(participantsFormatted) // gary, emma\n```\n\n#### from\n\n这是一个静态方法，从类数组中创建新的数组，或者像例子中的字符串一样遍历对象。当处理 dom 时，这个方法十分有用。\n\n```javascript\nconst nodes = document.querySelectorAll('.todo-item') // 这是一个 nodeList 实例\nconst todoItems = Array.from(nodes) // 现在你能使用 map filter 等等，就像在数组中那样!\n```\n你曾经见到过我们使用 `Array` 代替数组实例吗？这就是问什么 `from` 被称作静态方法。\n\n接着可以愉快处理这些节点，比如用 `forEach` 在每个节点上注册事件监听：\n\n```javascript\ntodoItems.forEach(item => {\n  item.addEventListener('click', function() {\n    alert(`You clicked on ${item.innerHTML}`)\n  })\n})\n```\n### 最好了解突变\n\n是的，sort 修改了原数组。事实上，在这里进行了数组元素排序。默认的排序方法把所有的元素转换成字符串，然后按照字母表排序它们。\n\n```javascript\nconst names = ['john', 'mary', 'gary', 'anna']\nnames.sort()\nconsole.log(names) // ['anna', 'gary', 'john', 'mary']\n```\n\n如果你有 Python 背景的话，要小心了。使用 sort 在数字数组中不会得到你想要的结果。\n\n```javascript\nconst numbers = [23, 12, 17, 187, 3, 90]\nnumbers.sort()\nconsole.log(numbers) // [12, 17, 187, 23, 3, 90] 🤔\n```\n那么如何对一个数组排序？额，`sort` 接受一个函数，一个比较函数。这个函数接受两个参数：第一个元素（我们称呼为 `a`）和第二个元素作比较（`b`）。这两个元素之间的比较需要返回一个数字。\n\n- 如果为负，`a` 排序在 `b` 之前。\n- 如果为正，`b` 排序在 `a` 之前。\n- 如果是0，没有任何改变。\n\n那么你可以使用下面的方式排序数组：\n\n```javascript\nconst numbers = [23, 12, 17, 187, 3, 90]\nnumbers.sort((a, b) => a - b)\nconsole.log(numbers) // [3, 12, 17, 23, 90, 187]\n```\n\n或者通过最近时间排序：\n\n```javascript\nconst posts = [\n  {\n    title: 'Create a Discord bot under 15 minutes',\n    date: new Date(2018, 11, 26),\n  },\n  { title: 'How to get better at writing CSS', date: new Date(2018, 06, 17) },\n  { title: 'JavaScript arrays', date: new Date() },\n]\nposts.sort((a, b) => a.date - b.date) // Substracting two dates returns the difference in millisecond between them\nconsole.log(posts)\n// [ { title: 'How to get better at writing CSS',\n//     date: 2018-07-17T00:00:00.000Z },\n//   { title: 'Create a Discord bot under 15 minutes',\n//     date: 2018-12-26T00:00:00.000Z },\n//   { title: 'Learn Javascript arrays the functional way',\n//     date: 2019-03-16T10:31:00.208Z } ]\n```\n#### fill\n`fill` 修改或者填充了数组的所有元素，从开始索引到结束索引，使用一个静态值。`fill` 最有用的作用是使用静态值填充一个新数组。\n\n```javascript\n//  Normally I would have called a function that generates ids and random names but let's not bother with that here.\nfunction fakeUser() {\n  return {\n    id: 'fe38',\n    name: 'thomas',\n  }\n}\n\nconst posts = Array(3).fill(fakeUser())\nconsole.log(posts) // [{ id: \"fe38\", name: \"thomas\" }, { id: \"fe38\", name: \"thomas\" }, { id: \"fe38\", name: \"thomas\" }]\n```\n#### reverse\n\n这个方法名在这里显而易见。然而，像留意 sort 那样，reverse 会反转数组的位置。\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5]\n\nnumbers.reverse()\nconsole.log(numbers) // [5, 4, 3, 2, 1]\n```\n\n### 你可以替换的方法\n\n终于，在这个最后的部分，你将发现改变原数组的方法，同时可以很容易替换其中一些。我不是说你应该抛弃这些方法。只是想要你意识到一些数组方法有副作用，并且这里有可选择的其他方法。\n\n#### push\n\n处理数组时这是使用最多的方法。事实上，push 允许你在数组中添加一个或者多个元素。它也通常基于一个旧数组构建一个新数组。\n\n```javascript\nconst todoItems = [1, 2, 3, 4, 5]\n\nconst itemsIncremented = []\nfor (let i = 0; i < items.length; i++) {\n  itemsIncremented.push(items[i] + 1)\n}\n\nconsole.log(itemsIncremented) // [2, 3, 4, 5, 6]\n\nconst todos = ['Write an article', 'Proofreading']\ntodos.push('Publish the article')\nconsole.log(todos) // ['Write an article', 'Proofreading', 'Publish the article']\n```\n如果你需要像 `itemsIncremented` 一样构建一个数组，很多方法都是机会，像我们的朋友 `map`,`filter`或者`reduce`。事实上我们可以使用 `map` 同样做到：\n\n```javascript\nconst itemsIncremented = todoItems.map(x => x + 1)\n```\n\n并且如果你需要使用 `push`，当你要添加新元素的时候，展开操作符为你撑腰。\n\n```javascript\nconst todos = ['Write an article', 'Proofreading']\nconsole.log([...todos, 'Publish the article']) // ['Write an article', 'Proofreading', 'Publish the article']\n```\n\n#### splice\n\n`splice` 常常用于作为移除某个索引元素的方法。你可以同样使用 `filter` 做到。\n\n```javascript\nconst months = ['January', 'February', 'March', 'April', ' May']\n\n// With splice\nmonths.splice(2, 1) // remove one element at index 2\nconsole.log(months) // ['January', 'February', 'April', 'May']\n\n// Without splice\nconst monthsFiltered = months.filter((month, i) => i !== 3)\nconsole.log(monthsFiltered) // ['January', 'February', 'April', 'May']\n```\n\n你可能会想，如果我需要移除多个元素呢？额，使用 `slice`：\n\n```javascript\nconst months = ['January', 'February', 'March', 'April', ' May']\n\n// With splice\nmonths.splice(1, 3) // remove thirds element starting at index 1\nconsole.log(months) // ['January', 'May']\n\n// Without splice\nconst monthsFiltered = [...months.slice(0, 1), ...months.slice(4)]\nconsole.log(monthsFiltered) // ['January', 'May']\n```\n\n#### shift\n\nshift 移除数组的第一个元素然后返回它。从功能上来说，你可以使用 spread/rest 实现。\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5]\n\n// With shift\nconst firstNumber = numbers.shift()\nconsole.log(firstNumber) // 1\nconsole.log(numbers) // [2, 3, 4, 5]\n\n// Without shift\nconst [firstNumber, ...numbersWithoutOne] = numbers\nconsole.log(firstNumber) // 1\nconsole.log(numbersWithoutOne) // [2, 3, 4, 5]\n```\n\n#### unshift\n\nUnshift 允许你在数组开始添加一个或者多个元素。像是 `shift`， 你可以使用展开操作符做同样的事：\n\n```javascript\nconst numbers = [3, 4, 5]\n\n// With unshift\nnumbers.unshift(1, 2)\nconsole.log(numbers) // [1, 2, 3, 4, 5]\n\n// Without unshift\nconst newNumbers = [1, 2, ...numbers]\nconsole.log(newNumbers) // [1, 2, 3, 4, 5]\n```\n\n### 太长不看版：\n\n- 无论何时你在数组上操作时，不要使用 `for-loop` 也不要重复造轮子，你想做的可能已经有一个方法在那里。\n- 大多数情况，你应该使用 `map`,`filter`,`reduce`和`展开操作符`。它们对开发者来说是最基础的工具。\n- 有许多方法需要了解像 `slice`,`some`,`flatMap`等等。记住它们并且在合适的时候使用它们。\n- 副作用导致不想要的改变。要清楚哪些方法会改变你的原始数组。\n- `slice` 和展开操作符是浅拷贝。因此，对象和子数组将会共享同一个引用，小心使用它们。\n- “旧”的改变数组的方法可以被新的替换。取决于你想做什么。\n\n作者：toddmark\n链接：https://juejin.im/post/5ca5639ef265da30d561f31e\n来源：掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n","source":"_posts/【译】关于JavaScript-数组你应该知道的事情.md","raw":"---\ntitle: 【译】关于JavaScript 数组你应该知道的事情\ntags:\n  - javascript\ncategories:\n  - Web开发\ntoc: false\ndate: 2019-04-25 17:28:07\n---\n\n首先做一个粗体声明：**循环经常是无用的，并且使得代码很难阅读**。\n当谈到迭代一个数组的时候，无论你想去查找元素，排序或者任何其他的事，都有可能存在一个数组的方法供你使用。\n\n然而，尽管它们有用，但其中一些仍然不被人了解。我会努力为你展示一些有用的方法。把这篇文章当做对 JavaScript 数组方法的指引吧。\n注意： 在开始之前，不得不了解一件事：我比较偏爱函数式编程。所以我倾向于使用的方法不会直接改变原来的数组。这种方法，我避免了副作用。我不是说不应该改变数组，但至少要了解那些方法会改变，那些会有副作用。副作用导致不想要的改变，而不想要的改变带来bugs！\n了解到这里，我们可以开始正文了。\n\n<!-- more -->\n\n### 必不可少的\n\n当跟数组打交道时，有四件事你应该清楚：`map,filter,reduce`和 展开操作符。它们富有力量。\n\n#### map\n\n你可以在很多种情况下使用它。基本地，每次你需要修改数组的元素时，考虑使用 `map`。\n\n它接受一个参数：一个方法，在每一个数组元素上调用。然后返回一个**新的数组**，所以没有副作用。\n\n```javascript\nconst numbers = [1, 2, 3, 4]\n\nconst numbersPlusOne = numbers.map(n => n + 1) // 每个元素 +1\nconsole.log(numbersPlusOne) // [2, 3, 4, 5]\n```\n\n你也能创建一个新数组，用于保留对象的一个特殊属性：\n\n```javascript\nconst allActivities = [\n  { title: 'My activity', coordinates: [50.123, 3.291] },\n  { title: 'Another activity', coordinates: [1.238, 4.292] },\n  // etc.\n]\n\nconst allCoordinates = allActivities.map(activity => activity.coordinates)\nconsole.log(allCoordinates) // [[50.123, 3.291], [1.238, 4.292]]\n```\n\n所以，请记住，当你需要去**转换**数组时，考虑使用**map**。\n\n#### filter\n\n这个方法的名字在这里十分准确的：当你想去过滤数组的时候使用它。\n\n如同`map`所做，它接受一个函数作为它的唯一参数，在数组的每个元素上调用。这个方法返回一个布尔值：\n\n- `true` 如果你需要在数组中保留元素\n- `false` 如果你不想保留它\n\n接着你会得到一个带有你想要保留的元素的新数组。\n\n举个例子，你可以在数组中只保留奇数：\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5, 6]\nconst oddNumbers = numbers.filter(n => n % 2 !== 0)\nconsole.log(oddNumbers) // [1, 3, 5]\n```\n\n或者你可以在数组中移除特殊的项：\n\n```javascript\nconst participants = [\n  { id: 'a3f47', username: 'john' },\n  { id: 'fek28', username: 'mary' },\n  { id: 'n3j44', username: 'sam' },\n]\n\nfunction removeParticipant(participants, id) {\n  return participants.filter(participant => participant.id !== id)\n}\n\nconsole.log(removeParticipant(participants, 'a3f47')) //  [{ id: 'fek28', username: 'mary' }, { id: 'n3j44', username: 'sam' }];\n```\n\n#### reduce\n\n个人认为是最难理解的方法。但是如果你一旦掌握它，很多疯狂的事情你都可以用它做到。\n\n基本地， `reduce` 使用有值的数组然后组合成一个新的值。它接受两个参数，一个回调方法就是我们的 **reducer** 和一个可选的初始化的值（默认是数组的第一个项）。这个 reducer 自己使用四个参数：\n\n- 累计：在你的 reducer 中累积的返回值\n- 当前数组的值\n- 当前索引\n- 当前调用 reduce 的数组\n\n大多数时候，你只需要使用前两个参数：累计值和当前值。\n\n抛开这些理论。来看看常见的一个 `reduce` 的例子。\n\n```javascript\nconst numbers = [37, 12, 28, 4, 9]\nconst total = numbers.reduce((total, n) => total + n)\nconsole.log(total) // 90\n```\n\n在第一个遍历时，这个累计值，也就是 `total`，使用了初始化为 37 的值。它返回的值是 37 + `n` 并且 `n` 等于 12，因此得到 49.在第二次遍历时，累加值是 49，返回值是 49 + 28 = 77。如此继续直到第四次。\n\n`reduce` 是很强大的，你可以实际使用它去构建很多数组的方法，比如 `map` 或者 `filter`：\n\n```javascript\nconst map = (arr, fn) => {\n  return arr.reduce((mappedArr, element) => {\n    return [...mappedArr, fn(element)]\n  }, [])\n}\n\nconsole.log(map([1, 2, 3, 4], n => n + 1)) // [2, 3, 4, 5]\n\nconst filter = (arr, fn) => {\n  return arr.reduce((filteredArr, element) => {\n    return fn(element) ? [...filteredArr] : [...filteredArr, element]\n  }, [])\n}\n\nconsole.log(filter([1, 2, 3, 4, 5, 6], n => n % 2 === 0)) // [1, 3, 5]\n```\n\n根本上看，我们给 `reduce` 一个初始默认值 `[]`：我们的累计值。对于 `map`，我们运行一个方法，它的结果是累加到最后，多亏了 **展开操作符**（不必担心，后面讨论）。对于 `filter`，几乎是相似的，除了我们在元素上运行过滤函数。如果返回 true，我们返回前一个数组，否则在数组最后添加当前元素。\n\n我们来看一个更高级的例子：深度展开数组，也就是说把 `[1, 2, 3, [4, [[[5, [6, 7]]]], 8]]` 样的数组转换成 `[1, 2, 3, 4, 5, 6, 7, 8]` 样的。\n\n```javascript\nfunction flatDeep(arr) {\n  return arr.reduce((flattenArray, element) => {\n    return Array.isArray(element)\n      ? [...flattenArray, ...flatDeep(element)]\n      : [...flattenArray, element]\n  }, [])\n}\n\nconsole.log(flatDeep([1, 2, 3, [4, [[[5, [6, 7]]]], 8]])) // [1, 2, 3, 4, 5, 6, 7, 8]\n```\n这个例子有点像 `map`，除了我们用到了递归。我不想去解释这个用法，它超出了这篇文章的范围。但是，如果你想了解更多的关于递归的知识，请参考这篇[优质的文章](https://guillaumebogard.dev/blog/what-is-recursion/)。\n\n### 展开操作（ES2015）\n\n我知道这不是一个方法。但是，在处理数组时，使用展开操作可以帮助你做很多事情。事实上，你可以在另一个数组中使用它展开一个数组的值。从这一点来说，你可以复制一个数组，或者连接多个数组。\n\n```javascript\nconst numbers = [1, 2, 3]\nconst numbersCopy = [...numbers]\nconsole.log(numbersCopy) // [1, 2, 3]\n\nconst otherNumbers = [4, 5, 6]\nconst numbersConcatenated = [...numbers, ...otherNumbers]\nconsole.log(numbersConcatenated) // [1, 2, 3, 4, 5, 6]\n```\n注意：：展开操作符对原数组做了一次浅拷贝。但什么是 浅拷贝？🤔\n\n额，浅拷贝是尽可能少的复制原数组。当你有一个数组包含数字，字符串或者布尔值（基本类型），它们是没问题的，这些值被真正复制。然而，对于 **对象和数组** 而言，这是不同的。只有 **对原值的引用** 会被复制！因此，如果你创建一个包含对象的数组的浅拷贝，然后在拷贝的数组中修改了对象，它也会修改原数组的对象，因为它们是 **同一个引用**。\n\n```javascript\nconst arr = ['foo', 42, { name: 'Thomas' }]\nlet copy = [...arr]\n\ncopy[0] = 'bar'\n\nconsole.log(arr) // No mutations: [\"foo\", 42, { name: \"Thomas\" }]\nconsole.log(copy) // [\"bar\", 42, { name: \"Thomas\" }]\n\ncopy[2].name = 'Hello'\n\nconsole.log(arr) // /!\\ MUTATION [\"foo\", 42, { name: \"Hello\" }]\nconsole.log(copy) // [\"bar\", 42, { name: \"Hello\" }]\n```\n\n所以，如果你想去“真正地”靠谱一个包含对象或者数组的是维护组，你可以使用 lodash 的方法 cloneDeep。但是不要觉得必须做这样的事。这里的目标是 意识到事情是如何运作的。\n\n### 最好了解的\n\n下面你看到的方法，是最好了解一下的，同时它们能帮助你解决某些问题，比如在数组中搜索一个元素，取出数组的部分或者更多。\n\n你曾经尝试用过 `indexOf` 去查找一个数组中是否存在某个东西吗？这是一个糟糕的方式对吧？幸运的是，`includes` 为我们做到了这些。给 `includes` 一个参数，然后会在数组里面搜索它，如果一个元素存在的话。\n\n```javascript\nconst sports = ['football', 'archery', 'judo']\nconst hasFootball = sports.includes('football')\nconsole.log(hasFootball) // true\n```\n#### concat\n\nconcat 方法可以用来合并两个或者更多的数组。\n\n```javascript\nconst numbers = [1, 2, 3]\nconst otherNumbers = [4, 5, 6]\n\nconst numbersConcatenated = numbers.concat(otherNumbers)\nconsole.log(numbersConcatenated) // [1, 2, 3, 4, 5, 6]\n\n// You can merge as many arrays as you want\nfunction concatAll(arr, ...arrays) {\n  return arr.concat(...arrays)\n}\n\nconsole.log(concatAll([1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12])) // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n```\n\n#### forEach\n\n无论何时你想为数组的每个元素执行一些事情时，可以使用 forEach。它使用一个函数作为参数，然后给它三个参数：当前值，索引，和当前数组。\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5]\nnumbers.forEach(console.log)\n// 1 0 [ 1, 2, 3 ]\n// 2 1 [ 1, 2, 3 ]\n// 3 2 [ 1, 2, 3 ]\n```\n\n#### indexOf\n\n这个用来在给定的数组中找出第一个被发现的元素的索引。 `indexOf` 也广泛用于检查元素是否在一个数组中。不过老实说，我如今已经不这样使用了。\n\n```javascript\nconst sports = ['football', 'archery', 'judo']\n\nconst judoIndex = sports.indexOf('judo')\nconsole.log(judoIndex) // 2\n```\n\n#### find\n`find` 方法十分类似于 `filter` 方法。你必须提供一个函数用于测试数组的元素。然而，`find` 一旦发现有一个元素通过测试，就立即停止测试其他元素。不用于 `filter`，`filter` 将会迭代整个数组，无论情况如何。\n\n```javascript\nconst users = [\n  { id: 'af35', name: 'john' },\n  { id: '6gbe', name: 'mary' },\n  { id: '932j', name: 'gary' },\n]\n\nconst user = users.find(user => user.id === '6gbe')\nconsole.log(user) // { id: '6gbe', name: 'mary' }\n```\n\n所以使用 `filter`，当你想去过滤整个数组时。使用 `find` 在当你确定在数组中找某个唯一元素的时候。\n\n#### findIndex\n\n这个方法完全跟 find 相同除了它返回第一个发现元素的索引，而不是直接返回元素。\n\n```javascript\nconst users = [\n  { id: 'af35', name: 'john' },\n  { id: '6gbe', name: 'mary' },\n  { id: '932j', name: 'gary' },\n]\n\nconst user = users.findIndex(user => user.id === '6gbe')\nconsole.log(user) // 1\n```\n\n你或许认为 `findIndex` 跟 `indexOf` 是相同的。额……不完全是。`indexOf` 的第一个元素是基本值（布尔，数字，字符串，null，undefined或者一个 symbol）而`findIndex`的第一个元素是一个回调方法。\n所以当你需要搜索在数组中的一个元素的基本值时，使用 `indexOf`。如果有更复杂的元素，比如object，使用 `findIndex`。\n\n#### slice\n\n当你需要取出或者复制数组的一部分，可以使用 `slice`。但是注意，像展开操作符一样， slice 返回部分的浅拷贝！\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5]\nconst copy = numbers.slice()\n```\n\n我在文章的开始谈到，循环是没有什么用的。来用一个例子说明你如何摆脱它。\n\n假设你想去从 API 中去除一定量的聊天记录里，然后展示它们中的 5 条。有两种方式实现：一种是循环，另一种是 `slice`。\n\n```javascript\n// 传统方式\n// 用循环来决定消息的数量\nconst nbMessages = messages.length < 5 ? messages.length : 5\nlet messagesToShow = []\nfor (let i = 0; i < nbMessages; i++) {\n  messagesToShow.push(posts[i])\n}\n\n// 假设 arr 少于 5 个元素\n// slice 将会返回原数组的整个浅拷贝\nconst messagesToShow = messages.slice(0, 5)\n```\n\n#### some\n\n如果你想测试数组中 至少有一个元素 通过测试，那么可以使用 `some`。就像是 `map`,`filter`,和 `find`，`some` 用回调函数作为参数。它返回 `ture`，如果至少一个元素通过测试，返回 `true` 否则返回 `false`。\n\n当你处理权限问题的时候，可以使用 `some`：\n\n```javascript\nconst users = [\n  {\n    id: 'fe34',\n    permissions: ['read', 'write'],\n  },\n  {\n    id: 'a198',\n    permissions: [],\n  },\n  {\n    id: '18aa',\n    permissions: ['delete', 'read', 'write'],\n  },\n]\n\nconst hasDeletePermission = users.some(user =>\n  user.permissions.includes('delete')\n)\nconsole.log(hasDeletePermission) // true\n```\n\n#### every\n\n类似 `some`，不同的是 `ever` 测试了所有的元素是否满足条件（而不是 至少一个）。\n\n```javascript\nconst users = [\n  {\n    id: 'fe34',\n    permissions: ['read', 'write'],\n  },\n  {\n    id: 'a198',\n    permissions: [],\n  },\n  {\n    id: '18aa',\n    permissions: ['delete', 'read', 'write'],\n  },\n]\n\nconst hasAllReadPermission = users.every(user =>\n  user.permissions.includes('read')\n)\nconsole.log(hasAllReadPermission) // false\n```\n#### flat(ES2019)\n这是一个即将到来的招牌方法， 在JavaScript 世界中。大致而言，`flat` 创建一个新数组，通过组合所有的子数组元素。接受一个参数，数值类型，代表你想展开的深度。\n```javascript\nconst numbers = [1, 2, [3, 4, [5, [6, 7]], [[[[8]]]]]]\n\nconst numbersflattenOnce = numbers.flat()\nconsole.log(numbersflattenOnce) // [1, 2, 3, 4, Array[2], Array[1]]\n\nconst numbersflattenTwice = numbers.flat(2)\nconsole.log(numbersflattenTwice) // [1, 2, 3, 4, 5, Array[2], Array[1]]\n\nconst numbersFlattenInfinity = numbers.flat(Infinity)\nconsole.log(numbersFlattenInfinity) // [1, 2, 3, 4, 5, 6, 7, 8]\n```\n#### flatMap(ES2019)\n\n猜猜这个方法干什么？我打赌你可以做到顾名思义。\n\n首先在每个元素上运行一个 mapping 方法。接着一次性展示数据。十分简单！\n\n```javascript\nconst sentences = [\n  'This is a sentence',\n  'This is another sentence',\n  \"I can't find any original phrases\",\n]\n\nconst allWords = sentences.flatMap(sentence => sentence.split(' '))\nconsole.log(allWords) // [\"This\", \"is\", \"a\", \"sentence\", \"This\", \"is\", \"another\", \"sentence\", \"I\", \"can't\", \"find\", \"any\", \"original\", \"phrases\"]\n```\n这个例子中，数组里有一些句子，然而我们想得到所有的单词。不使用 `map` 去把所有的句子分割成单词然后展开数组，你可以直接使用 `flatMap`。\n与 `flatMap` 无关的，你可以使用 `reduce` 方法来计算单词的数量（只是展示另一种 `reduce` 的用法）\n\n```javascript\nconst wordsCount = allWords.reduce((count, word) => {\n  count[word] = count[word] ? count[word] + 1 : 1\n  return count\n}, {})\nconsole.log(wordsCount) // { This: 2, is: 2, a: 1, sentence: 2, another: 1, I: 1, \"can't\": 1, find: 1, any: 1, original: 1, phrases: 1, }\n```\nflatMap 经常用于响应式编程，这里有个[例子](https://link.juejin.im/?target=http%3A%2F%2Freactivex.io%2Fdocumentation%2Foperators%2Fflatmap.html)。\n\n#### join\n如果你需要基于数组元素创建字符串，`join` 正是你所寻找的。它允许通过链接数组元素来创建一个新的字符串，通过提供的分割符分割。\n\n举个例子，你可以使用 `join` 一眼展示活动的参与者：\n\n```javascript\nconst participants = ['john', 'mary', 'gary']\nconst participantsFormatted = participants.join(', ')\nconsole.log(participantsFormatted) // john, mary, gary\n```\n下面的例子更真实，在于你想先过滤参与者然后得到他们的名字。\n\n```javascript\nconst potentialParticipants = [\n  { id: 'k38i', name: 'john', age: 17 },\n  { id: 'baf3', name: 'mary', age: 13 },\n  { id: 'a111', name: 'gary', age: 24 },\n  { id: 'fx34', name: 'emma', age: 34 },\n]\n\nconst participantsFormatted = potentialParticipants\n  .filter(user => user.age > 18)\n  .map(user => user.name)\n  .join(', ')\n\nconsole.log(participantsFormatted) // gary, emma\n```\n\n#### from\n\n这是一个静态方法，从类数组中创建新的数组，或者像例子中的字符串一样遍历对象。当处理 dom 时，这个方法十分有用。\n\n```javascript\nconst nodes = document.querySelectorAll('.todo-item') // 这是一个 nodeList 实例\nconst todoItems = Array.from(nodes) // 现在你能使用 map filter 等等，就像在数组中那样!\n```\n你曾经见到过我们使用 `Array` 代替数组实例吗？这就是问什么 `from` 被称作静态方法。\n\n接着可以愉快处理这些节点，比如用 `forEach` 在每个节点上注册事件监听：\n\n```javascript\ntodoItems.forEach(item => {\n  item.addEventListener('click', function() {\n    alert(`You clicked on ${item.innerHTML}`)\n  })\n})\n```\n### 最好了解突变\n\n是的，sort 修改了原数组。事实上，在这里进行了数组元素排序。默认的排序方法把所有的元素转换成字符串，然后按照字母表排序它们。\n\n```javascript\nconst names = ['john', 'mary', 'gary', 'anna']\nnames.sort()\nconsole.log(names) // ['anna', 'gary', 'john', 'mary']\n```\n\n如果你有 Python 背景的话，要小心了。使用 sort 在数字数组中不会得到你想要的结果。\n\n```javascript\nconst numbers = [23, 12, 17, 187, 3, 90]\nnumbers.sort()\nconsole.log(numbers) // [12, 17, 187, 23, 3, 90] 🤔\n```\n那么如何对一个数组排序？额，`sort` 接受一个函数，一个比较函数。这个函数接受两个参数：第一个元素（我们称呼为 `a`）和第二个元素作比较（`b`）。这两个元素之间的比较需要返回一个数字。\n\n- 如果为负，`a` 排序在 `b` 之前。\n- 如果为正，`b` 排序在 `a` 之前。\n- 如果是0，没有任何改变。\n\n那么你可以使用下面的方式排序数组：\n\n```javascript\nconst numbers = [23, 12, 17, 187, 3, 90]\nnumbers.sort((a, b) => a - b)\nconsole.log(numbers) // [3, 12, 17, 23, 90, 187]\n```\n\n或者通过最近时间排序：\n\n```javascript\nconst posts = [\n  {\n    title: 'Create a Discord bot under 15 minutes',\n    date: new Date(2018, 11, 26),\n  },\n  { title: 'How to get better at writing CSS', date: new Date(2018, 06, 17) },\n  { title: 'JavaScript arrays', date: new Date() },\n]\nposts.sort((a, b) => a.date - b.date) // Substracting two dates returns the difference in millisecond between them\nconsole.log(posts)\n// [ { title: 'How to get better at writing CSS',\n//     date: 2018-07-17T00:00:00.000Z },\n//   { title: 'Create a Discord bot under 15 minutes',\n//     date: 2018-12-26T00:00:00.000Z },\n//   { title: 'Learn Javascript arrays the functional way',\n//     date: 2019-03-16T10:31:00.208Z } ]\n```\n#### fill\n`fill` 修改或者填充了数组的所有元素，从开始索引到结束索引，使用一个静态值。`fill` 最有用的作用是使用静态值填充一个新数组。\n\n```javascript\n//  Normally I would have called a function that generates ids and random names but let's not bother with that here.\nfunction fakeUser() {\n  return {\n    id: 'fe38',\n    name: 'thomas',\n  }\n}\n\nconst posts = Array(3).fill(fakeUser())\nconsole.log(posts) // [{ id: \"fe38\", name: \"thomas\" }, { id: \"fe38\", name: \"thomas\" }, { id: \"fe38\", name: \"thomas\" }]\n```\n#### reverse\n\n这个方法名在这里显而易见。然而，像留意 sort 那样，reverse 会反转数组的位置。\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5]\n\nnumbers.reverse()\nconsole.log(numbers) // [5, 4, 3, 2, 1]\n```\n\n### 你可以替换的方法\n\n终于，在这个最后的部分，你将发现改变原数组的方法，同时可以很容易替换其中一些。我不是说你应该抛弃这些方法。只是想要你意识到一些数组方法有副作用，并且这里有可选择的其他方法。\n\n#### push\n\n处理数组时这是使用最多的方法。事实上，push 允许你在数组中添加一个或者多个元素。它也通常基于一个旧数组构建一个新数组。\n\n```javascript\nconst todoItems = [1, 2, 3, 4, 5]\n\nconst itemsIncremented = []\nfor (let i = 0; i < items.length; i++) {\n  itemsIncremented.push(items[i] + 1)\n}\n\nconsole.log(itemsIncremented) // [2, 3, 4, 5, 6]\n\nconst todos = ['Write an article', 'Proofreading']\ntodos.push('Publish the article')\nconsole.log(todos) // ['Write an article', 'Proofreading', 'Publish the article']\n```\n如果你需要像 `itemsIncremented` 一样构建一个数组，很多方法都是机会，像我们的朋友 `map`,`filter`或者`reduce`。事实上我们可以使用 `map` 同样做到：\n\n```javascript\nconst itemsIncremented = todoItems.map(x => x + 1)\n```\n\n并且如果你需要使用 `push`，当你要添加新元素的时候，展开操作符为你撑腰。\n\n```javascript\nconst todos = ['Write an article', 'Proofreading']\nconsole.log([...todos, 'Publish the article']) // ['Write an article', 'Proofreading', 'Publish the article']\n```\n\n#### splice\n\n`splice` 常常用于作为移除某个索引元素的方法。你可以同样使用 `filter` 做到。\n\n```javascript\nconst months = ['January', 'February', 'March', 'April', ' May']\n\n// With splice\nmonths.splice(2, 1) // remove one element at index 2\nconsole.log(months) // ['January', 'February', 'April', 'May']\n\n// Without splice\nconst monthsFiltered = months.filter((month, i) => i !== 3)\nconsole.log(monthsFiltered) // ['January', 'February', 'April', 'May']\n```\n\n你可能会想，如果我需要移除多个元素呢？额，使用 `slice`：\n\n```javascript\nconst months = ['January', 'February', 'March', 'April', ' May']\n\n// With splice\nmonths.splice(1, 3) // remove thirds element starting at index 1\nconsole.log(months) // ['January', 'May']\n\n// Without splice\nconst monthsFiltered = [...months.slice(0, 1), ...months.slice(4)]\nconsole.log(monthsFiltered) // ['January', 'May']\n```\n\n#### shift\n\nshift 移除数组的第一个元素然后返回它。从功能上来说，你可以使用 spread/rest 实现。\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5]\n\n// With shift\nconst firstNumber = numbers.shift()\nconsole.log(firstNumber) // 1\nconsole.log(numbers) // [2, 3, 4, 5]\n\n// Without shift\nconst [firstNumber, ...numbersWithoutOne] = numbers\nconsole.log(firstNumber) // 1\nconsole.log(numbersWithoutOne) // [2, 3, 4, 5]\n```\n\n#### unshift\n\nUnshift 允许你在数组开始添加一个或者多个元素。像是 `shift`， 你可以使用展开操作符做同样的事：\n\n```javascript\nconst numbers = [3, 4, 5]\n\n// With unshift\nnumbers.unshift(1, 2)\nconsole.log(numbers) // [1, 2, 3, 4, 5]\n\n// Without unshift\nconst newNumbers = [1, 2, ...numbers]\nconsole.log(newNumbers) // [1, 2, 3, 4, 5]\n```\n\n### 太长不看版：\n\n- 无论何时你在数组上操作时，不要使用 `for-loop` 也不要重复造轮子，你想做的可能已经有一个方法在那里。\n- 大多数情况，你应该使用 `map`,`filter`,`reduce`和`展开操作符`。它们对开发者来说是最基础的工具。\n- 有许多方法需要了解像 `slice`,`some`,`flatMap`等等。记住它们并且在合适的时候使用它们。\n- 副作用导致不想要的改变。要清楚哪些方法会改变你的原始数组。\n- `slice` 和展开操作符是浅拷贝。因此，对象和子数组将会共享同一个引用，小心使用它们。\n- “旧”的改变数组的方法可以被新的替换。取决于你想做什么。\n\n作者：toddmark\n链接：https://juejin.im/post/5ca5639ef265da30d561f31e\n来源：掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n","slug":"【译】关于JavaScript-数组你应该知道的事情","published":1,"updated":"2019-11-07T02:24:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo0b0070h5s6khiz6lwj","content":"<p>首先做一个粗体声明：<strong>循环经常是无用的，并且使得代码很难阅读</strong>。<br>当谈到迭代一个数组的时候，无论你想去查找元素，排序或者任何其他的事，都有可能存在一个数组的方法供你使用。</p>\n<p>然而，尽管它们有用，但其中一些仍然不被人了解。我会努力为你展示一些有用的方法。把这篇文章当做对 JavaScript 数组方法的指引吧。<br>注意： 在开始之前，不得不了解一件事：我比较偏爱函数式编程。所以我倾向于使用的方法不会直接改变原来的数组。这种方法，我避免了副作用。我不是说不应该改变数组，但至少要了解那些方法会改变，那些会有副作用。副作用导致不想要的改变，而不想要的改变带来bugs！<br>了解到这里，我们可以开始正文了。</p>\n<a id=\"more\"></a>\n<h3 id=\"必不可少的\"><a href=\"#必不可少的\" class=\"headerlink\" title=\"必不可少的\"></a>必不可少的</h3><p>当跟数组打交道时，有四件事你应该清楚：<code>map,filter,reduce</code>和 展开操作符。它们富有力量。</p>\n<h4 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h4><p>你可以在很多种情况下使用它。基本地，每次你需要修改数组的元素时，考虑使用 <code>map</code>。</p>\n<p>它接受一个参数：一个方法，在每一个数组元素上调用。然后返回一个<strong>新的数组</strong>，所以没有副作用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> numbersPlusOne = numbers.map(<span class=\"function\"><span class=\"params\">n</span> =&gt;</span> n + <span class=\"number\">1</span>) <span class=\"comment\">// 每个元素 +1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numbersPlusOne) <span class=\"comment\">// [2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n<p>你也能创建一个新数组，用于保留对象的一个特殊属性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> allActivities = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">title</span>: <span class=\"string\">'My activity'</span>, <span class=\"attr\">coordinates</span>: [<span class=\"number\">50.123</span>, <span class=\"number\">3.291</span>] &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">title</span>: <span class=\"string\">'Another activity'</span>, <span class=\"attr\">coordinates</span>: [<span class=\"number\">1.238</span>, <span class=\"number\">4.292</span>] &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// etc.</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> allCoordinates = allActivities.map(<span class=\"function\"><span class=\"params\">activity</span> =&gt;</span> activity.coordinates)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(allCoordinates) <span class=\"comment\">// [[50.123, 3.291], [1.238, 4.292]]</span></span><br></pre></td></tr></table></figure>\n<p>所以，请记住，当你需要去<strong>转换</strong>数组时，考虑使用<strong>map</strong>。</p>\n<h4 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h4><p>这个方法的名字在这里十分准确的：当你想去过滤数组的时候使用它。</p>\n<p>如同<code>map</code>所做，它接受一个函数作为它的唯一参数，在数组的每个元素上调用。这个方法返回一个布尔值：</p>\n<ul>\n<li><code>true</code> 如果你需要在数组中保留元素</li>\n<li><code>false</code> 如果你不想保留它</li>\n</ul>\n<p>接着你会得到一个带有你想要保留的元素的新数组。</p>\n<p>举个例子，你可以在数组中只保留奇数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> oddNumbers = numbers.filter(<span class=\"function\"><span class=\"params\">n</span> =&gt;</span> n % <span class=\"number\">2</span> !== <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(oddNumbers) <span class=\"comment\">// [1, 3, 5]</span></span><br></pre></td></tr></table></figure>\n<p>或者你可以在数组中移除特殊的项：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> participants = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">'a3f47'</span>, <span class=\"attr\">username</span>: <span class=\"string\">'john'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">'fek28'</span>, <span class=\"attr\">username</span>: <span class=\"string\">'mary'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">'n3j44'</span>, <span class=\"attr\">username</span>: <span class=\"string\">'sam'</span> &#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeParticipant</span>(<span class=\"params\">participants, id</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> participants.filter(<span class=\"function\"><span class=\"params\">participant</span> =&gt;</span> participant.id !== id)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(removeParticipant(participants, <span class=\"string\">'a3f47'</span>)) <span class=\"comment\">//  [&#123; id: 'fek28', username: 'mary' &#125;, &#123; id: 'n3j44', username: 'sam' &#125;];</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce\"></a>reduce</h4><p>个人认为是最难理解的方法。但是如果你一旦掌握它，很多疯狂的事情你都可以用它做到。</p>\n<p>基本地， <code>reduce</code> 使用有值的数组然后组合成一个新的值。它接受两个参数，一个回调方法就是我们的 <strong>reducer</strong> 和一个可选的初始化的值（默认是数组的第一个项）。这个 reducer 自己使用四个参数：</p>\n<ul>\n<li>累计：在你的 reducer 中累积的返回值</li>\n<li>当前数组的值</li>\n<li>当前索引</li>\n<li>当前调用 reduce 的数组</li>\n</ul>\n<p>大多数时候，你只需要使用前两个参数：累计值和当前值。</p>\n<p>抛开这些理论。来看看常见的一个 <code>reduce</code> 的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">37</span>, <span class=\"number\">12</span>, <span class=\"number\">28</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> total = numbers.reduce(<span class=\"function\">(<span class=\"params\">total, n</span>) =&gt;</span> total + n)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(total) <span class=\"comment\">// 90</span></span><br></pre></td></tr></table></figure>\n<p>在第一个遍历时，这个累计值，也就是 <code>total</code>，使用了初始化为 37 的值。它返回的值是 37 + <code>n</code> 并且 <code>n</code> 等于 12，因此得到 49.在第二次遍历时，累加值是 49，返回值是 49 + 28 = 77。如此继续直到第四次。</p>\n<p><code>reduce</code> 是很强大的，你可以实际使用它去构建很多数组的方法，比如 <code>map</code> 或者 <code>filter</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"function\">(<span class=\"params\">arr, fn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.reduce(<span class=\"function\">(<span class=\"params\">mappedArr, element</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [...mappedArr, fn(element)]</span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], n =&gt; n + <span class=\"number\">1</span>)) <span class=\"comment\">// [2, 3, 4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> filter = <span class=\"function\">(<span class=\"params\">arr, fn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.reduce(<span class=\"function\">(<span class=\"params\">filteredArr, element</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fn(element) ? [...filteredArr] : [...filteredArr, element]</span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(filter([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], n =&gt; n % <span class=\"number\">2</span> === <span class=\"number\">0</span>)) <span class=\"comment\">// [1, 3, 5]</span></span><br></pre></td></tr></table></figure>\n<p>根本上看，我们给 <code>reduce</code> 一个初始默认值 <code>[]</code>：我们的累计值。对于 <code>map</code>，我们运行一个方法，它的结果是累加到最后，多亏了 <strong>展开操作符</strong>（不必担心，后面讨论）。对于 <code>filter</code>，几乎是相似的，除了我们在元素上运行过滤函数。如果返回 true，我们返回前一个数组，否则在数组最后添加当前元素。</p>\n<p>我们来看一个更高级的例子：深度展开数组，也就是说把 <code>[1, 2, 3, [4, [[[5, [6, 7]]]], 8]]</code> 样的数组转换成 <code>[1, 2, 3, 4, 5, 6, 7, 8]</code> 样的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flatDeep</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.reduce(<span class=\"function\">(<span class=\"params\">flattenArray, element</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.isArray(element)</span><br><span class=\"line\">      ? [...flattenArray, ...flatDeep(element)]</span><br><span class=\"line\">      : [...flattenArray, element]</span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(flatDeep([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, [<span class=\"number\">4</span>, [[[<span class=\"number\">5</span>, [<span class=\"number\">6</span>, <span class=\"number\">7</span>]]]], <span class=\"number\">8</span>]])) <span class=\"comment\">// [1, 2, 3, 4, 5, 6, 7, 8]</span></span><br></pre></td></tr></table></figure>\n<p>这个例子有点像 <code>map</code>，除了我们用到了递归。我不想去解释这个用法，它超出了这篇文章的范围。但是，如果你想了解更多的关于递归的知识，请参考这篇<a href=\"https://guillaumebogard.dev/blog/what-is-recursion/\" target=\"_blank\" rel=\"noopener\">优质的文章</a>。</p>\n<h3 id=\"展开操作（ES2015）\"><a href=\"#展开操作（ES2015）\" class=\"headerlink\" title=\"展开操作（ES2015）\"></a>展开操作（ES2015）</h3><p>我知道这不是一个方法。但是，在处理数组时，使用展开操作可以帮助你做很多事情。事实上，你可以在另一个数组中使用它展开一个数组的值。从这一点来说，你可以复制一个数组，或者连接多个数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> numbersCopy = [...numbers]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numbersCopy) <span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> otherNumbers = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> numbersConcatenated = [...numbers, ...otherNumbers]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numbersConcatenated) <span class=\"comment\">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>\n<p>注意：：展开操作符对原数组做了一次浅拷贝。但什么是 浅拷贝？🤔</p>\n<p>额，浅拷贝是尽可能少的复制原数组。当你有一个数组包含数字，字符串或者布尔值（基本类型），它们是没问题的，这些值被真正复制。然而，对于 <strong>对象和数组</strong> 而言，这是不同的。只有 <strong>对原值的引用</strong> 会被复制！因此，如果你创建一个包含对象的数组的浅拷贝，然后在拷贝的数组中修改了对象，它也会修改原数组的对象，因为它们是 <strong>同一个引用</strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">'foo'</span>, <span class=\"number\">42</span>, &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Thomas'</span> &#125;]</span><br><span class=\"line\"><span class=\"keyword\">let</span> copy = [...arr]</span><br><span class=\"line\"></span><br><span class=\"line\">copy[<span class=\"number\">0</span>] = <span class=\"string\">'bar'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr) <span class=\"comment\">// No mutations: [\"foo\", 42, &#123; name: \"Thomas\" &#125;]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(copy) <span class=\"comment\">// [\"bar\", 42, &#123; name: \"Thomas\" &#125;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">copy[<span class=\"number\">2</span>].name = <span class=\"string\">'Hello'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr) <span class=\"comment\">// /!\\ MUTATION [\"foo\", 42, &#123; name: \"Hello\" &#125;]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(copy) <span class=\"comment\">// [\"bar\", 42, &#123; name: \"Hello\" &#125;]</span></span><br></pre></td></tr></table></figure>\n<p>所以，如果你想去“真正地”靠谱一个包含对象或者数组的是维护组，你可以使用 lodash 的方法 cloneDeep。但是不要觉得必须做这样的事。这里的目标是 意识到事情是如何运作的。</p>\n<h3 id=\"最好了解的\"><a href=\"#最好了解的\" class=\"headerlink\" title=\"最好了解的\"></a>最好了解的</h3><p>下面你看到的方法，是最好了解一下的，同时它们能帮助你解决某些问题，比如在数组中搜索一个元素，取出数组的部分或者更多。</p>\n<p>你曾经尝试用过 <code>indexOf</code> 去查找一个数组中是否存在某个东西吗？这是一个糟糕的方式对吧？幸运的是，<code>includes</code> 为我们做到了这些。给 <code>includes</code> 一个参数，然后会在数组里面搜索它，如果一个元素存在的话。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sports = [<span class=\"string\">'football'</span>, <span class=\"string\">'archery'</span>, <span class=\"string\">'judo'</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> hasFootball = sports.includes(<span class=\"string\">'football'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hasFootball) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat\"></a>concat</h4><p>concat 方法可以用来合并两个或者更多的数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> otherNumbers = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> numbersConcatenated = numbers.concat(otherNumbers)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numbersConcatenated) <span class=\"comment\">// [1, 2, 3, 4, 5, 6]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// You can merge as many arrays as you want</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">concatAll</span>(<span class=\"params\">arr, ...arrays</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.concat(...arrays)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(concatAll([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>], [<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>])) <span class=\"comment\">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach\"></a>forEach</h4><p>无论何时你想为数组的每个元素执行一些事情时，可以使用 forEach。它使用一个函数作为参数，然后给它三个参数：当前值，索引，和当前数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">numbers.forEach(<span class=\"built_in\">console</span>.log)</span><br><span class=\"line\"><span class=\"comment\">// 1 0 [ 1, 2, 3 ]</span></span><br><span class=\"line\"><span class=\"comment\">// 2 1 [ 1, 2, 3 ]</span></span><br><span class=\"line\"><span class=\"comment\">// 3 2 [ 1, 2, 3 ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"indexOf\"><a href=\"#indexOf\" class=\"headerlink\" title=\"indexOf\"></a>indexOf</h4><p>这个用来在给定的数组中找出第一个被发现的元素的索引。 <code>indexOf</code> 也广泛用于检查元素是否在一个数组中。不过老实说，我如今已经不这样使用了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sports = [<span class=\"string\">'football'</span>, <span class=\"string\">'archery'</span>, <span class=\"string\">'judo'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> judoIndex = sports.indexOf(<span class=\"string\">'judo'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(judoIndex) <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h4><p><code>find</code> 方法十分类似于 <code>filter</code> 方法。你必须提供一个函数用于测试数组的元素。然而，<code>find</code> 一旦发现有一个元素通过测试，就立即停止测试其他元素。不用于 <code>filter</code>，<code>filter</code> 将会迭代整个数组，无论情况如何。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> users = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">'af35'</span>, <span class=\"attr\">name</span>: <span class=\"string\">'john'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">'6gbe'</span>, <span class=\"attr\">name</span>: <span class=\"string\">'mary'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">'932j'</span>, <span class=\"attr\">name</span>: <span class=\"string\">'gary'</span> &#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> user = users.find(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> user.id === <span class=\"string\">'6gbe'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(user) <span class=\"comment\">// &#123; id: '6gbe', name: 'mary' &#125;</span></span><br></pre></td></tr></table></figure>\n<p>所以使用 <code>filter</code>，当你想去过滤整个数组时。使用 <code>find</code> 在当你确定在数组中找某个唯一元素的时候。</p>\n<h4 id=\"findIndex\"><a href=\"#findIndex\" class=\"headerlink\" title=\"findIndex\"></a>findIndex</h4><p>这个方法完全跟 find 相同除了它返回第一个发现元素的索引，而不是直接返回元素。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> users = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">'af35'</span>, <span class=\"attr\">name</span>: <span class=\"string\">'john'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">'6gbe'</span>, <span class=\"attr\">name</span>: <span class=\"string\">'mary'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">'932j'</span>, <span class=\"attr\">name</span>: <span class=\"string\">'gary'</span> &#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> user = users.findIndex(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> user.id === <span class=\"string\">'6gbe'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(user) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>你或许认为 <code>findIndex</code> 跟 <code>indexOf</code> 是相同的。额……不完全是。<code>indexOf</code> 的第一个元素是基本值（布尔，数字，字符串，null，undefined或者一个 symbol）而<code>findIndex</code>的第一个元素是一个回调方法。<br>所以当你需要搜索在数组中的一个元素的基本值时，使用 <code>indexOf</code>。如果有更复杂的元素，比如object，使用 <code>findIndex</code>。</p>\n<h4 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"slice\"></a>slice</h4><p>当你需要取出或者复制数组的一部分，可以使用 <code>slice</code>。但是注意，像展开操作符一样， slice 返回部分的浅拷贝！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> copy = numbers.slice()</span><br></pre></td></tr></table></figure>\n<p>我在文章的开始谈到，循环是没有什么用的。来用一个例子说明你如何摆脱它。</p>\n<p>假设你想去从 API 中去除一定量的聊天记录里，然后展示它们中的 5 条。有两种方式实现：一种是循环，另一种是 <code>slice</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 传统方式</span></span><br><span class=\"line\"><span class=\"comment\">// 用循环来决定消息的数量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> nbMessages = messages.length &lt; <span class=\"number\">5</span> ? messages.length : <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> messagesToShow = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nbMessages; i++) &#123;</span><br><span class=\"line\">  messagesToShow.push(posts[i])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 假设 arr 少于 5 个元素</span></span><br><span class=\"line\"><span class=\"comment\">// slice 将会返回原数组的整个浅拷贝</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> messagesToShow = messages.slice(<span class=\"number\">0</span>, <span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"some\"></a>some</h4><p>如果你想测试数组中 至少有一个元素 通过测试，那么可以使用 <code>some</code>。就像是 <code>map</code>,<code>filter</code>,和 <code>find</code>，<code>some</code> 用回调函数作为参数。它返回 <code>ture</code>，如果至少一个元素通过测试，返回 <code>true</code> 否则返回 <code>false</code>。</p>\n<p>当你处理权限问题的时候，可以使用 <code>some</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> users = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    id: <span class=\"string\">'fe34'</span>,</span><br><span class=\"line\">    permissions: [<span class=\"string\">'read'</span>, <span class=\"string\">'write'</span>],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    id: <span class=\"string\">'a198'</span>,</span><br><span class=\"line\">    permissions: [],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    id: <span class=\"string\">'18aa'</span>,</span><br><span class=\"line\">    permissions: [<span class=\"string\">'delete'</span>, <span class=\"string\">'read'</span>, <span class=\"string\">'write'</span>],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> hasDeletePermission = users.some(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span></span><br><span class=\"line\">  user.permissions.includes(<span class=\"string\">'delete'</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hasDeletePermission) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"every\"></a>every</h4><p>类似 <code>some</code>，不同的是 <code>ever</code> 测试了所有的元素是否满足条件（而不是 至少一个）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> users = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    id: <span class=\"string\">'fe34'</span>,</span><br><span class=\"line\">    permissions: [<span class=\"string\">'read'</span>, <span class=\"string\">'write'</span>],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    id: <span class=\"string\">'a198'</span>,</span><br><span class=\"line\">    permissions: [],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    id: <span class=\"string\">'18aa'</span>,</span><br><span class=\"line\">    permissions: [<span class=\"string\">'delete'</span>, <span class=\"string\">'read'</span>, <span class=\"string\">'write'</span>],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> hasAllReadPermission = users.every(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span></span><br><span class=\"line\">  user.permissions.includes(<span class=\"string\">'read'</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hasAllReadPermission) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"flat-ES2019\"><a href=\"#flat-ES2019\" class=\"headerlink\" title=\"flat(ES2019)\"></a>flat(ES2019)</h4><p>这是一个即将到来的招牌方法， 在JavaScript 世界中。大致而言，<code>flat</code> 创建一个新数组，通过组合所有的子数组元素。接受一个参数，数值类型，代表你想展开的深度。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"number\">3</span>, <span class=\"number\">4</span>, [<span class=\"number\">5</span>, [<span class=\"number\">6</span>, <span class=\"number\">7</span>]], [[[[<span class=\"number\">8</span>]]]]]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> numbersflattenOnce = numbers.flat()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numbersflattenOnce) <span class=\"comment\">// [1, 2, 3, 4, Array[2], Array[1]]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> numbersflattenTwice = numbers.flat(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numbersflattenTwice) <span class=\"comment\">// [1, 2, 3, 4, 5, Array[2], Array[1]]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> numbersFlattenInfinity = numbers.flat(<span class=\"literal\">Infinity</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numbersFlattenInfinity) <span class=\"comment\">// [1, 2, 3, 4, 5, 6, 7, 8]</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"flatMap-ES2019\"><a href=\"#flatMap-ES2019\" class=\"headerlink\" title=\"flatMap(ES2019)\"></a>flatMap(ES2019)</h4><p>猜猜这个方法干什么？我打赌你可以做到顾名思义。</p>\n<p>首先在每个元素上运行一个 mapping 方法。接着一次性展示数据。十分简单！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sentences = [</span><br><span class=\"line\">  <span class=\"string\">'This is a sentence'</span>,</span><br><span class=\"line\">  <span class=\"string\">'This is another sentence'</span>,</span><br><span class=\"line\">  <span class=\"string\">\"I can't find any original phrases\"</span>,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> allWords = sentences.flatMap(<span class=\"function\"><span class=\"params\">sentence</span> =&gt;</span> sentence.split(<span class=\"string\">' '</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(allWords) <span class=\"comment\">// [\"This\", \"is\", \"a\", \"sentence\", \"This\", \"is\", \"another\", \"sentence\", \"I\", \"can't\", \"find\", \"any\", \"original\", \"phrases\"]</span></span><br></pre></td></tr></table></figure>\n<p>这个例子中，数组里有一些句子，然而我们想得到所有的单词。不使用 <code>map</code> 去把所有的句子分割成单词然后展开数组，你可以直接使用 <code>flatMap</code>。<br>与 <code>flatMap</code> 无关的，你可以使用 <code>reduce</code> 方法来计算单词的数量（只是展示另一种 <code>reduce</code> 的用法）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> wordsCount = allWords.reduce(<span class=\"function\">(<span class=\"params\">count, word</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  count[word] = count[word] ? count[word] + <span class=\"number\">1</span> : <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> count</span><br><span class=\"line\">&#125;, &#123;&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(wordsCount) <span class=\"comment\">// &#123; This: 2, is: 2, a: 1, sentence: 2, another: 1, I: 1, \"can't\": 1, find: 1, any: 1, original: 1, phrases: 1, &#125;</span></span><br></pre></td></tr></table></figure>\n<p>flatMap 经常用于响应式编程，这里有个<a href=\"https://link.juejin.im/?target=http%3A%2F%2Freactivex.io%2Fdocumentation%2Foperators%2Fflatmap.html\" target=\"_blank\" rel=\"noopener\">例子</a>。</p>\n<h4 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join\"></a>join</h4><p>如果你需要基于数组元素创建字符串，<code>join</code> 正是你所寻找的。它允许通过链接数组元素来创建一个新的字符串，通过提供的分割符分割。</p>\n<p>举个例子，你可以使用 <code>join</code> 一眼展示活动的参与者：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> participants = [<span class=\"string\">'john'</span>, <span class=\"string\">'mary'</span>, <span class=\"string\">'gary'</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> participantsFormatted = participants.join(<span class=\"string\">', '</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(participantsFormatted) <span class=\"comment\">// john, mary, gary</span></span><br></pre></td></tr></table></figure>\n<p>下面的例子更真实，在于你想先过滤参与者然后得到他们的名字。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> potentialParticipants = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">'k38i'</span>, <span class=\"attr\">name</span>: <span class=\"string\">'john'</span>, <span class=\"attr\">age</span>: <span class=\"number\">17</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">'baf3'</span>, <span class=\"attr\">name</span>: <span class=\"string\">'mary'</span>, <span class=\"attr\">age</span>: <span class=\"number\">13</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">'a111'</span>, <span class=\"attr\">name</span>: <span class=\"string\">'gary'</span>, <span class=\"attr\">age</span>: <span class=\"number\">24</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">'fx34'</span>, <span class=\"attr\">name</span>: <span class=\"string\">'emma'</span>, <span class=\"attr\">age</span>: <span class=\"number\">34</span> &#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> participantsFormatted = potentialParticipants</span><br><span class=\"line\">  .filter(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> user.age &gt; <span class=\"number\">18</span>)</span><br><span class=\"line\">  .map(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> user.name)</span><br><span class=\"line\">  .join(<span class=\"string\">', '</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(participantsFormatted) <span class=\"comment\">// gary, emma</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"from\"><a href=\"#from\" class=\"headerlink\" title=\"from\"></a>from</h4><p>这是一个静态方法，从类数组中创建新的数组，或者像例子中的字符串一样遍历对象。当处理 dom 时，这个方法十分有用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> nodes = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.todo-item'</span>) <span class=\"comment\">// 这是一个 nodeList 实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> todoItems = <span class=\"built_in\">Array</span>.from(nodes) <span class=\"comment\">// 现在你能使用 map filter 等等，就像在数组中那样!</span></span><br></pre></td></tr></table></figure>\n<p>你曾经见到过我们使用 <code>Array</code> 代替数组实例吗？这就是问什么 <code>from</code> 被称作静态方法。</p>\n<p>接着可以愉快处理这些节点，比如用 <code>forEach</code> 在每个节点上注册事件监听：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">todoItems.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">  item.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">`You clicked on <span class=\"subst\">$&#123;item.innerHTML&#125;</span>`</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"最好了解突变\"><a href=\"#最好了解突变\" class=\"headerlink\" title=\"最好了解突变\"></a>最好了解突变</h3><p>是的，sort 修改了原数组。事实上，在这里进行了数组元素排序。默认的排序方法把所有的元素转换成字符串，然后按照字母表排序它们。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> names = [<span class=\"string\">'john'</span>, <span class=\"string\">'mary'</span>, <span class=\"string\">'gary'</span>, <span class=\"string\">'anna'</span>]</span><br><span class=\"line\">names.sort()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(names) <span class=\"comment\">// ['anna', 'gary', 'john', 'mary']</span></span><br></pre></td></tr></table></figure>\n<p>如果你有 Python 背景的话，要小心了。使用 sort 在数字数组中不会得到你想要的结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">23</span>, <span class=\"number\">12</span>, <span class=\"number\">17</span>, <span class=\"number\">187</span>, <span class=\"number\">3</span>, <span class=\"number\">90</span>]</span><br><span class=\"line\">numbers.sort()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numbers) <span class=\"comment\">// [12, 17, 187, 23, 3, 90] 🤔</span></span><br></pre></td></tr></table></figure>\n<p>那么如何对一个数组排序？额，<code>sort</code> 接受一个函数，一个比较函数。这个函数接受两个参数：第一个元素（我们称呼为 <code>a</code>）和第二个元素作比较（<code>b</code>）。这两个元素之间的比较需要返回一个数字。</p>\n<ul>\n<li>如果为负，<code>a</code> 排序在 <code>b</code> 之前。</li>\n<li>如果为正，<code>b</code> 排序在 <code>a</code> 之前。</li>\n<li>如果是0，没有任何改变。</li>\n</ul>\n<p>那么你可以使用下面的方式排序数组：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">23</span>, <span class=\"number\">12</span>, <span class=\"number\">17</span>, <span class=\"number\">187</span>, <span class=\"number\">3</span>, <span class=\"number\">90</span>]</span><br><span class=\"line\">numbers.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numbers) <span class=\"comment\">// [3, 12, 17, 23, 90, 187]</span></span><br></pre></td></tr></table></figure>\n<p>或者通过最近时间排序：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> posts = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    title: <span class=\"string\">'Create a Discord bot under 15 minutes'</span>,</span><br><span class=\"line\">    date: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2018</span>, <span class=\"number\">11</span>, <span class=\"number\">26</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">title</span>: <span class=\"string\">'How to get better at writing CSS'</span>, <span class=\"attr\">date</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2018</span>, <span class=\"number\">06</span>, <span class=\"number\">17</span>) &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">title</span>: <span class=\"string\">'JavaScript arrays'</span>, <span class=\"attr\">date</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() &#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\">posts.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a.date - b.date) <span class=\"comment\">// Substracting two dates returns the difference in millisecond between them</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(posts)</span><br><span class=\"line\"><span class=\"comment\">// [ &#123; title: 'How to get better at writing CSS',</span></span><br><span class=\"line\"><span class=\"comment\">//     date: 2018-07-17T00:00:00.000Z &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//   &#123; title: 'Create a Discord bot under 15 minutes',</span></span><br><span class=\"line\"><span class=\"comment\">//     date: 2018-12-26T00:00:00.000Z &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//   &#123; title: 'Learn Javascript arrays the functional way',</span></span><br><span class=\"line\"><span class=\"comment\">//     date: 2019-03-16T10:31:00.208Z &#125; ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"fill\"><a href=\"#fill\" class=\"headerlink\" title=\"fill\"></a>fill</h4><p><code>fill</code> 修改或者填充了数组的所有元素，从开始索引到结束索引，使用一个静态值。<code>fill</code> 最有用的作用是使用静态值填充一个新数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  Normally I would have called a function that generates ids and random names but let's not bother with that here.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fakeUser</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    id: <span class=\"string\">'fe38'</span>,</span><br><span class=\"line\">    name: <span class=\"string\">'thomas'</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> posts = <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).fill(fakeUser())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(posts) <span class=\"comment\">// [&#123; id: \"fe38\", name: \"thomas\" &#125;, &#123; id: \"fe38\", name: \"thomas\" &#125;, &#123; id: \"fe38\", name: \"thomas\" &#125;]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"reverse\"><a href=\"#reverse\" class=\"headerlink\" title=\"reverse\"></a>reverse</h4><p>这个方法名在这里显而易见。然而，像留意 sort 那样，reverse 会反转数组的位置。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">numbers.reverse()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numbers) <span class=\"comment\">// [5, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"你可以替换的方法\"><a href=\"#你可以替换的方法\" class=\"headerlink\" title=\"你可以替换的方法\"></a>你可以替换的方法</h3><p>终于，在这个最后的部分，你将发现改变原数组的方法，同时可以很容易替换其中一些。我不是说你应该抛弃这些方法。只是想要你意识到一些数组方法有副作用，并且这里有可选择的其他方法。</p>\n<h4 id=\"push\"><a href=\"#push\" class=\"headerlink\" title=\"push\"></a>push</h4><p>处理数组时这是使用最多的方法。事实上，push 允许你在数组中添加一个或者多个元素。它也通常基于一个旧数组构建一个新数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> todoItems = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> itemsIncremented = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; items.length; i++) &#123;</span><br><span class=\"line\">  itemsIncremented.push(items[i] + <span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(itemsIncremented) <span class=\"comment\">// [2, 3, 4, 5, 6]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> todos = [<span class=\"string\">'Write an article'</span>, <span class=\"string\">'Proofreading'</span>]</span><br><span class=\"line\">todos.push(<span class=\"string\">'Publish the article'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(todos) <span class=\"comment\">// ['Write an article', 'Proofreading', 'Publish the article']</span></span><br></pre></td></tr></table></figure>\n<p>如果你需要像 <code>itemsIncremented</code> 一样构建一个数组，很多方法都是机会，像我们的朋友 <code>map</code>,<code>filter</code>或者<code>reduce</code>。事实上我们可以使用 <code>map</code> 同样做到：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> itemsIncremented = todoItems.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x + <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<p>并且如果你需要使用 <code>push</code>，当你要添加新元素的时候，展开操作符为你撑腰。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> todos = [<span class=\"string\">'Write an article'</span>, <span class=\"string\">'Proofreading'</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([...todos, <span class=\"string\">'Publish the article'</span>]) <span class=\"comment\">// ['Write an article', 'Proofreading', 'Publish the article']</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"splice\"><a href=\"#splice\" class=\"headerlink\" title=\"splice\"></a>splice</h4><p><code>splice</code> 常常用于作为移除某个索引元素的方法。你可以同样使用 <code>filter</code> 做到。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> months = [<span class=\"string\">'January'</span>, <span class=\"string\">'February'</span>, <span class=\"string\">'March'</span>, <span class=\"string\">'April'</span>, <span class=\"string\">' May'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// With splice</span></span><br><span class=\"line\">months.splice(<span class=\"number\">2</span>, <span class=\"number\">1</span>) <span class=\"comment\">// remove one element at index 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(months) <span class=\"comment\">// ['January', 'February', 'April', 'May']</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Without splice</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> monthsFiltered = months.filter(<span class=\"function\">(<span class=\"params\">month, i</span>) =&gt;</span> i !== <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(monthsFiltered) <span class=\"comment\">// ['January', 'February', 'April', 'May']</span></span><br></pre></td></tr></table></figure>\n<p>你可能会想，如果我需要移除多个元素呢？额，使用 <code>slice</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> months = [<span class=\"string\">'January'</span>, <span class=\"string\">'February'</span>, <span class=\"string\">'March'</span>, <span class=\"string\">'April'</span>, <span class=\"string\">' May'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// With splice</span></span><br><span class=\"line\">months.splice(<span class=\"number\">1</span>, <span class=\"number\">3</span>) <span class=\"comment\">// remove thirds element starting at index 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(months) <span class=\"comment\">// ['January', 'May']</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Without splice</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> monthsFiltered = [...months.slice(<span class=\"number\">0</span>, <span class=\"number\">1</span>), ...months.slice(<span class=\"number\">4</span>)]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(monthsFiltered) <span class=\"comment\">// ['January', 'May']</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"shift\"><a href=\"#shift\" class=\"headerlink\" title=\"shift\"></a>shift</h4><p>shift 移除数组的第一个元素然后返回它。从功能上来说，你可以使用 spread/rest 实现。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// With shift</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> firstNumber = numbers.shift()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(firstNumber) <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numbers) <span class=\"comment\">// [2, 3, 4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Without shift</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [firstNumber, ...numbersWithoutOne] = numbers</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(firstNumber) <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numbersWithoutOne) <span class=\"comment\">// [2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"unshift\"><a href=\"#unshift\" class=\"headerlink\" title=\"unshift\"></a>unshift</h4><p>Unshift 允许你在数组开始添加一个或者多个元素。像是 <code>shift</code>， 你可以使用展开操作符做同样的事：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// With unshift</span></span><br><span class=\"line\">numbers.unshift(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numbers) <span class=\"comment\">// [1, 2, 3, 4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Without unshift</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> newNumbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, ...numbers]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newNumbers) <span class=\"comment\">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"太长不看版：\"><a href=\"#太长不看版：\" class=\"headerlink\" title=\"太长不看版：\"></a>太长不看版：</h3><ul>\n<li>无论何时你在数组上操作时，不要使用 <code>for-loop</code> 也不要重复造轮子，你想做的可能已经有一个方法在那里。</li>\n<li>大多数情况，你应该使用 <code>map</code>,<code>filter</code>,<code>reduce</code>和<code>展开操作符</code>。它们对开发者来说是最基础的工具。</li>\n<li>有许多方法需要了解像 <code>slice</code>,<code>some</code>,<code>flatMap</code>等等。记住它们并且在合适的时候使用它们。</li>\n<li>副作用导致不想要的改变。要清楚哪些方法会改变你的原始数组。</li>\n<li><code>slice</code> 和展开操作符是浅拷贝。因此，对象和子数组将会共享同一个引用，小心使用它们。</li>\n<li>“旧”的改变数组的方法可以被新的替换。取决于你想做什么。</li>\n</ul>\n<p>作者：toddmark<br>链接：<a href=\"https://juejin.im/post/5ca5639ef265da30d561f31e\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5ca5639ef265da30d561f31e</a><br>来源：掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n","site":{"data":{}},"excerpt":"<p>首先做一个粗体声明：<strong>循环经常是无用的，并且使得代码很难阅读</strong>。<br>当谈到迭代一个数组的时候，无论你想去查找元素，排序或者任何其他的事，都有可能存在一个数组的方法供你使用。</p>\n<p>然而，尽管它们有用，但其中一些仍然不被人了解。我会努力为你展示一些有用的方法。把这篇文章当做对 JavaScript 数组方法的指引吧。<br>注意： 在开始之前，不得不了解一件事：我比较偏爱函数式编程。所以我倾向于使用的方法不会直接改变原来的数组。这种方法，我避免了副作用。我不是说不应该改变数组，但至少要了解那些方法会改变，那些会有副作用。副作用导致不想要的改变，而不想要的改变带来bugs！<br>了解到这里，我们可以开始正文了。</p>","more":"<h3 id=\"必不可少的\"><a href=\"#必不可少的\" class=\"headerlink\" title=\"必不可少的\"></a>必不可少的</h3><p>当跟数组打交道时，有四件事你应该清楚：<code>map,filter,reduce</code>和 展开操作符。它们富有力量。</p>\n<h4 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h4><p>你可以在很多种情况下使用它。基本地，每次你需要修改数组的元素时，考虑使用 <code>map</code>。</p>\n<p>它接受一个参数：一个方法，在每一个数组元素上调用。然后返回一个<strong>新的数组</strong>，所以没有副作用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> numbersPlusOne = numbers.map(<span class=\"function\"><span class=\"params\">n</span> =&gt;</span> n + <span class=\"number\">1</span>) <span class=\"comment\">// 每个元素 +1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numbersPlusOne) <span class=\"comment\">// [2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n<p>你也能创建一个新数组，用于保留对象的一个特殊属性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> allActivities = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">title</span>: <span class=\"string\">'My activity'</span>, <span class=\"attr\">coordinates</span>: [<span class=\"number\">50.123</span>, <span class=\"number\">3.291</span>] &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">title</span>: <span class=\"string\">'Another activity'</span>, <span class=\"attr\">coordinates</span>: [<span class=\"number\">1.238</span>, <span class=\"number\">4.292</span>] &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// etc.</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> allCoordinates = allActivities.map(<span class=\"function\"><span class=\"params\">activity</span> =&gt;</span> activity.coordinates)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(allCoordinates) <span class=\"comment\">// [[50.123, 3.291], [1.238, 4.292]]</span></span><br></pre></td></tr></table></figure>\n<p>所以，请记住，当你需要去<strong>转换</strong>数组时，考虑使用<strong>map</strong>。</p>\n<h4 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h4><p>这个方法的名字在这里十分准确的：当你想去过滤数组的时候使用它。</p>\n<p>如同<code>map</code>所做，它接受一个函数作为它的唯一参数，在数组的每个元素上调用。这个方法返回一个布尔值：</p>\n<ul>\n<li><code>true</code> 如果你需要在数组中保留元素</li>\n<li><code>false</code> 如果你不想保留它</li>\n</ul>\n<p>接着你会得到一个带有你想要保留的元素的新数组。</p>\n<p>举个例子，你可以在数组中只保留奇数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> oddNumbers = numbers.filter(<span class=\"function\"><span class=\"params\">n</span> =&gt;</span> n % <span class=\"number\">2</span> !== <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(oddNumbers) <span class=\"comment\">// [1, 3, 5]</span></span><br></pre></td></tr></table></figure>\n<p>或者你可以在数组中移除特殊的项：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> participants = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">'a3f47'</span>, <span class=\"attr\">username</span>: <span class=\"string\">'john'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">'fek28'</span>, <span class=\"attr\">username</span>: <span class=\"string\">'mary'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">'n3j44'</span>, <span class=\"attr\">username</span>: <span class=\"string\">'sam'</span> &#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeParticipant</span>(<span class=\"params\">participants, id</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> participants.filter(<span class=\"function\"><span class=\"params\">participant</span> =&gt;</span> participant.id !== id)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(removeParticipant(participants, <span class=\"string\">'a3f47'</span>)) <span class=\"comment\">//  [&#123; id: 'fek28', username: 'mary' &#125;, &#123; id: 'n3j44', username: 'sam' &#125;];</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce\"></a>reduce</h4><p>个人认为是最难理解的方法。但是如果你一旦掌握它，很多疯狂的事情你都可以用它做到。</p>\n<p>基本地， <code>reduce</code> 使用有值的数组然后组合成一个新的值。它接受两个参数，一个回调方法就是我们的 <strong>reducer</strong> 和一个可选的初始化的值（默认是数组的第一个项）。这个 reducer 自己使用四个参数：</p>\n<ul>\n<li>累计：在你的 reducer 中累积的返回值</li>\n<li>当前数组的值</li>\n<li>当前索引</li>\n<li>当前调用 reduce 的数组</li>\n</ul>\n<p>大多数时候，你只需要使用前两个参数：累计值和当前值。</p>\n<p>抛开这些理论。来看看常见的一个 <code>reduce</code> 的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">37</span>, <span class=\"number\">12</span>, <span class=\"number\">28</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> total = numbers.reduce(<span class=\"function\">(<span class=\"params\">total, n</span>) =&gt;</span> total + n)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(total) <span class=\"comment\">// 90</span></span><br></pre></td></tr></table></figure>\n<p>在第一个遍历时，这个累计值，也就是 <code>total</code>，使用了初始化为 37 的值。它返回的值是 37 + <code>n</code> 并且 <code>n</code> 等于 12，因此得到 49.在第二次遍历时，累加值是 49，返回值是 49 + 28 = 77。如此继续直到第四次。</p>\n<p><code>reduce</code> 是很强大的，你可以实际使用它去构建很多数组的方法，比如 <code>map</code> 或者 <code>filter</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"function\">(<span class=\"params\">arr, fn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.reduce(<span class=\"function\">(<span class=\"params\">mappedArr, element</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [...mappedArr, fn(element)]</span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], n =&gt; n + <span class=\"number\">1</span>)) <span class=\"comment\">// [2, 3, 4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> filter = <span class=\"function\">(<span class=\"params\">arr, fn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.reduce(<span class=\"function\">(<span class=\"params\">filteredArr, element</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fn(element) ? [...filteredArr] : [...filteredArr, element]</span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(filter([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], n =&gt; n % <span class=\"number\">2</span> === <span class=\"number\">0</span>)) <span class=\"comment\">// [1, 3, 5]</span></span><br></pre></td></tr></table></figure>\n<p>根本上看，我们给 <code>reduce</code> 一个初始默认值 <code>[]</code>：我们的累计值。对于 <code>map</code>，我们运行一个方法，它的结果是累加到最后，多亏了 <strong>展开操作符</strong>（不必担心，后面讨论）。对于 <code>filter</code>，几乎是相似的，除了我们在元素上运行过滤函数。如果返回 true，我们返回前一个数组，否则在数组最后添加当前元素。</p>\n<p>我们来看一个更高级的例子：深度展开数组，也就是说把 <code>[1, 2, 3, [4, [[[5, [6, 7]]]], 8]]</code> 样的数组转换成 <code>[1, 2, 3, 4, 5, 6, 7, 8]</code> 样的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flatDeep</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.reduce(<span class=\"function\">(<span class=\"params\">flattenArray, element</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.isArray(element)</span><br><span class=\"line\">      ? [...flattenArray, ...flatDeep(element)]</span><br><span class=\"line\">      : [...flattenArray, element]</span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(flatDeep([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, [<span class=\"number\">4</span>, [[[<span class=\"number\">5</span>, [<span class=\"number\">6</span>, <span class=\"number\">7</span>]]]], <span class=\"number\">8</span>]])) <span class=\"comment\">// [1, 2, 3, 4, 5, 6, 7, 8]</span></span><br></pre></td></tr></table></figure>\n<p>这个例子有点像 <code>map</code>，除了我们用到了递归。我不想去解释这个用法，它超出了这篇文章的范围。但是，如果你想了解更多的关于递归的知识，请参考这篇<a href=\"https://guillaumebogard.dev/blog/what-is-recursion/\" target=\"_blank\" rel=\"noopener\">优质的文章</a>。</p>\n<h3 id=\"展开操作（ES2015）\"><a href=\"#展开操作（ES2015）\" class=\"headerlink\" title=\"展开操作（ES2015）\"></a>展开操作（ES2015）</h3><p>我知道这不是一个方法。但是，在处理数组时，使用展开操作可以帮助你做很多事情。事实上，你可以在另一个数组中使用它展开一个数组的值。从这一点来说，你可以复制一个数组，或者连接多个数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> numbersCopy = [...numbers]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numbersCopy) <span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> otherNumbers = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> numbersConcatenated = [...numbers, ...otherNumbers]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numbersConcatenated) <span class=\"comment\">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>\n<p>注意：：展开操作符对原数组做了一次浅拷贝。但什么是 浅拷贝？🤔</p>\n<p>额，浅拷贝是尽可能少的复制原数组。当你有一个数组包含数字，字符串或者布尔值（基本类型），它们是没问题的，这些值被真正复制。然而，对于 <strong>对象和数组</strong> 而言，这是不同的。只有 <strong>对原值的引用</strong> 会被复制！因此，如果你创建一个包含对象的数组的浅拷贝，然后在拷贝的数组中修改了对象，它也会修改原数组的对象，因为它们是 <strong>同一个引用</strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">'foo'</span>, <span class=\"number\">42</span>, &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Thomas'</span> &#125;]</span><br><span class=\"line\"><span class=\"keyword\">let</span> copy = [...arr]</span><br><span class=\"line\"></span><br><span class=\"line\">copy[<span class=\"number\">0</span>] = <span class=\"string\">'bar'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr) <span class=\"comment\">// No mutations: [\"foo\", 42, &#123; name: \"Thomas\" &#125;]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(copy) <span class=\"comment\">// [\"bar\", 42, &#123; name: \"Thomas\" &#125;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">copy[<span class=\"number\">2</span>].name = <span class=\"string\">'Hello'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr) <span class=\"comment\">// /!\\ MUTATION [\"foo\", 42, &#123; name: \"Hello\" &#125;]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(copy) <span class=\"comment\">// [\"bar\", 42, &#123; name: \"Hello\" &#125;]</span></span><br></pre></td></tr></table></figure>\n<p>所以，如果你想去“真正地”靠谱一个包含对象或者数组的是维护组，你可以使用 lodash 的方法 cloneDeep。但是不要觉得必须做这样的事。这里的目标是 意识到事情是如何运作的。</p>\n<h3 id=\"最好了解的\"><a href=\"#最好了解的\" class=\"headerlink\" title=\"最好了解的\"></a>最好了解的</h3><p>下面你看到的方法，是最好了解一下的，同时它们能帮助你解决某些问题，比如在数组中搜索一个元素，取出数组的部分或者更多。</p>\n<p>你曾经尝试用过 <code>indexOf</code> 去查找一个数组中是否存在某个东西吗？这是一个糟糕的方式对吧？幸运的是，<code>includes</code> 为我们做到了这些。给 <code>includes</code> 一个参数，然后会在数组里面搜索它，如果一个元素存在的话。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sports = [<span class=\"string\">'football'</span>, <span class=\"string\">'archery'</span>, <span class=\"string\">'judo'</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> hasFootball = sports.includes(<span class=\"string\">'football'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hasFootball) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat\"></a>concat</h4><p>concat 方法可以用来合并两个或者更多的数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> otherNumbers = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> numbersConcatenated = numbers.concat(otherNumbers)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numbersConcatenated) <span class=\"comment\">// [1, 2, 3, 4, 5, 6]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// You can merge as many arrays as you want</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">concatAll</span>(<span class=\"params\">arr, ...arrays</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.concat(...arrays)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(concatAll([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>], [<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>])) <span class=\"comment\">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach\"></a>forEach</h4><p>无论何时你想为数组的每个元素执行一些事情时，可以使用 forEach。它使用一个函数作为参数，然后给它三个参数：当前值，索引，和当前数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">numbers.forEach(<span class=\"built_in\">console</span>.log)</span><br><span class=\"line\"><span class=\"comment\">// 1 0 [ 1, 2, 3 ]</span></span><br><span class=\"line\"><span class=\"comment\">// 2 1 [ 1, 2, 3 ]</span></span><br><span class=\"line\"><span class=\"comment\">// 3 2 [ 1, 2, 3 ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"indexOf\"><a href=\"#indexOf\" class=\"headerlink\" title=\"indexOf\"></a>indexOf</h4><p>这个用来在给定的数组中找出第一个被发现的元素的索引。 <code>indexOf</code> 也广泛用于检查元素是否在一个数组中。不过老实说，我如今已经不这样使用了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sports = [<span class=\"string\">'football'</span>, <span class=\"string\">'archery'</span>, <span class=\"string\">'judo'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> judoIndex = sports.indexOf(<span class=\"string\">'judo'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(judoIndex) <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h4><p><code>find</code> 方法十分类似于 <code>filter</code> 方法。你必须提供一个函数用于测试数组的元素。然而，<code>find</code> 一旦发现有一个元素通过测试，就立即停止测试其他元素。不用于 <code>filter</code>，<code>filter</code> 将会迭代整个数组，无论情况如何。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> users = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">'af35'</span>, <span class=\"attr\">name</span>: <span class=\"string\">'john'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">'6gbe'</span>, <span class=\"attr\">name</span>: <span class=\"string\">'mary'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">'932j'</span>, <span class=\"attr\">name</span>: <span class=\"string\">'gary'</span> &#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> user = users.find(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> user.id === <span class=\"string\">'6gbe'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(user) <span class=\"comment\">// &#123; id: '6gbe', name: 'mary' &#125;</span></span><br></pre></td></tr></table></figure>\n<p>所以使用 <code>filter</code>，当你想去过滤整个数组时。使用 <code>find</code> 在当你确定在数组中找某个唯一元素的时候。</p>\n<h4 id=\"findIndex\"><a href=\"#findIndex\" class=\"headerlink\" title=\"findIndex\"></a>findIndex</h4><p>这个方法完全跟 find 相同除了它返回第一个发现元素的索引，而不是直接返回元素。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> users = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">'af35'</span>, <span class=\"attr\">name</span>: <span class=\"string\">'john'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">'6gbe'</span>, <span class=\"attr\">name</span>: <span class=\"string\">'mary'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">'932j'</span>, <span class=\"attr\">name</span>: <span class=\"string\">'gary'</span> &#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> user = users.findIndex(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> user.id === <span class=\"string\">'6gbe'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(user) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>你或许认为 <code>findIndex</code> 跟 <code>indexOf</code> 是相同的。额……不完全是。<code>indexOf</code> 的第一个元素是基本值（布尔，数字，字符串，null，undefined或者一个 symbol）而<code>findIndex</code>的第一个元素是一个回调方法。<br>所以当你需要搜索在数组中的一个元素的基本值时，使用 <code>indexOf</code>。如果有更复杂的元素，比如object，使用 <code>findIndex</code>。</p>\n<h4 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"slice\"></a>slice</h4><p>当你需要取出或者复制数组的一部分，可以使用 <code>slice</code>。但是注意，像展开操作符一样， slice 返回部分的浅拷贝！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> copy = numbers.slice()</span><br></pre></td></tr></table></figure>\n<p>我在文章的开始谈到，循环是没有什么用的。来用一个例子说明你如何摆脱它。</p>\n<p>假设你想去从 API 中去除一定量的聊天记录里，然后展示它们中的 5 条。有两种方式实现：一种是循环，另一种是 <code>slice</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 传统方式</span></span><br><span class=\"line\"><span class=\"comment\">// 用循环来决定消息的数量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> nbMessages = messages.length &lt; <span class=\"number\">5</span> ? messages.length : <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> messagesToShow = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nbMessages; i++) &#123;</span><br><span class=\"line\">  messagesToShow.push(posts[i])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 假设 arr 少于 5 个元素</span></span><br><span class=\"line\"><span class=\"comment\">// slice 将会返回原数组的整个浅拷贝</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> messagesToShow = messages.slice(<span class=\"number\">0</span>, <span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"some\"></a>some</h4><p>如果你想测试数组中 至少有一个元素 通过测试，那么可以使用 <code>some</code>。就像是 <code>map</code>,<code>filter</code>,和 <code>find</code>，<code>some</code> 用回调函数作为参数。它返回 <code>ture</code>，如果至少一个元素通过测试，返回 <code>true</code> 否则返回 <code>false</code>。</p>\n<p>当你处理权限问题的时候，可以使用 <code>some</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> users = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    id: <span class=\"string\">'fe34'</span>,</span><br><span class=\"line\">    permissions: [<span class=\"string\">'read'</span>, <span class=\"string\">'write'</span>],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    id: <span class=\"string\">'a198'</span>,</span><br><span class=\"line\">    permissions: [],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    id: <span class=\"string\">'18aa'</span>,</span><br><span class=\"line\">    permissions: [<span class=\"string\">'delete'</span>, <span class=\"string\">'read'</span>, <span class=\"string\">'write'</span>],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> hasDeletePermission = users.some(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span></span><br><span class=\"line\">  user.permissions.includes(<span class=\"string\">'delete'</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hasDeletePermission) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"every\"></a>every</h4><p>类似 <code>some</code>，不同的是 <code>ever</code> 测试了所有的元素是否满足条件（而不是 至少一个）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> users = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    id: <span class=\"string\">'fe34'</span>,</span><br><span class=\"line\">    permissions: [<span class=\"string\">'read'</span>, <span class=\"string\">'write'</span>],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    id: <span class=\"string\">'a198'</span>,</span><br><span class=\"line\">    permissions: [],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    id: <span class=\"string\">'18aa'</span>,</span><br><span class=\"line\">    permissions: [<span class=\"string\">'delete'</span>, <span class=\"string\">'read'</span>, <span class=\"string\">'write'</span>],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> hasAllReadPermission = users.every(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span></span><br><span class=\"line\">  user.permissions.includes(<span class=\"string\">'read'</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hasAllReadPermission) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"flat-ES2019\"><a href=\"#flat-ES2019\" class=\"headerlink\" title=\"flat(ES2019)\"></a>flat(ES2019)</h4><p>这是一个即将到来的招牌方法， 在JavaScript 世界中。大致而言，<code>flat</code> 创建一个新数组，通过组合所有的子数组元素。接受一个参数，数值类型，代表你想展开的深度。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"number\">3</span>, <span class=\"number\">4</span>, [<span class=\"number\">5</span>, [<span class=\"number\">6</span>, <span class=\"number\">7</span>]], [[[[<span class=\"number\">8</span>]]]]]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> numbersflattenOnce = numbers.flat()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numbersflattenOnce) <span class=\"comment\">// [1, 2, 3, 4, Array[2], Array[1]]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> numbersflattenTwice = numbers.flat(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numbersflattenTwice) <span class=\"comment\">// [1, 2, 3, 4, 5, Array[2], Array[1]]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> numbersFlattenInfinity = numbers.flat(<span class=\"literal\">Infinity</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numbersFlattenInfinity) <span class=\"comment\">// [1, 2, 3, 4, 5, 6, 7, 8]</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"flatMap-ES2019\"><a href=\"#flatMap-ES2019\" class=\"headerlink\" title=\"flatMap(ES2019)\"></a>flatMap(ES2019)</h4><p>猜猜这个方法干什么？我打赌你可以做到顾名思义。</p>\n<p>首先在每个元素上运行一个 mapping 方法。接着一次性展示数据。十分简单！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sentences = [</span><br><span class=\"line\">  <span class=\"string\">'This is a sentence'</span>,</span><br><span class=\"line\">  <span class=\"string\">'This is another sentence'</span>,</span><br><span class=\"line\">  <span class=\"string\">\"I can't find any original phrases\"</span>,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> allWords = sentences.flatMap(<span class=\"function\"><span class=\"params\">sentence</span> =&gt;</span> sentence.split(<span class=\"string\">' '</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(allWords) <span class=\"comment\">// [\"This\", \"is\", \"a\", \"sentence\", \"This\", \"is\", \"another\", \"sentence\", \"I\", \"can't\", \"find\", \"any\", \"original\", \"phrases\"]</span></span><br></pre></td></tr></table></figure>\n<p>这个例子中，数组里有一些句子，然而我们想得到所有的单词。不使用 <code>map</code> 去把所有的句子分割成单词然后展开数组，你可以直接使用 <code>flatMap</code>。<br>与 <code>flatMap</code> 无关的，你可以使用 <code>reduce</code> 方法来计算单词的数量（只是展示另一种 <code>reduce</code> 的用法）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> wordsCount = allWords.reduce(<span class=\"function\">(<span class=\"params\">count, word</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  count[word] = count[word] ? count[word] + <span class=\"number\">1</span> : <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> count</span><br><span class=\"line\">&#125;, &#123;&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(wordsCount) <span class=\"comment\">// &#123; This: 2, is: 2, a: 1, sentence: 2, another: 1, I: 1, \"can't\": 1, find: 1, any: 1, original: 1, phrases: 1, &#125;</span></span><br></pre></td></tr></table></figure>\n<p>flatMap 经常用于响应式编程，这里有个<a href=\"https://link.juejin.im/?target=http%3A%2F%2Freactivex.io%2Fdocumentation%2Foperators%2Fflatmap.html\" target=\"_blank\" rel=\"noopener\">例子</a>。</p>\n<h4 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join\"></a>join</h4><p>如果你需要基于数组元素创建字符串，<code>join</code> 正是你所寻找的。它允许通过链接数组元素来创建一个新的字符串，通过提供的分割符分割。</p>\n<p>举个例子，你可以使用 <code>join</code> 一眼展示活动的参与者：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> participants = [<span class=\"string\">'john'</span>, <span class=\"string\">'mary'</span>, <span class=\"string\">'gary'</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> participantsFormatted = participants.join(<span class=\"string\">', '</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(participantsFormatted) <span class=\"comment\">// john, mary, gary</span></span><br></pre></td></tr></table></figure>\n<p>下面的例子更真实，在于你想先过滤参与者然后得到他们的名字。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> potentialParticipants = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">'k38i'</span>, <span class=\"attr\">name</span>: <span class=\"string\">'john'</span>, <span class=\"attr\">age</span>: <span class=\"number\">17</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">'baf3'</span>, <span class=\"attr\">name</span>: <span class=\"string\">'mary'</span>, <span class=\"attr\">age</span>: <span class=\"number\">13</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">'a111'</span>, <span class=\"attr\">name</span>: <span class=\"string\">'gary'</span>, <span class=\"attr\">age</span>: <span class=\"number\">24</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">'fx34'</span>, <span class=\"attr\">name</span>: <span class=\"string\">'emma'</span>, <span class=\"attr\">age</span>: <span class=\"number\">34</span> &#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> participantsFormatted = potentialParticipants</span><br><span class=\"line\">  .filter(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> user.age &gt; <span class=\"number\">18</span>)</span><br><span class=\"line\">  .map(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> user.name)</span><br><span class=\"line\">  .join(<span class=\"string\">', '</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(participantsFormatted) <span class=\"comment\">// gary, emma</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"from\"><a href=\"#from\" class=\"headerlink\" title=\"from\"></a>from</h4><p>这是一个静态方法，从类数组中创建新的数组，或者像例子中的字符串一样遍历对象。当处理 dom 时，这个方法十分有用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> nodes = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.todo-item'</span>) <span class=\"comment\">// 这是一个 nodeList 实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> todoItems = <span class=\"built_in\">Array</span>.from(nodes) <span class=\"comment\">// 现在你能使用 map filter 等等，就像在数组中那样!</span></span><br></pre></td></tr></table></figure>\n<p>你曾经见到过我们使用 <code>Array</code> 代替数组实例吗？这就是问什么 <code>from</code> 被称作静态方法。</p>\n<p>接着可以愉快处理这些节点，比如用 <code>forEach</code> 在每个节点上注册事件监听：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">todoItems.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">  item.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">`You clicked on <span class=\"subst\">$&#123;item.innerHTML&#125;</span>`</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"最好了解突变\"><a href=\"#最好了解突变\" class=\"headerlink\" title=\"最好了解突变\"></a>最好了解突变</h3><p>是的，sort 修改了原数组。事实上，在这里进行了数组元素排序。默认的排序方法把所有的元素转换成字符串，然后按照字母表排序它们。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> names = [<span class=\"string\">'john'</span>, <span class=\"string\">'mary'</span>, <span class=\"string\">'gary'</span>, <span class=\"string\">'anna'</span>]</span><br><span class=\"line\">names.sort()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(names) <span class=\"comment\">// ['anna', 'gary', 'john', 'mary']</span></span><br></pre></td></tr></table></figure>\n<p>如果你有 Python 背景的话，要小心了。使用 sort 在数字数组中不会得到你想要的结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">23</span>, <span class=\"number\">12</span>, <span class=\"number\">17</span>, <span class=\"number\">187</span>, <span class=\"number\">3</span>, <span class=\"number\">90</span>]</span><br><span class=\"line\">numbers.sort()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numbers) <span class=\"comment\">// [12, 17, 187, 23, 3, 90] 🤔</span></span><br></pre></td></tr></table></figure>\n<p>那么如何对一个数组排序？额，<code>sort</code> 接受一个函数，一个比较函数。这个函数接受两个参数：第一个元素（我们称呼为 <code>a</code>）和第二个元素作比较（<code>b</code>）。这两个元素之间的比较需要返回一个数字。</p>\n<ul>\n<li>如果为负，<code>a</code> 排序在 <code>b</code> 之前。</li>\n<li>如果为正，<code>b</code> 排序在 <code>a</code> 之前。</li>\n<li>如果是0，没有任何改变。</li>\n</ul>\n<p>那么你可以使用下面的方式排序数组：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">23</span>, <span class=\"number\">12</span>, <span class=\"number\">17</span>, <span class=\"number\">187</span>, <span class=\"number\">3</span>, <span class=\"number\">90</span>]</span><br><span class=\"line\">numbers.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numbers) <span class=\"comment\">// [3, 12, 17, 23, 90, 187]</span></span><br></pre></td></tr></table></figure>\n<p>或者通过最近时间排序：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> posts = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    title: <span class=\"string\">'Create a Discord bot under 15 minutes'</span>,</span><br><span class=\"line\">    date: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2018</span>, <span class=\"number\">11</span>, <span class=\"number\">26</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">title</span>: <span class=\"string\">'How to get better at writing CSS'</span>, <span class=\"attr\">date</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2018</span>, <span class=\"number\">06</span>, <span class=\"number\">17</span>) &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">title</span>: <span class=\"string\">'JavaScript arrays'</span>, <span class=\"attr\">date</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() &#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\">posts.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a.date - b.date) <span class=\"comment\">// Substracting two dates returns the difference in millisecond between them</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(posts)</span><br><span class=\"line\"><span class=\"comment\">// [ &#123; title: 'How to get better at writing CSS',</span></span><br><span class=\"line\"><span class=\"comment\">//     date: 2018-07-17T00:00:00.000Z &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//   &#123; title: 'Create a Discord bot under 15 minutes',</span></span><br><span class=\"line\"><span class=\"comment\">//     date: 2018-12-26T00:00:00.000Z &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//   &#123; title: 'Learn Javascript arrays the functional way',</span></span><br><span class=\"line\"><span class=\"comment\">//     date: 2019-03-16T10:31:00.208Z &#125; ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"fill\"><a href=\"#fill\" class=\"headerlink\" title=\"fill\"></a>fill</h4><p><code>fill</code> 修改或者填充了数组的所有元素，从开始索引到结束索引，使用一个静态值。<code>fill</code> 最有用的作用是使用静态值填充一个新数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  Normally I would have called a function that generates ids and random names but let's not bother with that here.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fakeUser</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    id: <span class=\"string\">'fe38'</span>,</span><br><span class=\"line\">    name: <span class=\"string\">'thomas'</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> posts = <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).fill(fakeUser())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(posts) <span class=\"comment\">// [&#123; id: \"fe38\", name: \"thomas\" &#125;, &#123; id: \"fe38\", name: \"thomas\" &#125;, &#123; id: \"fe38\", name: \"thomas\" &#125;]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"reverse\"><a href=\"#reverse\" class=\"headerlink\" title=\"reverse\"></a>reverse</h4><p>这个方法名在这里显而易见。然而，像留意 sort 那样，reverse 会反转数组的位置。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">numbers.reverse()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numbers) <span class=\"comment\">// [5, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"你可以替换的方法\"><a href=\"#你可以替换的方法\" class=\"headerlink\" title=\"你可以替换的方法\"></a>你可以替换的方法</h3><p>终于，在这个最后的部分，你将发现改变原数组的方法，同时可以很容易替换其中一些。我不是说你应该抛弃这些方法。只是想要你意识到一些数组方法有副作用，并且这里有可选择的其他方法。</p>\n<h4 id=\"push\"><a href=\"#push\" class=\"headerlink\" title=\"push\"></a>push</h4><p>处理数组时这是使用最多的方法。事实上，push 允许你在数组中添加一个或者多个元素。它也通常基于一个旧数组构建一个新数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> todoItems = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> itemsIncremented = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; items.length; i++) &#123;</span><br><span class=\"line\">  itemsIncremented.push(items[i] + <span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(itemsIncremented) <span class=\"comment\">// [2, 3, 4, 5, 6]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> todos = [<span class=\"string\">'Write an article'</span>, <span class=\"string\">'Proofreading'</span>]</span><br><span class=\"line\">todos.push(<span class=\"string\">'Publish the article'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(todos) <span class=\"comment\">// ['Write an article', 'Proofreading', 'Publish the article']</span></span><br></pre></td></tr></table></figure>\n<p>如果你需要像 <code>itemsIncremented</code> 一样构建一个数组，很多方法都是机会，像我们的朋友 <code>map</code>,<code>filter</code>或者<code>reduce</code>。事实上我们可以使用 <code>map</code> 同样做到：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> itemsIncremented = todoItems.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x + <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<p>并且如果你需要使用 <code>push</code>，当你要添加新元素的时候，展开操作符为你撑腰。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> todos = [<span class=\"string\">'Write an article'</span>, <span class=\"string\">'Proofreading'</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([...todos, <span class=\"string\">'Publish the article'</span>]) <span class=\"comment\">// ['Write an article', 'Proofreading', 'Publish the article']</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"splice\"><a href=\"#splice\" class=\"headerlink\" title=\"splice\"></a>splice</h4><p><code>splice</code> 常常用于作为移除某个索引元素的方法。你可以同样使用 <code>filter</code> 做到。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> months = [<span class=\"string\">'January'</span>, <span class=\"string\">'February'</span>, <span class=\"string\">'March'</span>, <span class=\"string\">'April'</span>, <span class=\"string\">' May'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// With splice</span></span><br><span class=\"line\">months.splice(<span class=\"number\">2</span>, <span class=\"number\">1</span>) <span class=\"comment\">// remove one element at index 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(months) <span class=\"comment\">// ['January', 'February', 'April', 'May']</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Without splice</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> monthsFiltered = months.filter(<span class=\"function\">(<span class=\"params\">month, i</span>) =&gt;</span> i !== <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(monthsFiltered) <span class=\"comment\">// ['January', 'February', 'April', 'May']</span></span><br></pre></td></tr></table></figure>\n<p>你可能会想，如果我需要移除多个元素呢？额，使用 <code>slice</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> months = [<span class=\"string\">'January'</span>, <span class=\"string\">'February'</span>, <span class=\"string\">'March'</span>, <span class=\"string\">'April'</span>, <span class=\"string\">' May'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// With splice</span></span><br><span class=\"line\">months.splice(<span class=\"number\">1</span>, <span class=\"number\">3</span>) <span class=\"comment\">// remove thirds element starting at index 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(months) <span class=\"comment\">// ['January', 'May']</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Without splice</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> monthsFiltered = [...months.slice(<span class=\"number\">0</span>, <span class=\"number\">1</span>), ...months.slice(<span class=\"number\">4</span>)]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(monthsFiltered) <span class=\"comment\">// ['January', 'May']</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"shift\"><a href=\"#shift\" class=\"headerlink\" title=\"shift\"></a>shift</h4><p>shift 移除数组的第一个元素然后返回它。从功能上来说，你可以使用 spread/rest 实现。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// With shift</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> firstNumber = numbers.shift()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(firstNumber) <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numbers) <span class=\"comment\">// [2, 3, 4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Without shift</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [firstNumber, ...numbersWithoutOne] = numbers</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(firstNumber) <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numbersWithoutOne) <span class=\"comment\">// [2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"unshift\"><a href=\"#unshift\" class=\"headerlink\" title=\"unshift\"></a>unshift</h4><p>Unshift 允许你在数组开始添加一个或者多个元素。像是 <code>shift</code>， 你可以使用展开操作符做同样的事：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// With unshift</span></span><br><span class=\"line\">numbers.unshift(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numbers) <span class=\"comment\">// [1, 2, 3, 4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Without unshift</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> newNumbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, ...numbers]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newNumbers) <span class=\"comment\">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"太长不看版：\"><a href=\"#太长不看版：\" class=\"headerlink\" title=\"太长不看版：\"></a>太长不看版：</h3><ul>\n<li>无论何时你在数组上操作时，不要使用 <code>for-loop</code> 也不要重复造轮子，你想做的可能已经有一个方法在那里。</li>\n<li>大多数情况，你应该使用 <code>map</code>,<code>filter</code>,<code>reduce</code>和<code>展开操作符</code>。它们对开发者来说是最基础的工具。</li>\n<li>有许多方法需要了解像 <code>slice</code>,<code>some</code>,<code>flatMap</code>等等。记住它们并且在合适的时候使用它们。</li>\n<li>副作用导致不想要的改变。要清楚哪些方法会改变你的原始数组。</li>\n<li><code>slice</code> 和展开操作符是浅拷贝。因此，对象和子数组将会共享同一个引用，小心使用它们。</li>\n<li>“旧”的改变数组的方法可以被新的替换。取决于你想做什么。</li>\n</ul>\n<p>作者：toddmark<br>链接：<a href=\"https://juejin.im/post/5ca5639ef265da30d561f31e\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5ca5639ef265da30d561f31e</a><br>来源：掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>"},{"title":"二分查找","originContent":"","toc":false,"date":"2019-12-17T15:09:08.000Z","_content":"\n```javascript\n/**\n * 二分查找，也称为折半查找，是指在有序的数组里找出指定的值，返回该值在数组中的索引。查找步骤如下：\n *（1）从有序数组的最中间元素开始查找，如果该元素正好是指定查找的值，则查找过程结束。否则进行下一步;\n *（2）如果指定要查找的元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半区域查找，然后重复第一步的操作;\n *（3）重复以上过程，直到找到目标元素的索引，查找成功;或者直到子数组为空，查找失败。\n *\n * 优点是比较次数少，查找速度快，平均性能好；其缺点是要求待查表为有序表，且插入删除困难。因此，折半查找方法适用于不经常变动而查找频繁的有序列表。\n */\nexport function binary_search(arr, target) {\n  var low = 0\n  var high = arr.length - 1\n  while (low <= high) {\n    var mid = parseInt((high + low) / 2)\n    // console.log(mid + 'h' + high + 'l' + low)\n    if (target === arr[mid]) {\n      return mid\n    } else if (target > arr[mid]) {\n      low = mid + 1\n    } else {\n      high = mid - 1\n    }\n  }\n  return -1\n}\n\n/**\n * 递归的方式实现二分查找\n * @param arr\n * @param low\n * @param high\n * @param target\n * @returns {number}\n */\nexport function binary_search_dg(arr, low, high, target) {\n  if (low > high) {\n    return -1\n  }\n  var mid = parseInt((high + low) / 2)\n  if (arr[mid] === target) {\n    return mid\n  } else {\n    if (target > arr[mid]) {\n      low = mid + 1\n    } else {\n      high = mid - 1\n    }\n    return binary_search_dg(arr, low, high, target)\n  }\n}\n```\n","source":"_posts/二分查找.md","raw":"---\ntitle: 二分查找\ntags:\n  - 知识点备忘\noriginContent: ''\ncategories:\n  - Web开发\ntoc: false\ndate: 2019-12-17 23:09:08\n---\n\n```javascript\n/**\n * 二分查找，也称为折半查找，是指在有序的数组里找出指定的值，返回该值在数组中的索引。查找步骤如下：\n *（1）从有序数组的最中间元素开始查找，如果该元素正好是指定查找的值，则查找过程结束。否则进行下一步;\n *（2）如果指定要查找的元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半区域查找，然后重复第一步的操作;\n *（3）重复以上过程，直到找到目标元素的索引，查找成功;或者直到子数组为空，查找失败。\n *\n * 优点是比较次数少，查找速度快，平均性能好；其缺点是要求待查表为有序表，且插入删除困难。因此，折半查找方法适用于不经常变动而查找频繁的有序列表。\n */\nexport function binary_search(arr, target) {\n  var low = 0\n  var high = arr.length - 1\n  while (low <= high) {\n    var mid = parseInt((high + low) / 2)\n    // console.log(mid + 'h' + high + 'l' + low)\n    if (target === arr[mid]) {\n      return mid\n    } else if (target > arr[mid]) {\n      low = mid + 1\n    } else {\n      high = mid - 1\n    }\n  }\n  return -1\n}\n\n/**\n * 递归的方式实现二分查找\n * @param arr\n * @param low\n * @param high\n * @param target\n * @returns {number}\n */\nexport function binary_search_dg(arr, low, high, target) {\n  if (low > high) {\n    return -1\n  }\n  var mid = parseInt((high + low) / 2)\n  if (arr[mid] === target) {\n    return mid\n  } else {\n    if (target > arr[mid]) {\n      low = mid + 1\n    } else {\n      high = mid - 1\n    }\n    return binary_search_dg(arr, low, high, target)\n  }\n}\n```\n","slug":"二分查找","published":1,"updated":"2019-12-17T15:09:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo0d0074h5s67t7py0bn","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 二分查找，也称为折半查找，是指在有序的数组里找出指定的值，返回该值在数组中的索引。查找步骤如下：</span></span><br><span class=\"line\"><span class=\"comment\"> *（1）从有序数组的最中间元素开始查找，如果该元素正好是指定查找的值，则查找过程结束。否则进行下一步;</span></span><br><span class=\"line\"><span class=\"comment\"> *（2）如果指定要查找的元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半区域查找，然后重复第一步的操作;</span></span><br><span class=\"line\"><span class=\"comment\"> *（3）重复以上过程，直到找到目标元素的索引，查找成功;或者直到子数组为空，查找失败。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 优点是比较次数少，查找速度快，平均性能好；其缺点是要求待查表为有序表，且插入删除困难。因此，折半查找方法适用于不经常变动而查找频繁的有序列表。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binary_search</span>(<span class=\"params\">arr, target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> low = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> high = arr.length - <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (low &lt;= high) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> mid = <span class=\"built_in\">parseInt</span>((high + low) / <span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"comment\">// console.log(mid + 'h' + high + 'l' + low)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target === arr[mid]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> mid</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &gt; arr[mid]) &#123;</span><br><span class=\"line\">      low = mid + <span class=\"number\">1</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      high = mid - <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 递归的方式实现二分查找</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"variable\">arr</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"variable\">low</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"variable\">high</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"variable\">target</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binary_search_dg</span>(<span class=\"params\">arr, low, high, target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (low &gt; high) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> mid = <span class=\"built_in\">parseInt</span>((high + low) / <span class=\"number\">2</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (arr[mid] === target) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mid</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target &gt; arr[mid]) &#123;</span><br><span class=\"line\">      low = mid + <span class=\"number\">1</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      high = mid - <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> binary_search_dg(arr, low, high, target)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 二分查找，也称为折半查找，是指在有序的数组里找出指定的值，返回该值在数组中的索引。查找步骤如下：</span></span><br><span class=\"line\"><span class=\"comment\"> *（1）从有序数组的最中间元素开始查找，如果该元素正好是指定查找的值，则查找过程结束。否则进行下一步;</span></span><br><span class=\"line\"><span class=\"comment\"> *（2）如果指定要查找的元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半区域查找，然后重复第一步的操作;</span></span><br><span class=\"line\"><span class=\"comment\"> *（3）重复以上过程，直到找到目标元素的索引，查找成功;或者直到子数组为空，查找失败。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 优点是比较次数少，查找速度快，平均性能好；其缺点是要求待查表为有序表，且插入删除困难。因此，折半查找方法适用于不经常变动而查找频繁的有序列表。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binary_search</span>(<span class=\"params\">arr, target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> low = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> high = arr.length - <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (low &lt;= high) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> mid = <span class=\"built_in\">parseInt</span>((high + low) / <span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"comment\">// console.log(mid + 'h' + high + 'l' + low)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target === arr[mid]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> mid</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &gt; arr[mid]) &#123;</span><br><span class=\"line\">      low = mid + <span class=\"number\">1</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      high = mid - <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 递归的方式实现二分查找</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"variable\">arr</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"variable\">low</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"variable\">high</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"variable\">target</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binary_search_dg</span>(<span class=\"params\">arr, low, high, target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (low &gt; high) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> mid = <span class=\"built_in\">parseInt</span>((high + low) / <span class=\"number\">2</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (arr[mid] === target) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mid</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target &gt; arr[mid]) &#123;</span><br><span class=\"line\">      low = mid + <span class=\"number\">1</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      high = mid - <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> binary_search_dg(arr, low, high, target)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"七牛云存储文件夹上传webpack使用cdn资源地址","toc":false,"date":"2019-06-19T09:31:59.000Z","_content":"\n七牛云存储默认只能单个文件上传，这个用起来很不方便，有时候我的webpack打包后的项目下的dist资源要放在cdn上，这时候需要目录结构都保存，这时候就需要一个客户端能够支持这种上传方法，可以自己写服务，也可以用现成的，在github上找了一个开源客户端，mac、windows都可以用，使用electron、electron-vue开发，如果有问题也可以自己调整下打个包。\n\n<!-- more -->\n\n项目地址：[https://github.com/willnewii/qiniuClient](https://github.com/willnewii/qiniuClient)\n\n打开配置上ak、sk（在七牛个人中心下的密钥管理中）就可以用了，支持文件夹上传。\n\n然后我们看下webpack项目的配置方法：\n\n![image.png](http://blogimage.houjiyi.com/Ft-02F6XdXjjLfsd2WBVVn0augxn)\n\n记录一下，兴许以后会用到，这里有个扩展的地方：既然上传工具支持目录上传，完全可以看下他的上传原理，然后包成自己的服务，这个思路是完全可行的，当后边如果遇到需要自己上传图片的需求的时候，这个东西是可用的。\n","source":"_posts/七牛云存储文件夹上传webpack使用cdn资源地址.md","raw":"---\ntitle: 七牛云存储文件夹上传webpack使用cdn资源地址\ntags:\n  - javascript\ncategories:\n  - Web开发\ntoc: false\ndate: 2019-06-19 17:31:59\n---\n\n七牛云存储默认只能单个文件上传，这个用起来很不方便，有时候我的webpack打包后的项目下的dist资源要放在cdn上，这时候需要目录结构都保存，这时候就需要一个客户端能够支持这种上传方法，可以自己写服务，也可以用现成的，在github上找了一个开源客户端，mac、windows都可以用，使用electron、electron-vue开发，如果有问题也可以自己调整下打个包。\n\n<!-- more -->\n\n项目地址：[https://github.com/willnewii/qiniuClient](https://github.com/willnewii/qiniuClient)\n\n打开配置上ak、sk（在七牛个人中心下的密钥管理中）就可以用了，支持文件夹上传。\n\n然后我们看下webpack项目的配置方法：\n\n![image.png](http://blogimage.houjiyi.com/Ft-02F6XdXjjLfsd2WBVVn0augxn)\n\n记录一下，兴许以后会用到，这里有个扩展的地方：既然上传工具支持目录上传，完全可以看下他的上传原理，然后包成自己的服务，这个思路是完全可行的，当后边如果遇到需要自己上传图片的需求的时候，这个东西是可用的。\n","slug":"七牛云存储文件夹上传webpack使用cdn资源地址","published":1,"updated":"2019-11-07T02:24:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo0f0078h5s6gosnmq1k","content":"<p>七牛云存储默认只能单个文件上传，这个用起来很不方便，有时候我的webpack打包后的项目下的dist资源要放在cdn上，这时候需要目录结构都保存，这时候就需要一个客户端能够支持这种上传方法，可以自己写服务，也可以用现成的，在github上找了一个开源客户端，mac、windows都可以用，使用electron、electron-vue开发，如果有问题也可以自己调整下打个包。</p>\n<a id=\"more\"></a>\n<p>项目地址：<a href=\"https://github.com/willnewii/qiniuClient\" target=\"_blank\" rel=\"noopener\">https://github.com/willnewii/qiniuClient</a></p>\n<p>打开配置上ak、sk（在七牛个人中心下的密钥管理中）就可以用了，支持文件夹上传。</p>\n<p>然后我们看下webpack项目的配置方法：</p>\n<p><img src=\"http://blogimage.houjiyi.com/Ft-02F6XdXjjLfsd2WBVVn0augxn\" alt=\"image.png\"></p>\n<p>记录一下，兴许以后会用到，这里有个扩展的地方：既然上传工具支持目录上传，完全可以看下他的上传原理，然后包成自己的服务，这个思路是完全可行的，当后边如果遇到需要自己上传图片的需求的时候，这个东西是可用的。</p>\n","site":{"data":{}},"excerpt":"<p>七牛云存储默认只能单个文件上传，这个用起来很不方便，有时候我的webpack打包后的项目下的dist资源要放在cdn上，这时候需要目录结构都保存，这时候就需要一个客户端能够支持这种上传方法，可以自己写服务，也可以用现成的，在github上找了一个开源客户端，mac、windows都可以用，使用electron、electron-vue开发，如果有问题也可以自己调整下打个包。</p>","more":"<p>项目地址：<a href=\"https://github.com/willnewii/qiniuClient\" target=\"_blank\" rel=\"noopener\">https://github.com/willnewii/qiniuClient</a></p>\n<p>打开配置上ak、sk（在七牛个人中心下的密钥管理中）就可以用了，支持文件夹上传。</p>\n<p>然后我们看下webpack项目的配置方法：</p>\n<p><img src=\"http://blogimage.houjiyi.com/Ft-02F6XdXjjLfsd2WBVVn0augxn\" alt=\"image.png\"></p>\n<p>记录一下，兴许以后会用到，这里有个扩展的地方：既然上传工具支持目录上传，完全可以看下他的上传原理，然后包成自己的服务，这个思路是完全可行的，当后边如果遇到需要自己上传图片的需求的时候，这个东西是可用的。</p>"},{"title":"什么叫ocpm、ocpc、ocpa？","toc":false,"date":"2019-03-22T10:20:29.000Z","_content":"\n大家在做头条、百度信息流广告投放的时候经常看到出价策略有ocpm、ocpc、ocpa，这些到底是什么呢？和cpm、cpc、cpa有什么不同？今天woshizmt给大家科普一下这些概念。\n\n所有的出价策略前加的单词“o”都是英文单词optimized的首字母，意思为“优化”，所以所有加o的广告都可叫做，按目标转化出价，比如OCPC还是按照cpc收费，但是按照广告主的效果额外做了优化，这个优化实现方式就是让广告主告诉系统你的优化目标具体是什么，你愿意为这个优化目标每一次付出多少钱。现在的今日头条广告、腾讯社交广告、百度信息流都已经具备这样的产品。\n\n<!-- more -->\n\n优化师在投放中都有这些问题：广告投放过程出价难、冲量难、转化成本不可控；数据该如何分析？看到了数据却看不出问题，全凭人工测试优化，累到吐血+常常跑偏…老板要转化还要控制成本！你是否也在投放中遇到过上述的困境，选什么定向又精准又有量？\n![11P513103A24b.jpg](http://pok5gaadc.bkt.clouddn.com/FlNEy6FQFrg95tIVk_DLOhEigNri)\n一、什么叫ocpm？\nOptimized Cost per Mille的缩写，即优化千次展现出价，本质还是按照cpm付费。采用更精准的点击率和转化率预估机制，将广告展现给最容易产生转化的用户，在获取流量的同时，提高转化率、降低转化成本，跑量提速更快。\n\n二、什么叫ocpc？\nOptimized Cost per Click的缩写，即优化点击付费，本质还是按照cpc付费。采用更科学的转化率预估机制的准确性，可帮助广告主在获取更多优质流 量的同时提高转化完成率。系统会在广告主出价基础上，基于多维度、实时反馈及历史积累的海量数据，并根据预估的转化率以及竞争环境智能化的动态调整出价，进而优化广告排序，帮助广告主竞得最适合的流量，并降低转化成本。\n扩展阅读：\n百度信息流oCPC出价原理及投放原理\n今日头条oCPC整体的优化方法大全\n\n三、什么叫ocpa？\nOptimized Cost per Action的缩写，即优化行为出价，本质还是按照cpa付费。当广告主在广告投放流程中选定特定的优化目标（例如：移动应用的激活,网站的下单），提供愿意为此投放目标而支付的平均价格，并及时、准确回传效果数据，我们将借助转化预估模型，实时预估每一次点击对广告主的转化价值，自动出价，最终按照点击扣费；同时，我们的转化预估模型会根据广告主的广告转化数据不断自动优化。\n扩展阅读：\n腾讯社交广告oCPA出价原理及投放方法\n公众号底部竞价广告支持智能优化（oCPA）等能力升级\n\n来源：http://www.woshizmt.cn/dsp/jrtt/698.html\n","source":"_posts/什么叫ocpm、ocpc、ocpa？.md","raw":"---\ntitle: 什么叫ocpm、ocpc、ocpa？\ntags:\n  - 广告\ncategories:\n  - 项目总结\ntoc: false\ndate: 2019-03-22 18:20:29\n---\n\n大家在做头条、百度信息流广告投放的时候经常看到出价策略有ocpm、ocpc、ocpa，这些到底是什么呢？和cpm、cpc、cpa有什么不同？今天woshizmt给大家科普一下这些概念。\n\n所有的出价策略前加的单词“o”都是英文单词optimized的首字母，意思为“优化”，所以所有加o的广告都可叫做，按目标转化出价，比如OCPC还是按照cpc收费，但是按照广告主的效果额外做了优化，这个优化实现方式就是让广告主告诉系统你的优化目标具体是什么，你愿意为这个优化目标每一次付出多少钱。现在的今日头条广告、腾讯社交广告、百度信息流都已经具备这样的产品。\n\n<!-- more -->\n\n优化师在投放中都有这些问题：广告投放过程出价难、冲量难、转化成本不可控；数据该如何分析？看到了数据却看不出问题，全凭人工测试优化，累到吐血+常常跑偏…老板要转化还要控制成本！你是否也在投放中遇到过上述的困境，选什么定向又精准又有量？\n![11P513103A24b.jpg](http://pok5gaadc.bkt.clouddn.com/FlNEy6FQFrg95tIVk_DLOhEigNri)\n一、什么叫ocpm？\nOptimized Cost per Mille的缩写，即优化千次展现出价，本质还是按照cpm付费。采用更精准的点击率和转化率预估机制，将广告展现给最容易产生转化的用户，在获取流量的同时，提高转化率、降低转化成本，跑量提速更快。\n\n二、什么叫ocpc？\nOptimized Cost per Click的缩写，即优化点击付费，本质还是按照cpc付费。采用更科学的转化率预估机制的准确性，可帮助广告主在获取更多优质流 量的同时提高转化完成率。系统会在广告主出价基础上，基于多维度、实时反馈及历史积累的海量数据，并根据预估的转化率以及竞争环境智能化的动态调整出价，进而优化广告排序，帮助广告主竞得最适合的流量，并降低转化成本。\n扩展阅读：\n百度信息流oCPC出价原理及投放原理\n今日头条oCPC整体的优化方法大全\n\n三、什么叫ocpa？\nOptimized Cost per Action的缩写，即优化行为出价，本质还是按照cpa付费。当广告主在广告投放流程中选定特定的优化目标（例如：移动应用的激活,网站的下单），提供愿意为此投放目标而支付的平均价格，并及时、准确回传效果数据，我们将借助转化预估模型，实时预估每一次点击对广告主的转化价值，自动出价，最终按照点击扣费；同时，我们的转化预估模型会根据广告主的广告转化数据不断自动优化。\n扩展阅读：\n腾讯社交广告oCPA出价原理及投放方法\n公众号底部竞价广告支持智能优化（oCPA）等能力升级\n\n来源：http://www.woshizmt.cn/dsp/jrtt/698.html\n","slug":"什么叫ocpm、ocpc、ocpa？","published":1,"updated":"2019-11-07T02:08:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo0h007ch5s6ord8zt77","content":"<p>大家在做头条、百度信息流广告投放的时候经常看到出价策略有ocpm、ocpc、ocpa，这些到底是什么呢？和cpm、cpc、cpa有什么不同？今天woshizmt给大家科普一下这些概念。</p>\n<p>所有的出价策略前加的单词“o”都是英文单词optimized的首字母，意思为“优化”，所以所有加o的广告都可叫做，按目标转化出价，比如OCPC还是按照cpc收费，但是按照广告主的效果额外做了优化，这个优化实现方式就是让广告主告诉系统你的优化目标具体是什么，你愿意为这个优化目标每一次付出多少钱。现在的今日头条广告、腾讯社交广告、百度信息流都已经具备这样的产品。</p>\n<a id=\"more\"></a>\n<p>优化师在投放中都有这些问题：广告投放过程出价难、冲量难、转化成本不可控；数据该如何分析？看到了数据却看不出问题，全凭人工测试优化，累到吐血+常常跑偏…老板要转化还要控制成本！你是否也在投放中遇到过上述的困境，选什么定向又精准又有量？<br><img src=\"http://pok5gaadc.bkt.clouddn.com/FlNEy6FQFrg95tIVk_DLOhEigNri\" alt=\"11P513103A24b.jpg\"><br>一、什么叫ocpm？<br>Optimized Cost per Mille的缩写，即优化千次展现出价，本质还是按照cpm付费。采用更精准的点击率和转化率预估机制，将广告展现给最容易产生转化的用户，在获取流量的同时，提高转化率、降低转化成本，跑量提速更快。</p>\n<p>二、什么叫ocpc？<br>Optimized Cost per Click的缩写，即优化点击付费，本质还是按照cpc付费。采用更科学的转化率预估机制的准确性，可帮助广告主在获取更多优质流 量的同时提高转化完成率。系统会在广告主出价基础上，基于多维度、实时反馈及历史积累的海量数据，并根据预估的转化率以及竞争环境智能化的动态调整出价，进而优化广告排序，帮助广告主竞得最适合的流量，并降低转化成本。<br>扩展阅读：<br>百度信息流oCPC出价原理及投放原理<br>今日头条oCPC整体的优化方法大全</p>\n<p>三、什么叫ocpa？<br>Optimized Cost per Action的缩写，即优化行为出价，本质还是按照cpa付费。当广告主在广告投放流程中选定特定的优化目标（例如：移动应用的激活,网站的下单），提供愿意为此投放目标而支付的平均价格，并及时、准确回传效果数据，我们将借助转化预估模型，实时预估每一次点击对广告主的转化价值，自动出价，最终按照点击扣费；同时，我们的转化预估模型会根据广告主的广告转化数据不断自动优化。<br>扩展阅读：<br>腾讯社交广告oCPA出价原理及投放方法<br>公众号底部竞价广告支持智能优化（oCPA）等能力升级</p>\n<p>来源：<a href=\"http://www.woshizmt.cn/dsp/jrtt/698.html\" target=\"_blank\" rel=\"noopener\">http://www.woshizmt.cn/dsp/jrtt/698.html</a></p>\n","site":{"data":{}},"excerpt":"<p>大家在做头条、百度信息流广告投放的时候经常看到出价策略有ocpm、ocpc、ocpa，这些到底是什么呢？和cpm、cpc、cpa有什么不同？今天woshizmt给大家科普一下这些概念。</p>\n<p>所有的出价策略前加的单词“o”都是英文单词optimized的首字母，意思为“优化”，所以所有加o的广告都可叫做，按目标转化出价，比如OCPC还是按照cpc收费，但是按照广告主的效果额外做了优化，这个优化实现方式就是让广告主告诉系统你的优化目标具体是什么，你愿意为这个优化目标每一次付出多少钱。现在的今日头条广告、腾讯社交广告、百度信息流都已经具备这样的产品。</p>","more":"<p>优化师在投放中都有这些问题：广告投放过程出价难、冲量难、转化成本不可控；数据该如何分析？看到了数据却看不出问题，全凭人工测试优化，累到吐血+常常跑偏…老板要转化还要控制成本！你是否也在投放中遇到过上述的困境，选什么定向又精准又有量？<br><img src=\"http://pok5gaadc.bkt.clouddn.com/FlNEy6FQFrg95tIVk_DLOhEigNri\" alt=\"11P513103A24b.jpg\"><br>一、什么叫ocpm？<br>Optimized Cost per Mille的缩写，即优化千次展现出价，本质还是按照cpm付费。采用更精准的点击率和转化率预估机制，将广告展现给最容易产生转化的用户，在获取流量的同时，提高转化率、降低转化成本，跑量提速更快。</p>\n<p>二、什么叫ocpc？<br>Optimized Cost per Click的缩写，即优化点击付费，本质还是按照cpc付费。采用更科学的转化率预估机制的准确性，可帮助广告主在获取更多优质流 量的同时提高转化完成率。系统会在广告主出价基础上，基于多维度、实时反馈及历史积累的海量数据，并根据预估的转化率以及竞争环境智能化的动态调整出价，进而优化广告排序，帮助广告主竞得最适合的流量，并降低转化成本。<br>扩展阅读：<br>百度信息流oCPC出价原理及投放原理<br>今日头条oCPC整体的优化方法大全</p>\n<p>三、什么叫ocpa？<br>Optimized Cost per Action的缩写，即优化行为出价，本质还是按照cpa付费。当广告主在广告投放流程中选定特定的优化目标（例如：移动应用的激活,网站的下单），提供愿意为此投放目标而支付的平均价格，并及时、准确回传效果数据，我们将借助转化预估模型，实时预估每一次点击对广告主的转化价值，自动出价，最终按照点击扣费；同时，我们的转化预估模型会根据广告主的广告转化数据不断自动优化。<br>扩展阅读：<br>腾讯社交广告oCPA出价原理及投放方法<br>公众号底部竞价广告支持智能优化（oCPA）等能力升级</p>\n<p>来源：<a href=\"http://www.woshizmt.cn/dsp/jrtt/698.html\" target=\"_blank\" rel=\"noopener\">http://www.woshizmt.cn/dsp/jrtt/698.html</a></p>"},{"title":"什么时候会发送options请求","originContent":"","toc":false,"date":"2020-10-13T07:22:31.000Z","_content":"\n## 偶然的相遇——options请求\n最近写的项目，应用里所有的ajax请求都发送了2遍。由于新项目，基础模块是新搭的，所以出现一些奇葩问题也是意料之中，啊终于第一次在chrome的devTools遇见了活的options请求。\n![image.png](http://blogimage.houjiyi.com/FkgRteTQ_wnfq1a29ShCE0Ph4qgu)\n### 第1次请求\n这里首先发送了一次额外的options请求，在浏览器里看到请求request header 和 response header的信息如下：\n（1）预检请求头request header的关键字段：\n\n![image.png](http://blogimage.houjiyi.com/FkKwSEWOU0ceTe7k1j6J983PYvAM)\n\n\n服务器基于从预检请求头部获得的信息来判断，是否接受接下来的实际请求。\n\n![image.png](http://blogimage.houjiyi.com/FnB1j43wZ3d6dDKgTJsklbG9D09g)\n\n（2）预检响应头response header的关键字段：\n\n![image.png](http://blogimage.houjiyi.com/Fq3-PVNUSp-NMYLDCuP7lPxmiDkb)\n\n此次OPTIONS请求返回了响应头的内容，但没有返回响应实体response body内容。\n\n![image.png](http://blogimage.houjiyi.com/Foxiw5ZheTGsDyWu0LNlRPA6ONBr)\n\n### 第2次请求\n这是本来要发送的请求，如图所示是普通的post请求。其中Content-Type的application/json是此次和后端约定的请求内容格式，这个也是后面讲到为什么会发送options请求的原因之一。\n\n![image.png](http://blogimage.houjiyi.com/Fv7OldspEH5iE7AWTWJjW0Sh6Pab)\n\n## 关于OPTIONS请求\n从很多资料我们可以了解到使用OPTIONS方法对服务器发起请求，可以检测服务器支持哪些 HTTP 方法。但是这次我们并没有主动去发起OPTIONS请求，那OPTIONS请求为何会自动发起？\n### OPTIONS请求自动发起\nMDN的CORS一文中提到：\n\n> 规范要求，对那些可能对服务器数据产生副作用的 HTTP 请求方法（特别是 GET 以外的 HTTP 请求，或者搭配某些 MIME 类型的 POST 请求），浏览器必须首先使用 OPTIONS 方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨域请求。\n\n所以这个跨域请求触发了浏览器自动发起OPTIONS请求，看看此次跨域请求具体触发了哪些条件。\n### 跨域请求时，OPTIONS请求触发条件\n![image.png](http://blogimage.houjiyi.com/FqM0rzrxnL_ZBzFmTgVYgINtVbUj)\n\n由于修改了Content-Type为application/json，触发了CORS预检请求。\n\n## 优化OPTIONS请求：Access-Control-Max-Age 或者 避免触发\n可见一旦达到触发条件，跨域请求便会一直发送2次请求，这样增加的请求数是否可优化呢？答案是可以，OPTIONS预检请求的结果可以被缓存。\n\n> Access-Control-Max-Age这个响应首部表示 preflight request  （预检请求）的返回结果（即 Access-Control-Allow-Methods 和Access-Control-Allow-Headers 提供的信息） 可以被缓存的最长时间，单位是秒。(MDN)\n\n如果值为 -1，则表示禁用缓存，每一次请求都需要提供预检请求，即用OPTIONS请求进行检测。\n评论区的朋友提醒了，尽量避免不要触发OPTIONS请求，上面例子中把content-type改掉是可以的。在其他场景，比如跨域并且业务有自定义请求头的话就很难避免了。现在使用的axios或者superagent等第三方ajax插件，如果出现CORS预检请求，可以看看默认配置或者二次封装是否规范。\n\n## 总结\n\nOPTIONS请求即预检请求，可用于检测服务器允许的http方法。当发起跨域请求时，由于安全原因，触发一定条件时浏览器会在正式请求之前自动先发起OPTIONS请求，即CORS预检请求，服务器若接受该跨域请求，浏览器才继续发起正式请求。\n\n作者：熊也抱抱\n链接：https://juejin.im/post/6844903821634699277\n来源：掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n","source":"_posts/什么时候会发送options请求.md","raw":"---\ntitle: 什么时候会发送options请求\ntags:\n  - 知识点备忘\noriginContent: ''\ncategories:\n  - Web开发\ntoc: false\ndate: 2020-10-13 15:22:31\n---\n\n## 偶然的相遇——options请求\n最近写的项目，应用里所有的ajax请求都发送了2遍。由于新项目，基础模块是新搭的，所以出现一些奇葩问题也是意料之中，啊终于第一次在chrome的devTools遇见了活的options请求。\n![image.png](http://blogimage.houjiyi.com/FkgRteTQ_wnfq1a29ShCE0Ph4qgu)\n### 第1次请求\n这里首先发送了一次额外的options请求，在浏览器里看到请求request header 和 response header的信息如下：\n（1）预检请求头request header的关键字段：\n\n![image.png](http://blogimage.houjiyi.com/FkKwSEWOU0ceTe7k1j6J983PYvAM)\n\n\n服务器基于从预检请求头部获得的信息来判断，是否接受接下来的实际请求。\n\n![image.png](http://blogimage.houjiyi.com/FnB1j43wZ3d6dDKgTJsklbG9D09g)\n\n（2）预检响应头response header的关键字段：\n\n![image.png](http://blogimage.houjiyi.com/Fq3-PVNUSp-NMYLDCuP7lPxmiDkb)\n\n此次OPTIONS请求返回了响应头的内容，但没有返回响应实体response body内容。\n\n![image.png](http://blogimage.houjiyi.com/Foxiw5ZheTGsDyWu0LNlRPA6ONBr)\n\n### 第2次请求\n这是本来要发送的请求，如图所示是普通的post请求。其中Content-Type的application/json是此次和后端约定的请求内容格式，这个也是后面讲到为什么会发送options请求的原因之一。\n\n![image.png](http://blogimage.houjiyi.com/Fv7OldspEH5iE7AWTWJjW0Sh6Pab)\n\n## 关于OPTIONS请求\n从很多资料我们可以了解到使用OPTIONS方法对服务器发起请求，可以检测服务器支持哪些 HTTP 方法。但是这次我们并没有主动去发起OPTIONS请求，那OPTIONS请求为何会自动发起？\n### OPTIONS请求自动发起\nMDN的CORS一文中提到：\n\n> 规范要求，对那些可能对服务器数据产生副作用的 HTTP 请求方法（特别是 GET 以外的 HTTP 请求，或者搭配某些 MIME 类型的 POST 请求），浏览器必须首先使用 OPTIONS 方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨域请求。\n\n所以这个跨域请求触发了浏览器自动发起OPTIONS请求，看看此次跨域请求具体触发了哪些条件。\n### 跨域请求时，OPTIONS请求触发条件\n![image.png](http://blogimage.houjiyi.com/FqM0rzrxnL_ZBzFmTgVYgINtVbUj)\n\n由于修改了Content-Type为application/json，触发了CORS预检请求。\n\n## 优化OPTIONS请求：Access-Control-Max-Age 或者 避免触发\n可见一旦达到触发条件，跨域请求便会一直发送2次请求，这样增加的请求数是否可优化呢？答案是可以，OPTIONS预检请求的结果可以被缓存。\n\n> Access-Control-Max-Age这个响应首部表示 preflight request  （预检请求）的返回结果（即 Access-Control-Allow-Methods 和Access-Control-Allow-Headers 提供的信息） 可以被缓存的最长时间，单位是秒。(MDN)\n\n如果值为 -1，则表示禁用缓存，每一次请求都需要提供预检请求，即用OPTIONS请求进行检测。\n评论区的朋友提醒了，尽量避免不要触发OPTIONS请求，上面例子中把content-type改掉是可以的。在其他场景，比如跨域并且业务有自定义请求头的话就很难避免了。现在使用的axios或者superagent等第三方ajax插件，如果出现CORS预检请求，可以看看默认配置或者二次封装是否规范。\n\n## 总结\n\nOPTIONS请求即预检请求，可用于检测服务器允许的http方法。当发起跨域请求时，由于安全原因，触发一定条件时浏览器会在正式请求之前自动先发起OPTIONS请求，即CORS预检请求，服务器若接受该跨域请求，浏览器才继续发起正式请求。\n\n作者：熊也抱抱\n链接：https://juejin.im/post/6844903821634699277\n来源：掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n","slug":"什么时候会发送options请求","published":1,"updated":"2020-10-13T07:22:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo0i007fh5s6gyuxbbcl","content":"<h2 id=\"偶然的相遇——options请求\"><a href=\"#偶然的相遇——options请求\" class=\"headerlink\" title=\"偶然的相遇——options请求\"></a>偶然的相遇——options请求</h2><p>最近写的项目，应用里所有的ajax请求都发送了2遍。由于新项目，基础模块是新搭的，所以出现一些奇葩问题也是意料之中，啊终于第一次在chrome的devTools遇见了活的options请求。<br><img src=\"http://blogimage.houjiyi.com/FkgRteTQ_wnfq1a29ShCE0Ph4qgu\" alt=\"image.png\"></p>\n<h3 id=\"第1次请求\"><a href=\"#第1次请求\" class=\"headerlink\" title=\"第1次请求\"></a>第1次请求</h3><p>这里首先发送了一次额外的options请求，在浏览器里看到请求request header 和 response header的信息如下：<br>（1）预检请求头request header的关键字段：</p>\n<p><img src=\"http://blogimage.houjiyi.com/FkKwSEWOU0ceTe7k1j6J983PYvAM\" alt=\"image.png\"></p>\n<p>服务器基于从预检请求头部获得的信息来判断，是否接受接下来的实际请求。</p>\n<p><img src=\"http://blogimage.houjiyi.com/FnB1j43wZ3d6dDKgTJsklbG9D09g\" alt=\"image.png\"></p>\n<p>（2）预检响应头response header的关键字段：</p>\n<p><img src=\"http://blogimage.houjiyi.com/Fq3-PVNUSp-NMYLDCuP7lPxmiDkb\" alt=\"image.png\"></p>\n<p>此次OPTIONS请求返回了响应头的内容，但没有返回响应实体response body内容。</p>\n<p><img src=\"http://blogimage.houjiyi.com/Foxiw5ZheTGsDyWu0LNlRPA6ONBr\" alt=\"image.png\"></p>\n<h3 id=\"第2次请求\"><a href=\"#第2次请求\" class=\"headerlink\" title=\"第2次请求\"></a>第2次请求</h3><p>这是本来要发送的请求，如图所示是普通的post请求。其中Content-Type的application/json是此次和后端约定的请求内容格式，这个也是后面讲到为什么会发送options请求的原因之一。</p>\n<p><img src=\"http://blogimage.houjiyi.com/Fv7OldspEH5iE7AWTWJjW0Sh6Pab\" alt=\"image.png\"></p>\n<h2 id=\"关于OPTIONS请求\"><a href=\"#关于OPTIONS请求\" class=\"headerlink\" title=\"关于OPTIONS请求\"></a>关于OPTIONS请求</h2><p>从很多资料我们可以了解到使用OPTIONS方法对服务器发起请求，可以检测服务器支持哪些 HTTP 方法。但是这次我们并没有主动去发起OPTIONS请求，那OPTIONS请求为何会自动发起？</p>\n<h3 id=\"OPTIONS请求自动发起\"><a href=\"#OPTIONS请求自动发起\" class=\"headerlink\" title=\"OPTIONS请求自动发起\"></a>OPTIONS请求自动发起</h3><p>MDN的CORS一文中提到：</p>\n<blockquote>\n<p>规范要求，对那些可能对服务器数据产生副作用的 HTTP 请求方法（特别是 GET 以外的 HTTP 请求，或者搭配某些 MIME 类型的 POST 请求），浏览器必须首先使用 OPTIONS 方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨域请求。</p>\n</blockquote>\n<p>所以这个跨域请求触发了浏览器自动发起OPTIONS请求，看看此次跨域请求具体触发了哪些条件。</p>\n<h3 id=\"跨域请求时，OPTIONS请求触发条件\"><a href=\"#跨域请求时，OPTIONS请求触发条件\" class=\"headerlink\" title=\"跨域请求时，OPTIONS请求触发条件\"></a>跨域请求时，OPTIONS请求触发条件</h3><p><img src=\"http://blogimage.houjiyi.com/FqM0rzrxnL_ZBzFmTgVYgINtVbUj\" alt=\"image.png\"></p>\n<p>由于修改了Content-Type为application/json，触发了CORS预检请求。</p>\n<h2 id=\"优化OPTIONS请求：Access-Control-Max-Age-或者-避免触发\"><a href=\"#优化OPTIONS请求：Access-Control-Max-Age-或者-避免触发\" class=\"headerlink\" title=\"优化OPTIONS请求：Access-Control-Max-Age 或者 避免触发\"></a>优化OPTIONS请求：Access-Control-Max-Age 或者 避免触发</h2><p>可见一旦达到触发条件，跨域请求便会一直发送2次请求，这样增加的请求数是否可优化呢？答案是可以，OPTIONS预检请求的结果可以被缓存。</p>\n<blockquote>\n<p>Access-Control-Max-Age这个响应首部表示 preflight request  （预检请求）的返回结果（即 Access-Control-Allow-Methods 和Access-Control-Allow-Headers 提供的信息） 可以被缓存的最长时间，单位是秒。(MDN)</p>\n</blockquote>\n<p>如果值为 -1，则表示禁用缓存，每一次请求都需要提供预检请求，即用OPTIONS请求进行检测。<br>评论区的朋友提醒了，尽量避免不要触发OPTIONS请求，上面例子中把content-type改掉是可以的。在其他场景，比如跨域并且业务有自定义请求头的话就很难避免了。现在使用的axios或者superagent等第三方ajax插件，如果出现CORS预检请求，可以看看默认配置或者二次封装是否规范。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>OPTIONS请求即预检请求，可用于检测服务器允许的http方法。当发起跨域请求时，由于安全原因，触发一定条件时浏览器会在正式请求之前自动先发起OPTIONS请求，即CORS预检请求，服务器若接受该跨域请求，浏览器才继续发起正式请求。</p>\n<p>作者：熊也抱抱<br>链接：<a href=\"https://juejin.im/post/6844903821634699277\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/6844903821634699277</a><br>来源：掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"偶然的相遇——options请求\"><a href=\"#偶然的相遇——options请求\" class=\"headerlink\" title=\"偶然的相遇——options请求\"></a>偶然的相遇——options请求</h2><p>最近写的项目，应用里所有的ajax请求都发送了2遍。由于新项目，基础模块是新搭的，所以出现一些奇葩问题也是意料之中，啊终于第一次在chrome的devTools遇见了活的options请求。<br><img src=\"http://blogimage.houjiyi.com/FkgRteTQ_wnfq1a29ShCE0Ph4qgu\" alt=\"image.png\"></p>\n<h3 id=\"第1次请求\"><a href=\"#第1次请求\" class=\"headerlink\" title=\"第1次请求\"></a>第1次请求</h3><p>这里首先发送了一次额外的options请求，在浏览器里看到请求request header 和 response header的信息如下：<br>（1）预检请求头request header的关键字段：</p>\n<p><img src=\"http://blogimage.houjiyi.com/FkKwSEWOU0ceTe7k1j6J983PYvAM\" alt=\"image.png\"></p>\n<p>服务器基于从预检请求头部获得的信息来判断，是否接受接下来的实际请求。</p>\n<p><img src=\"http://blogimage.houjiyi.com/FnB1j43wZ3d6dDKgTJsklbG9D09g\" alt=\"image.png\"></p>\n<p>（2）预检响应头response header的关键字段：</p>\n<p><img src=\"http://blogimage.houjiyi.com/Fq3-PVNUSp-NMYLDCuP7lPxmiDkb\" alt=\"image.png\"></p>\n<p>此次OPTIONS请求返回了响应头的内容，但没有返回响应实体response body内容。</p>\n<p><img src=\"http://blogimage.houjiyi.com/Foxiw5ZheTGsDyWu0LNlRPA6ONBr\" alt=\"image.png\"></p>\n<h3 id=\"第2次请求\"><a href=\"#第2次请求\" class=\"headerlink\" title=\"第2次请求\"></a>第2次请求</h3><p>这是本来要发送的请求，如图所示是普通的post请求。其中Content-Type的application/json是此次和后端约定的请求内容格式，这个也是后面讲到为什么会发送options请求的原因之一。</p>\n<p><img src=\"http://blogimage.houjiyi.com/Fv7OldspEH5iE7AWTWJjW0Sh6Pab\" alt=\"image.png\"></p>\n<h2 id=\"关于OPTIONS请求\"><a href=\"#关于OPTIONS请求\" class=\"headerlink\" title=\"关于OPTIONS请求\"></a>关于OPTIONS请求</h2><p>从很多资料我们可以了解到使用OPTIONS方法对服务器发起请求，可以检测服务器支持哪些 HTTP 方法。但是这次我们并没有主动去发起OPTIONS请求，那OPTIONS请求为何会自动发起？</p>\n<h3 id=\"OPTIONS请求自动发起\"><a href=\"#OPTIONS请求自动发起\" class=\"headerlink\" title=\"OPTIONS请求自动发起\"></a>OPTIONS请求自动发起</h3><p>MDN的CORS一文中提到：</p>\n<blockquote>\n<p>规范要求，对那些可能对服务器数据产生副作用的 HTTP 请求方法（特别是 GET 以外的 HTTP 请求，或者搭配某些 MIME 类型的 POST 请求），浏览器必须首先使用 OPTIONS 方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨域请求。</p>\n</blockquote>\n<p>所以这个跨域请求触发了浏览器自动发起OPTIONS请求，看看此次跨域请求具体触发了哪些条件。</p>\n<h3 id=\"跨域请求时，OPTIONS请求触发条件\"><a href=\"#跨域请求时，OPTIONS请求触发条件\" class=\"headerlink\" title=\"跨域请求时，OPTIONS请求触发条件\"></a>跨域请求时，OPTIONS请求触发条件</h3><p><img src=\"http://blogimage.houjiyi.com/FqM0rzrxnL_ZBzFmTgVYgINtVbUj\" alt=\"image.png\"></p>\n<p>由于修改了Content-Type为application/json，触发了CORS预检请求。</p>\n<h2 id=\"优化OPTIONS请求：Access-Control-Max-Age-或者-避免触发\"><a href=\"#优化OPTIONS请求：Access-Control-Max-Age-或者-避免触发\" class=\"headerlink\" title=\"优化OPTIONS请求：Access-Control-Max-Age 或者 避免触发\"></a>优化OPTIONS请求：Access-Control-Max-Age 或者 避免触发</h2><p>可见一旦达到触发条件，跨域请求便会一直发送2次请求，这样增加的请求数是否可优化呢？答案是可以，OPTIONS预检请求的结果可以被缓存。</p>\n<blockquote>\n<p>Access-Control-Max-Age这个响应首部表示 preflight request  （预检请求）的返回结果（即 Access-Control-Allow-Methods 和Access-Control-Allow-Headers 提供的信息） 可以被缓存的最长时间，单位是秒。(MDN)</p>\n</blockquote>\n<p>如果值为 -1，则表示禁用缓存，每一次请求都需要提供预检请求，即用OPTIONS请求进行检测。<br>评论区的朋友提醒了，尽量避免不要触发OPTIONS请求，上面例子中把content-type改掉是可以的。在其他场景，比如跨域并且业务有自定义请求头的话就很难避免了。现在使用的axios或者superagent等第三方ajax插件，如果出现CORS预检请求，可以看看默认配置或者二次封装是否规范。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>OPTIONS请求即预检请求，可用于检测服务器允许的http方法。当发起跨域请求时，由于安全原因，触发一定条件时浏览器会在正式请求之前自动先发起OPTIONS请求，即CORS预检请求，服务器若接受该跨域请求，浏览器才继续发起正式请求。</p>\n<p>作者：熊也抱抱<br>链接：<a href=\"https://juejin.im/post/6844903821634699277\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/6844903821634699277</a><br>来源：掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n"},{"title":"一些广告术语汇总","toc":false,"date":"2018-07-25T04:47:04.000Z","_content":"\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/adImage/1.jpeg)\n\nAdNetwork、AdExchange、DSP、SSP、RTB、DMP这些模式之间存在着内在的关系，所以在理解的时候，我们需要联系起来进行理解，不能分开。\n\n1. RTB（RealTimeBidding，实时竞价）\n\n定义：是一种利用第三方技术在数以百万计的网站上针对每一个用户展示行为进行评估以及出价的竞价技术。\n\n个人理解：如果把互联网比作蜘蛛网，那么当任何一只小生物触碰到这张网上的某个节点，它的每一个细微的动作都会带来一系列的反馈。与此同时，这张网的主人就会自动对闯入领域的访客进行信息分析。这张网的主人不断的记录着各种数据，当你第二次碰到这张网的时候，它从它的数据库发现访客的信息与它的数据库的某个信息相匹配，这时，它就可以根据这个信息进行相应的回应。每一天，这张网都在不断的进化，它在不断的储存新的数据，它越来越聪明，它试图了解每一个外来访客的行为和目的，最终它从被动的诱惑转向精准的捕捉。这就是RTB，也就是实时竞价。通过记录cookies,来解析用户的行为，从而实现精准投放广告的目的。\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/adImage/2.jpeg)\n\n2. DSP（DemandSidePlatform，需求方平台）\n\n定义：需求方平台允许广告客户和广告机构更方便地访问，以及更有效地购买广告库存，因为该平台汇集了各种广告交易平台的库存。有了这一平台，就不需要再出现另一个繁琐的购买步骤——购买请求。\n\n个人理解：互联网里有成千上万的广告主，他们急需推广自己的产品，寻找优质的媒介和精准的目标用户，优化广告投放策略，提高投入产出比。简单的讲，DSP就是广告主服务平台，广告主可以在平台上设置广告的目标受众、投放地域、广告出价等等。\n\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/adImage/3.jpeg)\n\n3. SSP（Sell-SidePlatform，供应方平台）\n\n定义：供应方平台能够让出版商也介入广告交易，从而使它们的库存广告可用。通过这一平台，出版商希望他们的库存广告可以获得最高的有效每千次展示费用，而不必以低价销售出去。\n\n个人理解：供应方平台，是站长服务平台。站长们可以在SSP上管理自己的广告位，控制广告的展现等。\n\nDSP和SSP的对比图如下：\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/adImage/4.jpeg)\n\n\n4. AdExchange（广告交易平台）\n\n定义：一个开放的、能够将出版商和广告商联系在一起的在线广告市场(类似于股票交易所)。交易平台里的广告存货并不一定都是溢价库存，只要出版商想要提供的，都可以在里面找到。\n\n个人理解：所谓的广告交易平台，就是一个能够让广告主在对的时间，对的地点接触到对的用户的地方。它可以为每一次广告的Impression(广告收视次数)来赋予一个独立的价值，其运用的实时竞价技术可以让广告主竞拍每一次广告显示在用户面前的机会。\n\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/adImage/5.jpeg)\n\nAdExchange相对于传统模式还是有比较大的好处的，一方面节省了广告主的成本，另外一方面让站长的收益增加了，最重要的是让合适的广告展现给合适的用户，提升了用户体验。\n\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/adImage/6.jpeg)\n\n5. DMP（Data-ManagementPlatform，数据管理平台）\n\n定义：数据管理平台能够帮助所有涉及广告库存购买和出售的各方管理其数据、更方便地使用第三方数据、增强他们对所有这些数据的理解、传回数据或将定制数据传入某一平台，以进行更好地定位。\n\n个人理解：是把分散的数据进行整合纳入统一的技术平台。\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/adImage/6.1.jpeg)\n6. AdNetwork（广告网络平台）\n\n定义：广告网络是一个封闭的网络广告市场，网络业主作为中间环节先向出版商采购广告库存，然后再转售给买家，虽然有时候出版商也可以创建自己的广告网络。\n\n个人理解：是一个连接广告主和网络媒体的广告系统平台，一方面为广告主提供广告管理、发布和监测服务，另一方面为媒体兑现部分广告存货的价值。\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/adImage/7.jpeg)\n","source":"_posts/一些广告术语汇总.md","raw":"---\ntitle: 一些广告术语汇总\ntags:\n  - 广告\ncategories:\n  - 项目总结\ntoc: false\ndate: 2018-07-25 12:47:04\n---\n\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/adImage/1.jpeg)\n\nAdNetwork、AdExchange、DSP、SSP、RTB、DMP这些模式之间存在着内在的关系，所以在理解的时候，我们需要联系起来进行理解，不能分开。\n\n1. RTB（RealTimeBidding，实时竞价）\n\n定义：是一种利用第三方技术在数以百万计的网站上针对每一个用户展示行为进行评估以及出价的竞价技术。\n\n个人理解：如果把互联网比作蜘蛛网，那么当任何一只小生物触碰到这张网上的某个节点，它的每一个细微的动作都会带来一系列的反馈。与此同时，这张网的主人就会自动对闯入领域的访客进行信息分析。这张网的主人不断的记录着各种数据，当你第二次碰到这张网的时候，它从它的数据库发现访客的信息与它的数据库的某个信息相匹配，这时，它就可以根据这个信息进行相应的回应。每一天，这张网都在不断的进化，它在不断的储存新的数据，它越来越聪明，它试图了解每一个外来访客的行为和目的，最终它从被动的诱惑转向精准的捕捉。这就是RTB，也就是实时竞价。通过记录cookies,来解析用户的行为，从而实现精准投放广告的目的。\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/adImage/2.jpeg)\n\n2. DSP（DemandSidePlatform，需求方平台）\n\n定义：需求方平台允许广告客户和广告机构更方便地访问，以及更有效地购买广告库存，因为该平台汇集了各种广告交易平台的库存。有了这一平台，就不需要再出现另一个繁琐的购买步骤——购买请求。\n\n个人理解：互联网里有成千上万的广告主，他们急需推广自己的产品，寻找优质的媒介和精准的目标用户，优化广告投放策略，提高投入产出比。简单的讲，DSP就是广告主服务平台，广告主可以在平台上设置广告的目标受众、投放地域、广告出价等等。\n\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/adImage/3.jpeg)\n\n3. SSP（Sell-SidePlatform，供应方平台）\n\n定义：供应方平台能够让出版商也介入广告交易，从而使它们的库存广告可用。通过这一平台，出版商希望他们的库存广告可以获得最高的有效每千次展示费用，而不必以低价销售出去。\n\n个人理解：供应方平台，是站长服务平台。站长们可以在SSP上管理自己的广告位，控制广告的展现等。\n\nDSP和SSP的对比图如下：\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/adImage/4.jpeg)\n\n\n4. AdExchange（广告交易平台）\n\n定义：一个开放的、能够将出版商和广告商联系在一起的在线广告市场(类似于股票交易所)。交易平台里的广告存货并不一定都是溢价库存，只要出版商想要提供的，都可以在里面找到。\n\n个人理解：所谓的广告交易平台，就是一个能够让广告主在对的时间，对的地点接触到对的用户的地方。它可以为每一次广告的Impression(广告收视次数)来赋予一个独立的价值，其运用的实时竞价技术可以让广告主竞拍每一次广告显示在用户面前的机会。\n\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/adImage/5.jpeg)\n\nAdExchange相对于传统模式还是有比较大的好处的，一方面节省了广告主的成本，另外一方面让站长的收益增加了，最重要的是让合适的广告展现给合适的用户，提升了用户体验。\n\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/adImage/6.jpeg)\n\n5. DMP（Data-ManagementPlatform，数据管理平台）\n\n定义：数据管理平台能够帮助所有涉及广告库存购买和出售的各方管理其数据、更方便地使用第三方数据、增强他们对所有这些数据的理解、传回数据或将定制数据传入某一平台，以进行更好地定位。\n\n个人理解：是把分散的数据进行整合纳入统一的技术平台。\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/adImage/6.1.jpeg)\n6. AdNetwork（广告网络平台）\n\n定义：广告网络是一个封闭的网络广告市场，网络业主作为中间环节先向出版商采购广告库存，然后再转售给买家，虽然有时候出版商也可以创建自己的广告网络。\n\n个人理解：是一个连接广告主和网络媒体的广告系统平台，一方面为广告主提供广告管理、发布和监测服务，另一方面为媒体兑现部分广告存货的价值。\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/adImage/7.jpeg)\n","slug":"一些广告术语汇总","published":1,"updated":"2019-11-07T02:24:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo0j007jh5s6o9sfkhxd","content":"<p><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/adImage/1.jpeg\" alt></p>\n<p>AdNetwork、AdExchange、DSP、SSP、RTB、DMP这些模式之间存在着内在的关系，所以在理解的时候，我们需要联系起来进行理解，不能分开。</p>\n<ol>\n<li>RTB（RealTimeBidding，实时竞价）</li>\n</ol>\n<p>定义：是一种利用第三方技术在数以百万计的网站上针对每一个用户展示行为进行评估以及出价的竞价技术。</p>\n<p>个人理解：如果把互联网比作蜘蛛网，那么当任何一只小生物触碰到这张网上的某个节点，它的每一个细微的动作都会带来一系列的反馈。与此同时，这张网的主人就会自动对闯入领域的访客进行信息分析。这张网的主人不断的记录着各种数据，当你第二次碰到这张网的时候，它从它的数据库发现访客的信息与它的数据库的某个信息相匹配，这时，它就可以根据这个信息进行相应的回应。每一天，这张网都在不断的进化，它在不断的储存新的数据，它越来越聪明，它试图了解每一个外来访客的行为和目的，最终它从被动的诱惑转向精准的捕捉。这就是RTB，也就是实时竞价。通过记录cookies,来解析用户的行为，从而实现精准投放广告的目的。<br><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/adImage/2.jpeg\" alt></p>\n<ol start=\"2\">\n<li>DSP（DemandSidePlatform，需求方平台）</li>\n</ol>\n<p>定义：需求方平台允许广告客户和广告机构更方便地访问，以及更有效地购买广告库存，因为该平台汇集了各种广告交易平台的库存。有了这一平台，就不需要再出现另一个繁琐的购买步骤——购买请求。</p>\n<p>个人理解：互联网里有成千上万的广告主，他们急需推广自己的产品，寻找优质的媒介和精准的目标用户，优化广告投放策略，提高投入产出比。简单的讲，DSP就是广告主服务平台，广告主可以在平台上设置广告的目标受众、投放地域、广告出价等等。</p>\n<p><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/adImage/3.jpeg\" alt></p>\n<ol start=\"3\">\n<li>SSP（Sell-SidePlatform，供应方平台）</li>\n</ol>\n<p>定义：供应方平台能够让出版商也介入广告交易，从而使它们的库存广告可用。通过这一平台，出版商希望他们的库存广告可以获得最高的有效每千次展示费用，而不必以低价销售出去。</p>\n<p>个人理解：供应方平台，是站长服务平台。站长们可以在SSP上管理自己的广告位，控制广告的展现等。</p>\n<p>DSP和SSP的对比图如下：<br><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/adImage/4.jpeg\" alt></p>\n<ol start=\"4\">\n<li>AdExchange（广告交易平台）</li>\n</ol>\n<p>定义：一个开放的、能够将出版商和广告商联系在一起的在线广告市场(类似于股票交易所)。交易平台里的广告存货并不一定都是溢价库存，只要出版商想要提供的，都可以在里面找到。</p>\n<p>个人理解：所谓的广告交易平台，就是一个能够让广告主在对的时间，对的地点接触到对的用户的地方。它可以为每一次广告的Impression(广告收视次数)来赋予一个独立的价值，其运用的实时竞价技术可以让广告主竞拍每一次广告显示在用户面前的机会。</p>\n<p><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/adImage/5.jpeg\" alt></p>\n<p>AdExchange相对于传统模式还是有比较大的好处的，一方面节省了广告主的成本，另外一方面让站长的收益增加了，最重要的是让合适的广告展现给合适的用户，提升了用户体验。</p>\n<p><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/adImage/6.jpeg\" alt></p>\n<ol start=\"5\">\n<li>DMP（Data-ManagementPlatform，数据管理平台）</li>\n</ol>\n<p>定义：数据管理平台能够帮助所有涉及广告库存购买和出售的各方管理其数据、更方便地使用第三方数据、增强他们对所有这些数据的理解、传回数据或将定制数据传入某一平台，以进行更好地定位。</p>\n<p>个人理解：是把分散的数据进行整合纳入统一的技术平台。<br><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/adImage/6.1.jpeg\" alt></p>\n<ol start=\"6\">\n<li>AdNetwork（广告网络平台）</li>\n</ol>\n<p>定义：广告网络是一个封闭的网络广告市场，网络业主作为中间环节先向出版商采购广告库存，然后再转售给买家，虽然有时候出版商也可以创建自己的广告网络。</p>\n<p>个人理解：是一个连接广告主和网络媒体的广告系统平台，一方面为广告主提供广告管理、发布和监测服务，另一方面为媒体兑现部分广告存货的价值。<br><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/adImage/7.jpeg\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/adImage/1.jpeg\" alt></p>\n<p>AdNetwork、AdExchange、DSP、SSP、RTB、DMP这些模式之间存在着内在的关系，所以在理解的时候，我们需要联系起来进行理解，不能分开。</p>\n<ol>\n<li>RTB（RealTimeBidding，实时竞价）</li>\n</ol>\n<p>定义：是一种利用第三方技术在数以百万计的网站上针对每一个用户展示行为进行评估以及出价的竞价技术。</p>\n<p>个人理解：如果把互联网比作蜘蛛网，那么当任何一只小生物触碰到这张网上的某个节点，它的每一个细微的动作都会带来一系列的反馈。与此同时，这张网的主人就会自动对闯入领域的访客进行信息分析。这张网的主人不断的记录着各种数据，当你第二次碰到这张网的时候，它从它的数据库发现访客的信息与它的数据库的某个信息相匹配，这时，它就可以根据这个信息进行相应的回应。每一天，这张网都在不断的进化，它在不断的储存新的数据，它越来越聪明，它试图了解每一个外来访客的行为和目的，最终它从被动的诱惑转向精准的捕捉。这就是RTB，也就是实时竞价。通过记录cookies,来解析用户的行为，从而实现精准投放广告的目的。<br><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/adImage/2.jpeg\" alt></p>\n<ol start=\"2\">\n<li>DSP（DemandSidePlatform，需求方平台）</li>\n</ol>\n<p>定义：需求方平台允许广告客户和广告机构更方便地访问，以及更有效地购买广告库存，因为该平台汇集了各种广告交易平台的库存。有了这一平台，就不需要再出现另一个繁琐的购买步骤——购买请求。</p>\n<p>个人理解：互联网里有成千上万的广告主，他们急需推广自己的产品，寻找优质的媒介和精准的目标用户，优化广告投放策略，提高投入产出比。简单的讲，DSP就是广告主服务平台，广告主可以在平台上设置广告的目标受众、投放地域、广告出价等等。</p>\n<p><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/adImage/3.jpeg\" alt></p>\n<ol start=\"3\">\n<li>SSP（Sell-SidePlatform，供应方平台）</li>\n</ol>\n<p>定义：供应方平台能够让出版商也介入广告交易，从而使它们的库存广告可用。通过这一平台，出版商希望他们的库存广告可以获得最高的有效每千次展示费用，而不必以低价销售出去。</p>\n<p>个人理解：供应方平台，是站长服务平台。站长们可以在SSP上管理自己的广告位，控制广告的展现等。</p>\n<p>DSP和SSP的对比图如下：<br><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/adImage/4.jpeg\" alt></p>\n<ol start=\"4\">\n<li>AdExchange（广告交易平台）</li>\n</ol>\n<p>定义：一个开放的、能够将出版商和广告商联系在一起的在线广告市场(类似于股票交易所)。交易平台里的广告存货并不一定都是溢价库存，只要出版商想要提供的，都可以在里面找到。</p>\n<p>个人理解：所谓的广告交易平台，就是一个能够让广告主在对的时间，对的地点接触到对的用户的地方。它可以为每一次广告的Impression(广告收视次数)来赋予一个独立的价值，其运用的实时竞价技术可以让广告主竞拍每一次广告显示在用户面前的机会。</p>\n<p><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/adImage/5.jpeg\" alt></p>\n<p>AdExchange相对于传统模式还是有比较大的好处的，一方面节省了广告主的成本，另外一方面让站长的收益增加了，最重要的是让合适的广告展现给合适的用户，提升了用户体验。</p>\n<p><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/adImage/6.jpeg\" alt></p>\n<ol start=\"5\">\n<li>DMP（Data-ManagementPlatform，数据管理平台）</li>\n</ol>\n<p>定义：数据管理平台能够帮助所有涉及广告库存购买和出售的各方管理其数据、更方便地使用第三方数据、增强他们对所有这些数据的理解、传回数据或将定制数据传入某一平台，以进行更好地定位。</p>\n<p>个人理解：是把分散的数据进行整合纳入统一的技术平台。<br><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/adImage/6.1.jpeg\" alt></p>\n<ol start=\"6\">\n<li>AdNetwork（广告网络平台）</li>\n</ol>\n<p>定义：广告网络是一个封闭的网络广告市场，网络业主作为中间环节先向出版商采购广告库存，然后再转售给买家，虽然有时候出版商也可以创建自己的广告网络。</p>\n<p>个人理解：是一个连接广告主和网络媒体的广告系统平台，一方面为广告主提供广告管理、发布和监测服务，另一方面为媒体兑现部分广告存货的价值。<br><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/adImage/7.jpeg\" alt></p>\n"},{"title":"从零开始开发一个vue组件打包并发布到npm","originContent":"","toc":false,"date":"2019-11-15T12:50:25.000Z","_content":"\n[原文地址](https://www.cnblogs.com/yalong/p/10388384.html)","source":"_posts/从零开始开发一个vue组件打包并发布到npm.md","raw":"---\ntitle: 从零开始开发一个vue组件打包并发布到npm\ntags: []\noriginContent: ''\ncategories: []\ntoc: false\ndate: 2019-11-15 20:50:25\n---\n\n[原文地址](https://www.cnblogs.com/yalong/p/10388384.html)","slug":"从零开始开发一个vue组件打包并发布到npm","published":1,"updated":"2019-11-15T12:50:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo0l007mh5s6uycso6g0","content":"<p><a href=\"https://www.cnblogs.com/yalong/p/10388384.html\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.cnblogs.com/yalong/p/10388384.html\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n"},{"title":"全景项目制作步骤","toc":false,"date":"2019-03-23T11:53:30.000Z","_content":"\n## 前期准备工作\n1. 目前市面全景项目对比\n2. 全景图拍摄预研\n3. 全景云台预研与使用，相机调研与使用，鱼眼镜头选择，照片拍摄后期处理等\n4. 开源软件全景制作方式，付费软件全景制作方式\n5. 对比开源项目与付费项目投入产出比确定技术方案等...\n\n<!-- more -->\n\n## krpano软件的购买与使用\n1. 购买krpano软件，可以到krpano公司官网购买软件许可证 [krpano软件购买](https://krpano.com/buy/)\n2. 学习使用krpano软件，krpano提供了比较全面的软件使用方法 [krpano官方文档](https://krpano.com/docu/) \n3. 国内也有对krpano使用方式的描述 [krpano360](http://www.krpano360.com/krpanorumenjiaocheng/)\n\n\n## 结合酷家乐全景图与全景方案制作全景项目\n1.下载酷家乐全景图\n\n进入自己的全景项目，下载正确的全景图到本地\n![下载酷家乐全景图](http://blogimage.houjiyi.com/FqlqLi4JwZfJcDVI_VtSpyPsZ1gs)\n\n2.制作全景\n\n全景图下载完成以后，可以将全景图拖拽至krpano制作软件中制作全景项目，这里把项目内的全景图全部拖拽进去，多次拖拽会产生多个配置文件（tour.xml），这时候需要将配置文件进行合并，保证场景完整。\n![拖拽制作全景项目](http://blogimage.houjiyi.com/FpCkhL0qgDruuw3KPUQdHeZnTDVY)\n\n3.查看全景效果\n\n制作完成以后自动生成全景项目文件夹**vtour**（如下图），其中**tour.xml**文件就是全景项目的配置文件，windows系统可以打开**tour_testingserver.exe**查看全景效果，mac系统可以打开**tour_testingserver_macos**查看全景效果。\n![制作完成全景项目文件夹](http://blogimage.houjiyi.com/FuXCKhB7c-5kHiOrOUAm4pWlBr3S)\n\n4.热点编辑\n\n至此，一个基本的全景项目已经完成了，由于我们要根据酷家乐的全景项目效果进行制作，所以还需要使用krpano编辑工具，对全景热点进行编辑：\n\n![image.png](http://blogimage.houjiyi.com/FuPlA8FSux7831tGyra-elm1NDp1)\n\n打开编辑软件点击**load tour.xml**按钮加载刚才的全景配置文件tour.xml，即可看到下图效果，然后添加热点，链接到不同场景（根据业务需要进行处理）\n![krpano编辑软件](http://blogimage.houjiyi.com/FrH-xabQioQjaqDCVPAQUQPeeJgw)\n\n5.结合实际需要制作\n\n热点编辑完毕以后，酷家乐项目的迁移工作基本结束了，然后根据项目需要结合krpano和部分前端技术完成整个项目的开发。\n\n## 发布项目\n1. 购买阿里云服务器（已有）\n2. 添加全景域名解析到服务器（已有）\n3. 服务器配置nginx服务（已有）\n4. 上传全景项目到nginx服务根目录（/home/work/www/3d）\n\n目前项目已有服务器，所有项目都放在`/home/work/www/3d`下, 新生成的项目同样放在这个目录下即可，可以使用SecureCRT进行服务器连接和文件上传。\n\n![image.png](http://blogimage.houjiyi.com/FthkQurb_3uWHnACxUHldQiDDkoh)\n\n5. 为了保证多个项目的扩展性，可以在根目录创建不同的目录放置不同的全景项目\n\n完成了上述步骤，全景项目的开发以及根据酷乐家迁移全景项目的工作就结束了\n\n\n## 已完成全景项目\n目前使用上述步骤完成的项目有5个：\n\n1. 项目1：柔龙中小型医疗洗涤工厂（3D）\n2. 项目2：三甲医院洗衣房\n3. 项目3：柔龙方案之-广西三甲医院洗衣房（标准）\n4. 项目4：柔龙方案之-广西三甲医院洗衣房（优化）\n5. 项目5：柔龙方案之--济南医疗洗涤工厂（1期）\n\n项目用webpack+vue打包前端项目，打包后dist文件夹就是需要上传的文件夹，这里可以修改文件夹名称之后再打包上传。同样也可以把全景软件生成的vtour文件夹直接上传访问tour.html文件即可\n","source":"_posts/全景项目制作步骤.md","raw":"---\ntitle: 全景项目制作步骤\ntags:\n  - 全景\ncategories:\n  - Web开发\ntoc: false\ndate: 2019-03-23 19:53:30\n---\n\n## 前期准备工作\n1. 目前市面全景项目对比\n2. 全景图拍摄预研\n3. 全景云台预研与使用，相机调研与使用，鱼眼镜头选择，照片拍摄后期处理等\n4. 开源软件全景制作方式，付费软件全景制作方式\n5. 对比开源项目与付费项目投入产出比确定技术方案等...\n\n<!-- more -->\n\n## krpano软件的购买与使用\n1. 购买krpano软件，可以到krpano公司官网购买软件许可证 [krpano软件购买](https://krpano.com/buy/)\n2. 学习使用krpano软件，krpano提供了比较全面的软件使用方法 [krpano官方文档](https://krpano.com/docu/) \n3. 国内也有对krpano使用方式的描述 [krpano360](http://www.krpano360.com/krpanorumenjiaocheng/)\n\n\n## 结合酷家乐全景图与全景方案制作全景项目\n1.下载酷家乐全景图\n\n进入自己的全景项目，下载正确的全景图到本地\n![下载酷家乐全景图](http://blogimage.houjiyi.com/FqlqLi4JwZfJcDVI_VtSpyPsZ1gs)\n\n2.制作全景\n\n全景图下载完成以后，可以将全景图拖拽至krpano制作软件中制作全景项目，这里把项目内的全景图全部拖拽进去，多次拖拽会产生多个配置文件（tour.xml），这时候需要将配置文件进行合并，保证场景完整。\n![拖拽制作全景项目](http://blogimage.houjiyi.com/FpCkhL0qgDruuw3KPUQdHeZnTDVY)\n\n3.查看全景效果\n\n制作完成以后自动生成全景项目文件夹**vtour**（如下图），其中**tour.xml**文件就是全景项目的配置文件，windows系统可以打开**tour_testingserver.exe**查看全景效果，mac系统可以打开**tour_testingserver_macos**查看全景效果。\n![制作完成全景项目文件夹](http://blogimage.houjiyi.com/FuXCKhB7c-5kHiOrOUAm4pWlBr3S)\n\n4.热点编辑\n\n至此，一个基本的全景项目已经完成了，由于我们要根据酷家乐的全景项目效果进行制作，所以还需要使用krpano编辑工具，对全景热点进行编辑：\n\n![image.png](http://blogimage.houjiyi.com/FuPlA8FSux7831tGyra-elm1NDp1)\n\n打开编辑软件点击**load tour.xml**按钮加载刚才的全景配置文件tour.xml，即可看到下图效果，然后添加热点，链接到不同场景（根据业务需要进行处理）\n![krpano编辑软件](http://blogimage.houjiyi.com/FrH-xabQioQjaqDCVPAQUQPeeJgw)\n\n5.结合实际需要制作\n\n热点编辑完毕以后，酷家乐项目的迁移工作基本结束了，然后根据项目需要结合krpano和部分前端技术完成整个项目的开发。\n\n## 发布项目\n1. 购买阿里云服务器（已有）\n2. 添加全景域名解析到服务器（已有）\n3. 服务器配置nginx服务（已有）\n4. 上传全景项目到nginx服务根目录（/home/work/www/3d）\n\n目前项目已有服务器，所有项目都放在`/home/work/www/3d`下, 新生成的项目同样放在这个目录下即可，可以使用SecureCRT进行服务器连接和文件上传。\n\n![image.png](http://blogimage.houjiyi.com/FthkQurb_3uWHnACxUHldQiDDkoh)\n\n5. 为了保证多个项目的扩展性，可以在根目录创建不同的目录放置不同的全景项目\n\n完成了上述步骤，全景项目的开发以及根据酷乐家迁移全景项目的工作就结束了\n\n\n## 已完成全景项目\n目前使用上述步骤完成的项目有5个：\n\n1. 项目1：柔龙中小型医疗洗涤工厂（3D）\n2. 项目2：三甲医院洗衣房\n3. 项目3：柔龙方案之-广西三甲医院洗衣房（标准）\n4. 项目4：柔龙方案之-广西三甲医院洗衣房（优化）\n5. 项目5：柔龙方案之--济南医疗洗涤工厂（1期）\n\n项目用webpack+vue打包前端项目，打包后dist文件夹就是需要上传的文件夹，这里可以修改文件夹名称之后再打包上传。同样也可以把全景软件生成的vtour文件夹直接上传访问tour.html文件即可\n","slug":"全景项目制作步骤","published":1,"updated":"2019-11-07T02:24:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo0n007qh5s6vjm2xlcx","content":"<h2 id=\"前期准备工作\"><a href=\"#前期准备工作\" class=\"headerlink\" title=\"前期准备工作\"></a>前期准备工作</h2><ol>\n<li>目前市面全景项目对比</li>\n<li>全景图拍摄预研</li>\n<li>全景云台预研与使用，相机调研与使用，鱼眼镜头选择，照片拍摄后期处理等</li>\n<li>开源软件全景制作方式，付费软件全景制作方式</li>\n<li>对比开源项目与付费项目投入产出比确定技术方案等…</li>\n</ol>\n<a id=\"more\"></a>\n<h2 id=\"krpano软件的购买与使用\"><a href=\"#krpano软件的购买与使用\" class=\"headerlink\" title=\"krpano软件的购买与使用\"></a>krpano软件的购买与使用</h2><ol>\n<li>购买krpano软件，可以到krpano公司官网购买软件许可证 <a href=\"https://krpano.com/buy/\" target=\"_blank\" rel=\"noopener\">krpano软件购买</a></li>\n<li>学习使用krpano软件，krpano提供了比较全面的软件使用方法 <a href=\"https://krpano.com/docu/\" target=\"_blank\" rel=\"noopener\">krpano官方文档</a> </li>\n<li>国内也有对krpano使用方式的描述 <a href=\"http://www.krpano360.com/krpanorumenjiaocheng/\" target=\"_blank\" rel=\"noopener\">krpano360</a></li>\n</ol>\n<h2 id=\"结合酷家乐全景图与全景方案制作全景项目\"><a href=\"#结合酷家乐全景图与全景方案制作全景项目\" class=\"headerlink\" title=\"结合酷家乐全景图与全景方案制作全景项目\"></a>结合酷家乐全景图与全景方案制作全景项目</h2><p>1.下载酷家乐全景图</p>\n<p>进入自己的全景项目，下载正确的全景图到本地<br><img src=\"http://blogimage.houjiyi.com/FqlqLi4JwZfJcDVI_VtSpyPsZ1gs\" alt=\"下载酷家乐全景图\"></p>\n<p>2.制作全景</p>\n<p>全景图下载完成以后，可以将全景图拖拽至krpano制作软件中制作全景项目，这里把项目内的全景图全部拖拽进去，多次拖拽会产生多个配置文件（tour.xml），这时候需要将配置文件进行合并，保证场景完整。<br><img src=\"http://blogimage.houjiyi.com/FpCkhL0qgDruuw3KPUQdHeZnTDVY\" alt=\"拖拽制作全景项目\"></p>\n<p>3.查看全景效果</p>\n<p>制作完成以后自动生成全景项目文件夹<strong>vtour</strong>（如下图），其中<strong>tour.xml</strong>文件就是全景项目的配置文件，windows系统可以打开<strong>tour_testingserver.exe</strong>查看全景效果，mac系统可以打开<strong>tour_testingserver_macos</strong>查看全景效果。<br><img src=\"http://blogimage.houjiyi.com/FuXCKhB7c-5kHiOrOUAm4pWlBr3S\" alt=\"制作完成全景项目文件夹\"></p>\n<p>4.热点编辑</p>\n<p>至此，一个基本的全景项目已经完成了，由于我们要根据酷家乐的全景项目效果进行制作，所以还需要使用krpano编辑工具，对全景热点进行编辑：</p>\n<p><img src=\"http://blogimage.houjiyi.com/FuPlA8FSux7831tGyra-elm1NDp1\" alt=\"image.png\"></p>\n<p>打开编辑软件点击<strong>load tour.xml</strong>按钮加载刚才的全景配置文件tour.xml，即可看到下图效果，然后添加热点，链接到不同场景（根据业务需要进行处理）<br><img src=\"http://blogimage.houjiyi.com/FrH-xabQioQjaqDCVPAQUQPeeJgw\" alt=\"krpano编辑软件\"></p>\n<p>5.结合实际需要制作</p>\n<p>热点编辑完毕以后，酷家乐项目的迁移工作基本结束了，然后根据项目需要结合krpano和部分前端技术完成整个项目的开发。</p>\n<h2 id=\"发布项目\"><a href=\"#发布项目\" class=\"headerlink\" title=\"发布项目\"></a>发布项目</h2><ol>\n<li>购买阿里云服务器（已有）</li>\n<li>添加全景域名解析到服务器（已有）</li>\n<li>服务器配置nginx服务（已有）</li>\n<li>上传全景项目到nginx服务根目录（/home/work/www/3d）</li>\n</ol>\n<p>目前项目已有服务器，所有项目都放在<code>/home/work/www/3d</code>下, 新生成的项目同样放在这个目录下即可，可以使用SecureCRT进行服务器连接和文件上传。</p>\n<p><img src=\"http://blogimage.houjiyi.com/FthkQurb_3uWHnACxUHldQiDDkoh\" alt=\"image.png\"></p>\n<ol start=\"5\">\n<li>为了保证多个项目的扩展性，可以在根目录创建不同的目录放置不同的全景项目</li>\n</ol>\n<p>完成了上述步骤，全景项目的开发以及根据酷乐家迁移全景项目的工作就结束了</p>\n<h2 id=\"已完成全景项目\"><a href=\"#已完成全景项目\" class=\"headerlink\" title=\"已完成全景项目\"></a>已完成全景项目</h2><p>目前使用上述步骤完成的项目有5个：</p>\n<ol>\n<li>项目1：柔龙中小型医疗洗涤工厂（3D）</li>\n<li>项目2：三甲医院洗衣房</li>\n<li>项目3：柔龙方案之-广西三甲医院洗衣房（标准）</li>\n<li>项目4：柔龙方案之-广西三甲医院洗衣房（优化）</li>\n<li>项目5：柔龙方案之–济南医疗洗涤工厂（1期）</li>\n</ol>\n<p>项目用webpack+vue打包前端项目，打包后dist文件夹就是需要上传的文件夹，这里可以修改文件夹名称之后再打包上传。同样也可以把全景软件生成的vtour文件夹直接上传访问tour.html文件即可</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前期准备工作\"><a href=\"#前期准备工作\" class=\"headerlink\" title=\"前期准备工作\"></a>前期准备工作</h2><ol>\n<li>目前市面全景项目对比</li>\n<li>全景图拍摄预研</li>\n<li>全景云台预研与使用，相机调研与使用，鱼眼镜头选择，照片拍摄后期处理等</li>\n<li>开源软件全景制作方式，付费软件全景制作方式</li>\n<li>对比开源项目与付费项目投入产出比确定技术方案等…</li>\n</ol>","more":"<h2 id=\"krpano软件的购买与使用\"><a href=\"#krpano软件的购买与使用\" class=\"headerlink\" title=\"krpano软件的购买与使用\"></a>krpano软件的购买与使用</h2><ol>\n<li>购买krpano软件，可以到krpano公司官网购买软件许可证 <a href=\"https://krpano.com/buy/\" target=\"_blank\" rel=\"noopener\">krpano软件购买</a></li>\n<li>学习使用krpano软件，krpano提供了比较全面的软件使用方法 <a href=\"https://krpano.com/docu/\" target=\"_blank\" rel=\"noopener\">krpano官方文档</a> </li>\n<li>国内也有对krpano使用方式的描述 <a href=\"http://www.krpano360.com/krpanorumenjiaocheng/\" target=\"_blank\" rel=\"noopener\">krpano360</a></li>\n</ol>\n<h2 id=\"结合酷家乐全景图与全景方案制作全景项目\"><a href=\"#结合酷家乐全景图与全景方案制作全景项目\" class=\"headerlink\" title=\"结合酷家乐全景图与全景方案制作全景项目\"></a>结合酷家乐全景图与全景方案制作全景项目</h2><p>1.下载酷家乐全景图</p>\n<p>进入自己的全景项目，下载正确的全景图到本地<br><img src=\"http://blogimage.houjiyi.com/FqlqLi4JwZfJcDVI_VtSpyPsZ1gs\" alt=\"下载酷家乐全景图\"></p>\n<p>2.制作全景</p>\n<p>全景图下载完成以后，可以将全景图拖拽至krpano制作软件中制作全景项目，这里把项目内的全景图全部拖拽进去，多次拖拽会产生多个配置文件（tour.xml），这时候需要将配置文件进行合并，保证场景完整。<br><img src=\"http://blogimage.houjiyi.com/FpCkhL0qgDruuw3KPUQdHeZnTDVY\" alt=\"拖拽制作全景项目\"></p>\n<p>3.查看全景效果</p>\n<p>制作完成以后自动生成全景项目文件夹<strong>vtour</strong>（如下图），其中<strong>tour.xml</strong>文件就是全景项目的配置文件，windows系统可以打开<strong>tour_testingserver.exe</strong>查看全景效果，mac系统可以打开<strong>tour_testingserver_macos</strong>查看全景效果。<br><img src=\"http://blogimage.houjiyi.com/FuXCKhB7c-5kHiOrOUAm4pWlBr3S\" alt=\"制作完成全景项目文件夹\"></p>\n<p>4.热点编辑</p>\n<p>至此，一个基本的全景项目已经完成了，由于我们要根据酷家乐的全景项目效果进行制作，所以还需要使用krpano编辑工具，对全景热点进行编辑：</p>\n<p><img src=\"http://blogimage.houjiyi.com/FuPlA8FSux7831tGyra-elm1NDp1\" alt=\"image.png\"></p>\n<p>打开编辑软件点击<strong>load tour.xml</strong>按钮加载刚才的全景配置文件tour.xml，即可看到下图效果，然后添加热点，链接到不同场景（根据业务需要进行处理）<br><img src=\"http://blogimage.houjiyi.com/FrH-xabQioQjaqDCVPAQUQPeeJgw\" alt=\"krpano编辑软件\"></p>\n<p>5.结合实际需要制作</p>\n<p>热点编辑完毕以后，酷家乐项目的迁移工作基本结束了，然后根据项目需要结合krpano和部分前端技术完成整个项目的开发。</p>\n<h2 id=\"发布项目\"><a href=\"#发布项目\" class=\"headerlink\" title=\"发布项目\"></a>发布项目</h2><ol>\n<li>购买阿里云服务器（已有）</li>\n<li>添加全景域名解析到服务器（已有）</li>\n<li>服务器配置nginx服务（已有）</li>\n<li>上传全景项目到nginx服务根目录（/home/work/www/3d）</li>\n</ol>\n<p>目前项目已有服务器，所有项目都放在<code>/home/work/www/3d</code>下, 新生成的项目同样放在这个目录下即可，可以使用SecureCRT进行服务器连接和文件上传。</p>\n<p><img src=\"http://blogimage.houjiyi.com/FthkQurb_3uWHnACxUHldQiDDkoh\" alt=\"image.png\"></p>\n<ol start=\"5\">\n<li>为了保证多个项目的扩展性，可以在根目录创建不同的目录放置不同的全景项目</li>\n</ol>\n<p>完成了上述步骤，全景项目的开发以及根据酷乐家迁移全景项目的工作就结束了</p>\n<h2 id=\"已完成全景项目\"><a href=\"#已完成全景项目\" class=\"headerlink\" title=\"已完成全景项目\"></a>已完成全景项目</h2><p>目前使用上述步骤完成的项目有5个：</p>\n<ol>\n<li>项目1：柔龙中小型医疗洗涤工厂（3D）</li>\n<li>项目2：三甲医院洗衣房</li>\n<li>项目3：柔龙方案之-广西三甲医院洗衣房（标准）</li>\n<li>项目4：柔龙方案之-广西三甲医院洗衣房（优化）</li>\n<li>项目5：柔龙方案之–济南医疗洗涤工厂（1期）</li>\n</ol>\n<p>项目用webpack+vue打包前端项目，打包后dist文件夹就是需要上传的文件夹，这里可以修改文件夹名称之后再打包上传。同样也可以把全景软件生成的vtour文件夹直接上传访问tour.html文件即可</p>"},{"title":"使用js判断浏览器","toc":false,"date":"2018-06-08T12:54:00.000Z","_content":"\n直接看代码：\n\n```\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n<script >\n    var userAgent = navigator.userAgent;\n    var isOpera = userAgent.indexOf(\"Opera\") > -1;\n    var isMaxthon = userAgent.indexOf(\"Maxthon\") > -1 ;\n    var isIE = userAgent.indexOf(\"compatible\") > -1 && userAgent.indexOf(\"MSIE\") > -1 && !isOpera ;\n    var isFF = userAgent.indexOf(\"Firefox\") > -1 ;\n    var isSafari = userAgent.indexOf(\"Safari\") > -1 && userAgent.indexOf(\"Chrome\") < 1 ;\n    var isChrome = userAgent.indexOf(\"Chrome\") > -1 ;\n    var isIE5 = isIE55 = isIE6 = isIE7 = isIE8 = false;\n\n    if(isFF){document.write(\"当前浏览器是  Firefox\");}\n    if(isMaxthon){document.write(\"当前浏览器是 傲游(webkit核心)\");}\n    if(isOpera){document.write(\"当前浏览器是  Opera\");}\n    if(isSafari){document.write(\"当前浏览器是  Safari\");}\n    if(isChrome){document.write(\"当前浏览器是  Chrome\");}\n    if(isIE){document.write(\"当前浏览器是  IE\");}\n</script>\n```\n","source":"_posts/使用js判断浏览器.md","raw":"---\ntitle: 使用js判断浏览器\ntags:\n  - javascript\ncategories:\n  - Web开发\ntoc: false\ndate: 2018-06-08 20:54:00\n---\n\n直接看代码：\n\n```\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n<script >\n    var userAgent = navigator.userAgent;\n    var isOpera = userAgent.indexOf(\"Opera\") > -1;\n    var isMaxthon = userAgent.indexOf(\"Maxthon\") > -1 ;\n    var isIE = userAgent.indexOf(\"compatible\") > -1 && userAgent.indexOf(\"MSIE\") > -1 && !isOpera ;\n    var isFF = userAgent.indexOf(\"Firefox\") > -1 ;\n    var isSafari = userAgent.indexOf(\"Safari\") > -1 && userAgent.indexOf(\"Chrome\") < 1 ;\n    var isChrome = userAgent.indexOf(\"Chrome\") > -1 ;\n    var isIE5 = isIE55 = isIE6 = isIE7 = isIE8 = false;\n\n    if(isFF){document.write(\"当前浏览器是  Firefox\");}\n    if(isMaxthon){document.write(\"当前浏览器是 傲游(webkit核心)\");}\n    if(isOpera){document.write(\"当前浏览器是  Opera\");}\n    if(isSafari){document.write(\"当前浏览器是  Safari\");}\n    if(isChrome){document.write(\"当前浏览器是  Chrome\");}\n    if(isIE){document.write(\"当前浏览器是  IE\");}\n</script>\n```\n","slug":"使用js判断浏览器","published":1,"updated":"2019-11-07T02:00:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo0o007th5s6o51mhi2h","content":"<p>直接看代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;</span><br><span class=\"line\">&lt;script &gt;</span><br><span class=\"line\">    var userAgent = navigator.userAgent;</span><br><span class=\"line\">    var isOpera = userAgent.indexOf(&quot;Opera&quot;) &gt; -1;</span><br><span class=\"line\">    var isMaxthon = userAgent.indexOf(&quot;Maxthon&quot;) &gt; -1 ;</span><br><span class=\"line\">    var isIE = userAgent.indexOf(&quot;compatible&quot;) &gt; -1 &amp;&amp; userAgent.indexOf(&quot;MSIE&quot;) &gt; -1 &amp;&amp; !isOpera ;</span><br><span class=\"line\">    var isFF = userAgent.indexOf(&quot;Firefox&quot;) &gt; -1 ;</span><br><span class=\"line\">    var isSafari = userAgent.indexOf(&quot;Safari&quot;) &gt; -1 &amp;&amp; userAgent.indexOf(&quot;Chrome&quot;) &lt; 1 ;</span><br><span class=\"line\">    var isChrome = userAgent.indexOf(&quot;Chrome&quot;) &gt; -1 ;</span><br><span class=\"line\">    var isIE5 = isIE55 = isIE6 = isIE7 = isIE8 = false;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(isFF)&#123;document.write(&quot;当前浏览器是  Firefox&quot;);&#125;</span><br><span class=\"line\">    if(isMaxthon)&#123;document.write(&quot;当前浏览器是 傲游(webkit核心)&quot;);&#125;</span><br><span class=\"line\">    if(isOpera)&#123;document.write(&quot;当前浏览器是  Opera&quot;);&#125;</span><br><span class=\"line\">    if(isSafari)&#123;document.write(&quot;当前浏览器是  Safari&quot;);&#125;</span><br><span class=\"line\">    if(isChrome)&#123;document.write(&quot;当前浏览器是  Chrome&quot;);&#125;</span><br><span class=\"line\">    if(isIE)&#123;document.write(&quot;当前浏览器是  IE&quot;);&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>直接看代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;</span><br><span class=\"line\">&lt;script &gt;</span><br><span class=\"line\">    var userAgent = navigator.userAgent;</span><br><span class=\"line\">    var isOpera = userAgent.indexOf(&quot;Opera&quot;) &gt; -1;</span><br><span class=\"line\">    var isMaxthon = userAgent.indexOf(&quot;Maxthon&quot;) &gt; -1 ;</span><br><span class=\"line\">    var isIE = userAgent.indexOf(&quot;compatible&quot;) &gt; -1 &amp;&amp; userAgent.indexOf(&quot;MSIE&quot;) &gt; -1 &amp;&amp; !isOpera ;</span><br><span class=\"line\">    var isFF = userAgent.indexOf(&quot;Firefox&quot;) &gt; -1 ;</span><br><span class=\"line\">    var isSafari = userAgent.indexOf(&quot;Safari&quot;) &gt; -1 &amp;&amp; userAgent.indexOf(&quot;Chrome&quot;) &lt; 1 ;</span><br><span class=\"line\">    var isChrome = userAgent.indexOf(&quot;Chrome&quot;) &gt; -1 ;</span><br><span class=\"line\">    var isIE5 = isIE55 = isIE6 = isIE7 = isIE8 = false;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(isFF)&#123;document.write(&quot;当前浏览器是  Firefox&quot;);&#125;</span><br><span class=\"line\">    if(isMaxthon)&#123;document.write(&quot;当前浏览器是 傲游(webkit核心)&quot;);&#125;</span><br><span class=\"line\">    if(isOpera)&#123;document.write(&quot;当前浏览器是  Opera&quot;);&#125;</span><br><span class=\"line\">    if(isSafari)&#123;document.write(&quot;当前浏览器是  Safari&quot;);&#125;</span><br><span class=\"line\">    if(isChrome)&#123;document.write(&quot;当前浏览器是  Chrome&quot;);&#125;</span><br><span class=\"line\">    if(isIE)&#123;document.write(&quot;当前浏览器是  IE&quot;);&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n"},{"title":"内建函数(原生函数)","originContent":"","toc":false,"date":"2020-07-13T02:56:06.000Z","_content":"\nJavaScript 的内建函数（built-in function），也叫原生函数（native function），如 String 和 Number等:\n\n常用的原生函数有9种(ES6一种)：\n• String()\n• Number()\n• Boolean()\n• Array()\n• Object()\n• Function()\n• RegExp()\n• Date()\n• Error()\n• Symbol()——ES6 中新加入的！\n\n实际上，它们就是内建函数。","source":"_posts/内建函数-原生函数.md","raw":"---\ntitle: 内建函数(原生函数)\ntags:\n  - 知识点备忘\noriginContent: ''\ncategories:\n  - Web开发\ntoc: false\ndate: 2020-07-13 10:56:06\n---\n\nJavaScript 的内建函数（built-in function），也叫原生函数（native function），如 String 和 Number等:\n\n常用的原生函数有9种(ES6一种)：\n• String()\n• Number()\n• Boolean()\n• Array()\n• Object()\n• Function()\n• RegExp()\n• Date()\n• Error()\n• Symbol()——ES6 中新加入的！\n\n实际上，它们就是内建函数。","slug":"内建函数-原生函数","published":1,"updated":"2020-07-13T02:56:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo0q007xh5s6qga7dkbl","content":"<p>JavaScript 的内建函数（built-in function），也叫原生函数（native function），如 String 和 Number等:</p>\n<p>常用的原生函数有9种(ES6一种)：<br>• String()<br>• Number()<br>• Boolean()<br>• Array()<br>• Object()<br>• Function()<br>• RegExp()<br>• Date()<br>• Error()<br>• Symbol()——ES6 中新加入的！</p>\n<p>实际上，它们就是内建函数。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>JavaScript 的内建函数（built-in function），也叫原生函数（native function），如 String 和 Number等:</p>\n<p>常用的原生函数有9种(ES6一种)：<br>• String()<br>• Number()<br>• Boolean()<br>• Array()<br>• Object()<br>• Function()<br>• RegExp()<br>• Date()<br>• Error()<br>• Symbol()——ES6 中新加入的！</p>\n<p>实际上，它们就是内建函数。</p>\n"},{"title":"全网最详bpmn.js简介","originContent":"","toc":false,"date":"2020-07-21T01:51:16.000Z","_content":"\nbpmn.js简介\nbpmn.js是一个BPMN2.0渲染工具包和web建模器.\n\n它使用JavaScript编写，在不需要后端服务器支持的前提下向现代浏览器内嵌入BPMN2.0流程图.\n\n简单来说, 就是能使得前端来画流程图, 它可能长成这样:\n\n![image.png](http://blogimage.houjiyi.com/Ft_9DmQ7rMIU1jEOm1Ra-6HjCauG)\n\n也可能长成这样:\n\n![image.png](http://blogimage.houjiyi.com/Foxjmeg_Q7nZBpmuUQ2nbA7v7ZtY)\n\n或许你可以亲自试试: [在线绘制bpmn流程图](在线绘制bpmn流程图)\n\n全部目录\n[bpmn.js教材目录](bpmn.js教材目录)\n\n几个问题\n> Q: bpmn.js是什么? 🤔️\n\nbpmn.js是一个BPMN2.0渲染工具包和web建模器, 使得画流程图的功能在前端来完成.\n\n> Q: 我为什么要写该系列的教材? 🤔️\n\n因为公司业务的需要因而要在项目中使用到bpmn.js,但是由于bpmn.js的开发者是国外友人, 因此国内对这方面的教材很少, 也没有详细的文档. 所以很多使用方式很多坑都得自己去找 😅.\n\n在将其琢磨完之后, 决定写一系列关于它的教材来帮助更多bpmn.js的使用者或者是期于找到一种好的绘制流程图的开发者. 同时也是自己对其的一种巩固.\n\n> Q: 教材中的知识我都是从哪里看的? 🤔️\n\n最开始是根据公司业务的需要, 跟着官方给的一些例子 来推敲了解bpmn.js的一些基础知识, 包括一些自定义contextPad、renderer、palette的使用, 然后就写了几篇关于bpmn.js的文章 ✏️.\n\n之后越来越多读者通过微信与我联系, 他们也会问一些我没有遇到过的问题, 从中互相探索怎样使用, 怎样解决实际问题... 过程里大多都是通过查看bpmn.js的源码, 然后本地测试源码中一些方法和属性的作用.\n\n> Q: 本教材还会更新多久? 🤔️\n\n不知道🤷‍♂️... 因为其实现在工作已经没在用bpmn.js了, 我现在更多的把它当成一种兴趣来学习吧...\n\n而且现在我们也有了自己的一个bpmn.js交流群, 时不时会有一些新的问题抛出来, 所以暂时是与其分不开的 😊.\n\n我也会在工作之余, 尽量多出一些教材, 包括群里大家抛出的问题, 我也会抽时间将它们整理出来, 方便后面遇到同样问题的小伙伴查看, 所以现在是持续更新的.\n\n> Q: 还有什么想说的? 🤔️\n\n求Star 🌟 , 求 Fork 📒\n\n就像之前我提到过的, 光靠我一个人的力量想要将 bpmn-chinese-document打造成一个真正的bpmn中文文档\n\n是不可能的...\n\n精力不够...能力也不够...\n\n所以我希望有更多的bpmn.js使用者能参与到此项目中来 🎉...\n\n你可以是写一篇关于某个知识点的文章, 就算是我已经写过的知识点也可以, 因为我知道我写的不一定全面, 如果你有更多可以写的我当然欢迎👏.\n\n也可以是写一些教材案例, 因为之前就有大佬吐槽说官方给的案例都太过简单了 😂, 可以让我们自己写一些案例出来. (案例中的README要尽量详细哟 😁, 当然有一篇配合着的文档更好啦 😄)\n\n再或者是一些你平常碰到的坑, 总结之类的文章也很好 😼.\n\n> Q: 如何 Fork ? 🤔️\n\n点击项目右上角的Fork, 然后像Fork其它项目一样, 不太会的小伙伴可以查看这篇文章:\n\nGithub上怎么修改别人的项目并且提交给原作者！图文并茂！\n\n不过在提交的时候, 为避免项目太乱, 可以在根目录下创建一个以你github为名的文件夹(比如我的就是LinDaiDai)然后将你的文章或者案例都放在这个文件夹里面进行提交就可以了🎉 .\n\n后语\n如果你也对bpmn.js 感兴趣的话, 欢迎加入我们的bpmn.js交流群, 一起学习, 一起进步💪.\n\n[原文地址](https://github.com/LinDaiDai/bpmn-chinese-document)","source":"_posts/全网最详bpmn-js简介.md","raw":"---\ntitle: 全网最详bpmn.js简介\ntags:\n  - 知识点备忘\noriginContent: ''\ncategories:\n  - Web开发\ntoc: false\ndate: 2020-07-21 09:51:16\n---\n\nbpmn.js简介\nbpmn.js是一个BPMN2.0渲染工具包和web建模器.\n\n它使用JavaScript编写，在不需要后端服务器支持的前提下向现代浏览器内嵌入BPMN2.0流程图.\n\n简单来说, 就是能使得前端来画流程图, 它可能长成这样:\n\n![image.png](http://blogimage.houjiyi.com/Ft_9DmQ7rMIU1jEOm1Ra-6HjCauG)\n\n也可能长成这样:\n\n![image.png](http://blogimage.houjiyi.com/Foxjmeg_Q7nZBpmuUQ2nbA7v7ZtY)\n\n或许你可以亲自试试: [在线绘制bpmn流程图](在线绘制bpmn流程图)\n\n全部目录\n[bpmn.js教材目录](bpmn.js教材目录)\n\n几个问题\n> Q: bpmn.js是什么? 🤔️\n\nbpmn.js是一个BPMN2.0渲染工具包和web建模器, 使得画流程图的功能在前端来完成.\n\n> Q: 我为什么要写该系列的教材? 🤔️\n\n因为公司业务的需要因而要在项目中使用到bpmn.js,但是由于bpmn.js的开发者是国外友人, 因此国内对这方面的教材很少, 也没有详细的文档. 所以很多使用方式很多坑都得自己去找 😅.\n\n在将其琢磨完之后, 决定写一系列关于它的教材来帮助更多bpmn.js的使用者或者是期于找到一种好的绘制流程图的开发者. 同时也是自己对其的一种巩固.\n\n> Q: 教材中的知识我都是从哪里看的? 🤔️\n\n最开始是根据公司业务的需要, 跟着官方给的一些例子 来推敲了解bpmn.js的一些基础知识, 包括一些自定义contextPad、renderer、palette的使用, 然后就写了几篇关于bpmn.js的文章 ✏️.\n\n之后越来越多读者通过微信与我联系, 他们也会问一些我没有遇到过的问题, 从中互相探索怎样使用, 怎样解决实际问题... 过程里大多都是通过查看bpmn.js的源码, 然后本地测试源码中一些方法和属性的作用.\n\n> Q: 本教材还会更新多久? 🤔️\n\n不知道🤷‍♂️... 因为其实现在工作已经没在用bpmn.js了, 我现在更多的把它当成一种兴趣来学习吧...\n\n而且现在我们也有了自己的一个bpmn.js交流群, 时不时会有一些新的问题抛出来, 所以暂时是与其分不开的 😊.\n\n我也会在工作之余, 尽量多出一些教材, 包括群里大家抛出的问题, 我也会抽时间将它们整理出来, 方便后面遇到同样问题的小伙伴查看, 所以现在是持续更新的.\n\n> Q: 还有什么想说的? 🤔️\n\n求Star 🌟 , 求 Fork 📒\n\n就像之前我提到过的, 光靠我一个人的力量想要将 bpmn-chinese-document打造成一个真正的bpmn中文文档\n\n是不可能的...\n\n精力不够...能力也不够...\n\n所以我希望有更多的bpmn.js使用者能参与到此项目中来 🎉...\n\n你可以是写一篇关于某个知识点的文章, 就算是我已经写过的知识点也可以, 因为我知道我写的不一定全面, 如果你有更多可以写的我当然欢迎👏.\n\n也可以是写一些教材案例, 因为之前就有大佬吐槽说官方给的案例都太过简单了 😂, 可以让我们自己写一些案例出来. (案例中的README要尽量详细哟 😁, 当然有一篇配合着的文档更好啦 😄)\n\n再或者是一些你平常碰到的坑, 总结之类的文章也很好 😼.\n\n> Q: 如何 Fork ? 🤔️\n\n点击项目右上角的Fork, 然后像Fork其它项目一样, 不太会的小伙伴可以查看这篇文章:\n\nGithub上怎么修改别人的项目并且提交给原作者！图文并茂！\n\n不过在提交的时候, 为避免项目太乱, 可以在根目录下创建一个以你github为名的文件夹(比如我的就是LinDaiDai)然后将你的文章或者案例都放在这个文件夹里面进行提交就可以了🎉 .\n\n后语\n如果你也对bpmn.js 感兴趣的话, 欢迎加入我们的bpmn.js交流群, 一起学习, 一起进步💪.\n\n[原文地址](https://github.com/LinDaiDai/bpmn-chinese-document)","slug":"全网最详bpmn-js简介","published":1,"updated":"2020-07-21T01:51:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo0q0080h5s6bg5cm650","content":"<p>bpmn.js简介<br>bpmn.js是一个BPMN2.0渲染工具包和web建模器.</p>\n<p>它使用JavaScript编写，在不需要后端服务器支持的前提下向现代浏览器内嵌入BPMN2.0流程图.</p>\n<p>简单来说, 就是能使得前端来画流程图, 它可能长成这样:</p>\n<p><img src=\"http://blogimage.houjiyi.com/Ft_9DmQ7rMIU1jEOm1Ra-6HjCauG\" alt=\"image.png\"></p>\n<p>也可能长成这样:</p>\n<p><img src=\"http://blogimage.houjiyi.com/Foxjmeg_Q7nZBpmuUQ2nbA7v7ZtY\" alt=\"image.png\"></p>\n<p>或许你可以亲自试试: <a href=\"在线绘制bpmn流程图\">在线绘制bpmn流程图</a></p>\n<p>全部目录<br><a href=\"bpmn.js教材目录\">bpmn.js教材目录</a></p>\n<p>几个问题</p>\n<blockquote>\n<p>Q: bpmn.js是什么? 🤔️</p>\n</blockquote>\n<p>bpmn.js是一个BPMN2.0渲染工具包和web建模器, 使得画流程图的功能在前端来完成.</p>\n<blockquote>\n<p>Q: 我为什么要写该系列的教材? 🤔️</p>\n</blockquote>\n<p>因为公司业务的需要因而要在项目中使用到bpmn.js,但是由于bpmn.js的开发者是国外友人, 因此国内对这方面的教材很少, 也没有详细的文档. 所以很多使用方式很多坑都得自己去找 😅.</p>\n<p>在将其琢磨完之后, 决定写一系列关于它的教材来帮助更多bpmn.js的使用者或者是期于找到一种好的绘制流程图的开发者. 同时也是自己对其的一种巩固.</p>\n<blockquote>\n<p>Q: 教材中的知识我都是从哪里看的? 🤔️</p>\n</blockquote>\n<p>最开始是根据公司业务的需要, 跟着官方给的一些例子 来推敲了解bpmn.js的一些基础知识, 包括一些自定义contextPad、renderer、palette的使用, 然后就写了几篇关于bpmn.js的文章 ✏️.</p>\n<p>之后越来越多读者通过微信与我联系, 他们也会问一些我没有遇到过的问题, 从中互相探索怎样使用, 怎样解决实际问题… 过程里大多都是通过查看bpmn.js的源码, 然后本地测试源码中一些方法和属性的作用.</p>\n<blockquote>\n<p>Q: 本教材还会更新多久? 🤔️</p>\n</blockquote>\n<p>不知道🤷‍♂️… 因为其实现在工作已经没在用bpmn.js了, 我现在更多的把它当成一种兴趣来学习吧…</p>\n<p>而且现在我们也有了自己的一个bpmn.js交流群, 时不时会有一些新的问题抛出来, 所以暂时是与其分不开的 😊.</p>\n<p>我也会在工作之余, 尽量多出一些教材, 包括群里大家抛出的问题, 我也会抽时间将它们整理出来, 方便后面遇到同样问题的小伙伴查看, 所以现在是持续更新的.</p>\n<blockquote>\n<p>Q: 还有什么想说的? 🤔️</p>\n</blockquote>\n<p>求Star 🌟 , 求 Fork 📒</p>\n<p>就像之前我提到过的, 光靠我一个人的力量想要将 bpmn-chinese-document打造成一个真正的bpmn中文文档</p>\n<p>是不可能的…</p>\n<p>精力不够…能力也不够…</p>\n<p>所以我希望有更多的bpmn.js使用者能参与到此项目中来 🎉…</p>\n<p>你可以是写一篇关于某个知识点的文章, 就算是我已经写过的知识点也可以, 因为我知道我写的不一定全面, 如果你有更多可以写的我当然欢迎👏.</p>\n<p>也可以是写一些教材案例, 因为之前就有大佬吐槽说官方给的案例都太过简单了 😂, 可以让我们自己写一些案例出来. (案例中的README要尽量详细哟 😁, 当然有一篇配合着的文档更好啦 😄)</p>\n<p>再或者是一些你平常碰到的坑, 总结之类的文章也很好 😼.</p>\n<blockquote>\n<p>Q: 如何 Fork ? 🤔️</p>\n</blockquote>\n<p>点击项目右上角的Fork, 然后像Fork其它项目一样, 不太会的小伙伴可以查看这篇文章:</p>\n<p>Github上怎么修改别人的项目并且提交给原作者！图文并茂！</p>\n<p>不过在提交的时候, 为避免项目太乱, 可以在根目录下创建一个以你github为名的文件夹(比如我的就是LinDaiDai)然后将你的文章或者案例都放在这个文件夹里面进行提交就可以了🎉 .</p>\n<p>后语<br>如果你也对bpmn.js 感兴趣的话, 欢迎加入我们的bpmn.js交流群, 一起学习, 一起进步💪.</p>\n<p><a href=\"https://github.com/LinDaiDai/bpmn-chinese-document\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>bpmn.js简介<br>bpmn.js是一个BPMN2.0渲染工具包和web建模器.</p>\n<p>它使用JavaScript编写，在不需要后端服务器支持的前提下向现代浏览器内嵌入BPMN2.0流程图.</p>\n<p>简单来说, 就是能使得前端来画流程图, 它可能长成这样:</p>\n<p><img src=\"http://blogimage.houjiyi.com/Ft_9DmQ7rMIU1jEOm1Ra-6HjCauG\" alt=\"image.png\"></p>\n<p>也可能长成这样:</p>\n<p><img src=\"http://blogimage.houjiyi.com/Foxjmeg_Q7nZBpmuUQ2nbA7v7ZtY\" alt=\"image.png\"></p>\n<p>或许你可以亲自试试: <a href=\"在线绘制bpmn流程图\">在线绘制bpmn流程图</a></p>\n<p>全部目录<br><a href=\"bpmn.js教材目录\">bpmn.js教材目录</a></p>\n<p>几个问题</p>\n<blockquote>\n<p>Q: bpmn.js是什么? 🤔️</p>\n</blockquote>\n<p>bpmn.js是一个BPMN2.0渲染工具包和web建模器, 使得画流程图的功能在前端来完成.</p>\n<blockquote>\n<p>Q: 我为什么要写该系列的教材? 🤔️</p>\n</blockquote>\n<p>因为公司业务的需要因而要在项目中使用到bpmn.js,但是由于bpmn.js的开发者是国外友人, 因此国内对这方面的教材很少, 也没有详细的文档. 所以很多使用方式很多坑都得自己去找 😅.</p>\n<p>在将其琢磨完之后, 决定写一系列关于它的教材来帮助更多bpmn.js的使用者或者是期于找到一种好的绘制流程图的开发者. 同时也是自己对其的一种巩固.</p>\n<blockquote>\n<p>Q: 教材中的知识我都是从哪里看的? 🤔️</p>\n</blockquote>\n<p>最开始是根据公司业务的需要, 跟着官方给的一些例子 来推敲了解bpmn.js的一些基础知识, 包括一些自定义contextPad、renderer、palette的使用, 然后就写了几篇关于bpmn.js的文章 ✏️.</p>\n<p>之后越来越多读者通过微信与我联系, 他们也会问一些我没有遇到过的问题, 从中互相探索怎样使用, 怎样解决实际问题… 过程里大多都是通过查看bpmn.js的源码, 然后本地测试源码中一些方法和属性的作用.</p>\n<blockquote>\n<p>Q: 本教材还会更新多久? 🤔️</p>\n</blockquote>\n<p>不知道🤷‍♂️… 因为其实现在工作已经没在用bpmn.js了, 我现在更多的把它当成一种兴趣来学习吧…</p>\n<p>而且现在我们也有了自己的一个bpmn.js交流群, 时不时会有一些新的问题抛出来, 所以暂时是与其分不开的 😊.</p>\n<p>我也会在工作之余, 尽量多出一些教材, 包括群里大家抛出的问题, 我也会抽时间将它们整理出来, 方便后面遇到同样问题的小伙伴查看, 所以现在是持续更新的.</p>\n<blockquote>\n<p>Q: 还有什么想说的? 🤔️</p>\n</blockquote>\n<p>求Star 🌟 , 求 Fork 📒</p>\n<p>就像之前我提到过的, 光靠我一个人的力量想要将 bpmn-chinese-document打造成一个真正的bpmn中文文档</p>\n<p>是不可能的…</p>\n<p>精力不够…能力也不够…</p>\n<p>所以我希望有更多的bpmn.js使用者能参与到此项目中来 🎉…</p>\n<p>你可以是写一篇关于某个知识点的文章, 就算是我已经写过的知识点也可以, 因为我知道我写的不一定全面, 如果你有更多可以写的我当然欢迎👏.</p>\n<p>也可以是写一些教材案例, 因为之前就有大佬吐槽说官方给的案例都太过简单了 😂, 可以让我们自己写一些案例出来. (案例中的README要尽量详细哟 😁, 当然有一篇配合着的文档更好啦 😄)</p>\n<p>再或者是一些你平常碰到的坑, 总结之类的文章也很好 😼.</p>\n<blockquote>\n<p>Q: 如何 Fork ? 🤔️</p>\n</blockquote>\n<p>点击项目右上角的Fork, 然后像Fork其它项目一样, 不太会的小伙伴可以查看这篇文章:</p>\n<p>Github上怎么修改别人的项目并且提交给原作者！图文并茂！</p>\n<p>不过在提交的时候, 为避免项目太乱, 可以在根目录下创建一个以你github为名的文件夹(比如我的就是LinDaiDai)然后将你的文章或者案例都放在这个文件夹里面进行提交就可以了🎉 .</p>\n<p>后语<br>如果你也对bpmn.js 感兴趣的话, 欢迎加入我们的bpmn.js交流群, 一起学习, 一起进步💪.</p>\n<p><a href=\"https://github.com/LinDaiDai/bpmn-chinese-document\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n"},{"title":"利用gitlab-ci将前端项目在gitlab上持续集成","toc":false,"date":"2019-11-07T03:29:06.000Z","_content":"\n这个需求是这样的，希望代码提交以后能够对应的自动在服务器上拉取新代码，然后打包部署，并支持不同的环境，前端代码我们放在gitlab上，部署在centos7服务器上，具体步骤如下：\n\n<!--more-->\n\n## 下载安装git并配置ssh公钥\n使用yum下载git：\n```bash\nyum -y install git \n```\n配置ssh key公钥\n> 配置ssh公钥是为了在服务器自动获取gitlab上的代码时，可以免输入密码，用https的方式clone的话要手动输入账号密码，这样实现不了想要的自动化效果。\n\n生成ssh公钥\n```bash\nssh-keygen -o -t rsa -b 4096 -C \"liwenliang@aiforward.com\"\n```\n复制ssh公钥并粘贴到gitlab库\n![image.png](http://blogimage.houjiyi.com/FkuXT5CT_GzBYJ5wG76Rs0K5T3TO)\n\n## 克隆一份代码测试可用\n添加完成之后，我们直接在linux服务器上直接使用git clone  [SSH url] 指令，来测试刚刚配置的ssh公钥是否有效。注意这里是使用ssh链接clone，用http总要输入密码的。\n\n## 通过yum安装指定版本的nodejs\n不要使用nvm等版本工具来安装nodejs，这样在运行时会找不到nodejs，默认安装的nodejs版本太低不符合要求，因此要指定版本来安装，这里我使用10.x版本\n```bash\ncurl --silent --location https://rpm.nodesource.com/setup_10.x | sudo bash -\nyum install -y nodejs\nnpm config set registry https://registry.npm.taobao.org  # 指定淘宝镜像\nnpm config get registry  # 测试淘宝镜像可用\n```\n\n## 安装Gitlab Runner\n把gitlab-runner理解成一个服务，他会持续监测仓库的变化，并判断使用哪个runner实例来运行持续集成任务\n添加 GitLab's 官方仓库:\n```bash\ncurl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh | sudo bash\n```\n下载最新版 GitLab Runner：\n```bash\nsudo yum install gitlab-runner\n```\n\n## 注册gitlab-runner\n安装后要进行注册，把注册理解成一个个的runner实例，对应仓库项目里某个特定的集成环境，比如说A项目的prod集成环境，如果机器上有多个集成环境，则需要多次注册。\n\n这里特地查了一下gitlab-runner和gitlab-ci-multi-runner的区别，结论是使用gitlab-runner就行了，后者是前者的一个早期版本，我本地测试也是使用前者就行了\n\n```bash\nsudo gitlab-runner register # 注册gitlab-runner实例\n```\n- GitLab的url：指定gitlab域名\n- GitLab的token信息：对应项目的token，URL和token可在gitlab项目的Setting->CI/CD->Runners Setting->Expand中查看\n- runner的描述：一个容易记忆的名称，比如“A项目prod环境-xxx服务器”\n- runner的标签，用逗号分开：testtag，这个很重要，脚本的tags字段与这里是有对应关系的，用来指定脚本在哪个runner上执行，我们可以使用一定的规范来定义，比如线上环境叫prod，测试环境叫test\n- runner的执行者：shell，用来执行runner的程序，这里是shell\n\n> 注册好之后如果在gitlab-ci的界面上看到runner的旁边不是绿点，而是黑色三角的感叹号，可以使用 gitlab-runner start 或者 gitlab-runner run 的指令来开启runner的service\n![image.png](http://blogimage.houjiyi.com/Fo-Rr0iUpLZzqtz3fv7PsXAWK-U2)\n\n## 修改gitlab-runner文件夹权限\n注册完成后，将gitlab-runner文件夹的用户所属修改为gitlab-runner，这样gitlab-runner对其才会有执行权限。\n```bash\nsudo chown -R gitlab-runner:gitlab-runner /home/gitlab-runner\n```\n修改文件读写权限：\n```bash\nsudo chmod -R 777 /home/gitlab-runner\n```\n## gitlab-runner用户添加到root组并支持免密使用sudo\n由于我们的脚本执行的时候很容易遇到权限问题，因此使用这个方法可以保证脚本执行权限不会有问题\n- 添加sudo文件的写权限,命令是:\n```bash\nchmod u+w /etc/sudoers\n```\n- 编辑sudoers文件\n```bash\nvi /etc/sudoers\n```\n- 找到这行 root ALL=(ALL) ALL,在他下面添加xxx ALL=(ALL) ALL (这里的xxx是你的用户名)\n\nps:这里说下你可以sudoers添加下面四行中任意一条\n> youuser    ALL=(ALL)    ALL\n%youuser    ALL=(ALL)    ALL\nyouuser    ALL=(ALL)    NOPASSWD: ALL\n%youuser    ALL=(ALL)    NOPASSWD: ALL\n第一行:允许用户youuser执行sudo命令(需要输入密码).\n第二行:允许用户组youuser里面的用户执行sudo命令(需要输入密码).\n第三行:允许用户youuser执行sudo命令,并且在执行的时候不输入密码.\n第四行:允许用户组youuser里面的用户执行sudo命令,并且在执行的时候不输入密码.\n\n- 撤销sudoers文件写权限,命令:\n```bash\nchmod u-w /etc/sudoers\n```\n这样普通用户就可以使用sudo了.\n## 编写.gitlab-ci.yml文件\n这里就不详细解释了，把代码贴在这里吧，其中cache是为了不要每次都重新npm install一遍，tags对应gitlab-runner实例的tag，指定在哪个上边运行。\n\n脚本会默认运行在项目的根目录里边，安装--build--删除原始目录--将新生成的dist移动到对应目录\n\n```bash\ncache:\n  untracked: true\n  key: \"$CI_BUILD_REF_NAME\"\n  paths:\n    - node_modules/\n\nstages:\n  - deploy\n\ndeploy_stage:\n  stage: deploy\n  script:\n    - npm install\n    - npm run build\n    - sudo rm -rf /home/work/www/fe/ci_cd_demo/dist/\n    - sudo mv dist/ /home/work/www/fe/ci_cd_demo/\n  only:\n    - master\n  tags:\n    - testtag\n\n```\n\n这里还是要简要说明一个问题，yml文件里的tags指定了gitlab-runner实例所标识的tags，也就是这里指定了要运行哪个实例。\n\n同时还有一个地方需要注意，only不仅可以指定分支，还能够指定标签，这个功能很实用，比如我想在git上[prod-]开头的标签的提交运行我的构建，则需要这样指定即可：\n```bash\ncache:\n  untracked: true\n  key: \"$CI_BUILD_REF_NAME\"\n  paths:\n    - node_modules/\n\nstages:\n  - deploy\n\ndeploy_stage:\n  stage: deploy\n  script:\n    - sh ./ci/deploy_prod.sh\n  only:\n    - /^prod-.*$/\n  tags:\n    - prod\n```\n\n\n## 测试\n最后一步就是提交对应分支的代码，看运行结果了\n![image.png](http://blogimage.houjiyi.com/FjqfZmHbNRVXHTFt7sm5HfKwQRUl)\n\n## 写在后面 \n由于前端项目大部分都很类似，新项目，新子应用的代码结构和打包方式也都是类似的，因此，可以使用“组CI”的概念，目前用的就是这个，在FE组上创建CI，这样组下的所有项目只要再CI上开启的应用组配置，就可以做到子应用无需单独配置的目的，这个是非常方便的，避免了来一个项目就去配置一遍CI的麻烦： \n\n组上的CI配置： \n![image.png](https://blogimage.houjiyi.com/Fg7sYGs2W59oL4r4mXTFeijrEa2V)\n\n应用上的CI配置：\n![image.png](https://blogimage.houjiyi.com/FslBcwpGTVi0QGKMNs51GbruGZ8k)","source":"_posts/利用gitlab-ci将前端项目在gitlab上持续集成.md","raw":"---\ntitle: 利用gitlab-ci将前端项目在gitlab上持续集成\ntags:\n  - Web开发\n  - 开发调试\ncategories:\n  - Web开发\ntoc: false\ndate: 2019-11-07 11:29:06\n---\n\n这个需求是这样的，希望代码提交以后能够对应的自动在服务器上拉取新代码，然后打包部署，并支持不同的环境，前端代码我们放在gitlab上，部署在centos7服务器上，具体步骤如下：\n\n<!--more-->\n\n## 下载安装git并配置ssh公钥\n使用yum下载git：\n```bash\nyum -y install git \n```\n配置ssh key公钥\n> 配置ssh公钥是为了在服务器自动获取gitlab上的代码时，可以免输入密码，用https的方式clone的话要手动输入账号密码，这样实现不了想要的自动化效果。\n\n生成ssh公钥\n```bash\nssh-keygen -o -t rsa -b 4096 -C \"liwenliang@aiforward.com\"\n```\n复制ssh公钥并粘贴到gitlab库\n![image.png](http://blogimage.houjiyi.com/FkuXT5CT_GzBYJ5wG76Rs0K5T3TO)\n\n## 克隆一份代码测试可用\n添加完成之后，我们直接在linux服务器上直接使用git clone  [SSH url] 指令，来测试刚刚配置的ssh公钥是否有效。注意这里是使用ssh链接clone，用http总要输入密码的。\n\n## 通过yum安装指定版本的nodejs\n不要使用nvm等版本工具来安装nodejs，这样在运行时会找不到nodejs，默认安装的nodejs版本太低不符合要求，因此要指定版本来安装，这里我使用10.x版本\n```bash\ncurl --silent --location https://rpm.nodesource.com/setup_10.x | sudo bash -\nyum install -y nodejs\nnpm config set registry https://registry.npm.taobao.org  # 指定淘宝镜像\nnpm config get registry  # 测试淘宝镜像可用\n```\n\n## 安装Gitlab Runner\n把gitlab-runner理解成一个服务，他会持续监测仓库的变化，并判断使用哪个runner实例来运行持续集成任务\n添加 GitLab's 官方仓库:\n```bash\ncurl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh | sudo bash\n```\n下载最新版 GitLab Runner：\n```bash\nsudo yum install gitlab-runner\n```\n\n## 注册gitlab-runner\n安装后要进行注册，把注册理解成一个个的runner实例，对应仓库项目里某个特定的集成环境，比如说A项目的prod集成环境，如果机器上有多个集成环境，则需要多次注册。\n\n这里特地查了一下gitlab-runner和gitlab-ci-multi-runner的区别，结论是使用gitlab-runner就行了，后者是前者的一个早期版本，我本地测试也是使用前者就行了\n\n```bash\nsudo gitlab-runner register # 注册gitlab-runner实例\n```\n- GitLab的url：指定gitlab域名\n- GitLab的token信息：对应项目的token，URL和token可在gitlab项目的Setting->CI/CD->Runners Setting->Expand中查看\n- runner的描述：一个容易记忆的名称，比如“A项目prod环境-xxx服务器”\n- runner的标签，用逗号分开：testtag，这个很重要，脚本的tags字段与这里是有对应关系的，用来指定脚本在哪个runner上执行，我们可以使用一定的规范来定义，比如线上环境叫prod，测试环境叫test\n- runner的执行者：shell，用来执行runner的程序，这里是shell\n\n> 注册好之后如果在gitlab-ci的界面上看到runner的旁边不是绿点，而是黑色三角的感叹号，可以使用 gitlab-runner start 或者 gitlab-runner run 的指令来开启runner的service\n![image.png](http://blogimage.houjiyi.com/Fo-Rr0iUpLZzqtz3fv7PsXAWK-U2)\n\n## 修改gitlab-runner文件夹权限\n注册完成后，将gitlab-runner文件夹的用户所属修改为gitlab-runner，这样gitlab-runner对其才会有执行权限。\n```bash\nsudo chown -R gitlab-runner:gitlab-runner /home/gitlab-runner\n```\n修改文件读写权限：\n```bash\nsudo chmod -R 777 /home/gitlab-runner\n```\n## gitlab-runner用户添加到root组并支持免密使用sudo\n由于我们的脚本执行的时候很容易遇到权限问题，因此使用这个方法可以保证脚本执行权限不会有问题\n- 添加sudo文件的写权限,命令是:\n```bash\nchmod u+w /etc/sudoers\n```\n- 编辑sudoers文件\n```bash\nvi /etc/sudoers\n```\n- 找到这行 root ALL=(ALL) ALL,在他下面添加xxx ALL=(ALL) ALL (这里的xxx是你的用户名)\n\nps:这里说下你可以sudoers添加下面四行中任意一条\n> youuser    ALL=(ALL)    ALL\n%youuser    ALL=(ALL)    ALL\nyouuser    ALL=(ALL)    NOPASSWD: ALL\n%youuser    ALL=(ALL)    NOPASSWD: ALL\n第一行:允许用户youuser执行sudo命令(需要输入密码).\n第二行:允许用户组youuser里面的用户执行sudo命令(需要输入密码).\n第三行:允许用户youuser执行sudo命令,并且在执行的时候不输入密码.\n第四行:允许用户组youuser里面的用户执行sudo命令,并且在执行的时候不输入密码.\n\n- 撤销sudoers文件写权限,命令:\n```bash\nchmod u-w /etc/sudoers\n```\n这样普通用户就可以使用sudo了.\n## 编写.gitlab-ci.yml文件\n这里就不详细解释了，把代码贴在这里吧，其中cache是为了不要每次都重新npm install一遍，tags对应gitlab-runner实例的tag，指定在哪个上边运行。\n\n脚本会默认运行在项目的根目录里边，安装--build--删除原始目录--将新生成的dist移动到对应目录\n\n```bash\ncache:\n  untracked: true\n  key: \"$CI_BUILD_REF_NAME\"\n  paths:\n    - node_modules/\n\nstages:\n  - deploy\n\ndeploy_stage:\n  stage: deploy\n  script:\n    - npm install\n    - npm run build\n    - sudo rm -rf /home/work/www/fe/ci_cd_demo/dist/\n    - sudo mv dist/ /home/work/www/fe/ci_cd_demo/\n  only:\n    - master\n  tags:\n    - testtag\n\n```\n\n这里还是要简要说明一个问题，yml文件里的tags指定了gitlab-runner实例所标识的tags，也就是这里指定了要运行哪个实例。\n\n同时还有一个地方需要注意，only不仅可以指定分支，还能够指定标签，这个功能很实用，比如我想在git上[prod-]开头的标签的提交运行我的构建，则需要这样指定即可：\n```bash\ncache:\n  untracked: true\n  key: \"$CI_BUILD_REF_NAME\"\n  paths:\n    - node_modules/\n\nstages:\n  - deploy\n\ndeploy_stage:\n  stage: deploy\n  script:\n    - sh ./ci/deploy_prod.sh\n  only:\n    - /^prod-.*$/\n  tags:\n    - prod\n```\n\n\n## 测试\n最后一步就是提交对应分支的代码，看运行结果了\n![image.png](http://blogimage.houjiyi.com/FjqfZmHbNRVXHTFt7sm5HfKwQRUl)\n\n## 写在后面 \n由于前端项目大部分都很类似，新项目，新子应用的代码结构和打包方式也都是类似的，因此，可以使用“组CI”的概念，目前用的就是这个，在FE组上创建CI，这样组下的所有项目只要再CI上开启的应用组配置，就可以做到子应用无需单独配置的目的，这个是非常方便的，避免了来一个项目就去配置一遍CI的麻烦： \n\n组上的CI配置： \n![image.png](https://blogimage.houjiyi.com/Fg7sYGs2W59oL4r4mXTFeijrEa2V)\n\n应用上的CI配置：\n![image.png](https://blogimage.houjiyi.com/FslBcwpGTVi0QGKMNs51GbruGZ8k)","slug":"利用gitlab-ci将前端项目在gitlab上持续集成","published":1,"updated":"2021-09-06T03:42:59.332Z","_id":"ckockzo0t0084h5s6vb5wutjc","comments":1,"layout":"post","photos":[],"link":"","content":"<p>这个需求是这样的，希望代码提交以后能够对应的自动在服务器上拉取新代码，然后打包部署，并支持不同的环境，前端代码我们放在gitlab上，部署在centos7服务器上，具体步骤如下：</p>\n<a id=\"more\"></a>\n<h2 id=\"下载安装git并配置ssh公钥\"><a href=\"#下载安装git并配置ssh公钥\" class=\"headerlink\" title=\"下载安装git并配置ssh公钥\"></a>下载安装git并配置ssh公钥</h2><p>使用yum下载git：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install git</span><br></pre></td></tr></table></figure></p>\n<p>配置ssh key公钥</p>\n<blockquote>\n<p>配置ssh公钥是为了在服务器自动获取gitlab上的代码时，可以免输入密码，用https的方式clone的话要手动输入账号密码，这样实现不了想要的自动化效果。</p>\n</blockquote>\n<p>生成ssh公钥<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -o -t rsa -b 4096 -C <span class=\"string\">\"liwenliang@aiforward.com\"</span></span><br></pre></td></tr></table></figure></p>\n<p>复制ssh公钥并粘贴到gitlab库<br><img src=\"http://blogimage.houjiyi.com/FkuXT5CT_GzBYJ5wG76Rs0K5T3TO\" alt=\"image.png\"></p>\n<h2 id=\"克隆一份代码测试可用\"><a href=\"#克隆一份代码测试可用\" class=\"headerlink\" title=\"克隆一份代码测试可用\"></a>克隆一份代码测试可用</h2><p>添加完成之后，我们直接在linux服务器上直接使用git clone  [SSH url] 指令，来测试刚刚配置的ssh公钥是否有效。注意这里是使用ssh链接clone，用http总要输入密码的。</p>\n<h2 id=\"通过yum安装指定版本的nodejs\"><a href=\"#通过yum安装指定版本的nodejs\" class=\"headerlink\" title=\"通过yum安装指定版本的nodejs\"></a>通过yum安装指定版本的nodejs</h2><p>不要使用nvm等版本工具来安装nodejs，这样在运行时会找不到nodejs，默认安装的nodejs版本太低不符合要求，因此要指定版本来安装，这里我使用10.x版本<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --silent --location https://rpm.nodesource.com/setup_10.x | sudo bash -</span><br><span class=\"line\">yum install -y nodejs</span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org  <span class=\"comment\"># 指定淘宝镜像</span></span><br><span class=\"line\">npm config get registry  <span class=\"comment\"># 测试淘宝镜像可用</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"安装Gitlab-Runner\"><a href=\"#安装Gitlab-Runner\" class=\"headerlink\" title=\"安装Gitlab Runner\"></a>安装Gitlab Runner</h2><p>把gitlab-runner理解成一个服务，他会持续监测仓库的变化，并判断使用哪个runner实例来运行持续集成任务<br>添加 GitLab’s 官方仓库:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure></p>\n<p>下载最新版 GitLab Runner：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install gitlab-runner</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"注册gitlab-runner\"><a href=\"#注册gitlab-runner\" class=\"headerlink\" title=\"注册gitlab-runner\"></a>注册gitlab-runner</h2><p>安装后要进行注册，把注册理解成一个个的runner实例，对应仓库项目里某个特定的集成环境，比如说A项目的prod集成环境，如果机器上有多个集成环境，则需要多次注册。</p>\n<p>这里特地查了一下gitlab-runner和gitlab-ci-multi-runner的区别，结论是使用gitlab-runner就行了，后者是前者的一个早期版本，我本地测试也是使用前者就行了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gitlab-runner register <span class=\"comment\"># 注册gitlab-runner实例</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>GitLab的url：指定gitlab域名</li>\n<li>GitLab的token信息：对应项目的token，URL和token可在gitlab项目的Setting-&gt;CI/CD-&gt;Runners Setting-&gt;Expand中查看</li>\n<li>runner的描述：一个容易记忆的名称，比如“A项目prod环境-xxx服务器”</li>\n<li>runner的标签，用逗号分开：testtag，这个很重要，脚本的tags字段与这里是有对应关系的，用来指定脚本在哪个runner上执行，我们可以使用一定的规范来定义，比如线上环境叫prod，测试环境叫test</li>\n<li>runner的执行者：shell，用来执行runner的程序，这里是shell</li>\n</ul>\n<blockquote>\n<p>注册好之后如果在gitlab-ci的界面上看到runner的旁边不是绿点，而是黑色三角的感叹号，可以使用 gitlab-runner start 或者 gitlab-runner run 的指令来开启runner的service<br><img src=\"http://blogimage.houjiyi.com/Fo-Rr0iUpLZzqtz3fv7PsXAWK-U2\" alt=\"image.png\"></p>\n</blockquote>\n<h2 id=\"修改gitlab-runner文件夹权限\"><a href=\"#修改gitlab-runner文件夹权限\" class=\"headerlink\" title=\"修改gitlab-runner文件夹权限\"></a>修改gitlab-runner文件夹权限</h2><p>注册完成后，将gitlab-runner文件夹的用户所属修改为gitlab-runner，这样gitlab-runner对其才会有执行权限。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chown -R gitlab-runner:gitlab-runner /home/gitlab-runner</span><br></pre></td></tr></table></figure></p>\n<p>修改文件读写权限：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod -R 777 /home/gitlab-runner</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"gitlab-runner用户添加到root组并支持免密使用sudo\"><a href=\"#gitlab-runner用户添加到root组并支持免密使用sudo\" class=\"headerlink\" title=\"gitlab-runner用户添加到root组并支持免密使用sudo\"></a>gitlab-runner用户添加到root组并支持免密使用sudo</h2><p>由于我们的脚本执行的时候很容易遇到权限问题，因此使用这个方法可以保证脚本执行权限不会有问题</p>\n<ul>\n<li><p>添加sudo文件的写权限,命令是:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod u+w /etc/sudoers</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑sudoers文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/sudoers</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>找到这行 root ALL=(ALL) ALL,在他下面添加xxx ALL=(ALL) ALL (这里的xxx是你的用户名)</p>\n</li>\n</ul>\n<p>ps:这里说下你可以sudoers添加下面四行中任意一条</p>\n<blockquote>\n<p>youuser    ALL=(ALL)    ALL<br>%youuser    ALL=(ALL)    ALL<br>youuser    ALL=(ALL)    NOPASSWD: ALL<br>%youuser    ALL=(ALL)    NOPASSWD: ALL<br>第一行:允许用户youuser执行sudo命令(需要输入密码).<br>第二行:允许用户组youuser里面的用户执行sudo命令(需要输入密码).<br>第三行:允许用户youuser执行sudo命令,并且在执行的时候不输入密码.<br>第四行:允许用户组youuser里面的用户执行sudo命令,并且在执行的时候不输入密码.</p>\n</blockquote>\n<ul>\n<li>撤销sudoers文件写权限,命令:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod u-w /etc/sudoers</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这样普通用户就可以使用sudo了.</p>\n<h2 id=\"编写-gitlab-ci-yml文件\"><a href=\"#编写-gitlab-ci-yml文件\" class=\"headerlink\" title=\"编写.gitlab-ci.yml文件\"></a>编写.gitlab-ci.yml文件</h2><p>这里就不详细解释了，把代码贴在这里吧，其中cache是为了不要每次都重新npm install一遍，tags对应gitlab-runner实例的tag，指定在哪个上边运行。</p>\n<p>脚本会默认运行在项目的根目录里边，安装–build–删除原始目录–将新生成的dist移动到对应目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cache:</span><br><span class=\"line\">  untracked: <span class=\"literal\">true</span></span><br><span class=\"line\">  key: <span class=\"string\">\"<span class=\"variable\">$CI_BUILD_REF_NAME</span>\"</span></span><br><span class=\"line\">  paths:</span><br><span class=\"line\">    - node_modules/</span><br><span class=\"line\"></span><br><span class=\"line\">stages:</span><br><span class=\"line\">  - deploy</span><br><span class=\"line\"></span><br><span class=\"line\">deploy_stage:</span><br><span class=\"line\">  stage: deploy</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    - npm install</span><br><span class=\"line\">    - npm run build</span><br><span class=\"line\">    - sudo rm -rf /home/work/www/fe/ci_cd_demo/dist/</span><br><span class=\"line\">    - sudo mv dist/ /home/work/www/fe/ci_cd_demo/</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    - master</span><br><span class=\"line\">  tags:</span><br><span class=\"line\">    - testtag</span><br></pre></td></tr></table></figure>\n<p>这里还是要简要说明一个问题，yml文件里的tags指定了gitlab-runner实例所标识的tags，也就是这里指定了要运行哪个实例。</p>\n<p>同时还有一个地方需要注意，only不仅可以指定分支，还能够指定标签，这个功能很实用，比如我想在git上[prod-]开头的标签的提交运行我的构建，则需要这样指定即可：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cache:</span><br><span class=\"line\">  untracked: <span class=\"literal\">true</span></span><br><span class=\"line\">  key: <span class=\"string\">\"<span class=\"variable\">$CI_BUILD_REF_NAME</span>\"</span></span><br><span class=\"line\">  paths:</span><br><span class=\"line\">    - node_modules/</span><br><span class=\"line\"></span><br><span class=\"line\">stages:</span><br><span class=\"line\">  - deploy</span><br><span class=\"line\"></span><br><span class=\"line\">deploy_stage:</span><br><span class=\"line\">  stage: deploy</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    - sh ./ci/deploy_prod.sh</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    - /^prod-.*$/</span><br><span class=\"line\">  tags:</span><br><span class=\"line\">    - prod</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>最后一步就是提交对应分支的代码，看运行结果了<br><img src=\"http://blogimage.houjiyi.com/FjqfZmHbNRVXHTFt7sm5HfKwQRUl\" alt=\"image.png\"></p>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><p>由于前端项目大部分都很类似，新项目，新子应用的代码结构和打包方式也都是类似的，因此，可以使用“组CI”的概念，目前用的就是这个，在FE组上创建CI，这样组下的所有项目只要再CI上开启的应用组配置，就可以做到子应用无需单独配置的目的，这个是非常方便的，避免了来一个项目就去配置一遍CI的麻烦： </p>\n<p>组上的CI配置：<br><img src=\"https://blogimage.houjiyi.com/Fg7sYGs2W59oL4r4mXTFeijrEa2V\" alt=\"image.png\"></p>\n<p>应用上的CI配置：<br><img src=\"https://blogimage.houjiyi.com/FslBcwpGTVi0QGKMNs51GbruGZ8k\" alt=\"image.png\"></p>\n","site":{"data":{}},"excerpt":"<p>这个需求是这样的，希望代码提交以后能够对应的自动在服务器上拉取新代码，然后打包部署，并支持不同的环境，前端代码我们放在gitlab上，部署在centos7服务器上，具体步骤如下：</p>","more":"<h2 id=\"下载安装git并配置ssh公钥\"><a href=\"#下载安装git并配置ssh公钥\" class=\"headerlink\" title=\"下载安装git并配置ssh公钥\"></a>下载安装git并配置ssh公钥</h2><p>使用yum下载git：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install git</span><br></pre></td></tr></table></figure></p>\n<p>配置ssh key公钥</p>\n<blockquote>\n<p>配置ssh公钥是为了在服务器自动获取gitlab上的代码时，可以免输入密码，用https的方式clone的话要手动输入账号密码，这样实现不了想要的自动化效果。</p>\n</blockquote>\n<p>生成ssh公钥<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -o -t rsa -b 4096 -C <span class=\"string\">\"liwenliang@aiforward.com\"</span></span><br></pre></td></tr></table></figure></p>\n<p>复制ssh公钥并粘贴到gitlab库<br><img src=\"http://blogimage.houjiyi.com/FkuXT5CT_GzBYJ5wG76Rs0K5T3TO\" alt=\"image.png\"></p>\n<h2 id=\"克隆一份代码测试可用\"><a href=\"#克隆一份代码测试可用\" class=\"headerlink\" title=\"克隆一份代码测试可用\"></a>克隆一份代码测试可用</h2><p>添加完成之后，我们直接在linux服务器上直接使用git clone  [SSH url] 指令，来测试刚刚配置的ssh公钥是否有效。注意这里是使用ssh链接clone，用http总要输入密码的。</p>\n<h2 id=\"通过yum安装指定版本的nodejs\"><a href=\"#通过yum安装指定版本的nodejs\" class=\"headerlink\" title=\"通过yum安装指定版本的nodejs\"></a>通过yum安装指定版本的nodejs</h2><p>不要使用nvm等版本工具来安装nodejs，这样在运行时会找不到nodejs，默认安装的nodejs版本太低不符合要求，因此要指定版本来安装，这里我使用10.x版本<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --silent --location https://rpm.nodesource.com/setup_10.x | sudo bash -</span><br><span class=\"line\">yum install -y nodejs</span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org  <span class=\"comment\"># 指定淘宝镜像</span></span><br><span class=\"line\">npm config get registry  <span class=\"comment\"># 测试淘宝镜像可用</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"安装Gitlab-Runner\"><a href=\"#安装Gitlab-Runner\" class=\"headerlink\" title=\"安装Gitlab Runner\"></a>安装Gitlab Runner</h2><p>把gitlab-runner理解成一个服务，他会持续监测仓库的变化，并判断使用哪个runner实例来运行持续集成任务<br>添加 GitLab’s 官方仓库:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure></p>\n<p>下载最新版 GitLab Runner：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install gitlab-runner</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"注册gitlab-runner\"><a href=\"#注册gitlab-runner\" class=\"headerlink\" title=\"注册gitlab-runner\"></a>注册gitlab-runner</h2><p>安装后要进行注册，把注册理解成一个个的runner实例，对应仓库项目里某个特定的集成环境，比如说A项目的prod集成环境，如果机器上有多个集成环境，则需要多次注册。</p>\n<p>这里特地查了一下gitlab-runner和gitlab-ci-multi-runner的区别，结论是使用gitlab-runner就行了，后者是前者的一个早期版本，我本地测试也是使用前者就行了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gitlab-runner register <span class=\"comment\"># 注册gitlab-runner实例</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>GitLab的url：指定gitlab域名</li>\n<li>GitLab的token信息：对应项目的token，URL和token可在gitlab项目的Setting-&gt;CI/CD-&gt;Runners Setting-&gt;Expand中查看</li>\n<li>runner的描述：一个容易记忆的名称，比如“A项目prod环境-xxx服务器”</li>\n<li>runner的标签，用逗号分开：testtag，这个很重要，脚本的tags字段与这里是有对应关系的，用来指定脚本在哪个runner上执行，我们可以使用一定的规范来定义，比如线上环境叫prod，测试环境叫test</li>\n<li>runner的执行者：shell，用来执行runner的程序，这里是shell</li>\n</ul>\n<blockquote>\n<p>注册好之后如果在gitlab-ci的界面上看到runner的旁边不是绿点，而是黑色三角的感叹号，可以使用 gitlab-runner start 或者 gitlab-runner run 的指令来开启runner的service<br><img src=\"http://blogimage.houjiyi.com/Fo-Rr0iUpLZzqtz3fv7PsXAWK-U2\" alt=\"image.png\"></p>\n</blockquote>\n<h2 id=\"修改gitlab-runner文件夹权限\"><a href=\"#修改gitlab-runner文件夹权限\" class=\"headerlink\" title=\"修改gitlab-runner文件夹权限\"></a>修改gitlab-runner文件夹权限</h2><p>注册完成后，将gitlab-runner文件夹的用户所属修改为gitlab-runner，这样gitlab-runner对其才会有执行权限。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chown -R gitlab-runner:gitlab-runner /home/gitlab-runner</span><br></pre></td></tr></table></figure></p>\n<p>修改文件读写权限：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod -R 777 /home/gitlab-runner</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"gitlab-runner用户添加到root组并支持免密使用sudo\"><a href=\"#gitlab-runner用户添加到root组并支持免密使用sudo\" class=\"headerlink\" title=\"gitlab-runner用户添加到root组并支持免密使用sudo\"></a>gitlab-runner用户添加到root组并支持免密使用sudo</h2><p>由于我们的脚本执行的时候很容易遇到权限问题，因此使用这个方法可以保证脚本执行权限不会有问题</p>\n<ul>\n<li><p>添加sudo文件的写权限,命令是:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod u+w /etc/sudoers</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑sudoers文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/sudoers</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>找到这行 root ALL=(ALL) ALL,在他下面添加xxx ALL=(ALL) ALL (这里的xxx是你的用户名)</p>\n</li>\n</ul>\n<p>ps:这里说下你可以sudoers添加下面四行中任意一条</p>\n<blockquote>\n<p>youuser    ALL=(ALL)    ALL<br>%youuser    ALL=(ALL)    ALL<br>youuser    ALL=(ALL)    NOPASSWD: ALL<br>%youuser    ALL=(ALL)    NOPASSWD: ALL<br>第一行:允许用户youuser执行sudo命令(需要输入密码).<br>第二行:允许用户组youuser里面的用户执行sudo命令(需要输入密码).<br>第三行:允许用户youuser执行sudo命令,并且在执行的时候不输入密码.<br>第四行:允许用户组youuser里面的用户执行sudo命令,并且在执行的时候不输入密码.</p>\n</blockquote>\n<ul>\n<li>撤销sudoers文件写权限,命令:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod u-w /etc/sudoers</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这样普通用户就可以使用sudo了.</p>\n<h2 id=\"编写-gitlab-ci-yml文件\"><a href=\"#编写-gitlab-ci-yml文件\" class=\"headerlink\" title=\"编写.gitlab-ci.yml文件\"></a>编写.gitlab-ci.yml文件</h2><p>这里就不详细解释了，把代码贴在这里吧，其中cache是为了不要每次都重新npm install一遍，tags对应gitlab-runner实例的tag，指定在哪个上边运行。</p>\n<p>脚本会默认运行在项目的根目录里边，安装–build–删除原始目录–将新生成的dist移动到对应目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cache:</span><br><span class=\"line\">  untracked: <span class=\"literal\">true</span></span><br><span class=\"line\">  key: <span class=\"string\">\"<span class=\"variable\">$CI_BUILD_REF_NAME</span>\"</span></span><br><span class=\"line\">  paths:</span><br><span class=\"line\">    - node_modules/</span><br><span class=\"line\"></span><br><span class=\"line\">stages:</span><br><span class=\"line\">  - deploy</span><br><span class=\"line\"></span><br><span class=\"line\">deploy_stage:</span><br><span class=\"line\">  stage: deploy</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    - npm install</span><br><span class=\"line\">    - npm run build</span><br><span class=\"line\">    - sudo rm -rf /home/work/www/fe/ci_cd_demo/dist/</span><br><span class=\"line\">    - sudo mv dist/ /home/work/www/fe/ci_cd_demo/</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    - master</span><br><span class=\"line\">  tags:</span><br><span class=\"line\">    - testtag</span><br></pre></td></tr></table></figure>\n<p>这里还是要简要说明一个问题，yml文件里的tags指定了gitlab-runner实例所标识的tags，也就是这里指定了要运行哪个实例。</p>\n<p>同时还有一个地方需要注意，only不仅可以指定分支，还能够指定标签，这个功能很实用，比如我想在git上[prod-]开头的标签的提交运行我的构建，则需要这样指定即可：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cache:</span><br><span class=\"line\">  untracked: <span class=\"literal\">true</span></span><br><span class=\"line\">  key: <span class=\"string\">\"<span class=\"variable\">$CI_BUILD_REF_NAME</span>\"</span></span><br><span class=\"line\">  paths:</span><br><span class=\"line\">    - node_modules/</span><br><span class=\"line\"></span><br><span class=\"line\">stages:</span><br><span class=\"line\">  - deploy</span><br><span class=\"line\"></span><br><span class=\"line\">deploy_stage:</span><br><span class=\"line\">  stage: deploy</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    - sh ./ci/deploy_prod.sh</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    - /^prod-.*$/</span><br><span class=\"line\">  tags:</span><br><span class=\"line\">    - prod</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>最后一步就是提交对应分支的代码，看运行结果了<br><img src=\"http://blogimage.houjiyi.com/FjqfZmHbNRVXHTFt7sm5HfKwQRUl\" alt=\"image.png\"></p>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><p>由于前端项目大部分都很类似，新项目，新子应用的代码结构和打包方式也都是类似的，因此，可以使用“组CI”的概念，目前用的就是这个，在FE组上创建CI，这样组下的所有项目只要再CI上开启的应用组配置，就可以做到子应用无需单独配置的目的，这个是非常方便的，避免了来一个项目就去配置一遍CI的麻烦： </p>\n<p>组上的CI配置：<br><img src=\"https://blogimage.houjiyi.com/Fg7sYGs2W59oL4r4mXTFeijrEa2V\" alt=\"image.png\"></p>\n<p>应用上的CI配置：<br><img src=\"https://blogimage.houjiyi.com/FslBcwpGTVi0QGKMNs51GbruGZ8k\" alt=\"image.png\"></p>"},{"title":"升级Jenkins方法","toc":false,"date":"2017-08-26T22:17:10.000Z","_content":"\n今天打开jenkins提示可以升级，于是按照提示点击下载，得到一个war包，因为使用的docker环境，这时候进入到对应的docker容器：\n\n<!-- more -->\n\n1. 进入到jenkins容器：nsenter --target [容器pid] --mount --uts --ipc --net --pid\n\n2. ps -aux | grep jenkins   查看jenkins安装路径\n\n\t```\n\t    jenkins      1  0.0  0.0   3144   244 ?        Ss   22:12   0:00 /bin/tini -- /usr/local/bin/jenkins.sh   \n\t    jenkins      5  4.7 19.8 2317472 201948 ?      Sl   22:12   0:35 java -jar /usr/share/jenkins/jenkins.war\n\t    root        163  0.0  0.0  13152   704 ?       S+   22:25   0:00 grep jenkins                             \n\t```\n\n3. cd /usr/share/jenkins/   进入jenkins目录\n\n4. cp jenkins.war jenkins.war.bak   备份一下，出问题时可以恢复\n\n5. wget wget https://mirrors.tuna.tsinghua.edu.cn/jenkins/war-stable/2.60.3/jenkins.war   这个链接地址就是jenkins里提示的下载按钮的链接地址\n\n6. 删除原来的jenkins.war 下载下来的是jenkins.war.1 重命名为jenkins.war即可：\n\n\t```\n\trm jenkins.war; \n\tmv jenkins.war.1 jenkins.war\n\t```\n\n7. 完成之后exit退出容器，重启容器，docker restart [容器id]\n","source":"_posts/升级Jenkins方法.md","raw":"---\ntitle: 升级Jenkins方法\ntags:\n  - jenkins\n  - docker\ncategories:\n  - 后端开发\ntoc: false\ndate: 2017-08-27 06:17:10\n---\n\n今天打开jenkins提示可以升级，于是按照提示点击下载，得到一个war包，因为使用的docker环境，这时候进入到对应的docker容器：\n\n<!-- more -->\n\n1. 进入到jenkins容器：nsenter --target [容器pid] --mount --uts --ipc --net --pid\n\n2. ps -aux | grep jenkins   查看jenkins安装路径\n\n\t```\n\t    jenkins      1  0.0  0.0   3144   244 ?        Ss   22:12   0:00 /bin/tini -- /usr/local/bin/jenkins.sh   \n\t    jenkins      5  4.7 19.8 2317472 201948 ?      Sl   22:12   0:35 java -jar /usr/share/jenkins/jenkins.war\n\t    root        163  0.0  0.0  13152   704 ?       S+   22:25   0:00 grep jenkins                             \n\t```\n\n3. cd /usr/share/jenkins/   进入jenkins目录\n\n4. cp jenkins.war jenkins.war.bak   备份一下，出问题时可以恢复\n\n5. wget wget https://mirrors.tuna.tsinghua.edu.cn/jenkins/war-stable/2.60.3/jenkins.war   这个链接地址就是jenkins里提示的下载按钮的链接地址\n\n6. 删除原来的jenkins.war 下载下来的是jenkins.war.1 重命名为jenkins.war即可：\n\n\t```\n\trm jenkins.war; \n\tmv jenkins.war.1 jenkins.war\n\t```\n\n7. 完成之后exit退出容器，重启容器，docker restart [容器id]\n","slug":"升级Jenkins方法","published":1,"updated":"2019-11-07T02:24:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo0v0087h5s6djs1iae7","content":"<p>今天打开jenkins提示可以升级，于是按照提示点击下载，得到一个war包，因为使用的docker环境，这时候进入到对应的docker容器：</p>\n<a id=\"more\"></a>\n<ol>\n<li><p>进入到jenkins容器：nsenter –target [容器pid] –mount –uts –ipc –net –pid</p>\n</li>\n<li><p>ps -aux | grep jenkins   查看jenkins安装路径</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jenkins      1  0.0  0.0   3144   244 ?        Ss   22:12   0:00 /bin/tini -- /usr/local/bin/jenkins.sh   </span><br><span class=\"line\">jenkins      5  4.7 19.8 2317472 201948 ?      Sl   22:12   0:35 java -jar /usr/share/jenkins/jenkins.war</span><br><span class=\"line\">root        163  0.0  0.0  13152   704 ?       S+   22:25   0:00 grep jenkins</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>cd /usr/share/jenkins/   进入jenkins目录</p>\n</li>\n<li><p>cp jenkins.war jenkins.war.bak   备份一下，出问题时可以恢复</p>\n</li>\n<li><p>wget wget <a href=\"https://mirrors.tuna.tsinghua.edu.cn/jenkins/war-stable/2.60.3/jenkins.war\" target=\"_blank\" rel=\"noopener\">https://mirrors.tuna.tsinghua.edu.cn/jenkins/war-stable/2.60.3/jenkins.war</a>   这个链接地址就是jenkins里提示的下载按钮的链接地址</p>\n</li>\n<li><p>删除原来的jenkins.war 下载下来的是jenkins.war.1 重命名为jenkins.war即可：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm jenkins.war; </span><br><span class=\"line\">mv jenkins.war.1 jenkins.war</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成之后exit退出容器，重启容器，docker restart [容器id]</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>今天打开jenkins提示可以升级，于是按照提示点击下载，得到一个war包，因为使用的docker环境，这时候进入到对应的docker容器：</p>","more":"<ol>\n<li><p>进入到jenkins容器：nsenter –target [容器pid] –mount –uts –ipc –net –pid</p>\n</li>\n<li><p>ps -aux | grep jenkins   查看jenkins安装路径</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jenkins      1  0.0  0.0   3144   244 ?        Ss   22:12   0:00 /bin/tini -- /usr/local/bin/jenkins.sh   </span><br><span class=\"line\">jenkins      5  4.7 19.8 2317472 201948 ?      Sl   22:12   0:35 java -jar /usr/share/jenkins/jenkins.war</span><br><span class=\"line\">root        163  0.0  0.0  13152   704 ?       S+   22:25   0:00 grep jenkins</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>cd /usr/share/jenkins/   进入jenkins目录</p>\n</li>\n<li><p>cp jenkins.war jenkins.war.bak   备份一下，出问题时可以恢复</p>\n</li>\n<li><p>wget wget <a href=\"https://mirrors.tuna.tsinghua.edu.cn/jenkins/war-stable/2.60.3/jenkins.war\" target=\"_blank\" rel=\"noopener\">https://mirrors.tuna.tsinghua.edu.cn/jenkins/war-stable/2.60.3/jenkins.war</a>   这个链接地址就是jenkins里提示的下载按钮的链接地址</p>\n</li>\n<li><p>删除原来的jenkins.war 下载下来的是jenkins.war.1 重命名为jenkins.war即可：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm jenkins.war; </span><br><span class=\"line\">mv jenkins.war.1 jenkins.war</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成之后exit退出容器，重启容器，docker restart [容器id]</p>\n</li>\n</ol>"},{"title":"去掉页面的title标题，同时不显示默认链接","toc":false,"date":"2019-08-07T01:43:43.000Z","_content":"\n有时候我们需要页面的title不显示，尤其在移动端APP内嵌一个网页的时候，有个标题或者标题为空默认显示页面链接都不太友好，这时候有个简单方式可以处理：\n```javascript\ndocument.title = '\\u200E'\n```\n加了以后就没了，亲测可行。\n","source":"_posts/去掉页面的title标题，同时不显示默认链接.md","raw":"---\ntitle: 去掉页面的title标题，同时不显示默认链接\ntags:\n  - 知识点备忘\ncategories:\n  - 移动开发\n  - Web开发\ntoc: false\ndate: 2019-08-07 09:43:43\n---\n\n有时候我们需要页面的title不显示，尤其在移动端APP内嵌一个网页的时候，有个标题或者标题为空默认显示页面链接都不太友好，这时候有个简单方式可以处理：\n```javascript\ndocument.title = '\\u200E'\n```\n加了以后就没了，亲测可行。\n","slug":"去掉页面的title标题，同时不显示默认链接","published":1,"updated":"2019-11-07T02:24:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo0x008ah5s6f50qy7yj","content":"<p>有时候我们需要页面的title不显示，尤其在移动端APP内嵌一个网页的时候，有个标题或者标题为空默认显示页面链接都不太友好，这时候有个简单方式可以处理：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.title = <span class=\"string\">'\\u200E'</span></span><br></pre></td></tr></table></figure></p>\n<p>加了以后就没了，亲测可行。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>有时候我们需要页面的title不显示，尤其在移动端APP内嵌一个网页的时候，有个标题或者标题为空默认显示页面链接都不太友好，这时候有个简单方式可以处理：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.title = <span class=\"string\">'\\u200E'</span></span><br></pre></td></tr></table></figure></p>\n<p>加了以后就没了，亲测可行。</p>\n"},{"title":"前端面试题","toc":false,"date":"2019-04-21T04:43:37.000Z","_content":"\nHTML/CSS部分\n1.HTML5为什么只需要写`<!DOCTYPE HTML>`?\n\n回答：\n1. 因为HTML5不是SGML的子集，所以不需要DTD引用，但是需要DOCTYPE来规范行为；\n2. 而HTML4.01是基于SGML，所以需要DTD引用，来告诉浏览器文档所使用的文档类型。\n\n<!-- more -->\n\n2.Doctype作用？标准模式与兼容模式各有什么区别? \n回答：\n1. Doctype用于向浏览器申明使用标准模式来解析文档；\n2. 标准模式是以浏览器最高级别来解析文档，而兼容模式是以向后兼容的方式来解析文档。\n\n3.行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？\n回答：\n1. 行内元素：a、b、span、img、input、strong、select、label、em、button、textarea；\n2. 块级元素：div、ul、li、dl、dt、dd、p、h1-h6、blockquote；\n3. 空元素：即系没有内容的HTML元素，例如：br、meta、hr、link、input、img；\n4. 在CSS规范中，每个元素都有display属性。display属性值为block的是块级元素，display属性值为inline的是行内元素。\n\n4.页面导入样式时，使用link和@import有什么区别？ \n回答：\n1. link 在浏览器页面的时候并行加载，而@import需要等页面加载完成后才会加载；\n2. link 是 XHML标签不存在兼容问题，而@import是css2.1提出的，IE5以上才支持；\n3. link 还可以加载RSS和使用rel属性，而@import只能加载CSS；\n4. link 加载的样式可以通过JS更改，而@import加载的样式不可以被JS更改。\n\n\n5.介绍一下你对浏览器内核的理解？ \n回答：\n1.浏览器内核一般被分为两个部分：渲染引擎和JS引擎：\n        1.1 渲染引擎：负责取得网页的内容(HTML,XML,图像等等)，整理讯息(引入CSS等)，通过计算来显示出网页(这个过程也称为回流)，然后输出至显卡，最后渲染为网页(这个过程称为重绘)；\n        1.2 JS引擎：获取网页的JS部分用来解析和执行以实现网页的动态效果。\n      2.最开始渲染引擎和JS引擎没有太大的区别，但是随着JS的发展并独立，内核就只指渲染引擎了。\n\n6.常见的浏览器内核有哪些？ \n回答：1.Trident：IE 360浏览器等；\n      2.Gecko：Firefox等；\n      3.Presto：Opera7及以上，现为blink内核；\n      4.Webkit：Chrome，safari(现Chrome使用blink内核)；\n      5.blink：Chrome , opera(blink内核由谷歌和opera公司共同研发，是Webkit分支)。\n  \n7.什么是盒子模型？\n回答：\n在网页中，一个元素占有空间的大小由几个部分构成，其中包括元素的内容（content），元素的内边距（padding），元素的边框（border），元素的外边距（margin）四个部分。这四个部分占有的空间中，有的部分可以显示相应的内容，而有的部分只用来分隔相邻的区域或区域。4个部分一起构成了css中元素的盒模型。\n\n8.CSS实现垂直水平居中：\n回答：一道经典的问题，面试基本必问，实现方法有很多种，可以参考:https://www.otaozi.cn/web/html/47.html\n\n9.简述一下你对HTML语义化的理解？ \n回答：\n1. 正确的标签做正确的事情；\n2. 爬虫可以根据文档结构来确定上下文，有利于SEO优化；\n3. 在无网络情况下不至于排版过于混乱；\n4. 结构化代码便于开发人员的开发和维护。\n\n10.浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢？ \n回答：\n1. 在线的情况下：首先判断是否是第一次访问网页，如果是就缓存。如果不是就比对新的manifest文件看看是不是发生过更改，发生则替换；\n2. 离线的情况下读取manifest文件使用离线资源。\n      \n11.请描述一下 cookies，sessionStorage 和 localStorage 的区别？ \n回答：\n1. Cookie 有大小限制，一般来说是4k。随着http请求一起发送至服务器端，可以设置过期时间，不设置的情况下在浏览器关闭的时候会清空；\n2. SessionStorage可以保存较多数据，在浏览器关闭的时候会被清空，同时浏览主域名下不同子域名内容不会共享；\n3. LocalStorage可可以保存较多数据，可以永久保存数据除非用户主动删除或清除缓存。\n\n12.title与h1的区别、b与strong的区别、i与em的区别？ \n回答：\n1. title表示网页标题，h1表示段落标题；\n2. b表示文本加粗没有强调效果，strong表示文本加粗有强调效果；\n3. i表示文本斜体没有强调效果，em表示文本斜体有强调效果。      \n      \n13.GET和POST的区别\n回答：\n1. GET：一般用于信息获取，使用URL传递参数，对所发送信息的数量也有限制，一般在1024字节，Get是通过地址栏来传值。\n2. POST：一般用于修改服务器上的资源，对所发送的信息没有限制。（常用于发送表单数据，新建、修改等），Post是通过提交表单来传值。\n\n14.简述一下src与href的区别？\n回答：\n1. href 是指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，用于超链接；\n2. src是指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求src资源时会将其指向的资源下载并应用到文档内，例如js脚本，img图片和frame等元素。当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。这也是为什么将js脚本放在底部而不是头部。\n\n15.什么是CSS Hack?\n回答：\n1. 一般来说是针对不同的浏览器写不同的CSS,就是 CSS Hack；\n2. IE浏览器Hack一般又分为三种，条件Hack、属性级Hack、选择符Hack（详细参考CSS文档：css文档）。例如：\n2.1 条件Hack `<!--[if IE]><style>.test{color:red;}</style><![endif]-->`\n2.2 属性Hack \n```css\n.test {\n  color:#090\\9; /* For IE8+ */ \n  *color:#f00;  /* For IE7 and earlier */ \n  _color:#ff0;  /* For IE6 and earlier */ \n}\n```\n2.3 选择符Hack \n```css\n* html .test {\n  color:#090;\n}       /* For IE6 and earlier */ \n* + html .test{\n  color:#ff0;\n}     /* For IE7 */\n ```\n16.简述同步和异步的区别？\n回答：\n1. 同步是阻塞模式，异步是非阻塞模式；\n2. 同步就是指一个进程在执行某个请求的时候，若该请求需要一段时间才能返回信息，那么这个进程将会一直等待下去，直到收到返回信息才继续执行下去；\n3. 异步是指进程不需要一直等下去，而是继续执行下面的操作，不管其他进程的状态。当有消息返回时系统会通知进程进行处理，这样可以提高执行的效率。\n      \n17.什么叫优雅降级和渐进增强？\n回答：\n1. 渐进增强 progressive enhancement：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。\n2. 优雅降级 graceful degradation：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。\n\n区别：\n\na. 优雅降级是从复杂的现状开始，并试图减少用户体验的供给\nb. 渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要\nc. 降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带\n\n18.px和em的区别?\n\n回答：\n1. px和em都是长度单位，区别是，px的值是固定的，指定是多少就是多少，计算比较容易；\n2. em得值不是固定的，并且em会继承父级元素的字体大小；\n3. 浏览器的默认字体高都是16px。所以未经调整的浏览器都符合: 1em=16px。那么12px=0.75em, 10px=0.625em。\n\nJavaScript部分\n\n1. 实现一个函数clone，可以对JavaScript中的5种主要的数据类型（包括Number、String、Object、Array、Boolean）进行值复制。\n回答：\n\n```javascript\n/**\n * 对象克隆\n * 支持基本数据类型及对象\n * 递归方法\n */ \nfunction clone(obj) {\n  var o\n  switch (typeof obj) {\n    case 'undefined':\n      break\n    case 'string':\n      o = obj + ''\n      break\n    case 'number':\n      o = obj - 0\n      break\n    case 'boolean':\n      o = obj\n      break\n    case 'object':\n      // object 分为两种情况 对象（Object）或数组（Array）\n      if (obj === null) {\n        o = null\n      } else {\n        if (Object.prototype.toString.call(obj).slice(8, -1) === 'Array') {\n          o = []\n          for (var i = 0; i < obj.length; i++) {\n            o.push(clone(obj[i]))\n          }\n        } else {\n          o = {}\n          for (var k in obj) {\n            o[k] = clone(obj[k])\n          }\n        }\n      }\n      break\n    default:\n      o = obj\n      break\n  }\n  return o\n}\n```\n2.如何消除一个数组里面重复的元素？\n回答：\n```javascript\nvar arr1 = [1, 2, 2, 2, 3, 3, 3, 4, 5, 6],\n  arr2 = []\nfor (var i = 0, len = arr1.length; i < len; i++) {\n  if (arr2.indexOf(arr1[i]) < 0) {\n    arr2.push(arr1[i])\n  }\n}\ndocument.write(arr2) // 1,2,3,4,5,6\n```\n\n3.Javascript中callee和caller的作用？\n\n回答：\n1. caller是返回一个对函数的引用，该函数调用了当前函数；\n2. callee是返回正在被执行的function函数，也就是所指定的function对象的正文。\n\n4.请描述一下cookies，sessionStorage和localStorage的区别。\n回答：\n1.相同点：都存储在客户端；\n2.不同点：\n  2.1 存储大小不同\n    2.1.1 cookie数据大小不能超过4k；\n    2.1.2 sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。\n  2.2 有效时间不同\n    2.2.1 localStorage 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；\n    2.2.2 sessionStorage 数据在当前浏览器窗口关闭后自动删除。\n    2.2.3 cookie 设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭\n  2.3 数据与服务器之间的交互方式不同\n    2.3.1 cookie的数据会自动的传递到服务器，服务器端也可以写cookie到客户端；\n    2.3.1 sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。\n\n5.统计字符串”aaaabbbccccddfgh”中字母个数或统计最多字母数。\n回答：\n```javascript\nvar str = 'aaaabbbccccddfgh'\nvar obj = {}\nfor (var i = 0; i < str.length; i++) {\n  var v = str.charAt(i)\n  if (obj[v] && obj[v].value == v) {\n    obj[v].count = ++obj[v].count\n  } else {\n    obj[v] = {}\n    obj[v].count = 1\n    obj[v].value = v\n  }\n}\nfor (var key in obj) {\n  document.write(obj[key].value + '=' + obj[key].count + ' ') // a=4  b=3  c=4  d=2  f=1  g=1  h=1\n}\n```\n\n6.写一个function，清除字符串前后的空格。（兼容所有浏览器）\n回答：\n```javascript\nfunction trim(str) { \n    if (str && typeof str === \"string\") { return str.replace(/(^\\s*)|(\\s*)$/g,\"\"); //去除前后空白符 }\n}\n```\nvue部分：\n1.请详细说下你对vue生命周期的理解？\n回答：1.总共分为8个阶段创建前/后，载入前/后，更新前/后，销毁前/后；\n      2.创建前/后： 在beforeCreated阶段，vue实例的挂载元素$el和数据对象data都为undefined，还未初始化。在created阶段，vue实例的数据对象data有了，$el还没有；\n      3.载入前/后：在beforeMount阶段，vue实例的$el和data都初始化了，但还是挂载之前为虚拟的dom节点，data.message还未替换。在mounted阶段，vue实例挂载完成，data.message成功渲染；\n      4.更新前/后：当data变化时，会触发beforeUpdate和updated方法；\n      5.销毁前/后：在执行destroy方法后，对data的改变不会再触发周期函数，说明此时vue实例已经解除了事件监听以及和dom的绑定，但是dom结构依然存在\n\n2.请说下封装 vue 组件的过程？\n回答：1.首先，组件可以提升整个项目的开发效率。能够把页面抽象成多个相对独立的模块，解决了我们传统项目开发：效率低、难维护、复用性等问题；\n      2.然后，使用Vue.extend方法创建一个组件，然后使用Vue.component方法注册组件。子组件需要数据，可以在props中接受定义。而子组件修改好数据后，想把数据传递给父组件。可以采用emit方法。\n      \n3.说出至少4种vue当中的指令和它的用法？\n回答：v-if：判断是否隐藏；v-for：数据循环出来；v-bind:class：绑定一个属性；v-model：实现双向绑定；\n\n4.v-model是什么？怎么使用？ vue中标签怎么绑定事件？\n回答：可以实现双向绑定，指令（v-class、v-for、v-if、v-show、v-on）。vue的model层的data属性。绑定事件：<input @click=doLog() />    \n\n5.mvvm框架是什么？它和其它框架（jquery）的区别是什么？哪些场景适合？\n回答：一个model+view+viewModel框架，数据模型model，viewModel连接两个；\n      区别：vue数据驱动，通过数据来显示视图层而不是节点操作。\n      场景：数据操作比较多的场景，更加便捷。\n\n6.Vue的双向数据绑定原理是什么？(或vue data是怎么实现的？)\n回答：vue.js 是采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。\n具体步骤：\n     第一步：需要observe的数据对象进行递归遍历，包括子属性对象的属性，都加上 setter和getter，这样的话，给这个对象的某个值赋值，就会触发setter，那么就能监听到了数据变化；\n     第二步：compile解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图；\n     第三步：Watcher订阅者是Observer和Compile之间通信的桥梁，主要做的事情是:\n        1.在自身实例化时往属性订阅器(dep)里面添加自己\n        2.自身必须有一个update()方法\n        3.待属性变动dep.notice()通知时，能调用自身的update()方法，并触发Compile中绑定的回调，则功成身退。\n     第四步：MVVM作为数据绑定的入口，整合Observer、Compile和Watcher三者，通过Observer来监听自己的model数据变化，通过Compile来解析编译模板指令，最终利用Watcher搭起Observer和Compile之间的通信桥梁，达到数据变化 -> 视图更新；视图交互变化(input) -> 数据model变更的双向绑定效果。\n","source":"_posts/前端面试题.md","raw":"---\ntitle: 前端面试题\ntags:\n  - 基本知识\ncategories:\n  - Web开发\ntoc: false\ndate: 2019-04-21 12:43:37\n---\n\nHTML/CSS部分\n1.HTML5为什么只需要写`<!DOCTYPE HTML>`?\n\n回答：\n1. 因为HTML5不是SGML的子集，所以不需要DTD引用，但是需要DOCTYPE来规范行为；\n2. 而HTML4.01是基于SGML，所以需要DTD引用，来告诉浏览器文档所使用的文档类型。\n\n<!-- more -->\n\n2.Doctype作用？标准模式与兼容模式各有什么区别? \n回答：\n1. Doctype用于向浏览器申明使用标准模式来解析文档；\n2. 标准模式是以浏览器最高级别来解析文档，而兼容模式是以向后兼容的方式来解析文档。\n\n3.行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？\n回答：\n1. 行内元素：a、b、span、img、input、strong、select、label、em、button、textarea；\n2. 块级元素：div、ul、li、dl、dt、dd、p、h1-h6、blockquote；\n3. 空元素：即系没有内容的HTML元素，例如：br、meta、hr、link、input、img；\n4. 在CSS规范中，每个元素都有display属性。display属性值为block的是块级元素，display属性值为inline的是行内元素。\n\n4.页面导入样式时，使用link和@import有什么区别？ \n回答：\n1. link 在浏览器页面的时候并行加载，而@import需要等页面加载完成后才会加载；\n2. link 是 XHML标签不存在兼容问题，而@import是css2.1提出的，IE5以上才支持；\n3. link 还可以加载RSS和使用rel属性，而@import只能加载CSS；\n4. link 加载的样式可以通过JS更改，而@import加载的样式不可以被JS更改。\n\n\n5.介绍一下你对浏览器内核的理解？ \n回答：\n1.浏览器内核一般被分为两个部分：渲染引擎和JS引擎：\n        1.1 渲染引擎：负责取得网页的内容(HTML,XML,图像等等)，整理讯息(引入CSS等)，通过计算来显示出网页(这个过程也称为回流)，然后输出至显卡，最后渲染为网页(这个过程称为重绘)；\n        1.2 JS引擎：获取网页的JS部分用来解析和执行以实现网页的动态效果。\n      2.最开始渲染引擎和JS引擎没有太大的区别，但是随着JS的发展并独立，内核就只指渲染引擎了。\n\n6.常见的浏览器内核有哪些？ \n回答：1.Trident：IE 360浏览器等；\n      2.Gecko：Firefox等；\n      3.Presto：Opera7及以上，现为blink内核；\n      4.Webkit：Chrome，safari(现Chrome使用blink内核)；\n      5.blink：Chrome , opera(blink内核由谷歌和opera公司共同研发，是Webkit分支)。\n  \n7.什么是盒子模型？\n回答：\n在网页中，一个元素占有空间的大小由几个部分构成，其中包括元素的内容（content），元素的内边距（padding），元素的边框（border），元素的外边距（margin）四个部分。这四个部分占有的空间中，有的部分可以显示相应的内容，而有的部分只用来分隔相邻的区域或区域。4个部分一起构成了css中元素的盒模型。\n\n8.CSS实现垂直水平居中：\n回答：一道经典的问题，面试基本必问，实现方法有很多种，可以参考:https://www.otaozi.cn/web/html/47.html\n\n9.简述一下你对HTML语义化的理解？ \n回答：\n1. 正确的标签做正确的事情；\n2. 爬虫可以根据文档结构来确定上下文，有利于SEO优化；\n3. 在无网络情况下不至于排版过于混乱；\n4. 结构化代码便于开发人员的开发和维护。\n\n10.浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢？ \n回答：\n1. 在线的情况下：首先判断是否是第一次访问网页，如果是就缓存。如果不是就比对新的manifest文件看看是不是发生过更改，发生则替换；\n2. 离线的情况下读取manifest文件使用离线资源。\n      \n11.请描述一下 cookies，sessionStorage 和 localStorage 的区别？ \n回答：\n1. Cookie 有大小限制，一般来说是4k。随着http请求一起发送至服务器端，可以设置过期时间，不设置的情况下在浏览器关闭的时候会清空；\n2. SessionStorage可以保存较多数据，在浏览器关闭的时候会被清空，同时浏览主域名下不同子域名内容不会共享；\n3. LocalStorage可可以保存较多数据，可以永久保存数据除非用户主动删除或清除缓存。\n\n12.title与h1的区别、b与strong的区别、i与em的区别？ \n回答：\n1. title表示网页标题，h1表示段落标题；\n2. b表示文本加粗没有强调效果，strong表示文本加粗有强调效果；\n3. i表示文本斜体没有强调效果，em表示文本斜体有强调效果。      \n      \n13.GET和POST的区别\n回答：\n1. GET：一般用于信息获取，使用URL传递参数，对所发送信息的数量也有限制，一般在1024字节，Get是通过地址栏来传值。\n2. POST：一般用于修改服务器上的资源，对所发送的信息没有限制。（常用于发送表单数据，新建、修改等），Post是通过提交表单来传值。\n\n14.简述一下src与href的区别？\n回答：\n1. href 是指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，用于超链接；\n2. src是指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求src资源时会将其指向的资源下载并应用到文档内，例如js脚本，img图片和frame等元素。当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。这也是为什么将js脚本放在底部而不是头部。\n\n15.什么是CSS Hack?\n回答：\n1. 一般来说是针对不同的浏览器写不同的CSS,就是 CSS Hack；\n2. IE浏览器Hack一般又分为三种，条件Hack、属性级Hack、选择符Hack（详细参考CSS文档：css文档）。例如：\n2.1 条件Hack `<!--[if IE]><style>.test{color:red;}</style><![endif]-->`\n2.2 属性Hack \n```css\n.test {\n  color:#090\\9; /* For IE8+ */ \n  *color:#f00;  /* For IE7 and earlier */ \n  _color:#ff0;  /* For IE6 and earlier */ \n}\n```\n2.3 选择符Hack \n```css\n* html .test {\n  color:#090;\n}       /* For IE6 and earlier */ \n* + html .test{\n  color:#ff0;\n}     /* For IE7 */\n ```\n16.简述同步和异步的区别？\n回答：\n1. 同步是阻塞模式，异步是非阻塞模式；\n2. 同步就是指一个进程在执行某个请求的时候，若该请求需要一段时间才能返回信息，那么这个进程将会一直等待下去，直到收到返回信息才继续执行下去；\n3. 异步是指进程不需要一直等下去，而是继续执行下面的操作，不管其他进程的状态。当有消息返回时系统会通知进程进行处理，这样可以提高执行的效率。\n      \n17.什么叫优雅降级和渐进增强？\n回答：\n1. 渐进增强 progressive enhancement：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。\n2. 优雅降级 graceful degradation：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。\n\n区别：\n\na. 优雅降级是从复杂的现状开始，并试图减少用户体验的供给\nb. 渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要\nc. 降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带\n\n18.px和em的区别?\n\n回答：\n1. px和em都是长度单位，区别是，px的值是固定的，指定是多少就是多少，计算比较容易；\n2. em得值不是固定的，并且em会继承父级元素的字体大小；\n3. 浏览器的默认字体高都是16px。所以未经调整的浏览器都符合: 1em=16px。那么12px=0.75em, 10px=0.625em。\n\nJavaScript部分\n\n1. 实现一个函数clone，可以对JavaScript中的5种主要的数据类型（包括Number、String、Object、Array、Boolean）进行值复制。\n回答：\n\n```javascript\n/**\n * 对象克隆\n * 支持基本数据类型及对象\n * 递归方法\n */ \nfunction clone(obj) {\n  var o\n  switch (typeof obj) {\n    case 'undefined':\n      break\n    case 'string':\n      o = obj + ''\n      break\n    case 'number':\n      o = obj - 0\n      break\n    case 'boolean':\n      o = obj\n      break\n    case 'object':\n      // object 分为两种情况 对象（Object）或数组（Array）\n      if (obj === null) {\n        o = null\n      } else {\n        if (Object.prototype.toString.call(obj).slice(8, -1) === 'Array') {\n          o = []\n          for (var i = 0; i < obj.length; i++) {\n            o.push(clone(obj[i]))\n          }\n        } else {\n          o = {}\n          for (var k in obj) {\n            o[k] = clone(obj[k])\n          }\n        }\n      }\n      break\n    default:\n      o = obj\n      break\n  }\n  return o\n}\n```\n2.如何消除一个数组里面重复的元素？\n回答：\n```javascript\nvar arr1 = [1, 2, 2, 2, 3, 3, 3, 4, 5, 6],\n  arr2 = []\nfor (var i = 0, len = arr1.length; i < len; i++) {\n  if (arr2.indexOf(arr1[i]) < 0) {\n    arr2.push(arr1[i])\n  }\n}\ndocument.write(arr2) // 1,2,3,4,5,6\n```\n\n3.Javascript中callee和caller的作用？\n\n回答：\n1. caller是返回一个对函数的引用，该函数调用了当前函数；\n2. callee是返回正在被执行的function函数，也就是所指定的function对象的正文。\n\n4.请描述一下cookies，sessionStorage和localStorage的区别。\n回答：\n1.相同点：都存储在客户端；\n2.不同点：\n  2.1 存储大小不同\n    2.1.1 cookie数据大小不能超过4k；\n    2.1.2 sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。\n  2.2 有效时间不同\n    2.2.1 localStorage 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；\n    2.2.2 sessionStorage 数据在当前浏览器窗口关闭后自动删除。\n    2.2.3 cookie 设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭\n  2.3 数据与服务器之间的交互方式不同\n    2.3.1 cookie的数据会自动的传递到服务器，服务器端也可以写cookie到客户端；\n    2.3.1 sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。\n\n5.统计字符串”aaaabbbccccddfgh”中字母个数或统计最多字母数。\n回答：\n```javascript\nvar str = 'aaaabbbccccddfgh'\nvar obj = {}\nfor (var i = 0; i < str.length; i++) {\n  var v = str.charAt(i)\n  if (obj[v] && obj[v].value == v) {\n    obj[v].count = ++obj[v].count\n  } else {\n    obj[v] = {}\n    obj[v].count = 1\n    obj[v].value = v\n  }\n}\nfor (var key in obj) {\n  document.write(obj[key].value + '=' + obj[key].count + ' ') // a=4  b=3  c=4  d=2  f=1  g=1  h=1\n}\n```\n\n6.写一个function，清除字符串前后的空格。（兼容所有浏览器）\n回答：\n```javascript\nfunction trim(str) { \n    if (str && typeof str === \"string\") { return str.replace(/(^\\s*)|(\\s*)$/g,\"\"); //去除前后空白符 }\n}\n```\nvue部分：\n1.请详细说下你对vue生命周期的理解？\n回答：1.总共分为8个阶段创建前/后，载入前/后，更新前/后，销毁前/后；\n      2.创建前/后： 在beforeCreated阶段，vue实例的挂载元素$el和数据对象data都为undefined，还未初始化。在created阶段，vue实例的数据对象data有了，$el还没有；\n      3.载入前/后：在beforeMount阶段，vue实例的$el和data都初始化了，但还是挂载之前为虚拟的dom节点，data.message还未替换。在mounted阶段，vue实例挂载完成，data.message成功渲染；\n      4.更新前/后：当data变化时，会触发beforeUpdate和updated方法；\n      5.销毁前/后：在执行destroy方法后，对data的改变不会再触发周期函数，说明此时vue实例已经解除了事件监听以及和dom的绑定，但是dom结构依然存在\n\n2.请说下封装 vue 组件的过程？\n回答：1.首先，组件可以提升整个项目的开发效率。能够把页面抽象成多个相对独立的模块，解决了我们传统项目开发：效率低、难维护、复用性等问题；\n      2.然后，使用Vue.extend方法创建一个组件，然后使用Vue.component方法注册组件。子组件需要数据，可以在props中接受定义。而子组件修改好数据后，想把数据传递给父组件。可以采用emit方法。\n      \n3.说出至少4种vue当中的指令和它的用法？\n回答：v-if：判断是否隐藏；v-for：数据循环出来；v-bind:class：绑定一个属性；v-model：实现双向绑定；\n\n4.v-model是什么？怎么使用？ vue中标签怎么绑定事件？\n回答：可以实现双向绑定，指令（v-class、v-for、v-if、v-show、v-on）。vue的model层的data属性。绑定事件：<input @click=doLog() />    \n\n5.mvvm框架是什么？它和其它框架（jquery）的区别是什么？哪些场景适合？\n回答：一个model+view+viewModel框架，数据模型model，viewModel连接两个；\n      区别：vue数据驱动，通过数据来显示视图层而不是节点操作。\n      场景：数据操作比较多的场景，更加便捷。\n\n6.Vue的双向数据绑定原理是什么？(或vue data是怎么实现的？)\n回答：vue.js 是采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。\n具体步骤：\n     第一步：需要observe的数据对象进行递归遍历，包括子属性对象的属性，都加上 setter和getter，这样的话，给这个对象的某个值赋值，就会触发setter，那么就能监听到了数据变化；\n     第二步：compile解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图；\n     第三步：Watcher订阅者是Observer和Compile之间通信的桥梁，主要做的事情是:\n        1.在自身实例化时往属性订阅器(dep)里面添加自己\n        2.自身必须有一个update()方法\n        3.待属性变动dep.notice()通知时，能调用自身的update()方法，并触发Compile中绑定的回调，则功成身退。\n     第四步：MVVM作为数据绑定的入口，整合Observer、Compile和Watcher三者，通过Observer来监听自己的model数据变化，通过Compile来解析编译模板指令，最终利用Watcher搭起Observer和Compile之间的通信桥梁，达到数据变化 -> 视图更新；视图交互变化(input) -> 数据model变更的双向绑定效果。\n","slug":"前端面试题","published":1,"updated":"2019-11-07T02:24:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo0z008eh5s6nivrgu63","content":"<p>HTML/CSS部分<br>1.HTML5为什么只需要写<code>&lt;!DOCTYPE HTML&gt;</code>?</p>\n<p>回答：</p>\n<ol>\n<li>因为HTML5不是SGML的子集，所以不需要DTD引用，但是需要DOCTYPE来规范行为；</li>\n<li>而HTML4.01是基于SGML，所以需要DTD引用，来告诉浏览器文档所使用的文档类型。</li>\n</ol>\n<a id=\"more\"></a>\n<p>2.Doctype作用？标准模式与兼容模式各有什么区别?<br>回答：</p>\n<ol>\n<li>Doctype用于向浏览器申明使用标准模式来解析文档；</li>\n<li>标准模式是以浏览器最高级别来解析文档，而兼容模式是以向后兼容的方式来解析文档。</li>\n</ol>\n<p>3.行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？<br>回答：</p>\n<ol>\n<li>行内元素：a、b、span、img、input、strong、select、label、em、button、textarea；</li>\n<li>块级元素：div、ul、li、dl、dt、dd、p、h1-h6、blockquote；</li>\n<li>空元素：即系没有内容的HTML元素，例如：br、meta、hr、link、input、img；</li>\n<li>在CSS规范中，每个元素都有display属性。display属性值为block的是块级元素，display属性值为inline的是行内元素。</li>\n</ol>\n<p>4.页面导入样式时，使用link和@import有什么区别？<br>回答：</p>\n<ol>\n<li>link 在浏览器页面的时候并行加载，而@import需要等页面加载完成后才会加载；</li>\n<li>link 是 XHML标签不存在兼容问题，而@import是css2.1提出的，IE5以上才支持；</li>\n<li>link 还可以加载RSS和使用rel属性，而@import只能加载CSS；</li>\n<li>link 加载的样式可以通过JS更改，而@import加载的样式不可以被JS更改。</li>\n</ol>\n<p>5.介绍一下你对浏览器内核的理解？<br>回答：<br>1.浏览器内核一般被分为两个部分：渲染引擎和JS引擎：<br>        1.1 渲染引擎：负责取得网页的内容(HTML,XML,图像等等)，整理讯息(引入CSS等)，通过计算来显示出网页(这个过程也称为回流)，然后输出至显卡，最后渲染为网页(这个过程称为重绘)；<br>        1.2 JS引擎：获取网页的JS部分用来解析和执行以实现网页的动态效果。<br>      2.最开始渲染引擎和JS引擎没有太大的区别，但是随着JS的发展并独立，内核就只指渲染引擎了。</p>\n<p>6.常见的浏览器内核有哪些？<br>回答：1.Trident：IE 360浏览器等；<br>      2.Gecko：Firefox等；<br>      3.Presto：Opera7及以上，现为blink内核；<br>      4.Webkit：Chrome，safari(现Chrome使用blink内核)；<br>      5.blink：Chrome , opera(blink内核由谷歌和opera公司共同研发，是Webkit分支)。</p>\n<p>7.什么是盒子模型？<br>回答：<br>在网页中，一个元素占有空间的大小由几个部分构成，其中包括元素的内容（content），元素的内边距（padding），元素的边框（border），元素的外边距（margin）四个部分。这四个部分占有的空间中，有的部分可以显示相应的内容，而有的部分只用来分隔相邻的区域或区域。4个部分一起构成了css中元素的盒模型。</p>\n<p>8.CSS实现垂直水平居中：<br>回答：一道经典的问题，面试基本必问，实现方法有很多种，可以参考:<a href=\"https://www.otaozi.cn/web/html/47.html\" target=\"_blank\" rel=\"noopener\">https://www.otaozi.cn/web/html/47.html</a></p>\n<p>9.简述一下你对HTML语义化的理解？<br>回答：</p>\n<ol>\n<li>正确的标签做正确的事情；</li>\n<li>爬虫可以根据文档结构来确定上下文，有利于SEO优化；</li>\n<li>在无网络情况下不至于排版过于混乱；</li>\n<li>结构化代码便于开发人员的开发和维护。</li>\n</ol>\n<p>10.浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢？<br>回答：</p>\n<ol>\n<li>在线的情况下：首先判断是否是第一次访问网页，如果是就缓存。如果不是就比对新的manifest文件看看是不是发生过更改，发生则替换；</li>\n<li>离线的情况下读取manifest文件使用离线资源。</li>\n</ol>\n<p>11.请描述一下 cookies，sessionStorage 和 localStorage 的区别？<br>回答：</p>\n<ol>\n<li>Cookie 有大小限制，一般来说是4k。随着http请求一起发送至服务器端，可以设置过期时间，不设置的情况下在浏览器关闭的时候会清空；</li>\n<li>SessionStorage可以保存较多数据，在浏览器关闭的时候会被清空，同时浏览主域名下不同子域名内容不会共享；</li>\n<li>LocalStorage可可以保存较多数据，可以永久保存数据除非用户主动删除或清除缓存。</li>\n</ol>\n<p>12.title与h1的区别、b与strong的区别、i与em的区别？<br>回答：</p>\n<ol>\n<li>title表示网页标题，h1表示段落标题；</li>\n<li>b表示文本加粗没有强调效果，strong表示文本加粗有强调效果；</li>\n<li>i表示文本斜体没有强调效果，em表示文本斜体有强调效果。      </li>\n</ol>\n<p>13.GET和POST的区别<br>回答：</p>\n<ol>\n<li>GET：一般用于信息获取，使用URL传递参数，对所发送信息的数量也有限制，一般在1024字节，Get是通过地址栏来传值。</li>\n<li>POST：一般用于修改服务器上的资源，对所发送的信息没有限制。（常用于发送表单数据，新建、修改等），Post是通过提交表单来传值。</li>\n</ol>\n<p>14.简述一下src与href的区别？<br>回答：</p>\n<ol>\n<li>href 是指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，用于超链接；</li>\n<li>src是指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求src资源时会将其指向的资源下载并应用到文档内，例如js脚本，img图片和frame等元素。当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。这也是为什么将js脚本放在底部而不是头部。</li>\n</ol>\n<p>15.什么是CSS Hack?<br>回答：</p>\n<ol>\n<li>一般来说是针对不同的浏览器写不同的CSS,就是 CSS Hack；</li>\n<li>IE浏览器Hack一般又分为三种，条件Hack、属性级Hack、选择符Hack（详细参考CSS文档：css文档）。例如：<br>2.1 条件Hack <code>&lt;!--[if IE]&gt;&lt;style&gt;.test{color:red;}&lt;/style&gt;&lt;![endif]--&gt;</code><br>2.2 属性Hack <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>:<span class=\"number\">#090</span>\\<span class=\"number\">9</span>; <span class=\"comment\">/* For IE8+ */</span> </span><br><span class=\"line\">  *color:#f00;  /* For IE7 and earlier */ </span><br><span class=\"line\">  _<span class=\"selector-tag\">color</span>:<span class=\"selector-id\">#ff0</span>;  <span class=\"comment\">/* For IE6 and earlier */</span> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>2.3 选择符Hack<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* <span class=\"selector-tag\">html</span> <span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>:<span class=\"number\">#090</span>;</span><br><span class=\"line\">&#125;       <span class=\"comment\">/* For IE6 and earlier */</span> </span><br><span class=\"line\">* + <span class=\"selector-tag\">html</span> <span class=\"selector-class\">.test</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>:<span class=\"number\">#ff0</span>;</span><br><span class=\"line\">&#125;     <span class=\"comment\">/* For IE7 */</span></span><br></pre></td></tr></table></figure></p>\n<p>16.简述同步和异步的区别？<br>回答：</p>\n<ol>\n<li>同步是阻塞模式，异步是非阻塞模式；</li>\n<li>同步就是指一个进程在执行某个请求的时候，若该请求需要一段时间才能返回信息，那么这个进程将会一直等待下去，直到收到返回信息才继续执行下去；</li>\n<li>异步是指进程不需要一直等下去，而是继续执行下面的操作，不管其他进程的状态。当有消息返回时系统会通知进程进行处理，这样可以提高执行的效率。</li>\n</ol>\n<p>17.什么叫优雅降级和渐进增强？<br>回答：</p>\n<ol>\n<li>渐进增强 progressive enhancement：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。</li>\n<li>优雅降级 graceful degradation：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。</li>\n</ol>\n<p>区别：</p>\n<p>a. 优雅降级是从复杂的现状开始，并试图减少用户体验的供给<br>b. 渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要<br>c. 降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带</p>\n<p>18.px和em的区别?</p>\n<p>回答：</p>\n<ol>\n<li>px和em都是长度单位，区别是，px的值是固定的，指定是多少就是多少，计算比较容易；</li>\n<li>em得值不是固定的，并且em会继承父级元素的字体大小；</li>\n<li>浏览器的默认字体高都是16px。所以未经调整的浏览器都符合: 1em=16px。那么12px=0.75em, 10px=0.625em。</li>\n</ol>\n<p>JavaScript部分</p>\n<ol>\n<li>实现一个函数clone，可以对JavaScript中的5种主要的数据类型（包括Number、String、Object、Array、Boolean）进行值复制。<br>回答：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 对象克隆</span></span><br><span class=\"line\"><span class=\"comment\"> * 支持基本数据类型及对象</span></span><br><span class=\"line\"><span class=\"comment\"> * 递归方法</span></span><br><span class=\"line\"><span class=\"comment\"> */</span> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> o</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (<span class=\"keyword\">typeof</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'undefined'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'string'</span>:</span><br><span class=\"line\">      o = obj + <span class=\"string\">''</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'number'</span>:</span><br><span class=\"line\">      o = obj - <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'boolean'</span>:</span><br><span class=\"line\">      o = obj</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'object'</span>:</span><br><span class=\"line\">      <span class=\"comment\">// object 分为两种情况 对象（Object）或数组（Array）</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (obj === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        o = <span class=\"literal\">null</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.toString.call(obj).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Array'</span>) &#123;</span><br><span class=\"line\">          o = []</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; obj.length; i++) &#123;</span><br><span class=\"line\">            o.push(clone(obj[i]))</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          o = &#123;&#125;</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">            o[k] = clone(obj[k])</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      o = obj</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> o</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.如何消除一个数组里面重复的元素？<br>回答：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>],</span><br><span class=\"line\">  arr2 = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = arr1.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (arr2.indexOf(arr1[i]) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    arr2.push(arr1[i])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(arr2) <span class=\"comment\">// 1,2,3,4,5,6</span></span><br></pre></td></tr></table></figure></p>\n<p>3.Javascript中callee和caller的作用？</p>\n<p>回答：</p>\n<ol>\n<li>caller是返回一个对函数的引用，该函数调用了当前函数；</li>\n<li>callee是返回正在被执行的function函数，也就是所指定的function对象的正文。</li>\n</ol>\n<p>4.请描述一下cookies，sessionStorage和localStorage的区别。<br>回答：<br>1.相同点：都存储在客户端；<br>2.不同点：<br>  2.1 存储大小不同<br>    2.1.1 cookie数据大小不能超过4k；<br>    2.1.2 sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。<br>  2.2 有效时间不同<br>    2.2.1 localStorage 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；<br>    2.2.2 sessionStorage 数据在当前浏览器窗口关闭后自动删除。<br>    2.2.3 cookie 设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭<br>  2.3 数据与服务器之间的交互方式不同<br>    2.3.1 cookie的数据会自动的传递到服务器，服务器端也可以写cookie到客户端；<br>    2.3.1 sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。</p>\n<p>5.统计字符串”aaaabbbccccddfgh”中字母个数或统计最多字母数。<br>回答：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'aaaabbbccccddfgh'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; str.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> v = str.charAt(i)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj[v] &amp;&amp; obj[v].value == v) &#123;</span><br><span class=\"line\">    obj[v].count = ++obj[v].count</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    obj[v] = &#123;&#125;</span><br><span class=\"line\">    obj[v].count = <span class=\"number\">1</span></span><br><span class=\"line\">    obj[v].value = v</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.write(obj[key].value + <span class=\"string\">'='</span> + obj[key].count + <span class=\"string\">' '</span>) <span class=\"comment\">// a=4  b=3  c=4  d=2  f=1  g=1  h=1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>6.写一个function，清除字符串前后的空格。（兼容所有浏览器）<br>回答：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">trim</span>(<span class=\"params\">str</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str &amp;&amp; <span class=\"keyword\">typeof</span> str === <span class=\"string\">\"string\"</span>) &#123; <span class=\"keyword\">return</span> str.replace(<span class=\"regexp\">/(^\\s*)|(\\s*)$/g</span>,<span class=\"string\">\"\"</span>); <span class=\"comment\">//去除前后空白符 &#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>vue部分：<br>1.请详细说下你对vue生命周期的理解？<br>回答：1.总共分为8个阶段创建前/后，载入前/后，更新前/后，销毁前/后；<br>      2.创建前/后： 在beforeCreated阶段，vue实例的挂载元素$el和数据对象data都为undefined，还未初始化。在created阶段，vue实例的数据对象data有了，$el还没有；<br>      3.载入前/后：在beforeMount阶段，vue实例的$el和data都初始化了，但还是挂载之前为虚拟的dom节点，data.message还未替换。在mounted阶段，vue实例挂载完成，data.message成功渲染；<br>      4.更新前/后：当data变化时，会触发beforeUpdate和updated方法；<br>      5.销毁前/后：在执行destroy方法后，对data的改变不会再触发周期函数，说明此时vue实例已经解除了事件监听以及和dom的绑定，但是dom结构依然存在</p>\n<p>2.请说下封装 vue 组件的过程？<br>回答：1.首先，组件可以提升整个项目的开发效率。能够把页面抽象成多个相对独立的模块，解决了我们传统项目开发：效率低、难维护、复用性等问题；<br>      2.然后，使用Vue.extend方法创建一个组件，然后使用Vue.component方法注册组件。子组件需要数据，可以在props中接受定义。而子组件修改好数据后，想把数据传递给父组件。可以采用emit方法。</p>\n<p>3.说出至少4种vue当中的指令和它的用法？<br>回答：v-if：判断是否隐藏；v-for：数据循环出来；v-bind:class：绑定一个属性；v-model：实现双向绑定；</p>\n<p>4.v-model是什么？怎么使用？ vue中标签怎么绑定事件？<br>回答：可以实现双向绑定，指令（v-class、v-for、v-if、v-show、v-on）。vue的model层的data属性。绑定事件：<input @click=\"doLog()\">    </p>\n<p>5.mvvm框架是什么？它和其它框架（jquery）的区别是什么？哪些场景适合？<br>回答：一个model+view+viewModel框架，数据模型model，viewModel连接两个；<br>      区别：vue数据驱动，通过数据来显示视图层而不是节点操作。<br>      场景：数据操作比较多的场景，更加便捷。</p>\n<p>6.Vue的双向数据绑定原理是什么？(或vue data是怎么实现的？)<br>回答：vue.js 是采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。<br>具体步骤：<br>     第一步：需要observe的数据对象进行递归遍历，包括子属性对象的属性，都加上 setter和getter，这样的话，给这个对象的某个值赋值，就会触发setter，那么就能监听到了数据变化；<br>     第二步：compile解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图；<br>     第三步：Watcher订阅者是Observer和Compile之间通信的桥梁，主要做的事情是:<br>        1.在自身实例化时往属性订阅器(dep)里面添加自己<br>        2.自身必须有一个update()方法<br>        3.待属性变动dep.notice()通知时，能调用自身的update()方法，并触发Compile中绑定的回调，则功成身退。<br>     第四步：MVVM作为数据绑定的入口，整合Observer、Compile和Watcher三者，通过Observer来监听自己的model数据变化，通过Compile来解析编译模板指令，最终利用Watcher搭起Observer和Compile之间的通信桥梁，达到数据变化 -&gt; 视图更新；视图交互变化(input) -&gt; 数据model变更的双向绑定效果。</p>\n","site":{"data":{}},"excerpt":"<p>HTML/CSS部分<br>1.HTML5为什么只需要写<code>&lt;!DOCTYPE HTML&gt;</code>?</p>\n<p>回答：</p>\n<ol>\n<li>因为HTML5不是SGML的子集，所以不需要DTD引用，但是需要DOCTYPE来规范行为；</li>\n<li>而HTML4.01是基于SGML，所以需要DTD引用，来告诉浏览器文档所使用的文档类型。</li>\n</ol>","more":"<p>2.Doctype作用？标准模式与兼容模式各有什么区别?<br>回答：</p>\n<ol>\n<li>Doctype用于向浏览器申明使用标准模式来解析文档；</li>\n<li>标准模式是以浏览器最高级别来解析文档，而兼容模式是以向后兼容的方式来解析文档。</li>\n</ol>\n<p>3.行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？<br>回答：</p>\n<ol>\n<li>行内元素：a、b、span、img、input、strong、select、label、em、button、textarea；</li>\n<li>块级元素：div、ul、li、dl、dt、dd、p、h1-h6、blockquote；</li>\n<li>空元素：即系没有内容的HTML元素，例如：br、meta、hr、link、input、img；</li>\n<li>在CSS规范中，每个元素都有display属性。display属性值为block的是块级元素，display属性值为inline的是行内元素。</li>\n</ol>\n<p>4.页面导入样式时，使用link和@import有什么区别？<br>回答：</p>\n<ol>\n<li>link 在浏览器页面的时候并行加载，而@import需要等页面加载完成后才会加载；</li>\n<li>link 是 XHML标签不存在兼容问题，而@import是css2.1提出的，IE5以上才支持；</li>\n<li>link 还可以加载RSS和使用rel属性，而@import只能加载CSS；</li>\n<li>link 加载的样式可以通过JS更改，而@import加载的样式不可以被JS更改。</li>\n</ol>\n<p>5.介绍一下你对浏览器内核的理解？<br>回答：<br>1.浏览器内核一般被分为两个部分：渲染引擎和JS引擎：<br>        1.1 渲染引擎：负责取得网页的内容(HTML,XML,图像等等)，整理讯息(引入CSS等)，通过计算来显示出网页(这个过程也称为回流)，然后输出至显卡，最后渲染为网页(这个过程称为重绘)；<br>        1.2 JS引擎：获取网页的JS部分用来解析和执行以实现网页的动态效果。<br>      2.最开始渲染引擎和JS引擎没有太大的区别，但是随着JS的发展并独立，内核就只指渲染引擎了。</p>\n<p>6.常见的浏览器内核有哪些？<br>回答：1.Trident：IE 360浏览器等；<br>      2.Gecko：Firefox等；<br>      3.Presto：Opera7及以上，现为blink内核；<br>      4.Webkit：Chrome，safari(现Chrome使用blink内核)；<br>      5.blink：Chrome , opera(blink内核由谷歌和opera公司共同研发，是Webkit分支)。</p>\n<p>7.什么是盒子模型？<br>回答：<br>在网页中，一个元素占有空间的大小由几个部分构成，其中包括元素的内容（content），元素的内边距（padding），元素的边框（border），元素的外边距（margin）四个部分。这四个部分占有的空间中，有的部分可以显示相应的内容，而有的部分只用来分隔相邻的区域或区域。4个部分一起构成了css中元素的盒模型。</p>\n<p>8.CSS实现垂直水平居中：<br>回答：一道经典的问题，面试基本必问，实现方法有很多种，可以参考:<a href=\"https://www.otaozi.cn/web/html/47.html\" target=\"_blank\" rel=\"noopener\">https://www.otaozi.cn/web/html/47.html</a></p>\n<p>9.简述一下你对HTML语义化的理解？<br>回答：</p>\n<ol>\n<li>正确的标签做正确的事情；</li>\n<li>爬虫可以根据文档结构来确定上下文，有利于SEO优化；</li>\n<li>在无网络情况下不至于排版过于混乱；</li>\n<li>结构化代码便于开发人员的开发和维护。</li>\n</ol>\n<p>10.浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢？<br>回答：</p>\n<ol>\n<li>在线的情况下：首先判断是否是第一次访问网页，如果是就缓存。如果不是就比对新的manifest文件看看是不是发生过更改，发生则替换；</li>\n<li>离线的情况下读取manifest文件使用离线资源。</li>\n</ol>\n<p>11.请描述一下 cookies，sessionStorage 和 localStorage 的区别？<br>回答：</p>\n<ol>\n<li>Cookie 有大小限制，一般来说是4k。随着http请求一起发送至服务器端，可以设置过期时间，不设置的情况下在浏览器关闭的时候会清空；</li>\n<li>SessionStorage可以保存较多数据，在浏览器关闭的时候会被清空，同时浏览主域名下不同子域名内容不会共享；</li>\n<li>LocalStorage可可以保存较多数据，可以永久保存数据除非用户主动删除或清除缓存。</li>\n</ol>\n<p>12.title与h1的区别、b与strong的区别、i与em的区别？<br>回答：</p>\n<ol>\n<li>title表示网页标题，h1表示段落标题；</li>\n<li>b表示文本加粗没有强调效果，strong表示文本加粗有强调效果；</li>\n<li>i表示文本斜体没有强调效果，em表示文本斜体有强调效果。      </li>\n</ol>\n<p>13.GET和POST的区别<br>回答：</p>\n<ol>\n<li>GET：一般用于信息获取，使用URL传递参数，对所发送信息的数量也有限制，一般在1024字节，Get是通过地址栏来传值。</li>\n<li>POST：一般用于修改服务器上的资源，对所发送的信息没有限制。（常用于发送表单数据，新建、修改等），Post是通过提交表单来传值。</li>\n</ol>\n<p>14.简述一下src与href的区别？<br>回答：</p>\n<ol>\n<li>href 是指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，用于超链接；</li>\n<li>src是指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求src资源时会将其指向的资源下载并应用到文档内，例如js脚本，img图片和frame等元素。当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。这也是为什么将js脚本放在底部而不是头部。</li>\n</ol>\n<p>15.什么是CSS Hack?<br>回答：</p>\n<ol>\n<li>一般来说是针对不同的浏览器写不同的CSS,就是 CSS Hack；</li>\n<li>IE浏览器Hack一般又分为三种，条件Hack、属性级Hack、选择符Hack（详细参考CSS文档：css文档）。例如：<br>2.1 条件Hack <code>&lt;!--[if IE]&gt;&lt;style&gt;.test{color:red;}&lt;/style&gt;&lt;![endif]--&gt;</code><br>2.2 属性Hack <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>:<span class=\"number\">#090</span>\\<span class=\"number\">9</span>; <span class=\"comment\">/* For IE8+ */</span> </span><br><span class=\"line\">  *color:#f00;  /* For IE7 and earlier */ </span><br><span class=\"line\">  _<span class=\"selector-tag\">color</span>:<span class=\"selector-id\">#ff0</span>;  <span class=\"comment\">/* For IE6 and earlier */</span> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>2.3 选择符Hack<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* <span class=\"selector-tag\">html</span> <span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>:<span class=\"number\">#090</span>;</span><br><span class=\"line\">&#125;       <span class=\"comment\">/* For IE6 and earlier */</span> </span><br><span class=\"line\">* + <span class=\"selector-tag\">html</span> <span class=\"selector-class\">.test</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>:<span class=\"number\">#ff0</span>;</span><br><span class=\"line\">&#125;     <span class=\"comment\">/* For IE7 */</span></span><br></pre></td></tr></table></figure></p>\n<p>16.简述同步和异步的区别？<br>回答：</p>\n<ol>\n<li>同步是阻塞模式，异步是非阻塞模式；</li>\n<li>同步就是指一个进程在执行某个请求的时候，若该请求需要一段时间才能返回信息，那么这个进程将会一直等待下去，直到收到返回信息才继续执行下去；</li>\n<li>异步是指进程不需要一直等下去，而是继续执行下面的操作，不管其他进程的状态。当有消息返回时系统会通知进程进行处理，这样可以提高执行的效率。</li>\n</ol>\n<p>17.什么叫优雅降级和渐进增强？<br>回答：</p>\n<ol>\n<li>渐进增强 progressive enhancement：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。</li>\n<li>优雅降级 graceful degradation：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。</li>\n</ol>\n<p>区别：</p>\n<p>a. 优雅降级是从复杂的现状开始，并试图减少用户体验的供给<br>b. 渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要<br>c. 降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带</p>\n<p>18.px和em的区别?</p>\n<p>回答：</p>\n<ol>\n<li>px和em都是长度单位，区别是，px的值是固定的，指定是多少就是多少，计算比较容易；</li>\n<li>em得值不是固定的，并且em会继承父级元素的字体大小；</li>\n<li>浏览器的默认字体高都是16px。所以未经调整的浏览器都符合: 1em=16px。那么12px=0.75em, 10px=0.625em。</li>\n</ol>\n<p>JavaScript部分</p>\n<ol>\n<li>实现一个函数clone，可以对JavaScript中的5种主要的数据类型（包括Number、String、Object、Array、Boolean）进行值复制。<br>回答：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 对象克隆</span></span><br><span class=\"line\"><span class=\"comment\"> * 支持基本数据类型及对象</span></span><br><span class=\"line\"><span class=\"comment\"> * 递归方法</span></span><br><span class=\"line\"><span class=\"comment\"> */</span> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> o</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (<span class=\"keyword\">typeof</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'undefined'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'string'</span>:</span><br><span class=\"line\">      o = obj + <span class=\"string\">''</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'number'</span>:</span><br><span class=\"line\">      o = obj - <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'boolean'</span>:</span><br><span class=\"line\">      o = obj</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'object'</span>:</span><br><span class=\"line\">      <span class=\"comment\">// object 分为两种情况 对象（Object）或数组（Array）</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (obj === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        o = <span class=\"literal\">null</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.toString.call(obj).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Array'</span>) &#123;</span><br><span class=\"line\">          o = []</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; obj.length; i++) &#123;</span><br><span class=\"line\">            o.push(clone(obj[i]))</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          o = &#123;&#125;</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">            o[k] = clone(obj[k])</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      o = obj</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> o</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.如何消除一个数组里面重复的元素？<br>回答：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>],</span><br><span class=\"line\">  arr2 = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = arr1.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (arr2.indexOf(arr1[i]) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    arr2.push(arr1[i])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(arr2) <span class=\"comment\">// 1,2,3,4,5,6</span></span><br></pre></td></tr></table></figure></p>\n<p>3.Javascript中callee和caller的作用？</p>\n<p>回答：</p>\n<ol>\n<li>caller是返回一个对函数的引用，该函数调用了当前函数；</li>\n<li>callee是返回正在被执行的function函数，也就是所指定的function对象的正文。</li>\n</ol>\n<p>4.请描述一下cookies，sessionStorage和localStorage的区别。<br>回答：<br>1.相同点：都存储在客户端；<br>2.不同点：<br>  2.1 存储大小不同<br>    2.1.1 cookie数据大小不能超过4k；<br>    2.1.2 sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。<br>  2.2 有效时间不同<br>    2.2.1 localStorage 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；<br>    2.2.2 sessionStorage 数据在当前浏览器窗口关闭后自动删除。<br>    2.2.3 cookie 设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭<br>  2.3 数据与服务器之间的交互方式不同<br>    2.3.1 cookie的数据会自动的传递到服务器，服务器端也可以写cookie到客户端；<br>    2.3.1 sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。</p>\n<p>5.统计字符串”aaaabbbccccddfgh”中字母个数或统计最多字母数。<br>回答：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'aaaabbbccccddfgh'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; str.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> v = str.charAt(i)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj[v] &amp;&amp; obj[v].value == v) &#123;</span><br><span class=\"line\">    obj[v].count = ++obj[v].count</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    obj[v] = &#123;&#125;</span><br><span class=\"line\">    obj[v].count = <span class=\"number\">1</span></span><br><span class=\"line\">    obj[v].value = v</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.write(obj[key].value + <span class=\"string\">'='</span> + obj[key].count + <span class=\"string\">' '</span>) <span class=\"comment\">// a=4  b=3  c=4  d=2  f=1  g=1  h=1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>6.写一个function，清除字符串前后的空格。（兼容所有浏览器）<br>回答：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">trim</span>(<span class=\"params\">str</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str &amp;&amp; <span class=\"keyword\">typeof</span> str === <span class=\"string\">\"string\"</span>) &#123; <span class=\"keyword\">return</span> str.replace(<span class=\"regexp\">/(^\\s*)|(\\s*)$/g</span>,<span class=\"string\">\"\"</span>); <span class=\"comment\">//去除前后空白符 &#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>vue部分：<br>1.请详细说下你对vue生命周期的理解？<br>回答：1.总共分为8个阶段创建前/后，载入前/后，更新前/后，销毁前/后；<br>      2.创建前/后： 在beforeCreated阶段，vue实例的挂载元素$el和数据对象data都为undefined，还未初始化。在created阶段，vue实例的数据对象data有了，$el还没有；<br>      3.载入前/后：在beforeMount阶段，vue实例的$el和data都初始化了，但还是挂载之前为虚拟的dom节点，data.message还未替换。在mounted阶段，vue实例挂载完成，data.message成功渲染；<br>      4.更新前/后：当data变化时，会触发beforeUpdate和updated方法；<br>      5.销毁前/后：在执行destroy方法后，对data的改变不会再触发周期函数，说明此时vue实例已经解除了事件监听以及和dom的绑定，但是dom结构依然存在</p>\n<p>2.请说下封装 vue 组件的过程？<br>回答：1.首先，组件可以提升整个项目的开发效率。能够把页面抽象成多个相对独立的模块，解决了我们传统项目开发：效率低、难维护、复用性等问题；<br>      2.然后，使用Vue.extend方法创建一个组件，然后使用Vue.component方法注册组件。子组件需要数据，可以在props中接受定义。而子组件修改好数据后，想把数据传递给父组件。可以采用emit方法。</p>\n<p>3.说出至少4种vue当中的指令和它的用法？<br>回答：v-if：判断是否隐藏；v-for：数据循环出来；v-bind:class：绑定一个属性；v-model：实现双向绑定；</p>\n<p>4.v-model是什么？怎么使用？ vue中标签怎么绑定事件？<br>回答：可以实现双向绑定，指令（v-class、v-for、v-if、v-show、v-on）。vue的model层的data属性。绑定事件：<input @click=\"doLog()\">    </p>\n<p>5.mvvm框架是什么？它和其它框架（jquery）的区别是什么？哪些场景适合？<br>回答：一个model+view+viewModel框架，数据模型model，viewModel连接两个；<br>      区别：vue数据驱动，通过数据来显示视图层而不是节点操作。<br>      场景：数据操作比较多的场景，更加便捷。</p>\n<p>6.Vue的双向数据绑定原理是什么？(或vue data是怎么实现的？)<br>回答：vue.js 是采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。<br>具体步骤：<br>     第一步：需要observe的数据对象进行递归遍历，包括子属性对象的属性，都加上 setter和getter，这样的话，给这个对象的某个值赋值，就会触发setter，那么就能监听到了数据变化；<br>     第二步：compile解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图；<br>     第三步：Watcher订阅者是Observer和Compile之间通信的桥梁，主要做的事情是:<br>        1.在自身实例化时往属性订阅器(dep)里面添加自己<br>        2.自身必须有一个update()方法<br>        3.待属性变动dep.notice()通知时，能调用自身的update()方法，并触发Compile中绑定的回调，则功成身退。<br>     第四步：MVVM作为数据绑定的入口，整合Observer、Compile和Watcher三者，通过Observer来监听自己的model数据变化，通过Compile来解析编译模板指令，最终利用Watcher搭起Observer和Compile之间的通信桥梁，达到数据变化 -&gt; 视图更新；视图交互变化(input) -&gt; 数据model变更的双向绑定效果。</p>"},{"title":"在 CentOS 7 下安装配置 shadowsocks","toc":false,"date":"2017-11-24T05:50:00.000Z","_content":"\n# 在 CentOS 7 下安装配置 shadowsocks\n\nCentOS 7 开始默认使用[Systemd](https://en.wikipedia.org/wiki/Systemd)作为开启启动脚本的管理工具，[Shadowsocks](https://github.com/shadowsocks/)则是当前比较受欢迎的科学上网工具，本文将介绍如何在 CentOS 下安装和配置 Shadowsocks 服务。\n\n<!-- more -->\n\n## 安装 pip\n\npip是 python 的包管理工具。在本文中将使用 python 版本的 shadowsocks，此版本的 shadowsocks 已发布到 pip 上，因此我们需要通过 pip 命令来安装。\n\n在控制台执行以下命令安装 pip：\n\n```\ncurl \"https://bootstrap.pypa.io/get-pip.py\" -o \"get-pip.py\"\npython get-pip.py\n```\n\n## 安装配置 shadowsocks\n\n在控制台执行以下命令安装 shadowsocks：\n\n```\npip install --upgrade pip\npip install shadowsocks\n```\n\n安装完成后，需要创建配置文件`/etc/shadowsocks.json`，内容如下：\n\n```\n{\n  \"server\": \"0.0.0.0\",\n  \"server_port\": 8388,\n  \"password\": \"uzon57jd0v869t7w\",\n  \"method\": \"aes-256-cfb\"\n}\n```\n\n如果需要配置多个密码可以这样：\n\n```\n{\n  \"server\": \"0.0.0.0\",\n  \"local_address\": \"127.0.0.1\",\n  \"local_port\": 1080,\n  \"port_password\": {\n    \"8080\": \"你的密码1\",\n    \"8081\": \"你的密码2\"\n  },\n  \"timeout\": 600,\n  \"method\": \"aes-256-cfb\"\n}\n```\n\n\n说明：\n\n* `method`为加密方法，可选`aes-128-cfb`, `aes-192-cfb`, `aes-256-cfb`, `bf-cfb`, `cast5-cfb`, `des-cfb`, `rc4-md5`, `chacha20`, `salsa20`, `rc4`, `table`\n* `server_port`为服务监听端口\n* `password`为密码，可使用[密码生成工具](http://ucdok.com/project/generate_password.html)生成一个随机密码\n\n以上三项信息在配置 shadowsocks 客户端时需要配置一致，具体说明可查看 shadowsocks 的帮助文档。\n\n## 配置自启动\n\n新建启动脚本文件`/etc/systemd/system/shadowsocks.service`，内容如下：\n\n```\n[Unit]\nDescription=Shadowsocks\n\n[Service]\nTimeoutStartSec=0\nExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json\n\n[Install]\nWantedBy=multi-user.target\n```\n\n执行以下命令启动 shadowsocks 服务：\n\n```\nsystemctl enable shadowsocks\nsystemctl start shadowsocks\n```\n\n为了检查 shadowsocks 服务是否已成功启动，可以执行以下命令查看服务的状态：\n\n```\nsystemctl status shadowsocks -l\n```\n\n如果服务启动成功，则控制台显示的信息可能类似这样：\n\n```\n● shadowsocks.service - Shadowsocks\n   Loaded: loaded (/etc/systemd/system/shadowsocks.service; enabled; vendor preset: disabled)\n   Active: active (running) since Mon 2015-12-21 23:51:48 CST; 11min ago\n Main PID: 19334 (ssserver)\n   CGroup: /system.slice/shadowsocks.service\n           └─19334 /usr/bin/python /usr/bin/ssserver -c /etc/shadowsocks.json\n\nDec 21 23:51:48 morning.work systemd[1]: Started Shadowsocks.\nDec 21 23:51:48 morning.work systemd[1]: Starting Shadowsocks...\nDec 21 23:51:48 morning.work ssserver[19334]: INFO: loading config from /etc/shadowsocks.json\nDec 21 23:51:48 morning.work ssserver[19334]: 2015-12-21 23:51:48 INFO     loading libcrypto from libcrypto.so.10\nDec 21 23:51:48 morning.work ssserver[19334]: 2015-12-21 23:51:48 INFO     starting server at 0.0.0.0:8388\n```\n\n## 一键安装脚本\n\n新建文件`install-shadowsocks.sh`，内容如下：\n\n```\n#!/bin/bash\n# Install Shadowsocks on CentOS 7\n\necho \"Installing Shadowsocks...\"\n\nrandom-string()\n{\n    cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w ${1:-32} | head -n 1\n}\n\nCONFIG_FILE=/etc/shadowsocks.json\nSERVICE_FILE=/etc/systemd/system/shadowsocks.service\nSS_PASSWORD=$(random-string 32)\nSS_PORT=8388\nSS_METHOD=aes-256-cfb\nSS_IP=`ip route get 1 | awk '{print $NF;exit}'`\nGET_PIP_FILE=/tmp/get-pip.py\n\n# install pip\ncurl \"https://bootstrap.pypa.io/get-pip.py\" -o \"${GET_PIP_FILE}\"\npython ${GET_PIP_FILE}\n\n# install shadowsocks\npip install --upgrade pip\npip install shadowsocks\n\n# create shadowsocls config\ncat <<EOF | sudo tee ${CONFIG_FILE}\n{\n  \"server\": \"0.0.0.0\",\n  \"server_port\": ${SS_PORT},\n  \"password\": \"${SS_PASSWORD}\",\n  \"method\": \"${SS_METHOD}\"\n}\nEOF\n\n# create service\ncat <<EOF | sudo tee ${SERVICE_FILE}\n[Unit]\nDescription=Shadowsocks\n\n[Service]\nTimeoutStartSec=0\nExecStart=/usr/bin/ssserver -c ${CONFIG_FILE}\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# start service\nsystemctl enable shadowsocks\nsystemctl start shadowsocks\n\n# view service status\nsleep 5\nsystemctl status shadowsocks -l\n\necho \"================================\"\necho \"\"\necho \"Congratulations! Shadowsocks has been installed on your system.\"\necho \"You shadowsocks connection info:\"\necho \"--------------------------------\"\necho \"server:      ${SS_IP}\"\necho \"server_port: ${SS_PORT}\"\necho \"password:    ${SS_PASSWORD}\"\necho \"method:      ${SS_METHOD}\"\necho \"--------------------------------\"\n```\n\n执行以下命令一键安装：\n\n```\nchmod +x install-shadowsocks.sh\n./install-shadowsocks.sh\n```\n\n也可以直接执行以下命令从 GitHub 下载安装脚本并执行：\n\n```\nbash <(curl -s http://morning.work/examples/2015-12/install-shadowsocks.sh)\n```\n\n安装完成后会自动打印出 Shadowsocks 的连接配置信息。比如：\n\n```\nCongratulations! Shadowsocks has been installed on your system.\nYou shadowsocks connection info:\n--------------------------------\nserver:      10.0.2.15\nserver_port: 8388\npassword:    RaskAAcW0IQrVcA7n0QLCEphhng7K4Yc\nmethod:      aes-256-cfb\n--------------------------------\n```\n\n原文链接：[早起搬砖](http://morning.work/page/2015-12/install-shadowsocks-on-centos-7.html)；盗窃可耻，分享光荣；好东西记录下来做个备忘，顺便帮作者推广下网站。\n","source":"_posts/在 CentOS 7 下安装配置 shadowsocks.md","raw":"---\ntitle: 在 CentOS 7 下安装配置 shadowsocks\ntags:\n  - 科学上网\ncategories:\n  - 后端开发\ntoc: false\ndate: 2017-11-24 13:50:00\n---\n\n# 在 CentOS 7 下安装配置 shadowsocks\n\nCentOS 7 开始默认使用[Systemd](https://en.wikipedia.org/wiki/Systemd)作为开启启动脚本的管理工具，[Shadowsocks](https://github.com/shadowsocks/)则是当前比较受欢迎的科学上网工具，本文将介绍如何在 CentOS 下安装和配置 Shadowsocks 服务。\n\n<!-- more -->\n\n## 安装 pip\n\npip是 python 的包管理工具。在本文中将使用 python 版本的 shadowsocks，此版本的 shadowsocks 已发布到 pip 上，因此我们需要通过 pip 命令来安装。\n\n在控制台执行以下命令安装 pip：\n\n```\ncurl \"https://bootstrap.pypa.io/get-pip.py\" -o \"get-pip.py\"\npython get-pip.py\n```\n\n## 安装配置 shadowsocks\n\n在控制台执行以下命令安装 shadowsocks：\n\n```\npip install --upgrade pip\npip install shadowsocks\n```\n\n安装完成后，需要创建配置文件`/etc/shadowsocks.json`，内容如下：\n\n```\n{\n  \"server\": \"0.0.0.0\",\n  \"server_port\": 8388,\n  \"password\": \"uzon57jd0v869t7w\",\n  \"method\": \"aes-256-cfb\"\n}\n```\n\n如果需要配置多个密码可以这样：\n\n```\n{\n  \"server\": \"0.0.0.0\",\n  \"local_address\": \"127.0.0.1\",\n  \"local_port\": 1080,\n  \"port_password\": {\n    \"8080\": \"你的密码1\",\n    \"8081\": \"你的密码2\"\n  },\n  \"timeout\": 600,\n  \"method\": \"aes-256-cfb\"\n}\n```\n\n\n说明：\n\n* `method`为加密方法，可选`aes-128-cfb`, `aes-192-cfb`, `aes-256-cfb`, `bf-cfb`, `cast5-cfb`, `des-cfb`, `rc4-md5`, `chacha20`, `salsa20`, `rc4`, `table`\n* `server_port`为服务监听端口\n* `password`为密码，可使用[密码生成工具](http://ucdok.com/project/generate_password.html)生成一个随机密码\n\n以上三项信息在配置 shadowsocks 客户端时需要配置一致，具体说明可查看 shadowsocks 的帮助文档。\n\n## 配置自启动\n\n新建启动脚本文件`/etc/systemd/system/shadowsocks.service`，内容如下：\n\n```\n[Unit]\nDescription=Shadowsocks\n\n[Service]\nTimeoutStartSec=0\nExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json\n\n[Install]\nWantedBy=multi-user.target\n```\n\n执行以下命令启动 shadowsocks 服务：\n\n```\nsystemctl enable shadowsocks\nsystemctl start shadowsocks\n```\n\n为了检查 shadowsocks 服务是否已成功启动，可以执行以下命令查看服务的状态：\n\n```\nsystemctl status shadowsocks -l\n```\n\n如果服务启动成功，则控制台显示的信息可能类似这样：\n\n```\n● shadowsocks.service - Shadowsocks\n   Loaded: loaded (/etc/systemd/system/shadowsocks.service; enabled; vendor preset: disabled)\n   Active: active (running) since Mon 2015-12-21 23:51:48 CST; 11min ago\n Main PID: 19334 (ssserver)\n   CGroup: /system.slice/shadowsocks.service\n           └─19334 /usr/bin/python /usr/bin/ssserver -c /etc/shadowsocks.json\n\nDec 21 23:51:48 morning.work systemd[1]: Started Shadowsocks.\nDec 21 23:51:48 morning.work systemd[1]: Starting Shadowsocks...\nDec 21 23:51:48 morning.work ssserver[19334]: INFO: loading config from /etc/shadowsocks.json\nDec 21 23:51:48 morning.work ssserver[19334]: 2015-12-21 23:51:48 INFO     loading libcrypto from libcrypto.so.10\nDec 21 23:51:48 morning.work ssserver[19334]: 2015-12-21 23:51:48 INFO     starting server at 0.0.0.0:8388\n```\n\n## 一键安装脚本\n\n新建文件`install-shadowsocks.sh`，内容如下：\n\n```\n#!/bin/bash\n# Install Shadowsocks on CentOS 7\n\necho \"Installing Shadowsocks...\"\n\nrandom-string()\n{\n    cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w ${1:-32} | head -n 1\n}\n\nCONFIG_FILE=/etc/shadowsocks.json\nSERVICE_FILE=/etc/systemd/system/shadowsocks.service\nSS_PASSWORD=$(random-string 32)\nSS_PORT=8388\nSS_METHOD=aes-256-cfb\nSS_IP=`ip route get 1 | awk '{print $NF;exit}'`\nGET_PIP_FILE=/tmp/get-pip.py\n\n# install pip\ncurl \"https://bootstrap.pypa.io/get-pip.py\" -o \"${GET_PIP_FILE}\"\npython ${GET_PIP_FILE}\n\n# install shadowsocks\npip install --upgrade pip\npip install shadowsocks\n\n# create shadowsocls config\ncat <<EOF | sudo tee ${CONFIG_FILE}\n{\n  \"server\": \"0.0.0.0\",\n  \"server_port\": ${SS_PORT},\n  \"password\": \"${SS_PASSWORD}\",\n  \"method\": \"${SS_METHOD}\"\n}\nEOF\n\n# create service\ncat <<EOF | sudo tee ${SERVICE_FILE}\n[Unit]\nDescription=Shadowsocks\n\n[Service]\nTimeoutStartSec=0\nExecStart=/usr/bin/ssserver -c ${CONFIG_FILE}\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# start service\nsystemctl enable shadowsocks\nsystemctl start shadowsocks\n\n# view service status\nsleep 5\nsystemctl status shadowsocks -l\n\necho \"================================\"\necho \"\"\necho \"Congratulations! Shadowsocks has been installed on your system.\"\necho \"You shadowsocks connection info:\"\necho \"--------------------------------\"\necho \"server:      ${SS_IP}\"\necho \"server_port: ${SS_PORT}\"\necho \"password:    ${SS_PASSWORD}\"\necho \"method:      ${SS_METHOD}\"\necho \"--------------------------------\"\n```\n\n执行以下命令一键安装：\n\n```\nchmod +x install-shadowsocks.sh\n./install-shadowsocks.sh\n```\n\n也可以直接执行以下命令从 GitHub 下载安装脚本并执行：\n\n```\nbash <(curl -s http://morning.work/examples/2015-12/install-shadowsocks.sh)\n```\n\n安装完成后会自动打印出 Shadowsocks 的连接配置信息。比如：\n\n```\nCongratulations! Shadowsocks has been installed on your system.\nYou shadowsocks connection info:\n--------------------------------\nserver:      10.0.2.15\nserver_port: 8388\npassword:    RaskAAcW0IQrVcA7n0QLCEphhng7K4Yc\nmethod:      aes-256-cfb\n--------------------------------\n```\n\n原文链接：[早起搬砖](http://morning.work/page/2015-12/install-shadowsocks-on-centos-7.html)；盗窃可耻，分享光荣；好东西记录下来做个备忘，顺便帮作者推广下网站。\n","slug":"在 CentOS 7 下安装配置 shadowsocks","published":1,"updated":"2019-11-07T02:24:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo12008hh5s6nmuh9e8u","content":"<h1 id=\"在-CentOS-7-下安装配置-shadowsocks\"><a href=\"#在-CentOS-7-下安装配置-shadowsocks\" class=\"headerlink\" title=\"在 CentOS 7 下安装配置 shadowsocks\"></a>在 CentOS 7 下安装配置 shadowsocks</h1><p>CentOS 7 开始默认使用<a href=\"https://en.wikipedia.org/wiki/Systemd\" target=\"_blank\" rel=\"noopener\">Systemd</a>作为开启启动脚本的管理工具，<a href=\"https://github.com/shadowsocks/\" target=\"_blank\" rel=\"noopener\">Shadowsocks</a>则是当前比较受欢迎的科学上网工具，本文将介绍如何在 CentOS 下安装和配置 Shadowsocks 服务。</p>\n<a id=\"more\"></a>\n<h2 id=\"安装-pip\"><a href=\"#安装-pip\" class=\"headerlink\" title=\"安装 pip\"></a>安装 pip</h2><p>pip是 python 的包管理工具。在本文中将使用 python 版本的 shadowsocks，此版本的 shadowsocks 已发布到 pip 上，因此我们需要通过 pip 命令来安装。</p>\n<p>在控制台执行以下命令安装 pip：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl &quot;https://bootstrap.pypa.io/get-pip.py&quot; -o &quot;get-pip.py&quot;</span><br><span class=\"line\">python get-pip.py</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装配置-shadowsocks\"><a href=\"#安装配置-shadowsocks\" class=\"headerlink\" title=\"安装配置 shadowsocks\"></a>安装配置 shadowsocks</h2><p>在控制台执行以下命令安装 shadowsocks：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install --upgrade pip</span><br><span class=\"line\">pip install shadowsocks</span><br></pre></td></tr></table></figure>\n<p>安装完成后，需要创建配置文件<code>/etc/shadowsocks.json</code>，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;server&quot;: &quot;0.0.0.0&quot;,</span><br><span class=\"line\">  &quot;server_port&quot;: 8388,</span><br><span class=\"line\">  &quot;password&quot;: &quot;uzon57jd0v869t7w&quot;,</span><br><span class=\"line\">  &quot;method&quot;: &quot;aes-256-cfb&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果需要配置多个密码可以这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;server&quot;: &quot;0.0.0.0&quot;,</span><br><span class=\"line\">  &quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class=\"line\">  &quot;local_port&quot;: 1080,</span><br><span class=\"line\">  &quot;port_password&quot;: &#123;</span><br><span class=\"line\">    &quot;8080&quot;: &quot;你的密码1&quot;,</span><br><span class=\"line\">    &quot;8081&quot;: &quot;你的密码2&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;timeout&quot;: 600,</span><br><span class=\"line\">  &quot;method&quot;: &quot;aes-256-cfb&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><code>method</code>为加密方法，可选<code>aes-128-cfb</code>, <code>aes-192-cfb</code>, <code>aes-256-cfb</code>, <code>bf-cfb</code>, <code>cast5-cfb</code>, <code>des-cfb</code>, <code>rc4-md5</code>, <code>chacha20</code>, <code>salsa20</code>, <code>rc4</code>, <code>table</code></li>\n<li><code>server_port</code>为服务监听端口</li>\n<li><code>password</code>为密码，可使用<a href=\"http://ucdok.com/project/generate_password.html\" target=\"_blank\" rel=\"noopener\">密码生成工具</a>生成一个随机密码</li>\n</ul>\n<p>以上三项信息在配置 shadowsocks 客户端时需要配置一致，具体说明可查看 shadowsocks 的帮助文档。</p>\n<h2 id=\"配置自启动\"><a href=\"#配置自启动\" class=\"headerlink\" title=\"配置自启动\"></a>配置自启动</h2><p>新建启动脚本文件<code>/etc/systemd/system/shadowsocks.service</code>，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Shadowsocks</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">TimeoutStartSec=0</span><br><span class=\"line\">ExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n<p>执行以下命令启动 shadowsocks 服务：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable shadowsocks</span><br><span class=\"line\">systemctl start shadowsocks</span><br></pre></td></tr></table></figure>\n<p>为了检查 shadowsocks 服务是否已成功启动，可以执行以下命令查看服务的状态：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status shadowsocks -l</span><br></pre></td></tr></table></figure>\n<p>如果服务启动成功，则控制台显示的信息可能类似这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">● shadowsocks.service - Shadowsocks</span><br><span class=\"line\">   Loaded: loaded (/etc/systemd/system/shadowsocks.service; enabled; vendor preset: disabled)</span><br><span class=\"line\">   Active: active (running) since Mon 2015-12-21 23:51:48 CST; 11min ago</span><br><span class=\"line\"> Main PID: 19334 (ssserver)</span><br><span class=\"line\">   CGroup: /system.slice/shadowsocks.service</span><br><span class=\"line\">           └─19334 /usr/bin/python /usr/bin/ssserver -c /etc/shadowsocks.json</span><br><span class=\"line\"></span><br><span class=\"line\">Dec 21 23:51:48 morning.work systemd[1]: Started Shadowsocks.</span><br><span class=\"line\">Dec 21 23:51:48 morning.work systemd[1]: Starting Shadowsocks...</span><br><span class=\"line\">Dec 21 23:51:48 morning.work ssserver[19334]: INFO: loading config from /etc/shadowsocks.json</span><br><span class=\"line\">Dec 21 23:51:48 morning.work ssserver[19334]: 2015-12-21 23:51:48 INFO     loading libcrypto from libcrypto.so.10</span><br><span class=\"line\">Dec 21 23:51:48 morning.work ssserver[19334]: 2015-12-21 23:51:48 INFO     starting server at 0.0.0.0:8388</span><br></pre></td></tr></table></figure>\n<h2 id=\"一键安装脚本\"><a href=\"#一键安装脚本\" class=\"headerlink\" title=\"一键安装脚本\"></a>一键安装脚本</h2><p>新建文件<code>install-shadowsocks.sh</code>，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># Install Shadowsocks on CentOS 7</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;Installing Shadowsocks...&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">random-string()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cat /dev/urandom | tr -dc &apos;a-zA-Z0-9&apos; | fold -w $&#123;1:-32&#125; | head -n 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">CONFIG_FILE=/etc/shadowsocks.json</span><br><span class=\"line\">SERVICE_FILE=/etc/systemd/system/shadowsocks.service</span><br><span class=\"line\">SS_PASSWORD=$(random-string 32)</span><br><span class=\"line\">SS_PORT=8388</span><br><span class=\"line\">SS_METHOD=aes-256-cfb</span><br><span class=\"line\">SS_IP=`ip route get 1 | awk &apos;&#123;print $NF;exit&#125;&apos;`</span><br><span class=\"line\">GET_PIP_FILE=/tmp/get-pip.py</span><br><span class=\"line\"></span><br><span class=\"line\"># install pip</span><br><span class=\"line\">curl &quot;https://bootstrap.pypa.io/get-pip.py&quot; -o &quot;$&#123;GET_PIP_FILE&#125;&quot;</span><br><span class=\"line\">python $&#123;GET_PIP_FILE&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># install shadowsocks</span><br><span class=\"line\">pip install --upgrade pip</span><br><span class=\"line\">pip install shadowsocks</span><br><span class=\"line\"></span><br><span class=\"line\"># create shadowsocls config</span><br><span class=\"line\">cat &lt;&lt;EOF | sudo tee $&#123;CONFIG_FILE&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;server&quot;: &quot;0.0.0.0&quot;,</span><br><span class=\"line\">  &quot;server_port&quot;: $&#123;SS_PORT&#125;,</span><br><span class=\"line\">  &quot;password&quot;: &quot;$&#123;SS_PASSWORD&#125;&quot;,</span><br><span class=\"line\">  &quot;method&quot;: &quot;$&#123;SS_METHOD&#125;&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"># create service</span><br><span class=\"line\">cat &lt;&lt;EOF | sudo tee $&#123;SERVICE_FILE&#125;</span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Shadowsocks</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">TimeoutStartSec=0</span><br><span class=\"line\">ExecStart=/usr/bin/ssserver -c $&#123;CONFIG_FILE&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"># start service</span><br><span class=\"line\">systemctl enable shadowsocks</span><br><span class=\"line\">systemctl start shadowsocks</span><br><span class=\"line\"></span><br><span class=\"line\"># view service status</span><br><span class=\"line\">sleep 5</span><br><span class=\"line\">systemctl status shadowsocks -l</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;================================&quot;</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo &quot;Congratulations! Shadowsocks has been installed on your system.&quot;</span><br><span class=\"line\">echo &quot;You shadowsocks connection info:&quot;</span><br><span class=\"line\">echo &quot;--------------------------------&quot;</span><br><span class=\"line\">echo &quot;server:      $&#123;SS_IP&#125;&quot;</span><br><span class=\"line\">echo &quot;server_port: $&#123;SS_PORT&#125;&quot;</span><br><span class=\"line\">echo &quot;password:    $&#123;SS_PASSWORD&#125;&quot;</span><br><span class=\"line\">echo &quot;method:      $&#123;SS_METHOD&#125;&quot;</span><br><span class=\"line\">echo &quot;--------------------------------&quot;</span><br></pre></td></tr></table></figure>\n<p>执行以下命令一键安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x install-shadowsocks.sh</span><br><span class=\"line\">./install-shadowsocks.sh</span><br></pre></td></tr></table></figure>\n<p>也可以直接执行以下命令从 GitHub 下载安装脚本并执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash &lt;(curl -s http://morning.work/examples/2015-12/install-shadowsocks.sh)</span><br></pre></td></tr></table></figure>\n<p>安装完成后会自动打印出 Shadowsocks 的连接配置信息。比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Congratulations! Shadowsocks has been installed on your system.</span><br><span class=\"line\">You shadowsocks connection info:</span><br><span class=\"line\">--------------------------------</span><br><span class=\"line\">server:      10.0.2.15</span><br><span class=\"line\">server_port: 8388</span><br><span class=\"line\">password:    RaskAAcW0IQrVcA7n0QLCEphhng7K4Yc</span><br><span class=\"line\">method:      aes-256-cfb</span><br><span class=\"line\">--------------------------------</span><br></pre></td></tr></table></figure>\n<p>原文链接：<a href=\"http://morning.work/page/2015-12/install-shadowsocks-on-centos-7.html\" target=\"_blank\" rel=\"noopener\">早起搬砖</a>；盗窃可耻，分享光荣；好东西记录下来做个备忘，顺便帮作者推广下网站。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"在-CentOS-7-下安装配置-shadowsocks\"><a href=\"#在-CentOS-7-下安装配置-shadowsocks\" class=\"headerlink\" title=\"在 CentOS 7 下安装配置 shadowsocks\"></a>在 CentOS 7 下安装配置 shadowsocks</h1><p>CentOS 7 开始默认使用<a href=\"https://en.wikipedia.org/wiki/Systemd\" target=\"_blank\" rel=\"noopener\">Systemd</a>作为开启启动脚本的管理工具，<a href=\"https://github.com/shadowsocks/\" target=\"_blank\" rel=\"noopener\">Shadowsocks</a>则是当前比较受欢迎的科学上网工具，本文将介绍如何在 CentOS 下安装和配置 Shadowsocks 服务。</p>","more":"<h2 id=\"安装-pip\"><a href=\"#安装-pip\" class=\"headerlink\" title=\"安装 pip\"></a>安装 pip</h2><p>pip是 python 的包管理工具。在本文中将使用 python 版本的 shadowsocks，此版本的 shadowsocks 已发布到 pip 上，因此我们需要通过 pip 命令来安装。</p>\n<p>在控制台执行以下命令安装 pip：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl &quot;https://bootstrap.pypa.io/get-pip.py&quot; -o &quot;get-pip.py&quot;</span><br><span class=\"line\">python get-pip.py</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装配置-shadowsocks\"><a href=\"#安装配置-shadowsocks\" class=\"headerlink\" title=\"安装配置 shadowsocks\"></a>安装配置 shadowsocks</h2><p>在控制台执行以下命令安装 shadowsocks：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install --upgrade pip</span><br><span class=\"line\">pip install shadowsocks</span><br></pre></td></tr></table></figure>\n<p>安装完成后，需要创建配置文件<code>/etc/shadowsocks.json</code>，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;server&quot;: &quot;0.0.0.0&quot;,</span><br><span class=\"line\">  &quot;server_port&quot;: 8388,</span><br><span class=\"line\">  &quot;password&quot;: &quot;uzon57jd0v869t7w&quot;,</span><br><span class=\"line\">  &quot;method&quot;: &quot;aes-256-cfb&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果需要配置多个密码可以这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;server&quot;: &quot;0.0.0.0&quot;,</span><br><span class=\"line\">  &quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class=\"line\">  &quot;local_port&quot;: 1080,</span><br><span class=\"line\">  &quot;port_password&quot;: &#123;</span><br><span class=\"line\">    &quot;8080&quot;: &quot;你的密码1&quot;,</span><br><span class=\"line\">    &quot;8081&quot;: &quot;你的密码2&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;timeout&quot;: 600,</span><br><span class=\"line\">  &quot;method&quot;: &quot;aes-256-cfb&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><code>method</code>为加密方法，可选<code>aes-128-cfb</code>, <code>aes-192-cfb</code>, <code>aes-256-cfb</code>, <code>bf-cfb</code>, <code>cast5-cfb</code>, <code>des-cfb</code>, <code>rc4-md5</code>, <code>chacha20</code>, <code>salsa20</code>, <code>rc4</code>, <code>table</code></li>\n<li><code>server_port</code>为服务监听端口</li>\n<li><code>password</code>为密码，可使用<a href=\"http://ucdok.com/project/generate_password.html\" target=\"_blank\" rel=\"noopener\">密码生成工具</a>生成一个随机密码</li>\n</ul>\n<p>以上三项信息在配置 shadowsocks 客户端时需要配置一致，具体说明可查看 shadowsocks 的帮助文档。</p>\n<h2 id=\"配置自启动\"><a href=\"#配置自启动\" class=\"headerlink\" title=\"配置自启动\"></a>配置自启动</h2><p>新建启动脚本文件<code>/etc/systemd/system/shadowsocks.service</code>，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Shadowsocks</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">TimeoutStartSec=0</span><br><span class=\"line\">ExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n<p>执行以下命令启动 shadowsocks 服务：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable shadowsocks</span><br><span class=\"line\">systemctl start shadowsocks</span><br></pre></td></tr></table></figure>\n<p>为了检查 shadowsocks 服务是否已成功启动，可以执行以下命令查看服务的状态：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status shadowsocks -l</span><br></pre></td></tr></table></figure>\n<p>如果服务启动成功，则控制台显示的信息可能类似这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">● shadowsocks.service - Shadowsocks</span><br><span class=\"line\">   Loaded: loaded (/etc/systemd/system/shadowsocks.service; enabled; vendor preset: disabled)</span><br><span class=\"line\">   Active: active (running) since Mon 2015-12-21 23:51:48 CST; 11min ago</span><br><span class=\"line\"> Main PID: 19334 (ssserver)</span><br><span class=\"line\">   CGroup: /system.slice/shadowsocks.service</span><br><span class=\"line\">           └─19334 /usr/bin/python /usr/bin/ssserver -c /etc/shadowsocks.json</span><br><span class=\"line\"></span><br><span class=\"line\">Dec 21 23:51:48 morning.work systemd[1]: Started Shadowsocks.</span><br><span class=\"line\">Dec 21 23:51:48 morning.work systemd[1]: Starting Shadowsocks...</span><br><span class=\"line\">Dec 21 23:51:48 morning.work ssserver[19334]: INFO: loading config from /etc/shadowsocks.json</span><br><span class=\"line\">Dec 21 23:51:48 morning.work ssserver[19334]: 2015-12-21 23:51:48 INFO     loading libcrypto from libcrypto.so.10</span><br><span class=\"line\">Dec 21 23:51:48 morning.work ssserver[19334]: 2015-12-21 23:51:48 INFO     starting server at 0.0.0.0:8388</span><br></pre></td></tr></table></figure>\n<h2 id=\"一键安装脚本\"><a href=\"#一键安装脚本\" class=\"headerlink\" title=\"一键安装脚本\"></a>一键安装脚本</h2><p>新建文件<code>install-shadowsocks.sh</code>，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># Install Shadowsocks on CentOS 7</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;Installing Shadowsocks...&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">random-string()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cat /dev/urandom | tr -dc &apos;a-zA-Z0-9&apos; | fold -w $&#123;1:-32&#125; | head -n 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">CONFIG_FILE=/etc/shadowsocks.json</span><br><span class=\"line\">SERVICE_FILE=/etc/systemd/system/shadowsocks.service</span><br><span class=\"line\">SS_PASSWORD=$(random-string 32)</span><br><span class=\"line\">SS_PORT=8388</span><br><span class=\"line\">SS_METHOD=aes-256-cfb</span><br><span class=\"line\">SS_IP=`ip route get 1 | awk &apos;&#123;print $NF;exit&#125;&apos;`</span><br><span class=\"line\">GET_PIP_FILE=/tmp/get-pip.py</span><br><span class=\"line\"></span><br><span class=\"line\"># install pip</span><br><span class=\"line\">curl &quot;https://bootstrap.pypa.io/get-pip.py&quot; -o &quot;$&#123;GET_PIP_FILE&#125;&quot;</span><br><span class=\"line\">python $&#123;GET_PIP_FILE&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># install shadowsocks</span><br><span class=\"line\">pip install --upgrade pip</span><br><span class=\"line\">pip install shadowsocks</span><br><span class=\"line\"></span><br><span class=\"line\"># create shadowsocls config</span><br><span class=\"line\">cat &lt;&lt;EOF | sudo tee $&#123;CONFIG_FILE&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;server&quot;: &quot;0.0.0.0&quot;,</span><br><span class=\"line\">  &quot;server_port&quot;: $&#123;SS_PORT&#125;,</span><br><span class=\"line\">  &quot;password&quot;: &quot;$&#123;SS_PASSWORD&#125;&quot;,</span><br><span class=\"line\">  &quot;method&quot;: &quot;$&#123;SS_METHOD&#125;&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"># create service</span><br><span class=\"line\">cat &lt;&lt;EOF | sudo tee $&#123;SERVICE_FILE&#125;</span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Shadowsocks</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">TimeoutStartSec=0</span><br><span class=\"line\">ExecStart=/usr/bin/ssserver -c $&#123;CONFIG_FILE&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"># start service</span><br><span class=\"line\">systemctl enable shadowsocks</span><br><span class=\"line\">systemctl start shadowsocks</span><br><span class=\"line\"></span><br><span class=\"line\"># view service status</span><br><span class=\"line\">sleep 5</span><br><span class=\"line\">systemctl status shadowsocks -l</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;================================&quot;</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo &quot;Congratulations! Shadowsocks has been installed on your system.&quot;</span><br><span class=\"line\">echo &quot;You shadowsocks connection info:&quot;</span><br><span class=\"line\">echo &quot;--------------------------------&quot;</span><br><span class=\"line\">echo &quot;server:      $&#123;SS_IP&#125;&quot;</span><br><span class=\"line\">echo &quot;server_port: $&#123;SS_PORT&#125;&quot;</span><br><span class=\"line\">echo &quot;password:    $&#123;SS_PASSWORD&#125;&quot;</span><br><span class=\"line\">echo &quot;method:      $&#123;SS_METHOD&#125;&quot;</span><br><span class=\"line\">echo &quot;--------------------------------&quot;</span><br></pre></td></tr></table></figure>\n<p>执行以下命令一键安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x install-shadowsocks.sh</span><br><span class=\"line\">./install-shadowsocks.sh</span><br></pre></td></tr></table></figure>\n<p>也可以直接执行以下命令从 GitHub 下载安装脚本并执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash &lt;(curl -s http://morning.work/examples/2015-12/install-shadowsocks.sh)</span><br></pre></td></tr></table></figure>\n<p>安装完成后会自动打印出 Shadowsocks 的连接配置信息。比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Congratulations! Shadowsocks has been installed on your system.</span><br><span class=\"line\">You shadowsocks connection info:</span><br><span class=\"line\">--------------------------------</span><br><span class=\"line\">server:      10.0.2.15</span><br><span class=\"line\">server_port: 8388</span><br><span class=\"line\">password:    RaskAAcW0IQrVcA7n0QLCEphhng7K4Yc</span><br><span class=\"line\">method:      aes-256-cfb</span><br><span class=\"line\">--------------------------------</span><br></pre></td></tr></table></figure>\n<p>原文链接：<a href=\"http://morning.work/page/2015-12/install-shadowsocks-on-centos-7.html\" target=\"_blank\" rel=\"noopener\">早起搬砖</a>；盗窃可耻，分享光荣；好东西记录下来做个备忘，顺便帮作者推广下网站。</p>"},{"title":"域名解析中A记录、CNAME、MX记录、NS记录的区别和联系","toc":false,"date":"2018-01-11T06:32:12.000Z","_content":"\n## A记录\n\n又称IP指向，用户可以在此设置子域名并指向到自己的目标主机地址上，从而实现通过域名找到服务器。\n\n说明：·指向的目标主机地址类型只能使用IP地址；\n\n## CNAME\n\n通常称别名指向。可以为一个主机设置别名。比如设置test.mydomain.com，用来指向一个主机www.rddns.com那么以后就可以用test.mydomain.com来代替访问www.rddns.com了。\n\n说明：CNAME的目标主机地址只能使用主机名，不能使用IP地址；·主机名前不能有任何其他前缀，如：http://等是不被允许的；·A记录优先于CNAME记录。即如果一个主机地址同时存在A记录和CNAME记录，则CNAME记录不生效。\n\n<!-- more -->\n\n## MX记录\n\n邮件交换记录。用于将以该域名为结尾的电子邮件指向对应的邮件服务器以进行处理。如：用户所用的邮件是以域名mydomain.com为结尾的，则需要在管理界面中添加该域名的MX记录来处理所有以@mydomain.com结尾的邮件。\n\n说明：MX记录可以使用主机名或IP地址；·MX记录可以通过设置优先级实现主辅服务器设置，“优先级”中的数字越小表示级别越高。也可以使用相同优先级达到负载均衡的目的；·如果在“主机名”中填入子域名则此MX记录只对该子域名生效。\n\n## NS记录\n\n解析服务器记录。用来表明由哪台服务器对该域名进行解析。这里的NS记录只对子域名生效。\n\n例如用户希望由12.34.56.78这台服务器解析news.mydomain.com，则需要设置news.mydomain.com的NS记录。\n\n说明：·“优先级”中的数字越小表示级别越高；·“IP地址/主机名”中既可以填写IP地址，也可以填写像ns.mydomain.com这样的主机地址，但必须保证该主机地址有效。\n\n如，将news.mydomain.com的NS记录指向到ns.mydomain.com，在设置NS记录的同时还需要设置ns.mydomain.com的指向，\n\n否则NS记录将无法正常解析；·NS记录优先于A记录。即，如果一个主机地址同时存在NS记录和A记录，则A记录不生效。这里的NS记录只对子域名生效。\n\n## 什么是负载均衡服务器？\n\n负载均衡(Server Load Balancing，SLB)是指在一系列资源上面智能地分布网络负载。负载均衡可以减少网络拥塞，提高整体网络性能，提高自愈性，并确保企业关键性应用的可用性。当相同子域有多个目标地址，或域名的MX记录有多个目标地址且优先级相同时，表示轮循，可以达到负载均衡的目的，但需要虚拟主机和邮箱服务商支持。\n\n## 什么是TTL？\n\nTTL值TTL值全称是“生存时间（Time To Live)”，简单的说它表示DNS记录在DNS服务器上缓存时间。这个缓存时间太长和太短都不好，如果缓存时间太长，一旦域名被解析到的IP有变化，会导致被客户端缓存的域名无法解析到变化后的IP地址，以致该域名不能正常解析，这段时间内有可能会有一部分用户无法访问网站。如果缓存时间太短，会导致用户每次访问网站都要重新解析一次域名。\n","source":"_posts/域名解析中A记录、CNAME、MX记录、NS记录的区别和联系.md","raw":"---\ntitle: 域名解析中A记录、CNAME、MX记录、NS记录的区别和联系\ntags:\n  - 域名\ncategories:\n  - 后端开发\ntoc: false\ndate: 2018-01-11 14:32:12\n---\n\n## A记录\n\n又称IP指向，用户可以在此设置子域名并指向到自己的目标主机地址上，从而实现通过域名找到服务器。\n\n说明：·指向的目标主机地址类型只能使用IP地址；\n\n## CNAME\n\n通常称别名指向。可以为一个主机设置别名。比如设置test.mydomain.com，用来指向一个主机www.rddns.com那么以后就可以用test.mydomain.com来代替访问www.rddns.com了。\n\n说明：CNAME的目标主机地址只能使用主机名，不能使用IP地址；·主机名前不能有任何其他前缀，如：http://等是不被允许的；·A记录优先于CNAME记录。即如果一个主机地址同时存在A记录和CNAME记录，则CNAME记录不生效。\n\n<!-- more -->\n\n## MX记录\n\n邮件交换记录。用于将以该域名为结尾的电子邮件指向对应的邮件服务器以进行处理。如：用户所用的邮件是以域名mydomain.com为结尾的，则需要在管理界面中添加该域名的MX记录来处理所有以@mydomain.com结尾的邮件。\n\n说明：MX记录可以使用主机名或IP地址；·MX记录可以通过设置优先级实现主辅服务器设置，“优先级”中的数字越小表示级别越高。也可以使用相同优先级达到负载均衡的目的；·如果在“主机名”中填入子域名则此MX记录只对该子域名生效。\n\n## NS记录\n\n解析服务器记录。用来表明由哪台服务器对该域名进行解析。这里的NS记录只对子域名生效。\n\n例如用户希望由12.34.56.78这台服务器解析news.mydomain.com，则需要设置news.mydomain.com的NS记录。\n\n说明：·“优先级”中的数字越小表示级别越高；·“IP地址/主机名”中既可以填写IP地址，也可以填写像ns.mydomain.com这样的主机地址，但必须保证该主机地址有效。\n\n如，将news.mydomain.com的NS记录指向到ns.mydomain.com，在设置NS记录的同时还需要设置ns.mydomain.com的指向，\n\n否则NS记录将无法正常解析；·NS记录优先于A记录。即，如果一个主机地址同时存在NS记录和A记录，则A记录不生效。这里的NS记录只对子域名生效。\n\n## 什么是负载均衡服务器？\n\n负载均衡(Server Load Balancing，SLB)是指在一系列资源上面智能地分布网络负载。负载均衡可以减少网络拥塞，提高整体网络性能，提高自愈性，并确保企业关键性应用的可用性。当相同子域有多个目标地址，或域名的MX记录有多个目标地址且优先级相同时，表示轮循，可以达到负载均衡的目的，但需要虚拟主机和邮箱服务商支持。\n\n## 什么是TTL？\n\nTTL值TTL值全称是“生存时间（Time To Live)”，简单的说它表示DNS记录在DNS服务器上缓存时间。这个缓存时间太长和太短都不好，如果缓存时间太长，一旦域名被解析到的IP有变化，会导致被客户端缓存的域名无法解析到变化后的IP地址，以致该域名不能正常解析，这段时间内有可能会有一部分用户无法访问网站。如果缓存时间太短，会导致用户每次访问网站都要重新解析一次域名。\n","slug":"域名解析中A记录、CNAME、MX记录、NS记录的区别和联系","published":1,"updated":"2019-11-07T02:24:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo14008mh5s63uqyix0l","content":"<h2 id=\"A记录\"><a href=\"#A记录\" class=\"headerlink\" title=\"A记录\"></a>A记录</h2><p>又称IP指向，用户可以在此设置子域名并指向到自己的目标主机地址上，从而实现通过域名找到服务器。</p>\n<p>说明：·指向的目标主机地址类型只能使用IP地址；</p>\n<h2 id=\"CNAME\"><a href=\"#CNAME\" class=\"headerlink\" title=\"CNAME\"></a>CNAME</h2><p>通常称别名指向。可以为一个主机设置别名。比如设置test.mydomain.com，用来指向一个主机<a href=\"http://www.rddns.com那么以后就可以用test.mydomain.com来代替访问www.rddns.com了。\" target=\"_blank\" rel=\"noopener\">www.rddns.com那么以后就可以用test.mydomain.com来代替访问www.rddns.com了。</a></p>\n<p>说明：CNAME的目标主机地址只能使用主机名，不能使用IP地址；·主机名前不能有任何其他前缀，如：http://等是不被允许的；·A记录优先于CNAME记录。即如果一个主机地址同时存在A记录和CNAME记录，则CNAME记录不生效。</p>\n<a id=\"more\"></a>\n<h2 id=\"MX记录\"><a href=\"#MX记录\" class=\"headerlink\" title=\"MX记录\"></a>MX记录</h2><p>邮件交换记录。用于将以该域名为结尾的电子邮件指向对应的邮件服务器以进行处理。如：用户所用的邮件是以域名mydomain.com为结尾的，则需要在管理界面中添加该域名的MX记录来处理所有以@mydomain.com结尾的邮件。</p>\n<p>说明：MX记录可以使用主机名或IP地址；·MX记录可以通过设置优先级实现主辅服务器设置，“优先级”中的数字越小表示级别越高。也可以使用相同优先级达到负载均衡的目的；·如果在“主机名”中填入子域名则此MX记录只对该子域名生效。</p>\n<h2 id=\"NS记录\"><a href=\"#NS记录\" class=\"headerlink\" title=\"NS记录\"></a>NS记录</h2><p>解析服务器记录。用来表明由哪台服务器对该域名进行解析。这里的NS记录只对子域名生效。</p>\n<p>例如用户希望由12.34.56.78这台服务器解析news.mydomain.com，则需要设置news.mydomain.com的NS记录。</p>\n<p>说明：·“优先级”中的数字越小表示级别越高；·“IP地址/主机名”中既可以填写IP地址，也可以填写像ns.mydomain.com这样的主机地址，但必须保证该主机地址有效。</p>\n<p>如，将news.mydomain.com的NS记录指向到ns.mydomain.com，在设置NS记录的同时还需要设置ns.mydomain.com的指向，</p>\n<p>否则NS记录将无法正常解析；·NS记录优先于A记录。即，如果一个主机地址同时存在NS记录和A记录，则A记录不生效。这里的NS记录只对子域名生效。</p>\n<h2 id=\"什么是负载均衡服务器？\"><a href=\"#什么是负载均衡服务器？\" class=\"headerlink\" title=\"什么是负载均衡服务器？\"></a>什么是负载均衡服务器？</h2><p>负载均衡(Server Load Balancing，SLB)是指在一系列资源上面智能地分布网络负载。负载均衡可以减少网络拥塞，提高整体网络性能，提高自愈性，并确保企业关键性应用的可用性。当相同子域有多个目标地址，或域名的MX记录有多个目标地址且优先级相同时，表示轮循，可以达到负载均衡的目的，但需要虚拟主机和邮箱服务商支持。</p>\n<h2 id=\"什么是TTL？\"><a href=\"#什么是TTL？\" class=\"headerlink\" title=\"什么是TTL？\"></a>什么是TTL？</h2><p>TTL值TTL值全称是“生存时间（Time To Live)”，简单的说它表示DNS记录在DNS服务器上缓存时间。这个缓存时间太长和太短都不好，如果缓存时间太长，一旦域名被解析到的IP有变化，会导致被客户端缓存的域名无法解析到变化后的IP地址，以致该域名不能正常解析，这段时间内有可能会有一部分用户无法访问网站。如果缓存时间太短，会导致用户每次访问网站都要重新解析一次域名。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"A记录\"><a href=\"#A记录\" class=\"headerlink\" title=\"A记录\"></a>A记录</h2><p>又称IP指向，用户可以在此设置子域名并指向到自己的目标主机地址上，从而实现通过域名找到服务器。</p>\n<p>说明：·指向的目标主机地址类型只能使用IP地址；</p>\n<h2 id=\"CNAME\"><a href=\"#CNAME\" class=\"headerlink\" title=\"CNAME\"></a>CNAME</h2><p>通常称别名指向。可以为一个主机设置别名。比如设置test.mydomain.com，用来指向一个主机<a href=\"http://www.rddns.com那么以后就可以用test.mydomain.com来代替访问www.rddns.com了。\" target=\"_blank\" rel=\"noopener\">www.rddns.com那么以后就可以用test.mydomain.com来代替访问www.rddns.com了。</a></p>\n<p>说明：CNAME的目标主机地址只能使用主机名，不能使用IP地址；·主机名前不能有任何其他前缀，如：http://等是不被允许的；·A记录优先于CNAME记录。即如果一个主机地址同时存在A记录和CNAME记录，则CNAME记录不生效。</p>","more":"<h2 id=\"MX记录\"><a href=\"#MX记录\" class=\"headerlink\" title=\"MX记录\"></a>MX记录</h2><p>邮件交换记录。用于将以该域名为结尾的电子邮件指向对应的邮件服务器以进行处理。如：用户所用的邮件是以域名mydomain.com为结尾的，则需要在管理界面中添加该域名的MX记录来处理所有以@mydomain.com结尾的邮件。</p>\n<p>说明：MX记录可以使用主机名或IP地址；·MX记录可以通过设置优先级实现主辅服务器设置，“优先级”中的数字越小表示级别越高。也可以使用相同优先级达到负载均衡的目的；·如果在“主机名”中填入子域名则此MX记录只对该子域名生效。</p>\n<h2 id=\"NS记录\"><a href=\"#NS记录\" class=\"headerlink\" title=\"NS记录\"></a>NS记录</h2><p>解析服务器记录。用来表明由哪台服务器对该域名进行解析。这里的NS记录只对子域名生效。</p>\n<p>例如用户希望由12.34.56.78这台服务器解析news.mydomain.com，则需要设置news.mydomain.com的NS记录。</p>\n<p>说明：·“优先级”中的数字越小表示级别越高；·“IP地址/主机名”中既可以填写IP地址，也可以填写像ns.mydomain.com这样的主机地址，但必须保证该主机地址有效。</p>\n<p>如，将news.mydomain.com的NS记录指向到ns.mydomain.com，在设置NS记录的同时还需要设置ns.mydomain.com的指向，</p>\n<p>否则NS记录将无法正常解析；·NS记录优先于A记录。即，如果一个主机地址同时存在NS记录和A记录，则A记录不生效。这里的NS记录只对子域名生效。</p>\n<h2 id=\"什么是负载均衡服务器？\"><a href=\"#什么是负载均衡服务器？\" class=\"headerlink\" title=\"什么是负载均衡服务器？\"></a>什么是负载均衡服务器？</h2><p>负载均衡(Server Load Balancing，SLB)是指在一系列资源上面智能地分布网络负载。负载均衡可以减少网络拥塞，提高整体网络性能，提高自愈性，并确保企业关键性应用的可用性。当相同子域有多个目标地址，或域名的MX记录有多个目标地址且优先级相同时，表示轮循，可以达到负载均衡的目的，但需要虚拟主机和邮箱服务商支持。</p>\n<h2 id=\"什么是TTL？\"><a href=\"#什么是TTL？\" class=\"headerlink\" title=\"什么是TTL？\"></a>什么是TTL？</h2><p>TTL值TTL值全称是“生存时间（Time To Live)”，简单的说它表示DNS记录在DNS服务器上缓存时间。这个缓存时间太长和太短都不好，如果缓存时间太长，一旦域名被解析到的IP有变化，会导致被客户端缓存的域名无法解析到变化后的IP地址，以致该域名不能正常解析，这段时间内有可能会有一部分用户无法访问网站。如果缓存时间太短，会导致用户每次访问网站都要重新解析一次域名。</p>"},{"title":"如何使用electron自动更新功能","toc":false,"date":"2019-03-22T10:13:34.000Z","_content":"\n最近做了个项目，要用到electron的自动更新功能。\n\n直接贴代码：\n\nupdate.js\n\n```javascript\n// 检测更新，在你想要检查更新的时候执行，renderer事件触发后的操作自行编写\nimport { autoUpdater } from 'electron-updater'\nimport { ipcMain } from 'electron'\n\nautoUpdater.autoDownload = false\nconst uploadUrl = 'http://xxx.xxx.xxx/soft/download/' // 下载地址，不加后面的**.exe\n\nexport function updateHandle(mainWindow) {\n  const message = {\n    error: '检查更新出错，请稍后再试！',\n    checking: '正在检查更新……',\n    updateAva: '检测到新版本',\n    updateNotAva: '现在使用的是最新版本，无需更新！'\n  }\n\n  // 通过main进程发送事件给renderer进程，提示更新信息\n  const sendUpdateMessage = (text) => {\n    mainWindow.webContents.send('message', text)\n  }\n\n  autoUpdater.setFeedURL(uploadUrl)\n\n  autoUpdater.on('error', () => {\n    sendUpdateMessage(message.error)\n  })\n\n  autoUpdater.on('checking-for-update', () => {\n    sendUpdateMessage(message.checking)\n  })\n\n  autoUpdater.on('update-available', (info) => {\n    sendUpdateMessage(message.updateAva, info)\n    mainWindow.webContents.send('update-available', info)\n  })\n\n  autoUpdater.on('update-not-available', (info) => {\n    sendUpdateMessage(message.updateNotAva)\n  })\n\n  // 更新下载进度事件\n  autoUpdater.on('download-progress', (downloadObj) => {\n    mainWindow.webContents.send('downloadProgress', downloadObj)\n  })\n\n  autoUpdater.on('update-downloaded', (event, releaseNotes) => {\n    mainWindow.webContents.send('update-downloaded', event, releaseNotes)\n  })\n\n  ipcMain.on('checkForUpdate', () => {\n    // 执行自动更新检查\n    autoUpdater.checkForUpdates()\n  })\n\n  ipcMain.on('downloadUpdate', () => {\n    // 下载更新\n    autoUpdater.downloadUpdate()\n  })\n\n  ipcMain.on('quitAndInstall', () => {\n    // 退出并更新\n    autoUpdater.quitAndInstall()\n  })\n}\n\n```\n\nupdate.vue\n\n```html\n<template>\n  <div>\n    <div style=\"text-align:center;\">\n      <el-button style=\"height: 5em;\" :loading=\"loading\" type=\"primary\" icon=\"el-icon-refresh\" @click=\"checkoutUpdate\">\n        {{ btnText }}\n      </el-button>\n      <p style=\"margin-top: 1em;\">\n        {{ tip }}\n      </p>\n    </div>\n\n    <el-dialog :title=\"`已下载新版本${newVersion}`\" :visible.sync=\"dialogVisible\" width=\"30%\">\n      <p v-for=\"(item, idx) in features\" :key=\"idx\" class=\"item\">\n        {{ idx+1 }}.{{ item }}\n      </p>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"onCancel\">稍后更新</el-button>\n        <el-button type=\"primary\" @click=\"updateNow\">立即更新</el-button>\n      </span>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport { ipcRenderer } from 'electron'\n\nexport default {\n  name: 'SettingUpdate',\n  data() {\n    return {\n      tip: '',\n      btnText: '检查最新版本！',\n      dialogVisible: false,\n      features: [],\n      newVersion: '',\n      loading: false\n    }\n  },\n  created() {\n    ipcRenderer.on('message', (event, text) => {\n      this.tip = text\n    })\n    ipcRenderer.on('downloadProgress', (event, downloadObj) => {\n      this.loading = true\n      const downloadPercent = downloadObj.percent.toFixed(2)\n      this.btnText = `正在下载(${downloadPercent}%)`\n    })\n\n    ipcRenderer.on('update-available', (event, info) => {\n      this.$confirm(`检测到新版本${info.version}，是否下载更新?`, '新版本提示', {\n        confirmButtonText: '下载',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        ipcRenderer.send('downloadUpdate')\n      }).catch(() => {\n      })\n    })\n\n    ipcRenderer.on('update-downloaded', (event, releaseNotes) => {\n      console.log('--------releaseNotes--------')\n      console.log(releaseNotes)\n      console.log('--------releaseNotes--------')\n      this.btnText - '检查最新版本！'\n      this.loading = false\n      this.dialogVisible = true\n      this.tip = ''\n      this.newVersion = releaseNotes.version\n      this.features = releaseNotes.features\n    })\n  },\n  methods: {\n    checkoutUpdate() {\n      ipcRenderer.send('checkForUpdate')\n    },\n    onCancel() {\n      this.dialogVisible = false\n    },\n    updateNow() {\n      this.dialogVisible = false\n      ipcRenderer.send('quitAndInstall')\n    }\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n  .item {\n    line-height: 1.5em;\n    font-size: 1.2em;\n  }\n</style>\n\n\n```\n\n","source":"_posts/如何使用electron自动更新功能.md","raw":"---\ntitle: 如何使用electron自动更新功能\ntags:\n  - electron\ncategories:\n  - Web开发\ntoc: false\ndate: 2019-03-22 18:13:34\n---\n\n最近做了个项目，要用到electron的自动更新功能。\n\n直接贴代码：\n\nupdate.js\n\n```javascript\n// 检测更新，在你想要检查更新的时候执行，renderer事件触发后的操作自行编写\nimport { autoUpdater } from 'electron-updater'\nimport { ipcMain } from 'electron'\n\nautoUpdater.autoDownload = false\nconst uploadUrl = 'http://xxx.xxx.xxx/soft/download/' // 下载地址，不加后面的**.exe\n\nexport function updateHandle(mainWindow) {\n  const message = {\n    error: '检查更新出错，请稍后再试！',\n    checking: '正在检查更新……',\n    updateAva: '检测到新版本',\n    updateNotAva: '现在使用的是最新版本，无需更新！'\n  }\n\n  // 通过main进程发送事件给renderer进程，提示更新信息\n  const sendUpdateMessage = (text) => {\n    mainWindow.webContents.send('message', text)\n  }\n\n  autoUpdater.setFeedURL(uploadUrl)\n\n  autoUpdater.on('error', () => {\n    sendUpdateMessage(message.error)\n  })\n\n  autoUpdater.on('checking-for-update', () => {\n    sendUpdateMessage(message.checking)\n  })\n\n  autoUpdater.on('update-available', (info) => {\n    sendUpdateMessage(message.updateAva, info)\n    mainWindow.webContents.send('update-available', info)\n  })\n\n  autoUpdater.on('update-not-available', (info) => {\n    sendUpdateMessage(message.updateNotAva)\n  })\n\n  // 更新下载进度事件\n  autoUpdater.on('download-progress', (downloadObj) => {\n    mainWindow.webContents.send('downloadProgress', downloadObj)\n  })\n\n  autoUpdater.on('update-downloaded', (event, releaseNotes) => {\n    mainWindow.webContents.send('update-downloaded', event, releaseNotes)\n  })\n\n  ipcMain.on('checkForUpdate', () => {\n    // 执行自动更新检查\n    autoUpdater.checkForUpdates()\n  })\n\n  ipcMain.on('downloadUpdate', () => {\n    // 下载更新\n    autoUpdater.downloadUpdate()\n  })\n\n  ipcMain.on('quitAndInstall', () => {\n    // 退出并更新\n    autoUpdater.quitAndInstall()\n  })\n}\n\n```\n\nupdate.vue\n\n```html\n<template>\n  <div>\n    <div style=\"text-align:center;\">\n      <el-button style=\"height: 5em;\" :loading=\"loading\" type=\"primary\" icon=\"el-icon-refresh\" @click=\"checkoutUpdate\">\n        {{ btnText }}\n      </el-button>\n      <p style=\"margin-top: 1em;\">\n        {{ tip }}\n      </p>\n    </div>\n\n    <el-dialog :title=\"`已下载新版本${newVersion}`\" :visible.sync=\"dialogVisible\" width=\"30%\">\n      <p v-for=\"(item, idx) in features\" :key=\"idx\" class=\"item\">\n        {{ idx+1 }}.{{ item }}\n      </p>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"onCancel\">稍后更新</el-button>\n        <el-button type=\"primary\" @click=\"updateNow\">立即更新</el-button>\n      </span>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport { ipcRenderer } from 'electron'\n\nexport default {\n  name: 'SettingUpdate',\n  data() {\n    return {\n      tip: '',\n      btnText: '检查最新版本！',\n      dialogVisible: false,\n      features: [],\n      newVersion: '',\n      loading: false\n    }\n  },\n  created() {\n    ipcRenderer.on('message', (event, text) => {\n      this.tip = text\n    })\n    ipcRenderer.on('downloadProgress', (event, downloadObj) => {\n      this.loading = true\n      const downloadPercent = downloadObj.percent.toFixed(2)\n      this.btnText = `正在下载(${downloadPercent}%)`\n    })\n\n    ipcRenderer.on('update-available', (event, info) => {\n      this.$confirm(`检测到新版本${info.version}，是否下载更新?`, '新版本提示', {\n        confirmButtonText: '下载',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        ipcRenderer.send('downloadUpdate')\n      }).catch(() => {\n      })\n    })\n\n    ipcRenderer.on('update-downloaded', (event, releaseNotes) => {\n      console.log('--------releaseNotes--------')\n      console.log(releaseNotes)\n      console.log('--------releaseNotes--------')\n      this.btnText - '检查最新版本！'\n      this.loading = false\n      this.dialogVisible = true\n      this.tip = ''\n      this.newVersion = releaseNotes.version\n      this.features = releaseNotes.features\n    })\n  },\n  methods: {\n    checkoutUpdate() {\n      ipcRenderer.send('checkForUpdate')\n    },\n    onCancel() {\n      this.dialogVisible = false\n    },\n    updateNow() {\n      this.dialogVisible = false\n      ipcRenderer.send('quitAndInstall')\n    }\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n  .item {\n    line-height: 1.5em;\n    font-size: 1.2em;\n  }\n</style>\n\n\n```\n\n","slug":"如何使用electron自动更新功能","published":1,"updated":"2019-11-07T02:24:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo15008ph5s6nf8t3wwk","content":"<p>最近做了个项目，要用到electron的自动更新功能。</p>\n<p>直接贴代码：</p>\n<p>update.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 检测更新，在你想要检查更新的时候执行，renderer事件触发后的操作自行编写</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; autoUpdater &#125; <span class=\"keyword\">from</span> <span class=\"string\">'electron-updater'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ipcMain &#125; <span class=\"keyword\">from</span> <span class=\"string\">'electron'</span></span><br><span class=\"line\"></span><br><span class=\"line\">autoUpdater.autoDownload = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> uploadUrl = <span class=\"string\">'http://xxx.xxx.xxx/soft/download/'</span> <span class=\"comment\">// 下载地址，不加后面的**.exe</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateHandle</span>(<span class=\"params\">mainWindow</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> message = &#123;</span><br><span class=\"line\">    error: <span class=\"string\">'检查更新出错，请稍后再试！'</span>,</span><br><span class=\"line\">    checking: <span class=\"string\">'正在检查更新……'</span>,</span><br><span class=\"line\">    updateAva: <span class=\"string\">'检测到新版本'</span>,</span><br><span class=\"line\">    updateNotAva: <span class=\"string\">'现在使用的是最新版本，无需更新！'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 通过main进程发送事件给renderer进程，提示更新信息</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> sendUpdateMessage = <span class=\"function\">(<span class=\"params\">text</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    mainWindow.webContents.send(<span class=\"string\">'message'</span>, text)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  autoUpdater.setFeedURL(uploadUrl)</span><br><span class=\"line\"></span><br><span class=\"line\">  autoUpdater.on(<span class=\"string\">'error'</span>, () =&gt; &#123;</span><br><span class=\"line\">    sendUpdateMessage(message.error)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  autoUpdater.on(<span class=\"string\">'checking-for-update'</span>, () =&gt; &#123;</span><br><span class=\"line\">    sendUpdateMessage(message.checking)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  autoUpdater.on(<span class=\"string\">'update-available'</span>, (info) =&gt; &#123;</span><br><span class=\"line\">    sendUpdateMessage(message.updateAva, info)</span><br><span class=\"line\">    mainWindow.webContents.send(<span class=\"string\">'update-available'</span>, info)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  autoUpdater.on(<span class=\"string\">'update-not-available'</span>, (info) =&gt; &#123;</span><br><span class=\"line\">    sendUpdateMessage(message.updateNotAva)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 更新下载进度事件</span></span><br><span class=\"line\">  autoUpdater.on(<span class=\"string\">'download-progress'</span>, (downloadObj) =&gt; &#123;</span><br><span class=\"line\">    mainWindow.webContents.send(<span class=\"string\">'downloadProgress'</span>, downloadObj)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  autoUpdater.on(<span class=\"string\">'update-downloaded'</span>, (event, releaseNotes) =&gt; &#123;</span><br><span class=\"line\">    mainWindow.webContents.send(<span class=\"string\">'update-downloaded'</span>, event, releaseNotes)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  ipcMain.on(<span class=\"string\">'checkForUpdate'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 执行自动更新检查</span></span><br><span class=\"line\">    autoUpdater.checkForUpdates()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  ipcMain.on(<span class=\"string\">'downloadUpdate'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 下载更新</span></span><br><span class=\"line\">    autoUpdater.downloadUpdate()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  ipcMain.on(<span class=\"string\">'quitAndInstall'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 退出并更新</span></span><br><span class=\"line\">    autoUpdater.quitAndInstall()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>update.vue</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"text-align:center;\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">el-button</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height: 5em;\"</span> <span class=\"attr\">:loading</span>=<span class=\"string\">\"loading\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"primary\"</span> <span class=\"attr\">icon</span>=<span class=\"string\">\"el-icon-refresh\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"checkoutUpdate\"</span>&gt;</span></span><br><span class=\"line\">        &#123;&#123; btnText &#125;&#125;</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">\"margin-top: 1em;\"</span>&gt;</span></span><br><span class=\"line\">        &#123;&#123; tip &#125;&#125;</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">el-dialog</span> <span class=\"attr\">:title</span>=<span class=\"string\">\"`已下载新版本$&#123;newVersion&#125;`\"</span> <span class=\"attr\">:visible.sync</span>=<span class=\"string\">\"dialogVisible\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"30%\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, idx) in features\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"idx\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">        &#123;&#123; idx+1 &#125;&#125;.&#123;&#123; item &#125;&#125;</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"footer\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dialog-footer\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">el-button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"onCancel\"</span>&gt;</span>稍后更新<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">el-button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"primary\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"updateNow\"</span>&gt;</span>立即更新<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">el-dialog</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> &#123; ipcRenderer &#125; <span class=\"keyword\">from</span> <span class=\"string\">'electron'</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  name: <span class=\"string\">'SettingUpdate'</span>,</span></span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      tip: <span class=\"string\">''</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      btnText: <span class=\"string\">'检查最新版本！'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      dialogVisible: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\">      features: [],</span><br><span class=\"line\"><span class=\"javascript\">      newVersion: <span class=\"string\">''</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      loading: <span class=\"literal\">false</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created() &#123;</span><br><span class=\"line\"><span class=\"javascript\">    ipcRenderer.on(<span class=\"string\">'message'</span>, (event, text) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.tip = text</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"><span class=\"javascript\">    ipcRenderer.on(<span class=\"string\">'downloadProgress'</span>, (event, downloadObj) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.loading = <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">const</span> downloadPercent = downloadObj.percent.toFixed(<span class=\"number\">2</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.btnText = <span class=\"string\">`正在下载(<span class=\"subst\">$&#123;downloadPercent&#125;</span>%)`</span></span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    ipcRenderer.on(<span class=\"string\">'update-available'</span>, (event, info) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.$confirm(<span class=\"string\">`检测到新版本<span class=\"subst\">$&#123;info.version&#125;</span>，是否下载更新?`</span>, <span class=\"string\">'新版本提示'</span>, &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        confirmButtonText: <span class=\"string\">'下载'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        cancelButtonText: <span class=\"string\">'取消'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        type: <span class=\"string\">'warning'</span></span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        ipcRenderer.send(<span class=\"string\">'downloadUpdate'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;).catch(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    ipcRenderer.on(<span class=\"string\">'update-downloaded'</span>, (event, releaseNotes) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'--------releaseNotes--------'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(releaseNotes)</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'--------releaseNotes--------'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.btnText - <span class=\"string\">'检查最新版本！'</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.loading = <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.dialogVisible = <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.tip = <span class=\"string\">''</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.newVersion = releaseNotes.version</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.features = releaseNotes.features</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    checkoutUpdate() &#123;</span><br><span class=\"line\"><span class=\"javascript\">      ipcRenderer.send(<span class=\"string\">'checkForUpdate'</span>)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    onCancel() &#123;</span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.dialogVisible = <span class=\"literal\">false</span></span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    updateNow() &#123;</span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.dialogVisible = <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"javascript\">      ipcRenderer.send(<span class=\"string\">'quitAndInstall'</span>)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"scss\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.item</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">line-height</span>: 1<span class=\"selector-class\">.5em</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">font-size</span>: 1<span class=\"selector-class\">.2em</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>最近做了个项目，要用到electron的自动更新功能。</p>\n<p>直接贴代码：</p>\n<p>update.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 检测更新，在你想要检查更新的时候执行，renderer事件触发后的操作自行编写</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; autoUpdater &#125; <span class=\"keyword\">from</span> <span class=\"string\">'electron-updater'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ipcMain &#125; <span class=\"keyword\">from</span> <span class=\"string\">'electron'</span></span><br><span class=\"line\"></span><br><span class=\"line\">autoUpdater.autoDownload = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> uploadUrl = <span class=\"string\">'http://xxx.xxx.xxx/soft/download/'</span> <span class=\"comment\">// 下载地址，不加后面的**.exe</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateHandle</span>(<span class=\"params\">mainWindow</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> message = &#123;</span><br><span class=\"line\">    error: <span class=\"string\">'检查更新出错，请稍后再试！'</span>,</span><br><span class=\"line\">    checking: <span class=\"string\">'正在检查更新……'</span>,</span><br><span class=\"line\">    updateAva: <span class=\"string\">'检测到新版本'</span>,</span><br><span class=\"line\">    updateNotAva: <span class=\"string\">'现在使用的是最新版本，无需更新！'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 通过main进程发送事件给renderer进程，提示更新信息</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> sendUpdateMessage = <span class=\"function\">(<span class=\"params\">text</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    mainWindow.webContents.send(<span class=\"string\">'message'</span>, text)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  autoUpdater.setFeedURL(uploadUrl)</span><br><span class=\"line\"></span><br><span class=\"line\">  autoUpdater.on(<span class=\"string\">'error'</span>, () =&gt; &#123;</span><br><span class=\"line\">    sendUpdateMessage(message.error)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  autoUpdater.on(<span class=\"string\">'checking-for-update'</span>, () =&gt; &#123;</span><br><span class=\"line\">    sendUpdateMessage(message.checking)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  autoUpdater.on(<span class=\"string\">'update-available'</span>, (info) =&gt; &#123;</span><br><span class=\"line\">    sendUpdateMessage(message.updateAva, info)</span><br><span class=\"line\">    mainWindow.webContents.send(<span class=\"string\">'update-available'</span>, info)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  autoUpdater.on(<span class=\"string\">'update-not-available'</span>, (info) =&gt; &#123;</span><br><span class=\"line\">    sendUpdateMessage(message.updateNotAva)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 更新下载进度事件</span></span><br><span class=\"line\">  autoUpdater.on(<span class=\"string\">'download-progress'</span>, (downloadObj) =&gt; &#123;</span><br><span class=\"line\">    mainWindow.webContents.send(<span class=\"string\">'downloadProgress'</span>, downloadObj)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  autoUpdater.on(<span class=\"string\">'update-downloaded'</span>, (event, releaseNotes) =&gt; &#123;</span><br><span class=\"line\">    mainWindow.webContents.send(<span class=\"string\">'update-downloaded'</span>, event, releaseNotes)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  ipcMain.on(<span class=\"string\">'checkForUpdate'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 执行自动更新检查</span></span><br><span class=\"line\">    autoUpdater.checkForUpdates()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  ipcMain.on(<span class=\"string\">'downloadUpdate'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 下载更新</span></span><br><span class=\"line\">    autoUpdater.downloadUpdate()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  ipcMain.on(<span class=\"string\">'quitAndInstall'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 退出并更新</span></span><br><span class=\"line\">    autoUpdater.quitAndInstall()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>update.vue</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"text-align:center;\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">el-button</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height: 5em;\"</span> <span class=\"attr\">:loading</span>=<span class=\"string\">\"loading\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"primary\"</span> <span class=\"attr\">icon</span>=<span class=\"string\">\"el-icon-refresh\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"checkoutUpdate\"</span>&gt;</span></span><br><span class=\"line\">        &#123;&#123; btnText &#125;&#125;</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">\"margin-top: 1em;\"</span>&gt;</span></span><br><span class=\"line\">        &#123;&#123; tip &#125;&#125;</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">el-dialog</span> <span class=\"attr\">:title</span>=<span class=\"string\">\"`已下载新版本$&#123;newVersion&#125;`\"</span> <span class=\"attr\">:visible.sync</span>=<span class=\"string\">\"dialogVisible\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"30%\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, idx) in features\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"idx\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">        &#123;&#123; idx+1 &#125;&#125;.&#123;&#123; item &#125;&#125;</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"footer\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dialog-footer\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">el-button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"onCancel\"</span>&gt;</span>稍后更新<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">el-button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"primary\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"updateNow\"</span>&gt;</span>立即更新<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">el-dialog</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> &#123; ipcRenderer &#125; <span class=\"keyword\">from</span> <span class=\"string\">'electron'</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  name: <span class=\"string\">'SettingUpdate'</span>,</span></span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      tip: <span class=\"string\">''</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      btnText: <span class=\"string\">'检查最新版本！'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      dialogVisible: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\">      features: [],</span><br><span class=\"line\"><span class=\"javascript\">      newVersion: <span class=\"string\">''</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      loading: <span class=\"literal\">false</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created() &#123;</span><br><span class=\"line\"><span class=\"javascript\">    ipcRenderer.on(<span class=\"string\">'message'</span>, (event, text) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.tip = text</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"><span class=\"javascript\">    ipcRenderer.on(<span class=\"string\">'downloadProgress'</span>, (event, downloadObj) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.loading = <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">const</span> downloadPercent = downloadObj.percent.toFixed(<span class=\"number\">2</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.btnText = <span class=\"string\">`正在下载(<span class=\"subst\">$&#123;downloadPercent&#125;</span>%)`</span></span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    ipcRenderer.on(<span class=\"string\">'update-available'</span>, (event, info) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.$confirm(<span class=\"string\">`检测到新版本<span class=\"subst\">$&#123;info.version&#125;</span>，是否下载更新?`</span>, <span class=\"string\">'新版本提示'</span>, &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        confirmButtonText: <span class=\"string\">'下载'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        cancelButtonText: <span class=\"string\">'取消'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        type: <span class=\"string\">'warning'</span></span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        ipcRenderer.send(<span class=\"string\">'downloadUpdate'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;).catch(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    ipcRenderer.on(<span class=\"string\">'update-downloaded'</span>, (event, releaseNotes) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'--------releaseNotes--------'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(releaseNotes)</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'--------releaseNotes--------'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.btnText - <span class=\"string\">'检查最新版本！'</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.loading = <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.dialogVisible = <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.tip = <span class=\"string\">''</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.newVersion = releaseNotes.version</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.features = releaseNotes.features</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    checkoutUpdate() &#123;</span><br><span class=\"line\"><span class=\"javascript\">      ipcRenderer.send(<span class=\"string\">'checkForUpdate'</span>)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    onCancel() &#123;</span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.dialogVisible = <span class=\"literal\">false</span></span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    updateNow() &#123;</span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.dialogVisible = <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"javascript\">      ipcRenderer.send(<span class=\"string\">'quitAndInstall'</span>)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"scss\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.item</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">line-height</span>: 1<span class=\"selector-class\">.5em</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">font-size</span>: 1<span class=\"selector-class\">.2em</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"如何通过linux ssh远程linux不用输入密码登入","toc":false,"date":"2018-04-08T05:52:41.000Z","_content":"\n1. 首先登入一台linux服务器，此台做为母机（即登入其他linux系统用这台做为入口）；执行一行命令生成key文件：\n\n```\nssh-keygen -t rsa\n```\n\n2. 在母机上，进入/root/.ssh目录，找到id_rsa.pub该文件，这个文件就是刚才执行ssh-keygen所生成的公钥key文件。\n\n```\ncd ~/.ssh/\nls -lsh\n```\n\n3. 用scp命令，将母机产生的key拷一份到远程的linux服务器上，并命名成authorized_keys；这一步的操作需要手动输入密码。\n\n```\nscp ~/.ssh/id_rsa.pub  root@192.168.1.113:/root/.ssh/authorized_keys\n```\n\n4. 现在为止，你已完成了所有的操作；可在母机通过ssh root@192.168.1.113 你会发现不在用输放密码了。相同的scp命令也是一样的情况，无需手动输入密码。\n","source":"_posts/如何通过linux-ssh远程linux不用输入密码登入.md","raw":"---\ntitle: 如何通过linux ssh远程linux不用输入密码登入\ntags:\n  - linux\ncategories:\n  - 后端开发\ntoc: false\ndate: 2018-04-08 13:52:41\n---\n\n1. 首先登入一台linux服务器，此台做为母机（即登入其他linux系统用这台做为入口）；执行一行命令生成key文件：\n\n```\nssh-keygen -t rsa\n```\n\n2. 在母机上，进入/root/.ssh目录，找到id_rsa.pub该文件，这个文件就是刚才执行ssh-keygen所生成的公钥key文件。\n\n```\ncd ~/.ssh/\nls -lsh\n```\n\n3. 用scp命令，将母机产生的key拷一份到远程的linux服务器上，并命名成authorized_keys；这一步的操作需要手动输入密码。\n\n```\nscp ~/.ssh/id_rsa.pub  root@192.168.1.113:/root/.ssh/authorized_keys\n```\n\n4. 现在为止，你已完成了所有的操作；可在母机通过ssh root@192.168.1.113 你会发现不在用输放密码了。相同的scp命令也是一样的情况，无需手动输入密码。\n","slug":"如何通过linux-ssh远程linux不用输入密码登入","published":1,"updated":"2019-11-07T02:24:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo16008th5s68edj3r72","content":"<ol>\n<li>首先登入一台linux服务器，此台做为母机（即登入其他linux系统用这台做为入口）；执行一行命令生成key文件：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在母机上，进入/root/.ssh目录，找到id_rsa.pub该文件，这个文件就是刚才执行ssh-keygen所生成的公钥key文件。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/.ssh/</span><br><span class=\"line\">ls -lsh</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>用scp命令，将母机产生的key拷一份到远程的linux服务器上，并命名成authorized_keys；这一步的操作需要手动输入密码。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp ~/.ssh/id_rsa.pub  root@192.168.1.113:/root/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>现在为止，你已完成了所有的操作；可在母机通过ssh <a href=\"mailto:root@192.168.1.113\" target=\"_blank\" rel=\"noopener\">root@192.168.1.113</a> 你会发现不在用输放密码了。相同的scp命令也是一样的情况，无需手动输入密码。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>首先登入一台linux服务器，此台做为母机（即登入其他linux系统用这台做为入口）；执行一行命令生成key文件：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在母机上，进入/root/.ssh目录，找到id_rsa.pub该文件，这个文件就是刚才执行ssh-keygen所生成的公钥key文件。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/.ssh/</span><br><span class=\"line\">ls -lsh</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>用scp命令，将母机产生的key拷一份到远程的linux服务器上，并命名成authorized_keys；这一步的操作需要手动输入密码。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp ~/.ssh/id_rsa.pub  root@192.168.1.113:/root/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>现在为止，你已完成了所有的操作；可在母机通过ssh <a href=\"mailto:root@192.168.1.113\" target=\"_blank\" rel=\"noopener\">root@192.168.1.113</a> 你会发现不在用输放密码了。相同的scp命令也是一样的情况，无需手动输入密码。</li>\n</ol>\n"},{"title":"安装pomelo","toc":false,"date":"2018-02-28T03:55:04.000Z","_content":"\npomelo是基于Node.js的，目前pomelo已经**完全支持Windows、Linux、Mac**等多种平台。\n\n如果是windows系统，请参考原文，由于我用的是mac os系统与linux环境，因此windows环境不再做验证工作。\n\n<!-- more -->\n\n## 准备\n* 确保你的机器**可以上网**,因为安装pomelo的过程需要从网上下载其依赖的包。\n* 确保你的系统上已经要**安装了Node**，目前最新的Node提供了已经编译好的二进制安装包，包括Windows，Mac和Linux等平台。想省事的话，直接去这里下载对应的安装包，直接安装就好了。Node同时也提供了传统的从源码编译的方式安装，不过比起直接使用二进制的方式要麻烦。\n* 确保你的系统中安装有**python(2.5 < version < 3.0)**以及**C++的编译器**。Node的源码主要由C++代码和JavaScript代码构成，但是却用**gyp**工具来做源码的项目管理，该工具采用Python语言写成的。对于非windows平台，一般都会预装Python以及C++编译工具；对于Windows系统，请确保你的Windows系统包含源码编译工具。在Windows平台上，Node.js采用gyp来生成Visual Studio Solution文件，最终通过VC++的编译器将其编译为二进制文件。\n* 虽然pomelo是用Javascript写成，但是pomelo依赖的库中，有使用了C++语言写的扩展，因此安装pomelo的过程中会使用到C++编译器。 所以，在安装之前请确保你的Windows系统满足以下两个条件：\n\t1. **python(2.5<version<3.0)**。\n\t2. **VC++ 编译器**，包含在Visual Studio 2010中（VC++ 2010 Express亦可）。对于windows8的用户，需要安装Microsoft Visual Studio C++ 2012。\n* 如果你使用的是Mac OS X系统, 则需要安装**Xcode Command Line Tools**或者**Xcode的完整包**以及make工具.\n\n## 安装pomelo\n使用npm(node包管理工具)全局安装pomelo:\n\n```\n$ npm install pomelo -g\n```\n\n可以通过如下命令下载源代码的方式安装\n\n```\n$ git clone https://github.com/NetEase/pomelo.git\n$ cd pomelo\n$ npm install -g\n```\n\n其中-g表示全局安装，关于npm的使用问题，可以参考npm的文档，里面有详细的npm使用的介绍。如果安装过程中没有报错误，说明安装成功。\n\nwindows下安装经验：\n\n```\n1. node,vs2010 和 python(2.5<v<3) 都是32位或者都是64位的。\n2. 配置  PYTHON=d:\\Python27\\python.exe(设置成你自己的路径)。注意不是path里面,而是和path同级的，直接在全局或者当前用户下配置。\n3. 保证环境变量path里面有 %SystemRoot%\\system32;%SystemRoot%;%SystemRoot%\\System32\\Wbem;\n  注： 这三个环境变量中貌似只有%SystemRoot%\\system32这个环境变量有用，没具体试（没有他会报CreateProcessW找不到的错误)。\n4. 如果在命令行界面安装pomelo失败，可以在Visual Studio的命令行界面安装。\n```\n\n下面我们将通过一个HelloWorld项目来检验我们的安装是否成功。\n\n**总结一下：直接`npm install pomelo -g`在机器上就可以用了 不用看上面太多东西，只有当你无法使用的时候再看看就行了**\n\n[原文地址](https://github.com/NetEase/pomelo/wiki/%E5%AE%89%E8%A3%85pomelo)\n","source":"_posts/安装pomelo.md","raw":"---\ntitle: 安装pomelo\ntags:\n  - pomelo\ncategories:\n  - 后端开发\ntoc: false\ndate: 2018-02-28 11:55:04\n---\n\npomelo是基于Node.js的，目前pomelo已经**完全支持Windows、Linux、Mac**等多种平台。\n\n如果是windows系统，请参考原文，由于我用的是mac os系统与linux环境，因此windows环境不再做验证工作。\n\n<!-- more -->\n\n## 准备\n* 确保你的机器**可以上网**,因为安装pomelo的过程需要从网上下载其依赖的包。\n* 确保你的系统上已经要**安装了Node**，目前最新的Node提供了已经编译好的二进制安装包，包括Windows，Mac和Linux等平台。想省事的话，直接去这里下载对应的安装包，直接安装就好了。Node同时也提供了传统的从源码编译的方式安装，不过比起直接使用二进制的方式要麻烦。\n* 确保你的系统中安装有**python(2.5 < version < 3.0)**以及**C++的编译器**。Node的源码主要由C++代码和JavaScript代码构成，但是却用**gyp**工具来做源码的项目管理，该工具采用Python语言写成的。对于非windows平台，一般都会预装Python以及C++编译工具；对于Windows系统，请确保你的Windows系统包含源码编译工具。在Windows平台上，Node.js采用gyp来生成Visual Studio Solution文件，最终通过VC++的编译器将其编译为二进制文件。\n* 虽然pomelo是用Javascript写成，但是pomelo依赖的库中，有使用了C++语言写的扩展，因此安装pomelo的过程中会使用到C++编译器。 所以，在安装之前请确保你的Windows系统满足以下两个条件：\n\t1. **python(2.5<version<3.0)**。\n\t2. **VC++ 编译器**，包含在Visual Studio 2010中（VC++ 2010 Express亦可）。对于windows8的用户，需要安装Microsoft Visual Studio C++ 2012。\n* 如果你使用的是Mac OS X系统, 则需要安装**Xcode Command Line Tools**或者**Xcode的完整包**以及make工具.\n\n## 安装pomelo\n使用npm(node包管理工具)全局安装pomelo:\n\n```\n$ npm install pomelo -g\n```\n\n可以通过如下命令下载源代码的方式安装\n\n```\n$ git clone https://github.com/NetEase/pomelo.git\n$ cd pomelo\n$ npm install -g\n```\n\n其中-g表示全局安装，关于npm的使用问题，可以参考npm的文档，里面有详细的npm使用的介绍。如果安装过程中没有报错误，说明安装成功。\n\nwindows下安装经验：\n\n```\n1. node,vs2010 和 python(2.5<v<3) 都是32位或者都是64位的。\n2. 配置  PYTHON=d:\\Python27\\python.exe(设置成你自己的路径)。注意不是path里面,而是和path同级的，直接在全局或者当前用户下配置。\n3. 保证环境变量path里面有 %SystemRoot%\\system32;%SystemRoot%;%SystemRoot%\\System32\\Wbem;\n  注： 这三个环境变量中貌似只有%SystemRoot%\\system32这个环境变量有用，没具体试（没有他会报CreateProcessW找不到的错误)。\n4. 如果在命令行界面安装pomelo失败，可以在Visual Studio的命令行界面安装。\n```\n\n下面我们将通过一个HelloWorld项目来检验我们的安装是否成功。\n\n**总结一下：直接`npm install pomelo -g`在机器上就可以用了 不用看上面太多东西，只有当你无法使用的时候再看看就行了**\n\n[原文地址](https://github.com/NetEase/pomelo/wiki/%E5%AE%89%E8%A3%85pomelo)\n","slug":"安装pomelo","published":1,"updated":"2019-11-07T02:24:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo19008wh5s6rptm8ac0","content":"<p>pomelo是基于Node.js的，目前pomelo已经<strong>完全支持Windows、Linux、Mac</strong>等多种平台。</p>\n<p>如果是windows系统，请参考原文，由于我用的是mac os系统与linux环境，因此windows环境不再做验证工作。</p>\n<a id=\"more\"></a>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><ul>\n<li>确保你的机器<strong>可以上网</strong>,因为安装pomelo的过程需要从网上下载其依赖的包。</li>\n<li>确保你的系统上已经要<strong>安装了Node</strong>，目前最新的Node提供了已经编译好的二进制安装包，包括Windows，Mac和Linux等平台。想省事的话，直接去这里下载对应的安装包，直接安装就好了。Node同时也提供了传统的从源码编译的方式安装，不过比起直接使用二进制的方式要麻烦。</li>\n<li>确保你的系统中安装有<strong>python(2.5 &lt; version &lt; 3.0)</strong>以及<strong>C++的编译器</strong>。Node的源码主要由C++代码和JavaScript代码构成，但是却用<strong>gyp</strong>工具来做源码的项目管理，该工具采用Python语言写成的。对于非windows平台，一般都会预装Python以及C++编译工具；对于Windows系统，请确保你的Windows系统包含源码编译工具。在Windows平台上，Node.js采用gyp来生成Visual Studio Solution文件，最终通过VC++的编译器将其编译为二进制文件。</li>\n<li>虽然pomelo是用Javascript写成，但是pomelo依赖的库中，有使用了C++语言写的扩展，因此安装pomelo的过程中会使用到C++编译器。 所以，在安装之前请确保你的Windows系统满足以下两个条件：<ol>\n<li><strong>python(2.5&lt;version&lt;3.0)</strong>。</li>\n<li><strong>VC++ 编译器</strong>，包含在Visual Studio 2010中（VC++ 2010 Express亦可）。对于windows8的用户，需要安装Microsoft Visual Studio C++ 2012。</li>\n</ol>\n</li>\n<li>如果你使用的是Mac OS X系统, 则需要安装<strong>Xcode Command Line Tools</strong>或者<strong>Xcode的完整包</strong>以及make工具.</li>\n</ul>\n<h2 id=\"安装pomelo\"><a href=\"#安装pomelo\" class=\"headerlink\" title=\"安装pomelo\"></a>安装pomelo</h2><p>使用npm(node包管理工具)全局安装pomelo:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install pomelo -g</span><br></pre></td></tr></table></figure>\n<p>可以通过如下命令下载源代码的方式安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone https://github.com/NetEase/pomelo.git</span><br><span class=\"line\">$ cd pomelo</span><br><span class=\"line\">$ npm install -g</span><br></pre></td></tr></table></figure>\n<p>其中-g表示全局安装，关于npm的使用问题，可以参考npm的文档，里面有详细的npm使用的介绍。如果安装过程中没有报错误，说明安装成功。</p>\n<p>windows下安装经验：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. node,vs2010 和 python(2.5&lt;v&lt;3) 都是32位或者都是64位的。</span><br><span class=\"line\">2. 配置  PYTHON=d:\\Python27\\python.exe(设置成你自己的路径)。注意不是path里面,而是和path同级的，直接在全局或者当前用户下配置。</span><br><span class=\"line\">3. 保证环境变量path里面有 %SystemRoot%\\system32;%SystemRoot%;%SystemRoot%\\System32\\Wbem;</span><br><span class=\"line\">  注： 这三个环境变量中貌似只有%SystemRoot%\\system32这个环境变量有用，没具体试（没有他会报CreateProcessW找不到的错误)。</span><br><span class=\"line\">4. 如果在命令行界面安装pomelo失败，可以在Visual Studio的命令行界面安装。</span><br></pre></td></tr></table></figure>\n<p>下面我们将通过一个HelloWorld项目来检验我们的安装是否成功。</p>\n<p><strong>总结一下：直接<code>npm install pomelo -g</code>在机器上就可以用了 不用看上面太多东西，只有当你无法使用的时候再看看就行了</strong></p>\n<p><a href=\"https://github.com/NetEase/pomelo/wiki/%E5%AE%89%E8%A3%85pomelo\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n","site":{"data":{}},"excerpt":"<p>pomelo是基于Node.js的，目前pomelo已经<strong>完全支持Windows、Linux、Mac</strong>等多种平台。</p>\n<p>如果是windows系统，请参考原文，由于我用的是mac os系统与linux环境，因此windows环境不再做验证工作。</p>","more":"<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><ul>\n<li>确保你的机器<strong>可以上网</strong>,因为安装pomelo的过程需要从网上下载其依赖的包。</li>\n<li>确保你的系统上已经要<strong>安装了Node</strong>，目前最新的Node提供了已经编译好的二进制安装包，包括Windows，Mac和Linux等平台。想省事的话，直接去这里下载对应的安装包，直接安装就好了。Node同时也提供了传统的从源码编译的方式安装，不过比起直接使用二进制的方式要麻烦。</li>\n<li>确保你的系统中安装有<strong>python(2.5 &lt; version &lt; 3.0)</strong>以及<strong>C++的编译器</strong>。Node的源码主要由C++代码和JavaScript代码构成，但是却用<strong>gyp</strong>工具来做源码的项目管理，该工具采用Python语言写成的。对于非windows平台，一般都会预装Python以及C++编译工具；对于Windows系统，请确保你的Windows系统包含源码编译工具。在Windows平台上，Node.js采用gyp来生成Visual Studio Solution文件，最终通过VC++的编译器将其编译为二进制文件。</li>\n<li>虽然pomelo是用Javascript写成，但是pomelo依赖的库中，有使用了C++语言写的扩展，因此安装pomelo的过程中会使用到C++编译器。 所以，在安装之前请确保你的Windows系统满足以下两个条件：<ol>\n<li><strong>python(2.5&lt;version&lt;3.0)</strong>。</li>\n<li><strong>VC++ 编译器</strong>，包含在Visual Studio 2010中（VC++ 2010 Express亦可）。对于windows8的用户，需要安装Microsoft Visual Studio C++ 2012。</li>\n</ol>\n</li>\n<li>如果你使用的是Mac OS X系统, 则需要安装<strong>Xcode Command Line Tools</strong>或者<strong>Xcode的完整包</strong>以及make工具.</li>\n</ul>\n<h2 id=\"安装pomelo\"><a href=\"#安装pomelo\" class=\"headerlink\" title=\"安装pomelo\"></a>安装pomelo</h2><p>使用npm(node包管理工具)全局安装pomelo:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install pomelo -g</span><br></pre></td></tr></table></figure>\n<p>可以通过如下命令下载源代码的方式安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone https://github.com/NetEase/pomelo.git</span><br><span class=\"line\">$ cd pomelo</span><br><span class=\"line\">$ npm install -g</span><br></pre></td></tr></table></figure>\n<p>其中-g表示全局安装，关于npm的使用问题，可以参考npm的文档，里面有详细的npm使用的介绍。如果安装过程中没有报错误，说明安装成功。</p>\n<p>windows下安装经验：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. node,vs2010 和 python(2.5&lt;v&lt;3) 都是32位或者都是64位的。</span><br><span class=\"line\">2. 配置  PYTHON=d:\\Python27\\python.exe(设置成你自己的路径)。注意不是path里面,而是和path同级的，直接在全局或者当前用户下配置。</span><br><span class=\"line\">3. 保证环境变量path里面有 %SystemRoot%\\system32;%SystemRoot%;%SystemRoot%\\System32\\Wbem;</span><br><span class=\"line\">  注： 这三个环境变量中貌似只有%SystemRoot%\\system32这个环境变量有用，没具体试（没有他会报CreateProcessW找不到的错误)。</span><br><span class=\"line\">4. 如果在命令行界面安装pomelo失败，可以在Visual Studio的命令行界面安装。</span><br></pre></td></tr></table></figure>\n<p>下面我们将通过一个HelloWorld项目来检验我们的安装是否成功。</p>\n<p><strong>总结一下：直接<code>npm install pomelo -g</code>在机器上就可以用了 不用看上面太多东西，只有当你无法使用的时候再看看就行了</strong></p>\n<p><a href=\"https://github.com/NetEase/pomelo/wiki/%E5%AE%89%E8%A3%85pomelo\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>"},{"title":"将静态资源放到七牛服务器上","toc":false,"date":"2019-03-25T02:58:10.000Z","_content":"\n有时候我们需要将一些静态资源放到cdn服务器上，用线上的服务器总是不可控的，那么这里就需要放到自己的七牛服务器上。\n\n简单区分下目录，element-ui出现点问题，就是字体文件要和index.css文件放在一起,但是字体文件默认不允许跨域访问，这时候设置下请求头，支持csrf即可。\n","source":"_posts/将静态资源放到七牛服务器上.md","raw":"---\ntitle: 将静态资源放到七牛服务器上\ntags:\n  - 基本知识\ncategories:\n  - Web开发\ntoc: false\ndate: 2019-03-25 10:58:10\n---\n\n有时候我们需要将一些静态资源放到cdn服务器上，用线上的服务器总是不可控的，那么这里就需要放到自己的七牛服务器上。\n\n简单区分下目录，element-ui出现点问题，就是字体文件要和index.css文件放在一起,但是字体文件默认不允许跨域访问，这时候设置下请求头，支持csrf即可。\n","slug":"将静态资源放到七牛服务器上","published":1,"updated":"2019-11-07T02:24:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo1a0090h5s6fns5uadt","content":"<p>有时候我们需要将一些静态资源放到cdn服务器上，用线上的服务器总是不可控的，那么这里就需要放到自己的七牛服务器上。</p>\n<p>简单区分下目录，element-ui出现点问题，就是字体文件要和index.css文件放在一起,但是字体文件默认不允许跨域访问，这时候设置下请求头，支持csrf即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>有时候我们需要将一些静态资源放到cdn服务器上，用线上的服务器总是不可控的，那么这里就需要放到自己的七牛服务器上。</p>\n<p>简单区分下目录，element-ui出现点问题，就是字体文件要和index.css文件放在一起,但是字体文件默认不允许跨域访问，这时候设置下请求头，支持csrf即可。</p>\n"},{"title":"工作记录-上传静态资源到服务器","toc":false,"date":"2019-04-04T10:33:29.000Z","_content":"\n136 这台机器上：\n\n/home/work/web/public  \n把要传的东西 传到这个目录下 对应的目录\n访问路径 就是域名+这个目录的相对路径\n<!-- more -->\n这种形式：\nhttp://image.yaonuokeji.com/yixi/static/axios/axios.min.js\n\n目前自有资源：\nhttp://image.yaonuokeji.com/yixi/static/vue/vue.min.js\nhttp://image.yaonuokeji.com/yixi/static/vuex/vuex.min.js\nhttp://image.yaonuokeji.com/yixi/static/vue-router/vue-router.min.js\nhttp://image.yaonuokeji.com/yixi/static/axios/axios.min.js\nhttp://image.yaonuokeji.com/yixi/static/element-ui/index.js\nhttp://image.yaonuokeji.com/yixi/static/momentjs/moment.min.js\n\n.\n├── 20190426\n│   └── icon\n│       ├── clothes_active_icon@2x.png\n│       ├── clothes_icon@2x.png\n│       ├── cupboard_active_icon@2x.png\n│       ├── cupboard_icon@2x.png\n│       ├── hospital_active_icon@2x.png\n│       ├── hospital_icon@2x.png\n│       ├── linen_active_icon@2x.png\n│       └── linen_icon@2x.png\n├── 20190501\n│   ├── btn_big@2x.png\n│   └── btn_small@2x.png\n├── 20190527\n│   ├── user_active_icon@2x.png\n│   └── user_icon@2x.png\n├── 20190610\n│   ├── address_add.png\n│   ├── address_edit.png\n│   ├── arraw_right.png\n│   ├── card_bg1.png\n│   ├── card_bg2.png\n│   ├── icon_address.png\n│   ├── icon_card_record.png\n│   ├── icon_consume_record.png\n│   ├── icon_count_ticket.png\n│   ├── icon_customer_tel.png\n│   ├── icon_user_info.png\n│   ├── pay_faild.png\n│   └── pay_success.png\n├── 20190618\n│   └── bg-coupon.png\n├── axios\n│   ├── axios.js\n│   └── axios.min.js\n├── echarts\n│   ├── echarts.js\n│   └── echarts.min.js\n├── element-ui\n│   ├── fonts\n│   │   ├── element-icons.ttf\n│   │   └── element-icons.woff\n│   ├── index.css\n│   └── index.js\n├── material-design-icons\n│   ├── fonts\n│   │   ├── MaterialIcons-Regular.eot\n│   │   ├── MaterialIcons-Regular.ttf\n│   │   ├── MaterialIcons-Regular.woff\n│   │   └── MaterialIcons-Regular.woff2\n│   └── material-design-icons.css\n├── momentjs\n│   ├── moment.js\n│   └── moment.min.js\n├── mqtt\n│   └── mqttws31.min.js\n├── v-charts\n│   ├── index.js\n│   ├── index.min.js\n│   ├── style.css\n│   └── style.min.css\n├── vue\n│   ├── vue.js\n│   └── vue.min.js\n├── vue-router\n│   ├── vue-router.js\n│   └── vue-router.min.js\n└── vuex\n    ├── vuex.js\n    └── vuex.min.js\n","source":"_posts/工作记录-上传静态资源到服务器.md","raw":"---\ntitle: 工作记录-上传静态资源到服务器\ntags:\n  - 知识点备忘\ncategories:\n  - 项目总结\ntoc: false\ndate: 2019-04-04 18:33:29\n---\n\n136 这台机器上：\n\n/home/work/web/public  \n把要传的东西 传到这个目录下 对应的目录\n访问路径 就是域名+这个目录的相对路径\n<!-- more -->\n这种形式：\nhttp://image.yaonuokeji.com/yixi/static/axios/axios.min.js\n\n目前自有资源：\nhttp://image.yaonuokeji.com/yixi/static/vue/vue.min.js\nhttp://image.yaonuokeji.com/yixi/static/vuex/vuex.min.js\nhttp://image.yaonuokeji.com/yixi/static/vue-router/vue-router.min.js\nhttp://image.yaonuokeji.com/yixi/static/axios/axios.min.js\nhttp://image.yaonuokeji.com/yixi/static/element-ui/index.js\nhttp://image.yaonuokeji.com/yixi/static/momentjs/moment.min.js\n\n.\n├── 20190426\n│   └── icon\n│       ├── clothes_active_icon@2x.png\n│       ├── clothes_icon@2x.png\n│       ├── cupboard_active_icon@2x.png\n│       ├── cupboard_icon@2x.png\n│       ├── hospital_active_icon@2x.png\n│       ├── hospital_icon@2x.png\n│       ├── linen_active_icon@2x.png\n│       └── linen_icon@2x.png\n├── 20190501\n│   ├── btn_big@2x.png\n│   └── btn_small@2x.png\n├── 20190527\n│   ├── user_active_icon@2x.png\n│   └── user_icon@2x.png\n├── 20190610\n│   ├── address_add.png\n│   ├── address_edit.png\n│   ├── arraw_right.png\n│   ├── card_bg1.png\n│   ├── card_bg2.png\n│   ├── icon_address.png\n│   ├── icon_card_record.png\n│   ├── icon_consume_record.png\n│   ├── icon_count_ticket.png\n│   ├── icon_customer_tel.png\n│   ├── icon_user_info.png\n│   ├── pay_faild.png\n│   └── pay_success.png\n├── 20190618\n│   └── bg-coupon.png\n├── axios\n│   ├── axios.js\n│   └── axios.min.js\n├── echarts\n│   ├── echarts.js\n│   └── echarts.min.js\n├── element-ui\n│   ├── fonts\n│   │   ├── element-icons.ttf\n│   │   └── element-icons.woff\n│   ├── index.css\n│   └── index.js\n├── material-design-icons\n│   ├── fonts\n│   │   ├── MaterialIcons-Regular.eot\n│   │   ├── MaterialIcons-Regular.ttf\n│   │   ├── MaterialIcons-Regular.woff\n│   │   └── MaterialIcons-Regular.woff2\n│   └── material-design-icons.css\n├── momentjs\n│   ├── moment.js\n│   └── moment.min.js\n├── mqtt\n│   └── mqttws31.min.js\n├── v-charts\n│   ├── index.js\n│   ├── index.min.js\n│   ├── style.css\n│   └── style.min.css\n├── vue\n│   ├── vue.js\n│   └── vue.min.js\n├── vue-router\n│   ├── vue-router.js\n│   └── vue-router.min.js\n└── vuex\n    ├── vuex.js\n    └── vuex.min.js\n","slug":"工作记录-上传静态资源到服务器","published":1,"updated":"2019-11-07T02:24:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo1d0093h5s67g23e51m","content":"<p>136 这台机器上：</p>\n<p>/home/work/web/public<br>把要传的东西 传到这个目录下 对应的目录<br>访问路径 就是域名+这个目录的相对路径<br><a id=\"more\"></a><br>这种形式：<br><a href=\"http://image.yaonuokeji.com/yixi/static/axios/axios.min.js\" target=\"_blank\" rel=\"noopener\">http://image.yaonuokeji.com/yixi/static/axios/axios.min.js</a></p>\n<p>目前自有资源：<br><a href=\"http://image.yaonuokeji.com/yixi/static/vue/vue.min.js\" target=\"_blank\" rel=\"noopener\">http://image.yaonuokeji.com/yixi/static/vue/vue.min.js</a><br><a href=\"http://image.yaonuokeji.com/yixi/static/vuex/vuex.min.js\" target=\"_blank\" rel=\"noopener\">http://image.yaonuokeji.com/yixi/static/vuex/vuex.min.js</a><br><a href=\"http://image.yaonuokeji.com/yixi/static/vue-router/vue-router.min.js\" target=\"_blank\" rel=\"noopener\">http://image.yaonuokeji.com/yixi/static/vue-router/vue-router.min.js</a><br><a href=\"http://image.yaonuokeji.com/yixi/static/axios/axios.min.js\" target=\"_blank\" rel=\"noopener\">http://image.yaonuokeji.com/yixi/static/axios/axios.min.js</a><br><a href=\"http://image.yaonuokeji.com/yixi/static/element-ui/index.js\" target=\"_blank\" rel=\"noopener\">http://image.yaonuokeji.com/yixi/static/element-ui/index.js</a><br><a href=\"http://image.yaonuokeji.com/yixi/static/momentjs/moment.min.js\" target=\"_blank\" rel=\"noopener\">http://image.yaonuokeji.com/yixi/static/momentjs/moment.min.js</a></p>\n<p>.<br>├── 20190426<br>│   └── icon<br>│       ├── <a href=\"mailto:clothes_active_icon@2x.png\" target=\"_blank\" rel=\"noopener\">clothes_active_icon@2x.png</a><br>│       ├── <a href=\"mailto:clothes_icon@2x.png\" target=\"_blank\" rel=\"noopener\">clothes_icon@2x.png</a><br>│       ├── <a href=\"mailto:cupboard_active_icon@2x.png\" target=\"_blank\" rel=\"noopener\">cupboard_active_icon@2x.png</a><br>│       ├── <a href=\"mailto:cupboard_icon@2x.png\" target=\"_blank\" rel=\"noopener\">cupboard_icon@2x.png</a><br>│       ├── <a href=\"mailto:hospital_active_icon@2x.png\" target=\"_blank\" rel=\"noopener\">hospital_active_icon@2x.png</a><br>│       ├── <a href=\"mailto:hospital_icon@2x.png\" target=\"_blank\" rel=\"noopener\">hospital_icon@2x.png</a><br>│       ├── <a href=\"mailto:linen_active_icon@2x.png\" target=\"_blank\" rel=\"noopener\">linen_active_icon@2x.png</a><br>│       └── <a href=\"mailto:linen_icon@2x.png\" target=\"_blank\" rel=\"noopener\">linen_icon@2x.png</a><br>├── 20190501<br>│   ├── <a href=\"mailto:btn_big@2x.png\" target=\"_blank\" rel=\"noopener\">btn_big@2x.png</a><br>│   └── <a href=\"mailto:btn_small@2x.png\" target=\"_blank\" rel=\"noopener\">btn_small@2x.png</a><br>├── 20190527<br>│   ├── <a href=\"mailto:user_active_icon@2x.png\" target=\"_blank\" rel=\"noopener\">user_active_icon@2x.png</a><br>│   └── <a href=\"mailto:user_icon@2x.png\" target=\"_blank\" rel=\"noopener\">user_icon@2x.png</a><br>├── 20190610<br>│   ├── address_add.png<br>│   ├── address_edit.png<br>│   ├── arraw_right.png<br>│   ├── card_bg1.png<br>│   ├── card_bg2.png<br>│   ├── icon_address.png<br>│   ├── icon_card_record.png<br>│   ├── icon_consume_record.png<br>│   ├── icon_count_ticket.png<br>│   ├── icon_customer_tel.png<br>│   ├── icon_user_info.png<br>│   ├── pay_faild.png<br>│   └── pay_success.png<br>├── 20190618<br>│   └── bg-coupon.png<br>├── axios<br>│   ├── axios.js<br>│   └── axios.min.js<br>├── echarts<br>│   ├── echarts.js<br>│   └── echarts.min.js<br>├── element-ui<br>│   ├── fonts<br>│   │   ├── element-icons.ttf<br>│   │   └── element-icons.woff<br>│   ├── index.css<br>│   └── index.js<br>├── material-design-icons<br>│   ├── fonts<br>│   │   ├── MaterialIcons-Regular.eot<br>│   │   ├── MaterialIcons-Regular.ttf<br>│   │   ├── MaterialIcons-Regular.woff<br>│   │   └── MaterialIcons-Regular.woff2<br>│   └── material-design-icons.css<br>├── momentjs<br>│   ├── moment.js<br>│   └── moment.min.js<br>├── mqtt<br>│   └── mqttws31.min.js<br>├── v-charts<br>│   ├── index.js<br>│   ├── index.min.js<br>│   ├── style.css<br>│   └── style.min.css<br>├── vue<br>│   ├── vue.js<br>│   └── vue.min.js<br>├── vue-router<br>│   ├── vue-router.js<br>│   └── vue-router.min.js<br>└── vuex<br>    ├── vuex.js<br>    └── vuex.min.js</p>\n","site":{"data":{}},"excerpt":"<p>136 这台机器上：</p>\n<p>/home/work/web/public<br>把要传的东西 传到这个目录下 对应的目录<br>访问路径 就是域名+这个目录的相对路径<br>","more":"<br>这种形式：<br><a href=\"http://image.yaonuokeji.com/yixi/static/axios/axios.min.js\" target=\"_blank\" rel=\"noopener\">http://image.yaonuokeji.com/yixi/static/axios/axios.min.js</a></p>\n<p>目前自有资源：<br><a href=\"http://image.yaonuokeji.com/yixi/static/vue/vue.min.js\" target=\"_blank\" rel=\"noopener\">http://image.yaonuokeji.com/yixi/static/vue/vue.min.js</a><br><a href=\"http://image.yaonuokeji.com/yixi/static/vuex/vuex.min.js\" target=\"_blank\" rel=\"noopener\">http://image.yaonuokeji.com/yixi/static/vuex/vuex.min.js</a><br><a href=\"http://image.yaonuokeji.com/yixi/static/vue-router/vue-router.min.js\" target=\"_blank\" rel=\"noopener\">http://image.yaonuokeji.com/yixi/static/vue-router/vue-router.min.js</a><br><a href=\"http://image.yaonuokeji.com/yixi/static/axios/axios.min.js\" target=\"_blank\" rel=\"noopener\">http://image.yaonuokeji.com/yixi/static/axios/axios.min.js</a><br><a href=\"http://image.yaonuokeji.com/yixi/static/element-ui/index.js\" target=\"_blank\" rel=\"noopener\">http://image.yaonuokeji.com/yixi/static/element-ui/index.js</a><br><a href=\"http://image.yaonuokeji.com/yixi/static/momentjs/moment.min.js\" target=\"_blank\" rel=\"noopener\">http://image.yaonuokeji.com/yixi/static/momentjs/moment.min.js</a></p>\n<p>.<br>├── 20190426<br>│   └── icon<br>│       ├── <a href=\"mailto:clothes_active_icon@2x.png\" target=\"_blank\" rel=\"noopener\">clothes_active_icon@2x.png</a><br>│       ├── <a href=\"mailto:clothes_icon@2x.png\" target=\"_blank\" rel=\"noopener\">clothes_icon@2x.png</a><br>│       ├── <a href=\"mailto:cupboard_active_icon@2x.png\" target=\"_blank\" rel=\"noopener\">cupboard_active_icon@2x.png</a><br>│       ├── <a href=\"mailto:cupboard_icon@2x.png\" target=\"_blank\" rel=\"noopener\">cupboard_icon@2x.png</a><br>│       ├── <a href=\"mailto:hospital_active_icon@2x.png\" target=\"_blank\" rel=\"noopener\">hospital_active_icon@2x.png</a><br>│       ├── <a href=\"mailto:hospital_icon@2x.png\" target=\"_blank\" rel=\"noopener\">hospital_icon@2x.png</a><br>│       ├── <a href=\"mailto:linen_active_icon@2x.png\" target=\"_blank\" rel=\"noopener\">linen_active_icon@2x.png</a><br>│       └── <a href=\"mailto:linen_icon@2x.png\" target=\"_blank\" rel=\"noopener\">linen_icon@2x.png</a><br>├── 20190501<br>│   ├── <a href=\"mailto:btn_big@2x.png\" target=\"_blank\" rel=\"noopener\">btn_big@2x.png</a><br>│   └── <a href=\"mailto:btn_small@2x.png\" target=\"_blank\" rel=\"noopener\">btn_small@2x.png</a><br>├── 20190527<br>│   ├── <a href=\"mailto:user_active_icon@2x.png\" target=\"_blank\" rel=\"noopener\">user_active_icon@2x.png</a><br>│   └── <a href=\"mailto:user_icon@2x.png\" target=\"_blank\" rel=\"noopener\">user_icon@2x.png</a><br>├── 20190610<br>│   ├── address_add.png<br>│   ├── address_edit.png<br>│   ├── arraw_right.png<br>│   ├── card_bg1.png<br>│   ├── card_bg2.png<br>│   ├── icon_address.png<br>│   ├── icon_card_record.png<br>│   ├── icon_consume_record.png<br>│   ├── icon_count_ticket.png<br>│   ├── icon_customer_tel.png<br>│   ├── icon_user_info.png<br>│   ├── pay_faild.png<br>│   └── pay_success.png<br>├── 20190618<br>│   └── bg-coupon.png<br>├── axios<br>│   ├── axios.js<br>│   └── axios.min.js<br>├── echarts<br>│   ├── echarts.js<br>│   └── echarts.min.js<br>├── element-ui<br>│   ├── fonts<br>│   │   ├── element-icons.ttf<br>│   │   └── element-icons.woff<br>│   ├── index.css<br>│   └── index.js<br>├── material-design-icons<br>│   ├── fonts<br>│   │   ├── MaterialIcons-Regular.eot<br>│   │   ├── MaterialIcons-Regular.ttf<br>│   │   ├── MaterialIcons-Regular.woff<br>│   │   └── MaterialIcons-Regular.woff2<br>│   └── material-design-icons.css<br>├── momentjs<br>│   ├── moment.js<br>│   └── moment.min.js<br>├── mqtt<br>│   └── mqttws31.min.js<br>├── v-charts<br>│   ├── index.js<br>│   ├── index.min.js<br>│   ├── style.css<br>│   └── style.min.css<br>├── vue<br>│   ├── vue.js<br>│   └── vue.min.js<br>├── vue-router<br>│   ├── vue-router.js<br>│   └── vue-router.min.js<br>└── vuex<br>    ├── vuex.js<br>    └── vuex.min.js</p>"},{"title":"提示错误：jenkins 不在 sudoers 文件中。此事将被报告。","toc":false,"date":"2019-08-14T06:14:19.000Z","_content":"\n说明本地服务器jenkins没有root的部分执行权限：\n#su    \n#cd /etc    \n#chmod 740 sudoers    \n#vim sudoers \n末尾加上\njenkins   ALL=(root) ALL, !/usr/bin/passwd [A-Za-z]*, !/usr/bin/passwd root  \n","source":"_posts/提示错误：jenkins-不在-sudoers-文件中。此事将被报告。.md","raw":"---\ntitle: 提示错误：jenkins 不在 sudoers 文件中。此事将被报告。\ntags:\n  - jenkins\ncategories:\n  - Web开发\ntoc: false\ndate: 2019-08-14 14:14:19\n---\n\n说明本地服务器jenkins没有root的部分执行权限：\n#su    \n#cd /etc    \n#chmod 740 sudoers    \n#vim sudoers \n末尾加上\njenkins   ALL=(root) ALL, !/usr/bin/passwd [A-Za-z]*, !/usr/bin/passwd root  \n","slug":"提示错误：jenkins-不在-sudoers-文件中。此事将被报告。","published":1,"updated":"2019-11-07T02:24:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo1e0097h5s6z28mskiy","content":"<p>说明本地服务器jenkins没有root的部分执行权限：</p>\n<p>#su    </p>\n<p>#cd /etc    </p>\n<p>#chmod 740 sudoers    </p>\n<p>#vim sudoers<br>末尾加上<br>jenkins   ALL=(root) ALL, !/usr/bin/passwd [A-Za-z]*, !/usr/bin/passwd root  </p>\n","site":{"data":{}},"excerpt":"","more":"<p>说明本地服务器jenkins没有root的部分执行权限：</p>\n<p>#su    </p>\n<p>#cd /etc    </p>\n<p>#chmod 740 sudoers    </p>\n<p>#vim sudoers<br>末尾加上<br>jenkins   ALL=(root) ALL, !/usr/bin/passwd [A-Za-z]*, !/usr/bin/passwd root  </p>\n"},{"title":"把一件事坚持30天（结果惊人）","toc":false,"date":"2019-07-03T10:04:01.000Z","_content":"\n国外有一个叫摩根的青年，每天很闲，有天突发奇想——连续吃三十天麦当劳会怎样？\n\n他说干就干，一日三餐都吃麦当劳，连吃三十天。\n\n他还用摄像机记录下了这一过程。\n\n三十天后，摩根的体重增加了25磅（约23斤），而且还出现了轻度抑郁和肝脏衰竭现象。\n\n要知道，之前摩根可是非常健康的，真是no zuo no die why you try。\n![image.png](http://blogimage.houjiyi.com/Ft3amoag_Tr0FYui86uwKoVg9rTU)\n\n<!-- more -->\n\n摩根连续三十天吃麦当劳的视频引起了另一个人的关注。\n\n他叫马特·卡茨，是著名的谷歌工程师。\n\n他告诉自己，既然30天可以改变一个人，那为什么不朝好的方向改变呢？\n\n于是，他给自己列了一份30天挑战计划。\n\n完成四个任务：\n\n> 1. 骑车上班；\n> 2. 每天步行10000步；\n> 3. 每天拍一张照片；\n> 4. 写一本50000字的自传。\n\n克服四个习惯：\n\n> 看电视；\n> 吃糖；\n> 玩推特；\n> 咖啡因。\n\n除了那本五万字的自传，其他七项都是非常小的挑战。\n\n然而就是这本自传，平均到每天也只有1667个字。\n\n30天后，马特·卡茨从一个肥胖的宅男工程师变成了一个拥有健康、乐观、文采等多种美好品质的人。\n\n他说：“做那些小的、持续性的挑战，30天后你会感谢自己。”\n\n![image.png](http://blogimage.houjiyi.com/FgqYApTUifzHCs_rIMtixIXbXDUT)\n\n在一个荷花池中，第一天开放的荷花只是很少的一部分，第二天开放的数量是第一天的两倍，之后的每一天，荷花都会以前一天两倍的数量开放……\n\n假设到第30天荷花就开满了整个池塘，那么请问：在第几天池塘中的荷花开了一半？\n\n第15天？\n\n错。\n\n是第29天。\n\n这就是著名的荷花定律，也叫30天定律。\n\n很多人的一生就像池塘里的荷花，一开始用力地开，玩命地开......但渐渐的，你开始感到枯燥甚至是厌烦，你可能在第9天、第19天甚至第29天的时候放弃了坚持。\n\n这时，往往离成功只有一步之遥。\n\n荷花定律告诉我们这样一个道理：\n\n**越到最后，越关键。拼到最后，拼的不是运气和聪明，而是毅力。**\n\n![image.png](http://blogimage.houjiyi.com/Fo3DPi5lhIFI2ddWrynhP82dj0SO)\n\n有人提到“改变”就头大，其实是他们把“改变”想得太繁杂了。\n\n如果你想养成早起的习惯 ，你只需要在前一天早睡。早睡的前提无非是少看一集肥皂剧或者少玩一个小时的游戏，仅此而已。\n\n要记住，所谓改变，指的并不是“脱胎换骨”。\n\n改变就像蒸桑拿，由外到内，由浅到深，由皮肤到肌理。\n\n**改变，是一个循序渐进的过程。**\n\n不必急功近利、不必追求立竿见影，只要每天能比前一天有一点突破、一点改善，而且朝着正确的目标持续地做下去，就可能成功。\n\n![image.png](http://blogimage.houjiyi.com/FgSb21PEgewQOHn2FNCwsp9y6Pof)\n\n一辈子太长，一秒钟太短，30天不长不短刚刚好。\n\n你可以改掉一个坏习惯，也可以培养一个好习惯。\n\n> 把东西放在固定的位置。\n> 一周集中采购一次生活必需品。\n> 把第二天的计划写在纸质日历上。\n> 在前一天晚上准备好第二天要用的东西。\n> 以分钟为单位来计时，而不是以小时。\n> 随身携带笔记本。\n> 记录时间都去哪了。\n> 每天静坐冥想五分钟。\n> 早起。\n> 记账。\n\n这10个习惯小得不能再小，但若能长期坚持，必能改变你的人生。\n\n思想决定行动，行动决定性格。\n\n就像我们开篇所说的，接下来的30天喜不喜欢都要过，既然如此，何不尝试一下呢？\n","source":"_posts/把一件事坚持30天（结果惊人）.md","raw":"---\ntitle: 把一件事坚持30天（结果惊人）\ntags:\n  - 意义\ncategories:\n  - 生活玩乐\ntoc: false\ndate: 2019-07-03 18:04:01\n---\n\n国外有一个叫摩根的青年，每天很闲，有天突发奇想——连续吃三十天麦当劳会怎样？\n\n他说干就干，一日三餐都吃麦当劳，连吃三十天。\n\n他还用摄像机记录下了这一过程。\n\n三十天后，摩根的体重增加了25磅（约23斤），而且还出现了轻度抑郁和肝脏衰竭现象。\n\n要知道，之前摩根可是非常健康的，真是no zuo no die why you try。\n![image.png](http://blogimage.houjiyi.com/Ft3amoag_Tr0FYui86uwKoVg9rTU)\n\n<!-- more -->\n\n摩根连续三十天吃麦当劳的视频引起了另一个人的关注。\n\n他叫马特·卡茨，是著名的谷歌工程师。\n\n他告诉自己，既然30天可以改变一个人，那为什么不朝好的方向改变呢？\n\n于是，他给自己列了一份30天挑战计划。\n\n完成四个任务：\n\n> 1. 骑车上班；\n> 2. 每天步行10000步；\n> 3. 每天拍一张照片；\n> 4. 写一本50000字的自传。\n\n克服四个习惯：\n\n> 看电视；\n> 吃糖；\n> 玩推特；\n> 咖啡因。\n\n除了那本五万字的自传，其他七项都是非常小的挑战。\n\n然而就是这本自传，平均到每天也只有1667个字。\n\n30天后，马特·卡茨从一个肥胖的宅男工程师变成了一个拥有健康、乐观、文采等多种美好品质的人。\n\n他说：“做那些小的、持续性的挑战，30天后你会感谢自己。”\n\n![image.png](http://blogimage.houjiyi.com/FgqYApTUifzHCs_rIMtixIXbXDUT)\n\n在一个荷花池中，第一天开放的荷花只是很少的一部分，第二天开放的数量是第一天的两倍，之后的每一天，荷花都会以前一天两倍的数量开放……\n\n假设到第30天荷花就开满了整个池塘，那么请问：在第几天池塘中的荷花开了一半？\n\n第15天？\n\n错。\n\n是第29天。\n\n这就是著名的荷花定律，也叫30天定律。\n\n很多人的一生就像池塘里的荷花，一开始用力地开，玩命地开......但渐渐的，你开始感到枯燥甚至是厌烦，你可能在第9天、第19天甚至第29天的时候放弃了坚持。\n\n这时，往往离成功只有一步之遥。\n\n荷花定律告诉我们这样一个道理：\n\n**越到最后，越关键。拼到最后，拼的不是运气和聪明，而是毅力。**\n\n![image.png](http://blogimage.houjiyi.com/Fo3DPi5lhIFI2ddWrynhP82dj0SO)\n\n有人提到“改变”就头大，其实是他们把“改变”想得太繁杂了。\n\n如果你想养成早起的习惯 ，你只需要在前一天早睡。早睡的前提无非是少看一集肥皂剧或者少玩一个小时的游戏，仅此而已。\n\n要记住，所谓改变，指的并不是“脱胎换骨”。\n\n改变就像蒸桑拿，由外到内，由浅到深，由皮肤到肌理。\n\n**改变，是一个循序渐进的过程。**\n\n不必急功近利、不必追求立竿见影，只要每天能比前一天有一点突破、一点改善，而且朝着正确的目标持续地做下去，就可能成功。\n\n![image.png](http://blogimage.houjiyi.com/FgSb21PEgewQOHn2FNCwsp9y6Pof)\n\n一辈子太长，一秒钟太短，30天不长不短刚刚好。\n\n你可以改掉一个坏习惯，也可以培养一个好习惯。\n\n> 把东西放在固定的位置。\n> 一周集中采购一次生活必需品。\n> 把第二天的计划写在纸质日历上。\n> 在前一天晚上准备好第二天要用的东西。\n> 以分钟为单位来计时，而不是以小时。\n> 随身携带笔记本。\n> 记录时间都去哪了。\n> 每天静坐冥想五分钟。\n> 早起。\n> 记账。\n\n这10个习惯小得不能再小，但若能长期坚持，必能改变你的人生。\n\n思想决定行动，行动决定性格。\n\n就像我们开篇所说的，接下来的30天喜不喜欢都要过，既然如此，何不尝试一下呢？\n","slug":"把一件事坚持30天（结果惊人）","published":1,"updated":"2019-11-07T02:24:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo1h009ah5s68y1p5xg9","content":"<p>国外有一个叫摩根的青年，每天很闲，有天突发奇想——连续吃三十天麦当劳会怎样？</p>\n<p>他说干就干，一日三餐都吃麦当劳，连吃三十天。</p>\n<p>他还用摄像机记录下了这一过程。</p>\n<p>三十天后，摩根的体重增加了25磅（约23斤），而且还出现了轻度抑郁和肝脏衰竭现象。</p>\n<p>要知道，之前摩根可是非常健康的，真是no zuo no die why you try。<br><img src=\"http://blogimage.houjiyi.com/Ft3amoag_Tr0FYui86uwKoVg9rTU\" alt=\"image.png\"></p>\n<a id=\"more\"></a>\n<p>摩根连续三十天吃麦当劳的视频引起了另一个人的关注。</p>\n<p>他叫马特·卡茨，是著名的谷歌工程师。</p>\n<p>他告诉自己，既然30天可以改变一个人，那为什么不朝好的方向改变呢？</p>\n<p>于是，他给自己列了一份30天挑战计划。</p>\n<p>完成四个任务：</p>\n<blockquote>\n<ol>\n<li>骑车上班；</li>\n<li>每天步行10000步；</li>\n<li>每天拍一张照片；</li>\n<li>写一本50000字的自传。</li>\n</ol>\n</blockquote>\n<p>克服四个习惯：</p>\n<blockquote>\n<p>看电视；<br>吃糖；<br>玩推特；<br>咖啡因。</p>\n</blockquote>\n<p>除了那本五万字的自传，其他七项都是非常小的挑战。</p>\n<p>然而就是这本自传，平均到每天也只有1667个字。</p>\n<p>30天后，马特·卡茨从一个肥胖的宅男工程师变成了一个拥有健康、乐观、文采等多种美好品质的人。</p>\n<p>他说：“做那些小的、持续性的挑战，30天后你会感谢自己。”</p>\n<p><img src=\"http://blogimage.houjiyi.com/FgqYApTUifzHCs_rIMtixIXbXDUT\" alt=\"image.png\"></p>\n<p>在一个荷花池中，第一天开放的荷花只是很少的一部分，第二天开放的数量是第一天的两倍，之后的每一天，荷花都会以前一天两倍的数量开放……</p>\n<p>假设到第30天荷花就开满了整个池塘，那么请问：在第几天池塘中的荷花开了一半？</p>\n<p>第15天？</p>\n<p>错。</p>\n<p>是第29天。</p>\n<p>这就是著名的荷花定律，也叫30天定律。</p>\n<p>很多人的一生就像池塘里的荷花，一开始用力地开，玩命地开……但渐渐的，你开始感到枯燥甚至是厌烦，你可能在第9天、第19天甚至第29天的时候放弃了坚持。</p>\n<p>这时，往往离成功只有一步之遥。</p>\n<p>荷花定律告诉我们这样一个道理：</p>\n<p><strong>越到最后，越关键。拼到最后，拼的不是运气和聪明，而是毅力。</strong></p>\n<p><img src=\"http://blogimage.houjiyi.com/Fo3DPi5lhIFI2ddWrynhP82dj0SO\" alt=\"image.png\"></p>\n<p>有人提到“改变”就头大，其实是他们把“改变”想得太繁杂了。</p>\n<p>如果你想养成早起的习惯 ，你只需要在前一天早睡。早睡的前提无非是少看一集肥皂剧或者少玩一个小时的游戏，仅此而已。</p>\n<p>要记住，所谓改变，指的并不是“脱胎换骨”。</p>\n<p>改变就像蒸桑拿，由外到内，由浅到深，由皮肤到肌理。</p>\n<p><strong>改变，是一个循序渐进的过程。</strong></p>\n<p>不必急功近利、不必追求立竿见影，只要每天能比前一天有一点突破、一点改善，而且朝着正确的目标持续地做下去，就可能成功。</p>\n<p><img src=\"http://blogimage.houjiyi.com/FgSb21PEgewQOHn2FNCwsp9y6Pof\" alt=\"image.png\"></p>\n<p>一辈子太长，一秒钟太短，30天不长不短刚刚好。</p>\n<p>你可以改掉一个坏习惯，也可以培养一个好习惯。</p>\n<blockquote>\n<p>把东西放在固定的位置。<br>一周集中采购一次生活必需品。<br>把第二天的计划写在纸质日历上。<br>在前一天晚上准备好第二天要用的东西。<br>以分钟为单位来计时，而不是以小时。<br>随身携带笔记本。<br>记录时间都去哪了。<br>每天静坐冥想五分钟。<br>早起。<br>记账。</p>\n</blockquote>\n<p>这10个习惯小得不能再小，但若能长期坚持，必能改变你的人生。</p>\n<p>思想决定行动，行动决定性格。</p>\n<p>就像我们开篇所说的，接下来的30天喜不喜欢都要过，既然如此，何不尝试一下呢？</p>\n","site":{"data":{}},"excerpt":"<p>国外有一个叫摩根的青年，每天很闲，有天突发奇想——连续吃三十天麦当劳会怎样？</p>\n<p>他说干就干，一日三餐都吃麦当劳，连吃三十天。</p>\n<p>他还用摄像机记录下了这一过程。</p>\n<p>三十天后，摩根的体重增加了25磅（约23斤），而且还出现了轻度抑郁和肝脏衰竭现象。</p>\n<p>要知道，之前摩根可是非常健康的，真是no zuo no die why you try。<br><img src=\"http://blogimage.houjiyi.com/Ft3amoag_Tr0FYui86uwKoVg9rTU\" alt=\"image.png\"></p>","more":"<p>摩根连续三十天吃麦当劳的视频引起了另一个人的关注。</p>\n<p>他叫马特·卡茨，是著名的谷歌工程师。</p>\n<p>他告诉自己，既然30天可以改变一个人，那为什么不朝好的方向改变呢？</p>\n<p>于是，他给自己列了一份30天挑战计划。</p>\n<p>完成四个任务：</p>\n<blockquote>\n<ol>\n<li>骑车上班；</li>\n<li>每天步行10000步；</li>\n<li>每天拍一张照片；</li>\n<li>写一本50000字的自传。</li>\n</ol>\n</blockquote>\n<p>克服四个习惯：</p>\n<blockquote>\n<p>看电视；<br>吃糖；<br>玩推特；<br>咖啡因。</p>\n</blockquote>\n<p>除了那本五万字的自传，其他七项都是非常小的挑战。</p>\n<p>然而就是这本自传，平均到每天也只有1667个字。</p>\n<p>30天后，马特·卡茨从一个肥胖的宅男工程师变成了一个拥有健康、乐观、文采等多种美好品质的人。</p>\n<p>他说：“做那些小的、持续性的挑战，30天后你会感谢自己。”</p>\n<p><img src=\"http://blogimage.houjiyi.com/FgqYApTUifzHCs_rIMtixIXbXDUT\" alt=\"image.png\"></p>\n<p>在一个荷花池中，第一天开放的荷花只是很少的一部分，第二天开放的数量是第一天的两倍，之后的每一天，荷花都会以前一天两倍的数量开放……</p>\n<p>假设到第30天荷花就开满了整个池塘，那么请问：在第几天池塘中的荷花开了一半？</p>\n<p>第15天？</p>\n<p>错。</p>\n<p>是第29天。</p>\n<p>这就是著名的荷花定律，也叫30天定律。</p>\n<p>很多人的一生就像池塘里的荷花，一开始用力地开，玩命地开……但渐渐的，你开始感到枯燥甚至是厌烦，你可能在第9天、第19天甚至第29天的时候放弃了坚持。</p>\n<p>这时，往往离成功只有一步之遥。</p>\n<p>荷花定律告诉我们这样一个道理：</p>\n<p><strong>越到最后，越关键。拼到最后，拼的不是运气和聪明，而是毅力。</strong></p>\n<p><img src=\"http://blogimage.houjiyi.com/Fo3DPi5lhIFI2ddWrynhP82dj0SO\" alt=\"image.png\"></p>\n<p>有人提到“改变”就头大，其实是他们把“改变”想得太繁杂了。</p>\n<p>如果你想养成早起的习惯 ，你只需要在前一天早睡。早睡的前提无非是少看一集肥皂剧或者少玩一个小时的游戏，仅此而已。</p>\n<p>要记住，所谓改变，指的并不是“脱胎换骨”。</p>\n<p>改变就像蒸桑拿，由外到内，由浅到深，由皮肤到肌理。</p>\n<p><strong>改变，是一个循序渐进的过程。</strong></p>\n<p>不必急功近利、不必追求立竿见影，只要每天能比前一天有一点突破、一点改善，而且朝着正确的目标持续地做下去，就可能成功。</p>\n<p><img src=\"http://blogimage.houjiyi.com/FgSb21PEgewQOHn2FNCwsp9y6Pof\" alt=\"image.png\"></p>\n<p>一辈子太长，一秒钟太短，30天不长不短刚刚好。</p>\n<p>你可以改掉一个坏习惯，也可以培养一个好习惯。</p>\n<blockquote>\n<p>把东西放在固定的位置。<br>一周集中采购一次生活必需品。<br>把第二天的计划写在纸质日历上。<br>在前一天晚上准备好第二天要用的东西。<br>以分钟为单位来计时，而不是以小时。<br>随身携带笔记本。<br>记录时间都去哪了。<br>每天静坐冥想五分钟。<br>早起。<br>记账。</p>\n</blockquote>\n<p>这10个习惯小得不能再小，但若能长期坚持，必能改变你的人生。</p>\n<p>思想决定行动，行动决定性格。</p>\n<p>就像我们开篇所说的，接下来的30天喜不喜欢都要过，既然如此，何不尝试一下呢？</p>"},{"title":"更改location的URI","toc":false,"date":"2017-08-27T10:55:04.000Z","_content":"\n在location块中，除了使用root指令指明请求处理根目录，还可以使用alias指令改变location接收到的URI的请求路径，其语法结构为：\n\n<!-- more -->\n\n```\nalias path;\n```\n\n其中，path即为修改后的根路径。同样，次变量中也可以包含除了$document_root和$realpath_root之外的其他Nginx服务器预设变量。\n\n这个指令的作用有点不好理解，我们来看一个示例：\n\n```\nlocation ~ ^/data/(.+\\.(html|htm))$ {\n    alias   /locationtest1/other/$1;\n}\n```\n\n当此location块接收到'/data/index.html'的请求时，匹配成功，之后根据alias指令的配置，Nginx服务器将到/locationtest1/other目录下找到index.html并相应请求。可以看到，通过alias指令的配置，根路径已经从/data更改为/locationtest1/other了。\n\n> 如果没有alias设置，那么/data/index.html对应的文件路径就是[root_path]/data/index.html，这个设置这里我觉得最大的用处应该是为了减少路由的层级，比如我们为一个相对复杂的路径设置一个别名，这个别名对应一个简单的路径，在开发和使用的时候会相对简单一些，同时可以解耦一些业务，这个简易路径可以针对具体后端业务场景，而前端场景则可以相对随意一些，设置一个别名指向这个简易路径即可。\n","source":"_posts/更改location的URI.md","raw":"---\ntitle: 更改location的URI\ntags:\n  - nginx\ncategories:\n  - 后端开发\ntoc: false\ndate: 2017-08-27 18:55:04\n---\n\n在location块中，除了使用root指令指明请求处理根目录，还可以使用alias指令改变location接收到的URI的请求路径，其语法结构为：\n\n<!-- more -->\n\n```\nalias path;\n```\n\n其中，path即为修改后的根路径。同样，次变量中也可以包含除了$document_root和$realpath_root之外的其他Nginx服务器预设变量。\n\n这个指令的作用有点不好理解，我们来看一个示例：\n\n```\nlocation ~ ^/data/(.+\\.(html|htm))$ {\n    alias   /locationtest1/other/$1;\n}\n```\n\n当此location块接收到'/data/index.html'的请求时，匹配成功，之后根据alias指令的配置，Nginx服务器将到/locationtest1/other目录下找到index.html并相应请求。可以看到，通过alias指令的配置，根路径已经从/data更改为/locationtest1/other了。\n\n> 如果没有alias设置，那么/data/index.html对应的文件路径就是[root_path]/data/index.html，这个设置这里我觉得最大的用处应该是为了减少路由的层级，比如我们为一个相对复杂的路径设置一个别名，这个别名对应一个简单的路径，在开发和使用的时候会相对简单一些，同时可以解耦一些业务，这个简易路径可以针对具体后端业务场景，而前端场景则可以相对随意一些，设置一个别名指向这个简易路径即可。\n","slug":"更改location的URI","published":1,"updated":"2019-11-07T02:24:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo1i009dh5s63wpjn75p","content":"<p>在location块中，除了使用root指令指明请求处理根目录，还可以使用alias指令改变location接收到的URI的请求路径，其语法结构为：</p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias path;</span><br></pre></td></tr></table></figure>\n<p>其中，path即为修改后的根路径。同样，次变量中也可以包含除了$document_root和$realpath_root之外的其他Nginx服务器预设变量。</p>\n<p>这个指令的作用有点不好理解，我们来看一个示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ ^/data/(.+\\.(html|htm))$ &#123;</span><br><span class=\"line\">    alias   /locationtest1/other/$1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当此location块接收到’/data/index.html’的请求时，匹配成功，之后根据alias指令的配置，Nginx服务器将到/locationtest1/other目录下找到index.html并相应请求。可以看到，通过alias指令的配置，根路径已经从/data更改为/locationtest1/other了。</p>\n<blockquote>\n<p>如果没有alias设置，那么/data/index.html对应的文件路径就是[root_path]/data/index.html，这个设置这里我觉得最大的用处应该是为了减少路由的层级，比如我们为一个相对复杂的路径设置一个别名，这个别名对应一个简单的路径，在开发和使用的时候会相对简单一些，同时可以解耦一些业务，这个简易路径可以针对具体后端业务场景，而前端场景则可以相对随意一些，设置一个别名指向这个简易路径即可。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>在location块中，除了使用root指令指明请求处理根目录，还可以使用alias指令改变location接收到的URI的请求路径，其语法结构为：</p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias path;</span><br></pre></td></tr></table></figure>\n<p>其中，path即为修改后的根路径。同样，次变量中也可以包含除了$document_root和$realpath_root之外的其他Nginx服务器预设变量。</p>\n<p>这个指令的作用有点不好理解，我们来看一个示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ ^/data/(.+\\.(html|htm))$ &#123;</span><br><span class=\"line\">    alias   /locationtest1/other/$1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当此location块接收到’/data/index.html’的请求时，匹配成功，之后根据alias指令的配置，Nginx服务器将到/locationtest1/other目录下找到index.html并相应请求。可以看到，通过alias指令的配置，根路径已经从/data更改为/locationtest1/other了。</p>\n<blockquote>\n<p>如果没有alias设置，那么/data/index.html对应的文件路径就是[root_path]/data/index.html，这个设置这里我觉得最大的用处应该是为了减少路由的层级，比如我们为一个相对复杂的路径设置一个别名，这个别名对应一个简单的路径，在开发和使用的时候会相对简单一些，同时可以解耦一些业务，这个简易路径可以针对具体后端业务场景，而前端场景则可以相对随意一些，设置一个别名指向这个简易路径即可。</p>\n</blockquote>"},{"title":"本机连接vagrant虚拟机创建的mysql数据库","toc":false,"date":"2018-02-25T04:30:38.000Z","_content":"\n当学习数据库的时候经常会用到虚拟机，以避免把自己的机器当成测试机搞来搞去，这里我用的是vagrant，用起来比较方便，\n我在vagrant里边创建了一个数据库，希望通过本机的可视化工具连接上，直接连接发现会报错：\n\n```\nHost '192.168.33.1' is not allowed to connect to this MariaDB server\n```\n\n<!-- more -->\n\n这应该是数据库本身对外部访问的一个限制，现在我们处理一下：\n\n```\nCREATE USER 'kivi'@'localhost' IDENTIFIED BY 'kivi';\n\nGRANT ALL PRIVILEGES ON *.* TO 'kivi'@'localhost' WITH GRANT OPTION;\n\nCREATE USER 'kivi'@'%' IDENTIFIED BY 'kivi';\n\nGRANT ALL PRIVILEGES ON *.* TO 'kivi'@'%' WITH GRANT OPTION;\n```\n\n好了，在虚拟机的数据库环境执行完这四条命令以后，我们在使用工具连接，用户名kivi，密码kivi；\n\n成功连接！\n","source":"_posts/本机连接vagrant虚拟机创建的mysql数据库.md","raw":"---\ntitle: 本机连接vagrant虚拟机创建的mysql数据库\ntags:\n  - mysql\n  - vagrant\ncategories:\n  - 后端开发\ntoc: false\ndate: 2018-02-25 12:30:38\n---\n\n当学习数据库的时候经常会用到虚拟机，以避免把自己的机器当成测试机搞来搞去，这里我用的是vagrant，用起来比较方便，\n我在vagrant里边创建了一个数据库，希望通过本机的可视化工具连接上，直接连接发现会报错：\n\n```\nHost '192.168.33.1' is not allowed to connect to this MariaDB server\n```\n\n<!-- more -->\n\n这应该是数据库本身对外部访问的一个限制，现在我们处理一下：\n\n```\nCREATE USER 'kivi'@'localhost' IDENTIFIED BY 'kivi';\n\nGRANT ALL PRIVILEGES ON *.* TO 'kivi'@'localhost' WITH GRANT OPTION;\n\nCREATE USER 'kivi'@'%' IDENTIFIED BY 'kivi';\n\nGRANT ALL PRIVILEGES ON *.* TO 'kivi'@'%' WITH GRANT OPTION;\n```\n\n好了，在虚拟机的数据库环境执行完这四条命令以后，我们在使用工具连接，用户名kivi，密码kivi；\n\n成功连接！\n","slug":"本机连接vagrant虚拟机创建的mysql数据库","published":1,"updated":"2019-11-07T02:24:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo1j009gh5s69kvicylq","content":"<p>当学习数据库的时候经常会用到虚拟机，以避免把自己的机器当成测试机搞来搞去，这里我用的是vagrant，用起来比较方便，<br>我在vagrant里边创建了一个数据库，希望通过本机的可视化工具连接上，直接连接发现会报错：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host &apos;192.168.33.1&apos; is not allowed to connect to this MariaDB server</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>这应该是数据库本身对外部访问的一个限制，现在我们处理一下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE USER &apos;kivi&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;kivi&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">GRANT ALL PRIVILEGES ON *.* TO &apos;kivi&apos;@&apos;localhost&apos; WITH GRANT OPTION;</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE USER &apos;kivi&apos;@&apos;%&apos; IDENTIFIED BY &apos;kivi&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">GRANT ALL PRIVILEGES ON *.* TO &apos;kivi&apos;@&apos;%&apos; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>\n<p>好了，在虚拟机的数据库环境执行完这四条命令以后，我们在使用工具连接，用户名kivi，密码kivi；</p>\n<p>成功连接！</p>\n","site":{"data":{}},"excerpt":"<p>当学习数据库的时候经常会用到虚拟机，以避免把自己的机器当成测试机搞来搞去，这里我用的是vagrant，用起来比较方便，<br>我在vagrant里边创建了一个数据库，希望通过本机的可视化工具连接上，直接连接发现会报错：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host &apos;192.168.33.1&apos; is not allowed to connect to this MariaDB server</span><br></pre></td></tr></table></figure>","more":"<p>这应该是数据库本身对外部访问的一个限制，现在我们处理一下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE USER &apos;kivi&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;kivi&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">GRANT ALL PRIVILEGES ON *.* TO &apos;kivi&apos;@&apos;localhost&apos; WITH GRANT OPTION;</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE USER &apos;kivi&apos;@&apos;%&apos; IDENTIFIED BY &apos;kivi&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">GRANT ALL PRIVILEGES ON *.* TO &apos;kivi&apos;@&apos;%&apos; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>\n<p>好了，在虚拟机的数据库环境执行完这四条命令以后，我们在使用工具连接，用户名kivi，密码kivi；</p>\n<p>成功连接！</p>"},{"title":"欢迎使用pomelo","toc":false,"date":"2018-02-28T03:32:28.000Z","_content":"\npomelo是一个游戏服务器框架，与以往单进程的游戏框架不同, 它是**高性能、高可伸缩、分布式多进程**的游戏服务器框架，并且使用很简单。它包括基础开发框架和一系列相关工具和库，可以帮助开发者省去游戏开发中枯燥的重复劳动和底层逻辑工作，免除开发者的重造轮子，让开发者可以更多地去关注游戏的具体逻辑，大大提高开发效率。pomelo强大的可伸缩性和灵活性使得pomelo也**可以作为通用的分布式实时应用开发框架**，用于一些高实时应用的开发，而且pomelo在很多方面的表现甚至超越了现有的开源实时应用框架。**pomelo支持所有主流平台的客户端**，并提供了客户端的开发库，使得客户端的开发变得很友好。\n\n<!-- more -->\n\n## pomelo组成\npomelo 是由一系列相互之间弱耦合的部分**组合而成**的，包括：\n\n### 框架\n**框架是pomelo最核心的部分;**\n\n### 库\npomelo提供了很多库，有些是跟游戏逻辑完全相关的，如**AI**，**AOI**，**寻路**等；也有与游戏逻辑无关但比较通用的，如**定时任务**执行， **数据同步**等等；\n\n### 工具\npomelo提供了**服务器管理控制工具**、**命令行工具**、**压力测试工具**等一系列工具；\n\n### 客户端库\npomelo提供了**各类平台的客户端开发库**，包括js, C, C#，Android, iOS, Unity3D等等，几乎支持涵盖了目前所有的主流平台，由于**pomelo的协议是开放**的，架构耦合松散，对于没有支持的客户端平台，用户也可以**很容易地开发出自己需要的库，定制自己的通信协议**；\n\n### demo\n一个框架需要强大的demo来展示功能并为开发者提供示例，pomelo提供了全平台的聊天demo和基于HTML5的捡宝demo，系统还提供了一个强大的基于HTML5开发的MMO游戏demo [Lordofpomelo](http://pomelo.netease.com/lordofpomelo/)【[源码](https://github.com/NetEase/lordofpomelo)】。\n\n## 为什么使用pomelo？\n高并发、高实时的游戏服务器的开发是很复杂的工作。跟web应用一样，一个好的开源容器或开发框架可以大大减少游戏服务器开发的复杂性，让开发变得更加容易。遗憾的是目前在游戏服务器开发领域一直没有太好的开源解决方案。pomelo将填补这个空白，打造一款**完全开源的高性能高并发游戏服务器框架**。pomelo的优势有以下几点：\n\n### 架构的可伸缩性好\n采用**多进程单线程的运行架构**，扩展服务器非常方便，node.js的网络io优势提供了高可伸缩性，写好的应用只需要简单地修改一下配置就能轻松地伸缩扩充；\n\n### 易用\npomelo基于轻量级的nodejs，其开发模型与web应用的开发类似，基于**convention over configuration(约定优于配置)**的理念，几乎零配置，api的设计也很精简，很容易上手，开发快速；\n\n### 框架的松耦合和可扩展性好\n遵循node.js微模块的原则，框架本身只有很少的代码，**所有component、库、工具都可以用npm module的形式扩展进来**，任何第三方都可以根据自己的需要开发自定义module，并把它整合到pomelo的框架中。\n\n### 完整的demo和文档\npomelo提供了完整的中英文文档，pomelo还提供一个完整的开源MMO游戏demo--[Lordofpomelo](http://pomelo.netease.com/lordofpomelo/)【[源码](https://github.com/NetEase/lordofpomelo)】，一个超过1万行代码的游戏demo，使开发者可以随时借鉴demo的设计与开发思路。\n\n## pomelo的定位\npomelo是一个轻量级的服务器框架，它最适合的应用领域是网页游戏、社交游戏、移动游戏的服务端，开发者会发现pomelo可以用如此少的代码达到强大的扩展性和伸缩性。当然还不仅仅是游戏，用pomelo开发高实时web应用也如此合适， 而且伸缩性比其它框架好。\n\n不推荐将pomelo用于大型的MMORPG（Multiplayer Online Role-PlayingGame）（大型多人在线角色扮演游戏）游戏开发，尤其是大型3D游戏， 还是需要象**Bigworld**这样的商用引擎来支撑。\n\n好了，是不是有迫不及待了，那就赶快安装pomelo来试试吧。\n\n[原文地址](https://github.com/NetEase/pomelo/wiki/%E6%AC%A2%E8%BF%8E%E4%BD%BF%E7%94%A8pomelo)\n","source":"_posts/欢迎使用pomelo.md","raw":"---\ntitle: 欢迎使用pomelo\ntags:\n  - pomelo\ncategories:\n  - 后端开发\ntoc: false\ndate: 2018-02-28 11:32:28\n---\n\npomelo是一个游戏服务器框架，与以往单进程的游戏框架不同, 它是**高性能、高可伸缩、分布式多进程**的游戏服务器框架，并且使用很简单。它包括基础开发框架和一系列相关工具和库，可以帮助开发者省去游戏开发中枯燥的重复劳动和底层逻辑工作，免除开发者的重造轮子，让开发者可以更多地去关注游戏的具体逻辑，大大提高开发效率。pomelo强大的可伸缩性和灵活性使得pomelo也**可以作为通用的分布式实时应用开发框架**，用于一些高实时应用的开发，而且pomelo在很多方面的表现甚至超越了现有的开源实时应用框架。**pomelo支持所有主流平台的客户端**，并提供了客户端的开发库，使得客户端的开发变得很友好。\n\n<!-- more -->\n\n## pomelo组成\npomelo 是由一系列相互之间弱耦合的部分**组合而成**的，包括：\n\n### 框架\n**框架是pomelo最核心的部分;**\n\n### 库\npomelo提供了很多库，有些是跟游戏逻辑完全相关的，如**AI**，**AOI**，**寻路**等；也有与游戏逻辑无关但比较通用的，如**定时任务**执行， **数据同步**等等；\n\n### 工具\npomelo提供了**服务器管理控制工具**、**命令行工具**、**压力测试工具**等一系列工具；\n\n### 客户端库\npomelo提供了**各类平台的客户端开发库**，包括js, C, C#，Android, iOS, Unity3D等等，几乎支持涵盖了目前所有的主流平台，由于**pomelo的协议是开放**的，架构耦合松散，对于没有支持的客户端平台，用户也可以**很容易地开发出自己需要的库，定制自己的通信协议**；\n\n### demo\n一个框架需要强大的demo来展示功能并为开发者提供示例，pomelo提供了全平台的聊天demo和基于HTML5的捡宝demo，系统还提供了一个强大的基于HTML5开发的MMO游戏demo [Lordofpomelo](http://pomelo.netease.com/lordofpomelo/)【[源码](https://github.com/NetEase/lordofpomelo)】。\n\n## 为什么使用pomelo？\n高并发、高实时的游戏服务器的开发是很复杂的工作。跟web应用一样，一个好的开源容器或开发框架可以大大减少游戏服务器开发的复杂性，让开发变得更加容易。遗憾的是目前在游戏服务器开发领域一直没有太好的开源解决方案。pomelo将填补这个空白，打造一款**完全开源的高性能高并发游戏服务器框架**。pomelo的优势有以下几点：\n\n### 架构的可伸缩性好\n采用**多进程单线程的运行架构**，扩展服务器非常方便，node.js的网络io优势提供了高可伸缩性，写好的应用只需要简单地修改一下配置就能轻松地伸缩扩充；\n\n### 易用\npomelo基于轻量级的nodejs，其开发模型与web应用的开发类似，基于**convention over configuration(约定优于配置)**的理念，几乎零配置，api的设计也很精简，很容易上手，开发快速；\n\n### 框架的松耦合和可扩展性好\n遵循node.js微模块的原则，框架本身只有很少的代码，**所有component、库、工具都可以用npm module的形式扩展进来**，任何第三方都可以根据自己的需要开发自定义module，并把它整合到pomelo的框架中。\n\n### 完整的demo和文档\npomelo提供了完整的中英文文档，pomelo还提供一个完整的开源MMO游戏demo--[Lordofpomelo](http://pomelo.netease.com/lordofpomelo/)【[源码](https://github.com/NetEase/lordofpomelo)】，一个超过1万行代码的游戏demo，使开发者可以随时借鉴demo的设计与开发思路。\n\n## pomelo的定位\npomelo是一个轻量级的服务器框架，它最适合的应用领域是网页游戏、社交游戏、移动游戏的服务端，开发者会发现pomelo可以用如此少的代码达到强大的扩展性和伸缩性。当然还不仅仅是游戏，用pomelo开发高实时web应用也如此合适， 而且伸缩性比其它框架好。\n\n不推荐将pomelo用于大型的MMORPG（Multiplayer Online Role-PlayingGame）（大型多人在线角色扮演游戏）游戏开发，尤其是大型3D游戏， 还是需要象**Bigworld**这样的商用引擎来支撑。\n\n好了，是不是有迫不及待了，那就赶快安装pomelo来试试吧。\n\n[原文地址](https://github.com/NetEase/pomelo/wiki/%E6%AC%A2%E8%BF%8E%E4%BD%BF%E7%94%A8pomelo)\n","slug":"欢迎使用pomelo","published":1,"updated":"2019-11-07T02:24:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo1k009jh5s6rgbz5nyr","content":"<p>pomelo是一个游戏服务器框架，与以往单进程的游戏框架不同, 它是<strong>高性能、高可伸缩、分布式多进程</strong>的游戏服务器框架，并且使用很简单。它包括基础开发框架和一系列相关工具和库，可以帮助开发者省去游戏开发中枯燥的重复劳动和底层逻辑工作，免除开发者的重造轮子，让开发者可以更多地去关注游戏的具体逻辑，大大提高开发效率。pomelo强大的可伸缩性和灵活性使得pomelo也<strong>可以作为通用的分布式实时应用开发框架</strong>，用于一些高实时应用的开发，而且pomelo在很多方面的表现甚至超越了现有的开源实时应用框架。<strong>pomelo支持所有主流平台的客户端</strong>，并提供了客户端的开发库，使得客户端的开发变得很友好。</p>\n<a id=\"more\"></a>\n<h2 id=\"pomelo组成\"><a href=\"#pomelo组成\" class=\"headerlink\" title=\"pomelo组成\"></a>pomelo组成</h2><p>pomelo 是由一系列相互之间弱耦合的部分<strong>组合而成</strong>的，包括：</p>\n<h3 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h3><p><strong>框架是pomelo最核心的部分;</strong></p>\n<h3 id=\"库\"><a href=\"#库\" class=\"headerlink\" title=\"库\"></a>库</h3><p>pomelo提供了很多库，有些是跟游戏逻辑完全相关的，如<strong>AI</strong>，<strong>AOI</strong>，<strong>寻路</strong>等；也有与游戏逻辑无关但比较通用的，如<strong>定时任务</strong>执行， <strong>数据同步</strong>等等；</p>\n<h3 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h3><p>pomelo提供了<strong>服务器管理控制工具</strong>、<strong>命令行工具</strong>、<strong>压力测试工具</strong>等一系列工具；</p>\n<h3 id=\"客户端库\"><a href=\"#客户端库\" class=\"headerlink\" title=\"客户端库\"></a>客户端库</h3><p>pomelo提供了<strong>各类平台的客户端开发库</strong>，包括js, C, C#，Android, iOS, Unity3D等等，几乎支持涵盖了目前所有的主流平台，由于<strong>pomelo的协议是开放</strong>的，架构耦合松散，对于没有支持的客户端平台，用户也可以<strong>很容易地开发出自己需要的库，定制自己的通信协议</strong>；</p>\n<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h3><p>一个框架需要强大的demo来展示功能并为开发者提供示例，pomelo提供了全平台的聊天demo和基于HTML5的捡宝demo，系统还提供了一个强大的基于HTML5开发的MMO游戏demo <a href=\"http://pomelo.netease.com/lordofpomelo/\" target=\"_blank\" rel=\"noopener\">Lordofpomelo</a>【<a href=\"https://github.com/NetEase/lordofpomelo\" target=\"_blank\" rel=\"noopener\">源码</a>】。</p>\n<h2 id=\"为什么使用pomelo？\"><a href=\"#为什么使用pomelo？\" class=\"headerlink\" title=\"为什么使用pomelo？\"></a>为什么使用pomelo？</h2><p>高并发、高实时的游戏服务器的开发是很复杂的工作。跟web应用一样，一个好的开源容器或开发框架可以大大减少游戏服务器开发的复杂性，让开发变得更加容易。遗憾的是目前在游戏服务器开发领域一直没有太好的开源解决方案。pomelo将填补这个空白，打造一款<strong>完全开源的高性能高并发游戏服务器框架</strong>。pomelo的优势有以下几点：</p>\n<h3 id=\"架构的可伸缩性好\"><a href=\"#架构的可伸缩性好\" class=\"headerlink\" title=\"架构的可伸缩性好\"></a>架构的可伸缩性好</h3><p>采用<strong>多进程单线程的运行架构</strong>，扩展服务器非常方便，node.js的网络io优势提供了高可伸缩性，写好的应用只需要简单地修改一下配置就能轻松地伸缩扩充；</p>\n<h3 id=\"易用\"><a href=\"#易用\" class=\"headerlink\" title=\"易用\"></a>易用</h3><p>pomelo基于轻量级的nodejs，其开发模型与web应用的开发类似，基于<strong>convention over configuration(约定优于配置)</strong>的理念，几乎零配置，api的设计也很精简，很容易上手，开发快速；</p>\n<h3 id=\"框架的松耦合和可扩展性好\"><a href=\"#框架的松耦合和可扩展性好\" class=\"headerlink\" title=\"框架的松耦合和可扩展性好\"></a>框架的松耦合和可扩展性好</h3><p>遵循node.js微模块的原则，框架本身只有很少的代码，<strong>所有component、库、工具都可以用npm module的形式扩展进来</strong>，任何第三方都可以根据自己的需要开发自定义module，并把它整合到pomelo的框架中。</p>\n<h3 id=\"完整的demo和文档\"><a href=\"#完整的demo和文档\" class=\"headerlink\" title=\"完整的demo和文档\"></a>完整的demo和文档</h3><p>pomelo提供了完整的中英文文档，pomelo还提供一个完整的开源MMO游戏demo–<a href=\"http://pomelo.netease.com/lordofpomelo/\" target=\"_blank\" rel=\"noopener\">Lordofpomelo</a>【<a href=\"https://github.com/NetEase/lordofpomelo\" target=\"_blank\" rel=\"noopener\">源码</a>】，一个超过1万行代码的游戏demo，使开发者可以随时借鉴demo的设计与开发思路。</p>\n<h2 id=\"pomelo的定位\"><a href=\"#pomelo的定位\" class=\"headerlink\" title=\"pomelo的定位\"></a>pomelo的定位</h2><p>pomelo是一个轻量级的服务器框架，它最适合的应用领域是网页游戏、社交游戏、移动游戏的服务端，开发者会发现pomelo可以用如此少的代码达到强大的扩展性和伸缩性。当然还不仅仅是游戏，用pomelo开发高实时web应用也如此合适， 而且伸缩性比其它框架好。</p>\n<p>不推荐将pomelo用于大型的MMORPG（Multiplayer Online Role-PlayingGame）（大型多人在线角色扮演游戏）游戏开发，尤其是大型3D游戏， 还是需要象<strong>Bigworld</strong>这样的商用引擎来支撑。</p>\n<p>好了，是不是有迫不及待了，那就赶快安装pomelo来试试吧。</p>\n<p><a href=\"https://github.com/NetEase/pomelo/wiki/%E6%AC%A2%E8%BF%8E%E4%BD%BF%E7%94%A8pomelo\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n","site":{"data":{}},"excerpt":"<p>pomelo是一个游戏服务器框架，与以往单进程的游戏框架不同, 它是<strong>高性能、高可伸缩、分布式多进程</strong>的游戏服务器框架，并且使用很简单。它包括基础开发框架和一系列相关工具和库，可以帮助开发者省去游戏开发中枯燥的重复劳动和底层逻辑工作，免除开发者的重造轮子，让开发者可以更多地去关注游戏的具体逻辑，大大提高开发效率。pomelo强大的可伸缩性和灵活性使得pomelo也<strong>可以作为通用的分布式实时应用开发框架</strong>，用于一些高实时应用的开发，而且pomelo在很多方面的表现甚至超越了现有的开源实时应用框架。<strong>pomelo支持所有主流平台的客户端</strong>，并提供了客户端的开发库，使得客户端的开发变得很友好。</p>","more":"<h2 id=\"pomelo组成\"><a href=\"#pomelo组成\" class=\"headerlink\" title=\"pomelo组成\"></a>pomelo组成</h2><p>pomelo 是由一系列相互之间弱耦合的部分<strong>组合而成</strong>的，包括：</p>\n<h3 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h3><p><strong>框架是pomelo最核心的部分;</strong></p>\n<h3 id=\"库\"><a href=\"#库\" class=\"headerlink\" title=\"库\"></a>库</h3><p>pomelo提供了很多库，有些是跟游戏逻辑完全相关的，如<strong>AI</strong>，<strong>AOI</strong>，<strong>寻路</strong>等；也有与游戏逻辑无关但比较通用的，如<strong>定时任务</strong>执行， <strong>数据同步</strong>等等；</p>\n<h3 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h3><p>pomelo提供了<strong>服务器管理控制工具</strong>、<strong>命令行工具</strong>、<strong>压力测试工具</strong>等一系列工具；</p>\n<h3 id=\"客户端库\"><a href=\"#客户端库\" class=\"headerlink\" title=\"客户端库\"></a>客户端库</h3><p>pomelo提供了<strong>各类平台的客户端开发库</strong>，包括js, C, C#，Android, iOS, Unity3D等等，几乎支持涵盖了目前所有的主流平台，由于<strong>pomelo的协议是开放</strong>的，架构耦合松散，对于没有支持的客户端平台，用户也可以<strong>很容易地开发出自己需要的库，定制自己的通信协议</strong>；</p>\n<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h3><p>一个框架需要强大的demo来展示功能并为开发者提供示例，pomelo提供了全平台的聊天demo和基于HTML5的捡宝demo，系统还提供了一个强大的基于HTML5开发的MMO游戏demo <a href=\"http://pomelo.netease.com/lordofpomelo/\" target=\"_blank\" rel=\"noopener\">Lordofpomelo</a>【<a href=\"https://github.com/NetEase/lordofpomelo\" target=\"_blank\" rel=\"noopener\">源码</a>】。</p>\n<h2 id=\"为什么使用pomelo？\"><a href=\"#为什么使用pomelo？\" class=\"headerlink\" title=\"为什么使用pomelo？\"></a>为什么使用pomelo？</h2><p>高并发、高实时的游戏服务器的开发是很复杂的工作。跟web应用一样，一个好的开源容器或开发框架可以大大减少游戏服务器开发的复杂性，让开发变得更加容易。遗憾的是目前在游戏服务器开发领域一直没有太好的开源解决方案。pomelo将填补这个空白，打造一款<strong>完全开源的高性能高并发游戏服务器框架</strong>。pomelo的优势有以下几点：</p>\n<h3 id=\"架构的可伸缩性好\"><a href=\"#架构的可伸缩性好\" class=\"headerlink\" title=\"架构的可伸缩性好\"></a>架构的可伸缩性好</h3><p>采用<strong>多进程单线程的运行架构</strong>，扩展服务器非常方便，node.js的网络io优势提供了高可伸缩性，写好的应用只需要简单地修改一下配置就能轻松地伸缩扩充；</p>\n<h3 id=\"易用\"><a href=\"#易用\" class=\"headerlink\" title=\"易用\"></a>易用</h3><p>pomelo基于轻量级的nodejs，其开发模型与web应用的开发类似，基于<strong>convention over configuration(约定优于配置)</strong>的理念，几乎零配置，api的设计也很精简，很容易上手，开发快速；</p>\n<h3 id=\"框架的松耦合和可扩展性好\"><a href=\"#框架的松耦合和可扩展性好\" class=\"headerlink\" title=\"框架的松耦合和可扩展性好\"></a>框架的松耦合和可扩展性好</h3><p>遵循node.js微模块的原则，框架本身只有很少的代码，<strong>所有component、库、工具都可以用npm module的形式扩展进来</strong>，任何第三方都可以根据自己的需要开发自定义module，并把它整合到pomelo的框架中。</p>\n<h3 id=\"完整的demo和文档\"><a href=\"#完整的demo和文档\" class=\"headerlink\" title=\"完整的demo和文档\"></a>完整的demo和文档</h3><p>pomelo提供了完整的中英文文档，pomelo还提供一个完整的开源MMO游戏demo–<a href=\"http://pomelo.netease.com/lordofpomelo/\" target=\"_blank\" rel=\"noopener\">Lordofpomelo</a>【<a href=\"https://github.com/NetEase/lordofpomelo\" target=\"_blank\" rel=\"noopener\">源码</a>】，一个超过1万行代码的游戏demo，使开发者可以随时借鉴demo的设计与开发思路。</p>\n<h2 id=\"pomelo的定位\"><a href=\"#pomelo的定位\" class=\"headerlink\" title=\"pomelo的定位\"></a>pomelo的定位</h2><p>pomelo是一个轻量级的服务器框架，它最适合的应用领域是网页游戏、社交游戏、移动游戏的服务端，开发者会发现pomelo可以用如此少的代码达到强大的扩展性和伸缩性。当然还不仅仅是游戏，用pomelo开发高实时web应用也如此合适， 而且伸缩性比其它框架好。</p>\n<p>不推荐将pomelo用于大型的MMORPG（Multiplayer Online Role-PlayingGame）（大型多人在线角色扮演游戏）游戏开发，尤其是大型3D游戏， 还是需要象<strong>Bigworld</strong>这样的商用引擎来支撑。</p>\n<p>好了，是不是有迫不及待了，那就赶快安装pomelo来试试吧。</p>\n<p><a href=\"https://github.com/NetEase/pomelo/wiki/%E6%AC%A2%E8%BF%8E%E4%BD%BF%E7%94%A8pomelo\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>"},{"title":"每天读一遍，不久你就会有改变","toc":false,"date":"2017-10-13T06:03:00.000Z","_content":"\n很久以前记录的一个文章，具体来源也不知道了，今天看到觉得应该记下来：\n\n<!-- more -->\n\n1. 别低估任何人。\n\n2. 你没那么多观众，别那么累。\n\n3. 温和对人对事。不要随意发脾气，谁都不欠你的。\n\n4. 现在很痛苦，等过阵子回头看看，会发现其实那都不算事。\n\n5. 和对自己有恶意的人绝交。人有绝交，才有至交。\n\n6. 学会宽容伤害自己的人，因为他们很可怜，各人都有自己的难处，大家都不容易。 \n\n7. 学会放弃，拽的越紧，痛苦的是自己。\n\n8. 低调，取舍间，必有得失。\n\n9. 不要试图给自己找任何借口，错误面前没人爱听那些借口。\n\n10. 慎言，独立，学会妥协的同时，也要坚持自己最基本的原则。\n\n11. 付出并不一定有结果。坚持可能会导致失去更多。\n\n12. 过去的事情可以不忘记，但一定要放下。\n\n13. 活得轻松，任何事都作一个最好的打算和最坏的打算。\n\n14. 做一个简单的人，踏实而务实。不沉溺幻想。不庸人自扰。\n\n15. 不说谎话，因为总有被拆穿的一天。\n\n16. 别人光鲜的背后或者有着太多不为人知的痛苦\n\n17. 尽量充实自己。不要停止学习。不管学习什么，语言，厨艺，各种技能。\n\n18. 注意自己的修养，你就是孩子的第一位老师。\n\n19. 孝顺父母。不只是嘴上说说，即使多打几个电话也是很好的。\n\n20. 爱父母，因为他们给了你生命，同时也是爱你爱的最无私的人。\n\n21. 偶尔也要现实和虚伪一点，因为不那样做的话，很难混。\n\n22. 收敛自己的脾气，偶尔要刻意沉默，因为冲动会做下让自己无法挽回的事情。\n\n23. 无论什么时候，做什么事情，要思考。\n\n24. 永远不要给背叛过自己的朋友第二次的背叛的机会。\n\n25. 无论是谁，都有自己的限度。特别是信任。\n\n26. 懂得倾听别人的忠告。\n\n27. 别人说的记在脑袋里，而自己的，则放在心里。\n\n28. 尽量不要讲同事朋友的八卦。\n\n29. 信佛，信因果，在真正的因果面前，人的力量是微不足道的。\n\n30. 坦然接受生活给你的馈赠吧，不管是好的还是坏的。\n\n31. 真正了解无常的含义，当你痛苦时，你要想这痛苦不是永恒的，当你快乐时，你要想这快乐也不是永恒的。\n\n32. 要快乐，要开朗，要坚韧，要温暖，对人要真诚。\n\n33. 空虚无聊的时候就读书，但一定得有自己的生活目标和计划。\n\n34. 对人性的弱点有清醒的认识，但要相信真诚的爱情，对爱情永远怀有单纯的向往。\n\n35. 不要太过依赖除自己以外的人，因为只有自己不会抛弃自己。\n\n36. 永远对生活充满希望，对于困境与磨难，微笑面对。\n\n37. 多看书，看好书。\n\n38. 少吃点，吃好的。\n\n39. 古龙说过，爱笑的女孩子，运气不会太差。\n\n40. 多交朋友，交好的朋友。女人一定要有闺密。\n\n41. 请记得，好朋友的定义是：你混的好，她打心眼里为你开心；你混的不好，她由衷的为你着急。\n\n42. 要有梦想，即使遥远。\n\n43. 努力爱一个人。付出，不一定会有收获；不付出，却一定不会有收获，不要奢望出现奇迹。\n\n44. 承诺是一件美好的事情，但美好的东西往往不会变为现实。\n\n45. 每个人都有自己鲜明的主张和个性，不要识途去改变他人，同样，也不要被他人所改变。改了，就不是自己了。\n\n46. 没有十全十美的东西，没有十全十美的人，关键是清楚到底想要什么。得到想要的，肯定会失去另外一部分。如果什么都想要，只会什么都得不到。\n\n47. 这个世界最脆弱的是生命，身体健康，很重要。\n\n48. 老天爷对每个人都是公平的。\n\n49. 不要试图控制别人，不要要求别人理解你\n\n50. 活在当下，别在怀念过去或者憧憬未来中浪费掉你现在的生活\n\n51. 不要忘本，任何时候，任何事情\n\n52. 要诚恳，要坦然，要慷慨，要宽容，要有平常心\n\n53. 学会忘记, 善忘是一件好事\n\n54. 要乐观，要积极，多笑，多照镜子\n\n55. 相信他说的话，但不要当真。\n\n56. 凡事多长心眼。\n\n57. 不要自作聪明。\n\n58. 做自己的决定。然后准备好承担后果。从一开始就提醒自己，世上没有后悔药吃。\n\n59. 自己不喜欢的人，可以报之以沉默微笑；自己喜欢的人，那就随便怎么样了，因为你的喜爱会挡也挡不住地流露出来。\n\n60. 相信因果报应！相信轮回！\n\n61. 要学会忍耐与坚持！\n\n62. 这个世界上没有真正的爱情⋯⋯时间可以冲淡一切\n\n63. 不要做刺猬 能不与人结仇就不与人结仇，谁也不跟谁一辈子，有些事情没必要记在心上\n\n64. 有时要学会听取身边人的意见，更多时候这样才不会让自己受到伤害。\n\n65. 忘记过去才能有新的开始。\n\n66. 这个世界很不公平。\n\n67. 不要太依赖朋友，人性基本都有恶的一面。\n\n68. 爱情很美好，相信爱情。如果连爱情都不相信那人生岂不太苦了？\n\n69. 想得到一样一定会失去另一件东西。\n\n70. 痛苦让人成长，是你进步的一个机会，一个挑战。别害怕痛苦的事情，它有另一面积极的作用。\n\n71. 人就是孤独的，缓解它带来的痛苦的唯一方式就是平静的\n","source":"_posts/每天读一遍，不就你就会有改变.md","raw":"---\ntitle: 每天读一遍，不久你就会有改变\ntags:\n  - plan\ncategories:\n  - 生活玩乐\ntoc: false\ndate: 2017-10-13 14:03:00\n---\n\n很久以前记录的一个文章，具体来源也不知道了，今天看到觉得应该记下来：\n\n<!-- more -->\n\n1. 别低估任何人。\n\n2. 你没那么多观众，别那么累。\n\n3. 温和对人对事。不要随意发脾气，谁都不欠你的。\n\n4. 现在很痛苦，等过阵子回头看看，会发现其实那都不算事。\n\n5. 和对自己有恶意的人绝交。人有绝交，才有至交。\n\n6. 学会宽容伤害自己的人，因为他们很可怜，各人都有自己的难处，大家都不容易。 \n\n7. 学会放弃，拽的越紧，痛苦的是自己。\n\n8. 低调，取舍间，必有得失。\n\n9. 不要试图给自己找任何借口，错误面前没人爱听那些借口。\n\n10. 慎言，独立，学会妥协的同时，也要坚持自己最基本的原则。\n\n11. 付出并不一定有结果。坚持可能会导致失去更多。\n\n12. 过去的事情可以不忘记，但一定要放下。\n\n13. 活得轻松，任何事都作一个最好的打算和最坏的打算。\n\n14. 做一个简单的人，踏实而务实。不沉溺幻想。不庸人自扰。\n\n15. 不说谎话，因为总有被拆穿的一天。\n\n16. 别人光鲜的背后或者有着太多不为人知的痛苦\n\n17. 尽量充实自己。不要停止学习。不管学习什么，语言，厨艺，各种技能。\n\n18. 注意自己的修养，你就是孩子的第一位老师。\n\n19. 孝顺父母。不只是嘴上说说，即使多打几个电话也是很好的。\n\n20. 爱父母，因为他们给了你生命，同时也是爱你爱的最无私的人。\n\n21. 偶尔也要现实和虚伪一点，因为不那样做的话，很难混。\n\n22. 收敛自己的脾气，偶尔要刻意沉默，因为冲动会做下让自己无法挽回的事情。\n\n23. 无论什么时候，做什么事情，要思考。\n\n24. 永远不要给背叛过自己的朋友第二次的背叛的机会。\n\n25. 无论是谁，都有自己的限度。特别是信任。\n\n26. 懂得倾听别人的忠告。\n\n27. 别人说的记在脑袋里，而自己的，则放在心里。\n\n28. 尽量不要讲同事朋友的八卦。\n\n29. 信佛，信因果，在真正的因果面前，人的力量是微不足道的。\n\n30. 坦然接受生活给你的馈赠吧，不管是好的还是坏的。\n\n31. 真正了解无常的含义，当你痛苦时，你要想这痛苦不是永恒的，当你快乐时，你要想这快乐也不是永恒的。\n\n32. 要快乐，要开朗，要坚韧，要温暖，对人要真诚。\n\n33. 空虚无聊的时候就读书，但一定得有自己的生活目标和计划。\n\n34. 对人性的弱点有清醒的认识，但要相信真诚的爱情，对爱情永远怀有单纯的向往。\n\n35. 不要太过依赖除自己以外的人，因为只有自己不会抛弃自己。\n\n36. 永远对生活充满希望，对于困境与磨难，微笑面对。\n\n37. 多看书，看好书。\n\n38. 少吃点，吃好的。\n\n39. 古龙说过，爱笑的女孩子，运气不会太差。\n\n40. 多交朋友，交好的朋友。女人一定要有闺密。\n\n41. 请记得，好朋友的定义是：你混的好，她打心眼里为你开心；你混的不好，她由衷的为你着急。\n\n42. 要有梦想，即使遥远。\n\n43. 努力爱一个人。付出，不一定会有收获；不付出，却一定不会有收获，不要奢望出现奇迹。\n\n44. 承诺是一件美好的事情，但美好的东西往往不会变为现实。\n\n45. 每个人都有自己鲜明的主张和个性，不要识途去改变他人，同样，也不要被他人所改变。改了，就不是自己了。\n\n46. 没有十全十美的东西，没有十全十美的人，关键是清楚到底想要什么。得到想要的，肯定会失去另外一部分。如果什么都想要，只会什么都得不到。\n\n47. 这个世界最脆弱的是生命，身体健康，很重要。\n\n48. 老天爷对每个人都是公平的。\n\n49. 不要试图控制别人，不要要求别人理解你\n\n50. 活在当下，别在怀念过去或者憧憬未来中浪费掉你现在的生活\n\n51. 不要忘本，任何时候，任何事情\n\n52. 要诚恳，要坦然，要慷慨，要宽容，要有平常心\n\n53. 学会忘记, 善忘是一件好事\n\n54. 要乐观，要积极，多笑，多照镜子\n\n55. 相信他说的话，但不要当真。\n\n56. 凡事多长心眼。\n\n57. 不要自作聪明。\n\n58. 做自己的决定。然后准备好承担后果。从一开始就提醒自己，世上没有后悔药吃。\n\n59. 自己不喜欢的人，可以报之以沉默微笑；自己喜欢的人，那就随便怎么样了，因为你的喜爱会挡也挡不住地流露出来。\n\n60. 相信因果报应！相信轮回！\n\n61. 要学会忍耐与坚持！\n\n62. 这个世界上没有真正的爱情⋯⋯时间可以冲淡一切\n\n63. 不要做刺猬 能不与人结仇就不与人结仇，谁也不跟谁一辈子，有些事情没必要记在心上\n\n64. 有时要学会听取身边人的意见，更多时候这样才不会让自己受到伤害。\n\n65. 忘记过去才能有新的开始。\n\n66. 这个世界很不公平。\n\n67. 不要太依赖朋友，人性基本都有恶的一面。\n\n68. 爱情很美好，相信爱情。如果连爱情都不相信那人生岂不太苦了？\n\n69. 想得到一样一定会失去另一件东西。\n\n70. 痛苦让人成长，是你进步的一个机会，一个挑战。别害怕痛苦的事情，它有另一面积极的作用。\n\n71. 人就是孤独的，缓解它带来的痛苦的唯一方式就是平静的\n","slug":"每天读一遍，不就你就会有改变","published":1,"updated":"2019-11-07T02:24:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo1l009mh5s6rzydbzsj","content":"<p>很久以前记录的一个文章，具体来源也不知道了，今天看到觉得应该记下来：</p>\n<a id=\"more\"></a>\n<ol>\n<li><p>别低估任何人。</p>\n</li>\n<li><p>你没那么多观众，别那么累。</p>\n</li>\n<li><p>温和对人对事。不要随意发脾气，谁都不欠你的。</p>\n</li>\n<li><p>现在很痛苦，等过阵子回头看看，会发现其实那都不算事。</p>\n</li>\n<li><p>和对自己有恶意的人绝交。人有绝交，才有至交。</p>\n</li>\n<li><p>学会宽容伤害自己的人，因为他们很可怜，各人都有自己的难处，大家都不容易。 </p>\n</li>\n<li><p>学会放弃，拽的越紧，痛苦的是自己。</p>\n</li>\n<li><p>低调，取舍间，必有得失。</p>\n</li>\n<li><p>不要试图给自己找任何借口，错误面前没人爱听那些借口。</p>\n</li>\n<li><p>慎言，独立，学会妥协的同时，也要坚持自己最基本的原则。</p>\n</li>\n<li><p>付出并不一定有结果。坚持可能会导致失去更多。</p>\n</li>\n<li><p>过去的事情可以不忘记，但一定要放下。</p>\n</li>\n<li><p>活得轻松，任何事都作一个最好的打算和最坏的打算。</p>\n</li>\n<li><p>做一个简单的人，踏实而务实。不沉溺幻想。不庸人自扰。</p>\n</li>\n<li><p>不说谎话，因为总有被拆穿的一天。</p>\n</li>\n<li><p>别人光鲜的背后或者有着太多不为人知的痛苦</p>\n</li>\n<li><p>尽量充实自己。不要停止学习。不管学习什么，语言，厨艺，各种技能。</p>\n</li>\n<li><p>注意自己的修养，你就是孩子的第一位老师。</p>\n</li>\n<li><p>孝顺父母。不只是嘴上说说，即使多打几个电话也是很好的。</p>\n</li>\n<li><p>爱父母，因为他们给了你生命，同时也是爱你爱的最无私的人。</p>\n</li>\n<li><p>偶尔也要现实和虚伪一点，因为不那样做的话，很难混。</p>\n</li>\n<li><p>收敛自己的脾气，偶尔要刻意沉默，因为冲动会做下让自己无法挽回的事情。</p>\n</li>\n<li><p>无论什么时候，做什么事情，要思考。</p>\n</li>\n<li><p>永远不要给背叛过自己的朋友第二次的背叛的机会。</p>\n</li>\n<li><p>无论是谁，都有自己的限度。特别是信任。</p>\n</li>\n<li><p>懂得倾听别人的忠告。</p>\n</li>\n<li><p>别人说的记在脑袋里，而自己的，则放在心里。</p>\n</li>\n<li><p>尽量不要讲同事朋友的八卦。</p>\n</li>\n<li><p>信佛，信因果，在真正的因果面前，人的力量是微不足道的。</p>\n</li>\n<li><p>坦然接受生活给你的馈赠吧，不管是好的还是坏的。</p>\n</li>\n<li><p>真正了解无常的含义，当你痛苦时，你要想这痛苦不是永恒的，当你快乐时，你要想这快乐也不是永恒的。</p>\n</li>\n<li><p>要快乐，要开朗，要坚韧，要温暖，对人要真诚。</p>\n</li>\n<li><p>空虚无聊的时候就读书，但一定得有自己的生活目标和计划。</p>\n</li>\n<li><p>对人性的弱点有清醒的认识，但要相信真诚的爱情，对爱情永远怀有单纯的向往。</p>\n</li>\n<li><p>不要太过依赖除自己以外的人，因为只有自己不会抛弃自己。</p>\n</li>\n<li><p>永远对生活充满希望，对于困境与磨难，微笑面对。</p>\n</li>\n<li><p>多看书，看好书。</p>\n</li>\n<li><p>少吃点，吃好的。</p>\n</li>\n<li><p>古龙说过，爱笑的女孩子，运气不会太差。</p>\n</li>\n<li><p>多交朋友，交好的朋友。女人一定要有闺密。</p>\n</li>\n<li><p>请记得，好朋友的定义是：你混的好，她打心眼里为你开心；你混的不好，她由衷的为你着急。</p>\n</li>\n<li><p>要有梦想，即使遥远。</p>\n</li>\n<li><p>努力爱一个人。付出，不一定会有收获；不付出，却一定不会有收获，不要奢望出现奇迹。</p>\n</li>\n<li><p>承诺是一件美好的事情，但美好的东西往往不会变为现实。</p>\n</li>\n<li><p>每个人都有自己鲜明的主张和个性，不要识途去改变他人，同样，也不要被他人所改变。改了，就不是自己了。</p>\n</li>\n<li><p>没有十全十美的东西，没有十全十美的人，关键是清楚到底想要什么。得到想要的，肯定会失去另外一部分。如果什么都想要，只会什么都得不到。</p>\n</li>\n<li><p>这个世界最脆弱的是生命，身体健康，很重要。</p>\n</li>\n<li><p>老天爷对每个人都是公平的。</p>\n</li>\n<li><p>不要试图控制别人，不要要求别人理解你</p>\n</li>\n<li><p>活在当下，别在怀念过去或者憧憬未来中浪费掉你现在的生活</p>\n</li>\n<li><p>不要忘本，任何时候，任何事情</p>\n</li>\n<li><p>要诚恳，要坦然，要慷慨，要宽容，要有平常心</p>\n</li>\n<li><p>学会忘记, 善忘是一件好事</p>\n</li>\n<li><p>要乐观，要积极，多笑，多照镜子</p>\n</li>\n<li><p>相信他说的话，但不要当真。</p>\n</li>\n<li><p>凡事多长心眼。</p>\n</li>\n<li><p>不要自作聪明。</p>\n</li>\n<li><p>做自己的决定。然后准备好承担后果。从一开始就提醒自己，世上没有后悔药吃。</p>\n</li>\n<li><p>自己不喜欢的人，可以报之以沉默微笑；自己喜欢的人，那就随便怎么样了，因为你的喜爱会挡也挡不住地流露出来。</p>\n</li>\n<li><p>相信因果报应！相信轮回！</p>\n</li>\n<li><p>要学会忍耐与坚持！</p>\n</li>\n<li><p>这个世界上没有真正的爱情⋯⋯时间可以冲淡一切</p>\n</li>\n<li><p>不要做刺猬 能不与人结仇就不与人结仇，谁也不跟谁一辈子，有些事情没必要记在心上</p>\n</li>\n<li><p>有时要学会听取身边人的意见，更多时候这样才不会让自己受到伤害。</p>\n</li>\n<li><p>忘记过去才能有新的开始。</p>\n</li>\n<li><p>这个世界很不公平。</p>\n</li>\n<li><p>不要太依赖朋友，人性基本都有恶的一面。</p>\n</li>\n<li><p>爱情很美好，相信爱情。如果连爱情都不相信那人生岂不太苦了？</p>\n</li>\n<li><p>想得到一样一定会失去另一件东西。</p>\n</li>\n<li><p>痛苦让人成长，是你进步的一个机会，一个挑战。别害怕痛苦的事情，它有另一面积极的作用。</p>\n</li>\n<li><p>人就是孤独的，缓解它带来的痛苦的唯一方式就是平静的</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>很久以前记录的一个文章，具体来源也不知道了，今天看到觉得应该记下来：</p>","more":"<ol>\n<li><p>别低估任何人。</p>\n</li>\n<li><p>你没那么多观众，别那么累。</p>\n</li>\n<li><p>温和对人对事。不要随意发脾气，谁都不欠你的。</p>\n</li>\n<li><p>现在很痛苦，等过阵子回头看看，会发现其实那都不算事。</p>\n</li>\n<li><p>和对自己有恶意的人绝交。人有绝交，才有至交。</p>\n</li>\n<li><p>学会宽容伤害自己的人，因为他们很可怜，各人都有自己的难处，大家都不容易。 </p>\n</li>\n<li><p>学会放弃，拽的越紧，痛苦的是自己。</p>\n</li>\n<li><p>低调，取舍间，必有得失。</p>\n</li>\n<li><p>不要试图给自己找任何借口，错误面前没人爱听那些借口。</p>\n</li>\n<li><p>慎言，独立，学会妥协的同时，也要坚持自己最基本的原则。</p>\n</li>\n<li><p>付出并不一定有结果。坚持可能会导致失去更多。</p>\n</li>\n<li><p>过去的事情可以不忘记，但一定要放下。</p>\n</li>\n<li><p>活得轻松，任何事都作一个最好的打算和最坏的打算。</p>\n</li>\n<li><p>做一个简单的人，踏实而务实。不沉溺幻想。不庸人自扰。</p>\n</li>\n<li><p>不说谎话，因为总有被拆穿的一天。</p>\n</li>\n<li><p>别人光鲜的背后或者有着太多不为人知的痛苦</p>\n</li>\n<li><p>尽量充实自己。不要停止学习。不管学习什么，语言，厨艺，各种技能。</p>\n</li>\n<li><p>注意自己的修养，你就是孩子的第一位老师。</p>\n</li>\n<li><p>孝顺父母。不只是嘴上说说，即使多打几个电话也是很好的。</p>\n</li>\n<li><p>爱父母，因为他们给了你生命，同时也是爱你爱的最无私的人。</p>\n</li>\n<li><p>偶尔也要现实和虚伪一点，因为不那样做的话，很难混。</p>\n</li>\n<li><p>收敛自己的脾气，偶尔要刻意沉默，因为冲动会做下让自己无法挽回的事情。</p>\n</li>\n<li><p>无论什么时候，做什么事情，要思考。</p>\n</li>\n<li><p>永远不要给背叛过自己的朋友第二次的背叛的机会。</p>\n</li>\n<li><p>无论是谁，都有自己的限度。特别是信任。</p>\n</li>\n<li><p>懂得倾听别人的忠告。</p>\n</li>\n<li><p>别人说的记在脑袋里，而自己的，则放在心里。</p>\n</li>\n<li><p>尽量不要讲同事朋友的八卦。</p>\n</li>\n<li><p>信佛，信因果，在真正的因果面前，人的力量是微不足道的。</p>\n</li>\n<li><p>坦然接受生活给你的馈赠吧，不管是好的还是坏的。</p>\n</li>\n<li><p>真正了解无常的含义，当你痛苦时，你要想这痛苦不是永恒的，当你快乐时，你要想这快乐也不是永恒的。</p>\n</li>\n<li><p>要快乐，要开朗，要坚韧，要温暖，对人要真诚。</p>\n</li>\n<li><p>空虚无聊的时候就读书，但一定得有自己的生活目标和计划。</p>\n</li>\n<li><p>对人性的弱点有清醒的认识，但要相信真诚的爱情，对爱情永远怀有单纯的向往。</p>\n</li>\n<li><p>不要太过依赖除自己以外的人，因为只有自己不会抛弃自己。</p>\n</li>\n<li><p>永远对生活充满希望，对于困境与磨难，微笑面对。</p>\n</li>\n<li><p>多看书，看好书。</p>\n</li>\n<li><p>少吃点，吃好的。</p>\n</li>\n<li><p>古龙说过，爱笑的女孩子，运气不会太差。</p>\n</li>\n<li><p>多交朋友，交好的朋友。女人一定要有闺密。</p>\n</li>\n<li><p>请记得，好朋友的定义是：你混的好，她打心眼里为你开心；你混的不好，她由衷的为你着急。</p>\n</li>\n<li><p>要有梦想，即使遥远。</p>\n</li>\n<li><p>努力爱一个人。付出，不一定会有收获；不付出，却一定不会有收获，不要奢望出现奇迹。</p>\n</li>\n<li><p>承诺是一件美好的事情，但美好的东西往往不会变为现实。</p>\n</li>\n<li><p>每个人都有自己鲜明的主张和个性，不要识途去改变他人，同样，也不要被他人所改变。改了，就不是自己了。</p>\n</li>\n<li><p>没有十全十美的东西，没有十全十美的人，关键是清楚到底想要什么。得到想要的，肯定会失去另外一部分。如果什么都想要，只会什么都得不到。</p>\n</li>\n<li><p>这个世界最脆弱的是生命，身体健康，很重要。</p>\n</li>\n<li><p>老天爷对每个人都是公平的。</p>\n</li>\n<li><p>不要试图控制别人，不要要求别人理解你</p>\n</li>\n<li><p>活在当下，别在怀念过去或者憧憬未来中浪费掉你现在的生活</p>\n</li>\n<li><p>不要忘本，任何时候，任何事情</p>\n</li>\n<li><p>要诚恳，要坦然，要慷慨，要宽容，要有平常心</p>\n</li>\n<li><p>学会忘记, 善忘是一件好事</p>\n</li>\n<li><p>要乐观，要积极，多笑，多照镜子</p>\n</li>\n<li><p>相信他说的话，但不要当真。</p>\n</li>\n<li><p>凡事多长心眼。</p>\n</li>\n<li><p>不要自作聪明。</p>\n</li>\n<li><p>做自己的决定。然后准备好承担后果。从一开始就提醒自己，世上没有后悔药吃。</p>\n</li>\n<li><p>自己不喜欢的人，可以报之以沉默微笑；自己喜欢的人，那就随便怎么样了，因为你的喜爱会挡也挡不住地流露出来。</p>\n</li>\n<li><p>相信因果报应！相信轮回！</p>\n</li>\n<li><p>要学会忍耐与坚持！</p>\n</li>\n<li><p>这个世界上没有真正的爱情⋯⋯时间可以冲淡一切</p>\n</li>\n<li><p>不要做刺猬 能不与人结仇就不与人结仇，谁也不跟谁一辈子，有些事情没必要记在心上</p>\n</li>\n<li><p>有时要学会听取身边人的意见，更多时候这样才不会让自己受到伤害。</p>\n</li>\n<li><p>忘记过去才能有新的开始。</p>\n</li>\n<li><p>这个世界很不公平。</p>\n</li>\n<li><p>不要太依赖朋友，人性基本都有恶的一面。</p>\n</li>\n<li><p>爱情很美好，相信爱情。如果连爱情都不相信那人生岂不太苦了？</p>\n</li>\n<li><p>想得到一样一定会失去另一件东西。</p>\n</li>\n<li><p>痛苦让人成长，是你进步的一个机会，一个挑战。别害怕痛苦的事情，它有另一面积极的作用。</p>\n</li>\n<li><p>人就是孤独的，缓解它带来的痛苦的唯一方式就是平静的</p>\n</li>\n</ol>"},{"title":"浏览器播放RTSP直播流","toc":false,"date":"2019-12-03T03:50:20.000Z","_content":"\n最近有个需求是将rtsp直播流在浏览器上直接播放，要求低延迟效果好，查并且尝试了一系列的方法，发现目前体验最好的是通过node将直播流转成二进制图片数据，然后在浏览器端绘制，用到的包有jsmpeg、node-rtsp-stream-jsmpeg\n\n有效的rtsp直播流：rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mov\n\nserver端：服务器端需要安装ffmpeg，nodejs，如果是本地的话装在本地就可以了\n\n```javascript\nconst Stream = require('node-rtsp-stream-jsmpeg')\n\nconst options = {\n  name: 'streamName',\n  url: 'rtsp://xxxx',\n  wsPort: 3333\n}\n\nstream = new Stream(options)\n\nstream.start()\n```\n\nclient端：\n\n```html\n<!DOCTYPE html>\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width\">\n  <title>DEMO node-rtsp-stream-jsmpeg</title>\n  <script src=\"jsmpeg.min.js\"></script>\n</head>\n<body>\n<div>\n  <canvas id=\"video-canvas\"></canvas>\n</div>\n\n<script type=\"text/javascript\">\n  var url = 'ws://xxxx:3333'\n  var canvas = document.getElementById('video-canvas')\n  var player = new JSMpeg.Player(url, { canvas: canvas, videoBufferSize: 1024*1024 })\n</script>\n</body>\n```\n\n整体体验效果不错。","source":"_posts/浏览器播放RTSP直播流.md","raw":"---\ntitle: 浏览器播放RTSP直播流\ntags:\n  - Web开发\ncategories:\n  - 项目总结\ntoc: false\ndate: 2019-12-03 11:50:20\n---\n\n最近有个需求是将rtsp直播流在浏览器上直接播放，要求低延迟效果好，查并且尝试了一系列的方法，发现目前体验最好的是通过node将直播流转成二进制图片数据，然后在浏览器端绘制，用到的包有jsmpeg、node-rtsp-stream-jsmpeg\n\n有效的rtsp直播流：rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mov\n\nserver端：服务器端需要安装ffmpeg，nodejs，如果是本地的话装在本地就可以了\n\n```javascript\nconst Stream = require('node-rtsp-stream-jsmpeg')\n\nconst options = {\n  name: 'streamName',\n  url: 'rtsp://xxxx',\n  wsPort: 3333\n}\n\nstream = new Stream(options)\n\nstream.start()\n```\n\nclient端：\n\n```html\n<!DOCTYPE html>\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width\">\n  <title>DEMO node-rtsp-stream-jsmpeg</title>\n  <script src=\"jsmpeg.min.js\"></script>\n</head>\n<body>\n<div>\n  <canvas id=\"video-canvas\"></canvas>\n</div>\n\n<script type=\"text/javascript\">\n  var url = 'ws://xxxx:3333'\n  var canvas = document.getElementById('video-canvas')\n  var player = new JSMpeg.Player(url, { canvas: canvas, videoBufferSize: 1024*1024 })\n</script>\n</body>\n```\n\n整体体验效果不错。","slug":"浏览器播放RTSP直播流","published":1,"updated":"2019-12-06T01:01:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo1n009ph5s6apzlkwnf","content":"<p>最近有个需求是将rtsp直播流在浏览器上直接播放，要求低延迟效果好，查并且尝试了一系列的方法，发现目前体验最好的是通过node将直播流转成二进制图片数据，然后在浏览器端绘制，用到的包有jsmpeg、node-rtsp-stream-jsmpeg</p>\n<p>有效的rtsp直播流：rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mov</p>\n<p>server端：服务器端需要安装ffmpeg，nodejs，如果是本地的话装在本地就可以了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Stream = <span class=\"built_in\">require</span>(<span class=\"string\">'node-rtsp-stream-jsmpeg'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'streamName'</span>,</span><br><span class=\"line\">  url: <span class=\"string\">'rtsp://xxxx'</span>,</span><br><span class=\"line\">  wsPort: <span class=\"number\">3333</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">stream = <span class=\"keyword\">new</span> Stream(options)</span><br><span class=\"line\"></span><br><span class=\"line\">stream.start()</span><br></pre></td></tr></table></figure>\n<p>client端：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>DEMO node-rtsp-stream-jsmpeg<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jsmpeg.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">\"video-canvas\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> url = <span class=\"string\">'ws://xxxx:3333'</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'video-canvas'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> player = <span class=\"keyword\">new</span> JSMpeg.Player(url, &#123; <span class=\"attr\">canvas</span>: canvas, <span class=\"attr\">videoBufferSize</span>: <span class=\"number\">1024</span>*<span class=\"number\">1024</span> &#125;)</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>整体体验效果不错。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近有个需求是将rtsp直播流在浏览器上直接播放，要求低延迟效果好，查并且尝试了一系列的方法，发现目前体验最好的是通过node将直播流转成二进制图片数据，然后在浏览器端绘制，用到的包有jsmpeg、node-rtsp-stream-jsmpeg</p>\n<p>有效的rtsp直播流：rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mov</p>\n<p>server端：服务器端需要安装ffmpeg，nodejs，如果是本地的话装在本地就可以了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Stream = <span class=\"built_in\">require</span>(<span class=\"string\">'node-rtsp-stream-jsmpeg'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'streamName'</span>,</span><br><span class=\"line\">  url: <span class=\"string\">'rtsp://xxxx'</span>,</span><br><span class=\"line\">  wsPort: <span class=\"number\">3333</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">stream = <span class=\"keyword\">new</span> Stream(options)</span><br><span class=\"line\"></span><br><span class=\"line\">stream.start()</span><br></pre></td></tr></table></figure>\n<p>client端：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>DEMO node-rtsp-stream-jsmpeg<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jsmpeg.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">\"video-canvas\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> url = <span class=\"string\">'ws://xxxx:3333'</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'video-canvas'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> player = <span class=\"keyword\">new</span> JSMpeg.Player(url, &#123; <span class=\"attr\">canvas</span>: canvas, <span class=\"attr\">videoBufferSize</span>: <span class=\"number\">1024</span>*<span class=\"number\">1024</span> &#125;)</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>整体体验效果不错。</p>\n"},{"title":"每个人都背负这一个十字架","toc":false,"date":"2017-10-13T07:09:53.000Z","_content":"\n<!-- more -->\n\n![每个人都背负着一个沉重的十字架](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/%E6%AF%8F%E4%B8%AA%E4%BA%BA%E9%83%BD%E8%83%8C%E8%B4%9F%E7%9D%80%E5%8D%81%E5%AD%97%E6%9E%B6.jpg)\n","source":"_posts/每个人都背负这一个十字架.md","raw":"---\ntitle: 每个人都背负这一个十字架\ntags:\n  - plan\ncategories:\n  - 生活玩乐\ntoc: false\ndate: 2017-10-13 15:09:53\n---\n\n<!-- more -->\n\n![每个人都背负着一个沉重的十字架](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/%E6%AF%8F%E4%B8%AA%E4%BA%BA%E9%83%BD%E8%83%8C%E8%B4%9F%E7%9D%80%E5%8D%81%E5%AD%97%E6%9E%B6.jpg)\n","slug":"每个人都背负这一个十字架","published":1,"updated":"2019-11-07T02:24:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo1o009th5s6ann8w1m6","content":"<a id=\"more\"></a>\n<p><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/%E6%AF%8F%E4%B8%AA%E4%BA%BA%E9%83%BD%E8%83%8C%E8%B4%9F%E7%9D%80%E5%8D%81%E5%AD%97%E6%9E%B6.jpg\" alt=\"每个人都背负着一个沉重的十字架\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/%E6%AF%8F%E4%B8%AA%E4%BA%BA%E9%83%BD%E8%83%8C%E8%B4%9F%E7%9D%80%E5%8D%81%E5%AD%97%E6%9E%B6.jpg\" alt=\"每个人都背负着一个沉重的十字架\"></p>"},{"title":"留不住的心就让他飞吧","toc":false,"date":"2017-10-13T06:22:34.000Z","_content":"\n图片是很久以前存下来的了，看到后放到日志里边\n\n<!-- more -->\n\n![留不住的心就让它飞吧](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/%E7%95%99%E4%B8%8D%E4%BD%8F%E7%9A%84%E5%BF%83%E5%B0%B1%E8%AE%A9%E4%BB%96%E9%A3%9E%E5%90%A7.gif)\n","source":"_posts/留不住的心就让他飞吧.md","raw":"---\ntitle: 留不住的心就让他飞吧\ntags:\n  - plan\ncategories:\n  - 生活玩乐\ntoc: false\ndate: 2017-10-13 14:22:34\n---\n\n图片是很久以前存下来的了，看到后放到日志里边\n\n<!-- more -->\n\n![留不住的心就让它飞吧](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/%E7%95%99%E4%B8%8D%E4%BD%8F%E7%9A%84%E5%BF%83%E5%B0%B1%E8%AE%A9%E4%BB%96%E9%A3%9E%E5%90%A7.gif)\n","slug":"留不住的心就让他飞吧","published":1,"updated":"2019-11-07T02:24:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo1p009wh5s6h2760nsz","content":"<p>图片是很久以前存下来的了，看到后放到日志里边</p>\n<a id=\"more\"></a>\n<p><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/%E7%95%99%E4%B8%8D%E4%BD%8F%E7%9A%84%E5%BF%83%E5%B0%B1%E8%AE%A9%E4%BB%96%E9%A3%9E%E5%90%A7.gif\" alt=\"留不住的心就让它飞吧\"></p>\n","site":{"data":{}},"excerpt":"<p>图片是很久以前存下来的了，看到后放到日志里边</p>","more":"<p><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/%E7%95%99%E4%B8%8D%E4%BD%8F%E7%9A%84%E5%BF%83%E5%B0%B1%E8%AE%A9%E4%BB%96%E9%A3%9E%E5%90%A7.gif\" alt=\"留不住的心就让它飞吧\"></p>"},{"title":"看懂UML类图和时序图","toc":false,"date":"2018-02-02T03:02:11.000Z","_content":"\n这里不会将UML的各种元素都提到，我只想讲讲类图中各个类之间的关系； 能看懂类图中各个类之间的线条、箭头代表什么意思后，也就足够应对 日常的工作和交流； 同时，我们应该能将类图所表达的含义和最终的代码对应起来； 有了这些知识，看后面章节的设计模式结构图就没有什么问题了；\n\n本章所有图形使用Enterprise Architect 9.2来画,所有示例详见根目录下的design_patterns.EAP\n\n## 从一个示例开始\n\n请看以下这个类图，类之间的关系是我们需要关注的：\n\n\n车的类图结构为<<abstract>>，表示车是一个抽象类；\n它有两个继承类：小汽车和自行车；它们之间的关系为实现关系，使用带空心箭头的虚线表示；\n小汽车为与SUV之间也是继承关系，它们之间的关系为泛化关系，使用带空心箭头的实线表示；\n小汽车与发动机之间是组合关系，使用带实心箭头的实线表示；\n学生与班级之间是聚合关系，使用带空心箭头的实线表示；\n学生与身份证之间为关联关系，使用一根实线表示；\n学生上学需要用到自行车，与自行车是一种依赖关系，使用带箭头的虚线表示；\n\n下面我们将介绍这六种关系；\n\n## 类之间的关系\n\n### 泛化关系(generalization)\n\n类的继承结构表现在UML中为：泛化(generalize)与实现(realize)：\n\n继承关系为 is-a的关系；两个对象之间如果可以用 is-a 来表示，就是继承关系：（..是..)\n\neg：自行车是车、猫是动物\n\n泛化关系用一条带空心箭头的直接表示；如下图表示（A继承自B）；\n\neg：汽车在现实中有实现，可用汽车定义具体的对象；汽车与SUV之间为泛化关系；\n\n注：最终代码中，泛化关系表现为继承非抽象类；\n\n### 实现关系(realize)\n\n实现关系用一条带空心箭头的虚线表示；\n\neg：”车”为一个抽象概念，在现实中并无法直接用来定义对象；只有指明具体的子类(汽车还是自行车)，才 可以用来定义对象（”车”这个类在C++中用抽象类表示，在JAVA中有接口这个概念，更容易理解）\n\n注：最终代码中，实现关系表现为继承抽象类；\n\n### 聚合关系(aggregation)\n\n聚合关系用一条带空心菱形箭头的直线表示，如下图表示A聚合到B上，或者说B由A组成；\n\n聚合关系用于表示实体对象之间的关系，表示整体由部分构成的语义；例如一个部门由多个员工组成；\n\n与组合关系不同的是，整体和部分不是强依赖的，即使整体不存在了，部分仍然存在；例如， 部门撤销了，人员不会消失，他们依然存在；\n\n### 组合关系(composition)\n\n组合关系用一条带实心菱形箭头直线表示，如下图表示A组成B，或者B由A组成；\n\n与聚合关系一样，组合关系同样表示整体由部分构成的语义；比如公司由多个部门组成；\n\n但组合关系是一种强依赖的特殊聚合关系，如果整体不存在了，则部分也不存在了；例如， 公司不存在了，部门也将不存在了；\n\n### 关联关系(association)\n\n关联关系是用一条直线表示的；它描述不同类的对象之间的结构关系；它是一种静态关系， 通常与运行状态无关，一般由常识等因素决定的；它一般用来定义对象之间静态的、天然的结构； 所以，关联关系是一种“强关联”的关系；\n\n比如，乘车人和车票之间就是一种关联关系；学生和学校就是一种关联关系；\n\n关联关系默认不强调方向，表示对象间相互知道；如果特别强调方向，如下图，表示A知道B，但 B不知道A；\n\n注：在最终代码中，关联对象通常是以成员变量的形式实现的；\n\n### 依赖关系(dependency)\n\n依赖关系是用一套带箭头的虚线表示的；如下图表示A依赖于B；他描述一个对象在运行期间会用到另一个对象的关系；\n\n与关联关系不同的是，它是一种临时性的关系，通常在运行期间产生，并且随着运行时的变化； 依赖关系也可能发生变化；\n\n显然，依赖也有方向，双向依赖是一种非常糟糕的结构，我们总是应该保持单向依赖，杜绝双向依赖的产生；\n\n注：在最终代码中，依赖关系体现为类构造方法及类方法的传入参数，箭头的指向为调用关系；依赖关系除了临时知道对方外，还是“使用”对方的方法和属性；\n\n## 时序图\n\n为了展示对象之间的交互细节，后续对设计模式解析的章节，都会用到时序图；\n\n时序图（Sequence Diagram）是显示对象之间交互的图，这些对象是按时间顺序排列的。时序图中显示的是参与交互的对象及其对象之间消息交互的顺序。\n\n时序图包括的建模元素主要有：对象（Actor）、生命线（Lifeline）、控制焦点（Focus of control）、消息（Message）等等。\n\n关于时序图，以下这篇文章将概念介绍的比较详细；更多实例应用，参见后续章节模式中的时序图；\n\nhttp://smartlife.blog.51cto.com/1146871/284874\n","source":"_posts/看懂UML类图和时序图.md","raw":"---\ntitle: 看懂UML类图和时序图\ntags:\n  - UML\ncategories:\n  - 项目总结\ntoc: false\ndate: 2018-02-02 11:02:11\n---\n\n这里不会将UML的各种元素都提到，我只想讲讲类图中各个类之间的关系； 能看懂类图中各个类之间的线条、箭头代表什么意思后，也就足够应对 日常的工作和交流； 同时，我们应该能将类图所表达的含义和最终的代码对应起来； 有了这些知识，看后面章节的设计模式结构图就没有什么问题了；\n\n本章所有图形使用Enterprise Architect 9.2来画,所有示例详见根目录下的design_patterns.EAP\n\n## 从一个示例开始\n\n请看以下这个类图，类之间的关系是我们需要关注的：\n\n\n车的类图结构为<<abstract>>，表示车是一个抽象类；\n它有两个继承类：小汽车和自行车；它们之间的关系为实现关系，使用带空心箭头的虚线表示；\n小汽车为与SUV之间也是继承关系，它们之间的关系为泛化关系，使用带空心箭头的实线表示；\n小汽车与发动机之间是组合关系，使用带实心箭头的实线表示；\n学生与班级之间是聚合关系，使用带空心箭头的实线表示；\n学生与身份证之间为关联关系，使用一根实线表示；\n学生上学需要用到自行车，与自行车是一种依赖关系，使用带箭头的虚线表示；\n\n下面我们将介绍这六种关系；\n\n## 类之间的关系\n\n### 泛化关系(generalization)\n\n类的继承结构表现在UML中为：泛化(generalize)与实现(realize)：\n\n继承关系为 is-a的关系；两个对象之间如果可以用 is-a 来表示，就是继承关系：（..是..)\n\neg：自行车是车、猫是动物\n\n泛化关系用一条带空心箭头的直接表示；如下图表示（A继承自B）；\n\neg：汽车在现实中有实现，可用汽车定义具体的对象；汽车与SUV之间为泛化关系；\n\n注：最终代码中，泛化关系表现为继承非抽象类；\n\n### 实现关系(realize)\n\n实现关系用一条带空心箭头的虚线表示；\n\neg：”车”为一个抽象概念，在现实中并无法直接用来定义对象；只有指明具体的子类(汽车还是自行车)，才 可以用来定义对象（”车”这个类在C++中用抽象类表示，在JAVA中有接口这个概念，更容易理解）\n\n注：最终代码中，实现关系表现为继承抽象类；\n\n### 聚合关系(aggregation)\n\n聚合关系用一条带空心菱形箭头的直线表示，如下图表示A聚合到B上，或者说B由A组成；\n\n聚合关系用于表示实体对象之间的关系，表示整体由部分构成的语义；例如一个部门由多个员工组成；\n\n与组合关系不同的是，整体和部分不是强依赖的，即使整体不存在了，部分仍然存在；例如， 部门撤销了，人员不会消失，他们依然存在；\n\n### 组合关系(composition)\n\n组合关系用一条带实心菱形箭头直线表示，如下图表示A组成B，或者B由A组成；\n\n与聚合关系一样，组合关系同样表示整体由部分构成的语义；比如公司由多个部门组成；\n\n但组合关系是一种强依赖的特殊聚合关系，如果整体不存在了，则部分也不存在了；例如， 公司不存在了，部门也将不存在了；\n\n### 关联关系(association)\n\n关联关系是用一条直线表示的；它描述不同类的对象之间的结构关系；它是一种静态关系， 通常与运行状态无关，一般由常识等因素决定的；它一般用来定义对象之间静态的、天然的结构； 所以，关联关系是一种“强关联”的关系；\n\n比如，乘车人和车票之间就是一种关联关系；学生和学校就是一种关联关系；\n\n关联关系默认不强调方向，表示对象间相互知道；如果特别强调方向，如下图，表示A知道B，但 B不知道A；\n\n注：在最终代码中，关联对象通常是以成员变量的形式实现的；\n\n### 依赖关系(dependency)\n\n依赖关系是用一套带箭头的虚线表示的；如下图表示A依赖于B；他描述一个对象在运行期间会用到另一个对象的关系；\n\n与关联关系不同的是，它是一种临时性的关系，通常在运行期间产生，并且随着运行时的变化； 依赖关系也可能发生变化；\n\n显然，依赖也有方向，双向依赖是一种非常糟糕的结构，我们总是应该保持单向依赖，杜绝双向依赖的产生；\n\n注：在最终代码中，依赖关系体现为类构造方法及类方法的传入参数，箭头的指向为调用关系；依赖关系除了临时知道对方外，还是“使用”对方的方法和属性；\n\n## 时序图\n\n为了展示对象之间的交互细节，后续对设计模式解析的章节，都会用到时序图；\n\n时序图（Sequence Diagram）是显示对象之间交互的图，这些对象是按时间顺序排列的。时序图中显示的是参与交互的对象及其对象之间消息交互的顺序。\n\n时序图包括的建模元素主要有：对象（Actor）、生命线（Lifeline）、控制焦点（Focus of control）、消息（Message）等等。\n\n关于时序图，以下这篇文章将概念介绍的比较详细；更多实例应用，参见后续章节模式中的时序图；\n\nhttp://smartlife.blog.51cto.com/1146871/284874\n","slug":"看懂UML类图和时序图","published":1,"updated":"2019-11-07T02:24:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo1q009zh5s634a2p787","content":"<p>这里不会将UML的各种元素都提到，我只想讲讲类图中各个类之间的关系； 能看懂类图中各个类之间的线条、箭头代表什么意思后，也就足够应对 日常的工作和交流； 同时，我们应该能将类图所表达的含义和最终的代码对应起来； 有了这些知识，看后面章节的设计模式结构图就没有什么问题了；</p>\n<p>本章所有图形使用Enterprise Architect 9.2来画,所有示例详见根目录下的design_patterns.EAP</p>\n<h2 id=\"从一个示例开始\"><a href=\"#从一个示例开始\" class=\"headerlink\" title=\"从一个示例开始\"></a>从一个示例开始</h2><p>请看以下这个类图，类之间的关系是我们需要关注的：</p>\n<p>车的类图结构为&lt;<abstract>&gt;，表示车是一个抽象类；<br>它有两个继承类：小汽车和自行车；它们之间的关系为实现关系，使用带空心箭头的虚线表示；<br>小汽车为与SUV之间也是继承关系，它们之间的关系为泛化关系，使用带空心箭头的实线表示；<br>小汽车与发动机之间是组合关系，使用带实心箭头的实线表示；<br>学生与班级之间是聚合关系，使用带空心箭头的实线表示；<br>学生与身份证之间为关联关系，使用一根实线表示；<br>学生上学需要用到自行车，与自行车是一种依赖关系，使用带箭头的虚线表示；</abstract></p>\n<p>下面我们将介绍这六种关系；</p>\n<h2 id=\"类之间的关系\"><a href=\"#类之间的关系\" class=\"headerlink\" title=\"类之间的关系\"></a>类之间的关系</h2><h3 id=\"泛化关系-generalization\"><a href=\"#泛化关系-generalization\" class=\"headerlink\" title=\"泛化关系(generalization)\"></a>泛化关系(generalization)</h3><p>类的继承结构表现在UML中为：泛化(generalize)与实现(realize)：</p>\n<p>继承关系为 is-a的关系；两个对象之间如果可以用 is-a 来表示，就是继承关系：（..是..)</p>\n<p>eg：自行车是车、猫是动物</p>\n<p>泛化关系用一条带空心箭头的直接表示；如下图表示（A继承自B）；</p>\n<p>eg：汽车在现实中有实现，可用汽车定义具体的对象；汽车与SUV之间为泛化关系；</p>\n<p>注：最终代码中，泛化关系表现为继承非抽象类；</p>\n<h3 id=\"实现关系-realize\"><a href=\"#实现关系-realize\" class=\"headerlink\" title=\"实现关系(realize)\"></a>实现关系(realize)</h3><p>实现关系用一条带空心箭头的虚线表示；</p>\n<p>eg：”车”为一个抽象概念，在现实中并无法直接用来定义对象；只有指明具体的子类(汽车还是自行车)，才 可以用来定义对象（”车”这个类在C++中用抽象类表示，在JAVA中有接口这个概念，更容易理解）</p>\n<p>注：最终代码中，实现关系表现为继承抽象类；</p>\n<h3 id=\"聚合关系-aggregation\"><a href=\"#聚合关系-aggregation\" class=\"headerlink\" title=\"聚合关系(aggregation)\"></a>聚合关系(aggregation)</h3><p>聚合关系用一条带空心菱形箭头的直线表示，如下图表示A聚合到B上，或者说B由A组成；</p>\n<p>聚合关系用于表示实体对象之间的关系，表示整体由部分构成的语义；例如一个部门由多个员工组成；</p>\n<p>与组合关系不同的是，整体和部分不是强依赖的，即使整体不存在了，部分仍然存在；例如， 部门撤销了，人员不会消失，他们依然存在；</p>\n<h3 id=\"组合关系-composition\"><a href=\"#组合关系-composition\" class=\"headerlink\" title=\"组合关系(composition)\"></a>组合关系(composition)</h3><p>组合关系用一条带实心菱形箭头直线表示，如下图表示A组成B，或者B由A组成；</p>\n<p>与聚合关系一样，组合关系同样表示整体由部分构成的语义；比如公司由多个部门组成；</p>\n<p>但组合关系是一种强依赖的特殊聚合关系，如果整体不存在了，则部分也不存在了；例如， 公司不存在了，部门也将不存在了；</p>\n<h3 id=\"关联关系-association\"><a href=\"#关联关系-association\" class=\"headerlink\" title=\"关联关系(association)\"></a>关联关系(association)</h3><p>关联关系是用一条直线表示的；它描述不同类的对象之间的结构关系；它是一种静态关系， 通常与运行状态无关，一般由常识等因素决定的；它一般用来定义对象之间静态的、天然的结构； 所以，关联关系是一种“强关联”的关系；</p>\n<p>比如，乘车人和车票之间就是一种关联关系；学生和学校就是一种关联关系；</p>\n<p>关联关系默认不强调方向，表示对象间相互知道；如果特别强调方向，如下图，表示A知道B，但 B不知道A；</p>\n<p>注：在最终代码中，关联对象通常是以成员变量的形式实现的；</p>\n<h3 id=\"依赖关系-dependency\"><a href=\"#依赖关系-dependency\" class=\"headerlink\" title=\"依赖关系(dependency)\"></a>依赖关系(dependency)</h3><p>依赖关系是用一套带箭头的虚线表示的；如下图表示A依赖于B；他描述一个对象在运行期间会用到另一个对象的关系；</p>\n<p>与关联关系不同的是，它是一种临时性的关系，通常在运行期间产生，并且随着运行时的变化； 依赖关系也可能发生变化；</p>\n<p>显然，依赖也有方向，双向依赖是一种非常糟糕的结构，我们总是应该保持单向依赖，杜绝双向依赖的产生；</p>\n<p>注：在最终代码中，依赖关系体现为类构造方法及类方法的传入参数，箭头的指向为调用关系；依赖关系除了临时知道对方外，还是“使用”对方的方法和属性；</p>\n<h2 id=\"时序图\"><a href=\"#时序图\" class=\"headerlink\" title=\"时序图\"></a>时序图</h2><p>为了展示对象之间的交互细节，后续对设计模式解析的章节，都会用到时序图；</p>\n<p>时序图（Sequence Diagram）是显示对象之间交互的图，这些对象是按时间顺序排列的。时序图中显示的是参与交互的对象及其对象之间消息交互的顺序。</p>\n<p>时序图包括的建模元素主要有：对象（Actor）、生命线（Lifeline）、控制焦点（Focus of control）、消息（Message）等等。</p>\n<p>关于时序图，以下这篇文章将概念介绍的比较详细；更多实例应用，参见后续章节模式中的时序图；</p>\n<p><a href=\"http://smartlife.blog.51cto.com/1146871/284874\" target=\"_blank\" rel=\"noopener\">http://smartlife.blog.51cto.com/1146871/284874</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>这里不会将UML的各种元素都提到，我只想讲讲类图中各个类之间的关系； 能看懂类图中各个类之间的线条、箭头代表什么意思后，也就足够应对 日常的工作和交流； 同时，我们应该能将类图所表达的含义和最终的代码对应起来； 有了这些知识，看后面章节的设计模式结构图就没有什么问题了；</p>\n<p>本章所有图形使用Enterprise Architect 9.2来画,所有示例详见根目录下的design_patterns.EAP</p>\n<h2 id=\"从一个示例开始\"><a href=\"#从一个示例开始\" class=\"headerlink\" title=\"从一个示例开始\"></a>从一个示例开始</h2><p>请看以下这个类图，类之间的关系是我们需要关注的：</p>\n<p>车的类图结构为&lt;<abstract>&gt;，表示车是一个抽象类；<br>它有两个继承类：小汽车和自行车；它们之间的关系为实现关系，使用带空心箭头的虚线表示；<br>小汽车为与SUV之间也是继承关系，它们之间的关系为泛化关系，使用带空心箭头的实线表示；<br>小汽车与发动机之间是组合关系，使用带实心箭头的实线表示；<br>学生与班级之间是聚合关系，使用带空心箭头的实线表示；<br>学生与身份证之间为关联关系，使用一根实线表示；<br>学生上学需要用到自行车，与自行车是一种依赖关系，使用带箭头的虚线表示；</abstract></p>\n<p>下面我们将介绍这六种关系；</p>\n<h2 id=\"类之间的关系\"><a href=\"#类之间的关系\" class=\"headerlink\" title=\"类之间的关系\"></a>类之间的关系</h2><h3 id=\"泛化关系-generalization\"><a href=\"#泛化关系-generalization\" class=\"headerlink\" title=\"泛化关系(generalization)\"></a>泛化关系(generalization)</h3><p>类的继承结构表现在UML中为：泛化(generalize)与实现(realize)：</p>\n<p>继承关系为 is-a的关系；两个对象之间如果可以用 is-a 来表示，就是继承关系：（..是..)</p>\n<p>eg：自行车是车、猫是动物</p>\n<p>泛化关系用一条带空心箭头的直接表示；如下图表示（A继承自B）；</p>\n<p>eg：汽车在现实中有实现，可用汽车定义具体的对象；汽车与SUV之间为泛化关系；</p>\n<p>注：最终代码中，泛化关系表现为继承非抽象类；</p>\n<h3 id=\"实现关系-realize\"><a href=\"#实现关系-realize\" class=\"headerlink\" title=\"实现关系(realize)\"></a>实现关系(realize)</h3><p>实现关系用一条带空心箭头的虚线表示；</p>\n<p>eg：”车”为一个抽象概念，在现实中并无法直接用来定义对象；只有指明具体的子类(汽车还是自行车)，才 可以用来定义对象（”车”这个类在C++中用抽象类表示，在JAVA中有接口这个概念，更容易理解）</p>\n<p>注：最终代码中，实现关系表现为继承抽象类；</p>\n<h3 id=\"聚合关系-aggregation\"><a href=\"#聚合关系-aggregation\" class=\"headerlink\" title=\"聚合关系(aggregation)\"></a>聚合关系(aggregation)</h3><p>聚合关系用一条带空心菱形箭头的直线表示，如下图表示A聚合到B上，或者说B由A组成；</p>\n<p>聚合关系用于表示实体对象之间的关系，表示整体由部分构成的语义；例如一个部门由多个员工组成；</p>\n<p>与组合关系不同的是，整体和部分不是强依赖的，即使整体不存在了，部分仍然存在；例如， 部门撤销了，人员不会消失，他们依然存在；</p>\n<h3 id=\"组合关系-composition\"><a href=\"#组合关系-composition\" class=\"headerlink\" title=\"组合关系(composition)\"></a>组合关系(composition)</h3><p>组合关系用一条带实心菱形箭头直线表示，如下图表示A组成B，或者B由A组成；</p>\n<p>与聚合关系一样，组合关系同样表示整体由部分构成的语义；比如公司由多个部门组成；</p>\n<p>但组合关系是一种强依赖的特殊聚合关系，如果整体不存在了，则部分也不存在了；例如， 公司不存在了，部门也将不存在了；</p>\n<h3 id=\"关联关系-association\"><a href=\"#关联关系-association\" class=\"headerlink\" title=\"关联关系(association)\"></a>关联关系(association)</h3><p>关联关系是用一条直线表示的；它描述不同类的对象之间的结构关系；它是一种静态关系， 通常与运行状态无关，一般由常识等因素决定的；它一般用来定义对象之间静态的、天然的结构； 所以，关联关系是一种“强关联”的关系；</p>\n<p>比如，乘车人和车票之间就是一种关联关系；学生和学校就是一种关联关系；</p>\n<p>关联关系默认不强调方向，表示对象间相互知道；如果特别强调方向，如下图，表示A知道B，但 B不知道A；</p>\n<p>注：在最终代码中，关联对象通常是以成员变量的形式实现的；</p>\n<h3 id=\"依赖关系-dependency\"><a href=\"#依赖关系-dependency\" class=\"headerlink\" title=\"依赖关系(dependency)\"></a>依赖关系(dependency)</h3><p>依赖关系是用一套带箭头的虚线表示的；如下图表示A依赖于B；他描述一个对象在运行期间会用到另一个对象的关系；</p>\n<p>与关联关系不同的是，它是一种临时性的关系，通常在运行期间产生，并且随着运行时的变化； 依赖关系也可能发生变化；</p>\n<p>显然，依赖也有方向，双向依赖是一种非常糟糕的结构，我们总是应该保持单向依赖，杜绝双向依赖的产生；</p>\n<p>注：在最终代码中，依赖关系体现为类构造方法及类方法的传入参数，箭头的指向为调用关系；依赖关系除了临时知道对方外，还是“使用”对方的方法和属性；</p>\n<h2 id=\"时序图\"><a href=\"#时序图\" class=\"headerlink\" title=\"时序图\"></a>时序图</h2><p>为了展示对象之间的交互细节，后续对设计模式解析的章节，都会用到时序图；</p>\n<p>时序图（Sequence Diagram）是显示对象之间交互的图，这些对象是按时间顺序排列的。时序图中显示的是参与交互的对象及其对象之间消息交互的顺序。</p>\n<p>时序图包括的建模元素主要有：对象（Actor）、生命线（Lifeline）、控制焦点（Focus of control）、消息（Message）等等。</p>\n<p>关于时序图，以下这篇文章将概念介绍的比较详细；更多实例应用，参见后续章节模式中的时序图；</p>\n<p><a href=\"http://smartlife.blog.51cto.com/1146871/284874\" target=\"_blank\" rel=\"noopener\">http://smartlife.blog.51cto.com/1146871/284874</a></p>\n"},{"title":"科学上网配置服务器","toc":false,"date":"2019-03-26T02:00:05.000Z","_content":"\n说实话，很多优秀的技术和知识在谷歌上是很方便能找到的，不像国内一堆广告，需要自己去筛选。而作为一名开发，能够上外网学习先进的技术也是必不可少的技能。老实说，国内这种一棒子打死的做法只能体现相关安全部门的无能与懒惰，做法简单粗暴，完全不考虑好的一面会给人们带来的益处。牢骚发完了，记录下自己的使用方式，仅作为自己的一个备忘吧：\n1. 租用国外的一台服务器\n\n阿里云是不能用了，于是找了这个网站，还好可以用，没准哪天就也不能用了，所以充值就冲最少的就行了：[vultr](https://www.vultr.com/?ref=7961451)，你点了这个链接如果充值以后我也会得到奖励，如果你不想让我得到奖励，可以自己输入：https://www.vultr.com/ 访问即可。注册的时候使用复杂密码。\n\n<!-- more -->\n\n![image.png](http://blogimage.houjiyi.com/FiB0SYxaRCxxQ_GWDeZ6ChvRX9RZ)\n\n2. 充值\n你可以再Billing页面充值，支付宝、微信都行\n\n![image.png](http://blogimage.houjiyi.com/FrFyod4349QblRSxW75g8iRuXIsf)\n\n3. 购买服务器\n\n选择一个服务器，具体步骤就不介绍了，作为开发应该能看懂，如果发现不能用就换一个，很容易换，我选的Atlanta可用\n![image.png](http://blogimage.houjiyi.com/Ft1qKm4_Obnf21ZOTsjmrlV2GoUD)\n\n![image.png](http://blogimage.houjiyi.com/FgvAGi2GSemQ9gY7x4ZfoEkHouXf)\n\n![image.png](http://blogimage.houjiyi.com/FpcnRGdppmnfiqb9kz_eqyVuh91y)\n\n如果ssh不同，就删掉换一个地区，再试，有的ip确实通不了，也就意味着不能用，换了几个才能用\n\n![image.png](http://blogimage.houjiyi.com/FqS7p3_ylb2y3v2QK73LM0psuHfA)\n\n![image.png](http://blogimage.houjiyi.com/FlAY42WbPn8K8_aAfk8YyhjUnSFP)\n\n4. 登录服务器，安装ss\n\n然后你可以看到自己的服务器ip和密码，用终端登进去安装ss即可\n![image.png](http://blogimage.houjiyi.com/FppJvj7X6ie0YMopy_nwR4P1LfQd)\n\n5. 自动一键安装SS\n在绿色光标处中输入以下命令：\n\n```bash\nwget --no-check-certificate -O shadowsocks.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh\nchmod +x shadowsocks.sh\n./shadowsocks.sh\n```\n\n \n\n按照下图输入SS的密码，端口和加密方式，加密方式我这里选择的是“7”如图，按照步骤来即可\n\n![image.png](http://blogimage.houjiyi.com/Fg3-wB1aMkUikGN1tN6-M9-FBeGN)\n\n安装可能需要时间，大家不必心急，耐心等待，等安装成功就会显示你SS的所有信息，电脑上安装ss工具，在工具里填写好配置信息就可以科学上网了\n![image.png](http://blogimage.houjiyi.com/FjSeAus6rjuNJvRVJOs50_pgauTn)\n\n![image.png](http://blogimage.houjiyi.com/Fmw6ZzZhsrI-iDZxNJjoC2d6WEU6)\n\n最后加一句吧：仅供学习使用\n参考：[https://www.vultrblog.com/vultr-ss.html](https://www.vultrblog.com/vultr-ss.html)\n","source":"_posts/科学上网配置服务器.md","raw":"---\ntitle: 科学上网配置服务器\ntags:\n  - 科学上网\ncategories:\n  - 项目总结\ntoc: false\ndate: 2019-03-26 10:00:05\n---\n\n说实话，很多优秀的技术和知识在谷歌上是很方便能找到的，不像国内一堆广告，需要自己去筛选。而作为一名开发，能够上外网学习先进的技术也是必不可少的技能。老实说，国内这种一棒子打死的做法只能体现相关安全部门的无能与懒惰，做法简单粗暴，完全不考虑好的一面会给人们带来的益处。牢骚发完了，记录下自己的使用方式，仅作为自己的一个备忘吧：\n1. 租用国外的一台服务器\n\n阿里云是不能用了，于是找了这个网站，还好可以用，没准哪天就也不能用了，所以充值就冲最少的就行了：[vultr](https://www.vultr.com/?ref=7961451)，你点了这个链接如果充值以后我也会得到奖励，如果你不想让我得到奖励，可以自己输入：https://www.vultr.com/ 访问即可。注册的时候使用复杂密码。\n\n<!-- more -->\n\n![image.png](http://blogimage.houjiyi.com/FiB0SYxaRCxxQ_GWDeZ6ChvRX9RZ)\n\n2. 充值\n你可以再Billing页面充值，支付宝、微信都行\n\n![image.png](http://blogimage.houjiyi.com/FrFyod4349QblRSxW75g8iRuXIsf)\n\n3. 购买服务器\n\n选择一个服务器，具体步骤就不介绍了，作为开发应该能看懂，如果发现不能用就换一个，很容易换，我选的Atlanta可用\n![image.png](http://blogimage.houjiyi.com/Ft1qKm4_Obnf21ZOTsjmrlV2GoUD)\n\n![image.png](http://blogimage.houjiyi.com/FgvAGi2GSemQ9gY7x4ZfoEkHouXf)\n\n![image.png](http://blogimage.houjiyi.com/FpcnRGdppmnfiqb9kz_eqyVuh91y)\n\n如果ssh不同，就删掉换一个地区，再试，有的ip确实通不了，也就意味着不能用，换了几个才能用\n\n![image.png](http://blogimage.houjiyi.com/FqS7p3_ylb2y3v2QK73LM0psuHfA)\n\n![image.png](http://blogimage.houjiyi.com/FlAY42WbPn8K8_aAfk8YyhjUnSFP)\n\n4. 登录服务器，安装ss\n\n然后你可以看到自己的服务器ip和密码，用终端登进去安装ss即可\n![image.png](http://blogimage.houjiyi.com/FppJvj7X6ie0YMopy_nwR4P1LfQd)\n\n5. 自动一键安装SS\n在绿色光标处中输入以下命令：\n\n```bash\nwget --no-check-certificate -O shadowsocks.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh\nchmod +x shadowsocks.sh\n./shadowsocks.sh\n```\n\n \n\n按照下图输入SS的密码，端口和加密方式，加密方式我这里选择的是“7”如图，按照步骤来即可\n\n![image.png](http://blogimage.houjiyi.com/Fg3-wB1aMkUikGN1tN6-M9-FBeGN)\n\n安装可能需要时间，大家不必心急，耐心等待，等安装成功就会显示你SS的所有信息，电脑上安装ss工具，在工具里填写好配置信息就可以科学上网了\n![image.png](http://blogimage.houjiyi.com/FjSeAus6rjuNJvRVJOs50_pgauTn)\n\n![image.png](http://blogimage.houjiyi.com/Fmw6ZzZhsrI-iDZxNJjoC2d6WEU6)\n\n最后加一句吧：仅供学习使用\n参考：[https://www.vultrblog.com/vultr-ss.html](https://www.vultrblog.com/vultr-ss.html)\n","slug":"科学上网配置服务器","published":1,"updated":"2019-11-07T02:24:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo1s00a3h5s6aohorqj8","content":"<p>说实话，很多优秀的技术和知识在谷歌上是很方便能找到的，不像国内一堆广告，需要自己去筛选。而作为一名开发，能够上外网学习先进的技术也是必不可少的技能。老实说，国内这种一棒子打死的做法只能体现相关安全部门的无能与懒惰，做法简单粗暴，完全不考虑好的一面会给人们带来的益处。牢骚发完了，记录下自己的使用方式，仅作为自己的一个备忘吧：</p>\n<ol>\n<li>租用国外的一台服务器</li>\n</ol>\n<p>阿里云是不能用了，于是找了这个网站，还好可以用，没准哪天就也不能用了，所以充值就冲最少的就行了：<a href=\"https://www.vultr.com/?ref=7961451\" target=\"_blank\" rel=\"noopener\">vultr</a>，你点了这个链接如果充值以后我也会得到奖励，如果你不想让我得到奖励，可以自己输入：<a href=\"https://www.vultr.com/\" target=\"_blank\" rel=\"noopener\">https://www.vultr.com/</a> 访问即可。注册的时候使用复杂密码。</p>\n<a id=\"more\"></a>\n<p><img src=\"http://blogimage.houjiyi.com/FiB0SYxaRCxxQ_GWDeZ6ChvRX9RZ\" alt=\"image.png\"></p>\n<ol start=\"2\">\n<li>充值<br>你可以再Billing页面充值，支付宝、微信都行</li>\n</ol>\n<p><img src=\"http://blogimage.houjiyi.com/FrFyod4349QblRSxW75g8iRuXIsf\" alt=\"image.png\"></p>\n<ol start=\"3\">\n<li>购买服务器</li>\n</ol>\n<p>选择一个服务器，具体步骤就不介绍了，作为开发应该能看懂，如果发现不能用就换一个，很容易换，我选的Atlanta可用<br><img src=\"http://blogimage.houjiyi.com/Ft1qKm4_Obnf21ZOTsjmrlV2GoUD\" alt=\"image.png\"></p>\n<p><img src=\"http://blogimage.houjiyi.com/FgvAGi2GSemQ9gY7x4ZfoEkHouXf\" alt=\"image.png\"></p>\n<p><img src=\"http://blogimage.houjiyi.com/FpcnRGdppmnfiqb9kz_eqyVuh91y\" alt=\"image.png\"></p>\n<p>如果ssh不同，就删掉换一个地区，再试，有的ip确实通不了，也就意味着不能用，换了几个才能用</p>\n<p><img src=\"http://blogimage.houjiyi.com/FqS7p3_ylb2y3v2QK73LM0psuHfA\" alt=\"image.png\"></p>\n<p><img src=\"http://blogimage.houjiyi.com/FlAY42WbPn8K8_aAfk8YyhjUnSFP\" alt=\"image.png\"></p>\n<ol start=\"4\">\n<li>登录服务器，安装ss</li>\n</ol>\n<p>然后你可以看到自己的服务器ip和密码，用终端登进去安装ss即可<br><img src=\"http://blogimage.houjiyi.com/FppJvj7X6ie0YMopy_nwR4P1LfQd\" alt=\"image.png\"></p>\n<ol start=\"5\">\n<li>自动一键安装SS<br>在绿色光标处中输入以下命令：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate -O shadowsocks.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh</span><br><span class=\"line\">chmod +x shadowsocks.sh</span><br><span class=\"line\">./shadowsocks.sh</span><br></pre></td></tr></table></figure>\n<p>按照下图输入SS的密码，端口和加密方式，加密方式我这里选择的是“7”如图，按照步骤来即可</p>\n<p><img src=\"http://blogimage.houjiyi.com/Fg3-wB1aMkUikGN1tN6-M9-FBeGN\" alt=\"image.png\"></p>\n<p>安装可能需要时间，大家不必心急，耐心等待，等安装成功就会显示你SS的所有信息，电脑上安装ss工具，在工具里填写好配置信息就可以科学上网了<br><img src=\"http://blogimage.houjiyi.com/FjSeAus6rjuNJvRVJOs50_pgauTn\" alt=\"image.png\"></p>\n<p><img src=\"http://blogimage.houjiyi.com/Fmw6ZzZhsrI-iDZxNJjoC2d6WEU6\" alt=\"image.png\"></p>\n<p>最后加一句吧：仅供学习使用<br>参考：<a href=\"https://www.vultrblog.com/vultr-ss.html\" target=\"_blank\" rel=\"noopener\">https://www.vultrblog.com/vultr-ss.html</a></p>\n","site":{"data":{}},"excerpt":"<p>说实话，很多优秀的技术和知识在谷歌上是很方便能找到的，不像国内一堆广告，需要自己去筛选。而作为一名开发，能够上外网学习先进的技术也是必不可少的技能。老实说，国内这种一棒子打死的做法只能体现相关安全部门的无能与懒惰，做法简单粗暴，完全不考虑好的一面会给人们带来的益处。牢骚发完了，记录下自己的使用方式，仅作为自己的一个备忘吧：</p>\n<ol>\n<li>租用国外的一台服务器</li>\n</ol>\n<p>阿里云是不能用了，于是找了这个网站，还好可以用，没准哪天就也不能用了，所以充值就冲最少的就行了：<a href=\"https://www.vultr.com/?ref=7961451\" target=\"_blank\" rel=\"noopener\">vultr</a>，你点了这个链接如果充值以后我也会得到奖励，如果你不想让我得到奖励，可以自己输入：<a href=\"https://www.vultr.com/\" target=\"_blank\" rel=\"noopener\">https://www.vultr.com/</a> 访问即可。注册的时候使用复杂密码。</p>","more":"<p><img src=\"http://blogimage.houjiyi.com/FiB0SYxaRCxxQ_GWDeZ6ChvRX9RZ\" alt=\"image.png\"></p>\n<ol start=\"2\">\n<li>充值<br>你可以再Billing页面充值，支付宝、微信都行</li>\n</ol>\n<p><img src=\"http://blogimage.houjiyi.com/FrFyod4349QblRSxW75g8iRuXIsf\" alt=\"image.png\"></p>\n<ol start=\"3\">\n<li>购买服务器</li>\n</ol>\n<p>选择一个服务器，具体步骤就不介绍了，作为开发应该能看懂，如果发现不能用就换一个，很容易换，我选的Atlanta可用<br><img src=\"http://blogimage.houjiyi.com/Ft1qKm4_Obnf21ZOTsjmrlV2GoUD\" alt=\"image.png\"></p>\n<p><img src=\"http://blogimage.houjiyi.com/FgvAGi2GSemQ9gY7x4ZfoEkHouXf\" alt=\"image.png\"></p>\n<p><img src=\"http://blogimage.houjiyi.com/FpcnRGdppmnfiqb9kz_eqyVuh91y\" alt=\"image.png\"></p>\n<p>如果ssh不同，就删掉换一个地区，再试，有的ip确实通不了，也就意味着不能用，换了几个才能用</p>\n<p><img src=\"http://blogimage.houjiyi.com/FqS7p3_ylb2y3v2QK73LM0psuHfA\" alt=\"image.png\"></p>\n<p><img src=\"http://blogimage.houjiyi.com/FlAY42WbPn8K8_aAfk8YyhjUnSFP\" alt=\"image.png\"></p>\n<ol start=\"4\">\n<li>登录服务器，安装ss</li>\n</ol>\n<p>然后你可以看到自己的服务器ip和密码，用终端登进去安装ss即可<br><img src=\"http://blogimage.houjiyi.com/FppJvj7X6ie0YMopy_nwR4P1LfQd\" alt=\"image.png\"></p>\n<ol start=\"5\">\n<li>自动一键安装SS<br>在绿色光标处中输入以下命令：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate -O shadowsocks.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh</span><br><span class=\"line\">chmod +x shadowsocks.sh</span><br><span class=\"line\">./shadowsocks.sh</span><br></pre></td></tr></table></figure>\n<p>按照下图输入SS的密码，端口和加密方式，加密方式我这里选择的是“7”如图，按照步骤来即可</p>\n<p><img src=\"http://blogimage.houjiyi.com/Fg3-wB1aMkUikGN1tN6-M9-FBeGN\" alt=\"image.png\"></p>\n<p>安装可能需要时间，大家不必心急，耐心等待，等安装成功就会显示你SS的所有信息，电脑上安装ss工具，在工具里填写好配置信息就可以科学上网了<br><img src=\"http://blogimage.houjiyi.com/FjSeAus6rjuNJvRVJOs50_pgauTn\" alt=\"image.png\"></p>\n<p><img src=\"http://blogimage.houjiyi.com/Fmw6ZzZhsrI-iDZxNJjoC2d6WEU6\" alt=\"image.png\"></p>\n<p>最后加一句吧：仅供学习使用<br>参考：<a href=\"https://www.vultrblog.com/vultr-ss.html\" target=\"_blank\" rel=\"noopener\">https://www.vultrblog.com/vultr-ss.html</a></p>"},{"title":"移动端开发调试工具神器--Weinre使用方法","toc":false,"date":"2018-04-17T06:06:56.000Z","_content":"\n前端开发调试必备：\n\n1. DOM操作断点调试；\n2. debugger断点调试；\n3. native方法hook（个人暂时还没有试过，不知效果如何）；\n4. 远程映射本地测试；\n5. Weinre移动调试（详细介绍）；\n\n像Dom断点调试和debugger断点调试我认为是大家经常用到的方法，或者是当前比较火狐下比较流行的Fiexbug调试工具；今天我们主要是研究Weinre调试工具的；\n\n当然，作为前端开发人员，令人比较乏味的即使手机端各个版本的支持程度，例如就拿iphone来说，虽然都是-webkit内核，如果你添加的动画，如-webkit-translate.......当然考虑到兼容性问题，你会带上前缀-webkit，但你本想手机端大多是支持HTML5和css3的，所以就试下了不带前缀-webkit，结果，呵呵，那么问题来了，iphone5s以下会有问题，以上就没有问题，所以你懂得，最好加上前缀-webkit，不过像最近比较新的版本的Andirod对CSS3的属性支持度还是不错的；\n\n接下来，我们介绍下重点：\n\n安装weinre\n\nweinre可以通过npm按照（个人也是比较推荐的）\n\n```\nnpm install -g weinre  (按照完成后，可以在cmd上，查看下版本号，看是否按照成功)\n```\n\n按照之后，可以执行下面的命令来启动：\n\n```\nweinre --httpPort 8080 --boundHost -all-\n```\n\nok!如果没有什么问题的话，我们打开谷歌浏览器（-webkit内核）输入：http://127.0.0.1:8080/   会看到以下界面\n\n以上这个便是庐山正面目了，上图的“debug client user interface”是weinre的Debug客户端，点击进入后看到目前还没有被测试的网页：\n\nTargets显示的none\n\nOK!那么我们继续，添加Debug Target\n\n有两种方式：\n\n1. Target Script（需要向页面中添加一个js）：\n\n```\n<script src=\"http://192.168.1.69:8080/target/target-script-min.js#anonymous\" type=\"text/javascript\"></script>\n```\n\n注意：标红的部分是你自己的IP地址和端口号，自己适配去调；\n\n2. 我们也可以将一段js保存到移动设备的书签中\njavascript:(function(e){e.setAttribute(\"src\",\"http://127.0.0.1:8080/target/target-script-min.js#anonymous\");document.getElementsByTagName(\"body\")[0].appendChild(e);})(document.createElement(\"script\"));void(0);\n\n\n最后：手机测试：\n1. 手机连接Wifi,必须和电脑在同一段网络，我用的是XAMPP模拟服务器，大家可以上网查用法，然后用自己的手机测试你要测试的网页即可；\n现在回到电脑端  http://127.0.0.1:8080    点击“debug client user interface:”  如果没有问题的话，就已经成功添加了Debug Target:\n\n提示：注意手机不要锁屏，不然调试会断开！\n\n2. 调试开始：\n\n自己可以查查各个组件！\n","source":"_posts/移动端开发调试工具神器-Weinre使用方法.md","raw":"---\ntitle: 移动端开发调试工具神器--Weinre使用方法\ntags:\n  - 开发调试\ncategories:\n  - H5开发\ntoc: false\ndate: 2018-04-17 14:06:56\n---\n\n前端开发调试必备：\n\n1. DOM操作断点调试；\n2. debugger断点调试；\n3. native方法hook（个人暂时还没有试过，不知效果如何）；\n4. 远程映射本地测试；\n5. Weinre移动调试（详细介绍）；\n\n像Dom断点调试和debugger断点调试我认为是大家经常用到的方法，或者是当前比较火狐下比较流行的Fiexbug调试工具；今天我们主要是研究Weinre调试工具的；\n\n当然，作为前端开发人员，令人比较乏味的即使手机端各个版本的支持程度，例如就拿iphone来说，虽然都是-webkit内核，如果你添加的动画，如-webkit-translate.......当然考虑到兼容性问题，你会带上前缀-webkit，但你本想手机端大多是支持HTML5和css3的，所以就试下了不带前缀-webkit，结果，呵呵，那么问题来了，iphone5s以下会有问题，以上就没有问题，所以你懂得，最好加上前缀-webkit，不过像最近比较新的版本的Andirod对CSS3的属性支持度还是不错的；\n\n接下来，我们介绍下重点：\n\n安装weinre\n\nweinre可以通过npm按照（个人也是比较推荐的）\n\n```\nnpm install -g weinre  (按照完成后，可以在cmd上，查看下版本号，看是否按照成功)\n```\n\n按照之后，可以执行下面的命令来启动：\n\n```\nweinre --httpPort 8080 --boundHost -all-\n```\n\nok!如果没有什么问题的话，我们打开谷歌浏览器（-webkit内核）输入：http://127.0.0.1:8080/   会看到以下界面\n\n以上这个便是庐山正面目了，上图的“debug client user interface”是weinre的Debug客户端，点击进入后看到目前还没有被测试的网页：\n\nTargets显示的none\n\nOK!那么我们继续，添加Debug Target\n\n有两种方式：\n\n1. Target Script（需要向页面中添加一个js）：\n\n```\n<script src=\"http://192.168.1.69:8080/target/target-script-min.js#anonymous\" type=\"text/javascript\"></script>\n```\n\n注意：标红的部分是你自己的IP地址和端口号，自己适配去调；\n\n2. 我们也可以将一段js保存到移动设备的书签中\njavascript:(function(e){e.setAttribute(\"src\",\"http://127.0.0.1:8080/target/target-script-min.js#anonymous\");document.getElementsByTagName(\"body\")[0].appendChild(e);})(document.createElement(\"script\"));void(0);\n\n\n最后：手机测试：\n1. 手机连接Wifi,必须和电脑在同一段网络，我用的是XAMPP模拟服务器，大家可以上网查用法，然后用自己的手机测试你要测试的网页即可；\n现在回到电脑端  http://127.0.0.1:8080    点击“debug client user interface:”  如果没有问题的话，就已经成功添加了Debug Target:\n\n提示：注意手机不要锁屏，不然调试会断开！\n\n2. 调试开始：\n\n自己可以查查各个组件！\n","slug":"移动端开发调试工具神器-Weinre使用方法","published":1,"updated":"2019-11-07T02:24:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo1t00a6h5s6k5pft9em","content":"<p>前端开发调试必备：</p>\n<ol>\n<li>DOM操作断点调试；</li>\n<li>debugger断点调试；</li>\n<li>native方法hook（个人暂时还没有试过，不知效果如何）；</li>\n<li>远程映射本地测试；</li>\n<li>Weinre移动调试（详细介绍）；</li>\n</ol>\n<p>像Dom断点调试和debugger断点调试我认为是大家经常用到的方法，或者是当前比较火狐下比较流行的Fiexbug调试工具；今天我们主要是研究Weinre调试工具的；</p>\n<p>当然，作为前端开发人员，令人比较乏味的即使手机端各个版本的支持程度，例如就拿iphone来说，虽然都是-webkit内核，如果你添加的动画，如-webkit-translate…….当然考虑到兼容性问题，你会带上前缀-webkit，但你本想手机端大多是支持HTML5和css3的，所以就试下了不带前缀-webkit，结果，呵呵，那么问题来了，iphone5s以下会有问题，以上就没有问题，所以你懂得，最好加上前缀-webkit，不过像最近比较新的版本的Andirod对CSS3的属性支持度还是不错的；</p>\n<p>接下来，我们介绍下重点：</p>\n<p>安装weinre</p>\n<p>weinre可以通过npm按照（个人也是比较推荐的）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g weinre  (按照完成后，可以在cmd上，查看下版本号，看是否按照成功)</span><br></pre></td></tr></table></figure>\n<p>按照之后，可以执行下面的命令来启动：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">weinre --httpPort 8080 --boundHost -all-</span><br></pre></td></tr></table></figure>\n<p>ok!如果没有什么问题的话，我们打开谷歌浏览器（-webkit内核）输入：<a href=\"http://127.0.0.1:8080/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080/</a>   会看到以下界面</p>\n<p>以上这个便是庐山正面目了，上图的“debug client user interface”是weinre的Debug客户端，点击进入后看到目前还没有被测试的网页：</p>\n<p>Targets显示的none</p>\n<p>OK!那么我们继续，添加Debug Target</p>\n<p>有两种方式：</p>\n<ol>\n<li>Target Script（需要向页面中添加一个js）：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;http://192.168.1.69:8080/target/target-script-min.js#anonymous&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>注意：标红的部分是你自己的IP地址和端口号，自己适配去调；</p>\n<ol start=\"2\">\n<li>我们也可以将一段js保存到移动设备的书签中<br>javascript:(function(e){e.setAttribute(“src”,”<a href=\"http://127.0.0.1:8080/target/target-script-min.js#anonymous&quot;);document.getElementsByTagName(&quot;body&quot;)[0].appendChild(e);})(document.createElement(&quot;script&quot;));void(0)\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080/target/target-script-min.js#anonymous&quot;);document.getElementsByTagName(&quot;body&quot;)[0].appendChild(e);})(document.createElement(&quot;script&quot;));void(0)</a>;</li>\n</ol>\n<p>最后：手机测试：</p>\n<ol>\n<li>手机连接Wifi,必须和电脑在同一段网络，我用的是XAMPP模拟服务器，大家可以上网查用法，然后用自己的手机测试你要测试的网页即可；<br>现在回到电脑端  <a href=\"http://127.0.0.1:8080\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080</a>    点击“debug client user interface:”  如果没有问题的话，就已经成功添加了Debug Target:</li>\n</ol>\n<p>提示：注意手机不要锁屏，不然调试会断开！</p>\n<ol start=\"2\">\n<li>调试开始：</li>\n</ol>\n<p>自己可以查查各个组件！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>前端开发调试必备：</p>\n<ol>\n<li>DOM操作断点调试；</li>\n<li>debugger断点调试；</li>\n<li>native方法hook（个人暂时还没有试过，不知效果如何）；</li>\n<li>远程映射本地测试；</li>\n<li>Weinre移动调试（详细介绍）；</li>\n</ol>\n<p>像Dom断点调试和debugger断点调试我认为是大家经常用到的方法，或者是当前比较火狐下比较流行的Fiexbug调试工具；今天我们主要是研究Weinre调试工具的；</p>\n<p>当然，作为前端开发人员，令人比较乏味的即使手机端各个版本的支持程度，例如就拿iphone来说，虽然都是-webkit内核，如果你添加的动画，如-webkit-translate…….当然考虑到兼容性问题，你会带上前缀-webkit，但你本想手机端大多是支持HTML5和css3的，所以就试下了不带前缀-webkit，结果，呵呵，那么问题来了，iphone5s以下会有问题，以上就没有问题，所以你懂得，最好加上前缀-webkit，不过像最近比较新的版本的Andirod对CSS3的属性支持度还是不错的；</p>\n<p>接下来，我们介绍下重点：</p>\n<p>安装weinre</p>\n<p>weinre可以通过npm按照（个人也是比较推荐的）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g weinre  (按照完成后，可以在cmd上，查看下版本号，看是否按照成功)</span><br></pre></td></tr></table></figure>\n<p>按照之后，可以执行下面的命令来启动：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">weinre --httpPort 8080 --boundHost -all-</span><br></pre></td></tr></table></figure>\n<p>ok!如果没有什么问题的话，我们打开谷歌浏览器（-webkit内核）输入：<a href=\"http://127.0.0.1:8080/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080/</a>   会看到以下界面</p>\n<p>以上这个便是庐山正面目了，上图的“debug client user interface”是weinre的Debug客户端，点击进入后看到目前还没有被测试的网页：</p>\n<p>Targets显示的none</p>\n<p>OK!那么我们继续，添加Debug Target</p>\n<p>有两种方式：</p>\n<ol>\n<li>Target Script（需要向页面中添加一个js）：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;http://192.168.1.69:8080/target/target-script-min.js#anonymous&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>注意：标红的部分是你自己的IP地址和端口号，自己适配去调；</p>\n<ol start=\"2\">\n<li>我们也可以将一段js保存到移动设备的书签中<br>javascript:(function(e){e.setAttribute(“src”,”<a href=\"http://127.0.0.1:8080/target/target-script-min.js#anonymous&quot;);document.getElementsByTagName(&quot;body&quot;)[0].appendChild(e);})(document.createElement(&quot;script&quot;));void(0)\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080/target/target-script-min.js#anonymous&quot;);document.getElementsByTagName(&quot;body&quot;)[0].appendChild(e);})(document.createElement(&quot;script&quot;));void(0)</a>;</li>\n</ol>\n<p>最后：手机测试：</p>\n<ol>\n<li>手机连接Wifi,必须和电脑在同一段网络，我用的是XAMPP模拟服务器，大家可以上网查用法，然后用自己的手机测试你要测试的网页即可；<br>现在回到电脑端  <a href=\"http://127.0.0.1:8080\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080</a>    点击“debug client user interface:”  如果没有问题的话，就已经成功添加了Debug Target:</li>\n</ol>\n<p>提示：注意手机不要锁屏，不然调试会断开！</p>\n<ol start=\"2\">\n<li>调试开始：</li>\n</ol>\n<p>自己可以查查各个组件！</p>\n"},{"title":"纪念大师贝聿铭[bèi yù míng]","toc":false,"date":"2019-05-17T03:20:24.000Z","_content":"\n## 贝聿铭 （华裔建筑大师）\n\n贝聿铭，（1917年4月26日-2019年5月16日），出生于中国广州，祖籍苏州，是苏州望族之后，美籍华人建筑师。\n贝聿铭曾先后在麻省理工学院和哈佛大学就读建筑学。贝聿铭荣获了1979年美国建筑学会金奖，1981年法国建筑学金奖，1989年日本帝赏奖，1983年第五届普利兹克奖，及1986年里根总统颁予的自由奖章等。\n贝聿铭作品以公共建筑、文教建筑为主，被归类为现代主义建筑，善用钢材、混凝土、玻璃与石材。他的代表建筑有美国华盛顿特区国家艺廊东厢、法国巴黎卢浮宫扩建工程。被誉为“现代建筑的最后大师”。\n2019年5月16日，贝聿铭于家中去世，享年102岁。\n<!-- more -->\n![image.png](http://blogimage.houjiyi.com/FkHOooX7YRfFK2DrijiWqkCJyFKr)\n![image.png](http://blogimage.houjiyi.com/Fr8PqM-8sqPhqLgLIZ-mKhQjW3SK)\n![image.png](http://blogimage.houjiyi.com/FgIQSA5H1NNDjEXXoGiAS-qPGzMp)\n![image.png](http://blogimage.houjiyi.com/FkujD4ESxnxAk-NENVSZYsOLPh48)\n![image.png](http://blogimage.houjiyi.com/Flp-LlPkdPQdeVHtY2UfrmISrNpN)\n![image.png](http://blogimage.houjiyi.com/FmOa8cUrhLkcKe4Ay-KYXeyK4dGX)\n\n\n最著名的华人建筑师，贝聿铭，于2019年5月16日，离世。\n\n享年102岁。\n\n\n\n是天堂要建美术馆了吗，贝聿铭，于北京时间2019年5月17日，离世。\n\n相信非常多的人，在书上，或者到过实地，看到过，感受到过，震撼于他的建筑。\n\n从玻璃金字塔，到美秀博物馆，到东馆，到香山饭店，到苏博。。\n\n唉。。\n\n唯愿：逝者安息。\n\n借此，我们来回顾一下贝老的一生。\n\n\n\n\n\n贝聿铭先生出生在广州，望族之后。\n\n10岁时，回到上海就读青年会中学，高中就读于上海圣约翰大学附属中学；\n\n18岁远赴美国留学，先后在麻省理工学院和哈佛大学学习建筑；\n\n22岁时以优异的成绩毕业，获得了美国建筑师协会的奖项；\n\n第二次世界大战爆发后，他在美国空军服役三年。年贝聿铭退役，进入哈佛大学攻读硕士学位。\n\n27岁，留校受聘为设计研究所助理教授。 \n\n28岁那年，从纯学术的象牙之塔进入实际的建筑领域，纽约市极有眼光和魄力的房地产开发富商威廉柴根道夫打破美国建筑界的惯例，首次聘用中国人贝聿铭为建筑师，担任他创办的韦伯纳普建筑公司的建筑研究部主任。\n\n43岁时贝聿铭离开柴根道夫，自立门户，成立了自己的建筑公司。\n\n美国建筑界宣布1979年为“贝聿铭年”，授予他该年度的美国建筑学院金质奖章。那年他62岁，而于此前一年落成的华盛顿国家艺术馆东馆的设计，已经奠定了贝聿铭作为世界级建筑大师的地位。\n\n47岁时为为纪念已故美国总统约翰·肯尼迪，政府决定在波士顿港口建造约翰·肯尼迪图书馆。这座建造时间长达十五年，于1979年才落成的图书馆，由于设计新颖、造型大胆、在美国建筑界引起轰动，被公认是美国建筑史上最佳杰作之一。\n\n1979年，改革开放刚刚起步的中国政府邀请贝聿铭设计香山饭店。贝聿铭根据自己的一贯想法———“越是民族的，越是世界的”，不辞劳苦地走访了北京、南京、扬州、苏州、承德等地，寻找灵感，搜集素材，最后采取了建筑一系列不规则院落的布局方式，使香山饭店与周围的水光山色，参天古树融为一体，成为具有浓郁中国风格的建筑。香山饭店的规模不算大，但“体现出中国民族建筑艺术的精华”。\n\n在贝老的晚年，仍接手了很多的建筑设计，最著名就属与卢浮宫玻璃金字塔，苏州博物馆，中银大厦，伊斯兰博物馆。\n\n贝老一生，一共设计了26座落成建筑，一共荣获了10项荣誉学术奖，荣获了28项建筑业奖项，荣获了5项社会荣誉奖。其中包括建筑界最高奖项：普利兹克建筑奖。\n\n以下是他的建筑作品代表作。\n\n建筑作品：\n\n1949年   港湾石油公司办公楼　    \n1955年   丹佛美国国家办公楼\n1956年   富兰克林国家银行/罗斯福广场购物中心    \n1960年   丹佛市希尔顿饭店\n1962年   玛莉亚城广场大厦\n1963年   东海大学路思义教堂\n1967年   国家大气研究中心\n1971年   海港大楼\n1972年   达拉斯市政厅\n1974年   国家美术馆东馆\n1977年   汉考克大厦\n1978年   印第安纳大学美术馆\n1979年   肯尼迪图书馆\n1981年   摩根大楼\n1982年   香山饭店\n1982年   中银大厦\n1985年   麻省理工学院媒体实验室\n1989年   卢浮宫玻璃金字塔\n1990年   德国历史博物馆新翼\n1995年   中国银行总行大厦\n1996年   美秀美术馆\n1998年   摇滚音乐名人堂\n2006年   苏州博物馆新馆\n2004年   中国驻美大使馆\n2006年　 澳门科学馆\n2008年   伊斯兰艺术博物馆\n\n\n如果我一开始只做形式，我就会是雕塑家，不会成为建筑师。建筑师首先必须把一切事情整合起来，之后才创造形式。你得同时考量许多事情。但形式绝非不重要——其实，那不是最终目的。你不能光从形式着手，然后把功能随意塞进来。我不会这么做，如果你这么做，肯定无法成功。\n\n对我来说，中国印记从未完全消失。我现在在美国住了七八十年，却依然觉得自己是中国人。不是很怪吗？我给了自己新的外表，但内心的一切早就存在了......\n\n\n文章在[这里](https://mp.weixin.qq.com/s/jrTYUI3Z_gTVDAtnTc7xQw)\n\n\n这位百岁老人一生的故事\n\n数不尽道不完。\n\n一路走好。\n\n\n\n-END-\n","source":"_posts/纪念大师贝聿铭-bei-yu-ming.md","raw":"---\ntitle: '纪念大师贝聿铭[bèi yù míng]'\ntags:\n  - 意义\ncategories:\n  - 生活玩乐\ntoc: false\ndate: 2019-05-17 11:20:24\n---\n\n## 贝聿铭 （华裔建筑大师）\n\n贝聿铭，（1917年4月26日-2019年5月16日），出生于中国广州，祖籍苏州，是苏州望族之后，美籍华人建筑师。\n贝聿铭曾先后在麻省理工学院和哈佛大学就读建筑学。贝聿铭荣获了1979年美国建筑学会金奖，1981年法国建筑学金奖，1989年日本帝赏奖，1983年第五届普利兹克奖，及1986年里根总统颁予的自由奖章等。\n贝聿铭作品以公共建筑、文教建筑为主，被归类为现代主义建筑，善用钢材、混凝土、玻璃与石材。他的代表建筑有美国华盛顿特区国家艺廊东厢、法国巴黎卢浮宫扩建工程。被誉为“现代建筑的最后大师”。\n2019年5月16日，贝聿铭于家中去世，享年102岁。\n<!-- more -->\n![image.png](http://blogimage.houjiyi.com/FkHOooX7YRfFK2DrijiWqkCJyFKr)\n![image.png](http://blogimage.houjiyi.com/Fr8PqM-8sqPhqLgLIZ-mKhQjW3SK)\n![image.png](http://blogimage.houjiyi.com/FgIQSA5H1NNDjEXXoGiAS-qPGzMp)\n![image.png](http://blogimage.houjiyi.com/FkujD4ESxnxAk-NENVSZYsOLPh48)\n![image.png](http://blogimage.houjiyi.com/Flp-LlPkdPQdeVHtY2UfrmISrNpN)\n![image.png](http://blogimage.houjiyi.com/FmOa8cUrhLkcKe4Ay-KYXeyK4dGX)\n\n\n最著名的华人建筑师，贝聿铭，于2019年5月16日，离世。\n\n享年102岁。\n\n\n\n是天堂要建美术馆了吗，贝聿铭，于北京时间2019年5月17日，离世。\n\n相信非常多的人，在书上，或者到过实地，看到过，感受到过，震撼于他的建筑。\n\n从玻璃金字塔，到美秀博物馆，到东馆，到香山饭店，到苏博。。\n\n唉。。\n\n唯愿：逝者安息。\n\n借此，我们来回顾一下贝老的一生。\n\n\n\n\n\n贝聿铭先生出生在广州，望族之后。\n\n10岁时，回到上海就读青年会中学，高中就读于上海圣约翰大学附属中学；\n\n18岁远赴美国留学，先后在麻省理工学院和哈佛大学学习建筑；\n\n22岁时以优异的成绩毕业，获得了美国建筑师协会的奖项；\n\n第二次世界大战爆发后，他在美国空军服役三年。年贝聿铭退役，进入哈佛大学攻读硕士学位。\n\n27岁，留校受聘为设计研究所助理教授。 \n\n28岁那年，从纯学术的象牙之塔进入实际的建筑领域，纽约市极有眼光和魄力的房地产开发富商威廉柴根道夫打破美国建筑界的惯例，首次聘用中国人贝聿铭为建筑师，担任他创办的韦伯纳普建筑公司的建筑研究部主任。\n\n43岁时贝聿铭离开柴根道夫，自立门户，成立了自己的建筑公司。\n\n美国建筑界宣布1979年为“贝聿铭年”，授予他该年度的美国建筑学院金质奖章。那年他62岁，而于此前一年落成的华盛顿国家艺术馆东馆的设计，已经奠定了贝聿铭作为世界级建筑大师的地位。\n\n47岁时为为纪念已故美国总统约翰·肯尼迪，政府决定在波士顿港口建造约翰·肯尼迪图书馆。这座建造时间长达十五年，于1979年才落成的图书馆，由于设计新颖、造型大胆、在美国建筑界引起轰动，被公认是美国建筑史上最佳杰作之一。\n\n1979年，改革开放刚刚起步的中国政府邀请贝聿铭设计香山饭店。贝聿铭根据自己的一贯想法———“越是民族的，越是世界的”，不辞劳苦地走访了北京、南京、扬州、苏州、承德等地，寻找灵感，搜集素材，最后采取了建筑一系列不规则院落的布局方式，使香山饭店与周围的水光山色，参天古树融为一体，成为具有浓郁中国风格的建筑。香山饭店的规模不算大，但“体现出中国民族建筑艺术的精华”。\n\n在贝老的晚年，仍接手了很多的建筑设计，最著名就属与卢浮宫玻璃金字塔，苏州博物馆，中银大厦，伊斯兰博物馆。\n\n贝老一生，一共设计了26座落成建筑，一共荣获了10项荣誉学术奖，荣获了28项建筑业奖项，荣获了5项社会荣誉奖。其中包括建筑界最高奖项：普利兹克建筑奖。\n\n以下是他的建筑作品代表作。\n\n建筑作品：\n\n1949年   港湾石油公司办公楼　    \n1955年   丹佛美国国家办公楼\n1956年   富兰克林国家银行/罗斯福广场购物中心    \n1960年   丹佛市希尔顿饭店\n1962年   玛莉亚城广场大厦\n1963年   东海大学路思义教堂\n1967年   国家大气研究中心\n1971年   海港大楼\n1972年   达拉斯市政厅\n1974年   国家美术馆东馆\n1977年   汉考克大厦\n1978年   印第安纳大学美术馆\n1979年   肯尼迪图书馆\n1981年   摩根大楼\n1982年   香山饭店\n1982年   中银大厦\n1985年   麻省理工学院媒体实验室\n1989年   卢浮宫玻璃金字塔\n1990年   德国历史博物馆新翼\n1995年   中国银行总行大厦\n1996年   美秀美术馆\n1998年   摇滚音乐名人堂\n2006年   苏州博物馆新馆\n2004年   中国驻美大使馆\n2006年　 澳门科学馆\n2008年   伊斯兰艺术博物馆\n\n\n如果我一开始只做形式，我就会是雕塑家，不会成为建筑师。建筑师首先必须把一切事情整合起来，之后才创造形式。你得同时考量许多事情。但形式绝非不重要——其实，那不是最终目的。你不能光从形式着手，然后把功能随意塞进来。我不会这么做，如果你这么做，肯定无法成功。\n\n对我来说，中国印记从未完全消失。我现在在美国住了七八十年，却依然觉得自己是中国人。不是很怪吗？我给了自己新的外表，但内心的一切早就存在了......\n\n\n文章在[这里](https://mp.weixin.qq.com/s/jrTYUI3Z_gTVDAtnTc7xQw)\n\n\n这位百岁老人一生的故事\n\n数不尽道不完。\n\n一路走好。\n\n\n\n-END-\n","slug":"纪念大师贝聿铭-bei-yu-ming","published":1,"updated":"2019-11-07T02:24:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo1v00aah5s6kvboqlu1","content":"<h2 id=\"贝聿铭-（华裔建筑大师）\"><a href=\"#贝聿铭-（华裔建筑大师）\" class=\"headerlink\" title=\"贝聿铭 （华裔建筑大师）\"></a>贝聿铭 （华裔建筑大师）</h2><p>贝聿铭，（1917年4月26日-2019年5月16日），出生于中国广州，祖籍苏州，是苏州望族之后，美籍华人建筑师。<br>贝聿铭曾先后在麻省理工学院和哈佛大学就读建筑学。贝聿铭荣获了1979年美国建筑学会金奖，1981年法国建筑学金奖，1989年日本帝赏奖，1983年第五届普利兹克奖，及1986年里根总统颁予的自由奖章等。<br>贝聿铭作品以公共建筑、文教建筑为主，被归类为现代主义建筑，善用钢材、混凝土、玻璃与石材。他的代表建筑有美国华盛顿特区国家艺廊东厢、法国巴黎卢浮宫扩建工程。被誉为“现代建筑的最后大师”。<br>2019年5月16日，贝聿铭于家中去世，享年102岁。<br><a id=\"more\"></a><br><img src=\"http://blogimage.houjiyi.com/FkHOooX7YRfFK2DrijiWqkCJyFKr\" alt=\"image.png\"><br><img src=\"http://blogimage.houjiyi.com/Fr8PqM-8sqPhqLgLIZ-mKhQjW3SK\" alt=\"image.png\"><br><img src=\"http://blogimage.houjiyi.com/FgIQSA5H1NNDjEXXoGiAS-qPGzMp\" alt=\"image.png\"><br><img src=\"http://blogimage.houjiyi.com/FkujD4ESxnxAk-NENVSZYsOLPh48\" alt=\"image.png\"><br><img src=\"http://blogimage.houjiyi.com/Flp-LlPkdPQdeVHtY2UfrmISrNpN\" alt=\"image.png\"><br><img src=\"http://blogimage.houjiyi.com/FmOa8cUrhLkcKe4Ay-KYXeyK4dGX\" alt=\"image.png\"></p>\n<p>最著名的华人建筑师，贝聿铭，于2019年5月16日，离世。</p>\n<p>享年102岁。</p>\n<p>是天堂要建美术馆了吗，贝聿铭，于北京时间2019年5月17日，离世。</p>\n<p>相信非常多的人，在书上，或者到过实地，看到过，感受到过，震撼于他的建筑。</p>\n<p>从玻璃金字塔，到美秀博物馆，到东馆，到香山饭店，到苏博。。</p>\n<p>唉。。</p>\n<p>唯愿：逝者安息。</p>\n<p>借此，我们来回顾一下贝老的一生。</p>\n<p>贝聿铭先生出生在广州，望族之后。</p>\n<p>10岁时，回到上海就读青年会中学，高中就读于上海圣约翰大学附属中学；</p>\n<p>18岁远赴美国留学，先后在麻省理工学院和哈佛大学学习建筑；</p>\n<p>22岁时以优异的成绩毕业，获得了美国建筑师协会的奖项；</p>\n<p>第二次世界大战爆发后，他在美国空军服役三年。年贝聿铭退役，进入哈佛大学攻读硕士学位。</p>\n<p>27岁，留校受聘为设计研究所助理教授。 </p>\n<p>28岁那年，从纯学术的象牙之塔进入实际的建筑领域，纽约市极有眼光和魄力的房地产开发富商威廉柴根道夫打破美国建筑界的惯例，首次聘用中国人贝聿铭为建筑师，担任他创办的韦伯纳普建筑公司的建筑研究部主任。</p>\n<p>43岁时贝聿铭离开柴根道夫，自立门户，成立了自己的建筑公司。</p>\n<p>美国建筑界宣布1979年为“贝聿铭年”，授予他该年度的美国建筑学院金质奖章。那年他62岁，而于此前一年落成的华盛顿国家艺术馆东馆的设计，已经奠定了贝聿铭作为世界级建筑大师的地位。</p>\n<p>47岁时为为纪念已故美国总统约翰·肯尼迪，政府决定在波士顿港口建造约翰·肯尼迪图书馆。这座建造时间长达十五年，于1979年才落成的图书馆，由于设计新颖、造型大胆、在美国建筑界引起轰动，被公认是美国建筑史上最佳杰作之一。</p>\n<p>1979年，改革开放刚刚起步的中国政府邀请贝聿铭设计香山饭店。贝聿铭根据自己的一贯想法———“越是民族的，越是世界的”，不辞劳苦地走访了北京、南京、扬州、苏州、承德等地，寻找灵感，搜集素材，最后采取了建筑一系列不规则院落的布局方式，使香山饭店与周围的水光山色，参天古树融为一体，成为具有浓郁中国风格的建筑。香山饭店的规模不算大，但“体现出中国民族建筑艺术的精华”。</p>\n<p>在贝老的晚年，仍接手了很多的建筑设计，最著名就属与卢浮宫玻璃金字塔，苏州博物馆，中银大厦，伊斯兰博物馆。</p>\n<p>贝老一生，一共设计了26座落成建筑，一共荣获了10项荣誉学术奖，荣获了28项建筑业奖项，荣获了5项社会荣誉奖。其中包括建筑界最高奖项：普利兹克建筑奖。</p>\n<p>以下是他的建筑作品代表作。</p>\n<p>建筑作品：</p>\n<p>1949年   港湾石油公司办公楼　<br>1955年   丹佛美国国家办公楼<br>1956年   富兰克林国家银行/罗斯福广场购物中心<br>1960年   丹佛市希尔顿饭店<br>1962年   玛莉亚城广场大厦<br>1963年   东海大学路思义教堂<br>1967年   国家大气研究中心<br>1971年   海港大楼<br>1972年   达拉斯市政厅<br>1974年   国家美术馆东馆<br>1977年   汉考克大厦<br>1978年   印第安纳大学美术馆<br>1979年   肯尼迪图书馆<br>1981年   摩根大楼<br>1982年   香山饭店<br>1982年   中银大厦<br>1985年   麻省理工学院媒体实验室<br>1989年   卢浮宫玻璃金字塔<br>1990年   德国历史博物馆新翼<br>1995年   中国银行总行大厦<br>1996年   美秀美术馆<br>1998年   摇滚音乐名人堂<br>2006年   苏州博物馆新馆<br>2004年   中国驻美大使馆<br>2006年　 澳门科学馆<br>2008年   伊斯兰艺术博物馆</p>\n<p>如果我一开始只做形式，我就会是雕塑家，不会成为建筑师。建筑师首先必须把一切事情整合起来，之后才创造形式。你得同时考量许多事情。但形式绝非不重要——其实，那不是最终目的。你不能光从形式着手，然后把功能随意塞进来。我不会这么做，如果你这么做，肯定无法成功。</p>\n<p>对我来说，中国印记从未完全消失。我现在在美国住了七八十年，却依然觉得自己是中国人。不是很怪吗？我给了自己新的外表，但内心的一切早就存在了……</p>\n<p>文章在<a href=\"https://mp.weixin.qq.com/s/jrTYUI3Z_gTVDAtnTc7xQw\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>这位百岁老人一生的故事</p>\n<p>数不尽道不完。</p>\n<p>一路走好。</p>\n<p>-END-</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"贝聿铭-（华裔建筑大师）\"><a href=\"#贝聿铭-（华裔建筑大师）\" class=\"headerlink\" title=\"贝聿铭 （华裔建筑大师）\"></a>贝聿铭 （华裔建筑大师）</h2><p>贝聿铭，（1917年4月26日-2019年5月16日），出生于中国广州，祖籍苏州，是苏州望族之后，美籍华人建筑师。<br>贝聿铭曾先后在麻省理工学院和哈佛大学就读建筑学。贝聿铭荣获了1979年美国建筑学会金奖，1981年法国建筑学金奖，1989年日本帝赏奖，1983年第五届普利兹克奖，及1986年里根总统颁予的自由奖章等。<br>贝聿铭作品以公共建筑、文教建筑为主，被归类为现代主义建筑，善用钢材、混凝土、玻璃与石材。他的代表建筑有美国华盛顿特区国家艺廊东厢、法国巴黎卢浮宫扩建工程。被誉为“现代建筑的最后大师”。<br>2019年5月16日，贝聿铭于家中去世，享年102岁。<br>","more":"<br><img src=\"http://blogimage.houjiyi.com/FkHOooX7YRfFK2DrijiWqkCJyFKr\" alt=\"image.png\"><br><img src=\"http://blogimage.houjiyi.com/Fr8PqM-8sqPhqLgLIZ-mKhQjW3SK\" alt=\"image.png\"><br><img src=\"http://blogimage.houjiyi.com/FgIQSA5H1NNDjEXXoGiAS-qPGzMp\" alt=\"image.png\"><br><img src=\"http://blogimage.houjiyi.com/FkujD4ESxnxAk-NENVSZYsOLPh48\" alt=\"image.png\"><br><img src=\"http://blogimage.houjiyi.com/Flp-LlPkdPQdeVHtY2UfrmISrNpN\" alt=\"image.png\"><br><img src=\"http://blogimage.houjiyi.com/FmOa8cUrhLkcKe4Ay-KYXeyK4dGX\" alt=\"image.png\"></p>\n<p>最著名的华人建筑师，贝聿铭，于2019年5月16日，离世。</p>\n<p>享年102岁。</p>\n<p>是天堂要建美术馆了吗，贝聿铭，于北京时间2019年5月17日，离世。</p>\n<p>相信非常多的人，在书上，或者到过实地，看到过，感受到过，震撼于他的建筑。</p>\n<p>从玻璃金字塔，到美秀博物馆，到东馆，到香山饭店，到苏博。。</p>\n<p>唉。。</p>\n<p>唯愿：逝者安息。</p>\n<p>借此，我们来回顾一下贝老的一生。</p>\n<p>贝聿铭先生出生在广州，望族之后。</p>\n<p>10岁时，回到上海就读青年会中学，高中就读于上海圣约翰大学附属中学；</p>\n<p>18岁远赴美国留学，先后在麻省理工学院和哈佛大学学习建筑；</p>\n<p>22岁时以优异的成绩毕业，获得了美国建筑师协会的奖项；</p>\n<p>第二次世界大战爆发后，他在美国空军服役三年。年贝聿铭退役，进入哈佛大学攻读硕士学位。</p>\n<p>27岁，留校受聘为设计研究所助理教授。 </p>\n<p>28岁那年，从纯学术的象牙之塔进入实际的建筑领域，纽约市极有眼光和魄力的房地产开发富商威廉柴根道夫打破美国建筑界的惯例，首次聘用中国人贝聿铭为建筑师，担任他创办的韦伯纳普建筑公司的建筑研究部主任。</p>\n<p>43岁时贝聿铭离开柴根道夫，自立门户，成立了自己的建筑公司。</p>\n<p>美国建筑界宣布1979年为“贝聿铭年”，授予他该年度的美国建筑学院金质奖章。那年他62岁，而于此前一年落成的华盛顿国家艺术馆东馆的设计，已经奠定了贝聿铭作为世界级建筑大师的地位。</p>\n<p>47岁时为为纪念已故美国总统约翰·肯尼迪，政府决定在波士顿港口建造约翰·肯尼迪图书馆。这座建造时间长达十五年，于1979年才落成的图书馆，由于设计新颖、造型大胆、在美国建筑界引起轰动，被公认是美国建筑史上最佳杰作之一。</p>\n<p>1979年，改革开放刚刚起步的中国政府邀请贝聿铭设计香山饭店。贝聿铭根据自己的一贯想法———“越是民族的，越是世界的”，不辞劳苦地走访了北京、南京、扬州、苏州、承德等地，寻找灵感，搜集素材，最后采取了建筑一系列不规则院落的布局方式，使香山饭店与周围的水光山色，参天古树融为一体，成为具有浓郁中国风格的建筑。香山饭店的规模不算大，但“体现出中国民族建筑艺术的精华”。</p>\n<p>在贝老的晚年，仍接手了很多的建筑设计，最著名就属与卢浮宫玻璃金字塔，苏州博物馆，中银大厦，伊斯兰博物馆。</p>\n<p>贝老一生，一共设计了26座落成建筑，一共荣获了10项荣誉学术奖，荣获了28项建筑业奖项，荣获了5项社会荣誉奖。其中包括建筑界最高奖项：普利兹克建筑奖。</p>\n<p>以下是他的建筑作品代表作。</p>\n<p>建筑作品：</p>\n<p>1949年   港湾石油公司办公楼　<br>1955年   丹佛美国国家办公楼<br>1956年   富兰克林国家银行/罗斯福广场购物中心<br>1960年   丹佛市希尔顿饭店<br>1962年   玛莉亚城广场大厦<br>1963年   东海大学路思义教堂<br>1967年   国家大气研究中心<br>1971年   海港大楼<br>1972年   达拉斯市政厅<br>1974年   国家美术馆东馆<br>1977年   汉考克大厦<br>1978年   印第安纳大学美术馆<br>1979年   肯尼迪图书馆<br>1981年   摩根大楼<br>1982年   香山饭店<br>1982年   中银大厦<br>1985年   麻省理工学院媒体实验室<br>1989年   卢浮宫玻璃金字塔<br>1990年   德国历史博物馆新翼<br>1995年   中国银行总行大厦<br>1996年   美秀美术馆<br>1998年   摇滚音乐名人堂<br>2006年   苏州博物馆新馆<br>2004年   中国驻美大使馆<br>2006年　 澳门科学馆<br>2008年   伊斯兰艺术博物馆</p>\n<p>如果我一开始只做形式，我就会是雕塑家，不会成为建筑师。建筑师首先必须把一切事情整合起来，之后才创造形式。你得同时考量许多事情。但形式绝非不重要——其实，那不是最终目的。你不能光从形式着手，然后把功能随意塞进来。我不会这么做，如果你这么做，肯定无法成功。</p>\n<p>对我来说，中国印记从未完全消失。我现在在美国住了七八十年，却依然觉得自己是中国人。不是很怪吗？我给了自己新的外表，但内心的一切早就存在了……</p>\n<p>文章在<a href=\"https://mp.weixin.qq.com/s/jrTYUI3Z_gTVDAtnTc7xQw\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>这位百岁老人一生的故事</p>\n<p>数不尽道不完。</p>\n<p>一路走好。</p>\n<p>-END-</p>"},{"title":"移动设备上Touchmove获取当前触摸的Dom节点","toc":false,"date":"2019-07-18T01:58:33.000Z","_content":"\n我们通过touchmove事件返回的event对象，可以获取当前手指触摸元素的clientX和clientY的值，将值传入document.elementFromPoint就可获取当前触摸的值，这里需要注意的是此方法返回的是最顶层的Dom，所以务必将你需要的Dom的z-index设置为最高，分享些许我在此项目的核心代码：\n\n```javascript\n/**\n* 获取存储当前Dom位置的对象\n**/\nvar myLocation = e.originalEvent.changedTouches[0];\n\n/**\n* 取clientX及clientY并传入elementFromPoint获取当前手指触摸的Dom\n**/\nvar realTarget = document.elementFromPoint(myLocation.clientX, myLocation.clientY);\n```\n","source":"_posts/移动设备上Touchmove获取当前触摸的Dom节点.md","raw":"---\ntitle: 移动设备上Touchmove获取当前触摸的Dom节点\ntags:\n  - 知识点备忘\ncategories:\n  - 移动开发\n  - H5开发\ntoc: false\ndate: 2019-07-18 09:58:33\n---\n\n我们通过touchmove事件返回的event对象，可以获取当前手指触摸元素的clientX和clientY的值，将值传入document.elementFromPoint就可获取当前触摸的值，这里需要注意的是此方法返回的是最顶层的Dom，所以务必将你需要的Dom的z-index设置为最高，分享些许我在此项目的核心代码：\n\n```javascript\n/**\n* 获取存储当前Dom位置的对象\n**/\nvar myLocation = e.originalEvent.changedTouches[0];\n\n/**\n* 取clientX及clientY并传入elementFromPoint获取当前手指触摸的Dom\n**/\nvar realTarget = document.elementFromPoint(myLocation.clientX, myLocation.clientY);\n```\n","slug":"移动设备上Touchmove获取当前触摸的Dom节点","published":1,"updated":"2019-11-07T02:24:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo1w00adh5s6ns36ke15","content":"<p>我们通过touchmove事件返回的event对象，可以获取当前手指触摸元素的clientX和clientY的值，将值传入document.elementFromPoint就可获取当前触摸的值，这里需要注意的是此方法返回的是最顶层的Dom，所以务必将你需要的Dom的z-index设置为最高，分享些许我在此项目的核心代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 获取存储当前Dom位置的对象</span></span><br><span class=\"line\"><span class=\"comment\">**/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myLocation = e.originalEvent.changedTouches[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 取clientX及clientY并传入elementFromPoint获取当前手指触摸的Dom</span></span><br><span class=\"line\"><span class=\"comment\">**/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> realTarget = <span class=\"built_in\">document</span>.elementFromPoint(myLocation.clientX, myLocation.clientY);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>我们通过touchmove事件返回的event对象，可以获取当前手指触摸元素的clientX和clientY的值，将值传入document.elementFromPoint就可获取当前触摸的值，这里需要注意的是此方法返回的是最顶层的Dom，所以务必将你需要的Dom的z-index设置为最高，分享些许我在此项目的核心代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 获取存储当前Dom位置的对象</span></span><br><span class=\"line\"><span class=\"comment\">**/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myLocation = e.originalEvent.changedTouches[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 取clientX及clientY并传入elementFromPoint获取当前手指触摸的Dom</span></span><br><span class=\"line\"><span class=\"comment\">**/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> realTarget = <span class=\"built_in\">document</span>.elementFromPoint(myLocation.clientX, myLocation.clientY);</span><br></pre></td></tr></table></figure>\n"},{"title":"网页中常见的错误码","toc":false,"date":"2017-07-20T02:00:00.000Z","_content":"\n# 100（继续）\n请求者应当继续提出请求。服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。\n\n<!-- more -->\n\n# 101（切换协议）\n请求者已要求服务器切换协议，服务器已确认并准备切换。\n# 2xx（成功）\n表示成功处理了请求的状态码。\n## 200（成功）\n服务器已成功处理了请求。通常，这表示服务器提供了请求的网页。如果是对您的 robots.txt 文件显示此状态码，则表示 Googlebot 已成功检索到该文件。\n## 201（已创建）\n请求成功并且服务器创建了新的资源。\n## 202（已接受）\n服务器已接受请求，但尚未处理。\n## 203（非授权信息）\n服务器已成功处理了请求，但返回的信息可能来自另一来源。\n## 204（无内容）\n服务器成功处理了请求，但没有返回任何内容。\n## 205（重置内容）\n服务器成功处理了请求，但没有返回任何内容。与 204 响应不同，此响应要求请求者重置文档视图（例如，清除表单内容以输入新内容）。\n## 206（部分内容）\n服务器成功处理了部分 GET 请求。\n# 3xx（重定向）\n要完成请求，需要进一步操作。通常，这些状态码用来重定向。Google 建议您在每次请求中使用重定向不要超过 5 次。您可以使用网站管理员工具查看一下 Googlebot 在抓取重定向网页时是否遇到问题。诊断下的网络抓取页列出了由于重定向错误导致 Googlebot 无法抓取的网址。\n## 300（多种选择）\n针对请求，服务器可执行多种操作。服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。\n## 301（永久移动）\n请求的网页已永久移动到新位置。服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。您应使用此代码告诉 Googlebot 某个网页或网站已永久移动到新位置。\n## 302（临时移动）\n服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来响应以后的请求。此代码与响应 GET 和 HEAD 请求的 301 代码类似，会自动将请求者转到不同的位置，但您不应使用此代码来告诉 Googlebot 某个网页或网站已经移动，因为 Googlebot 会继续抓取原有位置并编制索引。\n## 303（查看其他位置）\n请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。对于除 HEAD 之外的所有请求，服务器会自动转到其他位置。\n## 304（未修改）\n自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。\n如果网页自请求者上次请求后再也没有更改过，您应将服务器配置为返回此响应（称为 If-Modified-Since HTTP 标头）。服务器可以告诉 Googlebot 自从上次抓取后网页没有变更，进而节省带宽和开销。\n## 305（使用代理）\n请求者只能使用代理访问请求的网页。如果服务器返回此响应，还表示请求者应使用代理。\n## 307（临时重定向）\n服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来响应以后的请求。此代码与响应 GET 和 HEAD 请求的 <a href=answer.py?answer=>301</a> 代码类似，会自动将请求者转到不同的位置，但您不应使用此代码来告诉 Googlebot 某个页面或网站已经移动，因为 Googlebot 会继续抓取原有位置并编制索引。\n# 4xx（请求错误）\n这些状态码表示请求可能出错，妨碍了服务器的处理。\n## 400（错误请求）\n服务器不理解请求的语法。\n## 401（未授权）\n请求要求身份验证。对于登录后请求的网页，服务器可能返回此响应。\n## 403（禁止）\n服务器拒绝请求。如果您在 Googlebot 尝试抓取您网站上的有效网页时看到此状态码（您可以在 Google 网站管理员工具诊断下的网络抓取页面上看到此信息），可能是您的服务器或主机拒绝了 Googlebot 访问。\n## 404（未找到）\n服务器找不到请求的网页。例如，对于服务器上不存在的网页经常会返回此代码。如果您的网站上没有 robots.txt 文件，而您在 Google 网站管理员工具“诊断”标签的 robots.txt 页上看到此状态码，则这是正确的状态码。但是，如果您有 robots.txt 文件而又看到此状态码，则说明您的 robots.txt 文件可能命名错误或位于错误的位置（该文件应当位于顶级域，名为 robots.txt）。如果对于 Googlebot 抓取的网址看到此状态码（在”诊断”标签的 HTTP 错误页面上），则表示 Googlebot 跟随的可能是另一个页面的无效链接（是旧链接或输入有误的链接）。\n## 405（方法禁用）\n禁用请求中指定的方法。\n## 406（不接受）\n无法使用请求的内容特性响应请求的网页。\n## 407（需要代理授权）\n此状态码与 <a href=answer.py?answer=35128>401（未授权）</a>类似，但指定请求者应当授权使用代理。如果服务器返回此响应，还表示请求者应当使用代理。\n## 408（请求超时）\n服务器等候请求时发生超时。\n## 409（冲突）\n服务器在完成请求时发生冲突。服务器必须在响应中包含有关冲突的信息。服务器在响应与前一个请求相冲突的 PUT 请求时可能会返回此代码，以及两个请求的差异列表。\n## 410（已删除）\n如果请求的资源已永久删除，服务器就会返回此响应。该代码与 404（未找到）代码类似，但在资源以前存在而现在不存在的情况下，有时会用来替代 404 代码。如果资源已永久移动，您应使用 301 指定资源的新位置。\n## 411（需要有效长度）\n服务器不接受不含有效内容长度标头字段的请求。\n## 412（未满足前提条件）\n服务器未满足请求者在请求中设置的其中一个前提条件。\n## 413（请求实体过大）\n服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。\n## 414（请求的 URI 过长）\n请求的 URI（通常为网址）过长，服务器无法处理。\n## 415（不支持的媒体类型）\n请求的格式不受请求页面的支持。\n## 416（请求范围不符合要求）\n如果页面无法提供请求的范围，则服务器会返回此状态码。\n## 417（未满足期望值）\n服务器未满足”期望”请求标头字段的要求。\n# 5xx（服务器错误）\n这些状态码表示服务器在处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错。\n## 500（服务器内部错误）\n服务器遇到错误，无法完成请求。\n## 501（尚未实施）\n服务器不具备完成请求的功能。例如，服务器无法识别请求方法时可能会返回此代码。\n## 502（错误网关）\n服务器作为网关或代理，从上游服务器收到无效响应。\n## 503（服务不可用）\n服务器目前无法使用（由于超载或停机维护）。通常，这只是暂时状态。\n## 504（网关超时）\n服务器作为网关或代理，但是没有及时从上游服务器收到请求。\n## 505（HTTP 版本不受支持）\n服务器不支持请求中所用的 HTTP 协议版本。\n","source":"_posts/网页中常见的错误码.md","raw":"---\ntitle: 网页中常见的错误码\ntags:\n  - 运维\ncategories:\n  - Web开发\ntoc: false\ndate: 2017-07-20 10:00:00\n---\n\n# 100（继续）\n请求者应当继续提出请求。服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。\n\n<!-- more -->\n\n# 101（切换协议）\n请求者已要求服务器切换协议，服务器已确认并准备切换。\n# 2xx（成功）\n表示成功处理了请求的状态码。\n## 200（成功）\n服务器已成功处理了请求。通常，这表示服务器提供了请求的网页。如果是对您的 robots.txt 文件显示此状态码，则表示 Googlebot 已成功检索到该文件。\n## 201（已创建）\n请求成功并且服务器创建了新的资源。\n## 202（已接受）\n服务器已接受请求，但尚未处理。\n## 203（非授权信息）\n服务器已成功处理了请求，但返回的信息可能来自另一来源。\n## 204（无内容）\n服务器成功处理了请求，但没有返回任何内容。\n## 205（重置内容）\n服务器成功处理了请求，但没有返回任何内容。与 204 响应不同，此响应要求请求者重置文档视图（例如，清除表单内容以输入新内容）。\n## 206（部分内容）\n服务器成功处理了部分 GET 请求。\n# 3xx（重定向）\n要完成请求，需要进一步操作。通常，这些状态码用来重定向。Google 建议您在每次请求中使用重定向不要超过 5 次。您可以使用网站管理员工具查看一下 Googlebot 在抓取重定向网页时是否遇到问题。诊断下的网络抓取页列出了由于重定向错误导致 Googlebot 无法抓取的网址。\n## 300（多种选择）\n针对请求，服务器可执行多种操作。服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。\n## 301（永久移动）\n请求的网页已永久移动到新位置。服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。您应使用此代码告诉 Googlebot 某个网页或网站已永久移动到新位置。\n## 302（临时移动）\n服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来响应以后的请求。此代码与响应 GET 和 HEAD 请求的 301 代码类似，会自动将请求者转到不同的位置，但您不应使用此代码来告诉 Googlebot 某个网页或网站已经移动，因为 Googlebot 会继续抓取原有位置并编制索引。\n## 303（查看其他位置）\n请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。对于除 HEAD 之外的所有请求，服务器会自动转到其他位置。\n## 304（未修改）\n自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。\n如果网页自请求者上次请求后再也没有更改过，您应将服务器配置为返回此响应（称为 If-Modified-Since HTTP 标头）。服务器可以告诉 Googlebot 自从上次抓取后网页没有变更，进而节省带宽和开销。\n## 305（使用代理）\n请求者只能使用代理访问请求的网页。如果服务器返回此响应，还表示请求者应使用代理。\n## 307（临时重定向）\n服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来响应以后的请求。此代码与响应 GET 和 HEAD 请求的 <a href=answer.py?answer=>301</a> 代码类似，会自动将请求者转到不同的位置，但您不应使用此代码来告诉 Googlebot 某个页面或网站已经移动，因为 Googlebot 会继续抓取原有位置并编制索引。\n# 4xx（请求错误）\n这些状态码表示请求可能出错，妨碍了服务器的处理。\n## 400（错误请求）\n服务器不理解请求的语法。\n## 401（未授权）\n请求要求身份验证。对于登录后请求的网页，服务器可能返回此响应。\n## 403（禁止）\n服务器拒绝请求。如果您在 Googlebot 尝试抓取您网站上的有效网页时看到此状态码（您可以在 Google 网站管理员工具诊断下的网络抓取页面上看到此信息），可能是您的服务器或主机拒绝了 Googlebot 访问。\n## 404（未找到）\n服务器找不到请求的网页。例如，对于服务器上不存在的网页经常会返回此代码。如果您的网站上没有 robots.txt 文件，而您在 Google 网站管理员工具“诊断”标签的 robots.txt 页上看到此状态码，则这是正确的状态码。但是，如果您有 robots.txt 文件而又看到此状态码，则说明您的 robots.txt 文件可能命名错误或位于错误的位置（该文件应当位于顶级域，名为 robots.txt）。如果对于 Googlebot 抓取的网址看到此状态码（在”诊断”标签的 HTTP 错误页面上），则表示 Googlebot 跟随的可能是另一个页面的无效链接（是旧链接或输入有误的链接）。\n## 405（方法禁用）\n禁用请求中指定的方法。\n## 406（不接受）\n无法使用请求的内容特性响应请求的网页。\n## 407（需要代理授权）\n此状态码与 <a href=answer.py?answer=35128>401（未授权）</a>类似，但指定请求者应当授权使用代理。如果服务器返回此响应，还表示请求者应当使用代理。\n## 408（请求超时）\n服务器等候请求时发生超时。\n## 409（冲突）\n服务器在完成请求时发生冲突。服务器必须在响应中包含有关冲突的信息。服务器在响应与前一个请求相冲突的 PUT 请求时可能会返回此代码，以及两个请求的差异列表。\n## 410（已删除）\n如果请求的资源已永久删除，服务器就会返回此响应。该代码与 404（未找到）代码类似，但在资源以前存在而现在不存在的情况下，有时会用来替代 404 代码。如果资源已永久移动，您应使用 301 指定资源的新位置。\n## 411（需要有效长度）\n服务器不接受不含有效内容长度标头字段的请求。\n## 412（未满足前提条件）\n服务器未满足请求者在请求中设置的其中一个前提条件。\n## 413（请求实体过大）\n服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。\n## 414（请求的 URI 过长）\n请求的 URI（通常为网址）过长，服务器无法处理。\n## 415（不支持的媒体类型）\n请求的格式不受请求页面的支持。\n## 416（请求范围不符合要求）\n如果页面无法提供请求的范围，则服务器会返回此状态码。\n## 417（未满足期望值）\n服务器未满足”期望”请求标头字段的要求。\n# 5xx（服务器错误）\n这些状态码表示服务器在处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错。\n## 500（服务器内部错误）\n服务器遇到错误，无法完成请求。\n## 501（尚未实施）\n服务器不具备完成请求的功能。例如，服务器无法识别请求方法时可能会返回此代码。\n## 502（错误网关）\n服务器作为网关或代理，从上游服务器收到无效响应。\n## 503（服务不可用）\n服务器目前无法使用（由于超载或停机维护）。通常，这只是暂时状态。\n## 504（网关超时）\n服务器作为网关或代理，但是没有及时从上游服务器收到请求。\n## 505（HTTP 版本不受支持）\n服务器不支持请求中所用的 HTTP 协议版本。\n","slug":"网页中常见的错误码","published":1,"updated":"2019-11-07T02:24:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo1x00agh5s60qcr35g2","content":"<h1 id=\"100（继续）\"><a href=\"#100（继续）\" class=\"headerlink\" title=\"100（继续）\"></a>100（继续）</h1><p>请求者应当继续提出请求。服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。</p>\n<a id=\"more\"></a>\n<h1 id=\"101（切换协议）\"><a href=\"#101（切换协议）\" class=\"headerlink\" title=\"101（切换协议）\"></a>101（切换协议）</h1><p>请求者已要求服务器切换协议，服务器已确认并准备切换。</p>\n<h1 id=\"2xx（成功）\"><a href=\"#2xx（成功）\" class=\"headerlink\" title=\"2xx（成功）\"></a>2xx（成功）</h1><p>表示成功处理了请求的状态码。</p>\n<h2 id=\"200（成功）\"><a href=\"#200（成功）\" class=\"headerlink\" title=\"200（成功）\"></a>200（成功）</h2><p>服务器已成功处理了请求。通常，这表示服务器提供了请求的网页。如果是对您的 robots.txt 文件显示此状态码，则表示 Googlebot 已成功检索到该文件。</p>\n<h2 id=\"201（已创建）\"><a href=\"#201（已创建）\" class=\"headerlink\" title=\"201（已创建）\"></a>201（已创建）</h2><p>请求成功并且服务器创建了新的资源。</p>\n<h2 id=\"202（已接受）\"><a href=\"#202（已接受）\" class=\"headerlink\" title=\"202（已接受）\"></a>202（已接受）</h2><p>服务器已接受请求，但尚未处理。</p>\n<h2 id=\"203（非授权信息）\"><a href=\"#203（非授权信息）\" class=\"headerlink\" title=\"203（非授权信息）\"></a>203（非授权信息）</h2><p>服务器已成功处理了请求，但返回的信息可能来自另一来源。</p>\n<h2 id=\"204（无内容）\"><a href=\"#204（无内容）\" class=\"headerlink\" title=\"204（无内容）\"></a>204（无内容）</h2><p>服务器成功处理了请求，但没有返回任何内容。</p>\n<h2 id=\"205（重置内容）\"><a href=\"#205（重置内容）\" class=\"headerlink\" title=\"205（重置内容）\"></a>205（重置内容）</h2><p>服务器成功处理了请求，但没有返回任何内容。与 204 响应不同，此响应要求请求者重置文档视图（例如，清除表单内容以输入新内容）。</p>\n<h2 id=\"206（部分内容）\"><a href=\"#206（部分内容）\" class=\"headerlink\" title=\"206（部分内容）\"></a>206（部分内容）</h2><p>服务器成功处理了部分 GET 请求。</p>\n<h1 id=\"3xx（重定向）\"><a href=\"#3xx（重定向）\" class=\"headerlink\" title=\"3xx（重定向）\"></a>3xx（重定向）</h1><p>要完成请求，需要进一步操作。通常，这些状态码用来重定向。Google 建议您在每次请求中使用重定向不要超过 5 次。您可以使用网站管理员工具查看一下 Googlebot 在抓取重定向网页时是否遇到问题。诊断下的网络抓取页列出了由于重定向错误导致 Googlebot 无法抓取的网址。</p>\n<h2 id=\"300（多种选择）\"><a href=\"#300（多种选择）\" class=\"headerlink\" title=\"300（多种选择）\"></a>300（多种选择）</h2><p>针对请求，服务器可执行多种操作。服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。</p>\n<h2 id=\"301（永久移动）\"><a href=\"#301（永久移动）\" class=\"headerlink\" title=\"301（永久移动）\"></a>301（永久移动）</h2><p>请求的网页已永久移动到新位置。服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。您应使用此代码告诉 Googlebot 某个网页或网站已永久移动到新位置。</p>\n<h2 id=\"302（临时移动）\"><a href=\"#302（临时移动）\" class=\"headerlink\" title=\"302（临时移动）\"></a>302（临时移动）</h2><p>服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来响应以后的请求。此代码与响应 GET 和 HEAD 请求的 301 代码类似，会自动将请求者转到不同的位置，但您不应使用此代码来告诉 Googlebot 某个网页或网站已经移动，因为 Googlebot 会继续抓取原有位置并编制索引。</p>\n<h2 id=\"303（查看其他位置）\"><a href=\"#303（查看其他位置）\" class=\"headerlink\" title=\"303（查看其他位置）\"></a>303（查看其他位置）</h2><p>请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。对于除 HEAD 之外的所有请求，服务器会自动转到其他位置。</p>\n<h2 id=\"304（未修改）\"><a href=\"#304（未修改）\" class=\"headerlink\" title=\"304（未修改）\"></a>304（未修改）</h2><p>自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。<br>如果网页自请求者上次请求后再也没有更改过，您应将服务器配置为返回此响应（称为 If-Modified-Since HTTP 标头）。服务器可以告诉 Googlebot 自从上次抓取后网页没有变更，进而节省带宽和开销。</p>\n<h2 id=\"305（使用代理）\"><a href=\"#305（使用代理）\" class=\"headerlink\" title=\"305（使用代理）\"></a>305（使用代理）</h2><p>请求者只能使用代理访问请求的网页。如果服务器返回此响应，还表示请求者应使用代理。</p>\n<h2 id=\"307（临时重定向）\"><a href=\"#307（临时重定向）\" class=\"headerlink\" title=\"307（临时重定向）\"></a>307（临时重定向）</h2><p>服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来响应以后的请求。此代码与响应 GET 和 HEAD 请求的 <a href=\"answer.py?answer=\">301</a> 代码类似，会自动将请求者转到不同的位置，但您不应使用此代码来告诉 Googlebot 某个页面或网站已经移动，因为 Googlebot 会继续抓取原有位置并编制索引。</p>\n<h1 id=\"4xx（请求错误）\"><a href=\"#4xx（请求错误）\" class=\"headerlink\" title=\"4xx（请求错误）\"></a>4xx（请求错误）</h1><p>这些状态码表示请求可能出错，妨碍了服务器的处理。</p>\n<h2 id=\"400（错误请求）\"><a href=\"#400（错误请求）\" class=\"headerlink\" title=\"400（错误请求）\"></a>400（错误请求）</h2><p>服务器不理解请求的语法。</p>\n<h2 id=\"401（未授权）\"><a href=\"#401（未授权）\" class=\"headerlink\" title=\"401（未授权）\"></a>401（未授权）</h2><p>请求要求身份验证。对于登录后请求的网页，服务器可能返回此响应。</p>\n<h2 id=\"403（禁止）\"><a href=\"#403（禁止）\" class=\"headerlink\" title=\"403（禁止）\"></a>403（禁止）</h2><p>服务器拒绝请求。如果您在 Googlebot 尝试抓取您网站上的有效网页时看到此状态码（您可以在 Google 网站管理员工具诊断下的网络抓取页面上看到此信息），可能是您的服务器或主机拒绝了 Googlebot 访问。</p>\n<h2 id=\"404（未找到）\"><a href=\"#404（未找到）\" class=\"headerlink\" title=\"404（未找到）\"></a>404（未找到）</h2><p>服务器找不到请求的网页。例如，对于服务器上不存在的网页经常会返回此代码。如果您的网站上没有 robots.txt 文件，而您在 Google 网站管理员工具“诊断”标签的 robots.txt 页上看到此状态码，则这是正确的状态码。但是，如果您有 robots.txt 文件而又看到此状态码，则说明您的 robots.txt 文件可能命名错误或位于错误的位置（该文件应当位于顶级域，名为 robots.txt）。如果对于 Googlebot 抓取的网址看到此状态码（在”诊断”标签的 HTTP 错误页面上），则表示 Googlebot 跟随的可能是另一个页面的无效链接（是旧链接或输入有误的链接）。</p>\n<h2 id=\"405（方法禁用）\"><a href=\"#405（方法禁用）\" class=\"headerlink\" title=\"405（方法禁用）\"></a>405（方法禁用）</h2><p>禁用请求中指定的方法。</p>\n<h2 id=\"406（不接受）\"><a href=\"#406（不接受）\" class=\"headerlink\" title=\"406（不接受）\"></a>406（不接受）</h2><p>无法使用请求的内容特性响应请求的网页。</p>\n<h2 id=\"407（需要代理授权）\"><a href=\"#407（需要代理授权）\" class=\"headerlink\" title=\"407（需要代理授权）\"></a>407（需要代理授权）</h2><p>此状态码与 <a href=\"answer.py?answer=35128\">401（未授权）</a>类似，但指定请求者应当授权使用代理。如果服务器返回此响应，还表示请求者应当使用代理。</p>\n<h2 id=\"408（请求超时）\"><a href=\"#408（请求超时）\" class=\"headerlink\" title=\"408（请求超时）\"></a>408（请求超时）</h2><p>服务器等候请求时发生超时。</p>\n<h2 id=\"409（冲突）\"><a href=\"#409（冲突）\" class=\"headerlink\" title=\"409（冲突）\"></a>409（冲突）</h2><p>服务器在完成请求时发生冲突。服务器必须在响应中包含有关冲突的信息。服务器在响应与前一个请求相冲突的 PUT 请求时可能会返回此代码，以及两个请求的差异列表。</p>\n<h2 id=\"410（已删除）\"><a href=\"#410（已删除）\" class=\"headerlink\" title=\"410（已删除）\"></a>410（已删除）</h2><p>如果请求的资源已永久删除，服务器就会返回此响应。该代码与 404（未找到）代码类似，但在资源以前存在而现在不存在的情况下，有时会用来替代 404 代码。如果资源已永久移动，您应使用 301 指定资源的新位置。</p>\n<h2 id=\"411（需要有效长度）\"><a href=\"#411（需要有效长度）\" class=\"headerlink\" title=\"411（需要有效长度）\"></a>411（需要有效长度）</h2><p>服务器不接受不含有效内容长度标头字段的请求。</p>\n<h2 id=\"412（未满足前提条件）\"><a href=\"#412（未满足前提条件）\" class=\"headerlink\" title=\"412（未满足前提条件）\"></a>412（未满足前提条件）</h2><p>服务器未满足请求者在请求中设置的其中一个前提条件。</p>\n<h2 id=\"413（请求实体过大）\"><a href=\"#413（请求实体过大）\" class=\"headerlink\" title=\"413（请求实体过大）\"></a>413（请求实体过大）</h2><p>服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。</p>\n<h2 id=\"414（请求的-URI-过长）\"><a href=\"#414（请求的-URI-过长）\" class=\"headerlink\" title=\"414（请求的 URI 过长）\"></a>414（请求的 URI 过长）</h2><p>请求的 URI（通常为网址）过长，服务器无法处理。</p>\n<h2 id=\"415（不支持的媒体类型）\"><a href=\"#415（不支持的媒体类型）\" class=\"headerlink\" title=\"415（不支持的媒体类型）\"></a>415（不支持的媒体类型）</h2><p>请求的格式不受请求页面的支持。</p>\n<h2 id=\"416（请求范围不符合要求）\"><a href=\"#416（请求范围不符合要求）\" class=\"headerlink\" title=\"416（请求范围不符合要求）\"></a>416（请求范围不符合要求）</h2><p>如果页面无法提供请求的范围，则服务器会返回此状态码。</p>\n<h2 id=\"417（未满足期望值）\"><a href=\"#417（未满足期望值）\" class=\"headerlink\" title=\"417（未满足期望值）\"></a>417（未满足期望值）</h2><p>服务器未满足”期望”请求标头字段的要求。</p>\n<h1 id=\"5xx（服务器错误）\"><a href=\"#5xx（服务器错误）\" class=\"headerlink\" title=\"5xx（服务器错误）\"></a>5xx（服务器错误）</h1><p>这些状态码表示服务器在处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错。</p>\n<h2 id=\"500（服务器内部错误）\"><a href=\"#500（服务器内部错误）\" class=\"headerlink\" title=\"500（服务器内部错误）\"></a>500（服务器内部错误）</h2><p>服务器遇到错误，无法完成请求。</p>\n<h2 id=\"501（尚未实施）\"><a href=\"#501（尚未实施）\" class=\"headerlink\" title=\"501（尚未实施）\"></a>501（尚未实施）</h2><p>服务器不具备完成请求的功能。例如，服务器无法识别请求方法时可能会返回此代码。</p>\n<h2 id=\"502（错误网关）\"><a href=\"#502（错误网关）\" class=\"headerlink\" title=\"502（错误网关）\"></a>502（错误网关）</h2><p>服务器作为网关或代理，从上游服务器收到无效响应。</p>\n<h2 id=\"503（服务不可用）\"><a href=\"#503（服务不可用）\" class=\"headerlink\" title=\"503（服务不可用）\"></a>503（服务不可用）</h2><p>服务器目前无法使用（由于超载或停机维护）。通常，这只是暂时状态。</p>\n<h2 id=\"504（网关超时）\"><a href=\"#504（网关超时）\" class=\"headerlink\" title=\"504（网关超时）\"></a>504（网关超时）</h2><p>服务器作为网关或代理，但是没有及时从上游服务器收到请求。</p>\n<h2 id=\"505（HTTP-版本不受支持）\"><a href=\"#505（HTTP-版本不受支持）\" class=\"headerlink\" title=\"505（HTTP 版本不受支持）\"></a>505（HTTP 版本不受支持）</h2><p>服务器不支持请求中所用的 HTTP 协议版本。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"100（继续）\"><a href=\"#100（继续）\" class=\"headerlink\" title=\"100（继续）\"></a>100（继续）</h1><p>请求者应当继续提出请求。服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。</p>","more":"<h1 id=\"101（切换协议）\"><a href=\"#101（切换协议）\" class=\"headerlink\" title=\"101（切换协议）\"></a>101（切换协议）</h1><p>请求者已要求服务器切换协议，服务器已确认并准备切换。</p>\n<h1 id=\"2xx（成功）\"><a href=\"#2xx（成功）\" class=\"headerlink\" title=\"2xx（成功）\"></a>2xx（成功）</h1><p>表示成功处理了请求的状态码。</p>\n<h2 id=\"200（成功）\"><a href=\"#200（成功）\" class=\"headerlink\" title=\"200（成功）\"></a>200（成功）</h2><p>服务器已成功处理了请求。通常，这表示服务器提供了请求的网页。如果是对您的 robots.txt 文件显示此状态码，则表示 Googlebot 已成功检索到该文件。</p>\n<h2 id=\"201（已创建）\"><a href=\"#201（已创建）\" class=\"headerlink\" title=\"201（已创建）\"></a>201（已创建）</h2><p>请求成功并且服务器创建了新的资源。</p>\n<h2 id=\"202（已接受）\"><a href=\"#202（已接受）\" class=\"headerlink\" title=\"202（已接受）\"></a>202（已接受）</h2><p>服务器已接受请求，但尚未处理。</p>\n<h2 id=\"203（非授权信息）\"><a href=\"#203（非授权信息）\" class=\"headerlink\" title=\"203（非授权信息）\"></a>203（非授权信息）</h2><p>服务器已成功处理了请求，但返回的信息可能来自另一来源。</p>\n<h2 id=\"204（无内容）\"><a href=\"#204（无内容）\" class=\"headerlink\" title=\"204（无内容）\"></a>204（无内容）</h2><p>服务器成功处理了请求，但没有返回任何内容。</p>\n<h2 id=\"205（重置内容）\"><a href=\"#205（重置内容）\" class=\"headerlink\" title=\"205（重置内容）\"></a>205（重置内容）</h2><p>服务器成功处理了请求，但没有返回任何内容。与 204 响应不同，此响应要求请求者重置文档视图（例如，清除表单内容以输入新内容）。</p>\n<h2 id=\"206（部分内容）\"><a href=\"#206（部分内容）\" class=\"headerlink\" title=\"206（部分内容）\"></a>206（部分内容）</h2><p>服务器成功处理了部分 GET 请求。</p>\n<h1 id=\"3xx（重定向）\"><a href=\"#3xx（重定向）\" class=\"headerlink\" title=\"3xx（重定向）\"></a>3xx（重定向）</h1><p>要完成请求，需要进一步操作。通常，这些状态码用来重定向。Google 建议您在每次请求中使用重定向不要超过 5 次。您可以使用网站管理员工具查看一下 Googlebot 在抓取重定向网页时是否遇到问题。诊断下的网络抓取页列出了由于重定向错误导致 Googlebot 无法抓取的网址。</p>\n<h2 id=\"300（多种选择）\"><a href=\"#300（多种选择）\" class=\"headerlink\" title=\"300（多种选择）\"></a>300（多种选择）</h2><p>针对请求，服务器可执行多种操作。服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。</p>\n<h2 id=\"301（永久移动）\"><a href=\"#301（永久移动）\" class=\"headerlink\" title=\"301（永久移动）\"></a>301（永久移动）</h2><p>请求的网页已永久移动到新位置。服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。您应使用此代码告诉 Googlebot 某个网页或网站已永久移动到新位置。</p>\n<h2 id=\"302（临时移动）\"><a href=\"#302（临时移动）\" class=\"headerlink\" title=\"302（临时移动）\"></a>302（临时移动）</h2><p>服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来响应以后的请求。此代码与响应 GET 和 HEAD 请求的 301 代码类似，会自动将请求者转到不同的位置，但您不应使用此代码来告诉 Googlebot 某个网页或网站已经移动，因为 Googlebot 会继续抓取原有位置并编制索引。</p>\n<h2 id=\"303（查看其他位置）\"><a href=\"#303（查看其他位置）\" class=\"headerlink\" title=\"303（查看其他位置）\"></a>303（查看其他位置）</h2><p>请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。对于除 HEAD 之外的所有请求，服务器会自动转到其他位置。</p>\n<h2 id=\"304（未修改）\"><a href=\"#304（未修改）\" class=\"headerlink\" title=\"304（未修改）\"></a>304（未修改）</h2><p>自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。<br>如果网页自请求者上次请求后再也没有更改过，您应将服务器配置为返回此响应（称为 If-Modified-Since HTTP 标头）。服务器可以告诉 Googlebot 自从上次抓取后网页没有变更，进而节省带宽和开销。</p>\n<h2 id=\"305（使用代理）\"><a href=\"#305（使用代理）\" class=\"headerlink\" title=\"305（使用代理）\"></a>305（使用代理）</h2><p>请求者只能使用代理访问请求的网页。如果服务器返回此响应，还表示请求者应使用代理。</p>\n<h2 id=\"307（临时重定向）\"><a href=\"#307（临时重定向）\" class=\"headerlink\" title=\"307（临时重定向）\"></a>307（临时重定向）</h2><p>服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来响应以后的请求。此代码与响应 GET 和 HEAD 请求的 <a href=\"answer.py?answer=\">301</a> 代码类似，会自动将请求者转到不同的位置，但您不应使用此代码来告诉 Googlebot 某个页面或网站已经移动，因为 Googlebot 会继续抓取原有位置并编制索引。</p>\n<h1 id=\"4xx（请求错误）\"><a href=\"#4xx（请求错误）\" class=\"headerlink\" title=\"4xx（请求错误）\"></a>4xx（请求错误）</h1><p>这些状态码表示请求可能出错，妨碍了服务器的处理。</p>\n<h2 id=\"400（错误请求）\"><a href=\"#400（错误请求）\" class=\"headerlink\" title=\"400（错误请求）\"></a>400（错误请求）</h2><p>服务器不理解请求的语法。</p>\n<h2 id=\"401（未授权）\"><a href=\"#401（未授权）\" class=\"headerlink\" title=\"401（未授权）\"></a>401（未授权）</h2><p>请求要求身份验证。对于登录后请求的网页，服务器可能返回此响应。</p>\n<h2 id=\"403（禁止）\"><a href=\"#403（禁止）\" class=\"headerlink\" title=\"403（禁止）\"></a>403（禁止）</h2><p>服务器拒绝请求。如果您在 Googlebot 尝试抓取您网站上的有效网页时看到此状态码（您可以在 Google 网站管理员工具诊断下的网络抓取页面上看到此信息），可能是您的服务器或主机拒绝了 Googlebot 访问。</p>\n<h2 id=\"404（未找到）\"><a href=\"#404（未找到）\" class=\"headerlink\" title=\"404（未找到）\"></a>404（未找到）</h2><p>服务器找不到请求的网页。例如，对于服务器上不存在的网页经常会返回此代码。如果您的网站上没有 robots.txt 文件，而您在 Google 网站管理员工具“诊断”标签的 robots.txt 页上看到此状态码，则这是正确的状态码。但是，如果您有 robots.txt 文件而又看到此状态码，则说明您的 robots.txt 文件可能命名错误或位于错误的位置（该文件应当位于顶级域，名为 robots.txt）。如果对于 Googlebot 抓取的网址看到此状态码（在”诊断”标签的 HTTP 错误页面上），则表示 Googlebot 跟随的可能是另一个页面的无效链接（是旧链接或输入有误的链接）。</p>\n<h2 id=\"405（方法禁用）\"><a href=\"#405（方法禁用）\" class=\"headerlink\" title=\"405（方法禁用）\"></a>405（方法禁用）</h2><p>禁用请求中指定的方法。</p>\n<h2 id=\"406（不接受）\"><a href=\"#406（不接受）\" class=\"headerlink\" title=\"406（不接受）\"></a>406（不接受）</h2><p>无法使用请求的内容特性响应请求的网页。</p>\n<h2 id=\"407（需要代理授权）\"><a href=\"#407（需要代理授权）\" class=\"headerlink\" title=\"407（需要代理授权）\"></a>407（需要代理授权）</h2><p>此状态码与 <a href=\"answer.py?answer=35128\">401（未授权）</a>类似，但指定请求者应当授权使用代理。如果服务器返回此响应，还表示请求者应当使用代理。</p>\n<h2 id=\"408（请求超时）\"><a href=\"#408（请求超时）\" class=\"headerlink\" title=\"408（请求超时）\"></a>408（请求超时）</h2><p>服务器等候请求时发生超时。</p>\n<h2 id=\"409（冲突）\"><a href=\"#409（冲突）\" class=\"headerlink\" title=\"409（冲突）\"></a>409（冲突）</h2><p>服务器在完成请求时发生冲突。服务器必须在响应中包含有关冲突的信息。服务器在响应与前一个请求相冲突的 PUT 请求时可能会返回此代码，以及两个请求的差异列表。</p>\n<h2 id=\"410（已删除）\"><a href=\"#410（已删除）\" class=\"headerlink\" title=\"410（已删除）\"></a>410（已删除）</h2><p>如果请求的资源已永久删除，服务器就会返回此响应。该代码与 404（未找到）代码类似，但在资源以前存在而现在不存在的情况下，有时会用来替代 404 代码。如果资源已永久移动，您应使用 301 指定资源的新位置。</p>\n<h2 id=\"411（需要有效长度）\"><a href=\"#411（需要有效长度）\" class=\"headerlink\" title=\"411（需要有效长度）\"></a>411（需要有效长度）</h2><p>服务器不接受不含有效内容长度标头字段的请求。</p>\n<h2 id=\"412（未满足前提条件）\"><a href=\"#412（未满足前提条件）\" class=\"headerlink\" title=\"412（未满足前提条件）\"></a>412（未满足前提条件）</h2><p>服务器未满足请求者在请求中设置的其中一个前提条件。</p>\n<h2 id=\"413（请求实体过大）\"><a href=\"#413（请求实体过大）\" class=\"headerlink\" title=\"413（请求实体过大）\"></a>413（请求实体过大）</h2><p>服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。</p>\n<h2 id=\"414（请求的-URI-过长）\"><a href=\"#414（请求的-URI-过长）\" class=\"headerlink\" title=\"414（请求的 URI 过长）\"></a>414（请求的 URI 过长）</h2><p>请求的 URI（通常为网址）过长，服务器无法处理。</p>\n<h2 id=\"415（不支持的媒体类型）\"><a href=\"#415（不支持的媒体类型）\" class=\"headerlink\" title=\"415（不支持的媒体类型）\"></a>415（不支持的媒体类型）</h2><p>请求的格式不受请求页面的支持。</p>\n<h2 id=\"416（请求范围不符合要求）\"><a href=\"#416（请求范围不符合要求）\" class=\"headerlink\" title=\"416（请求范围不符合要求）\"></a>416（请求范围不符合要求）</h2><p>如果页面无法提供请求的范围，则服务器会返回此状态码。</p>\n<h2 id=\"417（未满足期望值）\"><a href=\"#417（未满足期望值）\" class=\"headerlink\" title=\"417（未满足期望值）\"></a>417（未满足期望值）</h2><p>服务器未满足”期望”请求标头字段的要求。</p>\n<h1 id=\"5xx（服务器错误）\"><a href=\"#5xx（服务器错误）\" class=\"headerlink\" title=\"5xx（服务器错误）\"></a>5xx（服务器错误）</h1><p>这些状态码表示服务器在处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错。</p>\n<h2 id=\"500（服务器内部错误）\"><a href=\"#500（服务器内部错误）\" class=\"headerlink\" title=\"500（服务器内部错误）\"></a>500（服务器内部错误）</h2><p>服务器遇到错误，无法完成请求。</p>\n<h2 id=\"501（尚未实施）\"><a href=\"#501（尚未实施）\" class=\"headerlink\" title=\"501（尚未实施）\"></a>501（尚未实施）</h2><p>服务器不具备完成请求的功能。例如，服务器无法识别请求方法时可能会返回此代码。</p>\n<h2 id=\"502（错误网关）\"><a href=\"#502（错误网关）\" class=\"headerlink\" title=\"502（错误网关）\"></a>502（错误网关）</h2><p>服务器作为网关或代理，从上游服务器收到无效响应。</p>\n<h2 id=\"503（服务不可用）\"><a href=\"#503（服务不可用）\" class=\"headerlink\" title=\"503（服务不可用）\"></a>503（服务不可用）</h2><p>服务器目前无法使用（由于超载或停机维护）。通常，这只是暂时状态。</p>\n<h2 id=\"504（网关超时）\"><a href=\"#504（网关超时）\" class=\"headerlink\" title=\"504（网关超时）\"></a>504（网关超时）</h2><p>服务器作为网关或代理，但是没有及时从上游服务器收到请求。</p>\n<h2 id=\"505（HTTP-版本不受支持）\"><a href=\"#505（HTTP-版本不受支持）\" class=\"headerlink\" title=\"505（HTTP 版本不受支持）\"></a>505（HTTP 版本不受支持）</h2><p>服务器不支持请求中所用的 HTTP 协议版本。</p>"},{"title":"自律，是一个人最好的修养","toc":false,"date":"2019-05-16T09:41:52.000Z","_content":"\n因为想要照亮世界，所以我想照亮自己。\n\n昨天晚上刷微博，看见一则很有意思的笑话：\n\n36岁林依晨告诉你：自律，是一个人最好的修行\n\n这似曾相识的一幕是不是很熟悉？是不是从来没见过自己这么“倔强”的一面？\n\n说白了，其实是你抵挡不住舒适安逸的诱惑。\n\n知乎上有个很火的话题：是什么让你保持长久的自律？\n\n我最喜欢的一个回答是：\n\n“对我而言，高度自律是因为内心有强烈的驱动力，并且深刻的知道不自律的后果。正是因为之前痛苦的体验，才能让我在每次要坚持不下去时，都能因为不想再有那样体验而咬牙完成。我想，痛苦某种程度来说，也是一种财富吧。”\n<!-- more -->\n\n喜欢的理由很简单，我觉得很多人的自律都来源于恐惧，很少有人是因为内心的极度渴望。\n\n就像一位学者曾说：“我做到这些最大的动力是恐慌，我不能接受一个停滞的自己。”\n\n人生苦难重重，自律是解决人生问题最主要的工具，也是消除人生痛苦最重要的方法。\n\n01\n\n自爱的人，才能保持自律的心。\n\n王菲在《给自己的情书》中唱道：“自己都不爱，怎么相爱，怎么可给爱人好处？”\n\n生活中，我们常常会发现，越是优秀的人，往往越是懂得爱自己，将自己的生活和工作都照顾得非常好。\n\n他们每天都能六七点钟就按时起床，然后梳洗打扮，化上精致的妆容，神采奕奕地迎接新的一天。他们对生活总有各种新计划，想方设法地让自己过得更好。\n\n这个看脸的世界其实再公平不过了，一个人是否自爱，是否自律，从脸上就能一眼看出来。\n\n《恶作剧之吻》里饰演女主角袁湘琴的演员林依晨，前段时间开了直播。\n\n令人吃惊的是，30多岁的她和当年在电视剧里的容颜相比，竟然没有区别，镜头里的她，只是简单地画了眼线，皮肤紧致白皙，眼角无一丝细纹。\n\n岁月好像绕开了她，饶过了她，让她永驻十八岁俏皮可爱的容颜。\n\n然而，你我都该知道一个道理：所有光鲜亮丽的背后，都有其背后不为人知的种种付出。\n\n林依晨在直播中聊到她保养的方法：均衡饮食，发泄压力，一定要睡饱。\n\n这三点看起来很简单，但能数十年如一日地践行下来，却非常难。\n\n36岁林依晨告诉你：自律，是一个人最好的修行\n\n现代人面临着各种大大小小的饭局和美食诱惑。\n\n喜欢的食物不能多吃，不喜欢的食物也得吃，还要严格控制进食量，这并不简单。\n\n林依晨不拍戏的时候，每天十点以前睡觉，五点起床，比老年人还懂得养生。\n\n而现在很多年轻人习惯于每天晚上刷微博、刷朋友圈、刷各种资讯，唯独就是不睡觉。\n\n晚上熬到两三点，第二天赖床到十一二点，不吃早饭，精神涣散，长此以往，危害渐显。\n\n细纹、黑眼圈以及掩盖不住的疲态都会如约而至。\n\n只有爱自己，才是获得生活其他可能性的基础。\n\n只有爱自己，我们才能有一个好的身体去打拼事业；\n\n只有爱自己，我们才有底气去呵护和爱惜我们珍视的人；\n\n只有爱自己，我们才能在前进的道路上，不断增进我们的智慧。\n\n只有学会好好爱自己，我们才有资格去欣赏世界、拥抱世界和改变世界。\n\n当你终于学会爱惜自己的身体，不再做那些明知对自己有害的事情，不再用负面的情绪折磨自己时，你就会发现，你的人生进入了新的纪元。\n\n每一次蜕变，都意味着你摒弃了一个差的自己，朝着更好的方向又迈进了一步。\n\n唯有自爱，才能将人从一切黑暗中拯救出来，自爱的人，才能保持自律的心。\n\n自律的人，才能拥有更多可能性，更幸运的人生。\n\n因为想要照亮世界，所以我想照亮自己。\n\n36岁林依晨告诉你：自律，是一个人最好的修行\n\n02\n\n自律的人，懂得控制情绪和欲望，格局会更大。\n\n美国船王哈利在教育自己的儿子时，不是耳提面命，而是将儿子带进了赌场。\n\n一开始他教育儿子每次赌到输了一半本金的时候就收手，儿子尝试了几次，每每因为不甘心，而输掉所有本金。\n\n几番尝试后才学会认输，及时撒手。\n\n熟悉赌场规则之后，儿子开始赢钱，这时哈利劝儿子收手。\n\n儿子不甘心，想要多赢一点，再多赢一点，结果局势却急转而下，输掉了所有钱。\n\n经过几次训练，他终于可以做到将输赢都控制在百分之十以内，无论结果如何，都会及时收手。\n\n不被欲望掌控，就意味着控制住了人性中最贪婪的部分，不为情绪和感性左右，用理智冷静的态度去考量问题。\n\n有的时候，我们并不需要得到许多，只是我们误以为得到多了会比较幸福。\n\n大多数人的失败，不是因为自身技能缺失，而是因为控制不了自己的情绪和欲望。\n\n控制欲望，不是意味着牺牲，而是为了获取，为了赢取更广阔的人生。\n\n那些极度自律的人，享受的就是一种更为“高级”的成就感。能让人持续地感觉到“有趣”又“有成就感”的事情，而不是被情绪欲望掌控，获得短暂的快乐。\n\n当你的生活被“情绪”，“懒散”和“欲望”占据的时候，你可能就会生活的毫无秩序，活成一团混乱不堪的情绪，活着一滩毫无节制的肉。\n\n哲学家康德曾经说过：所谓自由，不是随心所欲，而是自我主宰。\n\n所以请记得：你的健康、时间、感情、未来，都无比珍贵、不能有一丝一毫的挥霍。\n\n36岁林依晨告诉你：自律，是一个人最好的修行\n\n03\n\n做一个自律的人，你需要明白这4点。\n\n1. 给自律开个头，早起。\n\n很少有人提到，其实想要保持自律，最重要而且力所能及马上就能做的，不是读书，不是冥想，不是拿小本本撰写誓言，而是很简单的两个字：早起！\n\n你一定想不到，早起对于一个人的生活和成长有多么重要的影响和帮助。\n\n正常人每天的睡眠大都在7到8小时，然而有趣的是，欧洲心理学家发现：\n\n在早起的人的潜意识里，每天的可支配时间是要更长一些的。\n\n而相对的是，在晚起者的潜意识里，每天则要变得短了许多。\n\n这是因为，在大部分人的潜意识里，是以中午12点为一天的分界线的，如果总是很晚才起床，一起床半天就没了，人的心理难免受影响，近而焦虑，同时效率也会相对变得低下，总之坏处多多。\n\n有次和同事打赌，说这个月我要每天6点钟起床，以前是8点。早起2小时意味着我要早点睡觉了。\n\n后来的每天我都准时6点在他微信上打“1”，刚开始的一周，打完“1”又接着睡了一个小时，由于内心的不安，又挣扎着起床。\n\n后来慢慢地习惯后，也就6点起床了。\n\n早起这段时间我花1小时看专业的书籍，或者听相关专业的课程，偶尔练练我喜欢的小提琴，剩下的时间用来慢悠悠的享受早餐。\n\n感受一下，当上班的日子有几个小时完全属于自己，你会觉得每天都有一个小假的愉悦感，工作也会积极很多。\n\n2. 自律不能一步到位。\n\n我们总想着制定一个计划，就能彻底改变自己的生活。但事实告诉我们，这是非常幼稚的想法。\n\n首先，如果人要完全依靠意志力去坚持某样事情，那几乎是不可能的。因为意志力是有限的，它就像体力一样，是会被消耗的。\n\n所以我们必须养成习惯，因为习惯可以帮助我们在消耗非常少的意志力的情况下，轻松地坚持做某件事。\n\n但一个习惯的养成是非常困难的，需要长期的刻意训练。\n\n所以，当你试图一次性控制太多事情的时候，你很容易因为意志力的过度消耗而变得身心疲惫，乃至崩溃。而结果，往往是一段时间的彻底放纵，以及对自己失去信心。\n\n因此，我们要循序渐进，一件一件去改变，一口是吃不成大胖子的。\n\n值得注意的是，中途我们可能会懈怠，比如想减肥的你，某一天控制不住去吃了一顿饱饭。或者想要每天睡前阅读的自己，某一天晚上去玩游戏了，而没有去阅读。\n\n这完全有可能发生，但这绝不意味着失败。\n\n我们很容易觉得，某一天没有坚持下来，这就是失败了，所以我还是放弃吧。\n\n不，你没有失败！你明天依然可以继续你的计划，只要你多坚持一天，你就多收获一分。\n\n成功的关键不是你执行的多完美，而是你坚持的有多久。\n\n所以从今天开始，扔掉那些写的太满的计划，先从一件小事做起，中途断过也没关系，这不意味着失败，做好了就奖励自己，没做好也别自责。\n\n当这件事养成习惯以后，你会发现自己可以毫不费力的坚持它了。\n\n3. 你要远离诱惑。\n\n记住，永远不要高估自己的意志力，面对诱惑，很少有人能够坚持不动摇。我们对抗诱惑也会消耗意志力，而时间久了，你就会彻底崩溃。\n\n前段时间，有位朋友无意说了句，玩抖音的都会不知不觉的刷几个小时。之前也看过很多文章，说抖音、王者多么多么吸引人，一下忍不住想试试自己会不会中招。结果证明，我也就一凡夫俗子。\n\n后来，实在受不了颓废的自己，半夜爬起来卸载了这些软件。\n\n所以，无论任何时候，你都要主动远离诱惑，就像不要考验人性一样，也不要考验自己的意志力。\n\n它们都是禁不起考验的。\n\n4. 自律与你的身体状态有关。\n\n事实上，你的身体状态，会极大影响你的意志、情绪、智力等等能力。\n\n有没有发现，当你没睡够的时候，会变得很容易发脾气，处理工作也容易走神，应该做的事情也不想去做。\n\n当我意识到这一点的时候，我就开始非常注意休息，因为只有身体得到良好的休息，才有足够的精力去处理工作。\n\n这里的休息，包括很多方面：\n\n早睡早起\n\n中午小憩，但不会超过30分钟\n\n体育锻炼\n\n周末彻底放下工作，去做一些不消耗太多精力的事情\n\n听音乐\n\n这一切都以恢复精力为目的，只有精力充沛，你才能做好事情，才能做到自律。\n\n保持自律并不是只靠意志力就能做好的，普通人很难拥有太过强大的意志力，而且也没有这个必要。\n\n你要利用一切可以帮助你自律的因素，无论是环境，还是身体条件，甚至是别人的督促，公司/学校的强制安排。\n\n只有这样，我们才能更高效的保持自律。\n\n自律，不是我们别别扭扭的委屈和控制做不想做的事。相反，是让你做的每件事，都让你更靠近自己内心真正更想要变成的样子。\n\n愿每个人都能修炼出一个高度自律的自己。\n\n实践就是成功 人生的修行 热爱生活\n\n01\n\n朋友圈里有个妹子，天天晚上9点准时晒微信运动的截图。\n\n少的时候2万步左右，多的时候甚至可以达到3万，常年占领着排行榜封面。\n\n当我喝着快乐肥宅水、吃着烤串放纵自我的时候，看到她的截图就会觉得罪恶感爆棚。\n\n自己每天不到2千的步数，和别人的几万步相比，简直少得可怜。\n\n关键是这个妹子，晒微信运动截图并不是为了彰显人设，或者为了他人的点赞。\n\n她是真真切切地将跑步的习惯刻在了骨子里，融在了生活中。\n\n和她聊天的时候，能感受到她对跑步的喜爱溢于言表。\n\n最初的她，穿个牛仔裤就开始跑，八百米就是极限了，跑完满嘴的血腥味。\n\n坚持了30天后，她的身体开始习惯这种节奏，不再觉得跑步是一种煎熬。\n\n坚持了半年后，她在没有节食的情况下，瘦了整整5公斤。\n\n现在的她，身材紧致、皮肤细腻、笑容明朗，看起来清爽又有活力。\n\n生活中，有太多人在工作的压力下放任口腹之欲，身材管理溃不成军。\n\n看到朋友圈里晒微信运动截图的好友，就屏蔽拉黑，不肯面对懒惰的自己。\n\n熬夜、喝酒、撸串、饮食毫无节制，不用运动的生活，看起来确实很舒服。\n\n但正如小说《大哥》里的句子所说：“人不能过得太舒服，等你满脑肥肠、每天都吃饱混天黑的时候，就离嗝屁着凉不远啦。”\n\n我害怕自律的人，因为他们能够在这个失控的时代，牢牢地掌握着人生主动权。\n\n每天都朝着更好的方向，用力地爱着自己。\n\n02\n\n德国有位23岁的女孩Sunny，在工作之后身材逐渐走样，肚子上的肥肉不断堆积。\n\n她问自己：难道这辈子就这样胖下去吗？\n\n不敢照镜子、不敢拍全身照、明明很年轻却被人称作大妈、看到身材纤细的姑娘总是忍不住自卑.....\n\n“不，我要开始改变自己。”\n\nSunny给自己制定了一个20周的跑步减脂计划，开始了自律的旅程。\n\n第一周，真的很难。没跑几步就感觉到心脾肺都很累，只能不断停下来休息。\n\n第二周，一样很糟。她不断怀疑自己的付出是否值得，到底什么时候才能轻松一些？\n\n疲惫、乏力、酸胀的肌肉、风雨交加的坏天气似乎都在跟她作对，但她仍选择继续坚持。\n\n就这样一直坚持到第九周，她终于有了一些进步，身体变得轻盈，越跑越轻松了。\n\n然而，突如其来的受伤，让她不得不中断跑步，影响了好几周的训练，她难过得甚至想要放弃。\n\n即使这样，她仍咬咬牙，继续上路，并且开始配合力量训练，结识新的朋友，重拾自信。\n\n第二十周，她的真实感受是：从未有过如此美好的感觉！\n\n她成功了，20周的时间，减重14公斤，腰围比之前小了3个号，速度比最开始提高了2分钟每公里。\n\n而变化最大的，是她从之前苦大仇深的表情，变成了现在洋溢在脸上的自信。\n\n我害怕自律的人，因为他们都太狠了，能做到大多数人想都不敢想的事情。\n\n03\n\n知乎上有这样一个问题：哪些事情永久地改变了你？\n\n一个点赞回答很高是这样的：\n\n每天坚持做一件小事。曾经我对唐诗宋词储备太少，于是我某一天晚上睡觉前，没刷手机，而是背了一首唐诗，就这样一直到现在，我能脱口背出600多首唐诗宋词。\n\n这让我想起《中国诗词大会》第三季的总冠军雷海为。\n\n在参加比赛之前，他只是个骑着电动车每天穿梭在大楼之间送餐的外卖小哥。\n\n然而，在商家等餐或者短暂休息的间隙，他都会拿出随身携带的《唐诗三百首》，坚持背诗。\n\n打工很累，连吃饭睡觉的时间都很奢侈。\n\n但正如苏轼说：“宁可食无肉，不可居无竹。”雷海为宁可放弃一些睡觉的时间，也要坚持背诗。\n\n董卿有这样一句赠语给雷海为：\n\n你在读书上花的任何时间，都会在某一个时刻给你回报。\n\n你所有在日晒雨淋，在风吹雨打当中的奔波和辛苦，你所有偷偷地躲在那书店里背下的诗句，在这一刻都绽放出了格外夺目的光彩。\n\n很多时候，改变我们一生的，就是那些日复一日坚持的小事。\n\n有人每晚睡前坚持看1个小时的纸质书，长年累月思想、谈吐、待人接物都有了很大的提升；\n\n有人每天坚持晨读英语，十年如一日，终于能自然地脱口而出最地道的口语；\n\n有人连续三年做不重样的早餐，全程靠吃，就把啤酒肚变成了八块腹肌。\n\n韩寒说过：把一切普通的事情做好即不普通，把一切简单的事情做好即不简单。\n\n我害怕自律的人，因为他们能把一件小事坚持到极致，令旁人自惭形秽。\n\n04\n\n哲学上有个词，叫“荷花定律”。\n\n一个荷花池，第一天荷花开得很少，第二天开放的数量是第一天的两倍。\n\n之后的每一天，荷花都会以前一天两倍的数量开放。\n\n按此规律，到了第29天，荷花池中的荷花开了一半。\n\n令人惊讶的是，到了第30天，荷花猛然开满了整个花池，一派生机盎然。\n\n同理，在人类社会，把一件事坚持30天，也足以发生奇迹。\n\n谷歌工程师卡茨，曾是一位肥胖的油腻宅男。\n\n一天，他给自己定下了一个30天改变的计划，每天做一些之前未能坚持的事。\n\n比如：\n\n每天骑自行车上班，每天走路一万步，每天拍一张照片，写一本5万字的小说；\n\n不看电视，不吃糖，不玩推特，拒绝咖啡因.....\n\n可以说这份计划充满了挑战性，做不到自律的人势必无法完成。\n\n但马特坚持了下来。\n\n30天后，昔日那个肥腻的宅男工程师不见了，他变成了一个健康、乐观又有文采的人。\n\n一个会坚持的人，也是个自律的人。\n\n生命是种选择，有人在日复一日的柴米油盐中迷失了自我，有人则爱上了自己自律的姿势。\n\n千万不要小看一个自律的人。\n\n自律的过程虽然辛苦，但能做到就真的很厉害。\n\n念念不忘，必有回响。\n\n共勉。\n\n作者：热情似火2019\n\n链接：https://www.jianshu.com/p/42593ed268ea\n\n来源：简书\n\n简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。\n","source":"_posts/自律，是一个人最好的修养.md","raw":"---\ntitle: 自律，是一个人最好的修养\ntags:\n  - 计划\ncategories:\n  - 生活玩乐\ntoc: false\ndate: 2019-05-16 17:41:52\n---\n\n因为想要照亮世界，所以我想照亮自己。\n\n昨天晚上刷微博，看见一则很有意思的笑话：\n\n36岁林依晨告诉你：自律，是一个人最好的修行\n\n这似曾相识的一幕是不是很熟悉？是不是从来没见过自己这么“倔强”的一面？\n\n说白了，其实是你抵挡不住舒适安逸的诱惑。\n\n知乎上有个很火的话题：是什么让你保持长久的自律？\n\n我最喜欢的一个回答是：\n\n“对我而言，高度自律是因为内心有强烈的驱动力，并且深刻的知道不自律的后果。正是因为之前痛苦的体验，才能让我在每次要坚持不下去时，都能因为不想再有那样体验而咬牙完成。我想，痛苦某种程度来说，也是一种财富吧。”\n<!-- more -->\n\n喜欢的理由很简单，我觉得很多人的自律都来源于恐惧，很少有人是因为内心的极度渴望。\n\n就像一位学者曾说：“我做到这些最大的动力是恐慌，我不能接受一个停滞的自己。”\n\n人生苦难重重，自律是解决人生问题最主要的工具，也是消除人生痛苦最重要的方法。\n\n01\n\n自爱的人，才能保持自律的心。\n\n王菲在《给自己的情书》中唱道：“自己都不爱，怎么相爱，怎么可给爱人好处？”\n\n生活中，我们常常会发现，越是优秀的人，往往越是懂得爱自己，将自己的生活和工作都照顾得非常好。\n\n他们每天都能六七点钟就按时起床，然后梳洗打扮，化上精致的妆容，神采奕奕地迎接新的一天。他们对生活总有各种新计划，想方设法地让自己过得更好。\n\n这个看脸的世界其实再公平不过了，一个人是否自爱，是否自律，从脸上就能一眼看出来。\n\n《恶作剧之吻》里饰演女主角袁湘琴的演员林依晨，前段时间开了直播。\n\n令人吃惊的是，30多岁的她和当年在电视剧里的容颜相比，竟然没有区别，镜头里的她，只是简单地画了眼线，皮肤紧致白皙，眼角无一丝细纹。\n\n岁月好像绕开了她，饶过了她，让她永驻十八岁俏皮可爱的容颜。\n\n然而，你我都该知道一个道理：所有光鲜亮丽的背后，都有其背后不为人知的种种付出。\n\n林依晨在直播中聊到她保养的方法：均衡饮食，发泄压力，一定要睡饱。\n\n这三点看起来很简单，但能数十年如一日地践行下来，却非常难。\n\n36岁林依晨告诉你：自律，是一个人最好的修行\n\n现代人面临着各种大大小小的饭局和美食诱惑。\n\n喜欢的食物不能多吃，不喜欢的食物也得吃，还要严格控制进食量，这并不简单。\n\n林依晨不拍戏的时候，每天十点以前睡觉，五点起床，比老年人还懂得养生。\n\n而现在很多年轻人习惯于每天晚上刷微博、刷朋友圈、刷各种资讯，唯独就是不睡觉。\n\n晚上熬到两三点，第二天赖床到十一二点，不吃早饭，精神涣散，长此以往，危害渐显。\n\n细纹、黑眼圈以及掩盖不住的疲态都会如约而至。\n\n只有爱自己，才是获得生活其他可能性的基础。\n\n只有爱自己，我们才能有一个好的身体去打拼事业；\n\n只有爱自己，我们才有底气去呵护和爱惜我们珍视的人；\n\n只有爱自己，我们才能在前进的道路上，不断增进我们的智慧。\n\n只有学会好好爱自己，我们才有资格去欣赏世界、拥抱世界和改变世界。\n\n当你终于学会爱惜自己的身体，不再做那些明知对自己有害的事情，不再用负面的情绪折磨自己时，你就会发现，你的人生进入了新的纪元。\n\n每一次蜕变，都意味着你摒弃了一个差的自己，朝着更好的方向又迈进了一步。\n\n唯有自爱，才能将人从一切黑暗中拯救出来，自爱的人，才能保持自律的心。\n\n自律的人，才能拥有更多可能性，更幸运的人生。\n\n因为想要照亮世界，所以我想照亮自己。\n\n36岁林依晨告诉你：自律，是一个人最好的修行\n\n02\n\n自律的人，懂得控制情绪和欲望，格局会更大。\n\n美国船王哈利在教育自己的儿子时，不是耳提面命，而是将儿子带进了赌场。\n\n一开始他教育儿子每次赌到输了一半本金的时候就收手，儿子尝试了几次，每每因为不甘心，而输掉所有本金。\n\n几番尝试后才学会认输，及时撒手。\n\n熟悉赌场规则之后，儿子开始赢钱，这时哈利劝儿子收手。\n\n儿子不甘心，想要多赢一点，再多赢一点，结果局势却急转而下，输掉了所有钱。\n\n经过几次训练，他终于可以做到将输赢都控制在百分之十以内，无论结果如何，都会及时收手。\n\n不被欲望掌控，就意味着控制住了人性中最贪婪的部分，不为情绪和感性左右，用理智冷静的态度去考量问题。\n\n有的时候，我们并不需要得到许多，只是我们误以为得到多了会比较幸福。\n\n大多数人的失败，不是因为自身技能缺失，而是因为控制不了自己的情绪和欲望。\n\n控制欲望，不是意味着牺牲，而是为了获取，为了赢取更广阔的人生。\n\n那些极度自律的人，享受的就是一种更为“高级”的成就感。能让人持续地感觉到“有趣”又“有成就感”的事情，而不是被情绪欲望掌控，获得短暂的快乐。\n\n当你的生活被“情绪”，“懒散”和“欲望”占据的时候，你可能就会生活的毫无秩序，活成一团混乱不堪的情绪，活着一滩毫无节制的肉。\n\n哲学家康德曾经说过：所谓自由，不是随心所欲，而是自我主宰。\n\n所以请记得：你的健康、时间、感情、未来，都无比珍贵、不能有一丝一毫的挥霍。\n\n36岁林依晨告诉你：自律，是一个人最好的修行\n\n03\n\n做一个自律的人，你需要明白这4点。\n\n1. 给自律开个头，早起。\n\n很少有人提到，其实想要保持自律，最重要而且力所能及马上就能做的，不是读书，不是冥想，不是拿小本本撰写誓言，而是很简单的两个字：早起！\n\n你一定想不到，早起对于一个人的生活和成长有多么重要的影响和帮助。\n\n正常人每天的睡眠大都在7到8小时，然而有趣的是，欧洲心理学家发现：\n\n在早起的人的潜意识里，每天的可支配时间是要更长一些的。\n\n而相对的是，在晚起者的潜意识里，每天则要变得短了许多。\n\n这是因为，在大部分人的潜意识里，是以中午12点为一天的分界线的，如果总是很晚才起床，一起床半天就没了，人的心理难免受影响，近而焦虑，同时效率也会相对变得低下，总之坏处多多。\n\n有次和同事打赌，说这个月我要每天6点钟起床，以前是8点。早起2小时意味着我要早点睡觉了。\n\n后来的每天我都准时6点在他微信上打“1”，刚开始的一周，打完“1”又接着睡了一个小时，由于内心的不安，又挣扎着起床。\n\n后来慢慢地习惯后，也就6点起床了。\n\n早起这段时间我花1小时看专业的书籍，或者听相关专业的课程，偶尔练练我喜欢的小提琴，剩下的时间用来慢悠悠的享受早餐。\n\n感受一下，当上班的日子有几个小时完全属于自己，你会觉得每天都有一个小假的愉悦感，工作也会积极很多。\n\n2. 自律不能一步到位。\n\n我们总想着制定一个计划，就能彻底改变自己的生活。但事实告诉我们，这是非常幼稚的想法。\n\n首先，如果人要完全依靠意志力去坚持某样事情，那几乎是不可能的。因为意志力是有限的，它就像体力一样，是会被消耗的。\n\n所以我们必须养成习惯，因为习惯可以帮助我们在消耗非常少的意志力的情况下，轻松地坚持做某件事。\n\n但一个习惯的养成是非常困难的，需要长期的刻意训练。\n\n所以，当你试图一次性控制太多事情的时候，你很容易因为意志力的过度消耗而变得身心疲惫，乃至崩溃。而结果，往往是一段时间的彻底放纵，以及对自己失去信心。\n\n因此，我们要循序渐进，一件一件去改变，一口是吃不成大胖子的。\n\n值得注意的是，中途我们可能会懈怠，比如想减肥的你，某一天控制不住去吃了一顿饱饭。或者想要每天睡前阅读的自己，某一天晚上去玩游戏了，而没有去阅读。\n\n这完全有可能发生，但这绝不意味着失败。\n\n我们很容易觉得，某一天没有坚持下来，这就是失败了，所以我还是放弃吧。\n\n不，你没有失败！你明天依然可以继续你的计划，只要你多坚持一天，你就多收获一分。\n\n成功的关键不是你执行的多完美，而是你坚持的有多久。\n\n所以从今天开始，扔掉那些写的太满的计划，先从一件小事做起，中途断过也没关系，这不意味着失败，做好了就奖励自己，没做好也别自责。\n\n当这件事养成习惯以后，你会发现自己可以毫不费力的坚持它了。\n\n3. 你要远离诱惑。\n\n记住，永远不要高估自己的意志力，面对诱惑，很少有人能够坚持不动摇。我们对抗诱惑也会消耗意志力，而时间久了，你就会彻底崩溃。\n\n前段时间，有位朋友无意说了句，玩抖音的都会不知不觉的刷几个小时。之前也看过很多文章，说抖音、王者多么多么吸引人，一下忍不住想试试自己会不会中招。结果证明，我也就一凡夫俗子。\n\n后来，实在受不了颓废的自己，半夜爬起来卸载了这些软件。\n\n所以，无论任何时候，你都要主动远离诱惑，就像不要考验人性一样，也不要考验自己的意志力。\n\n它们都是禁不起考验的。\n\n4. 自律与你的身体状态有关。\n\n事实上，你的身体状态，会极大影响你的意志、情绪、智力等等能力。\n\n有没有发现，当你没睡够的时候，会变得很容易发脾气，处理工作也容易走神，应该做的事情也不想去做。\n\n当我意识到这一点的时候，我就开始非常注意休息，因为只有身体得到良好的休息，才有足够的精力去处理工作。\n\n这里的休息，包括很多方面：\n\n早睡早起\n\n中午小憩，但不会超过30分钟\n\n体育锻炼\n\n周末彻底放下工作，去做一些不消耗太多精力的事情\n\n听音乐\n\n这一切都以恢复精力为目的，只有精力充沛，你才能做好事情，才能做到自律。\n\n保持自律并不是只靠意志力就能做好的，普通人很难拥有太过强大的意志力，而且也没有这个必要。\n\n你要利用一切可以帮助你自律的因素，无论是环境，还是身体条件，甚至是别人的督促，公司/学校的强制安排。\n\n只有这样，我们才能更高效的保持自律。\n\n自律，不是我们别别扭扭的委屈和控制做不想做的事。相反，是让你做的每件事，都让你更靠近自己内心真正更想要变成的样子。\n\n愿每个人都能修炼出一个高度自律的自己。\n\n实践就是成功 人生的修行 热爱生活\n\n01\n\n朋友圈里有个妹子，天天晚上9点准时晒微信运动的截图。\n\n少的时候2万步左右，多的时候甚至可以达到3万，常年占领着排行榜封面。\n\n当我喝着快乐肥宅水、吃着烤串放纵自我的时候，看到她的截图就会觉得罪恶感爆棚。\n\n自己每天不到2千的步数，和别人的几万步相比，简直少得可怜。\n\n关键是这个妹子，晒微信运动截图并不是为了彰显人设，或者为了他人的点赞。\n\n她是真真切切地将跑步的习惯刻在了骨子里，融在了生活中。\n\n和她聊天的时候，能感受到她对跑步的喜爱溢于言表。\n\n最初的她，穿个牛仔裤就开始跑，八百米就是极限了，跑完满嘴的血腥味。\n\n坚持了30天后，她的身体开始习惯这种节奏，不再觉得跑步是一种煎熬。\n\n坚持了半年后，她在没有节食的情况下，瘦了整整5公斤。\n\n现在的她，身材紧致、皮肤细腻、笑容明朗，看起来清爽又有活力。\n\n生活中，有太多人在工作的压力下放任口腹之欲，身材管理溃不成军。\n\n看到朋友圈里晒微信运动截图的好友，就屏蔽拉黑，不肯面对懒惰的自己。\n\n熬夜、喝酒、撸串、饮食毫无节制，不用运动的生活，看起来确实很舒服。\n\n但正如小说《大哥》里的句子所说：“人不能过得太舒服，等你满脑肥肠、每天都吃饱混天黑的时候，就离嗝屁着凉不远啦。”\n\n我害怕自律的人，因为他们能够在这个失控的时代，牢牢地掌握着人生主动权。\n\n每天都朝着更好的方向，用力地爱着自己。\n\n02\n\n德国有位23岁的女孩Sunny，在工作之后身材逐渐走样，肚子上的肥肉不断堆积。\n\n她问自己：难道这辈子就这样胖下去吗？\n\n不敢照镜子、不敢拍全身照、明明很年轻却被人称作大妈、看到身材纤细的姑娘总是忍不住自卑.....\n\n“不，我要开始改变自己。”\n\nSunny给自己制定了一个20周的跑步减脂计划，开始了自律的旅程。\n\n第一周，真的很难。没跑几步就感觉到心脾肺都很累，只能不断停下来休息。\n\n第二周，一样很糟。她不断怀疑自己的付出是否值得，到底什么时候才能轻松一些？\n\n疲惫、乏力、酸胀的肌肉、风雨交加的坏天气似乎都在跟她作对，但她仍选择继续坚持。\n\n就这样一直坚持到第九周，她终于有了一些进步，身体变得轻盈，越跑越轻松了。\n\n然而，突如其来的受伤，让她不得不中断跑步，影响了好几周的训练，她难过得甚至想要放弃。\n\n即使这样，她仍咬咬牙，继续上路，并且开始配合力量训练，结识新的朋友，重拾自信。\n\n第二十周，她的真实感受是：从未有过如此美好的感觉！\n\n她成功了，20周的时间，减重14公斤，腰围比之前小了3个号，速度比最开始提高了2分钟每公里。\n\n而变化最大的，是她从之前苦大仇深的表情，变成了现在洋溢在脸上的自信。\n\n我害怕自律的人，因为他们都太狠了，能做到大多数人想都不敢想的事情。\n\n03\n\n知乎上有这样一个问题：哪些事情永久地改变了你？\n\n一个点赞回答很高是这样的：\n\n每天坚持做一件小事。曾经我对唐诗宋词储备太少，于是我某一天晚上睡觉前，没刷手机，而是背了一首唐诗，就这样一直到现在，我能脱口背出600多首唐诗宋词。\n\n这让我想起《中国诗词大会》第三季的总冠军雷海为。\n\n在参加比赛之前，他只是个骑着电动车每天穿梭在大楼之间送餐的外卖小哥。\n\n然而，在商家等餐或者短暂休息的间隙，他都会拿出随身携带的《唐诗三百首》，坚持背诗。\n\n打工很累，连吃饭睡觉的时间都很奢侈。\n\n但正如苏轼说：“宁可食无肉，不可居无竹。”雷海为宁可放弃一些睡觉的时间，也要坚持背诗。\n\n董卿有这样一句赠语给雷海为：\n\n你在读书上花的任何时间，都会在某一个时刻给你回报。\n\n你所有在日晒雨淋，在风吹雨打当中的奔波和辛苦，你所有偷偷地躲在那书店里背下的诗句，在这一刻都绽放出了格外夺目的光彩。\n\n很多时候，改变我们一生的，就是那些日复一日坚持的小事。\n\n有人每晚睡前坚持看1个小时的纸质书，长年累月思想、谈吐、待人接物都有了很大的提升；\n\n有人每天坚持晨读英语，十年如一日，终于能自然地脱口而出最地道的口语；\n\n有人连续三年做不重样的早餐，全程靠吃，就把啤酒肚变成了八块腹肌。\n\n韩寒说过：把一切普通的事情做好即不普通，把一切简单的事情做好即不简单。\n\n我害怕自律的人，因为他们能把一件小事坚持到极致，令旁人自惭形秽。\n\n04\n\n哲学上有个词，叫“荷花定律”。\n\n一个荷花池，第一天荷花开得很少，第二天开放的数量是第一天的两倍。\n\n之后的每一天，荷花都会以前一天两倍的数量开放。\n\n按此规律，到了第29天，荷花池中的荷花开了一半。\n\n令人惊讶的是，到了第30天，荷花猛然开满了整个花池，一派生机盎然。\n\n同理，在人类社会，把一件事坚持30天，也足以发生奇迹。\n\n谷歌工程师卡茨，曾是一位肥胖的油腻宅男。\n\n一天，他给自己定下了一个30天改变的计划，每天做一些之前未能坚持的事。\n\n比如：\n\n每天骑自行车上班，每天走路一万步，每天拍一张照片，写一本5万字的小说；\n\n不看电视，不吃糖，不玩推特，拒绝咖啡因.....\n\n可以说这份计划充满了挑战性，做不到自律的人势必无法完成。\n\n但马特坚持了下来。\n\n30天后，昔日那个肥腻的宅男工程师不见了，他变成了一个健康、乐观又有文采的人。\n\n一个会坚持的人，也是个自律的人。\n\n生命是种选择，有人在日复一日的柴米油盐中迷失了自我，有人则爱上了自己自律的姿势。\n\n千万不要小看一个自律的人。\n\n自律的过程虽然辛苦，但能做到就真的很厉害。\n\n念念不忘，必有回响。\n\n共勉。\n\n作者：热情似火2019\n\n链接：https://www.jianshu.com/p/42593ed268ea\n\n来源：简书\n\n简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。\n","slug":"自律，是一个人最好的修养","published":1,"updated":"2019-11-07T02:24:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo1y00ajh5s64tngacad","content":"<p>因为想要照亮世界，所以我想照亮自己。</p>\n<p>昨天晚上刷微博，看见一则很有意思的笑话：</p>\n<p>36岁林依晨告诉你：自律，是一个人最好的修行</p>\n<p>这似曾相识的一幕是不是很熟悉？是不是从来没见过自己这么“倔强”的一面？</p>\n<p>说白了，其实是你抵挡不住舒适安逸的诱惑。</p>\n<p>知乎上有个很火的话题：是什么让你保持长久的自律？</p>\n<p>我最喜欢的一个回答是：</p>\n<p>“对我而言，高度自律是因为内心有强烈的驱动力，并且深刻的知道不自律的后果。正是因为之前痛苦的体验，才能让我在每次要坚持不下去时，都能因为不想再有那样体验而咬牙完成。我想，痛苦某种程度来说，也是一种财富吧。”<br><a id=\"more\"></a></p>\n<p>喜欢的理由很简单，我觉得很多人的自律都来源于恐惧，很少有人是因为内心的极度渴望。</p>\n<p>就像一位学者曾说：“我做到这些最大的动力是恐慌，我不能接受一个停滞的自己。”</p>\n<p>人生苦难重重，自律是解决人生问题最主要的工具，也是消除人生痛苦最重要的方法。</p>\n<p>01</p>\n<p>自爱的人，才能保持自律的心。</p>\n<p>王菲在《给自己的情书》中唱道：“自己都不爱，怎么相爱，怎么可给爱人好处？”</p>\n<p>生活中，我们常常会发现，越是优秀的人，往往越是懂得爱自己，将自己的生活和工作都照顾得非常好。</p>\n<p>他们每天都能六七点钟就按时起床，然后梳洗打扮，化上精致的妆容，神采奕奕地迎接新的一天。他们对生活总有各种新计划，想方设法地让自己过得更好。</p>\n<p>这个看脸的世界其实再公平不过了，一个人是否自爱，是否自律，从脸上就能一眼看出来。</p>\n<p>《恶作剧之吻》里饰演女主角袁湘琴的演员林依晨，前段时间开了直播。</p>\n<p>令人吃惊的是，30多岁的她和当年在电视剧里的容颜相比，竟然没有区别，镜头里的她，只是简单地画了眼线，皮肤紧致白皙，眼角无一丝细纹。</p>\n<p>岁月好像绕开了她，饶过了她，让她永驻十八岁俏皮可爱的容颜。</p>\n<p>然而，你我都该知道一个道理：所有光鲜亮丽的背后，都有其背后不为人知的种种付出。</p>\n<p>林依晨在直播中聊到她保养的方法：均衡饮食，发泄压力，一定要睡饱。</p>\n<p>这三点看起来很简单，但能数十年如一日地践行下来，却非常难。</p>\n<p>36岁林依晨告诉你：自律，是一个人最好的修行</p>\n<p>现代人面临着各种大大小小的饭局和美食诱惑。</p>\n<p>喜欢的食物不能多吃，不喜欢的食物也得吃，还要严格控制进食量，这并不简单。</p>\n<p>林依晨不拍戏的时候，每天十点以前睡觉，五点起床，比老年人还懂得养生。</p>\n<p>而现在很多年轻人习惯于每天晚上刷微博、刷朋友圈、刷各种资讯，唯独就是不睡觉。</p>\n<p>晚上熬到两三点，第二天赖床到十一二点，不吃早饭，精神涣散，长此以往，危害渐显。</p>\n<p>细纹、黑眼圈以及掩盖不住的疲态都会如约而至。</p>\n<p>只有爱自己，才是获得生活其他可能性的基础。</p>\n<p>只有爱自己，我们才能有一个好的身体去打拼事业；</p>\n<p>只有爱自己，我们才有底气去呵护和爱惜我们珍视的人；</p>\n<p>只有爱自己，我们才能在前进的道路上，不断增进我们的智慧。</p>\n<p>只有学会好好爱自己，我们才有资格去欣赏世界、拥抱世界和改变世界。</p>\n<p>当你终于学会爱惜自己的身体，不再做那些明知对自己有害的事情，不再用负面的情绪折磨自己时，你就会发现，你的人生进入了新的纪元。</p>\n<p>每一次蜕变，都意味着你摒弃了一个差的自己，朝着更好的方向又迈进了一步。</p>\n<p>唯有自爱，才能将人从一切黑暗中拯救出来，自爱的人，才能保持自律的心。</p>\n<p>自律的人，才能拥有更多可能性，更幸运的人生。</p>\n<p>因为想要照亮世界，所以我想照亮自己。</p>\n<p>36岁林依晨告诉你：自律，是一个人最好的修行</p>\n<p>02</p>\n<p>自律的人，懂得控制情绪和欲望，格局会更大。</p>\n<p>美国船王哈利在教育自己的儿子时，不是耳提面命，而是将儿子带进了赌场。</p>\n<p>一开始他教育儿子每次赌到输了一半本金的时候就收手，儿子尝试了几次，每每因为不甘心，而输掉所有本金。</p>\n<p>几番尝试后才学会认输，及时撒手。</p>\n<p>熟悉赌场规则之后，儿子开始赢钱，这时哈利劝儿子收手。</p>\n<p>儿子不甘心，想要多赢一点，再多赢一点，结果局势却急转而下，输掉了所有钱。</p>\n<p>经过几次训练，他终于可以做到将输赢都控制在百分之十以内，无论结果如何，都会及时收手。</p>\n<p>不被欲望掌控，就意味着控制住了人性中最贪婪的部分，不为情绪和感性左右，用理智冷静的态度去考量问题。</p>\n<p>有的时候，我们并不需要得到许多，只是我们误以为得到多了会比较幸福。</p>\n<p>大多数人的失败，不是因为自身技能缺失，而是因为控制不了自己的情绪和欲望。</p>\n<p>控制欲望，不是意味着牺牲，而是为了获取，为了赢取更广阔的人生。</p>\n<p>那些极度自律的人，享受的就是一种更为“高级”的成就感。能让人持续地感觉到“有趣”又“有成就感”的事情，而不是被情绪欲望掌控，获得短暂的快乐。</p>\n<p>当你的生活被“情绪”，“懒散”和“欲望”占据的时候，你可能就会生活的毫无秩序，活成一团混乱不堪的情绪，活着一滩毫无节制的肉。</p>\n<p>哲学家康德曾经说过：所谓自由，不是随心所欲，而是自我主宰。</p>\n<p>所以请记得：你的健康、时间、感情、未来，都无比珍贵、不能有一丝一毫的挥霍。</p>\n<p>36岁林依晨告诉你：自律，是一个人最好的修行</p>\n<p>03</p>\n<p>做一个自律的人，你需要明白这4点。</p>\n<ol>\n<li>给自律开个头，早起。</li>\n</ol>\n<p>很少有人提到，其实想要保持自律，最重要而且力所能及马上就能做的，不是读书，不是冥想，不是拿小本本撰写誓言，而是很简单的两个字：早起！</p>\n<p>你一定想不到，早起对于一个人的生活和成长有多么重要的影响和帮助。</p>\n<p>正常人每天的睡眠大都在7到8小时，然而有趣的是，欧洲心理学家发现：</p>\n<p>在早起的人的潜意识里，每天的可支配时间是要更长一些的。</p>\n<p>而相对的是，在晚起者的潜意识里，每天则要变得短了许多。</p>\n<p>这是因为，在大部分人的潜意识里，是以中午12点为一天的分界线的，如果总是很晚才起床，一起床半天就没了，人的心理难免受影响，近而焦虑，同时效率也会相对变得低下，总之坏处多多。</p>\n<p>有次和同事打赌，说这个月我要每天6点钟起床，以前是8点。早起2小时意味着我要早点睡觉了。</p>\n<p>后来的每天我都准时6点在他微信上打“1”，刚开始的一周，打完“1”又接着睡了一个小时，由于内心的不安，又挣扎着起床。</p>\n<p>后来慢慢地习惯后，也就6点起床了。</p>\n<p>早起这段时间我花1小时看专业的书籍，或者听相关专业的课程，偶尔练练我喜欢的小提琴，剩下的时间用来慢悠悠的享受早餐。</p>\n<p>感受一下，当上班的日子有几个小时完全属于自己，你会觉得每天都有一个小假的愉悦感，工作也会积极很多。</p>\n<ol start=\"2\">\n<li>自律不能一步到位。</li>\n</ol>\n<p>我们总想着制定一个计划，就能彻底改变自己的生活。但事实告诉我们，这是非常幼稚的想法。</p>\n<p>首先，如果人要完全依靠意志力去坚持某样事情，那几乎是不可能的。因为意志力是有限的，它就像体力一样，是会被消耗的。</p>\n<p>所以我们必须养成习惯，因为习惯可以帮助我们在消耗非常少的意志力的情况下，轻松地坚持做某件事。</p>\n<p>但一个习惯的养成是非常困难的，需要长期的刻意训练。</p>\n<p>所以，当你试图一次性控制太多事情的时候，你很容易因为意志力的过度消耗而变得身心疲惫，乃至崩溃。而结果，往往是一段时间的彻底放纵，以及对自己失去信心。</p>\n<p>因此，我们要循序渐进，一件一件去改变，一口是吃不成大胖子的。</p>\n<p>值得注意的是，中途我们可能会懈怠，比如想减肥的你，某一天控制不住去吃了一顿饱饭。或者想要每天睡前阅读的自己，某一天晚上去玩游戏了，而没有去阅读。</p>\n<p>这完全有可能发生，但这绝不意味着失败。</p>\n<p>我们很容易觉得，某一天没有坚持下来，这就是失败了，所以我还是放弃吧。</p>\n<p>不，你没有失败！你明天依然可以继续你的计划，只要你多坚持一天，你就多收获一分。</p>\n<p>成功的关键不是你执行的多完美，而是你坚持的有多久。</p>\n<p>所以从今天开始，扔掉那些写的太满的计划，先从一件小事做起，中途断过也没关系，这不意味着失败，做好了就奖励自己，没做好也别自责。</p>\n<p>当这件事养成习惯以后，你会发现自己可以毫不费力的坚持它了。</p>\n<ol start=\"3\">\n<li>你要远离诱惑。</li>\n</ol>\n<p>记住，永远不要高估自己的意志力，面对诱惑，很少有人能够坚持不动摇。我们对抗诱惑也会消耗意志力，而时间久了，你就会彻底崩溃。</p>\n<p>前段时间，有位朋友无意说了句，玩抖音的都会不知不觉的刷几个小时。之前也看过很多文章，说抖音、王者多么多么吸引人，一下忍不住想试试自己会不会中招。结果证明，我也就一凡夫俗子。</p>\n<p>后来，实在受不了颓废的自己，半夜爬起来卸载了这些软件。</p>\n<p>所以，无论任何时候，你都要主动远离诱惑，就像不要考验人性一样，也不要考验自己的意志力。</p>\n<p>它们都是禁不起考验的。</p>\n<ol start=\"4\">\n<li>自律与你的身体状态有关。</li>\n</ol>\n<p>事实上，你的身体状态，会极大影响你的意志、情绪、智力等等能力。</p>\n<p>有没有发现，当你没睡够的时候，会变得很容易发脾气，处理工作也容易走神，应该做的事情也不想去做。</p>\n<p>当我意识到这一点的时候，我就开始非常注意休息，因为只有身体得到良好的休息，才有足够的精力去处理工作。</p>\n<p>这里的休息，包括很多方面：</p>\n<p>早睡早起</p>\n<p>中午小憩，但不会超过30分钟</p>\n<p>体育锻炼</p>\n<p>周末彻底放下工作，去做一些不消耗太多精力的事情</p>\n<p>听音乐</p>\n<p>这一切都以恢复精力为目的，只有精力充沛，你才能做好事情，才能做到自律。</p>\n<p>保持自律并不是只靠意志力就能做好的，普通人很难拥有太过强大的意志力，而且也没有这个必要。</p>\n<p>你要利用一切可以帮助你自律的因素，无论是环境，还是身体条件，甚至是别人的督促，公司/学校的强制安排。</p>\n<p>只有这样，我们才能更高效的保持自律。</p>\n<p>自律，不是我们别别扭扭的委屈和控制做不想做的事。相反，是让你做的每件事，都让你更靠近自己内心真正更想要变成的样子。</p>\n<p>愿每个人都能修炼出一个高度自律的自己。</p>\n<p>实践就是成功 人生的修行 热爱生活</p>\n<p>01</p>\n<p>朋友圈里有个妹子，天天晚上9点准时晒微信运动的截图。</p>\n<p>少的时候2万步左右，多的时候甚至可以达到3万，常年占领着排行榜封面。</p>\n<p>当我喝着快乐肥宅水、吃着烤串放纵自我的时候，看到她的截图就会觉得罪恶感爆棚。</p>\n<p>自己每天不到2千的步数，和别人的几万步相比，简直少得可怜。</p>\n<p>关键是这个妹子，晒微信运动截图并不是为了彰显人设，或者为了他人的点赞。</p>\n<p>她是真真切切地将跑步的习惯刻在了骨子里，融在了生活中。</p>\n<p>和她聊天的时候，能感受到她对跑步的喜爱溢于言表。</p>\n<p>最初的她，穿个牛仔裤就开始跑，八百米就是极限了，跑完满嘴的血腥味。</p>\n<p>坚持了30天后，她的身体开始习惯这种节奏，不再觉得跑步是一种煎熬。</p>\n<p>坚持了半年后，她在没有节食的情况下，瘦了整整5公斤。</p>\n<p>现在的她，身材紧致、皮肤细腻、笑容明朗，看起来清爽又有活力。</p>\n<p>生活中，有太多人在工作的压力下放任口腹之欲，身材管理溃不成军。</p>\n<p>看到朋友圈里晒微信运动截图的好友，就屏蔽拉黑，不肯面对懒惰的自己。</p>\n<p>熬夜、喝酒、撸串、饮食毫无节制，不用运动的生活，看起来确实很舒服。</p>\n<p>但正如小说《大哥》里的句子所说：“人不能过得太舒服，等你满脑肥肠、每天都吃饱混天黑的时候，就离嗝屁着凉不远啦。”</p>\n<p>我害怕自律的人，因为他们能够在这个失控的时代，牢牢地掌握着人生主动权。</p>\n<p>每天都朝着更好的方向，用力地爱着自己。</p>\n<p>02</p>\n<p>德国有位23岁的女孩Sunny，在工作之后身材逐渐走样，肚子上的肥肉不断堆积。</p>\n<p>她问自己：难道这辈子就这样胖下去吗？</p>\n<p>不敢照镜子、不敢拍全身照、明明很年轻却被人称作大妈、看到身材纤细的姑娘总是忍不住自卑…..</p>\n<p>“不，我要开始改变自己。”</p>\n<p>Sunny给自己制定了一个20周的跑步减脂计划，开始了自律的旅程。</p>\n<p>第一周，真的很难。没跑几步就感觉到心脾肺都很累，只能不断停下来休息。</p>\n<p>第二周，一样很糟。她不断怀疑自己的付出是否值得，到底什么时候才能轻松一些？</p>\n<p>疲惫、乏力、酸胀的肌肉、风雨交加的坏天气似乎都在跟她作对，但她仍选择继续坚持。</p>\n<p>就这样一直坚持到第九周，她终于有了一些进步，身体变得轻盈，越跑越轻松了。</p>\n<p>然而，突如其来的受伤，让她不得不中断跑步，影响了好几周的训练，她难过得甚至想要放弃。</p>\n<p>即使这样，她仍咬咬牙，继续上路，并且开始配合力量训练，结识新的朋友，重拾自信。</p>\n<p>第二十周，她的真实感受是：从未有过如此美好的感觉！</p>\n<p>她成功了，20周的时间，减重14公斤，腰围比之前小了3个号，速度比最开始提高了2分钟每公里。</p>\n<p>而变化最大的，是她从之前苦大仇深的表情，变成了现在洋溢在脸上的自信。</p>\n<p>我害怕自律的人，因为他们都太狠了，能做到大多数人想都不敢想的事情。</p>\n<p>03</p>\n<p>知乎上有这样一个问题：哪些事情永久地改变了你？</p>\n<p>一个点赞回答很高是这样的：</p>\n<p>每天坚持做一件小事。曾经我对唐诗宋词储备太少，于是我某一天晚上睡觉前，没刷手机，而是背了一首唐诗，就这样一直到现在，我能脱口背出600多首唐诗宋词。</p>\n<p>这让我想起《中国诗词大会》第三季的总冠军雷海为。</p>\n<p>在参加比赛之前，他只是个骑着电动车每天穿梭在大楼之间送餐的外卖小哥。</p>\n<p>然而，在商家等餐或者短暂休息的间隙，他都会拿出随身携带的《唐诗三百首》，坚持背诗。</p>\n<p>打工很累，连吃饭睡觉的时间都很奢侈。</p>\n<p>但正如苏轼说：“宁可食无肉，不可居无竹。”雷海为宁可放弃一些睡觉的时间，也要坚持背诗。</p>\n<p>董卿有这样一句赠语给雷海为：</p>\n<p>你在读书上花的任何时间，都会在某一个时刻给你回报。</p>\n<p>你所有在日晒雨淋，在风吹雨打当中的奔波和辛苦，你所有偷偷地躲在那书店里背下的诗句，在这一刻都绽放出了格外夺目的光彩。</p>\n<p>很多时候，改变我们一生的，就是那些日复一日坚持的小事。</p>\n<p>有人每晚睡前坚持看1个小时的纸质书，长年累月思想、谈吐、待人接物都有了很大的提升；</p>\n<p>有人每天坚持晨读英语，十年如一日，终于能自然地脱口而出最地道的口语；</p>\n<p>有人连续三年做不重样的早餐，全程靠吃，就把啤酒肚变成了八块腹肌。</p>\n<p>韩寒说过：把一切普通的事情做好即不普通，把一切简单的事情做好即不简单。</p>\n<p>我害怕自律的人，因为他们能把一件小事坚持到极致，令旁人自惭形秽。</p>\n<p>04</p>\n<p>哲学上有个词，叫“荷花定律”。</p>\n<p>一个荷花池，第一天荷花开得很少，第二天开放的数量是第一天的两倍。</p>\n<p>之后的每一天，荷花都会以前一天两倍的数量开放。</p>\n<p>按此规律，到了第29天，荷花池中的荷花开了一半。</p>\n<p>令人惊讶的是，到了第30天，荷花猛然开满了整个花池，一派生机盎然。</p>\n<p>同理，在人类社会，把一件事坚持30天，也足以发生奇迹。</p>\n<p>谷歌工程师卡茨，曾是一位肥胖的油腻宅男。</p>\n<p>一天，他给自己定下了一个30天改变的计划，每天做一些之前未能坚持的事。</p>\n<p>比如：</p>\n<p>每天骑自行车上班，每天走路一万步，每天拍一张照片，写一本5万字的小说；</p>\n<p>不看电视，不吃糖，不玩推特，拒绝咖啡因…..</p>\n<p>可以说这份计划充满了挑战性，做不到自律的人势必无法完成。</p>\n<p>但马特坚持了下来。</p>\n<p>30天后，昔日那个肥腻的宅男工程师不见了，他变成了一个健康、乐观又有文采的人。</p>\n<p>一个会坚持的人，也是个自律的人。</p>\n<p>生命是种选择，有人在日复一日的柴米油盐中迷失了自我，有人则爱上了自己自律的姿势。</p>\n<p>千万不要小看一个自律的人。</p>\n<p>自律的过程虽然辛苦，但能做到就真的很厉害。</p>\n<p>念念不忘，必有回响。</p>\n<p>共勉。</p>\n<p>作者：热情似火2019</p>\n<p>链接：<a href=\"https://www.jianshu.com/p/42593ed268ea\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/42593ed268ea</a></p>\n<p>来源：简书</p>\n<p>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p>\n","site":{"data":{}},"excerpt":"<p>因为想要照亮世界，所以我想照亮自己。</p>\n<p>昨天晚上刷微博，看见一则很有意思的笑话：</p>\n<p>36岁林依晨告诉你：自律，是一个人最好的修行</p>\n<p>这似曾相识的一幕是不是很熟悉？是不是从来没见过自己这么“倔强”的一面？</p>\n<p>说白了，其实是你抵挡不住舒适安逸的诱惑。</p>\n<p>知乎上有个很火的话题：是什么让你保持长久的自律？</p>\n<p>我最喜欢的一个回答是：</p>\n<p>“对我而言，高度自律是因为内心有强烈的驱动力，并且深刻的知道不自律的后果。正是因为之前痛苦的体验，才能让我在每次要坚持不下去时，都能因为不想再有那样体验而咬牙完成。我想，痛苦某种程度来说，也是一种财富吧。”<br>","more":"</p>\n<p>喜欢的理由很简单，我觉得很多人的自律都来源于恐惧，很少有人是因为内心的极度渴望。</p>\n<p>就像一位学者曾说：“我做到这些最大的动力是恐慌，我不能接受一个停滞的自己。”</p>\n<p>人生苦难重重，自律是解决人生问题最主要的工具，也是消除人生痛苦最重要的方法。</p>\n<p>01</p>\n<p>自爱的人，才能保持自律的心。</p>\n<p>王菲在《给自己的情书》中唱道：“自己都不爱，怎么相爱，怎么可给爱人好处？”</p>\n<p>生活中，我们常常会发现，越是优秀的人，往往越是懂得爱自己，将自己的生活和工作都照顾得非常好。</p>\n<p>他们每天都能六七点钟就按时起床，然后梳洗打扮，化上精致的妆容，神采奕奕地迎接新的一天。他们对生活总有各种新计划，想方设法地让自己过得更好。</p>\n<p>这个看脸的世界其实再公平不过了，一个人是否自爱，是否自律，从脸上就能一眼看出来。</p>\n<p>《恶作剧之吻》里饰演女主角袁湘琴的演员林依晨，前段时间开了直播。</p>\n<p>令人吃惊的是，30多岁的她和当年在电视剧里的容颜相比，竟然没有区别，镜头里的她，只是简单地画了眼线，皮肤紧致白皙，眼角无一丝细纹。</p>\n<p>岁月好像绕开了她，饶过了她，让她永驻十八岁俏皮可爱的容颜。</p>\n<p>然而，你我都该知道一个道理：所有光鲜亮丽的背后，都有其背后不为人知的种种付出。</p>\n<p>林依晨在直播中聊到她保养的方法：均衡饮食，发泄压力，一定要睡饱。</p>\n<p>这三点看起来很简单，但能数十年如一日地践行下来，却非常难。</p>\n<p>36岁林依晨告诉你：自律，是一个人最好的修行</p>\n<p>现代人面临着各种大大小小的饭局和美食诱惑。</p>\n<p>喜欢的食物不能多吃，不喜欢的食物也得吃，还要严格控制进食量，这并不简单。</p>\n<p>林依晨不拍戏的时候，每天十点以前睡觉，五点起床，比老年人还懂得养生。</p>\n<p>而现在很多年轻人习惯于每天晚上刷微博、刷朋友圈、刷各种资讯，唯独就是不睡觉。</p>\n<p>晚上熬到两三点，第二天赖床到十一二点，不吃早饭，精神涣散，长此以往，危害渐显。</p>\n<p>细纹、黑眼圈以及掩盖不住的疲态都会如约而至。</p>\n<p>只有爱自己，才是获得生活其他可能性的基础。</p>\n<p>只有爱自己，我们才能有一个好的身体去打拼事业；</p>\n<p>只有爱自己，我们才有底气去呵护和爱惜我们珍视的人；</p>\n<p>只有爱自己，我们才能在前进的道路上，不断增进我们的智慧。</p>\n<p>只有学会好好爱自己，我们才有资格去欣赏世界、拥抱世界和改变世界。</p>\n<p>当你终于学会爱惜自己的身体，不再做那些明知对自己有害的事情，不再用负面的情绪折磨自己时，你就会发现，你的人生进入了新的纪元。</p>\n<p>每一次蜕变，都意味着你摒弃了一个差的自己，朝着更好的方向又迈进了一步。</p>\n<p>唯有自爱，才能将人从一切黑暗中拯救出来，自爱的人，才能保持自律的心。</p>\n<p>自律的人，才能拥有更多可能性，更幸运的人生。</p>\n<p>因为想要照亮世界，所以我想照亮自己。</p>\n<p>36岁林依晨告诉你：自律，是一个人最好的修行</p>\n<p>02</p>\n<p>自律的人，懂得控制情绪和欲望，格局会更大。</p>\n<p>美国船王哈利在教育自己的儿子时，不是耳提面命，而是将儿子带进了赌场。</p>\n<p>一开始他教育儿子每次赌到输了一半本金的时候就收手，儿子尝试了几次，每每因为不甘心，而输掉所有本金。</p>\n<p>几番尝试后才学会认输，及时撒手。</p>\n<p>熟悉赌场规则之后，儿子开始赢钱，这时哈利劝儿子收手。</p>\n<p>儿子不甘心，想要多赢一点，再多赢一点，结果局势却急转而下，输掉了所有钱。</p>\n<p>经过几次训练，他终于可以做到将输赢都控制在百分之十以内，无论结果如何，都会及时收手。</p>\n<p>不被欲望掌控，就意味着控制住了人性中最贪婪的部分，不为情绪和感性左右，用理智冷静的态度去考量问题。</p>\n<p>有的时候，我们并不需要得到许多，只是我们误以为得到多了会比较幸福。</p>\n<p>大多数人的失败，不是因为自身技能缺失，而是因为控制不了自己的情绪和欲望。</p>\n<p>控制欲望，不是意味着牺牲，而是为了获取，为了赢取更广阔的人生。</p>\n<p>那些极度自律的人，享受的就是一种更为“高级”的成就感。能让人持续地感觉到“有趣”又“有成就感”的事情，而不是被情绪欲望掌控，获得短暂的快乐。</p>\n<p>当你的生活被“情绪”，“懒散”和“欲望”占据的时候，你可能就会生活的毫无秩序，活成一团混乱不堪的情绪，活着一滩毫无节制的肉。</p>\n<p>哲学家康德曾经说过：所谓自由，不是随心所欲，而是自我主宰。</p>\n<p>所以请记得：你的健康、时间、感情、未来，都无比珍贵、不能有一丝一毫的挥霍。</p>\n<p>36岁林依晨告诉你：自律，是一个人最好的修行</p>\n<p>03</p>\n<p>做一个自律的人，你需要明白这4点。</p>\n<ol>\n<li>给自律开个头，早起。</li>\n</ol>\n<p>很少有人提到，其实想要保持自律，最重要而且力所能及马上就能做的，不是读书，不是冥想，不是拿小本本撰写誓言，而是很简单的两个字：早起！</p>\n<p>你一定想不到，早起对于一个人的生活和成长有多么重要的影响和帮助。</p>\n<p>正常人每天的睡眠大都在7到8小时，然而有趣的是，欧洲心理学家发现：</p>\n<p>在早起的人的潜意识里，每天的可支配时间是要更长一些的。</p>\n<p>而相对的是，在晚起者的潜意识里，每天则要变得短了许多。</p>\n<p>这是因为，在大部分人的潜意识里，是以中午12点为一天的分界线的，如果总是很晚才起床，一起床半天就没了，人的心理难免受影响，近而焦虑，同时效率也会相对变得低下，总之坏处多多。</p>\n<p>有次和同事打赌，说这个月我要每天6点钟起床，以前是8点。早起2小时意味着我要早点睡觉了。</p>\n<p>后来的每天我都准时6点在他微信上打“1”，刚开始的一周，打完“1”又接着睡了一个小时，由于内心的不安，又挣扎着起床。</p>\n<p>后来慢慢地习惯后，也就6点起床了。</p>\n<p>早起这段时间我花1小时看专业的书籍，或者听相关专业的课程，偶尔练练我喜欢的小提琴，剩下的时间用来慢悠悠的享受早餐。</p>\n<p>感受一下，当上班的日子有几个小时完全属于自己，你会觉得每天都有一个小假的愉悦感，工作也会积极很多。</p>\n<ol start=\"2\">\n<li>自律不能一步到位。</li>\n</ol>\n<p>我们总想着制定一个计划，就能彻底改变自己的生活。但事实告诉我们，这是非常幼稚的想法。</p>\n<p>首先，如果人要完全依靠意志力去坚持某样事情，那几乎是不可能的。因为意志力是有限的，它就像体力一样，是会被消耗的。</p>\n<p>所以我们必须养成习惯，因为习惯可以帮助我们在消耗非常少的意志力的情况下，轻松地坚持做某件事。</p>\n<p>但一个习惯的养成是非常困难的，需要长期的刻意训练。</p>\n<p>所以，当你试图一次性控制太多事情的时候，你很容易因为意志力的过度消耗而变得身心疲惫，乃至崩溃。而结果，往往是一段时间的彻底放纵，以及对自己失去信心。</p>\n<p>因此，我们要循序渐进，一件一件去改变，一口是吃不成大胖子的。</p>\n<p>值得注意的是，中途我们可能会懈怠，比如想减肥的你，某一天控制不住去吃了一顿饱饭。或者想要每天睡前阅读的自己，某一天晚上去玩游戏了，而没有去阅读。</p>\n<p>这完全有可能发生，但这绝不意味着失败。</p>\n<p>我们很容易觉得，某一天没有坚持下来，这就是失败了，所以我还是放弃吧。</p>\n<p>不，你没有失败！你明天依然可以继续你的计划，只要你多坚持一天，你就多收获一分。</p>\n<p>成功的关键不是你执行的多完美，而是你坚持的有多久。</p>\n<p>所以从今天开始，扔掉那些写的太满的计划，先从一件小事做起，中途断过也没关系，这不意味着失败，做好了就奖励自己，没做好也别自责。</p>\n<p>当这件事养成习惯以后，你会发现自己可以毫不费力的坚持它了。</p>\n<ol start=\"3\">\n<li>你要远离诱惑。</li>\n</ol>\n<p>记住，永远不要高估自己的意志力，面对诱惑，很少有人能够坚持不动摇。我们对抗诱惑也会消耗意志力，而时间久了，你就会彻底崩溃。</p>\n<p>前段时间，有位朋友无意说了句，玩抖音的都会不知不觉的刷几个小时。之前也看过很多文章，说抖音、王者多么多么吸引人，一下忍不住想试试自己会不会中招。结果证明，我也就一凡夫俗子。</p>\n<p>后来，实在受不了颓废的自己，半夜爬起来卸载了这些软件。</p>\n<p>所以，无论任何时候，你都要主动远离诱惑，就像不要考验人性一样，也不要考验自己的意志力。</p>\n<p>它们都是禁不起考验的。</p>\n<ol start=\"4\">\n<li>自律与你的身体状态有关。</li>\n</ol>\n<p>事实上，你的身体状态，会极大影响你的意志、情绪、智力等等能力。</p>\n<p>有没有发现，当你没睡够的时候，会变得很容易发脾气，处理工作也容易走神，应该做的事情也不想去做。</p>\n<p>当我意识到这一点的时候，我就开始非常注意休息，因为只有身体得到良好的休息，才有足够的精力去处理工作。</p>\n<p>这里的休息，包括很多方面：</p>\n<p>早睡早起</p>\n<p>中午小憩，但不会超过30分钟</p>\n<p>体育锻炼</p>\n<p>周末彻底放下工作，去做一些不消耗太多精力的事情</p>\n<p>听音乐</p>\n<p>这一切都以恢复精力为目的，只有精力充沛，你才能做好事情，才能做到自律。</p>\n<p>保持自律并不是只靠意志力就能做好的，普通人很难拥有太过强大的意志力，而且也没有这个必要。</p>\n<p>你要利用一切可以帮助你自律的因素，无论是环境，还是身体条件，甚至是别人的督促，公司/学校的强制安排。</p>\n<p>只有这样，我们才能更高效的保持自律。</p>\n<p>自律，不是我们别别扭扭的委屈和控制做不想做的事。相反，是让你做的每件事，都让你更靠近自己内心真正更想要变成的样子。</p>\n<p>愿每个人都能修炼出一个高度自律的自己。</p>\n<p>实践就是成功 人生的修行 热爱生活</p>\n<p>01</p>\n<p>朋友圈里有个妹子，天天晚上9点准时晒微信运动的截图。</p>\n<p>少的时候2万步左右，多的时候甚至可以达到3万，常年占领着排行榜封面。</p>\n<p>当我喝着快乐肥宅水、吃着烤串放纵自我的时候，看到她的截图就会觉得罪恶感爆棚。</p>\n<p>自己每天不到2千的步数，和别人的几万步相比，简直少得可怜。</p>\n<p>关键是这个妹子，晒微信运动截图并不是为了彰显人设，或者为了他人的点赞。</p>\n<p>她是真真切切地将跑步的习惯刻在了骨子里，融在了生活中。</p>\n<p>和她聊天的时候，能感受到她对跑步的喜爱溢于言表。</p>\n<p>最初的她，穿个牛仔裤就开始跑，八百米就是极限了，跑完满嘴的血腥味。</p>\n<p>坚持了30天后，她的身体开始习惯这种节奏，不再觉得跑步是一种煎熬。</p>\n<p>坚持了半年后，她在没有节食的情况下，瘦了整整5公斤。</p>\n<p>现在的她，身材紧致、皮肤细腻、笑容明朗，看起来清爽又有活力。</p>\n<p>生活中，有太多人在工作的压力下放任口腹之欲，身材管理溃不成军。</p>\n<p>看到朋友圈里晒微信运动截图的好友，就屏蔽拉黑，不肯面对懒惰的自己。</p>\n<p>熬夜、喝酒、撸串、饮食毫无节制，不用运动的生活，看起来确实很舒服。</p>\n<p>但正如小说《大哥》里的句子所说：“人不能过得太舒服，等你满脑肥肠、每天都吃饱混天黑的时候，就离嗝屁着凉不远啦。”</p>\n<p>我害怕自律的人，因为他们能够在这个失控的时代，牢牢地掌握着人生主动权。</p>\n<p>每天都朝着更好的方向，用力地爱着自己。</p>\n<p>02</p>\n<p>德国有位23岁的女孩Sunny，在工作之后身材逐渐走样，肚子上的肥肉不断堆积。</p>\n<p>她问自己：难道这辈子就这样胖下去吗？</p>\n<p>不敢照镜子、不敢拍全身照、明明很年轻却被人称作大妈、看到身材纤细的姑娘总是忍不住自卑…..</p>\n<p>“不，我要开始改变自己。”</p>\n<p>Sunny给自己制定了一个20周的跑步减脂计划，开始了自律的旅程。</p>\n<p>第一周，真的很难。没跑几步就感觉到心脾肺都很累，只能不断停下来休息。</p>\n<p>第二周，一样很糟。她不断怀疑自己的付出是否值得，到底什么时候才能轻松一些？</p>\n<p>疲惫、乏力、酸胀的肌肉、风雨交加的坏天气似乎都在跟她作对，但她仍选择继续坚持。</p>\n<p>就这样一直坚持到第九周，她终于有了一些进步，身体变得轻盈，越跑越轻松了。</p>\n<p>然而，突如其来的受伤，让她不得不中断跑步，影响了好几周的训练，她难过得甚至想要放弃。</p>\n<p>即使这样，她仍咬咬牙，继续上路，并且开始配合力量训练，结识新的朋友，重拾自信。</p>\n<p>第二十周，她的真实感受是：从未有过如此美好的感觉！</p>\n<p>她成功了，20周的时间，减重14公斤，腰围比之前小了3个号，速度比最开始提高了2分钟每公里。</p>\n<p>而变化最大的，是她从之前苦大仇深的表情，变成了现在洋溢在脸上的自信。</p>\n<p>我害怕自律的人，因为他们都太狠了，能做到大多数人想都不敢想的事情。</p>\n<p>03</p>\n<p>知乎上有这样一个问题：哪些事情永久地改变了你？</p>\n<p>一个点赞回答很高是这样的：</p>\n<p>每天坚持做一件小事。曾经我对唐诗宋词储备太少，于是我某一天晚上睡觉前，没刷手机，而是背了一首唐诗，就这样一直到现在，我能脱口背出600多首唐诗宋词。</p>\n<p>这让我想起《中国诗词大会》第三季的总冠军雷海为。</p>\n<p>在参加比赛之前，他只是个骑着电动车每天穿梭在大楼之间送餐的外卖小哥。</p>\n<p>然而，在商家等餐或者短暂休息的间隙，他都会拿出随身携带的《唐诗三百首》，坚持背诗。</p>\n<p>打工很累，连吃饭睡觉的时间都很奢侈。</p>\n<p>但正如苏轼说：“宁可食无肉，不可居无竹。”雷海为宁可放弃一些睡觉的时间，也要坚持背诗。</p>\n<p>董卿有这样一句赠语给雷海为：</p>\n<p>你在读书上花的任何时间，都会在某一个时刻给你回报。</p>\n<p>你所有在日晒雨淋，在风吹雨打当中的奔波和辛苦，你所有偷偷地躲在那书店里背下的诗句，在这一刻都绽放出了格外夺目的光彩。</p>\n<p>很多时候，改变我们一生的，就是那些日复一日坚持的小事。</p>\n<p>有人每晚睡前坚持看1个小时的纸质书，长年累月思想、谈吐、待人接物都有了很大的提升；</p>\n<p>有人每天坚持晨读英语，十年如一日，终于能自然地脱口而出最地道的口语；</p>\n<p>有人连续三年做不重样的早餐，全程靠吃，就把啤酒肚变成了八块腹肌。</p>\n<p>韩寒说过：把一切普通的事情做好即不普通，把一切简单的事情做好即不简单。</p>\n<p>我害怕自律的人，因为他们能把一件小事坚持到极致，令旁人自惭形秽。</p>\n<p>04</p>\n<p>哲学上有个词，叫“荷花定律”。</p>\n<p>一个荷花池，第一天荷花开得很少，第二天开放的数量是第一天的两倍。</p>\n<p>之后的每一天，荷花都会以前一天两倍的数量开放。</p>\n<p>按此规律，到了第29天，荷花池中的荷花开了一半。</p>\n<p>令人惊讶的是，到了第30天，荷花猛然开满了整个花池，一派生机盎然。</p>\n<p>同理，在人类社会，把一件事坚持30天，也足以发生奇迹。</p>\n<p>谷歌工程师卡茨，曾是一位肥胖的油腻宅男。</p>\n<p>一天，他给自己定下了一个30天改变的计划，每天做一些之前未能坚持的事。</p>\n<p>比如：</p>\n<p>每天骑自行车上班，每天走路一万步，每天拍一张照片，写一本5万字的小说；</p>\n<p>不看电视，不吃糖，不玩推特，拒绝咖啡因…..</p>\n<p>可以说这份计划充满了挑战性，做不到自律的人势必无法完成。</p>\n<p>但马特坚持了下来。</p>\n<p>30天后，昔日那个肥腻的宅男工程师不见了，他变成了一个健康、乐观又有文采的人。</p>\n<p>一个会坚持的人，也是个自律的人。</p>\n<p>生命是种选择，有人在日复一日的柴米油盐中迷失了自我，有人则爱上了自己自律的姿势。</p>\n<p>千万不要小看一个自律的人。</p>\n<p>自律的过程虽然辛苦，但能做到就真的很厉害。</p>\n<p>念念不忘，必有回响。</p>\n<p>共勉。</p>\n<p>作者：热情似火2019</p>\n<p>链接：<a href=\"https://www.jianshu.com/p/42593ed268ea\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/42593ed268ea</a></p>\n<p>来源：简书</p>\n<p>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p>"},{"title":"虚拟主机","toc":false,"date":"2017-08-26T11:23:00.000Z","_content":"\n# 虚拟主机\n虚拟主机，又称虚拟服务器、主机空间或是网页空间，它是一种技术。该技术是为了节省互联网服务器硬件成本而出现的。这里『主机』或『空间』是由实体的服务器延伸而来，硬件系统可以基于服务器群，或者单个服务器等。虚拟主机技术主要应用于HTTP、FTP及EMAIL等多项服务。将一台服务器的某项或者全部服务内容逻辑划分为多个服务单位，对外表现为多个服务器。从而充分利用服务器硬件资源。从用户角度来看，一台虚拟主机和一台独立的硬件主机是完全一样的。\n\n<!-- more -->\n\n在使用Nginx服务器提供Web服务时，利用虚拟主机的技术就可以避免为每一个要运行的网站提供单独的Nginx服务器，也无需为每个网站对应运行一组Nginx进程。虚拟主机技术使得Nginx服务器可以在同一台服务器上只运行一组Nginx进程，就可以运行多个网站。那么，如何对Nginx进行配置才能达到这种效果呢？\n\n前面提到过，每一个http块都可以包含多个server块，而每个server块就相当于一台虚拟主机，它内部可有多台主机联合提供服务，一起对外提供在逻辑上关系密切的一组服务（或网站）。我们先来学习server全局块中常见的指令机器配置。server全局块指令的作用域为本server块，其不会影响到其他的server块。\n","source":"_posts/虚拟服务器.md","raw":"---\ntitle: 虚拟主机\ntags:\n  - nginx\ncategories:\n  - 后端开发\ntoc: false\ndate: 2017-08-26 19:23:00\n---\n\n# 虚拟主机\n虚拟主机，又称虚拟服务器、主机空间或是网页空间，它是一种技术。该技术是为了节省互联网服务器硬件成本而出现的。这里『主机』或『空间』是由实体的服务器延伸而来，硬件系统可以基于服务器群，或者单个服务器等。虚拟主机技术主要应用于HTTP、FTP及EMAIL等多项服务。将一台服务器的某项或者全部服务内容逻辑划分为多个服务单位，对外表现为多个服务器。从而充分利用服务器硬件资源。从用户角度来看，一台虚拟主机和一台独立的硬件主机是完全一样的。\n\n<!-- more -->\n\n在使用Nginx服务器提供Web服务时，利用虚拟主机的技术就可以避免为每一个要运行的网站提供单独的Nginx服务器，也无需为每个网站对应运行一组Nginx进程。虚拟主机技术使得Nginx服务器可以在同一台服务器上只运行一组Nginx进程，就可以运行多个网站。那么，如何对Nginx进行配置才能达到这种效果呢？\n\n前面提到过，每一个http块都可以包含多个server块，而每个server块就相当于一台虚拟主机，它内部可有多台主机联合提供服务，一起对外提供在逻辑上关系密切的一组服务（或网站）。我们先来学习server全局块中常见的指令机器配置。server全局块指令的作用域为本server块，其不会影响到其他的server块。\n","slug":"虚拟服务器","published":1,"updated":"2019-11-07T02:24:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo1z00anh5s6dubi933d","content":"<h1 id=\"虚拟主机\"><a href=\"#虚拟主机\" class=\"headerlink\" title=\"虚拟主机\"></a>虚拟主机</h1><p>虚拟主机，又称虚拟服务器、主机空间或是网页空间，它是一种技术。该技术是为了节省互联网服务器硬件成本而出现的。这里『主机』或『空间』是由实体的服务器延伸而来，硬件系统可以基于服务器群，或者单个服务器等。虚拟主机技术主要应用于HTTP、FTP及EMAIL等多项服务。将一台服务器的某项或者全部服务内容逻辑划分为多个服务单位，对外表现为多个服务器。从而充分利用服务器硬件资源。从用户角度来看，一台虚拟主机和一台独立的硬件主机是完全一样的。</p>\n<a id=\"more\"></a>\n<p>在使用Nginx服务器提供Web服务时，利用虚拟主机的技术就可以避免为每一个要运行的网站提供单独的Nginx服务器，也无需为每个网站对应运行一组Nginx进程。虚拟主机技术使得Nginx服务器可以在同一台服务器上只运行一组Nginx进程，就可以运行多个网站。那么，如何对Nginx进行配置才能达到这种效果呢？</p>\n<p>前面提到过，每一个http块都可以包含多个server块，而每个server块就相当于一台虚拟主机，它内部可有多台主机联合提供服务，一起对外提供在逻辑上关系密切的一组服务（或网站）。我们先来学习server全局块中常见的指令机器配置。server全局块指令的作用域为本server块，其不会影响到其他的server块。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"虚拟主机\"><a href=\"#虚拟主机\" class=\"headerlink\" title=\"虚拟主机\"></a>虚拟主机</h1><p>虚拟主机，又称虚拟服务器、主机空间或是网页空间，它是一种技术。该技术是为了节省互联网服务器硬件成本而出现的。这里『主机』或『空间』是由实体的服务器延伸而来，硬件系统可以基于服务器群，或者单个服务器等。虚拟主机技术主要应用于HTTP、FTP及EMAIL等多项服务。将一台服务器的某项或者全部服务内容逻辑划分为多个服务单位，对外表现为多个服务器。从而充分利用服务器硬件资源。从用户角度来看，一台虚拟主机和一台独立的硬件主机是完全一样的。</p>","more":"<p>在使用Nginx服务器提供Web服务时，利用虚拟主机的技术就可以避免为每一个要运行的网站提供单独的Nginx服务器，也无需为每个网站对应运行一组Nginx进程。虚拟主机技术使得Nginx服务器可以在同一台服务器上只运行一组Nginx进程，就可以运行多个网站。那么，如何对Nginx进行配置才能达到这种效果呢？</p>\n<p>前面提到过，每一个http块都可以包含多个server块，而每个server块就相当于一台虚拟主机，它内部可有多台主机联合提供服务，一起对外提供在逻辑上关系密切的一组服务（或网站）。我们先来学习server全局块中常见的指令机器配置。server全局块指令的作用域为本server块，其不会影响到其他的server块。</p>"},{"title":"自定义服务日志","toc":false,"date":"2017-08-27T00:11:51.000Z","_content":"\n# access_log\n\nNginx服务器支持对服务日志的格式、大小、输出等进行配置，需要使用两个指令，分别是access_log和log_format指令。\n\n<!-- more -->\n\naccess_log指令的语法结构为：\n```\naccess_log path [format[buffer=size]];\n```\n\n> path 配置服务日志的文件存放的路径和名称\n> format 可选项，自定义服务日志的格式字符串，也可以通过「格式串的名称」使用log_format指令定义好的格式。「格式串的名称」在log_format指令中定义。\n> size，配置临时存放日志的内存缓存区大小\n\n此指令可以在http块、server块或者location块中进行设置。\n\n如果要取消记录服务日志的功能，则使用：\n```\naccess_log off;\n```\n---\n\n# log_format\n\n和access_log联合使用的另一个指令是log_format，它专门用于定义服务日志的格式，并且可以为格式字符串定义一个名字，以便access_log指令可以直接调用。其语法格式为：\n```\nlog_format name string ...;\n```\n> name，格式字符串的名字；\n> string 服务日志的格式字符串\n\n示例：\n```\nlog_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n```\n> 此指令只能在http块中进行配置\n","source":"_posts/自定义服务日志.md","raw":"---\ntitle: 自定义服务日志\ntags:\n  - nginx\ncategories:\n  - 后端开发\ntoc: false\ndate: 2017-08-27 08:11:51\n---\n\n# access_log\n\nNginx服务器支持对服务日志的格式、大小、输出等进行配置，需要使用两个指令，分别是access_log和log_format指令。\n\n<!-- more -->\n\naccess_log指令的语法结构为：\n```\naccess_log path [format[buffer=size]];\n```\n\n> path 配置服务日志的文件存放的路径和名称\n> format 可选项，自定义服务日志的格式字符串，也可以通过「格式串的名称」使用log_format指令定义好的格式。「格式串的名称」在log_format指令中定义。\n> size，配置临时存放日志的内存缓存区大小\n\n此指令可以在http块、server块或者location块中进行设置。\n\n如果要取消记录服务日志的功能，则使用：\n```\naccess_log off;\n```\n---\n\n# log_format\n\n和access_log联合使用的另一个指令是log_format，它专门用于定义服务日志的格式，并且可以为格式字符串定义一个名字，以便access_log指令可以直接调用。其语法格式为：\n```\nlog_format name string ...;\n```\n> name，格式字符串的名字；\n> string 服务日志的格式字符串\n\n示例：\n```\nlog_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n```\n> 此指令只能在http块中进行配置\n","slug":"自定义服务日志","published":1,"updated":"2019-11-07T02:24:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo2000aqh5s6sfmvfpef","content":"<h1 id=\"access-log\"><a href=\"#access-log\" class=\"headerlink\" title=\"access_log\"></a>access_log</h1><p>Nginx服务器支持对服务日志的格式、大小、输出等进行配置，需要使用两个指令，分别是access_log和log_format指令。</p>\n<a id=\"more\"></a>\n<p>access_log指令的语法结构为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">access_log path [format[buffer=size]];</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>path 配置服务日志的文件存放的路径和名称<br>format 可选项，自定义服务日志的格式字符串，也可以通过「格式串的名称」使用log_format指令定义好的格式。「格式串的名称」在log_format指令中定义。<br>size，配置临时存放日志的内存缓存区大小</p>\n</blockquote>\n<p>此指令可以在http块、server块或者location块中进行设置。</p>\n<p>如果要取消记录服务日志的功能，则使用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">access_log off;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"log-format\"><a href=\"#log-format\" class=\"headerlink\" title=\"log_format\"></a>log_format</h1><p>和access_log联合使用的另一个指令是log_format，它专门用于定义服务日志的格式，并且可以为格式字符串定义一个名字，以便access_log指令可以直接调用。其语法格式为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log_format name string ...;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>name，格式字符串的名字；<br>string 服务日志的格式字符串</p>\n</blockquote>\n<p>示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>此指令只能在http块中进行配置</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"access-log\"><a href=\"#access-log\" class=\"headerlink\" title=\"access_log\"></a>access_log</h1><p>Nginx服务器支持对服务日志的格式、大小、输出等进行配置，需要使用两个指令，分别是access_log和log_format指令。</p>","more":"<p>access_log指令的语法结构为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">access_log path [format[buffer=size]];</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>path 配置服务日志的文件存放的路径和名称<br>format 可选项，自定义服务日志的格式字符串，也可以通过「格式串的名称」使用log_format指令定义好的格式。「格式串的名称」在log_format指令中定义。<br>size，配置临时存放日志的内存缓存区大小</p>\n</blockquote>\n<p>此指令可以在http块、server块或者location块中进行设置。</p>\n<p>如果要取消记录服务日志的功能，则使用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">access_log off;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"log-format\"><a href=\"#log-format\" class=\"headerlink\" title=\"log_format\"></a>log_format</h1><p>和access_log联合使用的另一个指令是log_format，它专门用于定义服务日志的格式，并且可以为格式字符串定义一个名字，以便access_log指令可以直接调用。其语法格式为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log_format name string ...;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>name，格式字符串的名字；<br>string 服务日志的格式字符串</p>\n</blockquote>\n<p>示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>此指令只能在http块中进行配置</p>\n</blockquote>"},{"title":"解决在Centos系统中无法切换到jenkins用户","toc":false,"date":"2019-08-14T06:13:48.000Z","_content":"\n今天在Centos上安装好了jenkins后，由于jenkins会自动创建一个用户，所以我想切换到jenkins用户，模拟执行一些脚本，\n我执行下面语句\n```bash\nsu jenkins\n```\n虽然不报错，但是就是切换不过去。原来/etc/passwd文件中的/bin/bash被yum安装的时候变成了/bin/false，需要修改回去。接着执行sudo vim /etc/passwd命令,把false改为bash\n\n```bash\nvim /etc/passwd\n```\n\n给jenkins用户添加一个密码\n```bash\npasswd jenkins\n```\n\n 修改完毕后，执行su jenkins命令。结果新的问题又来啦，当我切换到jenkins用户后，命令提示符的用户名不是jenkins而变成了如下：\n```bash\n-bash-4.1#\n```\n\n原因是在安装jenkins时，jenkins只是创建了jenkins用户，并没有为其创建home目录。所以系统就不会在创建用户的时候，自动拷贝/etc/skel目录下的用户环境变量文件到用户家目录，也就导致这些文件不存在，出现-bash-4.1#的问题了\n以下命令是在切换到jenkins用户下执行的！（只是用户现在显示的是-bash-4.1）\n\n这个时候呢，参考网上的做法我执行下面步骤：\n```bash\nvim ~/.bash_profile\n```\n执行上面的命令，即使没有.bash_profile文件，linux会自动创建。\n然后再添加这句\n\n```bash\nexport PS1='[\\u@\\h \\W]\\$'\n```\n\n PS1：命令行提示符环境变量\n \n\n```bash\nsource ~/.bash_profile\n```\n","source":"_posts/解决在Centos系统中无法切换到jenkins用户.md","raw":"---\ntitle: 解决在Centos系统中无法切换到jenkins用户\ntags:\n  - jenkins\ncategories:\n  - Web开发\ntoc: false\ndate: 2019-08-14 14:13:48\n---\n\n今天在Centos上安装好了jenkins后，由于jenkins会自动创建一个用户，所以我想切换到jenkins用户，模拟执行一些脚本，\n我执行下面语句\n```bash\nsu jenkins\n```\n虽然不报错，但是就是切换不过去。原来/etc/passwd文件中的/bin/bash被yum安装的时候变成了/bin/false，需要修改回去。接着执行sudo vim /etc/passwd命令,把false改为bash\n\n```bash\nvim /etc/passwd\n```\n\n给jenkins用户添加一个密码\n```bash\npasswd jenkins\n```\n\n 修改完毕后，执行su jenkins命令。结果新的问题又来啦，当我切换到jenkins用户后，命令提示符的用户名不是jenkins而变成了如下：\n```bash\n-bash-4.1#\n```\n\n原因是在安装jenkins时，jenkins只是创建了jenkins用户，并没有为其创建home目录。所以系统就不会在创建用户的时候，自动拷贝/etc/skel目录下的用户环境变量文件到用户家目录，也就导致这些文件不存在，出现-bash-4.1#的问题了\n以下命令是在切换到jenkins用户下执行的！（只是用户现在显示的是-bash-4.1）\n\n这个时候呢，参考网上的做法我执行下面步骤：\n```bash\nvim ~/.bash_profile\n```\n执行上面的命令，即使没有.bash_profile文件，linux会自动创建。\n然后再添加这句\n\n```bash\nexport PS1='[\\u@\\h \\W]\\$'\n```\n\n PS1：命令行提示符环境变量\n \n\n```bash\nsource ~/.bash_profile\n```\n","slug":"解决在Centos系统中无法切换到jenkins用户","published":1,"updated":"2019-11-07T02:24:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo2100ath5s6kce5nez4","content":"<p>今天在Centos上安装好了jenkins后，由于jenkins会自动创建一个用户，所以我想切换到jenkins用户，模拟执行一些脚本，<br>我执行下面语句<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su jenkins</span><br></pre></td></tr></table></figure></p>\n<p>虽然不报错，但是就是切换不过去。原来/etc/passwd文件中的/bin/bash被yum安装的时候变成了/bin/false，需要修改回去。接着执行sudo vim /etc/passwd命令,把false改为bash</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/passwd</span><br></pre></td></tr></table></figure>\n<p>给jenkins用户添加一个密码<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">passwd jenkins</span><br></pre></td></tr></table></figure></p>\n<p> 修改完毕后，执行su jenkins命令。结果新的问题又来啦，当我切换到jenkins用户后，命令提示符的用户名不是jenkins而变成了如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-bash-4.1<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure></p>\n<p>原因是在安装jenkins时，jenkins只是创建了jenkins用户，并没有为其创建home目录。所以系统就不会在创建用户的时候，自动拷贝/etc/skel目录下的用户环境变量文件到用户家目录，也就导致这些文件不存在，出现-bash-4.1#的问题了<br>以下命令是在切换到jenkins用户下执行的！（只是用户现在显示的是-bash-4.1）</p>\n<p>这个时候呢，参考网上的做法我执行下面步骤：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.bash_profile</span><br></pre></td></tr></table></figure></p>\n<p>执行上面的命令，即使没有.bash_profile文件，linux会自动创建。<br>然后再添加这句</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PS1=<span class=\"string\">'[\\u@\\h \\W]\\$'</span></span><br></pre></td></tr></table></figure>\n<p> PS1：命令行提示符环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>今天在Centos上安装好了jenkins后，由于jenkins会自动创建一个用户，所以我想切换到jenkins用户，模拟执行一些脚本，<br>我执行下面语句<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su jenkins</span><br></pre></td></tr></table></figure></p>\n<p>虽然不报错，但是就是切换不过去。原来/etc/passwd文件中的/bin/bash被yum安装的时候变成了/bin/false，需要修改回去。接着执行sudo vim /etc/passwd命令,把false改为bash</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/passwd</span><br></pre></td></tr></table></figure>\n<p>给jenkins用户添加一个密码<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">passwd jenkins</span><br></pre></td></tr></table></figure></p>\n<p> 修改完毕后，执行su jenkins命令。结果新的问题又来啦，当我切换到jenkins用户后，命令提示符的用户名不是jenkins而变成了如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-bash-4.1<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure></p>\n<p>原因是在安装jenkins时，jenkins只是创建了jenkins用户，并没有为其创建home目录。所以系统就不会在创建用户的时候，自动拷贝/etc/skel目录下的用户环境变量文件到用户家目录，也就导致这些文件不存在，出现-bash-4.1#的问题了<br>以下命令是在切换到jenkins用户下执行的！（只是用户现在显示的是-bash-4.1）</p>\n<p>这个时候呢，参考网上的做法我执行下面步骤：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.bash_profile</span><br></pre></td></tr></table></figure></p>\n<p>执行上面的命令，即使没有.bash_profile文件，linux会自动创建。<br>然后再添加这句</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PS1=<span class=\"string\">'[\\u@\\h \\W]\\$'</span></span><br></pre></td></tr></table></figure>\n<p> PS1：命令行提示符环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure>\n"},{"title":"设置webstorm自动删除行尾分号","toc":false,"date":"2018-04-11T10:11:27.000Z","_content":"\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/WX20180411-181304.png)\n","source":"_posts/设置webstorm自动删除行尾分号.md","raw":"---\ntitle: 设置webstorm自动删除行尾分号\ntags:\n  - 开发调试\ncategories:\n  - Web开发\ntoc: false\ndate: 2018-04-11 18:11:27\n---\n\n![](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/WX20180411-181304.png)\n","slug":"设置webstorm自动删除行尾分号","published":1,"updated":"2019-11-07T02:24:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo2300awh5s6rrn82swa","content":"<p><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/WX20180411-181304.png\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/WX20180411-181304.png\" alt></p>\n"},{"title":"设置网站的错误页面","toc":false,"date":"2017-08-27T13:59:16.000Z","_content":"\nNginx 服务器设置网站错误页面的指令为error_page，语法结构为：\n\n```\nerror_page code ... [=[response]] uri\n```\n\n<!-- more -->\n\n> code，要处理的HTTP错误代码\n> response，可选项，将code制定的错误代码转化为新的错误代码response\n> uri，错误页面的路径或者网站地址。如果设置为路径，则是以Nginx服务器安装路径下的html目录为根路径的相对路径；如果设置为网址，则Nginx服务器会直接访问该网站获取错误页面，并返回给用户端（这里是跳转，不是抓取页面返回）。\n看几个error_page指令的示例：\n\n```\nerror_page 404 /404.html;\n```\n\n设置Nginx服务器使用『Nginx安装路径/html/404.html』页面相应404错误（'无法找到网页'错误）；\n再如：\n\n```\nerror_page 403 http://somewebsite.com/forbidden.html;\n```\n设置Nginx服务器使用'http://somewebsite.com/forbidden.html '页面相应403错误（『拒绝显示网页』错误）；\n再如：\n\n```\nerror_page 410 =301 /empty.gif;\n```\n\n设置Nginx服务器产生410的HTTP信息时，使用『Nginx安装路径/html/empty.gif』返回给用户端301消息（'已移动'消息）。\n\n---\n\n如果不想将错误页面放置到Nginx服务器的安装路径下管理，该怎么做呢？\n\n其实这个很简单，只需要另外使用一个location指令定向错误页面到新的路径下面就可以了。比如对于上面的第一个示例，我们希望Nginx服务器使用\"/myserver/errorpages/404.html\"页面相应404错误，那么在设置完：\n\n```\nerror_page 404 /404.html;\n```\n\n之后，我们再添加这样一个location块：\n\n```\nlocation /404.html {\n    root    /myserver/errorpages/;\n}\n```\n\n首先捕获\"/404.html\"请求，然后将请求定向到新的路径下面即可。\nerror_page指令可以在http块、server块和location快中配置。\n","source":"_posts/设置网站的错误页面.md","raw":"---\ntitle: 设置网站的错误页面\ntags:\n  - nginx\ncategories:\n  - 后端开发\ntoc: false\ndate: 2017-08-27 21:59:16\n---\n\nNginx 服务器设置网站错误页面的指令为error_page，语法结构为：\n\n```\nerror_page code ... [=[response]] uri\n```\n\n<!-- more -->\n\n> code，要处理的HTTP错误代码\n> response，可选项，将code制定的错误代码转化为新的错误代码response\n> uri，错误页面的路径或者网站地址。如果设置为路径，则是以Nginx服务器安装路径下的html目录为根路径的相对路径；如果设置为网址，则Nginx服务器会直接访问该网站获取错误页面，并返回给用户端（这里是跳转，不是抓取页面返回）。\n看几个error_page指令的示例：\n\n```\nerror_page 404 /404.html;\n```\n\n设置Nginx服务器使用『Nginx安装路径/html/404.html』页面相应404错误（'无法找到网页'错误）；\n再如：\n\n```\nerror_page 403 http://somewebsite.com/forbidden.html;\n```\n设置Nginx服务器使用'http://somewebsite.com/forbidden.html '页面相应403错误（『拒绝显示网页』错误）；\n再如：\n\n```\nerror_page 410 =301 /empty.gif;\n```\n\n设置Nginx服务器产生410的HTTP信息时，使用『Nginx安装路径/html/empty.gif』返回给用户端301消息（'已移动'消息）。\n\n---\n\n如果不想将错误页面放置到Nginx服务器的安装路径下管理，该怎么做呢？\n\n其实这个很简单，只需要另外使用一个location指令定向错误页面到新的路径下面就可以了。比如对于上面的第一个示例，我们希望Nginx服务器使用\"/myserver/errorpages/404.html\"页面相应404错误，那么在设置完：\n\n```\nerror_page 404 /404.html;\n```\n\n之后，我们再添加这样一个location块：\n\n```\nlocation /404.html {\n    root    /myserver/errorpages/;\n}\n```\n\n首先捕获\"/404.html\"请求，然后将请求定向到新的路径下面即可。\nerror_page指令可以在http块、server块和location快中配置。\n","slug":"设置网站的错误页面","published":1,"updated":"2019-11-07T02:24:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo2500azh5s6qufyftjs","content":"<p>Nginx 服务器设置网站错误页面的指令为error_page，语法结构为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_page code ... [=[response]] uri</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<blockquote>\n<p>code，要处理的HTTP错误代码<br>response，可选项，将code制定的错误代码转化为新的错误代码response<br>uri，错误页面的路径或者网站地址。如果设置为路径，则是以Nginx服务器安装路径下的html目录为根路径的相对路径；如果设置为网址，则Nginx服务器会直接访问该网站获取错误页面，并返回给用户端（这里是跳转，不是抓取页面返回）。<br>看几个error_page指令的示例：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_page 404 /404.html;</span><br></pre></td></tr></table></figure>\n<p>设置Nginx服务器使用『Nginx安装路径/html/404.html』页面相应404错误（’无法找到网页’错误）；<br>再如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_page 403 http://somewebsite.com/forbidden.html;</span><br></pre></td></tr></table></figure>\n<p>设置Nginx服务器使用’<a href=\"http://somewebsite.com/forbidden.html\" target=\"_blank\" rel=\"noopener\">http://somewebsite.com/forbidden.html</a> ‘页面相应403错误（『拒绝显示网页』错误）；<br>再如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_page 410 =301 /empty.gif;</span><br></pre></td></tr></table></figure>\n<p>设置Nginx服务器产生410的HTTP信息时，使用『Nginx安装路径/html/empty.gif』返回给用户端301消息（’已移动’消息）。</p>\n<hr>\n<p>如果不想将错误页面放置到Nginx服务器的安装路径下管理，该怎么做呢？</p>\n<p>其实这个很简单，只需要另外使用一个location指令定向错误页面到新的路径下面就可以了。比如对于上面的第一个示例，我们希望Nginx服务器使用”/myserver/errorpages/404.html”页面相应404错误，那么在设置完：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_page 404 /404.html;</span><br></pre></td></tr></table></figure>\n<p>之后，我们再添加这样一个location块：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /404.html &#123;</span><br><span class=\"line\">    root    /myserver/errorpages/;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先捕获”/404.html”请求，然后将请求定向到新的路径下面即可。<br>error_page指令可以在http块、server块和location快中配置。</p>\n","site":{"data":{}},"excerpt":"<p>Nginx 服务器设置网站错误页面的指令为error_page，语法结构为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_page code ... [=[response]] uri</span><br></pre></td></tr></table></figure>","more":"<blockquote>\n<p>code，要处理的HTTP错误代码<br>response，可选项，将code制定的错误代码转化为新的错误代码response<br>uri，错误页面的路径或者网站地址。如果设置为路径，则是以Nginx服务器安装路径下的html目录为根路径的相对路径；如果设置为网址，则Nginx服务器会直接访问该网站获取错误页面，并返回给用户端（这里是跳转，不是抓取页面返回）。<br>看几个error_page指令的示例：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_page 404 /404.html;</span><br></pre></td></tr></table></figure>\n<p>设置Nginx服务器使用『Nginx安装路径/html/404.html』页面相应404错误（’无法找到网页’错误）；<br>再如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_page 403 http://somewebsite.com/forbidden.html;</span><br></pre></td></tr></table></figure>\n<p>设置Nginx服务器使用’<a href=\"http://somewebsite.com/forbidden.html\" target=\"_blank\" rel=\"noopener\">http://somewebsite.com/forbidden.html</a> ‘页面相应403错误（『拒绝显示网页』错误）；<br>再如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_page 410 =301 /empty.gif;</span><br></pre></td></tr></table></figure>\n<p>设置Nginx服务器产生410的HTTP信息时，使用『Nginx安装路径/html/empty.gif』返回给用户端301消息（’已移动’消息）。</p>\n<hr>\n<p>如果不想将错误页面放置到Nginx服务器的安装路径下管理，该怎么做呢？</p>\n<p>其实这个很简单，只需要另外使用一个location指令定向错误页面到新的路径下面就可以了。比如对于上面的第一个示例，我们希望Nginx服务器使用”/myserver/errorpages/404.html”页面相应404错误，那么在设置完：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_page 404 /404.html;</span><br></pre></td></tr></table></figure>\n<p>之后，我们再添加这样一个location块：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /404.html &#123;</span><br><span class=\"line\">    root    /myserver/errorpages/;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先捕获”/404.html”请求，然后将请求定向到新的路径下面即可。<br>error_page指令可以在http块、server块和location快中配置。</p>"},{"title":"被遗忘的Logrotate","toc":false,"date":"2017-10-09T05:32:14.000Z","_content":"\n我发现很多人的服务器上都运行着一些诸如每天切分Nginx日志之类的CRON脚本，大家似乎遗忘了Logrotate，争相发明自己的轮子，这真是让人沮丧啊！就好比明明身边躺着现成的性感美女，大家却忙着自娱自乐，罪过！\n\n<!-- more -->\n\n## Logrotate的介绍\n\n显而易见，Logrotate是基于CRON来运行的，其脚本是「/etc/cron.daily/logrotate」：\n\n```\n#!/bin/sh\n\n/usr/sbin/logrotate /etc/logrotate.conf\nEXITVALUE=$?\nif [ $EXITVALUE != 0 ]; then\n    /usr/bin/logger -t logrotate \"ALERT exited abnormally with [$EXITVALUE]\"\nfi\nexit 0\n```\n\n实际运行时，Logrotate会调用配置文件「/etc/logrotate.conf」：\n\n```\n# see \"man logrotate\" for details\n# rotate log files weekly\nweekly\n\n# keep 4 weeks worth of backlogs\nrotate 4\n\n# create new (empty) log files after rotating old ones\ncreate\n\n# uncomment this if you want your log files compressed\n#compress\n\n# RPM packages drop log rotation information into this directory\ninclude /etc/logrotate.d\n\n# no packages own wtmp -- we'll rotate them here\n/var/log/wtmp {\n    monthly\n    minsize 1M\n    create 0664 root utmp\n    rotate 1\n}\n\n# system-specific logs may be also be configured here.\n```\n\n这里的设置可以理解为Logrotate的缺省值，当然了，可以我们在「/etc/logrotate.d」目录里放置自己的配置文件，用来覆盖Logrotate的缺省值。\n\n## Logrotate的演示\n\n按天保存一周的Nginx日志压缩文件，配置文件为「/etc/logrotate.d/nginx」：\n\n```\n/usr/local/nginx/logs/*.log {\n    daily\n    dateext\n    compress\n    rotate 7\n    sharedscripts\n    postrotate\n        kill -USR1 `cat /var/run/nginx.pid`\n    endscript\n}\n```\n\n如果你等不及CRON，可以通过如下命令来手动执行：\n\n```\nshell> logrotate -f /etc/logrotate.d/nginx\n```\n\n当然，正式执行前最好通过Debug选项来验证一下，这对调试也很重要：\n\n```\nshell> logrotate -d -f /etc/logrotate.d/nginx\n```\n\nBTW：类似的还有Verbose选项，这里就不多说了。\n\n## Logrotate的疑问\n\n问题：sharedscripts的作用是什么？\n\n大家可能注意到了，我在前面Nginx的例子里声明日志文件的时候用了星号通配符，也就是说这里可能涉及多个日志文件，比如：access.log和error.log。说到这里大家或许就明白了，sharedscripts的作用是在所有的日志文件都轮转完毕后统一执行一次脚本。如果没有配置这条指令，那么每个日志文件轮转完毕后都会执行一次脚本。\n\n问题：rotate和maxage的区别是什么？\n\n它们都是用来控制保存多少日志文件的，区别在于rotate是以个数为单位的，而maxage是以天数为单位的。如果我们是以按天来轮转日志，那么二者的差别就不大了。\n\n问题：为什么生成日志的时间是凌晨四五点？\n\n前面我们说过，Logrotate是基于CRON运行的，所以这个时间是由CRON控制的，具体可以查询CRON的配置文件「/etc/crontab」，可以手动改成如23:59等时间执行：\n\n```\nSHELL=/bin/bash\nPATH=/sbin:/bin:/usr/sbin:/usr/bin\nMAILTO=root\nHOME=/\n\n# run-parts\n01 * * * * root run-parts /etc/cron.hourly\n59 23 * * * root run-parts /etc/cron.daily\n22 4 * * 0 root run-parts /etc/cron.weekly\n42 4 1 * * root run-parts /etc/cron.monthly\n```\n\n如果使用的是新版CentOS，那么配置文件为：/etc/anacrontab。\n\n问题：如何告诉应用程序重新打开日志文件？\n\n以Nginx为例，是通过postrotate指令发送USR1信号来通知Nginx重新打开日志文件的。但是其他的应用程序不一定遵循这样的约定，比如说MySQL是通过flush-logs来重新打开日志文件的。更有甚者，有些应用程序就压根没有提供类似的方法，此时如果想重新打开日志文件，就必须重启服务，但为了高可用性，这往往不能接受。还好Logrotate提供了一个名为copytruncate的指令，此方法采用的是先拷贝再清空的方式，整个过程中日志文件的操作句柄没有发生改变，所以不需要通知应用程序重新打开日志文件，但是需要注意的是，在拷贝和清空之间有一个时间差，所以可能会丢失部分日志数据。\n\nBTW：MySQL本身在support-files目录已经包含了一个名为mysql-log-rotate的脚本，不过它比较简单，更详细的日志轮转详见「Rotating MySQL Slow Logs Safely」。\n\n…\n\n熟悉Apache的朋友可能会记得cronolog，不过Nginx并不支持它，有人通过mkfifo命令曲线救国，先给日志文件创建管道，再搭配cronolog轮转，虽然理论上没有问题，但效率上有折扣。另外，Debian/Ubuntu下有一个简化版工具savelog，有兴趣可以看看。\n\n原文地址：[https://huoding.com/2013/04/21/246](https://huoding.com/2013/04/21/246)\n","source":"_posts/被遗忘的Logrotate.md","raw":"---\ntitle: 被遗忘的Logrotate\ntags:\n  - linux\ncategories:\n  - 后端开发\ntoc: false\ndate: 2017-10-09 13:32:14\n---\n\n我发现很多人的服务器上都运行着一些诸如每天切分Nginx日志之类的CRON脚本，大家似乎遗忘了Logrotate，争相发明自己的轮子，这真是让人沮丧啊！就好比明明身边躺着现成的性感美女，大家却忙着自娱自乐，罪过！\n\n<!-- more -->\n\n## Logrotate的介绍\n\n显而易见，Logrotate是基于CRON来运行的，其脚本是「/etc/cron.daily/logrotate」：\n\n```\n#!/bin/sh\n\n/usr/sbin/logrotate /etc/logrotate.conf\nEXITVALUE=$?\nif [ $EXITVALUE != 0 ]; then\n    /usr/bin/logger -t logrotate \"ALERT exited abnormally with [$EXITVALUE]\"\nfi\nexit 0\n```\n\n实际运行时，Logrotate会调用配置文件「/etc/logrotate.conf」：\n\n```\n# see \"man logrotate\" for details\n# rotate log files weekly\nweekly\n\n# keep 4 weeks worth of backlogs\nrotate 4\n\n# create new (empty) log files after rotating old ones\ncreate\n\n# uncomment this if you want your log files compressed\n#compress\n\n# RPM packages drop log rotation information into this directory\ninclude /etc/logrotate.d\n\n# no packages own wtmp -- we'll rotate them here\n/var/log/wtmp {\n    monthly\n    minsize 1M\n    create 0664 root utmp\n    rotate 1\n}\n\n# system-specific logs may be also be configured here.\n```\n\n这里的设置可以理解为Logrotate的缺省值，当然了，可以我们在「/etc/logrotate.d」目录里放置自己的配置文件，用来覆盖Logrotate的缺省值。\n\n## Logrotate的演示\n\n按天保存一周的Nginx日志压缩文件，配置文件为「/etc/logrotate.d/nginx」：\n\n```\n/usr/local/nginx/logs/*.log {\n    daily\n    dateext\n    compress\n    rotate 7\n    sharedscripts\n    postrotate\n        kill -USR1 `cat /var/run/nginx.pid`\n    endscript\n}\n```\n\n如果你等不及CRON，可以通过如下命令来手动执行：\n\n```\nshell> logrotate -f /etc/logrotate.d/nginx\n```\n\n当然，正式执行前最好通过Debug选项来验证一下，这对调试也很重要：\n\n```\nshell> logrotate -d -f /etc/logrotate.d/nginx\n```\n\nBTW：类似的还有Verbose选项，这里就不多说了。\n\n## Logrotate的疑问\n\n问题：sharedscripts的作用是什么？\n\n大家可能注意到了，我在前面Nginx的例子里声明日志文件的时候用了星号通配符，也就是说这里可能涉及多个日志文件，比如：access.log和error.log。说到这里大家或许就明白了，sharedscripts的作用是在所有的日志文件都轮转完毕后统一执行一次脚本。如果没有配置这条指令，那么每个日志文件轮转完毕后都会执行一次脚本。\n\n问题：rotate和maxage的区别是什么？\n\n它们都是用来控制保存多少日志文件的，区别在于rotate是以个数为单位的，而maxage是以天数为单位的。如果我们是以按天来轮转日志，那么二者的差别就不大了。\n\n问题：为什么生成日志的时间是凌晨四五点？\n\n前面我们说过，Logrotate是基于CRON运行的，所以这个时间是由CRON控制的，具体可以查询CRON的配置文件「/etc/crontab」，可以手动改成如23:59等时间执行：\n\n```\nSHELL=/bin/bash\nPATH=/sbin:/bin:/usr/sbin:/usr/bin\nMAILTO=root\nHOME=/\n\n# run-parts\n01 * * * * root run-parts /etc/cron.hourly\n59 23 * * * root run-parts /etc/cron.daily\n22 4 * * 0 root run-parts /etc/cron.weekly\n42 4 1 * * root run-parts /etc/cron.monthly\n```\n\n如果使用的是新版CentOS，那么配置文件为：/etc/anacrontab。\n\n问题：如何告诉应用程序重新打开日志文件？\n\n以Nginx为例，是通过postrotate指令发送USR1信号来通知Nginx重新打开日志文件的。但是其他的应用程序不一定遵循这样的约定，比如说MySQL是通过flush-logs来重新打开日志文件的。更有甚者，有些应用程序就压根没有提供类似的方法，此时如果想重新打开日志文件，就必须重启服务，但为了高可用性，这往往不能接受。还好Logrotate提供了一个名为copytruncate的指令，此方法采用的是先拷贝再清空的方式，整个过程中日志文件的操作句柄没有发生改变，所以不需要通知应用程序重新打开日志文件，但是需要注意的是，在拷贝和清空之间有一个时间差，所以可能会丢失部分日志数据。\n\nBTW：MySQL本身在support-files目录已经包含了一个名为mysql-log-rotate的脚本，不过它比较简单，更详细的日志轮转详见「Rotating MySQL Slow Logs Safely」。\n\n…\n\n熟悉Apache的朋友可能会记得cronolog，不过Nginx并不支持它，有人通过mkfifo命令曲线救国，先给日志文件创建管道，再搭配cronolog轮转，虽然理论上没有问题，但效率上有折扣。另外，Debian/Ubuntu下有一个简化版工具savelog，有兴趣可以看看。\n\n原文地址：[https://huoding.com/2013/04/21/246](https://huoding.com/2013/04/21/246)\n","slug":"被遗忘的Logrotate","published":1,"updated":"2019-11-07T02:24:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo2600b2h5s6th5tw2h0","content":"<p>我发现很多人的服务器上都运行着一些诸如每天切分Nginx日志之类的CRON脚本，大家似乎遗忘了Logrotate，争相发明自己的轮子，这真是让人沮丧啊！就好比明明身边躺着现成的性感美女，大家却忙着自娱自乐，罪过！</p>\n<a id=\"more\"></a>\n<h2 id=\"Logrotate的介绍\"><a href=\"#Logrotate的介绍\" class=\"headerlink\" title=\"Logrotate的介绍\"></a>Logrotate的介绍</h2><p>显而易见，Logrotate是基于CRON来运行的，其脚本是「/etc/cron.daily/logrotate」：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">/usr/sbin/logrotate /etc/logrotate.conf</span><br><span class=\"line\">EXITVALUE=$?</span><br><span class=\"line\">if [ $EXITVALUE != 0 ]; then</span><br><span class=\"line\">    /usr/bin/logger -t logrotate &quot;ALERT exited abnormally with [$EXITVALUE]&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">exit 0</span><br></pre></td></tr></table></figure>\n<p>实际运行时，Logrotate会调用配置文件「/etc/logrotate.conf」：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># see &quot;man logrotate&quot; for details</span><br><span class=\"line\"># rotate log files weekly</span><br><span class=\"line\">weekly</span><br><span class=\"line\"></span><br><span class=\"line\"># keep 4 weeks worth of backlogs</span><br><span class=\"line\">rotate 4</span><br><span class=\"line\"></span><br><span class=\"line\"># create new (empty) log files after rotating old ones</span><br><span class=\"line\">create</span><br><span class=\"line\"></span><br><span class=\"line\"># uncomment this if you want your log files compressed</span><br><span class=\"line\">#compress</span><br><span class=\"line\"></span><br><span class=\"line\"># RPM packages drop log rotation information into this directory</span><br><span class=\"line\">include /etc/logrotate.d</span><br><span class=\"line\"></span><br><span class=\"line\"># no packages own wtmp -- we&apos;ll rotate them here</span><br><span class=\"line\">/var/log/wtmp &#123;</span><br><span class=\"line\">    monthly</span><br><span class=\"line\">    minsize 1M</span><br><span class=\"line\">    create 0664 root utmp</span><br><span class=\"line\">    rotate 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># system-specific logs may be also be configured here.</span><br></pre></td></tr></table></figure>\n<p>这里的设置可以理解为Logrotate的缺省值，当然了，可以我们在「/etc/logrotate.d」目录里放置自己的配置文件，用来覆盖Logrotate的缺省值。</p>\n<h2 id=\"Logrotate的演示\"><a href=\"#Logrotate的演示\" class=\"headerlink\" title=\"Logrotate的演示\"></a>Logrotate的演示</h2><p>按天保存一周的Nginx日志压缩文件，配置文件为「/etc/logrotate.d/nginx」：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/nginx/logs/*.log &#123;</span><br><span class=\"line\">    daily</span><br><span class=\"line\">    dateext</span><br><span class=\"line\">    compress</span><br><span class=\"line\">    rotate 7</span><br><span class=\"line\">    sharedscripts</span><br><span class=\"line\">    postrotate</span><br><span class=\"line\">        kill -USR1 `cat /var/run/nginx.pid`</span><br><span class=\"line\">    endscript</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果你等不及CRON，可以通过如下命令来手动执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; logrotate -f /etc/logrotate.d/nginx</span><br></pre></td></tr></table></figure>\n<p>当然，正式执行前最好通过Debug选项来验证一下，这对调试也很重要：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; logrotate -d -f /etc/logrotate.d/nginx</span><br></pre></td></tr></table></figure>\n<p>BTW：类似的还有Verbose选项，这里就不多说了。</p>\n<h2 id=\"Logrotate的疑问\"><a href=\"#Logrotate的疑问\" class=\"headerlink\" title=\"Logrotate的疑问\"></a>Logrotate的疑问</h2><p>问题：sharedscripts的作用是什么？</p>\n<p>大家可能注意到了，我在前面Nginx的例子里声明日志文件的时候用了星号通配符，也就是说这里可能涉及多个日志文件，比如：access.log和error.log。说到这里大家或许就明白了，sharedscripts的作用是在所有的日志文件都轮转完毕后统一执行一次脚本。如果没有配置这条指令，那么每个日志文件轮转完毕后都会执行一次脚本。</p>\n<p>问题：rotate和maxage的区别是什么？</p>\n<p>它们都是用来控制保存多少日志文件的，区别在于rotate是以个数为单位的，而maxage是以天数为单位的。如果我们是以按天来轮转日志，那么二者的差别就不大了。</p>\n<p>问题：为什么生成日志的时间是凌晨四五点？</p>\n<p>前面我们说过，Logrotate是基于CRON运行的，所以这个时间是由CRON控制的，具体可以查询CRON的配置文件「/etc/crontab」，可以手动改成如23:59等时间执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHELL=/bin/bash</span><br><span class=\"line\">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class=\"line\">MAILTO=root</span><br><span class=\"line\">HOME=/</span><br><span class=\"line\"></span><br><span class=\"line\"># run-parts</span><br><span class=\"line\">01 * * * * root run-parts /etc/cron.hourly</span><br><span class=\"line\">59 23 * * * root run-parts /etc/cron.daily</span><br><span class=\"line\">22 4 * * 0 root run-parts /etc/cron.weekly</span><br><span class=\"line\">42 4 1 * * root run-parts /etc/cron.monthly</span><br></pre></td></tr></table></figure>\n<p>如果使用的是新版CentOS，那么配置文件为：/etc/anacrontab。</p>\n<p>问题：如何告诉应用程序重新打开日志文件？</p>\n<p>以Nginx为例，是通过postrotate指令发送USR1信号来通知Nginx重新打开日志文件的。但是其他的应用程序不一定遵循这样的约定，比如说MySQL是通过flush-logs来重新打开日志文件的。更有甚者，有些应用程序就压根没有提供类似的方法，此时如果想重新打开日志文件，就必须重启服务，但为了高可用性，这往往不能接受。还好Logrotate提供了一个名为copytruncate的指令，此方法采用的是先拷贝再清空的方式，整个过程中日志文件的操作句柄没有发生改变，所以不需要通知应用程序重新打开日志文件，但是需要注意的是，在拷贝和清空之间有一个时间差，所以可能会丢失部分日志数据。</p>\n<p>BTW：MySQL本身在support-files目录已经包含了一个名为mysql-log-rotate的脚本，不过它比较简单，更详细的日志轮转详见「Rotating MySQL Slow Logs Safely」。</p>\n<p>…</p>\n<p>熟悉Apache的朋友可能会记得cronolog，不过Nginx并不支持它，有人通过mkfifo命令曲线救国，先给日志文件创建管道，再搭配cronolog轮转，虽然理论上没有问题，但效率上有折扣。另外，Debian/Ubuntu下有一个简化版工具savelog，有兴趣可以看看。</p>\n<p>原文地址：<a href=\"https://huoding.com/2013/04/21/246\" target=\"_blank\" rel=\"noopener\">https://huoding.com/2013/04/21/246</a></p>\n","site":{"data":{}},"excerpt":"<p>我发现很多人的服务器上都运行着一些诸如每天切分Nginx日志之类的CRON脚本，大家似乎遗忘了Logrotate，争相发明自己的轮子，这真是让人沮丧啊！就好比明明身边躺着现成的性感美女，大家却忙着自娱自乐，罪过！</p>","more":"<h2 id=\"Logrotate的介绍\"><a href=\"#Logrotate的介绍\" class=\"headerlink\" title=\"Logrotate的介绍\"></a>Logrotate的介绍</h2><p>显而易见，Logrotate是基于CRON来运行的，其脚本是「/etc/cron.daily/logrotate」：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">/usr/sbin/logrotate /etc/logrotate.conf</span><br><span class=\"line\">EXITVALUE=$?</span><br><span class=\"line\">if [ $EXITVALUE != 0 ]; then</span><br><span class=\"line\">    /usr/bin/logger -t logrotate &quot;ALERT exited abnormally with [$EXITVALUE]&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">exit 0</span><br></pre></td></tr></table></figure>\n<p>实际运行时，Logrotate会调用配置文件「/etc/logrotate.conf」：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># see &quot;man logrotate&quot; for details</span><br><span class=\"line\"># rotate log files weekly</span><br><span class=\"line\">weekly</span><br><span class=\"line\"></span><br><span class=\"line\"># keep 4 weeks worth of backlogs</span><br><span class=\"line\">rotate 4</span><br><span class=\"line\"></span><br><span class=\"line\"># create new (empty) log files after rotating old ones</span><br><span class=\"line\">create</span><br><span class=\"line\"></span><br><span class=\"line\"># uncomment this if you want your log files compressed</span><br><span class=\"line\">#compress</span><br><span class=\"line\"></span><br><span class=\"line\"># RPM packages drop log rotation information into this directory</span><br><span class=\"line\">include /etc/logrotate.d</span><br><span class=\"line\"></span><br><span class=\"line\"># no packages own wtmp -- we&apos;ll rotate them here</span><br><span class=\"line\">/var/log/wtmp &#123;</span><br><span class=\"line\">    monthly</span><br><span class=\"line\">    minsize 1M</span><br><span class=\"line\">    create 0664 root utmp</span><br><span class=\"line\">    rotate 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># system-specific logs may be also be configured here.</span><br></pre></td></tr></table></figure>\n<p>这里的设置可以理解为Logrotate的缺省值，当然了，可以我们在「/etc/logrotate.d」目录里放置自己的配置文件，用来覆盖Logrotate的缺省值。</p>\n<h2 id=\"Logrotate的演示\"><a href=\"#Logrotate的演示\" class=\"headerlink\" title=\"Logrotate的演示\"></a>Logrotate的演示</h2><p>按天保存一周的Nginx日志压缩文件，配置文件为「/etc/logrotate.d/nginx」：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/nginx/logs/*.log &#123;</span><br><span class=\"line\">    daily</span><br><span class=\"line\">    dateext</span><br><span class=\"line\">    compress</span><br><span class=\"line\">    rotate 7</span><br><span class=\"line\">    sharedscripts</span><br><span class=\"line\">    postrotate</span><br><span class=\"line\">        kill -USR1 `cat /var/run/nginx.pid`</span><br><span class=\"line\">    endscript</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果你等不及CRON，可以通过如下命令来手动执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; logrotate -f /etc/logrotate.d/nginx</span><br></pre></td></tr></table></figure>\n<p>当然，正式执行前最好通过Debug选项来验证一下，这对调试也很重要：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; logrotate -d -f /etc/logrotate.d/nginx</span><br></pre></td></tr></table></figure>\n<p>BTW：类似的还有Verbose选项，这里就不多说了。</p>\n<h2 id=\"Logrotate的疑问\"><a href=\"#Logrotate的疑问\" class=\"headerlink\" title=\"Logrotate的疑问\"></a>Logrotate的疑问</h2><p>问题：sharedscripts的作用是什么？</p>\n<p>大家可能注意到了，我在前面Nginx的例子里声明日志文件的时候用了星号通配符，也就是说这里可能涉及多个日志文件，比如：access.log和error.log。说到这里大家或许就明白了，sharedscripts的作用是在所有的日志文件都轮转完毕后统一执行一次脚本。如果没有配置这条指令，那么每个日志文件轮转完毕后都会执行一次脚本。</p>\n<p>问题：rotate和maxage的区别是什么？</p>\n<p>它们都是用来控制保存多少日志文件的，区别在于rotate是以个数为单位的，而maxage是以天数为单位的。如果我们是以按天来轮转日志，那么二者的差别就不大了。</p>\n<p>问题：为什么生成日志的时间是凌晨四五点？</p>\n<p>前面我们说过，Logrotate是基于CRON运行的，所以这个时间是由CRON控制的，具体可以查询CRON的配置文件「/etc/crontab」，可以手动改成如23:59等时间执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHELL=/bin/bash</span><br><span class=\"line\">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class=\"line\">MAILTO=root</span><br><span class=\"line\">HOME=/</span><br><span class=\"line\"></span><br><span class=\"line\"># run-parts</span><br><span class=\"line\">01 * * * * root run-parts /etc/cron.hourly</span><br><span class=\"line\">59 23 * * * root run-parts /etc/cron.daily</span><br><span class=\"line\">22 4 * * 0 root run-parts /etc/cron.weekly</span><br><span class=\"line\">42 4 1 * * root run-parts /etc/cron.monthly</span><br></pre></td></tr></table></figure>\n<p>如果使用的是新版CentOS，那么配置文件为：/etc/anacrontab。</p>\n<p>问题：如何告诉应用程序重新打开日志文件？</p>\n<p>以Nginx为例，是通过postrotate指令发送USR1信号来通知Nginx重新打开日志文件的。但是其他的应用程序不一定遵循这样的约定，比如说MySQL是通过flush-logs来重新打开日志文件的。更有甚者，有些应用程序就压根没有提供类似的方法，此时如果想重新打开日志文件，就必须重启服务，但为了高可用性，这往往不能接受。还好Logrotate提供了一个名为copytruncate的指令，此方法采用的是先拷贝再清空的方式，整个过程中日志文件的操作句柄没有发生改变，所以不需要通知应用程序重新打开日志文件，但是需要注意的是，在拷贝和清空之间有一个时间差，所以可能会丢失部分日志数据。</p>\n<p>BTW：MySQL本身在support-files目录已经包含了一个名为mysql-log-rotate的脚本，不过它比较简单，更详细的日志轮转详见「Rotating MySQL Slow Logs Safely」。</p>\n<p>…</p>\n<p>熟悉Apache的朋友可能会记得cronolog，不过Nginx并不支持它，有人通过mkfifo命令曲线救国，先给日志文件创建管道，再搭配cronolog轮转，虽然理论上没有问题，但效率上有折扣。另外，Debian/Ubuntu下有一个简化版工具savelog，有兴趣可以看看。</p>\n<p>原文地址：<a href=\"https://huoding.com/2013/04/21/246\" target=\"_blank\" rel=\"noopener\">https://huoding.com/2013/04/21/246</a></p>"},{"title":"设置网站的默认首页","toc":false,"date":"2017-08-27T13:49:14.000Z","_content":"\n指令index用于设置网站的默认首页，他一般可以有两个作用：一是，用户在发出请求访问网站时，请求地址可以不写首页名称；二是，可以对一个请求，根据其请求内容而设置不同的首页。该指令的语法结构为：\n\n```\nindex file ...;\n```\n\n<!-- more -->\n\n其中，file变量可以包括多个文件名，其间使用空格分隔，也可以包含其他变量。次变量默认为「index.html」。\n\n看一个示例：\n\n```\nlocation ~ ^/data/(.+)/web/ {\n    root    /nginxConfig/www1/;\n    index   index.$1.html index.my1.html index.html;\n}\n```\n\n当location块接收到「data/hello/web/」时，匹配成功，它首先将预置变量$1置为「hello」，然后在/data/hello/web/路径下按照index的配置次序一次寻找index.hello.html页，index.my1.html页和index.html页，首先找到哪个页面，就是用哪个页面相应请求。\n","source":"_posts/设置网站的默认首页.md","raw":"---\ntitle: 设置网站的默认首页\ntags:\n  - nginx\ncategories:\n  - 后端开发\ntoc: false\ndate: 2017-08-27 21:49:14\n---\n\n指令index用于设置网站的默认首页，他一般可以有两个作用：一是，用户在发出请求访问网站时，请求地址可以不写首页名称；二是，可以对一个请求，根据其请求内容而设置不同的首页。该指令的语法结构为：\n\n```\nindex file ...;\n```\n\n<!-- more -->\n\n其中，file变量可以包括多个文件名，其间使用空格分隔，也可以包含其他变量。次变量默认为「index.html」。\n\n看一个示例：\n\n```\nlocation ~ ^/data/(.+)/web/ {\n    root    /nginxConfig/www1/;\n    index   index.$1.html index.my1.html index.html;\n}\n```\n\n当location块接收到「data/hello/web/」时，匹配成功，它首先将预置变量$1置为「hello」，然后在/data/hello/web/路径下按照index的配置次序一次寻找index.hello.html页，index.my1.html页和index.html页，首先找到哪个页面，就是用哪个页面相应请求。\n","slug":"设置网站的默认首页","published":1,"updated":"2019-11-07T02:24:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo2700b5h5s6jot9a6f2","content":"<p>指令index用于设置网站的默认首页，他一般可以有两个作用：一是，用户在发出请求访问网站时，请求地址可以不写首页名称；二是，可以对一个请求，根据其请求内容而设置不同的首页。该指令的语法结构为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index file ...;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>其中，file变量可以包括多个文件名，其间使用空格分隔，也可以包含其他变量。次变量默认为「index.html」。</p>\n<p>看一个示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ ^/data/(.+)/web/ &#123;</span><br><span class=\"line\">    root    /nginxConfig/www1/;</span><br><span class=\"line\">    index   index.$1.html index.my1.html index.html;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当location块接收到「data/hello/web/」时，匹配成功，它首先将预置变量$1置为「hello」，然后在/data/hello/web/路径下按照index的配置次序一次寻找index.hello.html页，index.my1.html页和index.html页，首先找到哪个页面，就是用哪个页面相应请求。</p>\n","site":{"data":{}},"excerpt":"<p>指令index用于设置网站的默认首页，他一般可以有两个作用：一是，用户在发出请求访问网站时，请求地址可以不写首页名称；二是，可以对一个请求，根据其请求内容而设置不同的首页。该指令的语法结构为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index file ...;</span><br></pre></td></tr></table></figure>","more":"<p>其中，file变量可以包括多个文件名，其间使用空格分隔，也可以包含其他变量。次变量默认为「index.html」。</p>\n<p>看一个示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ ^/data/(.+)/web/ &#123;</span><br><span class=\"line\">    root    /nginxConfig/www1/;</span><br><span class=\"line\">    index   index.$1.html index.my1.html index.html;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当location块接收到「data/hello/web/」时，匹配成功，它首先将预置变量$1置为「hello」，然后在/data/hello/web/路径下按照index的配置次序一次寻找index.hello.html页，index.my1.html页和index.html页，首先找到哪个页面，就是用哪个页面相应请求。</p>"},{"title":"[译] JavaScript 如何工作：对引擎、运行时、调用堆栈的概述","toc":false,"date":"2019-06-11T09:53:08.000Z","_content":"\n> 原文地址: https://blog.sessionstack.com/how-does-javascript-actually-work-part-1-b0bacc073cf\n\n随着JavaScript越来越流行，越来越多的团队广泛的把JavaScript应用到前端、后台、hybrid 应用、嵌入式等等领域。\n  这篇文章旨在深入挖掘JavaScript，以及向大家解释JavaScript是如何工作的。我们通过了解它的底层构建以及它是怎么发挥作用的，可以帮助我们写出更好的代码与应用。据 GitHut 统计显示，JavaScript 长期占据GitHub中 Active Repositories 和 Total Pushes 的榜首，并且在其他的类别中也不会落后太多。\n\n![image.png](http://blogimage.houjiyi.com/Fir93mLs8b6Mb7Hk9VO9jeBYju_R)\n如果一个项目越来越依赖 JavaScript，这就意味着开发人员必须利用这些语言和生态系统提供更深层次的核心内容去构建一个令人振奋的应用。然而，事实证明，有很多的开发者每天都在使用 JavaScript，但是却不知道在底层 JavaScript 是怎么运作的。\n\n<!-- more -->\n\n## 概述\n\n  几乎每个人听说过 V8 引擎的概念，而且，大多数人都知道 JavaScript 是单线程的，或者是它是使用回调队列的。\n  在这篇文章中，我们将详细的介绍这些概念，并解释 JavaScript 是怎么工作的。通过了解这些细节，你就能利用这些提供的 API 来写出更好的，非阻塞的应用来。如果你对 JavaScript 比较陌生，那么这篇文章将帮助您理解为什么 JavaScript 相较于其他语言显得如此“怪异”。如果您是一位经验丰富的 JavaScript 开发人员，希望它能给你带来一些新的见解，说明 JavaScript 的运行时，尽管你可能每天都会用到它。\n\n## JavaScript 引擎\n\n  JavaScript 引擎说起来最流行的当然是谷歌的 V8 引擎了， V8 引擎使用在 Chrome 以及 Node 中，下面有个简单的图能说明他们的关系：\n![image.png](http://blogimage.houjiyi.com/FszBQpISBdi3etpABeLl3ZATHHS4)\n  这个引擎主要由两部分组成:\n\n内存堆：这是内存分配发生的地方\n调用栈：这是你的代码执行时的地方\n\n## 运行时\n\n  有些浏览器的 API 经常被使用到(比如说：setTimeout)，但是，这些 API 却不是引擎提供的。那么，他们是从哪儿来的呢？事实上这里面实际情况有点复杂。\n![image.png](http://blogimage.houjiyi.com/Fgzd-9MuG2FwPWcvqtX7H82xn8_u)\n  所以说我们还有很多引擎之外的 API，我们把这些称为浏览器提供的 Web API，比如说 DOM、AJAX、setTimeout等等。\n  然后我们还拥有如此流行的事件循环和回调队列。\n## 调用栈\n  JavaScript 是一门单线程的语言，这意味着它只有一个调用栈，因此，它同一时间只能做一件事。\n  调用栈是一种数据结构，它记录了我们在程序中的位置。如果我们运行到一个函数，它就会将其放置到栈顶。当从这个函数返回的时候，就会将这个函数从栈顶弹出，这就是调用栈做的事情。\n  让我们来看一看下面的例子：\n\n```javascript\n    function multiply(x, y) {\n      return x * y;\n    }\n    function printSquare(x) {\n      var s = multiply(x, x);\n      console.log(s);\n    }\n    printSquare(5);\n```\n\n当程序开始执行的时候，调用栈是空的，然后，步骤如下：\n![image.png](http://blogimage.houjiyi.com/Fr3J2y8ES8qGtSi7Qu3mygGM64U4)\n  每一个进入调用栈的都称为__调用帧__。\n  这能清楚的知道当异常发生的时候堆栈追踪是怎么被构造的，堆栈的状态是如何的。让我们看一下下面的代码：\n```javascript\n    function foo() {\n      throw new Error('SessionStack will help you resolve crashes :)');\n    }\n    function bar() {\n      foo();\n    }\n    function start() {\n      bar();\n    }\n    start();\n```\n如果这发生在 Chrome 里(假设这段代码实在一个名为 foo.js 的文件中)，那么将会生成以下的堆栈追踪：\n:::hljs-center\n![image.png](http://blogimage.houjiyi.com/FgLINshLzz451aUj1dT3lsEY2Voe)\n:::\n  \"堆栈溢出\"，当你达到调用栈最大的大小的时候就会发生这种情况，而且这相当容易发生，特别是在你写递归的时候却没有全方位的测试它。我们来看看下面的代码：\n```javascript\n    function foo() {\n      foo();\n    }\n    foo();\n```\n当我们的引擎开始执行这段代码的时候，它从 foo 函数开始。然后这是个递归的函数，并且在没有任何的终止条件的情况下开始调用自己。因此，每执行一步，就会把这个相同的函数一次又一次地添加到调用堆栈中。然后它看起来就像是这样的：\n![image.png](http://blogimage.houjiyi.com/Fq3J6DpCGWfK1F_tCDf1ORSEewnI)\n  然后，在某一时刻，调用栈中的函数调用的数量超过了调用栈的实际大小，浏览器决定干掉它，抛出一个错误，它看起来就像是这样:\n::: hljs-center\n\n![image.png](http://blogimage.houjiyi.com/Fsrp0PXQgao2WTrvyFtQ41slJUQq)\n\n:::\n\n  在单个线程上运行代码很容易，因为你不必处理在多线程环境中出现的复杂场景——例如死锁。但是在一个线程上运行也非常有限制。由于 JavaScript 只有一个调用堆栈，当某段代码运行变慢时会发生什么?\n## 并发与事件循环\n  调用栈中的函数调用需要大量的时间来处理，那么这会发生什么情况呢?例如，假设你想在浏览器中使用 JavaScript 进行一些复杂的图片转码。\n  你可能会问？这算什么问题？事实上，问题是当调用栈有函数要执行，浏览器就不能做任何事，它会被堵塞住。这意味着浏览器不能渲染，不能运行其他的代码，它被卡住了。如果你想在应用里让 UI 很流畅的话，这就会产生问题。\n  而且这不是唯一的问题，一旦你的浏览器开始处理调用栈中的众多任务，它可能会停止响应相当长一段时间。大多数浏览器都会这么做，报一个错误，询问你是否想终止 web 页面。\n::: hljs-center\n\n![image.png](http://blogimage.houjiyi.com/FvXHIRKH0aWWvzCRimLpjH7CabG8)\n\n:::\n\n  这样看来，这并不是最好的用户体验，不是吗？\n  那么，如何在不阻塞 UI 的情况下执行复杂的代码，让浏览器不会不响应?解决方案就是异步回调。这将在“ JavaScript 如何工作”教程的第2部分中详细解释:“在V8引擎中，如何编写优化代码”。z\n","source":"_posts/译-JavaScript-如何工作：对引擎、运行时、调用堆栈的概述.md","raw":"---\ntitle: '[译] JavaScript 如何工作：对引擎、运行时、调用堆栈的概述'\ntags:\n  - javascript\ncategories:\n  - Web开发\n  - 性能优化\ntoc: false\ndate: 2019-06-11 17:53:08\n---\n\n> 原文地址: https://blog.sessionstack.com/how-does-javascript-actually-work-part-1-b0bacc073cf\n\n随着JavaScript越来越流行，越来越多的团队广泛的把JavaScript应用到前端、后台、hybrid 应用、嵌入式等等领域。\n  这篇文章旨在深入挖掘JavaScript，以及向大家解释JavaScript是如何工作的。我们通过了解它的底层构建以及它是怎么发挥作用的，可以帮助我们写出更好的代码与应用。据 GitHut 统计显示，JavaScript 长期占据GitHub中 Active Repositories 和 Total Pushes 的榜首，并且在其他的类别中也不会落后太多。\n\n![image.png](http://blogimage.houjiyi.com/Fir93mLs8b6Mb7Hk9VO9jeBYju_R)\n如果一个项目越来越依赖 JavaScript，这就意味着开发人员必须利用这些语言和生态系统提供更深层次的核心内容去构建一个令人振奋的应用。然而，事实证明，有很多的开发者每天都在使用 JavaScript，但是却不知道在底层 JavaScript 是怎么运作的。\n\n<!-- more -->\n\n## 概述\n\n  几乎每个人听说过 V8 引擎的概念，而且，大多数人都知道 JavaScript 是单线程的，或者是它是使用回调队列的。\n  在这篇文章中，我们将详细的介绍这些概念，并解释 JavaScript 是怎么工作的。通过了解这些细节，你就能利用这些提供的 API 来写出更好的，非阻塞的应用来。如果你对 JavaScript 比较陌生，那么这篇文章将帮助您理解为什么 JavaScript 相较于其他语言显得如此“怪异”。如果您是一位经验丰富的 JavaScript 开发人员，希望它能给你带来一些新的见解，说明 JavaScript 的运行时，尽管你可能每天都会用到它。\n\n## JavaScript 引擎\n\n  JavaScript 引擎说起来最流行的当然是谷歌的 V8 引擎了， V8 引擎使用在 Chrome 以及 Node 中，下面有个简单的图能说明他们的关系：\n![image.png](http://blogimage.houjiyi.com/FszBQpISBdi3etpABeLl3ZATHHS4)\n  这个引擎主要由两部分组成:\n\n内存堆：这是内存分配发生的地方\n调用栈：这是你的代码执行时的地方\n\n## 运行时\n\n  有些浏览器的 API 经常被使用到(比如说：setTimeout)，但是，这些 API 却不是引擎提供的。那么，他们是从哪儿来的呢？事实上这里面实际情况有点复杂。\n![image.png](http://blogimage.houjiyi.com/Fgzd-9MuG2FwPWcvqtX7H82xn8_u)\n  所以说我们还有很多引擎之外的 API，我们把这些称为浏览器提供的 Web API，比如说 DOM、AJAX、setTimeout等等。\n  然后我们还拥有如此流行的事件循环和回调队列。\n## 调用栈\n  JavaScript 是一门单线程的语言，这意味着它只有一个调用栈，因此，它同一时间只能做一件事。\n  调用栈是一种数据结构，它记录了我们在程序中的位置。如果我们运行到一个函数，它就会将其放置到栈顶。当从这个函数返回的时候，就会将这个函数从栈顶弹出，这就是调用栈做的事情。\n  让我们来看一看下面的例子：\n\n```javascript\n    function multiply(x, y) {\n      return x * y;\n    }\n    function printSquare(x) {\n      var s = multiply(x, x);\n      console.log(s);\n    }\n    printSquare(5);\n```\n\n当程序开始执行的时候，调用栈是空的，然后，步骤如下：\n![image.png](http://blogimage.houjiyi.com/Fr3J2y8ES8qGtSi7Qu3mygGM64U4)\n  每一个进入调用栈的都称为__调用帧__。\n  这能清楚的知道当异常发生的时候堆栈追踪是怎么被构造的，堆栈的状态是如何的。让我们看一下下面的代码：\n```javascript\n    function foo() {\n      throw new Error('SessionStack will help you resolve crashes :)');\n    }\n    function bar() {\n      foo();\n    }\n    function start() {\n      bar();\n    }\n    start();\n```\n如果这发生在 Chrome 里(假设这段代码实在一个名为 foo.js 的文件中)，那么将会生成以下的堆栈追踪：\n:::hljs-center\n![image.png](http://blogimage.houjiyi.com/FgLINshLzz451aUj1dT3lsEY2Voe)\n:::\n  \"堆栈溢出\"，当你达到调用栈最大的大小的时候就会发生这种情况，而且这相当容易发生，特别是在你写递归的时候却没有全方位的测试它。我们来看看下面的代码：\n```javascript\n    function foo() {\n      foo();\n    }\n    foo();\n```\n当我们的引擎开始执行这段代码的时候，它从 foo 函数开始。然后这是个递归的函数，并且在没有任何的终止条件的情况下开始调用自己。因此，每执行一步，就会把这个相同的函数一次又一次地添加到调用堆栈中。然后它看起来就像是这样的：\n![image.png](http://blogimage.houjiyi.com/Fq3J6DpCGWfK1F_tCDf1ORSEewnI)\n  然后，在某一时刻，调用栈中的函数调用的数量超过了调用栈的实际大小，浏览器决定干掉它，抛出一个错误，它看起来就像是这样:\n::: hljs-center\n\n![image.png](http://blogimage.houjiyi.com/Fsrp0PXQgao2WTrvyFtQ41slJUQq)\n\n:::\n\n  在单个线程上运行代码很容易，因为你不必处理在多线程环境中出现的复杂场景——例如死锁。但是在一个线程上运行也非常有限制。由于 JavaScript 只有一个调用堆栈，当某段代码运行变慢时会发生什么?\n## 并发与事件循环\n  调用栈中的函数调用需要大量的时间来处理，那么这会发生什么情况呢?例如，假设你想在浏览器中使用 JavaScript 进行一些复杂的图片转码。\n  你可能会问？这算什么问题？事实上，问题是当调用栈有函数要执行，浏览器就不能做任何事，它会被堵塞住。这意味着浏览器不能渲染，不能运行其他的代码，它被卡住了。如果你想在应用里让 UI 很流畅的话，这就会产生问题。\n  而且这不是唯一的问题，一旦你的浏览器开始处理调用栈中的众多任务，它可能会停止响应相当长一段时间。大多数浏览器都会这么做，报一个错误，询问你是否想终止 web 页面。\n::: hljs-center\n\n![image.png](http://blogimage.houjiyi.com/FvXHIRKH0aWWvzCRimLpjH7CabG8)\n\n:::\n\n  这样看来，这并不是最好的用户体验，不是吗？\n  那么，如何在不阻塞 UI 的情况下执行复杂的代码，让浏览器不会不响应?解决方案就是异步回调。这将在“ JavaScript 如何工作”教程的第2部分中详细解释:“在V8引擎中，如何编写优化代码”。z\n","slug":"译-JavaScript-如何工作：对引擎、运行时、调用堆栈的概述","published":1,"updated":"2019-11-07T02:26:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo2900b8h5s6y5sx05oo","content":"<blockquote>\n<p>原文地址: <a href=\"https://blog.sessionstack.com/how-does-javascript-actually-work-part-1-b0bacc073cf\" target=\"_blank\" rel=\"noopener\">https://blog.sessionstack.com/how-does-javascript-actually-work-part-1-b0bacc073cf</a></p>\n</blockquote>\n<p>随着JavaScript越来越流行，越来越多的团队广泛的把JavaScript应用到前端、后台、hybrid 应用、嵌入式等等领域。<br>  这篇文章旨在深入挖掘JavaScript，以及向大家解释JavaScript是如何工作的。我们通过了解它的底层构建以及它是怎么发挥作用的，可以帮助我们写出更好的代码与应用。据 GitHut 统计显示，JavaScript 长期占据GitHub中 Active Repositories 和 Total Pushes 的榜首，并且在其他的类别中也不会落后太多。</p>\n<p><img src=\"http://blogimage.houjiyi.com/Fir93mLs8b6Mb7Hk9VO9jeBYju_R\" alt=\"image.png\"><br>如果一个项目越来越依赖 JavaScript，这就意味着开发人员必须利用这些语言和生态系统提供更深层次的核心内容去构建一个令人振奋的应用。然而，事实证明，有很多的开发者每天都在使用 JavaScript，但是却不知道在底层 JavaScript 是怎么运作的。</p>\n<a id=\"more\"></a>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>  几乎每个人听说过 V8 引擎的概念，而且，大多数人都知道 JavaScript 是单线程的，或者是它是使用回调队列的。<br>  在这篇文章中，我们将详细的介绍这些概念，并解释 JavaScript 是怎么工作的。通过了解这些细节，你就能利用这些提供的 API 来写出更好的，非阻塞的应用来。如果你对 JavaScript 比较陌生，那么这篇文章将帮助您理解为什么 JavaScript 相较于其他语言显得如此“怪异”。如果您是一位经验丰富的 JavaScript 开发人员，希望它能给你带来一些新的见解，说明 JavaScript 的运行时，尽管你可能每天都会用到它。</p>\n<h2 id=\"JavaScript-引擎\"><a href=\"#JavaScript-引擎\" class=\"headerlink\" title=\"JavaScript 引擎\"></a>JavaScript 引擎</h2><p>  JavaScript 引擎说起来最流行的当然是谷歌的 V8 引擎了， V8 引擎使用在 Chrome 以及 Node 中，下面有个简单的图能说明他们的关系：<br><img src=\"http://blogimage.houjiyi.com/FszBQpISBdi3etpABeLl3ZATHHS4\" alt=\"image.png\"><br>  这个引擎主要由两部分组成:</p>\n<p>内存堆：这是内存分配发生的地方<br>调用栈：这是你的代码执行时的地方</p>\n<h2 id=\"运行时\"><a href=\"#运行时\" class=\"headerlink\" title=\"运行时\"></a>运行时</h2><p>  有些浏览器的 API 经常被使用到(比如说：setTimeout)，但是，这些 API 却不是引擎提供的。那么，他们是从哪儿来的呢？事实上这里面实际情况有点复杂。<br><img src=\"http://blogimage.houjiyi.com/Fgzd-9MuG2FwPWcvqtX7H82xn8_u\" alt=\"image.png\"><br>  所以说我们还有很多引擎之外的 API，我们把这些称为浏览器提供的 Web API，比如说 DOM、AJAX、setTimeout等等。<br>  然后我们还拥有如此流行的事件循环和回调队列。</p>\n<h2 id=\"调用栈\"><a href=\"#调用栈\" class=\"headerlink\" title=\"调用栈\"></a>调用栈</h2><p>  JavaScript 是一门单线程的语言，这意味着它只有一个调用栈，因此，它同一时间只能做一件事。<br>  调用栈是一种数据结构，它记录了我们在程序中的位置。如果我们运行到一个函数，它就会将其放置到栈顶。当从这个函数返回的时候，就会将这个函数从栈顶弹出，这就是调用栈做的事情。<br>  让我们来看一看下面的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">multiply</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x * y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printSquare</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> s = multiply(x, x);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">printSquare(<span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure>\n<p>当程序开始执行的时候，调用栈是空的，然后，步骤如下：<br><img src=\"http://blogimage.houjiyi.com/Fr3J2y8ES8qGtSi7Qu3mygGM64U4\" alt=\"image.png\"><br>  每一个进入调用栈的都称为<strong>调用帧</strong>。<br>  这能清楚的知道当异常发生的时候堆栈追踪是怎么被构造的，堆栈的状态是如何的。让我们看一下下面的代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'SessionStack will help you resolve crashes :)'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  foo();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  bar();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">start();</span><br></pre></td></tr></table></figure></p>\n<p>如果这发生在 Chrome 里(假设这段代码实在一个名为 foo.js 的文件中)，那么将会生成以下的堆栈追踪：<br>:::hljs-center<br><img src=\"http://blogimage.houjiyi.com/FgLINshLzz451aUj1dT3lsEY2Voe\" alt=\"image.png\"><br>:::<br>  “堆栈溢出”，当你达到调用栈最大的大小的时候就会发生这种情况，而且这相当容易发生，特别是在你写递归的时候却没有全方位的测试它。我们来看看下面的代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  foo();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo();</span><br></pre></td></tr></table></figure></p>\n<p>当我们的引擎开始执行这段代码的时候，它从 foo 函数开始。然后这是个递归的函数，并且在没有任何的终止条件的情况下开始调用自己。因此，每执行一步，就会把这个相同的函数一次又一次地添加到调用堆栈中。然后它看起来就像是这样的：<br><img src=\"http://blogimage.houjiyi.com/Fq3J6DpCGWfK1F_tCDf1ORSEewnI\" alt=\"image.png\"><br>  然后，在某一时刻，调用栈中的函数调用的数量超过了调用栈的实际大小，浏览器决定干掉它，抛出一个错误，它看起来就像是这样:<br>::: hljs-center</p>\n<p><img src=\"http://blogimage.houjiyi.com/Fsrp0PXQgao2WTrvyFtQ41slJUQq\" alt=\"image.png\"></p>\n<p>:::</p>\n<p>  在单个线程上运行代码很容易，因为你不必处理在多线程环境中出现的复杂场景——例如死锁。但是在一个线程上运行也非常有限制。由于 JavaScript 只有一个调用堆栈，当某段代码运行变慢时会发生什么?</p>\n<h2 id=\"并发与事件循环\"><a href=\"#并发与事件循环\" class=\"headerlink\" title=\"并发与事件循环\"></a>并发与事件循环</h2><p>  调用栈中的函数调用需要大量的时间来处理，那么这会发生什么情况呢?例如，假设你想在浏览器中使用 JavaScript 进行一些复杂的图片转码。<br>  你可能会问？这算什么问题？事实上，问题是当调用栈有函数要执行，浏览器就不能做任何事，它会被堵塞住。这意味着浏览器不能渲染，不能运行其他的代码，它被卡住了。如果你想在应用里让 UI 很流畅的话，这就会产生问题。<br>  而且这不是唯一的问题，一旦你的浏览器开始处理调用栈中的众多任务，它可能会停止响应相当长一段时间。大多数浏览器都会这么做，报一个错误，询问你是否想终止 web 页面。<br>::: hljs-center</p>\n<p><img src=\"http://blogimage.houjiyi.com/FvXHIRKH0aWWvzCRimLpjH7CabG8\" alt=\"image.png\"></p>\n<p>:::</p>\n<p>  这样看来，这并不是最好的用户体验，不是吗？<br>  那么，如何在不阻塞 UI 的情况下执行复杂的代码，让浏览器不会不响应?解决方案就是异步回调。这将在“ JavaScript 如何工作”教程的第2部分中详细解释:“在V8引擎中，如何编写优化代码”。z</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>原文地址: <a href=\"https://blog.sessionstack.com/how-does-javascript-actually-work-part-1-b0bacc073cf\" target=\"_blank\" rel=\"noopener\">https://blog.sessionstack.com/how-does-javascript-actually-work-part-1-b0bacc073cf</a></p>\n</blockquote>\n<p>随着JavaScript越来越流行，越来越多的团队广泛的把JavaScript应用到前端、后台、hybrid 应用、嵌入式等等领域。<br>  这篇文章旨在深入挖掘JavaScript，以及向大家解释JavaScript是如何工作的。我们通过了解它的底层构建以及它是怎么发挥作用的，可以帮助我们写出更好的代码与应用。据 GitHut 统计显示，JavaScript 长期占据GitHub中 Active Repositories 和 Total Pushes 的榜首，并且在其他的类别中也不会落后太多。</p>\n<p><img src=\"http://blogimage.houjiyi.com/Fir93mLs8b6Mb7Hk9VO9jeBYju_R\" alt=\"image.png\"><br>如果一个项目越来越依赖 JavaScript，这就意味着开发人员必须利用这些语言和生态系统提供更深层次的核心内容去构建一个令人振奋的应用。然而，事实证明，有很多的开发者每天都在使用 JavaScript，但是却不知道在底层 JavaScript 是怎么运作的。</p>","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>  几乎每个人听说过 V8 引擎的概念，而且，大多数人都知道 JavaScript 是单线程的，或者是它是使用回调队列的。<br>  在这篇文章中，我们将详细的介绍这些概念，并解释 JavaScript 是怎么工作的。通过了解这些细节，你就能利用这些提供的 API 来写出更好的，非阻塞的应用来。如果你对 JavaScript 比较陌生，那么这篇文章将帮助您理解为什么 JavaScript 相较于其他语言显得如此“怪异”。如果您是一位经验丰富的 JavaScript 开发人员，希望它能给你带来一些新的见解，说明 JavaScript 的运行时，尽管你可能每天都会用到它。</p>\n<h2 id=\"JavaScript-引擎\"><a href=\"#JavaScript-引擎\" class=\"headerlink\" title=\"JavaScript 引擎\"></a>JavaScript 引擎</h2><p>  JavaScript 引擎说起来最流行的当然是谷歌的 V8 引擎了， V8 引擎使用在 Chrome 以及 Node 中，下面有个简单的图能说明他们的关系：<br><img src=\"http://blogimage.houjiyi.com/FszBQpISBdi3etpABeLl3ZATHHS4\" alt=\"image.png\"><br>  这个引擎主要由两部分组成:</p>\n<p>内存堆：这是内存分配发生的地方<br>调用栈：这是你的代码执行时的地方</p>\n<h2 id=\"运行时\"><a href=\"#运行时\" class=\"headerlink\" title=\"运行时\"></a>运行时</h2><p>  有些浏览器的 API 经常被使用到(比如说：setTimeout)，但是，这些 API 却不是引擎提供的。那么，他们是从哪儿来的呢？事实上这里面实际情况有点复杂。<br><img src=\"http://blogimage.houjiyi.com/Fgzd-9MuG2FwPWcvqtX7H82xn8_u\" alt=\"image.png\"><br>  所以说我们还有很多引擎之外的 API，我们把这些称为浏览器提供的 Web API，比如说 DOM、AJAX、setTimeout等等。<br>  然后我们还拥有如此流行的事件循环和回调队列。</p>\n<h2 id=\"调用栈\"><a href=\"#调用栈\" class=\"headerlink\" title=\"调用栈\"></a>调用栈</h2><p>  JavaScript 是一门单线程的语言，这意味着它只有一个调用栈，因此，它同一时间只能做一件事。<br>  调用栈是一种数据结构，它记录了我们在程序中的位置。如果我们运行到一个函数，它就会将其放置到栈顶。当从这个函数返回的时候，就会将这个函数从栈顶弹出，这就是调用栈做的事情。<br>  让我们来看一看下面的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">multiply</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x * y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printSquare</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> s = multiply(x, x);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">printSquare(<span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure>\n<p>当程序开始执行的时候，调用栈是空的，然后，步骤如下：<br><img src=\"http://blogimage.houjiyi.com/Fr3J2y8ES8qGtSi7Qu3mygGM64U4\" alt=\"image.png\"><br>  每一个进入调用栈的都称为<strong>调用帧</strong>。<br>  这能清楚的知道当异常发生的时候堆栈追踪是怎么被构造的，堆栈的状态是如何的。让我们看一下下面的代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'SessionStack will help you resolve crashes :)'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  foo();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  bar();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">start();</span><br></pre></td></tr></table></figure></p>\n<p>如果这发生在 Chrome 里(假设这段代码实在一个名为 foo.js 的文件中)，那么将会生成以下的堆栈追踪：<br>:::hljs-center<br><img src=\"http://blogimage.houjiyi.com/FgLINshLzz451aUj1dT3lsEY2Voe\" alt=\"image.png\"><br>:::<br>  “堆栈溢出”，当你达到调用栈最大的大小的时候就会发生这种情况，而且这相当容易发生，特别是在你写递归的时候却没有全方位的测试它。我们来看看下面的代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  foo();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo();</span><br></pre></td></tr></table></figure></p>\n<p>当我们的引擎开始执行这段代码的时候，它从 foo 函数开始。然后这是个递归的函数，并且在没有任何的终止条件的情况下开始调用自己。因此，每执行一步，就会把这个相同的函数一次又一次地添加到调用堆栈中。然后它看起来就像是这样的：<br><img src=\"http://blogimage.houjiyi.com/Fq3J6DpCGWfK1F_tCDf1ORSEewnI\" alt=\"image.png\"><br>  然后，在某一时刻，调用栈中的函数调用的数量超过了调用栈的实际大小，浏览器决定干掉它，抛出一个错误，它看起来就像是这样:<br>::: hljs-center</p>\n<p><img src=\"http://blogimage.houjiyi.com/Fsrp0PXQgao2WTrvyFtQ41slJUQq\" alt=\"image.png\"></p>\n<p>:::</p>\n<p>  在单个线程上运行代码很容易，因为你不必处理在多线程环境中出现的复杂场景——例如死锁。但是在一个线程上运行也非常有限制。由于 JavaScript 只有一个调用堆栈，当某段代码运行变慢时会发生什么?</p>\n<h2 id=\"并发与事件循环\"><a href=\"#并发与事件循环\" class=\"headerlink\" title=\"并发与事件循环\"></a>并发与事件循环</h2><p>  调用栈中的函数调用需要大量的时间来处理，那么这会发生什么情况呢?例如，假设你想在浏览器中使用 JavaScript 进行一些复杂的图片转码。<br>  你可能会问？这算什么问题？事实上，问题是当调用栈有函数要执行，浏览器就不能做任何事，它会被堵塞住。这意味着浏览器不能渲染，不能运行其他的代码，它被卡住了。如果你想在应用里让 UI 很流畅的话，这就会产生问题。<br>  而且这不是唯一的问题，一旦你的浏览器开始处理调用栈中的众多任务，它可能会停止响应相当长一段时间。大多数浏览器都会这么做，报一个错误，询问你是否想终止 web 页面。<br>::: hljs-center</p>\n<p><img src=\"http://blogimage.houjiyi.com/FvXHIRKH0aWWvzCRimLpjH7CabG8\" alt=\"image.png\"></p>\n<p>:::</p>\n<p>  这样看来，这并不是最好的用户体验，不是吗？<br>  那么，如何在不阻塞 UI 的情况下执行复杂的代码，让浏览器不会不响应?解决方案就是异步回调。这将在“ JavaScript 如何工作”教程的第2部分中详细解释:“在V8引擎中，如何编写优化代码”。z</p>"},{"title":"要做的","originContent":"","toc":false,"date":"2021-03-19T05:29:06.000Z","_content":"\n微前端架构的实施已经完成，下一步是在项目级别完成组件的复用。如何方便有效的使用组件是方向。\n\n远程组件、subModules、npm包等我比较倾向于类似微前端架构的远程组件调用。因此也是超这个方向努力～","source":"_posts/要做的.md","raw":"---\ntitle: 要做的\ntags:\n  - 计划\noriginContent: ''\ncategories:\n  - Web开发\ntoc: false\ndate: 2021-03-19 13:29:06\n---\n\n微前端架构的实施已经完成，下一步是在项目级别完成组件的复用。如何方便有效的使用组件是方向。\n\n远程组件、subModules、npm包等我比较倾向于类似微前端架构的远程组件调用。因此也是超这个方向努力～","slug":"要做的","published":1,"updated":"2021-03-19T05:29:06.893Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo2a00bbh5s6ojvic448","content":"<p>微前端架构的实施已经完成，下一步是在项目级别完成组件的复用。如何方便有效的使用组件是方向。</p>\n<p>远程组件、subModules、npm包等我比较倾向于类似微前端架构的远程组件调用。因此也是超这个方向努力～</p>\n","site":{"data":{}},"excerpt":"","more":"<p>微前端架构的实施已经完成，下一步是在项目级别完成组件的复用。如何方便有效的使用组件是方向。</p>\n<p>远程组件、subModules、npm包等我比较倾向于类似微前端架构的远程组件调用。因此也是超这个方向努力～</p>\n"},{"title":"详解事件循环与任务队列","toc":false,"date":"2020-07-24T12:03:30.000Z","_content":"\n> 事件循环与任务队列是JS中比较重要的两个概念。这两个概念在ES5和ES6两个标准中有不同的实现。尤其在ES6标准中，清楚的区分宏观任务队列和微观任务队列才能解释Promise一些看似奇怪的表现。\n\n## 事件循环\n事件循环是什么？为什么要有事件循环这个东西？我们都知道JS是单线程的，但是像Ajax，或是DOM事件这种很耗时的操作，需要用并发处理，否则单线程会长时间等待，什么也做不了。而单线程循环就是并发的一种形式，一个线程中只有一个事件循环。而任务队列是用来配合事件循环完成操作的，一个线程可以拥有多个任务队列。\n\n## 任务队列\n任务队列是什么？故名思意，排着任务的队列。所谓任务是WebAPIs返回的一个个通知，让JS主线程在读取任务队列的时候得知这个异步任务已经完成，下一步该执行这个任务的回调函数了。主线程拥有多个任务队列，不同的任务队列用来排列来自不同任务源的任务。任务源是什么？像setTimeout/Promise/DOM事件等都是任务源，来自同类任务源的任务我们称它们是同源的，比如setTimeout与setInterval就是同源的。在ES6标准中任务队列又分为宏观任务队列和微观任务队列，我们后边再详细讨论。\n\n下面先通俗的讲述一下ES5中事件循环到底是怎么循环的，如图（据阮一峰前辈的教程）：\n![image.png](http://blogimage.houjiyi.com/Fi7kY-opsziat9CP7EDIFXyBJv7q)\n\n图中有三大块：\n\n- 函数调用栈：即执行栈。\n- WebAPIs：浏览器的接口。比如一个Ajax操作，主线程会把收发Ajax交给浏览器的API，之后就继续做别的事情，浏览器在接收到Ajax返回的数据之后，会把一个Ajax完成的事件排到相应的任务队列后边。\n- 任务队列们：主线程中有多个任务队列，同源的任务排在属于自己的任务队列。\n\n一个具体点的栗子。比如现在打开了一个页面，里边有一段script，其中有Ajax，DOM操作等等。这段JS是在浏览器提供的全局环境（浏览器中是window）里执行的，执行中遇到函数调用时会压入执行栈。\n\n1. 主线程在遇到Ajax或是setTimeout这种异步操作时会交给浏览器的WebAPIs，然后继续执行后边的代码，直到最后执行栈为空。\n2. 浏览器会在不确定的时间将完成的任务返回，排到相应的任务队列后。\n3. 执行栈为空后，主线程会到任务队列中去取任务，这些任务会告诉下一步应该执行哪些回调函数。任务队列是具有优先级的，按照优先级决定访问的先后顺序。而优先级在不同的环境中会有所不同，所以不能给出一个固定的优先级。\n4. 每访问一个队列，执行栈会执行完这个任务队列的所有的代码，然后再取下一个任务队列需要执行的的代码。如果在执行中遇到了当前属于任务队列的异步任务时。此次任务的返回不会直接排到当前任务队列之后。因为这属于两次不同的事件循环，会被区分开来。\n就这样循环执行，直到三大块全为空，这称为事件循环。\n\n## 微观任务队列\nES6标准中任务队列存在两种类型，一种就是上边提到的一些队列，比如setTimeout、网络请求Ajax、用户I\\O等都属于宏观任务队列（macrotask queue），另一种是微观任务队列（microtask queue），Promise就属于微观任务队列。\n  添加了微观任务队列之后事件循环有什么变化呢？在执行栈执行的过程中会把属于微观任务队列的任务分配到相应的微观任务队列中去。而在调用栈执行空之后，主线程读取任务队列时，会先读取所有微观任务队列，然后读取一个宏观任务队列，再读取所有的微观任务队列。如图：\n![image.png](http://blogimage.houjiyi.com/FjCRN3mV4dCrtliRgJ2AMED6VGr3)\n\n好了，说了很多概念上的东西，不如一段代码来的清晰：\n```javascript\nsetTimeout(function(){console.log(4)},0);\nnew Promise(function(resolve){\n    console.log(1)\n    for( var i=0 ; i<10000 ; i++ ){\n        i==9999 && resolve()\n    }\n    console.log(2)\n}).then(function(){\n    console.log(5)\n});\nconsole.log(3);\n```\n\n- 脚本开始执行，最先遇到setTimeout，交给浏览器去计时，达到setTimeout限制最短计时之后，把这个任务推入setTimeout队列。\n- 遇到Promise构造函数，构造函数参数执行，输出1，调用resolve改变Promise对象的状态，然后输出2。\n- Promise对象调用then方法，将这个任务推入Promise任务队列。\n- 执行console.log(3)，输出3。\n- 调用栈为空，读取任务队列，按照\n\n读取所有微观任务队列 -> 执行 ->\n读取一个宏观任务队列 -> 执行 ->\n读取所有微观任务队列 -> 执行 ->\n再读取一个宏观任务队列...的顺序。\n\n- 读取所有微观任务队列中的任务，执行这些任务指定的回调函数。执行then指定的回调函数，输出5（微观任务队列也具有优先级）。\n- 最后读取到setTimeout的任务，执行回调函数，输出4。\n\n所以最后的输出顺序是1,2,3,5,4，而不是1,2,3,4,5。如果不清楚微观任务队列的执行机制，很容易将两个异步任务归为一类，将执行顺序判断错误。\n\n> 到这里算是把事件循环和任务队列说的比较清楚了，参考了很多大佬的博客与讨论：\n> http://www.ruanyifeng.com/blog/2014/10/event-loop.html\n> https://www.zhihu.com/question/36972010\n> http://www.jianshu.com/p/12b9f73c5a4f\n> http://www.cnblogs.com/hity-tt/p/6733062.html\n\n如果你有不同的理解请到博客下方留言，这是我的github，欢迎来访，你的star就是我的动力。\n\n作者：空_城__\n链接：https://www.jianshu.com/p/4516ad4b3048\n来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","source":"_posts/详解事件循环与任务队列.md","raw":"---\ntitle: 详解事件循环与任务队列\ntags:\n  - 知识点备忘\ncategories:\n  - Web开发\ntoc: false\ndate: 2020-07-24 20:03:30\n---\n\n> 事件循环与任务队列是JS中比较重要的两个概念。这两个概念在ES5和ES6两个标准中有不同的实现。尤其在ES6标准中，清楚的区分宏观任务队列和微观任务队列才能解释Promise一些看似奇怪的表现。\n\n## 事件循环\n事件循环是什么？为什么要有事件循环这个东西？我们都知道JS是单线程的，但是像Ajax，或是DOM事件这种很耗时的操作，需要用并发处理，否则单线程会长时间等待，什么也做不了。而单线程循环就是并发的一种形式，一个线程中只有一个事件循环。而任务队列是用来配合事件循环完成操作的，一个线程可以拥有多个任务队列。\n\n## 任务队列\n任务队列是什么？故名思意，排着任务的队列。所谓任务是WebAPIs返回的一个个通知，让JS主线程在读取任务队列的时候得知这个异步任务已经完成，下一步该执行这个任务的回调函数了。主线程拥有多个任务队列，不同的任务队列用来排列来自不同任务源的任务。任务源是什么？像setTimeout/Promise/DOM事件等都是任务源，来自同类任务源的任务我们称它们是同源的，比如setTimeout与setInterval就是同源的。在ES6标准中任务队列又分为宏观任务队列和微观任务队列，我们后边再详细讨论。\n\n下面先通俗的讲述一下ES5中事件循环到底是怎么循环的，如图（据阮一峰前辈的教程）：\n![image.png](http://blogimage.houjiyi.com/Fi7kY-opsziat9CP7EDIFXyBJv7q)\n\n图中有三大块：\n\n- 函数调用栈：即执行栈。\n- WebAPIs：浏览器的接口。比如一个Ajax操作，主线程会把收发Ajax交给浏览器的API，之后就继续做别的事情，浏览器在接收到Ajax返回的数据之后，会把一个Ajax完成的事件排到相应的任务队列后边。\n- 任务队列们：主线程中有多个任务队列，同源的任务排在属于自己的任务队列。\n\n一个具体点的栗子。比如现在打开了一个页面，里边有一段script，其中有Ajax，DOM操作等等。这段JS是在浏览器提供的全局环境（浏览器中是window）里执行的，执行中遇到函数调用时会压入执行栈。\n\n1. 主线程在遇到Ajax或是setTimeout这种异步操作时会交给浏览器的WebAPIs，然后继续执行后边的代码，直到最后执行栈为空。\n2. 浏览器会在不确定的时间将完成的任务返回，排到相应的任务队列后。\n3. 执行栈为空后，主线程会到任务队列中去取任务，这些任务会告诉下一步应该执行哪些回调函数。任务队列是具有优先级的，按照优先级决定访问的先后顺序。而优先级在不同的环境中会有所不同，所以不能给出一个固定的优先级。\n4. 每访问一个队列，执行栈会执行完这个任务队列的所有的代码，然后再取下一个任务队列需要执行的的代码。如果在执行中遇到了当前属于任务队列的异步任务时。此次任务的返回不会直接排到当前任务队列之后。因为这属于两次不同的事件循环，会被区分开来。\n就这样循环执行，直到三大块全为空，这称为事件循环。\n\n## 微观任务队列\nES6标准中任务队列存在两种类型，一种就是上边提到的一些队列，比如setTimeout、网络请求Ajax、用户I\\O等都属于宏观任务队列（macrotask queue），另一种是微观任务队列（microtask queue），Promise就属于微观任务队列。\n  添加了微观任务队列之后事件循环有什么变化呢？在执行栈执行的过程中会把属于微观任务队列的任务分配到相应的微观任务队列中去。而在调用栈执行空之后，主线程读取任务队列时，会先读取所有微观任务队列，然后读取一个宏观任务队列，再读取所有的微观任务队列。如图：\n![image.png](http://blogimage.houjiyi.com/FjCRN3mV4dCrtliRgJ2AMED6VGr3)\n\n好了，说了很多概念上的东西，不如一段代码来的清晰：\n```javascript\nsetTimeout(function(){console.log(4)},0);\nnew Promise(function(resolve){\n    console.log(1)\n    for( var i=0 ; i<10000 ; i++ ){\n        i==9999 && resolve()\n    }\n    console.log(2)\n}).then(function(){\n    console.log(5)\n});\nconsole.log(3);\n```\n\n- 脚本开始执行，最先遇到setTimeout，交给浏览器去计时，达到setTimeout限制最短计时之后，把这个任务推入setTimeout队列。\n- 遇到Promise构造函数，构造函数参数执行，输出1，调用resolve改变Promise对象的状态，然后输出2。\n- Promise对象调用then方法，将这个任务推入Promise任务队列。\n- 执行console.log(3)，输出3。\n- 调用栈为空，读取任务队列，按照\n\n读取所有微观任务队列 -> 执行 ->\n读取一个宏观任务队列 -> 执行 ->\n读取所有微观任务队列 -> 执行 ->\n再读取一个宏观任务队列...的顺序。\n\n- 读取所有微观任务队列中的任务，执行这些任务指定的回调函数。执行then指定的回调函数，输出5（微观任务队列也具有优先级）。\n- 最后读取到setTimeout的任务，执行回调函数，输出4。\n\n所以最后的输出顺序是1,2,3,5,4，而不是1,2,3,4,5。如果不清楚微观任务队列的执行机制，很容易将两个异步任务归为一类，将执行顺序判断错误。\n\n> 到这里算是把事件循环和任务队列说的比较清楚了，参考了很多大佬的博客与讨论：\n> http://www.ruanyifeng.com/blog/2014/10/event-loop.html\n> https://www.zhihu.com/question/36972010\n> http://www.jianshu.com/p/12b9f73c5a4f\n> http://www.cnblogs.com/hity-tt/p/6733062.html\n\n如果你有不同的理解请到博客下方留言，这是我的github，欢迎来访，你的star就是我的动力。\n\n作者：空_城__\n链接：https://www.jianshu.com/p/4516ad4b3048\n来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","slug":"详解事件循环与任务队列","published":1,"updated":"2020-07-24T12:09:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo2b00beh5s6osj0scbc","content":"<blockquote>\n<p>事件循环与任务队列是JS中比较重要的两个概念。这两个概念在ES5和ES6两个标准中有不同的实现。尤其在ES6标准中，清楚的区分宏观任务队列和微观任务队列才能解释Promise一些看似奇怪的表现。</p>\n</blockquote>\n<h2 id=\"事件循环\"><a href=\"#事件循环\" class=\"headerlink\" title=\"事件循环\"></a>事件循环</h2><p>事件循环是什么？为什么要有事件循环这个东西？我们都知道JS是单线程的，但是像Ajax，或是DOM事件这种很耗时的操作，需要用并发处理，否则单线程会长时间等待，什么也做不了。而单线程循环就是并发的一种形式，一个线程中只有一个事件循环。而任务队列是用来配合事件循环完成操作的，一个线程可以拥有多个任务队列。</p>\n<h2 id=\"任务队列\"><a href=\"#任务队列\" class=\"headerlink\" title=\"任务队列\"></a>任务队列</h2><p>任务队列是什么？故名思意，排着任务的队列。所谓任务是WebAPIs返回的一个个通知，让JS主线程在读取任务队列的时候得知这个异步任务已经完成，下一步该执行这个任务的回调函数了。主线程拥有多个任务队列，不同的任务队列用来排列来自不同任务源的任务。任务源是什么？像setTimeout/Promise/DOM事件等都是任务源，来自同类任务源的任务我们称它们是同源的，比如setTimeout与setInterval就是同源的。在ES6标准中任务队列又分为宏观任务队列和微观任务队列，我们后边再详细讨论。</p>\n<p>下面先通俗的讲述一下ES5中事件循环到底是怎么循环的，如图（据阮一峰前辈的教程）：<br><img src=\"http://blogimage.houjiyi.com/Fi7kY-opsziat9CP7EDIFXyBJv7q\" alt=\"image.png\"></p>\n<p>图中有三大块：</p>\n<ul>\n<li>函数调用栈：即执行栈。</li>\n<li>WebAPIs：浏览器的接口。比如一个Ajax操作，主线程会把收发Ajax交给浏览器的API，之后就继续做别的事情，浏览器在接收到Ajax返回的数据之后，会把一个Ajax完成的事件排到相应的任务队列后边。</li>\n<li>任务队列们：主线程中有多个任务队列，同源的任务排在属于自己的任务队列。</li>\n</ul>\n<p>一个具体点的栗子。比如现在打开了一个页面，里边有一段script，其中有Ajax，DOM操作等等。这段JS是在浏览器提供的全局环境（浏览器中是window）里执行的，执行中遇到函数调用时会压入执行栈。</p>\n<ol>\n<li>主线程在遇到Ajax或是setTimeout这种异步操作时会交给浏览器的WebAPIs，然后继续执行后边的代码，直到最后执行栈为空。</li>\n<li>浏览器会在不确定的时间将完成的任务返回，排到相应的任务队列后。</li>\n<li>执行栈为空后，主线程会到任务队列中去取任务，这些任务会告诉下一步应该执行哪些回调函数。任务队列是具有优先级的，按照优先级决定访问的先后顺序。而优先级在不同的环境中会有所不同，所以不能给出一个固定的优先级。</li>\n<li>每访问一个队列，执行栈会执行完这个任务队列的所有的代码，然后再取下一个任务队列需要执行的的代码。如果在执行中遇到了当前属于任务队列的异步任务时。此次任务的返回不会直接排到当前任务队列之后。因为这属于两次不同的事件循环，会被区分开来。<br>就这样循环执行，直到三大块全为空，这称为事件循环。</li>\n</ol>\n<h2 id=\"微观任务队列\"><a href=\"#微观任务队列\" class=\"headerlink\" title=\"微观任务队列\"></a>微观任务队列</h2><p>ES6标准中任务队列存在两种类型，一种就是上边提到的一些队列，比如setTimeout、网络请求Ajax、用户I\\O等都属于宏观任务队列（macrotask queue），另一种是微观任务队列（microtask queue），Promise就属于微观任务队列。<br>  添加了微观任务队列之后事件循环有什么变化呢？在执行栈执行的过程中会把属于微观任务队列的任务分配到相应的微观任务队列中去。而在调用栈执行空之后，主线程读取任务队列时，会先读取所有微观任务队列，然后读取一个宏观任务队列，再读取所有的微观任务队列。如图：<br><img src=\"http://blogimage.houjiyi.com/FjCRN3mV4dCrtliRgJ2AMED6VGr3\" alt=\"image.png\"></p>\n<p>好了，说了很多概念上的东西，不如一段代码来的清晰：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)&#125;,<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> i=<span class=\"number\">0</span> ; i&lt;<span class=\"number\">10000</span> ; i++ )&#123;</span><br><span class=\"line\">        i==<span class=\"number\">9999</span> &amp;&amp; resolve()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>脚本开始执行，最先遇到setTimeout，交给浏览器去计时，达到setTimeout限制最短计时之后，把这个任务推入setTimeout队列。</li>\n<li>遇到Promise构造函数，构造函数参数执行，输出1，调用resolve改变Promise对象的状态，然后输出2。</li>\n<li>Promise对象调用then方法，将这个任务推入Promise任务队列。</li>\n<li>执行console.log(3)，输出3。</li>\n<li>调用栈为空，读取任务队列，按照</li>\n</ul>\n<p>读取所有微观任务队列 -&gt; 执行 -&gt;<br>读取一个宏观任务队列 -&gt; 执行 -&gt;<br>读取所有微观任务队列 -&gt; 执行 -&gt;<br>再读取一个宏观任务队列…的顺序。</p>\n<ul>\n<li>读取所有微观任务队列中的任务，执行这些任务指定的回调函数。执行then指定的回调函数，输出5（微观任务队列也具有优先级）。</li>\n<li>最后读取到setTimeout的任务，执行回调函数，输出4。</li>\n</ul>\n<p>所以最后的输出顺序是1,2,3,5,4，而不是1,2,3,4,5。如果不清楚微观任务队列的执行机制，很容易将两个异步任务归为一类，将执行顺序判断错误。</p>\n<blockquote>\n<p>到这里算是把事件循环和任务队列说的比较清楚了，参考了很多大佬的博客与讨论：<br><a href=\"http://www.ruanyifeng.com/blog/2014/10/event-loop.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2014/10/event-loop.html</a><br><a href=\"https://www.zhihu.com/question/36972010\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/36972010</a><br><a href=\"http://www.jianshu.com/p/12b9f73c5a4f\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/12b9f73c5a4f</a><br><a href=\"http://www.cnblogs.com/hity-tt/p/6733062.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/hity-tt/p/6733062.html</a></p>\n</blockquote>\n<p>如果你有不同的理解请到博客下方留言，这是我的github，欢迎来访，你的star就是我的动力。</p>\n<p>作者：空_城__<br>链接：<a href=\"https://www.jianshu.com/p/4516ad4b3048\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/4516ad4b3048</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>事件循环与任务队列是JS中比较重要的两个概念。这两个概念在ES5和ES6两个标准中有不同的实现。尤其在ES6标准中，清楚的区分宏观任务队列和微观任务队列才能解释Promise一些看似奇怪的表现。</p>\n</blockquote>\n<h2 id=\"事件循环\"><a href=\"#事件循环\" class=\"headerlink\" title=\"事件循环\"></a>事件循环</h2><p>事件循环是什么？为什么要有事件循环这个东西？我们都知道JS是单线程的，但是像Ajax，或是DOM事件这种很耗时的操作，需要用并发处理，否则单线程会长时间等待，什么也做不了。而单线程循环就是并发的一种形式，一个线程中只有一个事件循环。而任务队列是用来配合事件循环完成操作的，一个线程可以拥有多个任务队列。</p>\n<h2 id=\"任务队列\"><a href=\"#任务队列\" class=\"headerlink\" title=\"任务队列\"></a>任务队列</h2><p>任务队列是什么？故名思意，排着任务的队列。所谓任务是WebAPIs返回的一个个通知，让JS主线程在读取任务队列的时候得知这个异步任务已经完成，下一步该执行这个任务的回调函数了。主线程拥有多个任务队列，不同的任务队列用来排列来自不同任务源的任务。任务源是什么？像setTimeout/Promise/DOM事件等都是任务源，来自同类任务源的任务我们称它们是同源的，比如setTimeout与setInterval就是同源的。在ES6标准中任务队列又分为宏观任务队列和微观任务队列，我们后边再详细讨论。</p>\n<p>下面先通俗的讲述一下ES5中事件循环到底是怎么循环的，如图（据阮一峰前辈的教程）：<br><img src=\"http://blogimage.houjiyi.com/Fi7kY-opsziat9CP7EDIFXyBJv7q\" alt=\"image.png\"></p>\n<p>图中有三大块：</p>\n<ul>\n<li>函数调用栈：即执行栈。</li>\n<li>WebAPIs：浏览器的接口。比如一个Ajax操作，主线程会把收发Ajax交给浏览器的API，之后就继续做别的事情，浏览器在接收到Ajax返回的数据之后，会把一个Ajax完成的事件排到相应的任务队列后边。</li>\n<li>任务队列们：主线程中有多个任务队列，同源的任务排在属于自己的任务队列。</li>\n</ul>\n<p>一个具体点的栗子。比如现在打开了一个页面，里边有一段script，其中有Ajax，DOM操作等等。这段JS是在浏览器提供的全局环境（浏览器中是window）里执行的，执行中遇到函数调用时会压入执行栈。</p>\n<ol>\n<li>主线程在遇到Ajax或是setTimeout这种异步操作时会交给浏览器的WebAPIs，然后继续执行后边的代码，直到最后执行栈为空。</li>\n<li>浏览器会在不确定的时间将完成的任务返回，排到相应的任务队列后。</li>\n<li>执行栈为空后，主线程会到任务队列中去取任务，这些任务会告诉下一步应该执行哪些回调函数。任务队列是具有优先级的，按照优先级决定访问的先后顺序。而优先级在不同的环境中会有所不同，所以不能给出一个固定的优先级。</li>\n<li>每访问一个队列，执行栈会执行完这个任务队列的所有的代码，然后再取下一个任务队列需要执行的的代码。如果在执行中遇到了当前属于任务队列的异步任务时。此次任务的返回不会直接排到当前任务队列之后。因为这属于两次不同的事件循环，会被区分开来。<br>就这样循环执行，直到三大块全为空，这称为事件循环。</li>\n</ol>\n<h2 id=\"微观任务队列\"><a href=\"#微观任务队列\" class=\"headerlink\" title=\"微观任务队列\"></a>微观任务队列</h2><p>ES6标准中任务队列存在两种类型，一种就是上边提到的一些队列，比如setTimeout、网络请求Ajax、用户I\\O等都属于宏观任务队列（macrotask queue），另一种是微观任务队列（microtask queue），Promise就属于微观任务队列。<br>  添加了微观任务队列之后事件循环有什么变化呢？在执行栈执行的过程中会把属于微观任务队列的任务分配到相应的微观任务队列中去。而在调用栈执行空之后，主线程读取任务队列时，会先读取所有微观任务队列，然后读取一个宏观任务队列，再读取所有的微观任务队列。如图：<br><img src=\"http://blogimage.houjiyi.com/FjCRN3mV4dCrtliRgJ2AMED6VGr3\" alt=\"image.png\"></p>\n<p>好了，说了很多概念上的东西，不如一段代码来的清晰：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)&#125;,<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> i=<span class=\"number\">0</span> ; i&lt;<span class=\"number\">10000</span> ; i++ )&#123;</span><br><span class=\"line\">        i==<span class=\"number\">9999</span> &amp;&amp; resolve()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>脚本开始执行，最先遇到setTimeout，交给浏览器去计时，达到setTimeout限制最短计时之后，把这个任务推入setTimeout队列。</li>\n<li>遇到Promise构造函数，构造函数参数执行，输出1，调用resolve改变Promise对象的状态，然后输出2。</li>\n<li>Promise对象调用then方法，将这个任务推入Promise任务队列。</li>\n<li>执行console.log(3)，输出3。</li>\n<li>调用栈为空，读取任务队列，按照</li>\n</ul>\n<p>读取所有微观任务队列 -&gt; 执行 -&gt;<br>读取一个宏观任务队列 -&gt; 执行 -&gt;<br>读取所有微观任务队列 -&gt; 执行 -&gt;<br>再读取一个宏观任务队列…的顺序。</p>\n<ul>\n<li>读取所有微观任务队列中的任务，执行这些任务指定的回调函数。执行then指定的回调函数，输出5（微观任务队列也具有优先级）。</li>\n<li>最后读取到setTimeout的任务，执行回调函数，输出4。</li>\n</ul>\n<p>所以最后的输出顺序是1,2,3,5,4，而不是1,2,3,4,5。如果不清楚微观任务队列的执行机制，很容易将两个异步任务归为一类，将执行顺序判断错误。</p>\n<blockquote>\n<p>到这里算是把事件循环和任务队列说的比较清楚了，参考了很多大佬的博客与讨论：<br><a href=\"http://www.ruanyifeng.com/blog/2014/10/event-loop.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2014/10/event-loop.html</a><br><a href=\"https://www.zhihu.com/question/36972010\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/36972010</a><br><a href=\"http://www.jianshu.com/p/12b9f73c5a4f\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/12b9f73c5a4f</a><br><a href=\"http://www.cnblogs.com/hity-tt/p/6733062.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/hity-tt/p/6733062.html</a></p>\n</blockquote>\n<p>如果你有不同的理解请到博客下方留言，这是我的github，欢迎来访，你的star就是我的动力。</p>\n<p>作者：空_城__<br>链接：<a href=\"https://www.jianshu.com/p/4516ad4b3048\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/4516ad4b3048</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n"},{"title":"这一次，彻底弄懂 JavaScript 执行机制","toc":false,"date":"2019-06-11T10:23:31.000Z","_content":"\n本文的目的就是要保证你彻底弄懂javascript的执行机制，如果读完本文还不懂，可以揍我。\n不论你是javascript新手还是老鸟，不论是面试求职，还是日常开发工作，我们经常会遇到这样的情况：给定的几行代码，我们需要知道其输出内容和顺序。因为javascript是一门单线程语言，所以我们可以得出结论：\n\n- javascript是按照语句出现的顺序执行的\n\n看到这里读者要打人了：我难道不知道js是一行一行执行的？还用你说？稍安勿躁，正因为js是一行一行执行的，所以我们以为js都是这样的：\n```javascript\nlet a = '1';\nconsole.log(a);\n\nlet b = '2';\nconsole.log(b);\n```\n然而实际上js是这样的：\n```javascript\nsetTimeout(function(){\n    console.log('定时器开始啦')\n});\n\nnew Promise(function(resolve){\n    console.log('马上执行for循环啦');\n    for(var i = 0; i < 10000; i++){\n        i == 99 && resolve();\n    }\n}).then(function(){\n    console.log('执行then函数啦')\n});\n\nconsole.log('代码执行结束');\n```\n依照**js是按照语句出现的顺序执行**这个理念，我自信的写下输出结果：\n```javascript\n//\"定时器开始啦\"\n//\"马上执行for循环啦\"\n//\"执行then函数啦\"\n//\"代码执行结束\"\n```\n去chrome上验证下，结果完全不对，瞬间懵了，说好的一行一行执行的呢？\n我们真的要彻底弄明白javascript的执行机制了。\n<!-- more -->\n## 1.关于javascript\njavascript是一门单线程语言，在最新的HTML5中提出了Web-Worker，但javascript是单线程这一核心仍未改变。所以一切javascript版的\"多线程\"都是用单线程模拟出来的，一切javascript多线程都是纸老虎！\n\n## 2.javascript事件循环\n既然js是单线程，那就像只有一个窗口的银行，客户需要排队一个一个办理业务，同理js任务也要一个一个顺序执行。如果一个任务耗时过长，那么后一个任务也必须等着。那么问题来了，假如我们想浏览新闻，但是新闻包含的超清图片加载很慢，难道我们的网页要一直卡着直到图片完全显示出来？因此聪明的程序员将任务分为两类：\n\n- 同步任务\n- 异步任务\n\n当我们打开网站时，网页的渲染过程就是一大堆同步任务，比如页面骨架和页面元素的渲染。而像加载图片音乐之类占用资源大耗时久的任务，就是异步任务。关于这部分有严格的文字定义，但本文的目的是用最小的学习成本彻底弄懂执行机制，所以我们用导图来说明：\n![image.png](http://blogimage.houjiyi.com/FlqiNugEQJKJXH1I46qm1XHZhCJz)\n导图要表达的内容用文字来表述的话：\n- 同步和异步任务分别进入不同的执行\"场所\"，同步的进入主线程，异步的进入Event Table并注册函数。\n- 当指定的事情完成时，Event Table会将这个函数移入Event Queue。\n- 主线程内的任务执行完毕为空，会去Event Queue读取对应的函数，进入主线程执行。\n- 上述过程会不断重复，也就是常说的Event Loop(事件循环)。\n\n我们不禁要问了，那怎么知道主线程执行栈为空啊？js引擎存在monitoring process进程，会持续不断的检查主线程执行栈是否为空，一旦为空，就会去Event Queue那里检查是否有等待被调用的函数。\n\n说了这么多文字，不如直接一段代码更直白：\n\n```javascript\nlet data = [];\n$.ajax({\n    url:www.javascript.com,\n    data:data,\n    success:() => {\n        console.log('发送成功!');\n    }\n})\nconsole.log('代码执行结束');\n```\n上面是一段简易的ajax请求代码：\n\n- ajax进入Event Table，注册回调函数success。\n- 执行console.log('代码执行结束')。\n- ajax事件完成，回调函数success进入Event Queue。\n- 主线程从Event Queue读取回调函数success并执行。\n\n相信通过上面的文字和代码，你已经对js的执行顺序有了初步了解。接下来我们来研究进阶话题：setTimeout。\n\n## 3.又爱又恨的setTimeout\n大名鼎鼎的setTimeout无需再多言，大家对他的第一印象就是异步可以延时执行，我们经常这么实现延时3秒执行：\n```javascript\nsetTimeout(() => {\n    console.log('延时3秒');\n}, 3000)\n```\n渐渐的setTimeout用的地方多了，问题也出现了，有时候明明写的延时3秒，实际却5，6秒才执行函数，这又咋回事啊？\n\n先看一个例子：\n\n```javascript\nsetTimeout(() => {\n    task();\n},3000)\nconsole.log('执行console');\n```\n\n根据前面我们的结论，setTimeout是异步的，应该先执行console.log这个同步任务，所以我们的结论是：\n\n```javascript\n//执行console\n//task()\n```\n去验证一下，结果正确！\n然后我们修改一下前面的代码：\n```javascript\nsetTimeout(() => {\n    task()\n},3000)\n\nsleep(10000000)\n```\n乍一看其实差不多嘛，但我们把这段代码在chrome执行一下，却发现控制台执行task()需要的时间远远超过3秒，说好的延时三秒，为啥现在需要这么长时间啊？\n\n这时候我们需要重新理解setTimeout的定义。我们先说上述代码是怎么执行的：\n\n- task()进入Event Table并注册,计时开始。\n- 执行sleep函数，很慢，非常慢，计时仍在继续。\n- 3秒到了，计时事件timeout完成，task()进入Event Queue，但是sleep也太慢了吧，还没执行完，只好等着。\n- sleep终于执行完了，task()终于从Event Queue进入了主线程执行。\n\n上述的流程走完，我们知道setTimeout这个函数，是经过指定时间后，把要执行的任务(本例中为task())加入到Event Queue中，又因为是单线程任务要一个一个执行，如果前面的任务需要的时间太久，那么只能等着，导致真正的延迟时间远远大于3秒。\n我们还经常遇到setTimeout(fn,0)这样的代码，0秒后执行又是什么意思呢？是不是可以立即执行呢？\n答案是不会的，setTimeout(fn,0)的含义是，指定某个任务在主线程最早可得的空闲时间执行，意思就是不用再等多少秒了，只要主线程执行栈内的同步任务全部执行完成，栈为空就马上执行。举例说明：\n```javascript\n//代码1\nconsole.log('先执行这里');\nsetTimeout(() => {\n    console.log('执行啦')\n},0);\n```\n```javascript\n//代码2\nconsole.log('先执行这里');\nsetTimeout(() => {\n    console.log('执行啦')\n},3000);\n```\n代码1的输出结果是：\n\n```javascript\n//先执行这里\n//执行啦\n```\n代码2的输出结果是：\n```javascript\n//先执行这里\n// ... 3s later\n// 执行啦\n```\n关于setTimeout要补充的是，即便主线程为空，0毫秒实际上也是达不到的。根据HTML的标准，最低是4毫秒。有兴趣的同学可以自行了解。\n\n## 4.又恨又爱的setInterval\n上面说完了setTimeout，当然不能错过它的孪生兄弟setInterval。他俩差不多，只不过后者是循环的执行。对于执行顺序来说，setInterval会每隔指定的时间将注册的函数置入Event Queue，如果前面的任务耗时太久，那么同样需要等待。\n唯一需要注意的一点是，对于setInterval(fn,ms)来说，我们已经知道不是每过ms秒会执行一次fn，而是每过ms秒，会有fn进入Event Queue。一旦setInterval的回调函数fn执行时间超过了延迟时间ms，那么就完全看不出来有时间间隔了。这句话请读者仔细品味。\n\n## 5.Promise与process.nextTick(callback)\n\n传统的定时器我们已经研究过了，接着我们探究Promise与process.nextTick(callback)的表现。\nPromise的定义和功能本文不再赘述，不了解的读者可以学习一下阮一峰老师的Promise。而process.nextTick(callback)类似node.js版的\"setTimeout\"，在事件循环的下一次循环中调用 callback 回调函数。\n我们进入正题，除了广义的同步任务和异步任务，我们对任务有更精细的定义：\n\n- macro-task(宏任务)：包括整体代码script，setTimeout，setInterval\n- micro-task(微任务)：Promise，process.nextTick\n\n不同类型的任务会进入对应的Event Queue，比如setTimeout和setInterval会进入相同的Event Queue。\n事件循环的顺序，决定js代码的执行顺序。进入整体代码(宏任务)后，开始第一次循环。接着执行所有的微任务。然后再次从宏任务开始，找到其中一个任务队列执行完毕，再执行所有的微任务。听起来有点绕，我们用文章最开始的一段代码说明：\n\n```javascript\nsetTimeout(function() {\n    console.log('setTimeout');\n})\n\nnew Promise(function(resolve) {\n    console.log('promise');\n}).then(function() {\n    console.log('then');\n})\n\nconsole.log('console');\n```\n- 这段代码作为宏任务，进入主线程。\n- 先遇到setTimeout，那么将其回调函数注册后分发到宏任务Event Queue。(注册过程与上同，下文不再描述)\n- 接下来遇到了Promise，new Promise立即执行，then函数分发到微任务Event Queue。\n- 遇到console.log()，立即执行。\n- 好啦，整体代码script作为第一个宏任务执行结束，看看有哪些微任务？我们发现了then在微任务Event Queue里面，执行。\n- ok，第一轮事件循环结束了，我们开始第二轮循环，当然要从宏任务Event Queue开始。我们发现了宏任务Event Queue中setTimeout对应的回调函数，立即执行。\n- 结束。\n\n事件循环，宏任务，微任务的关系如图所示：\n\n::: hljs-center\n\n![image.png](http://blogimage.houjiyi.com/Fiog3PgGiuVhk_jRt9JaKJIG3cEm)居中\n\n:::\n\n我们来分析一段较复杂的代码，看看你是否真的掌握了js的执行机制：\n\n```javascript\nconsole.log('1');\n\nsetTimeout(function() {\n    console.log('2');\n    process.nextTick(function() {\n        console.log('3');\n    })\n    new Promise(function(resolve) {\n        console.log('4');\n        resolve();\n    }).then(function() {\n        console.log('5')\n    })\n})\nprocess.nextTick(function() {\n    console.log('6');\n})\nnew Promise(function(resolve) {\n    console.log('7');\n    resolve();\n}).then(function() {\n    console.log('8')\n})\n\nsetTimeout(function() {\n    console.log('9');\n    process.nextTick(function() {\n        console.log('10');\n    })\n    new Promise(function(resolve) {\n        console.log('11');\n        resolve();\n    }).then(function() {\n        console.log('12')\n    })\n})\n```\n第一轮事件循环流程分析如下：\n- 整体script作为第一个宏任务进入主线程，遇到console.log，输出1。\n- 遇到setTimeout，其回调函数被分发到宏任务Event Queue中。我们暂且记为setTimeout1。\n- 遇到process.nextTick()，其回调函数被分发到微任务Event Queue中。我们记为process1。\n- 遇到Promise，new Promise直接执行，输出7。then被分发到微任务Event Queue中。我们记为then1。\n- 又遇到了setTimeout，其回调函数被分发到宏任务Event Queue中，我们记为setTimeout2。\n\n|宏任务Event Queue|微任务Event Queue|\n|-|-|\n|setTimeout1| process1 |\n| setTimeout2 | then1 |\n\n- 上表是第一轮事件循环宏任务结束时各Event Queue的情况，此时已经输出了1和7。\n- 我们发现了process1和then1两个微任务。\n- 执行process1,输出6。\n- 执行then1，输出8。\n\n好了，第一轮事件循环正式结束，这一轮的结果是输出1，7，6，8。那么第二轮时间循环从setTimeout1宏任务开始：\n\n- 首先输出2。接下来遇到了process.nextTick()，同样将其分发到微任务Event Queue中，记为process2。new Promise立即执行输出4，then也分发到微任务Event Queue中，记为then2。\n\n|宏任务Event Queue|微任务Event Queue|\n|-|-|\n|setTimeout2| process2 |\n|| then2 |\n\n- 第二轮事件循环宏任务结束，我们发现有process2和then2两个微任务可以执行。\n- 输出3。\n- 输出5。\n- 第二轮事件循环结束，第二轮输出2，4，3，5。\n- 第三轮事件循环开始，此时只剩setTimeout2了，执行。\n- 直接输出9。\n- 将process.nextTick()分发到微任务Event Queue中。记为process3。\n- 直接执行new Promise，输出11。\n- 将then分发到微任务Event Queue中，记为then3。\n\n\n|宏任务Event Queue|微任务Event Queue|\n|-|-|\n|| process3 |\n|| then3 |\n\n- 第三轮事件循环宏任务执行结束，执行两个微任务process3和then3。\n- 输出10。\n- 输出12。\n- 第三轮事件循环结束，第三轮输出9，11，10，12。\n\n整段代码，共进行了三次事件循环，完整的输出为1，7，6，8，2，4，3，5，9，11，10，12。\n(请注意，node环境下的事件监听依赖libuv与前端环境不完全相同，输出顺序可能会有误差)\n\n## 6.写在最后\n\n### (1)js的异步\n我们从最开头就说javascript是一门单线程语言，不管是什么新框架新语法糖实现的所谓异步，其实都是用同步的方法去模拟的，牢牢把握住单线程这点非常重要。\n### (2)事件循环Event Loop\n事件循环是js实现异步的一种方法，也是js的执行机制。\n### (3)javascript的执行和运行\n执行和运行有很大的区别，javascript在不同的环境下，比如node，浏览器，Ringo等等，执行方式是不同的。而运行大多指javascript解析引擎，是统一的。\n### (4)setImmediate\n微任务和宏任务还有很多种类，比如setImmediate等等，执行都是有共同点的，有兴趣的同学可以自行了解。\n### (5)最后的最后\njavascript是一门单线程语言\nEvent Loop是javascript的执行机制\n\n牢牢把握两个基本点，以认真学习javascript为中心，早日实现成为前端高手的伟大梦想！\n","source":"_posts/这一次，彻底弄懂-JavaScript-执行机制.md","raw":"---\ntitle: 这一次，彻底弄懂 JavaScript 执行机制\ntags:\n  - javascript\ncategories:\n  - Web开发\ntoc: false\ndate: 2019-06-11 18:23:31\n---\n\n本文的目的就是要保证你彻底弄懂javascript的执行机制，如果读完本文还不懂，可以揍我。\n不论你是javascript新手还是老鸟，不论是面试求职，还是日常开发工作，我们经常会遇到这样的情况：给定的几行代码，我们需要知道其输出内容和顺序。因为javascript是一门单线程语言，所以我们可以得出结论：\n\n- javascript是按照语句出现的顺序执行的\n\n看到这里读者要打人了：我难道不知道js是一行一行执行的？还用你说？稍安勿躁，正因为js是一行一行执行的，所以我们以为js都是这样的：\n```javascript\nlet a = '1';\nconsole.log(a);\n\nlet b = '2';\nconsole.log(b);\n```\n然而实际上js是这样的：\n```javascript\nsetTimeout(function(){\n    console.log('定时器开始啦')\n});\n\nnew Promise(function(resolve){\n    console.log('马上执行for循环啦');\n    for(var i = 0; i < 10000; i++){\n        i == 99 && resolve();\n    }\n}).then(function(){\n    console.log('执行then函数啦')\n});\n\nconsole.log('代码执行结束');\n```\n依照**js是按照语句出现的顺序执行**这个理念，我自信的写下输出结果：\n```javascript\n//\"定时器开始啦\"\n//\"马上执行for循环啦\"\n//\"执行then函数啦\"\n//\"代码执行结束\"\n```\n去chrome上验证下，结果完全不对，瞬间懵了，说好的一行一行执行的呢？\n我们真的要彻底弄明白javascript的执行机制了。\n<!-- more -->\n## 1.关于javascript\njavascript是一门单线程语言，在最新的HTML5中提出了Web-Worker，但javascript是单线程这一核心仍未改变。所以一切javascript版的\"多线程\"都是用单线程模拟出来的，一切javascript多线程都是纸老虎！\n\n## 2.javascript事件循环\n既然js是单线程，那就像只有一个窗口的银行，客户需要排队一个一个办理业务，同理js任务也要一个一个顺序执行。如果一个任务耗时过长，那么后一个任务也必须等着。那么问题来了，假如我们想浏览新闻，但是新闻包含的超清图片加载很慢，难道我们的网页要一直卡着直到图片完全显示出来？因此聪明的程序员将任务分为两类：\n\n- 同步任务\n- 异步任务\n\n当我们打开网站时，网页的渲染过程就是一大堆同步任务，比如页面骨架和页面元素的渲染。而像加载图片音乐之类占用资源大耗时久的任务，就是异步任务。关于这部分有严格的文字定义，但本文的目的是用最小的学习成本彻底弄懂执行机制，所以我们用导图来说明：\n![image.png](http://blogimage.houjiyi.com/FlqiNugEQJKJXH1I46qm1XHZhCJz)\n导图要表达的内容用文字来表述的话：\n- 同步和异步任务分别进入不同的执行\"场所\"，同步的进入主线程，异步的进入Event Table并注册函数。\n- 当指定的事情完成时，Event Table会将这个函数移入Event Queue。\n- 主线程内的任务执行完毕为空，会去Event Queue读取对应的函数，进入主线程执行。\n- 上述过程会不断重复，也就是常说的Event Loop(事件循环)。\n\n我们不禁要问了，那怎么知道主线程执行栈为空啊？js引擎存在monitoring process进程，会持续不断的检查主线程执行栈是否为空，一旦为空，就会去Event Queue那里检查是否有等待被调用的函数。\n\n说了这么多文字，不如直接一段代码更直白：\n\n```javascript\nlet data = [];\n$.ajax({\n    url:www.javascript.com,\n    data:data,\n    success:() => {\n        console.log('发送成功!');\n    }\n})\nconsole.log('代码执行结束');\n```\n上面是一段简易的ajax请求代码：\n\n- ajax进入Event Table，注册回调函数success。\n- 执行console.log('代码执行结束')。\n- ajax事件完成，回调函数success进入Event Queue。\n- 主线程从Event Queue读取回调函数success并执行。\n\n相信通过上面的文字和代码，你已经对js的执行顺序有了初步了解。接下来我们来研究进阶话题：setTimeout。\n\n## 3.又爱又恨的setTimeout\n大名鼎鼎的setTimeout无需再多言，大家对他的第一印象就是异步可以延时执行，我们经常这么实现延时3秒执行：\n```javascript\nsetTimeout(() => {\n    console.log('延时3秒');\n}, 3000)\n```\n渐渐的setTimeout用的地方多了，问题也出现了，有时候明明写的延时3秒，实际却5，6秒才执行函数，这又咋回事啊？\n\n先看一个例子：\n\n```javascript\nsetTimeout(() => {\n    task();\n},3000)\nconsole.log('执行console');\n```\n\n根据前面我们的结论，setTimeout是异步的，应该先执行console.log这个同步任务，所以我们的结论是：\n\n```javascript\n//执行console\n//task()\n```\n去验证一下，结果正确！\n然后我们修改一下前面的代码：\n```javascript\nsetTimeout(() => {\n    task()\n},3000)\n\nsleep(10000000)\n```\n乍一看其实差不多嘛，但我们把这段代码在chrome执行一下，却发现控制台执行task()需要的时间远远超过3秒，说好的延时三秒，为啥现在需要这么长时间啊？\n\n这时候我们需要重新理解setTimeout的定义。我们先说上述代码是怎么执行的：\n\n- task()进入Event Table并注册,计时开始。\n- 执行sleep函数，很慢，非常慢，计时仍在继续。\n- 3秒到了，计时事件timeout完成，task()进入Event Queue，但是sleep也太慢了吧，还没执行完，只好等着。\n- sleep终于执行完了，task()终于从Event Queue进入了主线程执行。\n\n上述的流程走完，我们知道setTimeout这个函数，是经过指定时间后，把要执行的任务(本例中为task())加入到Event Queue中，又因为是单线程任务要一个一个执行，如果前面的任务需要的时间太久，那么只能等着，导致真正的延迟时间远远大于3秒。\n我们还经常遇到setTimeout(fn,0)这样的代码，0秒后执行又是什么意思呢？是不是可以立即执行呢？\n答案是不会的，setTimeout(fn,0)的含义是，指定某个任务在主线程最早可得的空闲时间执行，意思就是不用再等多少秒了，只要主线程执行栈内的同步任务全部执行完成，栈为空就马上执行。举例说明：\n```javascript\n//代码1\nconsole.log('先执行这里');\nsetTimeout(() => {\n    console.log('执行啦')\n},0);\n```\n```javascript\n//代码2\nconsole.log('先执行这里');\nsetTimeout(() => {\n    console.log('执行啦')\n},3000);\n```\n代码1的输出结果是：\n\n```javascript\n//先执行这里\n//执行啦\n```\n代码2的输出结果是：\n```javascript\n//先执行这里\n// ... 3s later\n// 执行啦\n```\n关于setTimeout要补充的是，即便主线程为空，0毫秒实际上也是达不到的。根据HTML的标准，最低是4毫秒。有兴趣的同学可以自行了解。\n\n## 4.又恨又爱的setInterval\n上面说完了setTimeout，当然不能错过它的孪生兄弟setInterval。他俩差不多，只不过后者是循环的执行。对于执行顺序来说，setInterval会每隔指定的时间将注册的函数置入Event Queue，如果前面的任务耗时太久，那么同样需要等待。\n唯一需要注意的一点是，对于setInterval(fn,ms)来说，我们已经知道不是每过ms秒会执行一次fn，而是每过ms秒，会有fn进入Event Queue。一旦setInterval的回调函数fn执行时间超过了延迟时间ms，那么就完全看不出来有时间间隔了。这句话请读者仔细品味。\n\n## 5.Promise与process.nextTick(callback)\n\n传统的定时器我们已经研究过了，接着我们探究Promise与process.nextTick(callback)的表现。\nPromise的定义和功能本文不再赘述，不了解的读者可以学习一下阮一峰老师的Promise。而process.nextTick(callback)类似node.js版的\"setTimeout\"，在事件循环的下一次循环中调用 callback 回调函数。\n我们进入正题，除了广义的同步任务和异步任务，我们对任务有更精细的定义：\n\n- macro-task(宏任务)：包括整体代码script，setTimeout，setInterval\n- micro-task(微任务)：Promise，process.nextTick\n\n不同类型的任务会进入对应的Event Queue，比如setTimeout和setInterval会进入相同的Event Queue。\n事件循环的顺序，决定js代码的执行顺序。进入整体代码(宏任务)后，开始第一次循环。接着执行所有的微任务。然后再次从宏任务开始，找到其中一个任务队列执行完毕，再执行所有的微任务。听起来有点绕，我们用文章最开始的一段代码说明：\n\n```javascript\nsetTimeout(function() {\n    console.log('setTimeout');\n})\n\nnew Promise(function(resolve) {\n    console.log('promise');\n}).then(function() {\n    console.log('then');\n})\n\nconsole.log('console');\n```\n- 这段代码作为宏任务，进入主线程。\n- 先遇到setTimeout，那么将其回调函数注册后分发到宏任务Event Queue。(注册过程与上同，下文不再描述)\n- 接下来遇到了Promise，new Promise立即执行，then函数分发到微任务Event Queue。\n- 遇到console.log()，立即执行。\n- 好啦，整体代码script作为第一个宏任务执行结束，看看有哪些微任务？我们发现了then在微任务Event Queue里面，执行。\n- ok，第一轮事件循环结束了，我们开始第二轮循环，当然要从宏任务Event Queue开始。我们发现了宏任务Event Queue中setTimeout对应的回调函数，立即执行。\n- 结束。\n\n事件循环，宏任务，微任务的关系如图所示：\n\n::: hljs-center\n\n![image.png](http://blogimage.houjiyi.com/Fiog3PgGiuVhk_jRt9JaKJIG3cEm)居中\n\n:::\n\n我们来分析一段较复杂的代码，看看你是否真的掌握了js的执行机制：\n\n```javascript\nconsole.log('1');\n\nsetTimeout(function() {\n    console.log('2');\n    process.nextTick(function() {\n        console.log('3');\n    })\n    new Promise(function(resolve) {\n        console.log('4');\n        resolve();\n    }).then(function() {\n        console.log('5')\n    })\n})\nprocess.nextTick(function() {\n    console.log('6');\n})\nnew Promise(function(resolve) {\n    console.log('7');\n    resolve();\n}).then(function() {\n    console.log('8')\n})\n\nsetTimeout(function() {\n    console.log('9');\n    process.nextTick(function() {\n        console.log('10');\n    })\n    new Promise(function(resolve) {\n        console.log('11');\n        resolve();\n    }).then(function() {\n        console.log('12')\n    })\n})\n```\n第一轮事件循环流程分析如下：\n- 整体script作为第一个宏任务进入主线程，遇到console.log，输出1。\n- 遇到setTimeout，其回调函数被分发到宏任务Event Queue中。我们暂且记为setTimeout1。\n- 遇到process.nextTick()，其回调函数被分发到微任务Event Queue中。我们记为process1。\n- 遇到Promise，new Promise直接执行，输出7。then被分发到微任务Event Queue中。我们记为then1。\n- 又遇到了setTimeout，其回调函数被分发到宏任务Event Queue中，我们记为setTimeout2。\n\n|宏任务Event Queue|微任务Event Queue|\n|-|-|\n|setTimeout1| process1 |\n| setTimeout2 | then1 |\n\n- 上表是第一轮事件循环宏任务结束时各Event Queue的情况，此时已经输出了1和7。\n- 我们发现了process1和then1两个微任务。\n- 执行process1,输出6。\n- 执行then1，输出8。\n\n好了，第一轮事件循环正式结束，这一轮的结果是输出1，7，6，8。那么第二轮时间循环从setTimeout1宏任务开始：\n\n- 首先输出2。接下来遇到了process.nextTick()，同样将其分发到微任务Event Queue中，记为process2。new Promise立即执行输出4，then也分发到微任务Event Queue中，记为then2。\n\n|宏任务Event Queue|微任务Event Queue|\n|-|-|\n|setTimeout2| process2 |\n|| then2 |\n\n- 第二轮事件循环宏任务结束，我们发现有process2和then2两个微任务可以执行。\n- 输出3。\n- 输出5。\n- 第二轮事件循环结束，第二轮输出2，4，3，5。\n- 第三轮事件循环开始，此时只剩setTimeout2了，执行。\n- 直接输出9。\n- 将process.nextTick()分发到微任务Event Queue中。记为process3。\n- 直接执行new Promise，输出11。\n- 将then分发到微任务Event Queue中，记为then3。\n\n\n|宏任务Event Queue|微任务Event Queue|\n|-|-|\n|| process3 |\n|| then3 |\n\n- 第三轮事件循环宏任务执行结束，执行两个微任务process3和then3。\n- 输出10。\n- 输出12。\n- 第三轮事件循环结束，第三轮输出9，11，10，12。\n\n整段代码，共进行了三次事件循环，完整的输出为1，7，6，8，2，4，3，5，9，11，10，12。\n(请注意，node环境下的事件监听依赖libuv与前端环境不完全相同，输出顺序可能会有误差)\n\n## 6.写在最后\n\n### (1)js的异步\n我们从最开头就说javascript是一门单线程语言，不管是什么新框架新语法糖实现的所谓异步，其实都是用同步的方法去模拟的，牢牢把握住单线程这点非常重要。\n### (2)事件循环Event Loop\n事件循环是js实现异步的一种方法，也是js的执行机制。\n### (3)javascript的执行和运行\n执行和运行有很大的区别，javascript在不同的环境下，比如node，浏览器，Ringo等等，执行方式是不同的。而运行大多指javascript解析引擎，是统一的。\n### (4)setImmediate\n微任务和宏任务还有很多种类，比如setImmediate等等，执行都是有共同点的，有兴趣的同学可以自行了解。\n### (5)最后的最后\njavascript是一门单线程语言\nEvent Loop是javascript的执行机制\n\n牢牢把握两个基本点，以认真学习javascript为中心，早日实现成为前端高手的伟大梦想！\n","slug":"这一次，彻底弄懂-JavaScript-执行机制","published":1,"updated":"2019-11-07T02:26:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo2d00bhh5s6xpzzo33q","content":"<p>本文的目的就是要保证你彻底弄懂javascript的执行机制，如果读完本文还不懂，可以揍我。<br>不论你是javascript新手还是老鸟，不论是面试求职，还是日常开发工作，我们经常会遇到这样的情况：给定的几行代码，我们需要知道其输出内容和顺序。因为javascript是一门单线程语言，所以我们可以得出结论：</p>\n<ul>\n<li>javascript是按照语句出现的顺序执行的</li>\n</ul>\n<p>看到这里读者要打人了：我难道不知道js是一行一行执行的？还用你说？稍安勿躁，正因为js是一行一行执行的，所以我们以为js都是这样的：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">'1'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"string\">'2'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br></pre></td></tr></table></figure></p>\n<p>然而实际上js是这样的：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'定时器开始啦'</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'马上执行for循环啦'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++)&#123;</span><br><span class=\"line\">        i == <span class=\"number\">99</span> &amp;&amp; resolve();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'执行then函数啦'</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'代码执行结束'</span>);</span><br></pre></td></tr></table></figure></p>\n<p>依照<strong>js是按照语句出现的顺序执行</strong>这个理念，我自信的写下输出结果：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//\"定时器开始啦\"</span></span><br><span class=\"line\"><span class=\"comment\">//\"马上执行for循环啦\"</span></span><br><span class=\"line\"><span class=\"comment\">//\"执行then函数啦\"</span></span><br><span class=\"line\"><span class=\"comment\">//\"代码执行结束\"</span></span><br></pre></td></tr></table></figure></p>\n<p>去chrome上验证下，结果完全不对，瞬间懵了，说好的一行一行执行的呢？<br>我们真的要彻底弄明白javascript的执行机制了。<br><a id=\"more\"></a></p>\n<h2 id=\"1-关于javascript\"><a href=\"#1-关于javascript\" class=\"headerlink\" title=\"1.关于javascript\"></a>1.关于javascript</h2><p>javascript是一门单线程语言，在最新的HTML5中提出了Web-Worker，但javascript是单线程这一核心仍未改变。所以一切javascript版的”多线程”都是用单线程模拟出来的，一切javascript多线程都是纸老虎！</p>\n<h2 id=\"2-javascript事件循环\"><a href=\"#2-javascript事件循环\" class=\"headerlink\" title=\"2.javascript事件循环\"></a>2.javascript事件循环</h2><p>既然js是单线程，那就像只有一个窗口的银行，客户需要排队一个一个办理业务，同理js任务也要一个一个顺序执行。如果一个任务耗时过长，那么后一个任务也必须等着。那么问题来了，假如我们想浏览新闻，但是新闻包含的超清图片加载很慢，难道我们的网页要一直卡着直到图片完全显示出来？因此聪明的程序员将任务分为两类：</p>\n<ul>\n<li>同步任务</li>\n<li>异步任务</li>\n</ul>\n<p>当我们打开网站时，网页的渲染过程就是一大堆同步任务，比如页面骨架和页面元素的渲染。而像加载图片音乐之类占用资源大耗时久的任务，就是异步任务。关于这部分有严格的文字定义，但本文的目的是用最小的学习成本彻底弄懂执行机制，所以我们用导图来说明：<br><img src=\"http://blogimage.houjiyi.com/FlqiNugEQJKJXH1I46qm1XHZhCJz\" alt=\"image.png\"><br>导图要表达的内容用文字来表述的话：</p>\n<ul>\n<li>同步和异步任务分别进入不同的执行”场所”，同步的进入主线程，异步的进入Event Table并注册函数。</li>\n<li>当指定的事情完成时，Event Table会将这个函数移入Event Queue。</li>\n<li>主线程内的任务执行完毕为空，会去Event Queue读取对应的函数，进入主线程执行。</li>\n<li>上述过程会不断重复，也就是常说的Event Loop(事件循环)。</li>\n</ul>\n<p>我们不禁要问了，那怎么知道主线程执行栈为空啊？js引擎存在monitoring process进程，会持续不断的检查主线程执行栈是否为空，一旦为空，就会去Event Queue那里检查是否有等待被调用的函数。</p>\n<p>说了这么多文字，不如直接一段代码更直白：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> data = [];</span><br><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">    url:www.javascript.com,</span><br><span class=\"line\">    data:data,</span><br><span class=\"line\">    success:<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'发送成功!'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'代码执行结束'</span>);</span><br></pre></td></tr></table></figure>\n<p>上面是一段简易的ajax请求代码：</p>\n<ul>\n<li>ajax进入Event Table，注册回调函数success。</li>\n<li>执行console.log(‘代码执行结束’)。</li>\n<li>ajax事件完成，回调函数success进入Event Queue。</li>\n<li>主线程从Event Queue读取回调函数success并执行。</li>\n</ul>\n<p>相信通过上面的文字和代码，你已经对js的执行顺序有了初步了解。接下来我们来研究进阶话题：setTimeout。</p>\n<h2 id=\"3-又爱又恨的setTimeout\"><a href=\"#3-又爱又恨的setTimeout\" class=\"headerlink\" title=\"3.又爱又恨的setTimeout\"></a>3.又爱又恨的setTimeout</h2><p>大名鼎鼎的setTimeout无需再多言，大家对他的第一印象就是异步可以延时执行，我们经常这么实现延时3秒执行：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'延时3秒'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">3000</span>)</span><br></pre></td></tr></table></figure></p>\n<p>渐渐的setTimeout用的地方多了，问题也出现了，有时候明明写的延时3秒，实际却5，6秒才执行函数，这又咋回事啊？</p>\n<p>先看一个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    task();</span><br><span class=\"line\">&#125;,<span class=\"number\">3000</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'执行console'</span>);</span><br></pre></td></tr></table></figure>\n<p>根据前面我们的结论，setTimeout是异步的，应该先执行console.log这个同步任务，所以我们的结论是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//执行console</span></span><br><span class=\"line\"><span class=\"comment\">//task()</span></span><br></pre></td></tr></table></figure>\n<p>去验证一下，结果正确！<br>然后我们修改一下前面的代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    task()</span><br><span class=\"line\">&#125;,<span class=\"number\">3000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">sleep(<span class=\"number\">10000000</span>)</span><br></pre></td></tr></table></figure></p>\n<p>乍一看其实差不多嘛，但我们把这段代码在chrome执行一下，却发现控制台执行task()需要的时间远远超过3秒，说好的延时三秒，为啥现在需要这么长时间啊？</p>\n<p>这时候我们需要重新理解setTimeout的定义。我们先说上述代码是怎么执行的：</p>\n<ul>\n<li>task()进入Event Table并注册,计时开始。</li>\n<li>执行sleep函数，很慢，非常慢，计时仍在继续。</li>\n<li>3秒到了，计时事件timeout完成，task()进入Event Queue，但是sleep也太慢了吧，还没执行完，只好等着。</li>\n<li>sleep终于执行完了，task()终于从Event Queue进入了主线程执行。</li>\n</ul>\n<p>上述的流程走完，我们知道setTimeout这个函数，是经过指定时间后，把要执行的任务(本例中为task())加入到Event Queue中，又因为是单线程任务要一个一个执行，如果前面的任务需要的时间太久，那么只能等着，导致真正的延迟时间远远大于3秒。<br>我们还经常遇到setTimeout(fn,0)这样的代码，0秒后执行又是什么意思呢？是不是可以立即执行呢？<br>答案是不会的，setTimeout(fn,0)的含义是，指定某个任务在主线程最早可得的空闲时间执行，意思就是不用再等多少秒了，只要主线程执行栈内的同步任务全部执行完成，栈为空就马上执行。举例说明：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//代码1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'先执行这里'</span>);</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'执行啦'</span>)</span><br><span class=\"line\">&#125;,<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//代码2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'先执行这里'</span>);</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'执行啦'</span>)</span><br><span class=\"line\">&#125;,<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<p>代码1的输出结果是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//先执行这里</span></span><br><span class=\"line\"><span class=\"comment\">//执行啦</span></span><br></pre></td></tr></table></figure>\n<p>代码2的输出结果是：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//先执行这里</span></span><br><span class=\"line\"><span class=\"comment\">// ... 3s later</span></span><br><span class=\"line\"><span class=\"comment\">// 执行啦</span></span><br></pre></td></tr></table></figure></p>\n<p>关于setTimeout要补充的是，即便主线程为空，0毫秒实际上也是达不到的。根据HTML的标准，最低是4毫秒。有兴趣的同学可以自行了解。</p>\n<h2 id=\"4-又恨又爱的setInterval\"><a href=\"#4-又恨又爱的setInterval\" class=\"headerlink\" title=\"4.又恨又爱的setInterval\"></a>4.又恨又爱的setInterval</h2><p>上面说完了setTimeout，当然不能错过它的孪生兄弟setInterval。他俩差不多，只不过后者是循环的执行。对于执行顺序来说，setInterval会每隔指定的时间将注册的函数置入Event Queue，如果前面的任务耗时太久，那么同样需要等待。<br>唯一需要注意的一点是，对于setInterval(fn,ms)来说，我们已经知道不是每过ms秒会执行一次fn，而是每过ms秒，会有fn进入Event Queue。一旦setInterval的回调函数fn执行时间超过了延迟时间ms，那么就完全看不出来有时间间隔了。这句话请读者仔细品味。</p>\n<h2 id=\"5-Promise与process-nextTick-callback\"><a href=\"#5-Promise与process-nextTick-callback\" class=\"headerlink\" title=\"5.Promise与process.nextTick(callback)\"></a>5.Promise与process.nextTick(callback)</h2><p>传统的定时器我们已经研究过了，接着我们探究Promise与process.nextTick(callback)的表现。<br>Promise的定义和功能本文不再赘述，不了解的读者可以学习一下阮一峰老师的Promise。而process.nextTick(callback)类似node.js版的”setTimeout”，在事件循环的下一次循环中调用 callback 回调函数。<br>我们进入正题，除了广义的同步任务和异步任务，我们对任务有更精细的定义：</p>\n<ul>\n<li>macro-task(宏任务)：包括整体代码script，setTimeout，setInterval</li>\n<li>micro-task(微任务)：Promise，process.nextTick</li>\n</ul>\n<p>不同类型的任务会进入对应的Event Queue，比如setTimeout和setInterval会进入相同的Event Queue。<br>事件循环的顺序，决定js代码的执行顺序。进入整体代码(宏任务)后，开始第一次循环。接着执行所有的微任务。然后再次从宏任务开始，找到其中一个任务队列执行完毕，再执行所有的微任务。听起来有点绕，我们用文章最开始的一段代码说明：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'setTimeout'</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise'</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'then'</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'console'</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>这段代码作为宏任务，进入主线程。</li>\n<li>先遇到setTimeout，那么将其回调函数注册后分发到宏任务Event Queue。(注册过程与上同，下文不再描述)</li>\n<li>接下来遇到了Promise，new Promise立即执行，then函数分发到微任务Event Queue。</li>\n<li>遇到console.log()，立即执行。</li>\n<li>好啦，整体代码script作为第一个宏任务执行结束，看看有哪些微任务？我们发现了then在微任务Event Queue里面，执行。</li>\n<li>ok，第一轮事件循环结束了，我们开始第二轮循环，当然要从宏任务Event Queue开始。我们发现了宏任务Event Queue中setTimeout对应的回调函数，立即执行。</li>\n<li>结束。</li>\n</ul>\n<p>事件循环，宏任务，微任务的关系如图所示：</p>\n<p>::: hljs-center</p>\n<p><img src=\"http://blogimage.houjiyi.com/Fiog3PgGiuVhk_jRt9JaKJIG3cEm\" alt=\"image.png\">居中</p>\n<p>:::</p>\n<p>我们来分析一段较复杂的代码，看看你是否真的掌握了js的执行机制：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'1'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'2'</span>);</span><br><span class=\"line\">    process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'3'</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'4'</span>);</span><br><span class=\"line\">        resolve();</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'5'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'6'</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'7'</span>);</span><br><span class=\"line\">    resolve();</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'8'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'9'</span>);</span><br><span class=\"line\">    process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'10'</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'11'</span>);</span><br><span class=\"line\">        resolve();</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'12'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>第一轮事件循环流程分析如下：</p>\n<ul>\n<li>整体script作为第一个宏任务进入主线程，遇到console.log，输出1。</li>\n<li>遇到setTimeout，其回调函数被分发到宏任务Event Queue中。我们暂且记为setTimeout1。</li>\n<li>遇到process.nextTick()，其回调函数被分发到微任务Event Queue中。我们记为process1。</li>\n<li>遇到Promise，new Promise直接执行，输出7。then被分发到微任务Event Queue中。我们记为then1。</li>\n<li>又遇到了setTimeout，其回调函数被分发到宏任务Event Queue中，我们记为setTimeout2。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>宏任务Event Queue</th>\n<th>微任务Event Queue</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>setTimeout1</td>\n<td>process1</td>\n</tr>\n<tr>\n<td>setTimeout2</td>\n<td>then1</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>上表是第一轮事件循环宏任务结束时各Event Queue的情况，此时已经输出了1和7。</li>\n<li>我们发现了process1和then1两个微任务。</li>\n<li>执行process1,输出6。</li>\n<li>执行then1，输出8。</li>\n</ul>\n<p>好了，第一轮事件循环正式结束，这一轮的结果是输出1，7，6，8。那么第二轮时间循环从setTimeout1宏任务开始：</p>\n<ul>\n<li>首先输出2。接下来遇到了process.nextTick()，同样将其分发到微任务Event Queue中，记为process2。new Promise立即执行输出4，then也分发到微任务Event Queue中，记为then2。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>宏任务Event Queue</th>\n<th>微任务Event Queue</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>setTimeout2</td>\n<td>process2</td>\n</tr>\n<tr>\n<td></td>\n<td>then2</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>第二轮事件循环宏任务结束，我们发现有process2和then2两个微任务可以执行。</li>\n<li>输出3。</li>\n<li>输出5。</li>\n<li>第二轮事件循环结束，第二轮输出2，4，3，5。</li>\n<li>第三轮事件循环开始，此时只剩setTimeout2了，执行。</li>\n<li>直接输出9。</li>\n<li>将process.nextTick()分发到微任务Event Queue中。记为process3。</li>\n<li>直接执行new Promise，输出11。</li>\n<li>将then分发到微任务Event Queue中，记为then3。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>宏任务Event Queue</th>\n<th>微任务Event Queue</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>process3</td>\n</tr>\n<tr>\n<td></td>\n<td>then3</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>第三轮事件循环宏任务执行结束，执行两个微任务process3和then3。</li>\n<li>输出10。</li>\n<li>输出12。</li>\n<li>第三轮事件循环结束，第三轮输出9，11，10，12。</li>\n</ul>\n<p>整段代码，共进行了三次事件循环，完整的输出为1，7，6，8，2，4，3，5，9，11，10，12。<br>(请注意，node环境下的事件监听依赖libuv与前端环境不完全相同，输出顺序可能会有误差)</p>\n<h2 id=\"6-写在最后\"><a href=\"#6-写在最后\" class=\"headerlink\" title=\"6.写在最后\"></a>6.写在最后</h2><h3 id=\"1-js的异步\"><a href=\"#1-js的异步\" class=\"headerlink\" title=\"(1)js的异步\"></a>(1)js的异步</h3><p>我们从最开头就说javascript是一门单线程语言，不管是什么新框架新语法糖实现的所谓异步，其实都是用同步的方法去模拟的，牢牢把握住单线程这点非常重要。</p>\n<h3 id=\"2-事件循环Event-Loop\"><a href=\"#2-事件循环Event-Loop\" class=\"headerlink\" title=\"(2)事件循环Event Loop\"></a>(2)事件循环Event Loop</h3><p>事件循环是js实现异步的一种方法，也是js的执行机制。</p>\n<h3 id=\"3-javascript的执行和运行\"><a href=\"#3-javascript的执行和运行\" class=\"headerlink\" title=\"(3)javascript的执行和运行\"></a>(3)javascript的执行和运行</h3><p>执行和运行有很大的区别，javascript在不同的环境下，比如node，浏览器，Ringo等等，执行方式是不同的。而运行大多指javascript解析引擎，是统一的。</p>\n<h3 id=\"4-setImmediate\"><a href=\"#4-setImmediate\" class=\"headerlink\" title=\"(4)setImmediate\"></a>(4)setImmediate</h3><p>微任务和宏任务还有很多种类，比如setImmediate等等，执行都是有共同点的，有兴趣的同学可以自行了解。</p>\n<h3 id=\"5-最后的最后\"><a href=\"#5-最后的最后\" class=\"headerlink\" title=\"(5)最后的最后\"></a>(5)最后的最后</h3><p>javascript是一门单线程语言<br>Event Loop是javascript的执行机制</p>\n<p>牢牢把握两个基本点，以认真学习javascript为中心，早日实现成为前端高手的伟大梦想！</p>\n","site":{"data":{}},"excerpt":"<p>本文的目的就是要保证你彻底弄懂javascript的执行机制，如果读完本文还不懂，可以揍我。<br>不论你是javascript新手还是老鸟，不论是面试求职，还是日常开发工作，我们经常会遇到这样的情况：给定的几行代码，我们需要知道其输出内容和顺序。因为javascript是一门单线程语言，所以我们可以得出结论：</p>\n<ul>\n<li>javascript是按照语句出现的顺序执行的</li>\n</ul>\n<p>看到这里读者要打人了：我难道不知道js是一行一行执行的？还用你说？稍安勿躁，正因为js是一行一行执行的，所以我们以为js都是这样的：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">'1'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"string\">'2'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br></pre></td></tr></table></figure></p>\n<p>然而实际上js是这样的：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'定时器开始啦'</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'马上执行for循环啦'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++)&#123;</span><br><span class=\"line\">        i == <span class=\"number\">99</span> &amp;&amp; resolve();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'执行then函数啦'</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'代码执行结束'</span>);</span><br></pre></td></tr></table></figure></p>\n<p>依照<strong>js是按照语句出现的顺序执行</strong>这个理念，我自信的写下输出结果：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//\"定时器开始啦\"</span></span><br><span class=\"line\"><span class=\"comment\">//\"马上执行for循环啦\"</span></span><br><span class=\"line\"><span class=\"comment\">//\"执行then函数啦\"</span></span><br><span class=\"line\"><span class=\"comment\">//\"代码执行结束\"</span></span><br></pre></td></tr></table></figure></p>\n<p>去chrome上验证下，结果完全不对，瞬间懵了，说好的一行一行执行的呢？<br>我们真的要彻底弄明白javascript的执行机制了。<br>","more":"</p>\n<h2 id=\"1-关于javascript\"><a href=\"#1-关于javascript\" class=\"headerlink\" title=\"1.关于javascript\"></a>1.关于javascript</h2><p>javascript是一门单线程语言，在最新的HTML5中提出了Web-Worker，但javascript是单线程这一核心仍未改变。所以一切javascript版的”多线程”都是用单线程模拟出来的，一切javascript多线程都是纸老虎！</p>\n<h2 id=\"2-javascript事件循环\"><a href=\"#2-javascript事件循环\" class=\"headerlink\" title=\"2.javascript事件循环\"></a>2.javascript事件循环</h2><p>既然js是单线程，那就像只有一个窗口的银行，客户需要排队一个一个办理业务，同理js任务也要一个一个顺序执行。如果一个任务耗时过长，那么后一个任务也必须等着。那么问题来了，假如我们想浏览新闻，但是新闻包含的超清图片加载很慢，难道我们的网页要一直卡着直到图片完全显示出来？因此聪明的程序员将任务分为两类：</p>\n<ul>\n<li>同步任务</li>\n<li>异步任务</li>\n</ul>\n<p>当我们打开网站时，网页的渲染过程就是一大堆同步任务，比如页面骨架和页面元素的渲染。而像加载图片音乐之类占用资源大耗时久的任务，就是异步任务。关于这部分有严格的文字定义，但本文的目的是用最小的学习成本彻底弄懂执行机制，所以我们用导图来说明：<br><img src=\"http://blogimage.houjiyi.com/FlqiNugEQJKJXH1I46qm1XHZhCJz\" alt=\"image.png\"><br>导图要表达的内容用文字来表述的话：</p>\n<ul>\n<li>同步和异步任务分别进入不同的执行”场所”，同步的进入主线程，异步的进入Event Table并注册函数。</li>\n<li>当指定的事情完成时，Event Table会将这个函数移入Event Queue。</li>\n<li>主线程内的任务执行完毕为空，会去Event Queue读取对应的函数，进入主线程执行。</li>\n<li>上述过程会不断重复，也就是常说的Event Loop(事件循环)。</li>\n</ul>\n<p>我们不禁要问了，那怎么知道主线程执行栈为空啊？js引擎存在monitoring process进程，会持续不断的检查主线程执行栈是否为空，一旦为空，就会去Event Queue那里检查是否有等待被调用的函数。</p>\n<p>说了这么多文字，不如直接一段代码更直白：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> data = [];</span><br><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">    url:www.javascript.com,</span><br><span class=\"line\">    data:data,</span><br><span class=\"line\">    success:<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'发送成功!'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'代码执行结束'</span>);</span><br></pre></td></tr></table></figure>\n<p>上面是一段简易的ajax请求代码：</p>\n<ul>\n<li>ajax进入Event Table，注册回调函数success。</li>\n<li>执行console.log(‘代码执行结束’)。</li>\n<li>ajax事件完成，回调函数success进入Event Queue。</li>\n<li>主线程从Event Queue读取回调函数success并执行。</li>\n</ul>\n<p>相信通过上面的文字和代码，你已经对js的执行顺序有了初步了解。接下来我们来研究进阶话题：setTimeout。</p>\n<h2 id=\"3-又爱又恨的setTimeout\"><a href=\"#3-又爱又恨的setTimeout\" class=\"headerlink\" title=\"3.又爱又恨的setTimeout\"></a>3.又爱又恨的setTimeout</h2><p>大名鼎鼎的setTimeout无需再多言，大家对他的第一印象就是异步可以延时执行，我们经常这么实现延时3秒执行：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'延时3秒'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">3000</span>)</span><br></pre></td></tr></table></figure></p>\n<p>渐渐的setTimeout用的地方多了，问题也出现了，有时候明明写的延时3秒，实际却5，6秒才执行函数，这又咋回事啊？</p>\n<p>先看一个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    task();</span><br><span class=\"line\">&#125;,<span class=\"number\">3000</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'执行console'</span>);</span><br></pre></td></tr></table></figure>\n<p>根据前面我们的结论，setTimeout是异步的，应该先执行console.log这个同步任务，所以我们的结论是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//执行console</span></span><br><span class=\"line\"><span class=\"comment\">//task()</span></span><br></pre></td></tr></table></figure>\n<p>去验证一下，结果正确！<br>然后我们修改一下前面的代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    task()</span><br><span class=\"line\">&#125;,<span class=\"number\">3000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">sleep(<span class=\"number\">10000000</span>)</span><br></pre></td></tr></table></figure></p>\n<p>乍一看其实差不多嘛，但我们把这段代码在chrome执行一下，却发现控制台执行task()需要的时间远远超过3秒，说好的延时三秒，为啥现在需要这么长时间啊？</p>\n<p>这时候我们需要重新理解setTimeout的定义。我们先说上述代码是怎么执行的：</p>\n<ul>\n<li>task()进入Event Table并注册,计时开始。</li>\n<li>执行sleep函数，很慢，非常慢，计时仍在继续。</li>\n<li>3秒到了，计时事件timeout完成，task()进入Event Queue，但是sleep也太慢了吧，还没执行完，只好等着。</li>\n<li>sleep终于执行完了，task()终于从Event Queue进入了主线程执行。</li>\n</ul>\n<p>上述的流程走完，我们知道setTimeout这个函数，是经过指定时间后，把要执行的任务(本例中为task())加入到Event Queue中，又因为是单线程任务要一个一个执行，如果前面的任务需要的时间太久，那么只能等着，导致真正的延迟时间远远大于3秒。<br>我们还经常遇到setTimeout(fn,0)这样的代码，0秒后执行又是什么意思呢？是不是可以立即执行呢？<br>答案是不会的，setTimeout(fn,0)的含义是，指定某个任务在主线程最早可得的空闲时间执行，意思就是不用再等多少秒了，只要主线程执行栈内的同步任务全部执行完成，栈为空就马上执行。举例说明：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//代码1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'先执行这里'</span>);</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'执行啦'</span>)</span><br><span class=\"line\">&#125;,<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//代码2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'先执行这里'</span>);</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'执行啦'</span>)</span><br><span class=\"line\">&#125;,<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<p>代码1的输出结果是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//先执行这里</span></span><br><span class=\"line\"><span class=\"comment\">//执行啦</span></span><br></pre></td></tr></table></figure>\n<p>代码2的输出结果是：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//先执行这里</span></span><br><span class=\"line\"><span class=\"comment\">// ... 3s later</span></span><br><span class=\"line\"><span class=\"comment\">// 执行啦</span></span><br></pre></td></tr></table></figure></p>\n<p>关于setTimeout要补充的是，即便主线程为空，0毫秒实际上也是达不到的。根据HTML的标准，最低是4毫秒。有兴趣的同学可以自行了解。</p>\n<h2 id=\"4-又恨又爱的setInterval\"><a href=\"#4-又恨又爱的setInterval\" class=\"headerlink\" title=\"4.又恨又爱的setInterval\"></a>4.又恨又爱的setInterval</h2><p>上面说完了setTimeout，当然不能错过它的孪生兄弟setInterval。他俩差不多，只不过后者是循环的执行。对于执行顺序来说，setInterval会每隔指定的时间将注册的函数置入Event Queue，如果前面的任务耗时太久，那么同样需要等待。<br>唯一需要注意的一点是，对于setInterval(fn,ms)来说，我们已经知道不是每过ms秒会执行一次fn，而是每过ms秒，会有fn进入Event Queue。一旦setInterval的回调函数fn执行时间超过了延迟时间ms，那么就完全看不出来有时间间隔了。这句话请读者仔细品味。</p>\n<h2 id=\"5-Promise与process-nextTick-callback\"><a href=\"#5-Promise与process-nextTick-callback\" class=\"headerlink\" title=\"5.Promise与process.nextTick(callback)\"></a>5.Promise与process.nextTick(callback)</h2><p>传统的定时器我们已经研究过了，接着我们探究Promise与process.nextTick(callback)的表现。<br>Promise的定义和功能本文不再赘述，不了解的读者可以学习一下阮一峰老师的Promise。而process.nextTick(callback)类似node.js版的”setTimeout”，在事件循环的下一次循环中调用 callback 回调函数。<br>我们进入正题，除了广义的同步任务和异步任务，我们对任务有更精细的定义：</p>\n<ul>\n<li>macro-task(宏任务)：包括整体代码script，setTimeout，setInterval</li>\n<li>micro-task(微任务)：Promise，process.nextTick</li>\n</ul>\n<p>不同类型的任务会进入对应的Event Queue，比如setTimeout和setInterval会进入相同的Event Queue。<br>事件循环的顺序，决定js代码的执行顺序。进入整体代码(宏任务)后，开始第一次循环。接着执行所有的微任务。然后再次从宏任务开始，找到其中一个任务队列执行完毕，再执行所有的微任务。听起来有点绕，我们用文章最开始的一段代码说明：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'setTimeout'</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise'</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'then'</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'console'</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>这段代码作为宏任务，进入主线程。</li>\n<li>先遇到setTimeout，那么将其回调函数注册后分发到宏任务Event Queue。(注册过程与上同，下文不再描述)</li>\n<li>接下来遇到了Promise，new Promise立即执行，then函数分发到微任务Event Queue。</li>\n<li>遇到console.log()，立即执行。</li>\n<li>好啦，整体代码script作为第一个宏任务执行结束，看看有哪些微任务？我们发现了then在微任务Event Queue里面，执行。</li>\n<li>ok，第一轮事件循环结束了，我们开始第二轮循环，当然要从宏任务Event Queue开始。我们发现了宏任务Event Queue中setTimeout对应的回调函数，立即执行。</li>\n<li>结束。</li>\n</ul>\n<p>事件循环，宏任务，微任务的关系如图所示：</p>\n<p>::: hljs-center</p>\n<p><img src=\"http://blogimage.houjiyi.com/Fiog3PgGiuVhk_jRt9JaKJIG3cEm\" alt=\"image.png\">居中</p>\n<p>:::</p>\n<p>我们来分析一段较复杂的代码，看看你是否真的掌握了js的执行机制：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'1'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'2'</span>);</span><br><span class=\"line\">    process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'3'</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'4'</span>);</span><br><span class=\"line\">        resolve();</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'5'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'6'</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'7'</span>);</span><br><span class=\"line\">    resolve();</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'8'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'9'</span>);</span><br><span class=\"line\">    process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'10'</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'11'</span>);</span><br><span class=\"line\">        resolve();</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'12'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>第一轮事件循环流程分析如下：</p>\n<ul>\n<li>整体script作为第一个宏任务进入主线程，遇到console.log，输出1。</li>\n<li>遇到setTimeout，其回调函数被分发到宏任务Event Queue中。我们暂且记为setTimeout1。</li>\n<li>遇到process.nextTick()，其回调函数被分发到微任务Event Queue中。我们记为process1。</li>\n<li>遇到Promise，new Promise直接执行，输出7。then被分发到微任务Event Queue中。我们记为then1。</li>\n<li>又遇到了setTimeout，其回调函数被分发到宏任务Event Queue中，我们记为setTimeout2。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>宏任务Event Queue</th>\n<th>微任务Event Queue</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>setTimeout1</td>\n<td>process1</td>\n</tr>\n<tr>\n<td>setTimeout2</td>\n<td>then1</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>上表是第一轮事件循环宏任务结束时各Event Queue的情况，此时已经输出了1和7。</li>\n<li>我们发现了process1和then1两个微任务。</li>\n<li>执行process1,输出6。</li>\n<li>执行then1，输出8。</li>\n</ul>\n<p>好了，第一轮事件循环正式结束，这一轮的结果是输出1，7，6，8。那么第二轮时间循环从setTimeout1宏任务开始：</p>\n<ul>\n<li>首先输出2。接下来遇到了process.nextTick()，同样将其分发到微任务Event Queue中，记为process2。new Promise立即执行输出4，then也分发到微任务Event Queue中，记为then2。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>宏任务Event Queue</th>\n<th>微任务Event Queue</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>setTimeout2</td>\n<td>process2</td>\n</tr>\n<tr>\n<td></td>\n<td>then2</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>第二轮事件循环宏任务结束，我们发现有process2和then2两个微任务可以执行。</li>\n<li>输出3。</li>\n<li>输出5。</li>\n<li>第二轮事件循环结束，第二轮输出2，4，3，5。</li>\n<li>第三轮事件循环开始，此时只剩setTimeout2了，执行。</li>\n<li>直接输出9。</li>\n<li>将process.nextTick()分发到微任务Event Queue中。记为process3。</li>\n<li>直接执行new Promise，输出11。</li>\n<li>将then分发到微任务Event Queue中，记为then3。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>宏任务Event Queue</th>\n<th>微任务Event Queue</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>process3</td>\n</tr>\n<tr>\n<td></td>\n<td>then3</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>第三轮事件循环宏任务执行结束，执行两个微任务process3和then3。</li>\n<li>输出10。</li>\n<li>输出12。</li>\n<li>第三轮事件循环结束，第三轮输出9，11，10，12。</li>\n</ul>\n<p>整段代码，共进行了三次事件循环，完整的输出为1，7，6，8，2，4，3，5，9，11，10，12。<br>(请注意，node环境下的事件监听依赖libuv与前端环境不完全相同，输出顺序可能会有误差)</p>\n<h2 id=\"6-写在最后\"><a href=\"#6-写在最后\" class=\"headerlink\" title=\"6.写在最后\"></a>6.写在最后</h2><h3 id=\"1-js的异步\"><a href=\"#1-js的异步\" class=\"headerlink\" title=\"(1)js的异步\"></a>(1)js的异步</h3><p>我们从最开头就说javascript是一门单线程语言，不管是什么新框架新语法糖实现的所谓异步，其实都是用同步的方法去模拟的，牢牢把握住单线程这点非常重要。</p>\n<h3 id=\"2-事件循环Event-Loop\"><a href=\"#2-事件循环Event-Loop\" class=\"headerlink\" title=\"(2)事件循环Event Loop\"></a>(2)事件循环Event Loop</h3><p>事件循环是js实现异步的一种方法，也是js的执行机制。</p>\n<h3 id=\"3-javascript的执行和运行\"><a href=\"#3-javascript的执行和运行\" class=\"headerlink\" title=\"(3)javascript的执行和运行\"></a>(3)javascript的执行和运行</h3><p>执行和运行有很大的区别，javascript在不同的环境下，比如node，浏览器，Ringo等等，执行方式是不同的。而运行大多指javascript解析引擎，是统一的。</p>\n<h3 id=\"4-setImmediate\"><a href=\"#4-setImmediate\" class=\"headerlink\" title=\"(4)setImmediate\"></a>(4)setImmediate</h3><p>微任务和宏任务还有很多种类，比如setImmediate等等，执行都是有共同点的，有兴趣的同学可以自行了解。</p>\n<h3 id=\"5-最后的最后\"><a href=\"#5-最后的最后\" class=\"headerlink\" title=\"(5)最后的最后\"></a>(5)最后的最后</h3><p>javascript是一门单线程语言<br>Event Loop是javascript的执行机制</p>\n<p>牢牢把握两个基本点，以认真学习javascript为中心，早日实现成为前端高手的伟大梦想！</p>"},{"title":"配置location块","toc":false,"date":"2017-08-27T01:54:58.000Z","_content":"\nlocation的语法结构为：\n```\nlocation [ = | ~ | ~* | ^~ ] uri {...}\n```\n\n<!-- more -->\n\n其中，uri变量是待匹配的请求字符串，可以是不含正则表达式的字符串，如 /myserver.php等；也可以是包含有正则表达式的字符串，如 \\.php$ (表示以.php结尾的URL)等。为了下文叙述方便，我们约定，不含正则表达式的uri称谓『标准 uri』，使用正则表达式的uri成为『正则 uri』。\n\n其中方括号里的部分，是可选项，用来改变请求字符串与uri的匹配方式。在介绍四中标识的含义之前，我们需要先了解不添加此选项时，Nginx服务器是如何在server块中搜索并使用location块的uri和请求字符串匹配的。\n\n在不添加此选项时，Nginx服务器首先在server块的多个location块中搜索是否有标准uri和请求字符串匹配，如果有多个可以匹配，就记录匹配度最高的一个。然后，服务器再用location块中的正则uri和请求字符串匹配，当地一个正则uri匹配成功，结束搜索，并使用这个location块处理此请求；如果正则匹配全部失败，就使用刚才记录的匹配度最高的location块处理次请求。\n\n了解了上面的内容，皆可以解释可选项中各个标识的含义了：\n> \" = \"，用于标准uri前，要求请求字符串与uri严格匹配。如果已经匹配成功，就停止继续向下搜索并立即处理次请求。\n> \" ~ \", 用于标识uri包含正则表达式，并且区分大小写。\n> \" ~* \"， 用于标识包含正则表达式，并且不区分大小写。\n\n注意：如果uri包含正则表达式，就必须要使用『 ~ 』或者『 ~* 』标识\n\n> \"^~\"，用于标准uri前，要求Nginx服务器找到标识uri和请求字符串匹配度最高的location后，立即是用此location处理请求，而不再使用location块中的正则uri和请求字符串做匹配。\n\n注意：我们知道，在浏览器传送URI时对一部分字符进行URL编码，比如空格被编码为『%20』，问号被编码为『%3f』等。『^~』有一个特点是，它对uri中的这些符号将会进行编码处理。比如，如果location块收到的URI为\"/html/%20/data\",则当Nginx服务器搜索到匹配为『^~/html//data』的location时，可以匹配成功。\n","source":"_posts/配置location块.md","raw":"---\ntitle: 配置location块\ntags:\n  - nginx\ncategories:\n  - 后端开发\ntoc: false\ndate: 2017-08-27 09:54:58\n---\n\nlocation的语法结构为：\n```\nlocation [ = | ~ | ~* | ^~ ] uri {...}\n```\n\n<!-- more -->\n\n其中，uri变量是待匹配的请求字符串，可以是不含正则表达式的字符串，如 /myserver.php等；也可以是包含有正则表达式的字符串，如 \\.php$ (表示以.php结尾的URL)等。为了下文叙述方便，我们约定，不含正则表达式的uri称谓『标准 uri』，使用正则表达式的uri成为『正则 uri』。\n\n其中方括号里的部分，是可选项，用来改变请求字符串与uri的匹配方式。在介绍四中标识的含义之前，我们需要先了解不添加此选项时，Nginx服务器是如何在server块中搜索并使用location块的uri和请求字符串匹配的。\n\n在不添加此选项时，Nginx服务器首先在server块的多个location块中搜索是否有标准uri和请求字符串匹配，如果有多个可以匹配，就记录匹配度最高的一个。然后，服务器再用location块中的正则uri和请求字符串匹配，当地一个正则uri匹配成功，结束搜索，并使用这个location块处理此请求；如果正则匹配全部失败，就使用刚才记录的匹配度最高的location块处理次请求。\n\n了解了上面的内容，皆可以解释可选项中各个标识的含义了：\n> \" = \"，用于标准uri前，要求请求字符串与uri严格匹配。如果已经匹配成功，就停止继续向下搜索并立即处理次请求。\n> \" ~ \", 用于标识uri包含正则表达式，并且区分大小写。\n> \" ~* \"， 用于标识包含正则表达式，并且不区分大小写。\n\n注意：如果uri包含正则表达式，就必须要使用『 ~ 』或者『 ~* 』标识\n\n> \"^~\"，用于标准uri前，要求Nginx服务器找到标识uri和请求字符串匹配度最高的location后，立即是用此location处理请求，而不再使用location块中的正则uri和请求字符串做匹配。\n\n注意：我们知道，在浏览器传送URI时对一部分字符进行URL编码，比如空格被编码为『%20』，问号被编码为『%3f』等。『^~』有一个特点是，它对uri中的这些符号将会进行编码处理。比如，如果location块收到的URI为\"/html/%20/data\",则当Nginx服务器搜索到匹配为『^~/html//data』的location时，可以匹配成功。\n","slug":"配置location块","published":1,"updated":"2019-11-07T02:26:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo2e00bkh5s6tt22tk5s","content":"<p>location的语法结构为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location [ = | ~ | ~* | ^~ ] uri &#123;...&#125;</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>其中，uri变量是待匹配的请求字符串，可以是不含正则表达式的字符串，如 /myserver.php等；也可以是包含有正则表达式的字符串，如 .php$ (表示以.php结尾的URL)等。为了下文叙述方便，我们约定，不含正则表达式的uri称谓『标准 uri』，使用正则表达式的uri成为『正则 uri』。</p>\n<p>其中方括号里的部分，是可选项，用来改变请求字符串与uri的匹配方式。在介绍四中标识的含义之前，我们需要先了解不添加此选项时，Nginx服务器是如何在server块中搜索并使用location块的uri和请求字符串匹配的。</p>\n<p>在不添加此选项时，Nginx服务器首先在server块的多个location块中搜索是否有标准uri和请求字符串匹配，如果有多个可以匹配，就记录匹配度最高的一个。然后，服务器再用location块中的正则uri和请求字符串匹配，当地一个正则uri匹配成功，结束搜索，并使用这个location块处理此请求；如果正则匹配全部失败，就使用刚才记录的匹配度最高的location块处理次请求。</p>\n<p>了解了上面的内容，皆可以解释可选项中各个标识的含义了：</p>\n<blockquote>\n<p>“ = “，用于标准uri前，要求请求字符串与uri严格匹配。如果已经匹配成功，就停止继续向下搜索并立即处理次请求。<br>“ ~ “, 用于标识uri包含正则表达式，并且区分大小写。<br>“ ~* “， 用于标识包含正则表达式，并且不区分大小写。</p>\n</blockquote>\n<p>注意：如果uri包含正则表达式，就必须要使用『 ~ 』或者『 ~* 』标识</p>\n<blockquote>\n<p>“^~”，用于标准uri前，要求Nginx服务器找到标识uri和请求字符串匹配度最高的location后，立即是用此location处理请求，而不再使用location块中的正则uri和请求字符串做匹配。</p>\n</blockquote>\n<p>注意：我们知道，在浏览器传送URI时对一部分字符进行URL编码，比如空格被编码为『%20』，问号被编码为『%3f』等。『^~』有一个特点是，它对uri中的这些符号将会进行编码处理。比如，如果location块收到的URI为”/html/%20/data”,则当Nginx服务器搜索到匹配为『^~/html//data』的location时，可以匹配成功。</p>\n","site":{"data":{}},"excerpt":"<p>location的语法结构为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location [ = | ~ | ~* | ^~ ] uri &#123;...&#125;</span><br></pre></td></tr></table></figure></p>","more":"<p>其中，uri变量是待匹配的请求字符串，可以是不含正则表达式的字符串，如 /myserver.php等；也可以是包含有正则表达式的字符串，如 .php$ (表示以.php结尾的URL)等。为了下文叙述方便，我们约定，不含正则表达式的uri称谓『标准 uri』，使用正则表达式的uri成为『正则 uri』。</p>\n<p>其中方括号里的部分，是可选项，用来改变请求字符串与uri的匹配方式。在介绍四中标识的含义之前，我们需要先了解不添加此选项时，Nginx服务器是如何在server块中搜索并使用location块的uri和请求字符串匹配的。</p>\n<p>在不添加此选项时，Nginx服务器首先在server块的多个location块中搜索是否有标准uri和请求字符串匹配，如果有多个可以匹配，就记录匹配度最高的一个。然后，服务器再用location块中的正则uri和请求字符串匹配，当地一个正则uri匹配成功，结束搜索，并使用这个location块处理此请求；如果正则匹配全部失败，就使用刚才记录的匹配度最高的location块处理次请求。</p>\n<p>了解了上面的内容，皆可以解释可选项中各个标识的含义了：</p>\n<blockquote>\n<p>“ = “，用于标准uri前，要求请求字符串与uri严格匹配。如果已经匹配成功，就停止继续向下搜索并立即处理次请求。<br>“ ~ “, 用于标识uri包含正则表达式，并且区分大小写。<br>“ ~* “， 用于标识包含正则表达式，并且不区分大小写。</p>\n</blockquote>\n<p>注意：如果uri包含正则表达式，就必须要使用『 ~ 』或者『 ~* 』标识</p>\n<blockquote>\n<p>“^~”，用于标准uri前，要求Nginx服务器找到标识uri和请求字符串匹配度最高的location后，立即是用此location处理请求，而不再使用location块中的正则uri和请求字符串做匹配。</p>\n</blockquote>\n<p>注意：我们知道，在浏览器传送URI时对一部分字符进行URL编码，比如空格被编码为『%20』，问号被编码为『%3f』等。『^~』有一个特点是，它对uri中的这些符号将会进行编码处理。比如，如果location块收到的URI为”/html/%20/data”,则当Nginx服务器搜索到匹配为『^~/html//data』的location时，可以匹配成功。</p>"},{"title":"配置允许生成的worker process数","toc":false,"date":"2017-08-26T23:27:58.000Z","_content":"\n```\nworker_processed number | auto\n```\n> number, 指定Nginx进程最多可以产生的work process数\n> auto，设置此值，Nginx进程将自动检测\n","source":"_posts/配置允许生成的worker-process数.md","raw":"---\ntitle: 配置允许生成的worker process数\ntags:\n  - nginx\ncategories:\n  - 后端开发\ntoc: false\ndate: 2017-08-27 07:27:58\n---\n\n```\nworker_processed number | auto\n```\n> number, 指定Nginx进程最多可以产生的work process数\n> auto，设置此值，Nginx进程将自动检测\n","slug":"配置允许生成的worker-process数","published":1,"updated":"2019-11-07T02:26:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo2f00bnh5s6fq348sa1","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker_processed number | auto</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>number, 指定Nginx进程最多可以产生的work process数<br>auto，设置此值，Nginx进程将自动检测</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker_processed number | auto</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>number, 指定Nginx进程最多可以产生的work process数<br>auto，设置此值，Nginx进程将自动检测</p>\n</blockquote>\n"},{"title":"配置最大连接数","toc":false,"date":"2017-08-27T00:04:02.000Z","_content":"\n指令worker_connectionns主要用来设置允许每一个worker process同时开启的最大连接数。\n\n<!-- more -->\n\n```\nworker_connectionns number;\n```\n\n此指令的默认值为512.\n此指令只能在events块中进行配置。\n","source":"_posts/配置最大连接数.md","raw":"---\ntitle: 配置最大连接数\ntags:\n  - nginx\ncategories:\n  - 后端开发\ntoc: false\ndate: 2017-08-27 08:04:02\n---\n\n指令worker_connectionns主要用来设置允许每一个worker process同时开启的最大连接数。\n\n<!-- more -->\n\n```\nworker_connectionns number;\n```\n\n此指令的默认值为512.\n此指令只能在events块中进行配置。\n","slug":"配置最大连接数","published":1,"updated":"2019-11-07T02:26:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo2g00bqh5s6vevpcv9b","content":"<p>指令worker_connectionns主要用来设置允许每一个worker process同时开启的最大连接数。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker_connectionns number;</span><br></pre></td></tr></table></figure>\n<p>此指令的默认值为512.<br>此指令只能在events块中进行配置。</p>\n","site":{"data":{}},"excerpt":"<p>指令worker_connectionns主要用来设置允许每一个worker process同时开启的最大连接数。</p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker_connectionns number;</span><br></pre></td></tr></table></figure>\n<p>此指令的默认值为512.<br>此指令只能在events块中进行配置。</p>"},{"title":"配置请求的根目录","toc":false,"date":"2017-08-27T10:48:01.000Z","_content":"\nWeb 服务器接收到网络请求之后，首先要在服务器端指定目录中寻找请求资源。在Nginx服务器中，指令root就是用来配置这个根目录的，其语法结构为：\n```\nroot path;\n```\n\n<!-- more -->\n\n其中，path为Nginx服务器接收到请求以后查找资源的根目录路径（注意这里是根目录路径，对应location里边的第一个\"/\"，而不是整个location的uri）。path变量中可以包含Nginx服务器预设的大多数变量，只有$document_root和$realpath_root不可以使用。\n\n此指令可以在http块、server块或者location块中配置。由于使用Nginx服务器多数情况下要配置多个location块对不同的请求分别作出处理，因此该指令通常在location块中进行设置。\n\n这个指令的一个实例为：\n\n```\nlocation /data/ {\n    root    /locationtest1;\n}\n```\n\n当location块接收到『/data/index.html』的请求时，将在/locationtest1/data/目录下找到index.html相应请求。\n","source":"_posts/配置请求的根目录.md","raw":"---\ntitle: 配置请求的根目录\ntags:\n  - nginx\ncategories:\n  - 后端开发\ntoc: false\ndate: 2017-08-27 18:48:01\n---\n\nWeb 服务器接收到网络请求之后，首先要在服务器端指定目录中寻找请求资源。在Nginx服务器中，指令root就是用来配置这个根目录的，其语法结构为：\n```\nroot path;\n```\n\n<!-- more -->\n\n其中，path为Nginx服务器接收到请求以后查找资源的根目录路径（注意这里是根目录路径，对应location里边的第一个\"/\"，而不是整个location的uri）。path变量中可以包含Nginx服务器预设的大多数变量，只有$document_root和$realpath_root不可以使用。\n\n此指令可以在http块、server块或者location块中配置。由于使用Nginx服务器多数情况下要配置多个location块对不同的请求分别作出处理，因此该指令通常在location块中进行设置。\n\n这个指令的一个实例为：\n\n```\nlocation /data/ {\n    root    /locationtest1;\n}\n```\n\n当location块接收到『/data/index.html』的请求时，将在/locationtest1/data/目录下找到index.html相应请求。\n","slug":"配置请求的根目录","published":1,"updated":"2019-11-07T02:26:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo2i00bth5s6lhwhjidu","content":"<p>Web 服务器接收到网络请求之后，首先要在服务器端指定目录中寻找请求资源。在Nginx服务器中，指令root就是用来配置这个根目录的，其语法结构为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root path;</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>其中，path为Nginx服务器接收到请求以后查找资源的根目录路径（注意这里是根目录路径，对应location里边的第一个”/“，而不是整个location的uri）。path变量中可以包含Nginx服务器预设的大多数变量，只有$document_root和$realpath_root不可以使用。</p>\n<p>此指令可以在http块、server块或者location块中配置。由于使用Nginx服务器多数情况下要配置多个location块对不同的请求分别作出处理，因此该指令通常在location块中进行设置。</p>\n<p>这个指令的一个实例为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /data/ &#123;</span><br><span class=\"line\">    root    /locationtest1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当location块接收到『/data/index.html』的请求时，将在/locationtest1/data/目录下找到index.html相应请求。</p>\n","site":{"data":{}},"excerpt":"<p>Web 服务器接收到网络请求之后，首先要在服务器端指定目录中寻找请求资源。在Nginx服务器中，指令root就是用来配置这个根目录的，其语法结构为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root path;</span><br></pre></td></tr></table></figure></p>","more":"<p>其中，path为Nginx服务器接收到请求以后查找资源的根目录路径（注意这里是根目录路径，对应location里边的第一个”/“，而不是整个location的uri）。path变量中可以包含Nginx服务器预设的大多数变量，只有$document_root和$realpath_root不可以使用。</p>\n<p>此指令可以在http块、server块或者location块中配置。由于使用Nginx服务器多数情况下要配置多个location块对不同的请求分别作出处理，因此该指令通常在location块中进行设置。</p>\n<p>这个指令的一个实例为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /data/ &#123;</span><br><span class=\"line\">    root    /locationtest1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当location块接收到『/data/index.html』的请求时，将在/locationtest1/data/目录下找到index.html相应请求。</p>"},{"title":"配置运行Nginx服务用户（组）","toc":false,"date":"2017-08-26T12:16:20.000Z","_content":"\n# user 指令\nuser user [group]\n    user,指定可以运行Nginx服务器的用户\n    group，可选项，指定可以运行Nginx服务器的用户组\n\n<!-- more -->\n\n只有被设置的用户或者用户组成员才有权限启动Nginx进程，如果是其他用户（test_user)尝试启动Nginx进程，将会报错\n\n如果希望所有用户都可以启动Nginx进程，有两种办法：一是将此指令行注释掉：\n\\#user [user] [group];\n或者将用户（和用户组）设置为nobody：\nuser nobody nobody;\n这也是user指令的默认配置。user指令只能在全局块中配置。\n\n> 注意：在Nginx配置文件中，每一条指令配置都必须以分号结束，不要忘记。\n","source":"_posts/配置运行Nginx服务用户（组）.md","raw":"---\ntitle: 配置运行Nginx服务用户（组）\ntags:\n  - nginx\ncategories:\n  - 后端开发\ntoc: false\ndate: 2017-08-26 20:16:20\n---\n\n# user 指令\nuser user [group]\n    user,指定可以运行Nginx服务器的用户\n    group，可选项，指定可以运行Nginx服务器的用户组\n\n<!-- more -->\n\n只有被设置的用户或者用户组成员才有权限启动Nginx进程，如果是其他用户（test_user)尝试启动Nginx进程，将会报错\n\n如果希望所有用户都可以启动Nginx进程，有两种办法：一是将此指令行注释掉：\n\\#user [user] [group];\n或者将用户（和用户组）设置为nobody：\nuser nobody nobody;\n这也是user指令的默认配置。user指令只能在全局块中配置。\n\n> 注意：在Nginx配置文件中，每一条指令配置都必须以分号结束，不要忘记。\n","slug":"配置运行Nginx服务用户（组）","published":1,"updated":"2019-11-07T02:26:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo2k00bwh5s6d4fl3htf","content":"<h1 id=\"user-指令\"><a href=\"#user-指令\" class=\"headerlink\" title=\"user 指令\"></a>user 指令</h1><p>user user [group]<br>    user,指定可以运行Nginx服务器的用户<br>    group，可选项，指定可以运行Nginx服务器的用户组</p>\n<a id=\"more\"></a>\n<p>只有被设置的用户或者用户组成员才有权限启动Nginx进程，如果是其他用户（test_user)尝试启动Nginx进程，将会报错</p>\n<p>如果希望所有用户都可以启动Nginx进程，有两种办法：一是将此指令行注释掉：<br>#user [user] [group];<br>或者将用户（和用户组）设置为nobody：<br>user nobody nobody;<br>这也是user指令的默认配置。user指令只能在全局块中配置。</p>\n<blockquote>\n<p>注意：在Nginx配置文件中，每一条指令配置都必须以分号结束，不要忘记。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"user-指令\"><a href=\"#user-指令\" class=\"headerlink\" title=\"user 指令\"></a>user 指令</h1><p>user user [group]<br>    user,指定可以运行Nginx服务器的用户<br>    group，可选项，指定可以运行Nginx服务器的用户组</p>","more":"<p>只有被设置的用户或者用户组成员才有权限启动Nginx进程，如果是其他用户（test_user)尝试启动Nginx进程，将会报错</p>\n<p>如果希望所有用户都可以启动Nginx进程，有两种办法：一是将此指令行注释掉：<br>#user [user] [group];<br>或者将用户（和用户组）设置为nobody：<br>user nobody nobody;<br>这也是user指令的默认配置。user指令只能在全局块中配置。</p>\n<blockquote>\n<p>注意：在Nginx配置文件中，每一条指令配置都必须以分号结束，不要忘记。</p>\n</blockquote>"},{"title":"防抖与节流","toc":false,"date":"2019-09-04T03:48:42.000Z","_content":"\n## 防抖与节流的应用\n\n首先这是一道面试题，我对面试题不感兴趣，但我对面试题的应用比较感兴趣，这两个词听着高大上，其实在业务应用中用的还是很多的，举两个例子更好理解：\n\n1. 防抖应用 \n\n后端防抖：一个token两个小时内没有新的请求则失效\n\n> token经常存在redis缓存里，有失效时间，如果两个小时没有新请求自动失效，如果有新的请求，调整这个token失效时间\n   \n2. 节流应用 \n\n前端节流：浏览器的resize触发事件控制执行频率\n\n> 不解释\n\n防抖：debounce  \ndebounce time 去抖动时间\n\n节流：throttle  \nn. 节流阀；[车辆] 风门；喉咙\nvt. 压制，扼杀；使……窒息；使……节流\nvi. 节流，减速；窒息","source":"_posts/防抖与节流.md","raw":"---\ntitle: 防抖与节流\ntags:\n  - 知识点备忘\ncategories:\n  - Web开发\ntoc: false\ndate: 2019-09-04 11:48:42\n---\n\n## 防抖与节流的应用\n\n首先这是一道面试题，我对面试题不感兴趣，但我对面试题的应用比较感兴趣，这两个词听着高大上，其实在业务应用中用的还是很多的，举两个例子更好理解：\n\n1. 防抖应用 \n\n后端防抖：一个token两个小时内没有新的请求则失效\n\n> token经常存在redis缓存里，有失效时间，如果两个小时没有新请求自动失效，如果有新的请求，调整这个token失效时间\n   \n2. 节流应用 \n\n前端节流：浏览器的resize触发事件控制执行频率\n\n> 不解释\n\n防抖：debounce  \ndebounce time 去抖动时间\n\n节流：throttle  \nn. 节流阀；[车辆] 风门；喉咙\nvt. 压制，扼杀；使……窒息；使……节流\nvi. 节流，减速；窒息","slug":"防抖与节流","published":1,"updated":"2019-11-08T02:01:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo2m00bzh5s6zh37x1rg","content":"<h2 id=\"防抖与节流的应用\"><a href=\"#防抖与节流的应用\" class=\"headerlink\" title=\"防抖与节流的应用\"></a>防抖与节流的应用</h2><p>首先这是一道面试题，我对面试题不感兴趣，但我对面试题的应用比较感兴趣，这两个词听着高大上，其实在业务应用中用的还是很多的，举两个例子更好理解：</p>\n<ol>\n<li>防抖应用 </li>\n</ol>\n<p>后端防抖：一个token两个小时内没有新的请求则失效</p>\n<blockquote>\n<p>token经常存在redis缓存里，有失效时间，如果两个小时没有新请求自动失效，如果有新的请求，调整这个token失效时间</p>\n</blockquote>\n<ol start=\"2\">\n<li>节流应用 </li>\n</ol>\n<p>前端节流：浏览器的resize触发事件控制执行频率</p>\n<blockquote>\n<p>不解释</p>\n</blockquote>\n<p>防抖：debounce<br>debounce time 去抖动时间</p>\n<p>节流：throttle<br>n. 节流阀；[车辆] 风门；喉咙<br>vt. 压制，扼杀；使……窒息；使……节流<br>vi. 节流，减速；窒息</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"防抖与节流的应用\"><a href=\"#防抖与节流的应用\" class=\"headerlink\" title=\"防抖与节流的应用\"></a>防抖与节流的应用</h2><p>首先这是一道面试题，我对面试题不感兴趣，但我对面试题的应用比较感兴趣，这两个词听着高大上，其实在业务应用中用的还是很多的，举两个例子更好理解：</p>\n<ol>\n<li>防抖应用 </li>\n</ol>\n<p>后端防抖：一个token两个小时内没有新的请求则失效</p>\n<blockquote>\n<p>token经常存在redis缓存里，有失效时间，如果两个小时没有新请求自动失效，如果有新的请求，调整这个token失效时间</p>\n</blockquote>\n<ol start=\"2\">\n<li>节流应用 </li>\n</ol>\n<p>前端节流：浏览器的resize触发事件控制执行频率</p>\n<blockquote>\n<p>不解释</p>\n</blockquote>\n<p>防抖：debounce<br>debounce time 去抖动时间</p>\n<p>节流：throttle<br>n. 节流阀；[车辆] 风门；喉咙<br>vt. 压制，扼杀；使……窒息；使……节流<br>vi. 节流，减速；窒息</p>\n"},{"title":"马云团队","toc":false,"date":"2017-10-13T07:05:55.000Z","_content":"\n这也是以前收藏的一张图片，放在这里自己做个备忘吧\n\n<!-- more -->\n\n![马云团队](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/%E9%A9%AC%E4%BA%91%E5%9B%A2%E9%98%9F.gif)\n","source":"_posts/马云团队.md","raw":"---\ntitle: 马云团队\ntags:\n  - plan\ncategories:\n  - 生活玩乐\ntoc: false\ndate: 2017-10-13 15:05:55\n---\n\n这也是以前收藏的一张图片，放在这里自己做个备忘吧\n\n<!-- more -->\n\n![马云团队](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/%E9%A9%AC%E4%BA%91%E5%9B%A2%E9%98%9F.gif)\n","slug":"马云团队","published":1,"updated":"2019-11-07T02:26:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo2n00c2h5s61e86vlru","content":"<p>这也是以前收藏的一张图片，放在这里自己做个备忘吧</p>\n<a id=\"more\"></a>\n<p><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/%E9%A9%AC%E4%BA%91%E5%9B%A2%E9%98%9F.gif\" alt=\"马云团队\"></p>\n","site":{"data":{}},"excerpt":"<p>这也是以前收藏的一张图片，放在这里自己做个备忘吧</p>","more":"<p><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/blog/%E9%A9%AC%E4%BA%91%E5%9B%A2%E9%98%9F.gif\" alt=\"马云团队\"></p>"},{"title":"高性能网站性能进阶指南-笔记","toc":false,"date":"2017-10-09T10:46:18.000Z","_content":"\n大部分Javascript引擎的优化是为了快速抢占市场而不是性能，所以JavaScript一直很自然地被认为是瓶颈。但通常情况下，瓶颈不是JavaScript而是DOM，所以倒腾脚本收效甚微。\n\n尽量避免倒腾脚本，要正确并清晰的编写程序。倒腾往往越整越乱，它只会让程序更容易产生bug。\n\n<!-- more -->\n\n避免使用那些传说中能让程序更快的奇技淫巧，除非你能证明它们能给应用带来明显的质量提升。大多数情况下，他们只会降低代码质量，而不会有多大提升。不要纠结于特定浏览器的怪癖，浏览器仍在发展，最终会支持更好的编码实践。\n\n如果感觉必须要捣腾，首先要评估。我们对程序真正开销的直觉往往是错的。只有通过评估，才能有把握对性能产生积极的影响。\n\n创建快速响应的web应用-\n别把运行实践可能很长的低性能代码引入到网页中。\n\n### 拆分初始化负载-\n通过拆分来节省下载量\n\n### 无阻塞加载脚本-\n通常，大多数浏览器是并行下载组件的，但对于外部脚本并非如此。当浏览器开始下载外部脚本时，在脚本下载、解析并执行完毕之前，不会开始下载任何其他内容。\n浏览器在下载和执行脚本时出现阻塞的原因在于，脚本可能会改变页面或JavaScript的命名空间，他们会对后续内容造成影响。\n很明显脚本必须按顺序执行，但没有必要按顺序下载。\n我们真正想要的是让脚本与所有其他组件并行下载，而且希望在所有浏览器中实现。\n\n1. XHR Eval\n2. XHR 注入（XHR Injection）\n3. Script in Iframe\n4. **Script DOM Element**\n5. Script Defer\n6. document.write Script Tag\n\n**最佳方案**\n没有独立的最佳方案，真正的最佳方案取决于需求：\n![脚本下载技术的决策树](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/QQ20171009-154931@2x.png)\n\n在决策树里有6中可能的结果：\n\n1. 不同域、无序\n2. 不同域、保持顺序\n3. 同域、无序、无忙指示器\n4. 同域、无序、有忙指示器\n5. 同域、保持顺序、无忙指示器\n6. 同域、保持顺序、有忙指示器\n\n### 整合异步脚本\n当异步加载的外部脚本与行内脚本之间存在代码依赖时，我们必须通过一种保持执行顺序的方法来整合这两个脚本。很显然，并没有一个能跨所有浏览器实现的简单方法。本章提出了这个问题，并给出一些解决方案：\n\n1. 代码示例：menu.js\n2. 竞争状态\n3. 异步保持顺序\n\n\t**Script Onload技术是整合异步加载外部脚本和行内脚本的首选。**他不引用任何外部脚本里的标识符，所以维护更简单。行内代码可以在外部脚本加载完毕后立即执行。事件处理也非常简单。\n\n4. 多个外部脚本\n\n\tManaged XHR技术解决了跨主流浏览器的兼容性问题。但是由于XMLHTTPRequest的同源规则，如果外部脚本部署在主页面不同的域下，该技术就无法工作。所以当脚本和页面不同域时，我们选择的方案是DOM Element 和 Doc Write技术。\n\n5. 通用解决方案\n6. 现实工作中的异步加载\n\n### 布置行内脚本\n行内脚本虽然不会产生额外的HTTP请求，但会阻塞页面上资源的并行下载，还会阻塞逐步渲染。\n1. 把行内脚本移至底部\n2. 使用异步回调启动JavaScript的执行\n\n\tsetTimeout(function(){}, 0);\n\tsetTimeout(function(){}, 250);\n\n3. 使用script的defer属性\n\n\tscript的defer属性只有Internet Explorer和Firefox3.1+支持，所以更好的方式是使用setTimeout\n\n### 编写高效的JavaScript\n\nJavaScript的执行速度取决于代码的编写方式。\n\n1. 管理作用域非常重要，因为存取非局部变量要比局部变量耗时更多。尽量避免使用会增长作用域链的结构，比如使用with语句和try-catch语句中的catch从句。如果非局部变量的使用超过一次，那么为了降低性能损耗，就应该将它存储在一个局部变量中。\n2. 存储和读取数据的方式对脚本的性能影响极大。字面量和局部变量总是最快的；存取数组元素和对象属性会引起性能损耗。如果数据元素或对象属性使用超过一次，那么为了提高存取速度，就应该将它存储到一个局部变量中。\n3. 流控制也是影响脚本执行速度的一个重要因素。条件判断有3中处理方式：if语句、switch语句和数组查找。if语句适用于少量离散值或一段区间值的判断；switch语句最好用于对3~10个离散值的判断；数组查找在吹大量离散值时效率最高。\n4. 在Javascript中，循环经常会成为性能瓶颈。为了使循环最高效，可以采用倒序的方式来处理元素，也就是在控制条件中，将迭代变量和0作比较。相比非0值，这种方式要快得多，从而显著提升数组的处理速度。如果必须要进行大量的迭代，还可以考虑使用Duff策略来提高执行速度。\n5. 谨慎使用HTMLCollection对象。每次存取这类对象的属性，都会重新查询DOM中匹配的节点。为了避免这种高昂的开销，只有在必要时才存取HTMLCollection对象，并将经常存取的值（例如length属性）存储在局部变量中。\n6. 常见的字符串操作可能会带来意料之外的性能问题。Internet Explorer处理字符串链接的速度比其他浏览器要慢很多，但这没什么大不了，除非你要一次执行1000次以上的字符串链接。你可以对Internet Explorer处理字符串链接的方式进行优化：先将所有要链接的字符串存储到数组中，然后调用join()方法合并他们。去除字符串两端的空白可能很耗时，这取决于字符串的大小。如果脚本中经常需要去除字符串两端的空白，那请确保使用最优算法。\n7. 浏览器会限制JavaScript可以运行的最长时间，有些会以执行语句的数量作为判断条件，有些则会控制JavaScript引擎执行的总时间。你可以使用定时器将任务拆分执行，从而绕开这些限制，避免浏览器弹出终止脚本运行的警告。\n","source":"_posts/高性能网站性能进阶指南-笔记.md","raw":"---\ntitle: 高性能网站性能进阶指南-笔记\ntags:\n  - javascript\ncategories:\n  - 性能优化\ntoc: false\ndate: 2017-10-09 18:46:18\n---\n\n大部分Javascript引擎的优化是为了快速抢占市场而不是性能，所以JavaScript一直很自然地被认为是瓶颈。但通常情况下，瓶颈不是JavaScript而是DOM，所以倒腾脚本收效甚微。\n\n尽量避免倒腾脚本，要正确并清晰的编写程序。倒腾往往越整越乱，它只会让程序更容易产生bug。\n\n<!-- more -->\n\n避免使用那些传说中能让程序更快的奇技淫巧，除非你能证明它们能给应用带来明显的质量提升。大多数情况下，他们只会降低代码质量，而不会有多大提升。不要纠结于特定浏览器的怪癖，浏览器仍在发展，最终会支持更好的编码实践。\n\n如果感觉必须要捣腾，首先要评估。我们对程序真正开销的直觉往往是错的。只有通过评估，才能有把握对性能产生积极的影响。\n\n创建快速响应的web应用-\n别把运行实践可能很长的低性能代码引入到网页中。\n\n### 拆分初始化负载-\n通过拆分来节省下载量\n\n### 无阻塞加载脚本-\n通常，大多数浏览器是并行下载组件的，但对于外部脚本并非如此。当浏览器开始下载外部脚本时，在脚本下载、解析并执行完毕之前，不会开始下载任何其他内容。\n浏览器在下载和执行脚本时出现阻塞的原因在于，脚本可能会改变页面或JavaScript的命名空间，他们会对后续内容造成影响。\n很明显脚本必须按顺序执行，但没有必要按顺序下载。\n我们真正想要的是让脚本与所有其他组件并行下载，而且希望在所有浏览器中实现。\n\n1. XHR Eval\n2. XHR 注入（XHR Injection）\n3. Script in Iframe\n4. **Script DOM Element**\n5. Script Defer\n6. document.write Script Tag\n\n**最佳方案**\n没有独立的最佳方案，真正的最佳方案取决于需求：\n![脚本下载技术的决策树](http://houjiyi.oss-cn-beijing.aliyuncs.com/images/QQ20171009-154931@2x.png)\n\n在决策树里有6中可能的结果：\n\n1. 不同域、无序\n2. 不同域、保持顺序\n3. 同域、无序、无忙指示器\n4. 同域、无序、有忙指示器\n5. 同域、保持顺序、无忙指示器\n6. 同域、保持顺序、有忙指示器\n\n### 整合异步脚本\n当异步加载的外部脚本与行内脚本之间存在代码依赖时，我们必须通过一种保持执行顺序的方法来整合这两个脚本。很显然，并没有一个能跨所有浏览器实现的简单方法。本章提出了这个问题，并给出一些解决方案：\n\n1. 代码示例：menu.js\n2. 竞争状态\n3. 异步保持顺序\n\n\t**Script Onload技术是整合异步加载外部脚本和行内脚本的首选。**他不引用任何外部脚本里的标识符，所以维护更简单。行内代码可以在外部脚本加载完毕后立即执行。事件处理也非常简单。\n\n4. 多个外部脚本\n\n\tManaged XHR技术解决了跨主流浏览器的兼容性问题。但是由于XMLHTTPRequest的同源规则，如果外部脚本部署在主页面不同的域下，该技术就无法工作。所以当脚本和页面不同域时，我们选择的方案是DOM Element 和 Doc Write技术。\n\n5. 通用解决方案\n6. 现实工作中的异步加载\n\n### 布置行内脚本\n行内脚本虽然不会产生额外的HTTP请求，但会阻塞页面上资源的并行下载，还会阻塞逐步渲染。\n1. 把行内脚本移至底部\n2. 使用异步回调启动JavaScript的执行\n\n\tsetTimeout(function(){}, 0);\n\tsetTimeout(function(){}, 250);\n\n3. 使用script的defer属性\n\n\tscript的defer属性只有Internet Explorer和Firefox3.1+支持，所以更好的方式是使用setTimeout\n\n### 编写高效的JavaScript\n\nJavaScript的执行速度取决于代码的编写方式。\n\n1. 管理作用域非常重要，因为存取非局部变量要比局部变量耗时更多。尽量避免使用会增长作用域链的结构，比如使用with语句和try-catch语句中的catch从句。如果非局部变量的使用超过一次，那么为了降低性能损耗，就应该将它存储在一个局部变量中。\n2. 存储和读取数据的方式对脚本的性能影响极大。字面量和局部变量总是最快的；存取数组元素和对象属性会引起性能损耗。如果数据元素或对象属性使用超过一次，那么为了提高存取速度，就应该将它存储到一个局部变量中。\n3. 流控制也是影响脚本执行速度的一个重要因素。条件判断有3中处理方式：if语句、switch语句和数组查找。if语句适用于少量离散值或一段区间值的判断；switch语句最好用于对3~10个离散值的判断；数组查找在吹大量离散值时效率最高。\n4. 在Javascript中，循环经常会成为性能瓶颈。为了使循环最高效，可以采用倒序的方式来处理元素，也就是在控制条件中，将迭代变量和0作比较。相比非0值，这种方式要快得多，从而显著提升数组的处理速度。如果必须要进行大量的迭代，还可以考虑使用Duff策略来提高执行速度。\n5. 谨慎使用HTMLCollection对象。每次存取这类对象的属性，都会重新查询DOM中匹配的节点。为了避免这种高昂的开销，只有在必要时才存取HTMLCollection对象，并将经常存取的值（例如length属性）存储在局部变量中。\n6. 常见的字符串操作可能会带来意料之外的性能问题。Internet Explorer处理字符串链接的速度比其他浏览器要慢很多，但这没什么大不了，除非你要一次执行1000次以上的字符串链接。你可以对Internet Explorer处理字符串链接的方式进行优化：先将所有要链接的字符串存储到数组中，然后调用join()方法合并他们。去除字符串两端的空白可能很耗时，这取决于字符串的大小。如果脚本中经常需要去除字符串两端的空白，那请确保使用最优算法。\n7. 浏览器会限制JavaScript可以运行的最长时间，有些会以执行语句的数量作为判断条件，有些则会控制JavaScript引擎执行的总时间。你可以使用定时器将任务拆分执行，从而绕开这些限制，避免浏览器弹出终止脚本运行的警告。\n","slug":"高性能网站性能进阶指南-笔记","published":1,"updated":"2019-11-07T02:26:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo2o00c5h5s6sxq24wsy","content":"<p>大部分Javascript引擎的优化是为了快速抢占市场而不是性能，所以JavaScript一直很自然地被认为是瓶颈。但通常情况下，瓶颈不是JavaScript而是DOM，所以倒腾脚本收效甚微。</p>\n<p>尽量避免倒腾脚本，要正确并清晰的编写程序。倒腾往往越整越乱，它只会让程序更容易产生bug。</p>\n<a id=\"more\"></a>\n<p>避免使用那些传说中能让程序更快的奇技淫巧，除非你能证明它们能给应用带来明显的质量提升。大多数情况下，他们只会降低代码质量，而不会有多大提升。不要纠结于特定浏览器的怪癖，浏览器仍在发展，最终会支持更好的编码实践。</p>\n<p>如果感觉必须要捣腾，首先要评估。我们对程序真正开销的直觉往往是错的。只有通过评估，才能有把握对性能产生积极的影响。</p>\n<p>创建快速响应的web应用-<br>别把运行实践可能很长的低性能代码引入到网页中。</p>\n<h3 id=\"拆分初始化负载\"><a href=\"#拆分初始化负载\" class=\"headerlink\" title=\"拆分初始化负载-\"></a>拆分初始化负载-</h3><p>通过拆分来节省下载量</p>\n<h3 id=\"无阻塞加载脚本\"><a href=\"#无阻塞加载脚本\" class=\"headerlink\" title=\"无阻塞加载脚本-\"></a>无阻塞加载脚本-</h3><p>通常，大多数浏览器是并行下载组件的，但对于外部脚本并非如此。当浏览器开始下载外部脚本时，在脚本下载、解析并执行完毕之前，不会开始下载任何其他内容。<br>浏览器在下载和执行脚本时出现阻塞的原因在于，脚本可能会改变页面或JavaScript的命名空间，他们会对后续内容造成影响。<br>很明显脚本必须按顺序执行，但没有必要按顺序下载。<br>我们真正想要的是让脚本与所有其他组件并行下载，而且希望在所有浏览器中实现。</p>\n<ol>\n<li>XHR Eval</li>\n<li>XHR 注入（XHR Injection）</li>\n<li>Script in Iframe</li>\n<li><strong>Script DOM Element</strong></li>\n<li>Script Defer</li>\n<li>document.write Script Tag</li>\n</ol>\n<p><strong>最佳方案</strong><br>没有独立的最佳方案，真正的最佳方案取决于需求：<br><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/QQ20171009-154931@2x.png\" alt=\"脚本下载技术的决策树\"></p>\n<p>在决策树里有6中可能的结果：</p>\n<ol>\n<li>不同域、无序</li>\n<li>不同域、保持顺序</li>\n<li>同域、无序、无忙指示器</li>\n<li>同域、无序、有忙指示器</li>\n<li>同域、保持顺序、无忙指示器</li>\n<li>同域、保持顺序、有忙指示器</li>\n</ol>\n<h3 id=\"整合异步脚本\"><a href=\"#整合异步脚本\" class=\"headerlink\" title=\"整合异步脚本\"></a>整合异步脚本</h3><p>当异步加载的外部脚本与行内脚本之间存在代码依赖时，我们必须通过一种保持执行顺序的方法来整合这两个脚本。很显然，并没有一个能跨所有浏览器实现的简单方法。本章提出了这个问题，并给出一些解决方案：</p>\n<ol>\n<li>代码示例：menu.js</li>\n<li>竞争状态</li>\n<li><p>异步保持顺序</p>\n<p> <strong>Script Onload技术是整合异步加载外部脚本和行内脚本的首选。</strong>他不引用任何外部脚本里的标识符，所以维护更简单。行内代码可以在外部脚本加载完毕后立即执行。事件处理也非常简单。</p>\n</li>\n<li><p>多个外部脚本</p>\n<p> Managed XHR技术解决了跨主流浏览器的兼容性问题。但是由于XMLHTTPRequest的同源规则，如果外部脚本部署在主页面不同的域下，该技术就无法工作。所以当脚本和页面不同域时，我们选择的方案是DOM Element 和 Doc Write技术。</p>\n</li>\n<li><p>通用解决方案</p>\n</li>\n<li>现实工作中的异步加载</li>\n</ol>\n<h3 id=\"布置行内脚本\"><a href=\"#布置行内脚本\" class=\"headerlink\" title=\"布置行内脚本\"></a>布置行内脚本</h3><p>行内脚本虽然不会产生额外的HTTP请求，但会阻塞页面上资源的并行下载，还会阻塞逐步渲染。</p>\n<ol>\n<li>把行内脚本移至底部</li>\n<li><p>使用异步回调启动JavaScript的执行</p>\n<p> setTimeout(function(){}, 0);<br> setTimeout(function(){}, 250);</p>\n</li>\n<li><p>使用script的defer属性</p>\n<p> script的defer属性只有Internet Explorer和Firefox3.1+支持，所以更好的方式是使用setTimeout</p>\n</li>\n</ol>\n<h3 id=\"编写高效的JavaScript\"><a href=\"#编写高效的JavaScript\" class=\"headerlink\" title=\"编写高效的JavaScript\"></a>编写高效的JavaScript</h3><p>JavaScript的执行速度取决于代码的编写方式。</p>\n<ol>\n<li>管理作用域非常重要，因为存取非局部变量要比局部变量耗时更多。尽量避免使用会增长作用域链的结构，比如使用with语句和try-catch语句中的catch从句。如果非局部变量的使用超过一次，那么为了降低性能损耗，就应该将它存储在一个局部变量中。</li>\n<li>存储和读取数据的方式对脚本的性能影响极大。字面量和局部变量总是最快的；存取数组元素和对象属性会引起性能损耗。如果数据元素或对象属性使用超过一次，那么为了提高存取速度，就应该将它存储到一个局部变量中。</li>\n<li>流控制也是影响脚本执行速度的一个重要因素。条件判断有3中处理方式：if语句、switch语句和数组查找。if语句适用于少量离散值或一段区间值的判断；switch语句最好用于对3~10个离散值的判断；数组查找在吹大量离散值时效率最高。</li>\n<li>在Javascript中，循环经常会成为性能瓶颈。为了使循环最高效，可以采用倒序的方式来处理元素，也就是在控制条件中，将迭代变量和0作比较。相比非0值，这种方式要快得多，从而显著提升数组的处理速度。如果必须要进行大量的迭代，还可以考虑使用Duff策略来提高执行速度。</li>\n<li>谨慎使用HTMLCollection对象。每次存取这类对象的属性，都会重新查询DOM中匹配的节点。为了避免这种高昂的开销，只有在必要时才存取HTMLCollection对象，并将经常存取的值（例如length属性）存储在局部变量中。</li>\n<li>常见的字符串操作可能会带来意料之外的性能问题。Internet Explorer处理字符串链接的速度比其他浏览器要慢很多，但这没什么大不了，除非你要一次执行1000次以上的字符串链接。你可以对Internet Explorer处理字符串链接的方式进行优化：先将所有要链接的字符串存储到数组中，然后调用join()方法合并他们。去除字符串两端的空白可能很耗时，这取决于字符串的大小。如果脚本中经常需要去除字符串两端的空白，那请确保使用最优算法。</li>\n<li>浏览器会限制JavaScript可以运行的最长时间，有些会以执行语句的数量作为判断条件，有些则会控制JavaScript引擎执行的总时间。你可以使用定时器将任务拆分执行，从而绕开这些限制，避免浏览器弹出终止脚本运行的警告。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>大部分Javascript引擎的优化是为了快速抢占市场而不是性能，所以JavaScript一直很自然地被认为是瓶颈。但通常情况下，瓶颈不是JavaScript而是DOM，所以倒腾脚本收效甚微。</p>\n<p>尽量避免倒腾脚本，要正确并清晰的编写程序。倒腾往往越整越乱，它只会让程序更容易产生bug。</p>","more":"<p>避免使用那些传说中能让程序更快的奇技淫巧，除非你能证明它们能给应用带来明显的质量提升。大多数情况下，他们只会降低代码质量，而不会有多大提升。不要纠结于特定浏览器的怪癖，浏览器仍在发展，最终会支持更好的编码实践。</p>\n<p>如果感觉必须要捣腾，首先要评估。我们对程序真正开销的直觉往往是错的。只有通过评估，才能有把握对性能产生积极的影响。</p>\n<p>创建快速响应的web应用-<br>别把运行实践可能很长的低性能代码引入到网页中。</p>\n<h3 id=\"拆分初始化负载\"><a href=\"#拆分初始化负载\" class=\"headerlink\" title=\"拆分初始化负载-\"></a>拆分初始化负载-</h3><p>通过拆分来节省下载量</p>\n<h3 id=\"无阻塞加载脚本\"><a href=\"#无阻塞加载脚本\" class=\"headerlink\" title=\"无阻塞加载脚本-\"></a>无阻塞加载脚本-</h3><p>通常，大多数浏览器是并行下载组件的，但对于外部脚本并非如此。当浏览器开始下载外部脚本时，在脚本下载、解析并执行完毕之前，不会开始下载任何其他内容。<br>浏览器在下载和执行脚本时出现阻塞的原因在于，脚本可能会改变页面或JavaScript的命名空间，他们会对后续内容造成影响。<br>很明显脚本必须按顺序执行，但没有必要按顺序下载。<br>我们真正想要的是让脚本与所有其他组件并行下载，而且希望在所有浏览器中实现。</p>\n<ol>\n<li>XHR Eval</li>\n<li>XHR 注入（XHR Injection）</li>\n<li>Script in Iframe</li>\n<li><strong>Script DOM Element</strong></li>\n<li>Script Defer</li>\n<li>document.write Script Tag</li>\n</ol>\n<p><strong>最佳方案</strong><br>没有独立的最佳方案，真正的最佳方案取决于需求：<br><img src=\"http://houjiyi.oss-cn-beijing.aliyuncs.com/images/QQ20171009-154931@2x.png\" alt=\"脚本下载技术的决策树\"></p>\n<p>在决策树里有6中可能的结果：</p>\n<ol>\n<li>不同域、无序</li>\n<li>不同域、保持顺序</li>\n<li>同域、无序、无忙指示器</li>\n<li>同域、无序、有忙指示器</li>\n<li>同域、保持顺序、无忙指示器</li>\n<li>同域、保持顺序、有忙指示器</li>\n</ol>\n<h3 id=\"整合异步脚本\"><a href=\"#整合异步脚本\" class=\"headerlink\" title=\"整合异步脚本\"></a>整合异步脚本</h3><p>当异步加载的外部脚本与行内脚本之间存在代码依赖时，我们必须通过一种保持执行顺序的方法来整合这两个脚本。很显然，并没有一个能跨所有浏览器实现的简单方法。本章提出了这个问题，并给出一些解决方案：</p>\n<ol>\n<li>代码示例：menu.js</li>\n<li>竞争状态</li>\n<li><p>异步保持顺序</p>\n<p> <strong>Script Onload技术是整合异步加载外部脚本和行内脚本的首选。</strong>他不引用任何外部脚本里的标识符，所以维护更简单。行内代码可以在外部脚本加载完毕后立即执行。事件处理也非常简单。</p>\n</li>\n<li><p>多个外部脚本</p>\n<p> Managed XHR技术解决了跨主流浏览器的兼容性问题。但是由于XMLHTTPRequest的同源规则，如果外部脚本部署在主页面不同的域下，该技术就无法工作。所以当脚本和页面不同域时，我们选择的方案是DOM Element 和 Doc Write技术。</p>\n</li>\n<li><p>通用解决方案</p>\n</li>\n<li>现实工作中的异步加载</li>\n</ol>\n<h3 id=\"布置行内脚本\"><a href=\"#布置行内脚本\" class=\"headerlink\" title=\"布置行内脚本\"></a>布置行内脚本</h3><p>行内脚本虽然不会产生额外的HTTP请求，但会阻塞页面上资源的并行下载，还会阻塞逐步渲染。</p>\n<ol>\n<li>把行内脚本移至底部</li>\n<li><p>使用异步回调启动JavaScript的执行</p>\n<p> setTimeout(function(){}, 0);<br> setTimeout(function(){}, 250);</p>\n</li>\n<li><p>使用script的defer属性</p>\n<p> script的defer属性只有Internet Explorer和Firefox3.1+支持，所以更好的方式是使用setTimeout</p>\n</li>\n</ol>\n<h3 id=\"编写高效的JavaScript\"><a href=\"#编写高效的JavaScript\" class=\"headerlink\" title=\"编写高效的JavaScript\"></a>编写高效的JavaScript</h3><p>JavaScript的执行速度取决于代码的编写方式。</p>\n<ol>\n<li>管理作用域非常重要，因为存取非局部变量要比局部变量耗时更多。尽量避免使用会增长作用域链的结构，比如使用with语句和try-catch语句中的catch从句。如果非局部变量的使用超过一次，那么为了降低性能损耗，就应该将它存储在一个局部变量中。</li>\n<li>存储和读取数据的方式对脚本的性能影响极大。字面量和局部变量总是最快的；存取数组元素和对象属性会引起性能损耗。如果数据元素或对象属性使用超过一次，那么为了提高存取速度，就应该将它存储到一个局部变量中。</li>\n<li>流控制也是影响脚本执行速度的一个重要因素。条件判断有3中处理方式：if语句、switch语句和数组查找。if语句适用于少量离散值或一段区间值的判断；switch语句最好用于对3~10个离散值的判断；数组查找在吹大量离散值时效率最高。</li>\n<li>在Javascript中，循环经常会成为性能瓶颈。为了使循环最高效，可以采用倒序的方式来处理元素，也就是在控制条件中，将迭代变量和0作比较。相比非0值，这种方式要快得多，从而显著提升数组的处理速度。如果必须要进行大量的迭代，还可以考虑使用Duff策略来提高执行速度。</li>\n<li>谨慎使用HTMLCollection对象。每次存取这类对象的属性，都会重新查询DOM中匹配的节点。为了避免这种高昂的开销，只有在必要时才存取HTMLCollection对象，并将经常存取的值（例如length属性）存储在局部变量中。</li>\n<li>常见的字符串操作可能会带来意料之外的性能问题。Internet Explorer处理字符串链接的速度比其他浏览器要慢很多，但这没什么大不了，除非你要一次执行1000次以上的字符串链接。你可以对Internet Explorer处理字符串链接的方式进行优化：先将所有要链接的字符串存储到数组中，然后调用join()方法合并他们。去除字符串两端的空白可能很耗时，这取决于字符串的大小。如果脚本中经常需要去除字符串两端的空白，那请确保使用最优算法。</li>\n<li>浏览器会限制JavaScript可以运行的最长时间，有些会以执行语句的数量作为判断条件，有些则会控制JavaScript引擎执行的总时间。你可以使用定时器将任务拆分执行，从而绕开这些限制，避免浏览器弹出终止脚本运行的警告。</li>\n</ol>"},{"title":"长时间Running flutter pub get没反应","toc":false,"date":"2020-08-10T09:47:58.000Z","_content":"\n先说结论就是环境变量配置的又问题：\n\n肯定是这个配置：\n```bash\nexport PUB_HOSTED_URL=https://pub.flutter-io.cn\nexport FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn\n```\n\n为什么还是不行的原因就是我安装了zsh，.bash_profile配置了不好使，于是需要在.zshrc里也配置上才行。","source":"_posts/长时间Running-flutter-pub-get没反应.md","raw":"---\ntitle: 长时间Running flutter pub get没反应\ntags:\n  - 知识点备忘\ncategories:\n  - 移动开发\ntoc: false\ndate: 2020-08-10 17:47:58\n---\n\n先说结论就是环境变量配置的又问题：\n\n肯定是这个配置：\n```bash\nexport PUB_HOSTED_URL=https://pub.flutter-io.cn\nexport FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn\n```\n\n为什么还是不行的原因就是我安装了zsh，.bash_profile配置了不好使，于是需要在.zshrc里也配置上才行。","slug":"长时间Running-flutter-pub-get没反应","published":1,"updated":"2020-08-10T09:49:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckockzo2r00c8h5s6xtymfu1b","content":"<p>先说结论就是环境变量配置的又问题：</p>\n<p>肯定是这个配置：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PUB_HOSTED_URL=https://pub.flutter-io.cn</span><br><span class=\"line\"><span class=\"built_in\">export</span> FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br></pre></td></tr></table></figure></p>\n<p>为什么还是不行的原因就是我安装了zsh，.bash_profile配置了不好使，于是需要在.zshrc里也配置上才行。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>先说结论就是环境变量配置的又问题：</p>\n<p>肯定是这个配置：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PUB_HOSTED_URL=https://pub.flutter-io.cn</span><br><span class=\"line\"><span class=\"built_in\">export</span> FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br></pre></td></tr></table></figure></p>\n<p>为什么还是不行的原因就是我安装了zsh，.bash_profile配置了不好使，于是需要在.zshrc里也配置上才行。</p>\n"},{"title":"微前端架构下腾讯云K8S的部署方式","toc":false,"date":"2021-05-06T09:05:14.000Z","_content":"\n# 微前端架构下腾讯云K8S的部署方式\n\n## 总体思路\n\n> 每个应用都对应一个镜像，这个镜像有版本的概念，每次打包都是创建一个新版本\n\n> K8S存在集群的概念，不同环境可以有不同的集群，比如预发布环境可以有3台机器和生产环境可以有7台机器\n![image.png](http://blogimage.houjiyi.com/Fnr9oyazc53y7ZA9caBjP-f8LKWB)\n<!-- more -->\n> 进入集群里边，前端应用创建`工作负载`Deployment，对应的就是一个负载对应一个镜像，其中`选择镜像版本`相当于上线不同的代码，每次有新的上线实际上就是更新这里的最新版本；\n![image.png](http://blogimage.houjiyi.com/Fj_1xuC02ISX0roQv5z1O9nUXBYN)\n\n> `服务与路由`中的Service，在每个deployment创建以后会自动创建一个，他会生成IP地址，方便我们的域名解析到对应到deployment；\n> Ingress 是允许访问到集群内 Service 规则的集合，您可以通过配置转发规则，实现不同 URL 可以访问到集群内不同的 Service；里边还能配置http和https证书；\n![image.png](http://blogimage.houjiyi.com/Fv8DsXWA1WK1Ho0Bg_Cw6aoVwO2_)\n\n> 上边是一些概念，如果不实际使用的话，很难去理解他们之间的关系；也就是会者不难、难者不会的一个情况；当你需要的时候自然会去认识、了解、操作，之后就知道是怎么回事了。这里讲一个地方即可就是我们的项目需要打包成镜像，然后发布到K8S上，实际上发布到K8S可以交给运维同学来做，我们需要做的是打包这块的流程，因为这里运维无法帮助你；\n\n## 用于打包的镜像\n- 我们需要有两个镜像，一个是用于打包的镜像，一个是用于部署的镜像\n- 用于部署的镜像比较简单，一个nginx服务镜像即可；\n- 用于打包的镜像相对复杂些，需要有nodejs环境，python环境（用于上传静态资源）\n- 打包的镜像拉到本地后，将当前目录下的文件全部拷贝进去，然后安装及打包，这样打包的就是当前分支的代码，也就是说不用指定分支，使用当前分支即可\n- 打包后将dist文件上传到对应的项目目录下，这样静态资源就可以访问了，这里的上传用到了腾讯云的python上传工具：https://cloud.tencent.com/document/product/436/10976\n- 还有一个镜像是用来部署环境的，这里直接使用一个dockerhub上的nginx镜像即可\n\n## 看下脚本代码\n```bash\n#!/bin/bash\n\nset -e\n\n# 1 build 基础\n# 2. 日常\nscript_name=`basename $0`\nbuild_type=$1\noption=$2\n\nusage() {\n    echo \"${script_name} [build_type prod=<正式环境> | pre=<灰度环境> | test=<测试环境> | dev=<开发环境> | base=<基础配置>]\"\n}\n\nDOCKER_FILE=\"Dockerfile\"\nIMAGE_NAME=\"fe_fpms_microapp_prod\"\ncase $build_type in\npre)\n    IMAGE_NAME=\"fe_fpms_microapp_pre\"\n    ;;\ntest)\n    IMAGE_NAME=\"fe_fpms_microapp_test\"\n    ;;\ndev)\n    IMAGE_NAME=\"fe_fpms_microapp_dev\"\n    ;;\nbase)\n    DOCKER_FILE=\"build.Dockerfile\"\n    IMAGE_NAME=\"fe_fpms_microapp_build\"\n    ;;\nprod)\n    ;;\n*)\n    usage\n    exit 1\n    ;;\nesac\n\nIMAGE_PREFIX=ccr.ccs.tencentyun.com/aiforward_saas_fe/${IMAGE_NAME}\nIMAGE_TAG=`date +'%Y%m%d%H%M'`-`git rev-parse --short HEAD`\nIMAGE=$IMAGE_PREFIX:${IMAGE_TAG}\necho \"------------------------------\"\necho \"Make sure docker login first!\"\necho \"Run the followings...\"\necho \"docker login ccr.ccs.tencentyun.com\"\necho \"\"\necho \"Git branch: \"`git rev-parse --abbrev-ref HEAD`\necho \"Git SHA   : \"`git rev-parse HEAD`\necho \"Image     : ${IMAGE}\"\necho \"\"\necho \"Press any to continue, Ctrl + C to cancel\"\nread p\n\n\necho \"=> Buiding image: $IMAGE And build_type=$build_type\"\ndocker build -t $IMAGE . -f $DOCKER_FILE --build-arg build_type=$build_type\necho \"=> Pushing image: $IMAGE\"\ndocker push $IMAGE\n\n```\n> Dockerfile\n```bash\n\nFROM ccr.ccs.tencentyun.com/aiforward_saas_fe/fe_fpms_build:202104290107  AS builder\n\nARG build_type=prod\n# 每一个项目都不同 fpms_pro 根据vue.config.js中的publicpath而来\nARG tencent_path_name=fpms_microapp\nWORKDIR /app/\nCOPY . /app/\n\nRUN npm install --registry=https://registry.npm.taobao.org\nRUN npm run build:$build_type\nRUN /usr/local/bin/coscmd upload -rsf /app/dist fe/src/$tencent_path_name/dist\n\nFROM nginx:stable-alpine\n\nADD ./misc/default.conf /etc/nginx/conf.d/default.conf\nADD ./misc/nginx.conf /etc/nginx/nginx.conf\nCOPY --from=builder /app/dist /usr/share/nginx/html\n\nEXPOSE 80\n\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n```\n\n- 打包镜像-fe_fpms_build:202104290107，它是我们自定义的打包环境镜像，因此每次打包都使用它\n- 部署镜像-nginx:stable-alpine\n- 打包镜像是自己通过其他镜像创建container，然后再进入container安装打包环境，再把container打包成镜像并推送到腾讯云（ccr.ccs.tencentyun.com/aiforward_saas_fe/fe_fpms_build:202104290107）\n\n> 这些都准备好以后，我们每次进行上线，只需要本地打包以后然后推送到腾讯云上即可，再到腾讯云修改部署的版本。\n> 这里腾讯云的登录 `docker login ccr.ccs.tencentyun.com`","source":"_posts/微前端架构下腾讯云K8S的部署方式.md","raw":"---\ntitle: 微前端架构下腾讯云K8S的部署方式\ntags: []\ncategories: []\ntoc: false\ndate: 2021-05-06 17:05:14\n---\n\n# 微前端架构下腾讯云K8S的部署方式\n\n## 总体思路\n\n> 每个应用都对应一个镜像，这个镜像有版本的概念，每次打包都是创建一个新版本\n\n> K8S存在集群的概念，不同环境可以有不同的集群，比如预发布环境可以有3台机器和生产环境可以有7台机器\n![image.png](http://blogimage.houjiyi.com/Fnr9oyazc53y7ZA9caBjP-f8LKWB)\n<!-- more -->\n> 进入集群里边，前端应用创建`工作负载`Deployment，对应的就是一个负载对应一个镜像，其中`选择镜像版本`相当于上线不同的代码，每次有新的上线实际上就是更新这里的最新版本；\n![image.png](http://blogimage.houjiyi.com/Fj_1xuC02ISX0roQv5z1O9nUXBYN)\n\n> `服务与路由`中的Service，在每个deployment创建以后会自动创建一个，他会生成IP地址，方便我们的域名解析到对应到deployment；\n> Ingress 是允许访问到集群内 Service 规则的集合，您可以通过配置转发规则，实现不同 URL 可以访问到集群内不同的 Service；里边还能配置http和https证书；\n![image.png](http://blogimage.houjiyi.com/Fv8DsXWA1WK1Ho0Bg_Cw6aoVwO2_)\n\n> 上边是一些概念，如果不实际使用的话，很难去理解他们之间的关系；也就是会者不难、难者不会的一个情况；当你需要的时候自然会去认识、了解、操作，之后就知道是怎么回事了。这里讲一个地方即可就是我们的项目需要打包成镜像，然后发布到K8S上，实际上发布到K8S可以交给运维同学来做，我们需要做的是打包这块的流程，因为这里运维无法帮助你；\n\n## 用于打包的镜像\n- 我们需要有两个镜像，一个是用于打包的镜像，一个是用于部署的镜像\n- 用于部署的镜像比较简单，一个nginx服务镜像即可；\n- 用于打包的镜像相对复杂些，需要有nodejs环境，python环境（用于上传静态资源）\n- 打包的镜像拉到本地后，将当前目录下的文件全部拷贝进去，然后安装及打包，这样打包的就是当前分支的代码，也就是说不用指定分支，使用当前分支即可\n- 打包后将dist文件上传到对应的项目目录下，这样静态资源就可以访问了，这里的上传用到了腾讯云的python上传工具：https://cloud.tencent.com/document/product/436/10976\n- 还有一个镜像是用来部署环境的，这里直接使用一个dockerhub上的nginx镜像即可\n\n## 看下脚本代码\n```bash\n#!/bin/bash\n\nset -e\n\n# 1 build 基础\n# 2. 日常\nscript_name=`basename $0`\nbuild_type=$1\noption=$2\n\nusage() {\n    echo \"${script_name} [build_type prod=<正式环境> | pre=<灰度环境> | test=<测试环境> | dev=<开发环境> | base=<基础配置>]\"\n}\n\nDOCKER_FILE=\"Dockerfile\"\nIMAGE_NAME=\"fe_fpms_microapp_prod\"\ncase $build_type in\npre)\n    IMAGE_NAME=\"fe_fpms_microapp_pre\"\n    ;;\ntest)\n    IMAGE_NAME=\"fe_fpms_microapp_test\"\n    ;;\ndev)\n    IMAGE_NAME=\"fe_fpms_microapp_dev\"\n    ;;\nbase)\n    DOCKER_FILE=\"build.Dockerfile\"\n    IMAGE_NAME=\"fe_fpms_microapp_build\"\n    ;;\nprod)\n    ;;\n*)\n    usage\n    exit 1\n    ;;\nesac\n\nIMAGE_PREFIX=ccr.ccs.tencentyun.com/aiforward_saas_fe/${IMAGE_NAME}\nIMAGE_TAG=`date +'%Y%m%d%H%M'`-`git rev-parse --short HEAD`\nIMAGE=$IMAGE_PREFIX:${IMAGE_TAG}\necho \"------------------------------\"\necho \"Make sure docker login first!\"\necho \"Run the followings...\"\necho \"docker login ccr.ccs.tencentyun.com\"\necho \"\"\necho \"Git branch: \"`git rev-parse --abbrev-ref HEAD`\necho \"Git SHA   : \"`git rev-parse HEAD`\necho \"Image     : ${IMAGE}\"\necho \"\"\necho \"Press any to continue, Ctrl + C to cancel\"\nread p\n\n\necho \"=> Buiding image: $IMAGE And build_type=$build_type\"\ndocker build -t $IMAGE . -f $DOCKER_FILE --build-arg build_type=$build_type\necho \"=> Pushing image: $IMAGE\"\ndocker push $IMAGE\n\n```\n> Dockerfile\n```bash\n\nFROM ccr.ccs.tencentyun.com/aiforward_saas_fe/fe_fpms_build:202104290107  AS builder\n\nARG build_type=prod\n# 每一个项目都不同 fpms_pro 根据vue.config.js中的publicpath而来\nARG tencent_path_name=fpms_microapp\nWORKDIR /app/\nCOPY . /app/\n\nRUN npm install --registry=https://registry.npm.taobao.org\nRUN npm run build:$build_type\nRUN /usr/local/bin/coscmd upload -rsf /app/dist fe/src/$tencent_path_name/dist\n\nFROM nginx:stable-alpine\n\nADD ./misc/default.conf /etc/nginx/conf.d/default.conf\nADD ./misc/nginx.conf /etc/nginx/nginx.conf\nCOPY --from=builder /app/dist /usr/share/nginx/html\n\nEXPOSE 80\n\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n```\n\n- 打包镜像-fe_fpms_build:202104290107，它是我们自定义的打包环境镜像，因此每次打包都使用它\n- 部署镜像-nginx:stable-alpine\n- 打包镜像是自己通过其他镜像创建container，然后再进入container安装打包环境，再把container打包成镜像并推送到腾讯云（ccr.ccs.tencentyun.com/aiforward_saas_fe/fe_fpms_build:202104290107）\n\n> 这些都准备好以后，我们每次进行上线，只需要本地打包以后然后推送到腾讯云上即可，再到腾讯云修改部署的版本。\n> 这里腾讯云的登录 `docker login ccr.ccs.tencentyun.com`","slug":"微前端架构下腾讯云K8S的部署方式","published":1,"updated":"2021-05-06T09:13:02.705Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckoco951f0000g3s6d1qhfhph","content":"<h1 id=\"微前端架构下腾讯云K8S的部署方式\"><a href=\"#微前端架构下腾讯云K8S的部署方式\" class=\"headerlink\" title=\"微前端架构下腾讯云K8S的部署方式\"></a>微前端架构下腾讯云K8S的部署方式</h1><h2 id=\"总体思路\"><a href=\"#总体思路\" class=\"headerlink\" title=\"总体思路\"></a>总体思路</h2><blockquote>\n<p>每个应用都对应一个镜像，这个镜像有版本的概念，每次打包都是创建一个新版本</p>\n</blockquote>\n<blockquote>\n<p>K8S存在集群的概念，不同环境可以有不同的集群，比如预发布环境可以有3台机器和生产环境可以有7台机器<br><img src=\"http://blogimage.houjiyi.com/Fnr9oyazc53y7ZA9caBjP-f8LKWB\" alt=\"image.png\"><br><a id=\"more\"></a><br>进入集群里边，前端应用创建<code>工作负载</code>Deployment，对应的就是一个负载对应一个镜像，其中<code>选择镜像版本</code>相当于上线不同的代码，每次有新的上线实际上就是更新这里的最新版本；<br><img src=\"http://blogimage.houjiyi.com/Fj_1xuC02ISX0roQv5z1O9nUXBYN\" alt=\"image.png\"></p>\n</blockquote>\n<blockquote>\n<p><code>服务与路由</code>中的Service，在每个deployment创建以后会自动创建一个，他会生成IP地址，方便我们的域名解析到对应到deployment；<br>Ingress 是允许访问到集群内 Service 规则的集合，您可以通过配置转发规则，实现不同 URL 可以访问到集群内不同的 Service；里边还能配置http和https证书；<br><img src=\"http://blogimage.houjiyi.com/Fv8DsXWA1WK1Ho0Bg_Cw6aoVwO2_\" alt=\"image.png\"></p>\n</blockquote>\n<blockquote>\n<p>上边是一些概念，如果不实际使用的话，很难去理解他们之间的关系；也就是会者不难、难者不会的一个情况；当你需要的时候自然会去认识、了解、操作，之后就知道是怎么回事了。这里讲一个地方即可就是我们的项目需要打包成镜像，然后发布到K8S上，实际上发布到K8S可以交给运维同学来做，我们需要做的是打包这块的流程，因为这里运维无法帮助你；</p>\n</blockquote>\n<h2 id=\"用于打包的镜像\"><a href=\"#用于打包的镜像\" class=\"headerlink\" title=\"用于打包的镜像\"></a>用于打包的镜像</h2><ul>\n<li>我们需要有两个镜像，一个是用于打包的镜像，一个是用于部署的镜像</li>\n<li>用于部署的镜像比较简单，一个nginx服务镜像即可；</li>\n<li>用于打包的镜像相对复杂些，需要有nodejs环境，python环境（用于上传静态资源）</li>\n<li>打包的镜像拉到本地后，将当前目录下的文件全部拷贝进去，然后安装及打包，这样打包的就是当前分支的代码，也就是说不用指定分支，使用当前分支即可</li>\n<li>打包后将dist文件上传到对应的项目目录下，这样静态资源就可以访问了，这里的上传用到了腾讯云的python上传工具：<a href=\"https://cloud.tencent.com/document/product/436/10976\" target=\"_blank\" rel=\"noopener\">https://cloud.tencent.com/document/product/436/10976</a></li>\n<li>还有一个镜像是用来部署环境的，这里直接使用一个dockerhub上的nginx镜像即可</li>\n</ul>\n<h2 id=\"看下脚本代码\"><a href=\"#看下脚本代码\" class=\"headerlink\" title=\"看下脚本代码\"></a>看下脚本代码</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> -e</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1 build 基础</span></span><br><span class=\"line\"><span class=\"comment\"># 2. 日常</span></span><br><span class=\"line\">script_name=`basename <span class=\"variable\">$0</span>`</span><br><span class=\"line\">build_type=<span class=\"variable\">$1</span></span><br><span class=\"line\">option=<span class=\"variable\">$2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">usage</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$&#123;script_name&#125;</span> [build_type prod=&lt;正式环境&gt; | pre=&lt;灰度环境&gt; | test=&lt;测试环境&gt; | dev=&lt;开发环境&gt; | base=&lt;基础配置&gt;]\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">DOCKER_FILE=<span class=\"string\">\"Dockerfile\"</span></span><br><span class=\"line\">IMAGE_NAME=<span class=\"string\">\"fe_fpms_microapp_prod\"</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$build_type</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">pre)</span><br><span class=\"line\">    IMAGE_NAME=<span class=\"string\">\"fe_fpms_microapp_pre\"</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\"><span class=\"built_in\">test</span>)</span><br><span class=\"line\">    IMAGE_NAME=<span class=\"string\">\"fe_fpms_microapp_test\"</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\">dev)</span><br><span class=\"line\">    IMAGE_NAME=<span class=\"string\">\"fe_fpms_microapp_dev\"</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\">base)</span><br><span class=\"line\">    DOCKER_FILE=<span class=\"string\">\"build.Dockerfile\"</span></span><br><span class=\"line\">    IMAGE_NAME=<span class=\"string\">\"fe_fpms_microapp_build\"</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\">prod)</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">*)</span><br><span class=\"line\">    usage</span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">    ;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br><span class=\"line\"></span><br><span class=\"line\">IMAGE_PREFIX=ccr.ccs.tencentyun.com/aiforward_saas_fe/<span class=\"variable\">$&#123;IMAGE_NAME&#125;</span></span><br><span class=\"line\">IMAGE_TAG=`date +<span class=\"string\">'%Y%m%d%H%M'</span>`-`git rev-parse --short HEAD`</span><br><span class=\"line\">IMAGE=<span class=\"variable\">$IMAGE_PREFIX</span>:<span class=\"variable\">$&#123;IMAGE_TAG&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"------------------------------\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Make sure docker login first!\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Run the followings...\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"docker login ccr.ccs.tencentyun.com\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Git branch: \"</span>`git rev-parse --abbrev-ref HEAD`</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Git SHA   : \"</span>`git rev-parse HEAD`</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Image     : <span class=\"variable\">$&#123;IMAGE&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Press any to continue, Ctrl + C to cancel\"</span></span><br><span class=\"line\"><span class=\"built_in\">read</span> p</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"=&gt; Buiding image: <span class=\"variable\">$IMAGE</span> And build_type=<span class=\"variable\">$build_type</span>\"</span></span><br><span class=\"line\">docker build -t <span class=\"variable\">$IMAGE</span> . -f <span class=\"variable\">$DOCKER_FILE</span> --build-arg build_type=<span class=\"variable\">$build_type</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"=&gt; Pushing image: <span class=\"variable\">$IMAGE</span>\"</span></span><br><span class=\"line\">docker push <span class=\"variable\">$IMAGE</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Dockerfile<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">FROM ccr.ccs.tencentyun.com/aiforward_saas_fe/fe_fpms_build:202104290107  AS builder</span><br><span class=\"line\"></span><br><span class=\"line\">ARG build_type=prod</span><br><span class=\"line\"><span class=\"comment\"># 每一个项目都不同 fpms_pro 根据vue.config.js中的publicpath而来</span></span><br><span class=\"line\">ARG tencent_path_name=fpms_microapp</span><br><span class=\"line\">WORKDIR /app/</span><br><span class=\"line\">COPY . /app/</span><br><span class=\"line\"></span><br><span class=\"line\">RUN npm install --registry=https://registry.npm.taobao.org</span><br><span class=\"line\">RUN npm run build:<span class=\"variable\">$build_type</span></span><br><span class=\"line\">RUN /usr/<span class=\"built_in\">local</span>/bin/coscmd upload -rsf /app/dist fe/src/<span class=\"variable\">$tencent_path_name</span>/dist</span><br><span class=\"line\"></span><br><span class=\"line\">FROM nginx:stable-alpine</span><br><span class=\"line\"></span><br><span class=\"line\">ADD ./misc/default.conf /etc/nginx/conf.d/default.conf</span><br><span class=\"line\">ADD ./misc/nginx.conf /etc/nginx/nginx.conf</span><br><span class=\"line\">COPY --from=builder /app/dist /usr/share/nginx/html</span><br><span class=\"line\"></span><br><span class=\"line\">EXPOSE 80</span><br><span class=\"line\"></span><br><span class=\"line\">CMD [<span class=\"string\">\"nginx\"</span>, <span class=\"string\">\"-g\"</span>, <span class=\"string\">\"daemon off;\"</span>]</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<ul>\n<li>打包镜像-fe_fpms_build:202104290107，它是我们自定义的打包环境镜像，因此每次打包都使用它</li>\n<li>部署镜像-nginx:stable-alpine</li>\n<li>打包镜像是自己通过其他镜像创建container，然后再进入container安装打包环境，再把container打包成镜像并推送到腾讯云（ccr.ccs.tencentyun.com/aiforward_saas_fe/fe_fpms_build:202104290107）</li>\n</ul>\n<blockquote>\n<p>这些都准备好以后，我们每次进行上线，只需要本地打包以后然后推送到腾讯云上即可，再到腾讯云修改部署的版本。<br>这里腾讯云的登录 <code>docker login ccr.ccs.tencentyun.com</code></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"微前端架构下腾讯云K8S的部署方式\"><a href=\"#微前端架构下腾讯云K8S的部署方式\" class=\"headerlink\" title=\"微前端架构下腾讯云K8S的部署方式\"></a>微前端架构下腾讯云K8S的部署方式</h1><h2 id=\"总体思路\"><a href=\"#总体思路\" class=\"headerlink\" title=\"总体思路\"></a>总体思路</h2><blockquote>\n<p>每个应用都对应一个镜像，这个镜像有版本的概念，每次打包都是创建一个新版本</p>\n</blockquote>\n<blockquote>\n<p>K8S存在集群的概念，不同环境可以有不同的集群，比如预发布环境可以有3台机器和生产环境可以有7台机器<br><img src=\"http://blogimage.houjiyi.com/Fnr9oyazc53y7ZA9caBjP-f8LKWB\" alt=\"image.png\"><br>","more":"<br>进入集群里边，前端应用创建<code>工作负载</code>Deployment，对应的就是一个负载对应一个镜像，其中<code>选择镜像版本</code>相当于上线不同的代码，每次有新的上线实际上就是更新这里的最新版本；<br><img src=\"http://blogimage.houjiyi.com/Fj_1xuC02ISX0roQv5z1O9nUXBYN\" alt=\"image.png\"></p>\n</blockquote>\n<blockquote>\n<p><code>服务与路由</code>中的Service，在每个deployment创建以后会自动创建一个，他会生成IP地址，方便我们的域名解析到对应到deployment；<br>Ingress 是允许访问到集群内 Service 规则的集合，您可以通过配置转发规则，实现不同 URL 可以访问到集群内不同的 Service；里边还能配置http和https证书；<br><img src=\"http://blogimage.houjiyi.com/Fv8DsXWA1WK1Ho0Bg_Cw6aoVwO2_\" alt=\"image.png\"></p>\n</blockquote>\n<blockquote>\n<p>上边是一些概念，如果不实际使用的话，很难去理解他们之间的关系；也就是会者不难、难者不会的一个情况；当你需要的时候自然会去认识、了解、操作，之后就知道是怎么回事了。这里讲一个地方即可就是我们的项目需要打包成镜像，然后发布到K8S上，实际上发布到K8S可以交给运维同学来做，我们需要做的是打包这块的流程，因为这里运维无法帮助你；</p>\n</blockquote>\n<h2 id=\"用于打包的镜像\"><a href=\"#用于打包的镜像\" class=\"headerlink\" title=\"用于打包的镜像\"></a>用于打包的镜像</h2><ul>\n<li>我们需要有两个镜像，一个是用于打包的镜像，一个是用于部署的镜像</li>\n<li>用于部署的镜像比较简单，一个nginx服务镜像即可；</li>\n<li>用于打包的镜像相对复杂些，需要有nodejs环境，python环境（用于上传静态资源）</li>\n<li>打包的镜像拉到本地后，将当前目录下的文件全部拷贝进去，然后安装及打包，这样打包的就是当前分支的代码，也就是说不用指定分支，使用当前分支即可</li>\n<li>打包后将dist文件上传到对应的项目目录下，这样静态资源就可以访问了，这里的上传用到了腾讯云的python上传工具：<a href=\"https://cloud.tencent.com/document/product/436/10976\" target=\"_blank\" rel=\"noopener\">https://cloud.tencent.com/document/product/436/10976</a></li>\n<li>还有一个镜像是用来部署环境的，这里直接使用一个dockerhub上的nginx镜像即可</li>\n</ul>\n<h2 id=\"看下脚本代码\"><a href=\"#看下脚本代码\" class=\"headerlink\" title=\"看下脚本代码\"></a>看下脚本代码</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> -e</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1 build 基础</span></span><br><span class=\"line\"><span class=\"comment\"># 2. 日常</span></span><br><span class=\"line\">script_name=`basename <span class=\"variable\">$0</span>`</span><br><span class=\"line\">build_type=<span class=\"variable\">$1</span></span><br><span class=\"line\">option=<span class=\"variable\">$2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">usage</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$&#123;script_name&#125;</span> [build_type prod=&lt;正式环境&gt; | pre=&lt;灰度环境&gt; | test=&lt;测试环境&gt; | dev=&lt;开发环境&gt; | base=&lt;基础配置&gt;]\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">DOCKER_FILE=<span class=\"string\">\"Dockerfile\"</span></span><br><span class=\"line\">IMAGE_NAME=<span class=\"string\">\"fe_fpms_microapp_prod\"</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$build_type</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">pre)</span><br><span class=\"line\">    IMAGE_NAME=<span class=\"string\">\"fe_fpms_microapp_pre\"</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\"><span class=\"built_in\">test</span>)</span><br><span class=\"line\">    IMAGE_NAME=<span class=\"string\">\"fe_fpms_microapp_test\"</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\">dev)</span><br><span class=\"line\">    IMAGE_NAME=<span class=\"string\">\"fe_fpms_microapp_dev\"</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\">base)</span><br><span class=\"line\">    DOCKER_FILE=<span class=\"string\">\"build.Dockerfile\"</span></span><br><span class=\"line\">    IMAGE_NAME=<span class=\"string\">\"fe_fpms_microapp_build\"</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\">prod)</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">*)</span><br><span class=\"line\">    usage</span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">    ;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br><span class=\"line\"></span><br><span class=\"line\">IMAGE_PREFIX=ccr.ccs.tencentyun.com/aiforward_saas_fe/<span class=\"variable\">$&#123;IMAGE_NAME&#125;</span></span><br><span class=\"line\">IMAGE_TAG=`date +<span class=\"string\">'%Y%m%d%H%M'</span>`-`git rev-parse --short HEAD`</span><br><span class=\"line\">IMAGE=<span class=\"variable\">$IMAGE_PREFIX</span>:<span class=\"variable\">$&#123;IMAGE_TAG&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"------------------------------\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Make sure docker login first!\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Run the followings...\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"docker login ccr.ccs.tencentyun.com\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Git branch: \"</span>`git rev-parse --abbrev-ref HEAD`</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Git SHA   : \"</span>`git rev-parse HEAD`</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Image     : <span class=\"variable\">$&#123;IMAGE&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Press any to continue, Ctrl + C to cancel\"</span></span><br><span class=\"line\"><span class=\"built_in\">read</span> p</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"=&gt; Buiding image: <span class=\"variable\">$IMAGE</span> And build_type=<span class=\"variable\">$build_type</span>\"</span></span><br><span class=\"line\">docker build -t <span class=\"variable\">$IMAGE</span> . -f <span class=\"variable\">$DOCKER_FILE</span> --build-arg build_type=<span class=\"variable\">$build_type</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"=&gt; Pushing image: <span class=\"variable\">$IMAGE</span>\"</span></span><br><span class=\"line\">docker push <span class=\"variable\">$IMAGE</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Dockerfile<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">FROM ccr.ccs.tencentyun.com/aiforward_saas_fe/fe_fpms_build:202104290107  AS builder</span><br><span class=\"line\"></span><br><span class=\"line\">ARG build_type=prod</span><br><span class=\"line\"><span class=\"comment\"># 每一个项目都不同 fpms_pro 根据vue.config.js中的publicpath而来</span></span><br><span class=\"line\">ARG tencent_path_name=fpms_microapp</span><br><span class=\"line\">WORKDIR /app/</span><br><span class=\"line\">COPY . /app/</span><br><span class=\"line\"></span><br><span class=\"line\">RUN npm install --registry=https://registry.npm.taobao.org</span><br><span class=\"line\">RUN npm run build:<span class=\"variable\">$build_type</span></span><br><span class=\"line\">RUN /usr/<span class=\"built_in\">local</span>/bin/coscmd upload -rsf /app/dist fe/src/<span class=\"variable\">$tencent_path_name</span>/dist</span><br><span class=\"line\"></span><br><span class=\"line\">FROM nginx:stable-alpine</span><br><span class=\"line\"></span><br><span class=\"line\">ADD ./misc/default.conf /etc/nginx/conf.d/default.conf</span><br><span class=\"line\">ADD ./misc/nginx.conf /etc/nginx/nginx.conf</span><br><span class=\"line\">COPY --from=builder /app/dist /usr/share/nginx/html</span><br><span class=\"line\"></span><br><span class=\"line\">EXPOSE 80</span><br><span class=\"line\"></span><br><span class=\"line\">CMD [<span class=\"string\">\"nginx\"</span>, <span class=\"string\">\"-g\"</span>, <span class=\"string\">\"daemon off;\"</span>]</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<ul>\n<li>打包镜像-fe_fpms_build:202104290107，它是我们自定义的打包环境镜像，因此每次打包都使用它</li>\n<li>部署镜像-nginx:stable-alpine</li>\n<li>打包镜像是自己通过其他镜像创建container，然后再进入container安装打包环境，再把container打包成镜像并推送到腾讯云（ccr.ccs.tencentyun.com/aiforward_saas_fe/fe_fpms_build:202104290107）</li>\n</ul>\n<blockquote>\n<p>这些都准备好以后，我们每次进行上线，只需要本地打包以后然后推送到腾讯云上即可，再到腾讯云修改部署的版本。<br>这里腾讯云的登录 <code>docker login ccr.ccs.tencentyun.com</code></p>\n</blockquote>"},{"title":"公共组件库实施","toc":false,"date":"2021-05-07T08:35:07.000Z","_content":"\n## 底层原则\n> 随着系统应用越来越多，我们对系统进行了微前端的改造，同时改造带来一个组件复用的问题需要解决，经过调研，最终还是决定使用npm包的形式进行公共组件的开发维护工作\n\n> npm 包所在位置：https://www.npmjs.com/package/pms_components\n\n> 源代码所在位置：http://gitlab.aiforward.cn/fe/pms_components\n\n> 组件库组件分两类：业务组件和基础组件\n\n> 为了保证与迁移之前使用方式一致，还对部分组件进行了写法上的调整\n\n\n## 组件分类:基础组件&业务组件\n\n## 安装\n```bash\nnpm i pms_components\n```\n\n## 使用\n```bash\nimport PmsComponents from 'pms_components'\n\nimport 'pms_components/lib/theme/index.css'\n\nVue.use(PmsComponents)\n```\n\n## 依赖\n```bash\nvue-virtual-scroller\n\nv-viewer\n\nvue-resize-observer  ## 组件的更新及发布\n```\n\n## 基础组件\n> 基础组件的使用可以直接像上边的方式去用，通过引入pms_components和css即可，也可以进行按需引用\n> 基础组件就是不依赖项目环境的组件，他可以放在任意的项目中去使用，使用方法比较简单。\n>\n> EmptyLayout  组件--空页面\n>\n> ImportModal  组件--导入弹层\n>\n> FwAffixTable  组件--表格\n>\n> FwBadge  组件--徽章\n>\n> FwBreadcrumb  组件--面包屑\n>\n> FwFlexCard  组件--卡片展示\n>\n> FwRadioTab  组件--标签选项卡\n>\n> FwSteps  组件--步骤展示\n>\n> InputNumberWithAddon  组件--数字带后缀\n>\n> ImageHolder  组件--图片展示\n>\n> ImageViewer  组件--图片查看组件\n>\n> TitleAndOperate  组件--标题隔离\n>\n> LongTextPopover  组件--长文本弹窗\n\n\n## 业务组件\n> 业务组件的使用稍微麻烦些，由于它依赖项目的运行环境，这里主要是请求中的token等信息，所以需要在项目中\n> 重新定义一下对应的组件，在我们的项目中fpms_app_template有这几个的基本示例代码，我们将业务组件进行\n> 简单的二次包装，同时将项目的request方法默认传入组件，这样不同项目请求方式就是统一的了。\n> ![image.png](http://blogimage.houjiyi.com/Fk1kiZGj4AqwHbp1qxarj6NfsS-_)\n> \n```javascript\nimport FwCascader from 'pms_components/packages/FwCascader/FwCascader.vue'\nimport { axios } from '@/utils/request'\nexport default {\n  name: 'FwCascader',\n  components: {\n    FwCascader\n  },\n  render () {\n    const props = { ...this.$attrs }\n    props.axios = axios\n    return (\n      <FwCascader props={ props } on={ this.$listeners } scopedSlots={ this.$scopedSlots }>\n        { Object.keys(this.$slots).map(name => (<template slot={name}>{this.$slots[name]}</template>)) }\n      </FwCascader>\n    )\n  }\n}\n```\n> 这里主要作用是把项目的request方法传进组件，使用具体项目的请求方式。\n> \n> LocationCascader  组件--位置选择组件\n> \n> UnionLocationCascade  组件--组合位置选择\n> \n> RegionCascader  组件--地区选择组件\n>\n> upload  组件--上传\n> \n> FwCascader  组件--房屋选择\n>\n\n## 组件打包\n> 基础组件会打包，业务组件不打包，业务组件打包时间会很长也是个问题，通过区别基础组件和业务组件的使用方式， 可以避免这一情况\n\n> 打开pms_components项目\n>\n> 控制台输入npm login,输入帐号和密码即可登录\n\n```bash\nnpm run uv # 增加版本号\n\nnpm run lib:cli # 对项目进行打包\n\nnpm publish # 将包发布到npm仓库\n```\n\n## 新组件开发及使用\n\n> 新组件开发完，在fpms_components中增加示例代码\n>\n> 同时确保在项目fpms_app_template中使用没问题的情况下再发布,可以直接吧libs目录放在fpms_app_template的node_modules对应的包中测试\n>","source":"_posts/公共组件库实施.md","raw":"---\ntitle: 公共组件库实施\ntags:\n  - 知识点备忘\n  - javascript\n  - 微前端\n  - vue\ncategories:\n  - Web开发\ntoc: false\ndate: 2021-05-07 16:35:07\n---\n\n## 底层原则\n> 随着系统应用越来越多，我们对系统进行了微前端的改造，同时改造带来一个组件复用的问题需要解决，经过调研，最终还是决定使用npm包的形式进行公共组件的开发维护工作\n\n> npm 包所在位置：https://www.npmjs.com/package/pms_components\n\n> 源代码所在位置：http://gitlab.aiforward.cn/fe/pms_components\n\n> 组件库组件分两类：业务组件和基础组件\n\n> 为了保证与迁移之前使用方式一致，还对部分组件进行了写法上的调整\n\n\n## 组件分类:基础组件&业务组件\n\n## 安装\n```bash\nnpm i pms_components\n```\n\n## 使用\n```bash\nimport PmsComponents from 'pms_components'\n\nimport 'pms_components/lib/theme/index.css'\n\nVue.use(PmsComponents)\n```\n\n## 依赖\n```bash\nvue-virtual-scroller\n\nv-viewer\n\nvue-resize-observer  ## 组件的更新及发布\n```\n\n## 基础组件\n> 基础组件的使用可以直接像上边的方式去用，通过引入pms_components和css即可，也可以进行按需引用\n> 基础组件就是不依赖项目环境的组件，他可以放在任意的项目中去使用，使用方法比较简单。\n>\n> EmptyLayout  组件--空页面\n>\n> ImportModal  组件--导入弹层\n>\n> FwAffixTable  组件--表格\n>\n> FwBadge  组件--徽章\n>\n> FwBreadcrumb  组件--面包屑\n>\n> FwFlexCard  组件--卡片展示\n>\n> FwRadioTab  组件--标签选项卡\n>\n> FwSteps  组件--步骤展示\n>\n> InputNumberWithAddon  组件--数字带后缀\n>\n> ImageHolder  组件--图片展示\n>\n> ImageViewer  组件--图片查看组件\n>\n> TitleAndOperate  组件--标题隔离\n>\n> LongTextPopover  组件--长文本弹窗\n\n\n## 业务组件\n> 业务组件的使用稍微麻烦些，由于它依赖项目的运行环境，这里主要是请求中的token等信息，所以需要在项目中\n> 重新定义一下对应的组件，在我们的项目中fpms_app_template有这几个的基本示例代码，我们将业务组件进行\n> 简单的二次包装，同时将项目的request方法默认传入组件，这样不同项目请求方式就是统一的了。\n> ![image.png](http://blogimage.houjiyi.com/Fk1kiZGj4AqwHbp1qxarj6NfsS-_)\n> \n```javascript\nimport FwCascader from 'pms_components/packages/FwCascader/FwCascader.vue'\nimport { axios } from '@/utils/request'\nexport default {\n  name: 'FwCascader',\n  components: {\n    FwCascader\n  },\n  render () {\n    const props = { ...this.$attrs }\n    props.axios = axios\n    return (\n      <FwCascader props={ props } on={ this.$listeners } scopedSlots={ this.$scopedSlots }>\n        { Object.keys(this.$slots).map(name => (<template slot={name}>{this.$slots[name]}</template>)) }\n      </FwCascader>\n    )\n  }\n}\n```\n> 这里主要作用是把项目的request方法传进组件，使用具体项目的请求方式。\n> \n> LocationCascader  组件--位置选择组件\n> \n> UnionLocationCascade  组件--组合位置选择\n> \n> RegionCascader  组件--地区选择组件\n>\n> upload  组件--上传\n> \n> FwCascader  组件--房屋选择\n>\n\n## 组件打包\n> 基础组件会打包，业务组件不打包，业务组件打包时间会很长也是个问题，通过区别基础组件和业务组件的使用方式， 可以避免这一情况\n\n> 打开pms_components项目\n>\n> 控制台输入npm login,输入帐号和密码即可登录\n\n```bash\nnpm run uv # 增加版本号\n\nnpm run lib:cli # 对项目进行打包\n\nnpm publish # 将包发布到npm仓库\n```\n\n## 新组件开发及使用\n\n> 新组件开发完，在fpms_components中增加示例代码\n>\n> 同时确保在项目fpms_app_template中使用没问题的情况下再发布,可以直接吧libs目录放在fpms_app_template的node_modules对应的包中测试\n>","slug":"公共组件库实施","published":1,"updated":"2021-05-07T08:35:38.138Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckoe2d2q500007qs6807vbwbz","content":"<h2 id=\"底层原则\"><a href=\"#底层原则\" class=\"headerlink\" title=\"底层原则\"></a>底层原则</h2><blockquote>\n<p>随着系统应用越来越多，我们对系统进行了微前端的改造，同时改造带来一个组件复用的问题需要解决，经过调研，最终还是决定使用npm包的形式进行公共组件的开发维护工作</p>\n</blockquote>\n<blockquote>\n<p>npm 包所在位置：<a href=\"https://www.npmjs.com/package/pms_components\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/pms_components</a></p>\n</blockquote>\n<blockquote>\n<p>源代码所在位置：<a href=\"http://gitlab.aiforward.cn/fe/pms_components\" target=\"_blank\" rel=\"noopener\">http://gitlab.aiforward.cn/fe/pms_components</a></p>\n</blockquote>\n<blockquote>\n<p>组件库组件分两类：业务组件和基础组件</p>\n</blockquote>\n<blockquote>\n<p>为了保证与迁移之前使用方式一致，还对部分组件进行了写法上的调整</p>\n</blockquote>\n<h2 id=\"组件分类-基础组件-amp-业务组件\"><a href=\"#组件分类-基础组件-amp-业务组件\" class=\"headerlink\" title=\"组件分类:基础组件&amp;业务组件\"></a>组件分类:基础组件&amp;业务组件</h2><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i pms_components</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import PmsComponents from <span class=\"string\">'pms_components'</span></span><br><span class=\"line\"></span><br><span class=\"line\">import <span class=\"string\">'pms_components/lib/theme/index.css'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(PmsComponents)</span><br></pre></td></tr></table></figure>\n<h2 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue-virtual-scroller</span><br><span class=\"line\"></span><br><span class=\"line\">v-viewer</span><br><span class=\"line\"></span><br><span class=\"line\">vue-resize-observer  <span class=\"comment\">## 组件的更新及发布</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"基础组件\"><a href=\"#基础组件\" class=\"headerlink\" title=\"基础组件\"></a>基础组件</h2><blockquote>\n<p>基础组件的使用可以直接像上边的方式去用，通过引入pms_components和css即可，也可以进行按需引用<br>基础组件就是不依赖项目环境的组件，他可以放在任意的项目中去使用，使用方法比较简单。</p>\n<p>EmptyLayout  组件–空页面</p>\n<p>ImportModal  组件–导入弹层</p>\n<p>FwAffixTable  组件–表格</p>\n<p>FwBadge  组件–徽章</p>\n<p>FwBreadcrumb  组件–面包屑</p>\n<p>FwFlexCard  组件–卡片展示</p>\n<p>FwRadioTab  组件–标签选项卡</p>\n<p>FwSteps  组件–步骤展示</p>\n<p>InputNumberWithAddon  组件–数字带后缀</p>\n<p>ImageHolder  组件–图片展示</p>\n<p>ImageViewer  组件–图片查看组件</p>\n<p>TitleAndOperate  组件–标题隔离</p>\n<p>LongTextPopover  组件–长文本弹窗</p>\n</blockquote>\n<h2 id=\"业务组件\"><a href=\"#业务组件\" class=\"headerlink\" title=\"业务组件\"></a>业务组件</h2><blockquote>\n<p>业务组件的使用稍微麻烦些，由于它依赖项目的运行环境，这里主要是请求中的token等信息，所以需要在项目中<br>重新定义一下对应的组件，在我们的项目中fpms_app_template有这几个的基本示例代码，我们将业务组件进行<br>简单的二次包装，同时将项目的request方法默认传入组件，这样不同项目请求方式就是统一的了。<br><img src=\"http://blogimage.houjiyi.com/Fk1kiZGj4AqwHbp1qxarj6NfsS-_\" alt=\"image.png\"></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> FwCascader <span class=\"keyword\">from</span> <span class=\"string\">'pms_components/packages/FwCascader/FwCascader.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; axios &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@/utils/request'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'FwCascader'</span>,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    FwCascader</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> props = &#123; ...this.$attrs &#125;</span><br><span class=\"line\">    props.axios = axios</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;FwCascader props=&#123; props &#125; on=&#123; <span class=\"keyword\">this</span>.$listeners &#125; scopedSlots=&#123; <span class=\"keyword\">this</span>.$scopedSlots &#125;&gt;</span><br><span class=\"line\">        &#123; <span class=\"built_in\">Object</span>.keys(<span class=\"keyword\">this</span>.$slots).map(<span class=\"function\"><span class=\"params\">name</span> =&gt;</span> (&lt;template slot=&#123;name&#125;&gt;&#123;this.$slots[name]&#125;&lt;/template&gt;)) &#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/FwCascader&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里主要作用是把项目的request方法传进组件，使用具体项目的请求方式。</p>\n<p>LocationCascader  组件–位置选择组件</p>\n<p>UnionLocationCascade  组件–组合位置选择</p>\n<p>RegionCascader  组件–地区选择组件</p>\n<p>upload  组件–上传</p>\n<p>FwCascader  组件–房屋选择</p>\n</blockquote>\n<h2 id=\"组件打包\"><a href=\"#组件打包\" class=\"headerlink\" title=\"组件打包\"></a>组件打包</h2><blockquote>\n<p>基础组件会打包，业务组件不打包，业务组件打包时间会很长也是个问题，通过区别基础组件和业务组件的使用方式， 可以避免这一情况</p>\n</blockquote>\n<blockquote>\n<p>打开pms_components项目</p>\n<p>控制台输入npm login,输入帐号和密码即可登录</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run uv <span class=\"comment\"># 增加版本号</span></span><br><span class=\"line\"></span><br><span class=\"line\">npm run lib:cli <span class=\"comment\"># 对项目进行打包</span></span><br><span class=\"line\"></span><br><span class=\"line\">npm publish <span class=\"comment\"># 将包发布到npm仓库</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"新组件开发及使用\"><a href=\"#新组件开发及使用\" class=\"headerlink\" title=\"新组件开发及使用\"></a>新组件开发及使用</h2><blockquote>\n<p>新组件开发完，在fpms_components中增加示例代码</p>\n<p>同时确保在项目fpms_app_template中使用没问题的情况下再发布,可以直接吧libs目录放在fpms_app_template的node_modules对应的包中测试</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"底层原则\"><a href=\"#底层原则\" class=\"headerlink\" title=\"底层原则\"></a>底层原则</h2><blockquote>\n<p>随着系统应用越来越多，我们对系统进行了微前端的改造，同时改造带来一个组件复用的问题需要解决，经过调研，最终还是决定使用npm包的形式进行公共组件的开发维护工作</p>\n</blockquote>\n<blockquote>\n<p>npm 包所在位置：<a href=\"https://www.npmjs.com/package/pms_components\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/pms_components</a></p>\n</blockquote>\n<blockquote>\n<p>源代码所在位置：<a href=\"http://gitlab.aiforward.cn/fe/pms_components\" target=\"_blank\" rel=\"noopener\">http://gitlab.aiforward.cn/fe/pms_components</a></p>\n</blockquote>\n<blockquote>\n<p>组件库组件分两类：业务组件和基础组件</p>\n</blockquote>\n<blockquote>\n<p>为了保证与迁移之前使用方式一致，还对部分组件进行了写法上的调整</p>\n</blockquote>\n<h2 id=\"组件分类-基础组件-amp-业务组件\"><a href=\"#组件分类-基础组件-amp-业务组件\" class=\"headerlink\" title=\"组件分类:基础组件&amp;业务组件\"></a>组件分类:基础组件&amp;业务组件</h2><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i pms_components</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import PmsComponents from <span class=\"string\">'pms_components'</span></span><br><span class=\"line\"></span><br><span class=\"line\">import <span class=\"string\">'pms_components/lib/theme/index.css'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(PmsComponents)</span><br></pre></td></tr></table></figure>\n<h2 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue-virtual-scroller</span><br><span class=\"line\"></span><br><span class=\"line\">v-viewer</span><br><span class=\"line\"></span><br><span class=\"line\">vue-resize-observer  <span class=\"comment\">## 组件的更新及发布</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"基础组件\"><a href=\"#基础组件\" class=\"headerlink\" title=\"基础组件\"></a>基础组件</h2><blockquote>\n<p>基础组件的使用可以直接像上边的方式去用，通过引入pms_components和css即可，也可以进行按需引用<br>基础组件就是不依赖项目环境的组件，他可以放在任意的项目中去使用，使用方法比较简单。</p>\n<p>EmptyLayout  组件–空页面</p>\n<p>ImportModal  组件–导入弹层</p>\n<p>FwAffixTable  组件–表格</p>\n<p>FwBadge  组件–徽章</p>\n<p>FwBreadcrumb  组件–面包屑</p>\n<p>FwFlexCard  组件–卡片展示</p>\n<p>FwRadioTab  组件–标签选项卡</p>\n<p>FwSteps  组件–步骤展示</p>\n<p>InputNumberWithAddon  组件–数字带后缀</p>\n<p>ImageHolder  组件–图片展示</p>\n<p>ImageViewer  组件–图片查看组件</p>\n<p>TitleAndOperate  组件–标题隔离</p>\n<p>LongTextPopover  组件–长文本弹窗</p>\n</blockquote>\n<h2 id=\"业务组件\"><a href=\"#业务组件\" class=\"headerlink\" title=\"业务组件\"></a>业务组件</h2><blockquote>\n<p>业务组件的使用稍微麻烦些，由于它依赖项目的运行环境，这里主要是请求中的token等信息，所以需要在项目中<br>重新定义一下对应的组件，在我们的项目中fpms_app_template有这几个的基本示例代码，我们将业务组件进行<br>简单的二次包装，同时将项目的request方法默认传入组件，这样不同项目请求方式就是统一的了。<br><img src=\"http://blogimage.houjiyi.com/Fk1kiZGj4AqwHbp1qxarj6NfsS-_\" alt=\"image.png\"></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> FwCascader <span class=\"keyword\">from</span> <span class=\"string\">'pms_components/packages/FwCascader/FwCascader.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; axios &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@/utils/request'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'FwCascader'</span>,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    FwCascader</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> props = &#123; ...this.$attrs &#125;</span><br><span class=\"line\">    props.axios = axios</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;FwCascader props=&#123; props &#125; on=&#123; <span class=\"keyword\">this</span>.$listeners &#125; scopedSlots=&#123; <span class=\"keyword\">this</span>.$scopedSlots &#125;&gt;</span><br><span class=\"line\">        &#123; <span class=\"built_in\">Object</span>.keys(<span class=\"keyword\">this</span>.$slots).map(<span class=\"function\"><span class=\"params\">name</span> =&gt;</span> (&lt;template slot=&#123;name&#125;&gt;&#123;this.$slots[name]&#125;&lt;/template&gt;)) &#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/FwCascader&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里主要作用是把项目的request方法传进组件，使用具体项目的请求方式。</p>\n<p>LocationCascader  组件–位置选择组件</p>\n<p>UnionLocationCascade  组件–组合位置选择</p>\n<p>RegionCascader  组件–地区选择组件</p>\n<p>upload  组件–上传</p>\n<p>FwCascader  组件–房屋选择</p>\n</blockquote>\n<h2 id=\"组件打包\"><a href=\"#组件打包\" class=\"headerlink\" title=\"组件打包\"></a>组件打包</h2><blockquote>\n<p>基础组件会打包，业务组件不打包，业务组件打包时间会很长也是个问题，通过区别基础组件和业务组件的使用方式， 可以避免这一情况</p>\n</blockquote>\n<blockquote>\n<p>打开pms_components项目</p>\n<p>控制台输入npm login,输入帐号和密码即可登录</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run uv <span class=\"comment\"># 增加版本号</span></span><br><span class=\"line\"></span><br><span class=\"line\">npm run lib:cli <span class=\"comment\"># 对项目进行打包</span></span><br><span class=\"line\"></span><br><span class=\"line\">npm publish <span class=\"comment\"># 将包发布到npm仓库</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"新组件开发及使用\"><a href=\"#新组件开发及使用\" class=\"headerlink\" title=\"新组件开发及使用\"></a>新组件开发及使用</h2><blockquote>\n<p>新组件开发完，在fpms_components中增加示例代码</p>\n<p>同时确保在项目fpms_app_template中使用没问题的情况下再发布,可以直接吧libs目录放在fpms_app_template的node_modules对应的包中测试</p>\n</blockquote>\n"},{"title":"当我们遇到一个需求不明确，高度定制化的需求的时候～","toc":false,"date":"2021-05-25T03:10:48.000Z","_content":"\n1. 这个时候任何框架和模式都不好使，因为你不知道下一个需求是否会推翻前边所有的设计，这个时候我们要做的是使用最基本、高度扩展性的架构和思路来进行开发，避免因为需求变更导致的大量重复性工作。\n\n2. 技术最终是服务于业务的，没有最好的技术，只有最合适的技术。\n\n3. 剩下的是培养业务感觉和其他～","source":"_posts/当我们遇到一个需求不明确，高度定制化的需求的时候～.md","raw":"---\ntitle: 当我们遇到一个需求不明确，高度定制化的需求的时候～\ntags:\n  - 知识点备忘\n  - 意义\ncategories:\n  - Web开发\ntoc: false\ndate: 2021-05-25 11:10:48\n---\n\n1. 这个时候任何框架和模式都不好使，因为你不知道下一个需求是否会推翻前边所有的设计，这个时候我们要做的是使用最基本、高度扩展性的架构和思路来进行开发，避免因为需求变更导致的大量重复性工作。\n\n2. 技术最终是服务于业务的，没有最好的技术，只有最合适的技术。\n\n3. 剩下的是培养业务感觉和其他～","slug":"当我们遇到一个需求不明确，高度定制化的需求的时候～","published":1,"updated":"2021-05-25T03:11:41.278Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckp3gplxw0000zgs6b2xl4uv5","content":"<ol>\n<li><p>这个时候任何框架和模式都不好使，因为你不知道下一个需求是否会推翻前边所有的设计，这个时候我们要做的是使用最基本、高度扩展性的架构和思路来进行开发，避免因为需求变更导致的大量重复性工作。</p>\n</li>\n<li><p>技术最终是服务于业务的，没有最好的技术，只有最合适的技术。</p>\n</li>\n<li><p>剩下的是培养业务感觉和其他～</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>这个时候任何框架和模式都不好使，因为你不知道下一个需求是否会推翻前边所有的设计，这个时候我们要做的是使用最基本、高度扩展性的架构和思路来进行开发，避免因为需求变更导致的大量重复性工作。</p>\n</li>\n<li><p>技术最终是服务于业务的，没有最好的技术，只有最合适的技术。</p>\n</li>\n<li><p>剩下的是培养业务感觉和其他～</p>\n</li>\n</ol>\n"},{"title":"vue单页面项目返回上一页无效，链接变化了，但是页面没有变化","toc":false,"date":"2021-06-19T14:55:40.000Z","_content":"\n在最近的项目中，返回上一页没有效果，经过好久的排查才发现问题，是路由守卫写法不规范导致。\n\n \n\n在项目中用路由守卫做了登录拦截，没登录的跳转到登录页面。页面跳转和拦截都没问题，但是返回上一页就不行了，也没有报错。\n\n代码贴上来\n\n```javascript\nrouter.beforeEach((to, from, next) => {  \n  if (to.meta.loginCheck) {     //登录判断，如果登录了则正常跳转，如没有登录，则先登录\n    let gesToken =localStorage.getItem('gesToken');\n    if(gesToken){ \n      next();\n    } else{\n      router.replace({path:'/login'});\n　　　 next();　　//这行是重点，bug的原因就在这\n}; } else { next(); }; });\n```\n\n本来以为next()的作用就是下一步跳转页面，后来发现，不能正常返回上一页，就是因为我使用完router.replace()之后，没有再使用next();\n\nnext()无论什么情况都是必须写的！！","source":"_posts/vue单页面项目返回上一页无效，链接变化了，但是页面没有变化.md","raw":"---\ntitle: vue单页面项目返回上一页无效，链接变化了，但是页面没有变化\ntags:\n  - 知识点备忘\n  - Web开发\n  - 微前端\ncategories:\n  - Web开发\ntoc: false\ndate: 2021-06-19 22:55:40\n---\n\n在最近的项目中，返回上一页没有效果，经过好久的排查才发现问题，是路由守卫写法不规范导致。\n\n \n\n在项目中用路由守卫做了登录拦截，没登录的跳转到登录页面。页面跳转和拦截都没问题，但是返回上一页就不行了，也没有报错。\n\n代码贴上来\n\n```javascript\nrouter.beforeEach((to, from, next) => {  \n  if (to.meta.loginCheck) {     //登录判断，如果登录了则正常跳转，如没有登录，则先登录\n    let gesToken =localStorage.getItem('gesToken');\n    if(gesToken){ \n      next();\n    } else{\n      router.replace({path:'/login'});\n　　　 next();　　//这行是重点，bug的原因就在这\n}; } else { next(); }; });\n```\n\n本来以为next()的作用就是下一步跳转页面，后来发现，不能正常返回上一页，就是因为我使用完router.replace()之后，没有再使用next();\n\nnext()无论什么情况都是必须写的！！","slug":"vue单页面项目返回上一页无效，链接变化了，但是页面没有变化","published":1,"updated":"2021-06-19T14:57:13.825Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckq3vx9zk0000crs6u27arpf7","content":"<p>在最近的项目中，返回上一页没有效果，经过好久的排查才发现问题，是路由守卫写法不规范导致。</p>\n<p>在项目中用路由守卫做了登录拦截，没登录的跳转到登录页面。页面跳转和拦截都没问题，但是返回上一页就不行了，也没有报错。</p>\n<p>代码贴上来</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (to.meta.loginCheck) &#123;     <span class=\"comment\">//登录判断，如果登录了则正常跳转，如没有登录，则先登录</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> gesToken =localStorage.getItem(<span class=\"string\">'gesToken'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(gesToken)&#123; </span><br><span class=\"line\">      next();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      router.replace(&#123;<span class=\"attr\">path</span>:<span class=\"string\">'/login'</span>&#125;);</span><br><span class=\"line\">　　　 next();　　<span class=\"comment\">//这行是重点，bug的原因就在这</span></span><br><span class=\"line\">&#125;; &#125; <span class=\"keyword\">else</span> &#123; next(); &#125;; &#125;);</span><br></pre></td></tr></table></figure>\n<p>本来以为next()的作用就是下一步跳转页面，后来发现，不能正常返回上一页，就是因为我使用完router.replace()之后，没有再使用next();</p>\n<p>next()无论什么情况都是必须写的！！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在最近的项目中，返回上一页没有效果，经过好久的排查才发现问题，是路由守卫写法不规范导致。</p>\n<p>在项目中用路由守卫做了登录拦截，没登录的跳转到登录页面。页面跳转和拦截都没问题，但是返回上一页就不行了，也没有报错。</p>\n<p>代码贴上来</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (to.meta.loginCheck) &#123;     <span class=\"comment\">//登录判断，如果登录了则正常跳转，如没有登录，则先登录</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> gesToken =localStorage.getItem(<span class=\"string\">'gesToken'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(gesToken)&#123; </span><br><span class=\"line\">      next();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      router.replace(&#123;<span class=\"attr\">path</span>:<span class=\"string\">'/login'</span>&#125;);</span><br><span class=\"line\">　　　 next();　　<span class=\"comment\">//这行是重点，bug的原因就在这</span></span><br><span class=\"line\">&#125;; &#125; <span class=\"keyword\">else</span> &#123; next(); &#125;; &#125;);</span><br></pre></td></tr></table></figure>\n<p>本来以为next()的作用就是下一步跳转页面，后来发现，不能正常返回上一页，就是因为我使用完router.replace()之后，没有再使用next();</p>\n<p>next()无论什么情况都是必须写的！！</p>\n"},{"title":"useless-files-webpack-plugin删除多余项目文件","originContent":"","toc":false,"date":"2021-07-01T03:55:09.000Z","_content":"\n随着项目开发的进行会经历一个混乱到整齐划一的过程，这个过程中会产生一系列冗余代码，这时候通过useless-files-webpack-plugin这个插件，可以帮助我们删除项目中无用的文件；\n\n\n> 大多数项目随着时间的推移,经常会摒弃掉一部分功能, 但大多数只是入口关闭, 或注释掉功能代码块, 依赖的文件如果没删除掉,项目其他成员一般不会去处>理. 在日常开发中, 通过webpack 生成的 stats 文件实现了去除多余文件的插件useless-files-webpack-plugin\n\n> 插件用法如下:\n\n```javascript\nconst UselessFile = require('useless-files-webpack-plugin')\n \nplugins: [\n  new UselessFile({\n    root: './src', // 项目目录\n    out?: './fileList.json', // 输出文件列表\n    out?: (files) => deal(files), // 或者回调处理\n    clean?: false // 删除文件,\n    exclude?: path // 排除文件列表, 格式为文件路径数组\n  })\n]\n```\n\n> 转载于:https://juejin.im/post/5ae8930751882567244dc72f","source":"_posts/useless-files-webpack-plugin删除多余项目文件.md","raw":"---\ntitle: useless-files-webpack-plugin删除多余项目文件\ntags:\n  - 知识点备忘\n  - Web开发\noriginContent: ''\ncategories:\n  - Web开发\ntoc: false\ndate: 2021-07-01 11:55:09\n---\n\n随着项目开发的进行会经历一个混乱到整齐划一的过程，这个过程中会产生一系列冗余代码，这时候通过useless-files-webpack-plugin这个插件，可以帮助我们删除项目中无用的文件；\n\n\n> 大多数项目随着时间的推移,经常会摒弃掉一部分功能, 但大多数只是入口关闭, 或注释掉功能代码块, 依赖的文件如果没删除掉,项目其他成员一般不会去处>理. 在日常开发中, 通过webpack 生成的 stats 文件实现了去除多余文件的插件useless-files-webpack-plugin\n\n> 插件用法如下:\n\n```javascript\nconst UselessFile = require('useless-files-webpack-plugin')\n \nplugins: [\n  new UselessFile({\n    root: './src', // 项目目录\n    out?: './fileList.json', // 输出文件列表\n    out?: (files) => deal(files), // 或者回调处理\n    clean?: false // 删除文件,\n    exclude?: path // 排除文件列表, 格式为文件路径数组\n  })\n]\n```\n\n> 转载于:https://juejin.im/post/5ae8930751882567244dc72f","slug":"useless-files-webpack-plugin删除多余项目文件","published":1,"updated":"2021-07-01T03:55:09.152Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqkdk1rf0000hafyy2c7aj9q","content":"<p>随着项目开发的进行会经历一个混乱到整齐划一的过程，这个过程中会产生一系列冗余代码，这时候通过useless-files-webpack-plugin这个插件，可以帮助我们删除项目中无用的文件；</p>\n<blockquote>\n<p>大多数项目随着时间的推移,经常会摒弃掉一部分功能, 但大多数只是入口关闭, 或注释掉功能代码块, 依赖的文件如果没删除掉,项目其他成员一般不会去处&gt;理. 在日常开发中, 通过webpack 生成的 stats 文件实现了去除多余文件的插件useless-files-webpack-plugin</p>\n</blockquote>\n<blockquote>\n<p>插件用法如下:</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> UselessFile = <span class=\"built_in\">require</span>(<span class=\"string\">'useless-files-webpack-plugin'</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> UselessFile(&#123;</span><br><span class=\"line\">    root: <span class=\"string\">'./src'</span>, <span class=\"comment\">// 项目目录</span></span><br><span class=\"line\">    out?: <span class=\"string\">'./fileList.json'</span>, <span class=\"comment\">// 输出文件列表</span></span><br><span class=\"line\">    out?: <span class=\"function\">(<span class=\"params\">files</span>) =&gt;</span> deal(files), <span class=\"comment\">// 或者回调处理</span></span><br><span class=\"line\">    clean?: <span class=\"literal\">false</span> <span class=\"comment\">// 删除文件,</span></span><br><span class=\"line\">    exclude?: path <span class=\"comment\">// 排除文件列表, 格式为文件路径数组</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>转载于:<a href=\"https://juejin.im/post/5ae8930751882567244dc72f\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5ae8930751882567244dc72f</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>随着项目开发的进行会经历一个混乱到整齐划一的过程，这个过程中会产生一系列冗余代码，这时候通过useless-files-webpack-plugin这个插件，可以帮助我们删除项目中无用的文件；</p>\n<blockquote>\n<p>大多数项目随着时间的推移,经常会摒弃掉一部分功能, 但大多数只是入口关闭, 或注释掉功能代码块, 依赖的文件如果没删除掉,项目其他成员一般不会去处&gt;理. 在日常开发中, 通过webpack 生成的 stats 文件实现了去除多余文件的插件useless-files-webpack-plugin</p>\n</blockquote>\n<blockquote>\n<p>插件用法如下:</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> UselessFile = <span class=\"built_in\">require</span>(<span class=\"string\">'useless-files-webpack-plugin'</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> UselessFile(&#123;</span><br><span class=\"line\">    root: <span class=\"string\">'./src'</span>, <span class=\"comment\">// 项目目录</span></span><br><span class=\"line\">    out?: <span class=\"string\">'./fileList.json'</span>, <span class=\"comment\">// 输出文件列表</span></span><br><span class=\"line\">    out?: <span class=\"function\">(<span class=\"params\">files</span>) =&gt;</span> deal(files), <span class=\"comment\">// 或者回调处理</span></span><br><span class=\"line\">    clean?: <span class=\"literal\">false</span> <span class=\"comment\">// 删除文件,</span></span><br><span class=\"line\">    exclude?: path <span class=\"comment\">// 排除文件列表, 格式为文件路径数组</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>转载于:<a href=\"https://juejin.im/post/5ae8930751882567244dc72f\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5ae8930751882567244dc72f</a></p>\n</blockquote>\n"},{"title":"如何通过容器创建镜像,创建符合需求的打包镜像","toc":false,"date":"2021-07-14T06:06:08.000Z","_content":"\n> docker的基本操作不做赘述，随用随查即可，常用到的是如何创建打包镜像，这个镜像是用来打包的，可能需要调整镜像的一些配置：\n\n\n> commit： 提交一个具有新配置的容器成为镜像，后面跟容器的name 或者容器Id ，最后是生成新镜像的名字\n![image.png](http://blogimage.houjiyi.com/Fjuw_k4eD8_zW-EGJOnCjt_c8wof)\n\n                \n```bash\ndocker commit trusting_kare ccr.ccs.tencentyun.com/aiforward_saas_fe/fe_fpms_build:202107141358\n```\n\n> 打包成容器以后，就可以推送到镜像仓库：\n\n```bash\ndocker push ccr.ccs.tencentyun.com/aiforward_saas_fe/fe_fpms_build:202107141358\n```","source":"_posts/如何通过容器创建镜像-创建符合需求的打包镜像.md","raw":"---\ntitle: '如何通过容器创建镜像,创建符合需求的打包镜像'\ntags:\n  - docker\ncategories:\n  - Web开发\ntoc: false\ndate: 2021-07-14 14:06:08\n---\n\n> docker的基本操作不做赘述，随用随查即可，常用到的是如何创建打包镜像，这个镜像是用来打包的，可能需要调整镜像的一些配置：\n\n\n> commit： 提交一个具有新配置的容器成为镜像，后面跟容器的name 或者容器Id ，最后是生成新镜像的名字\n![image.png](http://blogimage.houjiyi.com/Fjuw_k4eD8_zW-EGJOnCjt_c8wof)\n\n                \n```bash\ndocker commit trusting_kare ccr.ccs.tencentyun.com/aiforward_saas_fe/fe_fpms_build:202107141358\n```\n\n> 打包成容器以后，就可以推送到镜像仓库：\n\n```bash\ndocker push ccr.ccs.tencentyun.com/aiforward_saas_fe/fe_fpms_build:202107141358\n```","slug":"如何通过容器创建镜像-创建符合需求的打包镜像","published":1,"updated":"2021-07-14T06:19:35.351Z","_id":"ckr32yjog0000efs6zkbbcfya","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>docker的基本操作不做赘述，随用随查即可，常用到的是如何创建打包镜像，这个镜像是用来打包的，可能需要调整镜像的一些配置：</p>\n</blockquote>\n<blockquote>\n<p>commit： 提交一个具有新配置的容器成为镜像，后面跟容器的name 或者容器Id ，最后是生成新镜像的名字<br><img src=\"http://blogimage.houjiyi.com/Fjuw_k4eD8_zW-EGJOnCjt_c8wof\" alt=\"image.png\"></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit trusting_kare ccr.ccs.tencentyun.com/aiforward_saas_fe/fe_fpms_build:202107141358</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>打包成容器以后，就可以推送到镜像仓库：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker push ccr.ccs.tencentyun.com/aiforward_saas_fe/fe_fpms_build:202107141358</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>docker的基本操作不做赘述，随用随查即可，常用到的是如何创建打包镜像，这个镜像是用来打包的，可能需要调整镜像的一些配置：</p>\n</blockquote>\n<blockquote>\n<p>commit： 提交一个具有新配置的容器成为镜像，后面跟容器的name 或者容器Id ，最后是生成新镜像的名字<br><img src=\"http://blogimage.houjiyi.com/Fjuw_k4eD8_zW-EGJOnCjt_c8wof\" alt=\"image.png\"></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit trusting_kare ccr.ccs.tencentyun.com/aiforward_saas_fe/fe_fpms_build:202107141358</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>打包成容器以后，就可以推送到镜像仓库：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker push ccr.ccs.tencentyun.com/aiforward_saas_fe/fe_fpms_build:202107141358</span><br></pre></td></tr></table></figure>"},{"title":"老板的话～可以被奉为经典的话","originContent":"","toc":false,"date":"2021-07-14T06:19:14.000Z","_content":"\n> 中国共产党走过了100年 我作为一名党员的时间是19年 在校园时代初入党的我稚气未脱 入党那时给我的感觉更多的是一种青年对比同龄人的自豪 入党让我又多了一些责任感 我成长在军人家庭 性格直率 爱憎分明 直言不讳 我喜欢的工作环境也是希望人人能够坦诚相待 关心彼此 \n\n> 那么多人拥护共产党 党最值得自豪的最成功地方就是让大多数普通党员保持了奉献服务的本色和初心 并且因此产生自豪感荣誉感 感染别人的上进心  党领导集体的另一个优点就是学习 能看到不足 能快速学习 能快速适应 不断进步\n\n> 党走过一些弯路 也有过灰暗的错误经历 最后实践出来一句话 实事求是 遇到事情 刨根问底弄清楚 不道听途说 不轻言轻信 相信每一个人 也直面每个问题 最终能够取得安心\n\n> 己欲立而立人 己欲达而达人 只有自己活明白 觉得自己明白 觉得自己正确 对别人的是非保持漠不关心 或者瞧不起别人就施以鄙视 我觉得都是一样的自私 因为不好的情绪和积极的情绪一样 都会传染 表达了负面情绪 并不会让这个世界变好 也许自己也不会因此舒服多久 正常人的内心都是很柔软的 \n最近公司人多了起来 我也确实听到了一些文化反馈 同件事 我问不同的人 反馈的看法不同 这是挺可怕的 我挺希望相关的同学能够多沟通 而不是彼此不沟通 但是心生疑虑 觉得提出来又恶心 如果你放在心里不舒服 何不把他讲出来 弄明白\n\n> 我前阵子发了一个运营中心成立的邮件 因为在出差途中 我用手机排版 但是忽略了很多人用pc收件 于是出现了落款和换行的不整齐 我发出去后 马上就有人提醒我 跟我说以后要注意 我觉得这就挺好 彼此关心 互相提醒\n\n> 但如果我们都觉得说了也白说 那彼此都不会变好了 \n\n> 每个人做事一定有原因 或者潜意识 如果造成别人不理解 不舒服 自己有责任了解 不舒服的对方也可以问出来你为什么要这样说这样做 问了 可能彼此就多一些了解 我曾经有很多不自觉不自知的缺点 都是在工作中一点点被指出来 我才意识到改进 我们各自的缺点 总是被爱的人纵容 但长久的爱不仅仅是忍耐 还有启示 叫醒他人的迷途 也是爱\n\n> 有话不直说绕弯子 旁敲侧击打听 对没有过错的人扣帽子 拿公司或者其他领导的话上纲上线的施压 用一些所谓的招数给别人使绊子 这些都是很差劲的行为 对于这些行为 在我这里不能包容 \n\n> 有疑问直接问 觉得不明白跟当事人或者负责人指出来 一件事情推动到底 推不动了可以坚持 比如去找彼此的上级讲明原因取得共识 不能被说服的事发起会议讨论 给我或者合伙人邮件或者微信 我们有许多方法让彼此晚上睡觉踏实 不要成为他人的毒药 尽可能温暖善良\n党的一百年 酸甜苦辣都尝遍 这背后有许多付出和牺牲 有今天的发展成就和信心 也不是任何一两个人的单打独斗 这是集体主义的胜利 不需要每个人每天都是英雄 但是大家都尊重英雄 做好自己 都心向正念 日常累积善举 危难之际有人挺身而出而不会四顾无人…\n总而言之 希望同行的同学 能够坚持善良 敢为 有所为","source":"_posts/老板的话～可以被奉为经典的话.md","raw":"---\ntitle: 老板的话～可以被奉为经典的话\ntags:\n  - 意义\noriginContent: ''\ncategories:\n  - 项目总结\ntoc: false\ndate: 2021-07-14 14:19:14\n---\n\n> 中国共产党走过了100年 我作为一名党员的时间是19年 在校园时代初入党的我稚气未脱 入党那时给我的感觉更多的是一种青年对比同龄人的自豪 入党让我又多了一些责任感 我成长在军人家庭 性格直率 爱憎分明 直言不讳 我喜欢的工作环境也是希望人人能够坦诚相待 关心彼此 \n\n> 那么多人拥护共产党 党最值得自豪的最成功地方就是让大多数普通党员保持了奉献服务的本色和初心 并且因此产生自豪感荣誉感 感染别人的上进心  党领导集体的另一个优点就是学习 能看到不足 能快速学习 能快速适应 不断进步\n\n> 党走过一些弯路 也有过灰暗的错误经历 最后实践出来一句话 实事求是 遇到事情 刨根问底弄清楚 不道听途说 不轻言轻信 相信每一个人 也直面每个问题 最终能够取得安心\n\n> 己欲立而立人 己欲达而达人 只有自己活明白 觉得自己明白 觉得自己正确 对别人的是非保持漠不关心 或者瞧不起别人就施以鄙视 我觉得都是一样的自私 因为不好的情绪和积极的情绪一样 都会传染 表达了负面情绪 并不会让这个世界变好 也许自己也不会因此舒服多久 正常人的内心都是很柔软的 \n最近公司人多了起来 我也确实听到了一些文化反馈 同件事 我问不同的人 反馈的看法不同 这是挺可怕的 我挺希望相关的同学能够多沟通 而不是彼此不沟通 但是心生疑虑 觉得提出来又恶心 如果你放在心里不舒服 何不把他讲出来 弄明白\n\n> 我前阵子发了一个运营中心成立的邮件 因为在出差途中 我用手机排版 但是忽略了很多人用pc收件 于是出现了落款和换行的不整齐 我发出去后 马上就有人提醒我 跟我说以后要注意 我觉得这就挺好 彼此关心 互相提醒\n\n> 但如果我们都觉得说了也白说 那彼此都不会变好了 \n\n> 每个人做事一定有原因 或者潜意识 如果造成别人不理解 不舒服 自己有责任了解 不舒服的对方也可以问出来你为什么要这样说这样做 问了 可能彼此就多一些了解 我曾经有很多不自觉不自知的缺点 都是在工作中一点点被指出来 我才意识到改进 我们各自的缺点 总是被爱的人纵容 但长久的爱不仅仅是忍耐 还有启示 叫醒他人的迷途 也是爱\n\n> 有话不直说绕弯子 旁敲侧击打听 对没有过错的人扣帽子 拿公司或者其他领导的话上纲上线的施压 用一些所谓的招数给别人使绊子 这些都是很差劲的行为 对于这些行为 在我这里不能包容 \n\n> 有疑问直接问 觉得不明白跟当事人或者负责人指出来 一件事情推动到底 推不动了可以坚持 比如去找彼此的上级讲明原因取得共识 不能被说服的事发起会议讨论 给我或者合伙人邮件或者微信 我们有许多方法让彼此晚上睡觉踏实 不要成为他人的毒药 尽可能温暖善良\n党的一百年 酸甜苦辣都尝遍 这背后有许多付出和牺牲 有今天的发展成就和信心 也不是任何一两个人的单打独斗 这是集体主义的胜利 不需要每个人每天都是英雄 但是大家都尊重英雄 做好自己 都心向正念 日常累积善举 危难之际有人挺身而出而不会四顾无人…\n总而言之 希望同行的同学 能够坚持善良 敢为 有所为","slug":"老板的话～可以被奉为经典的话","published":1,"updated":"2021-07-14T06:19:14.268Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr33fv3u0000tqs6k2wuiara","content":"<blockquote>\n<p>中国共产党走过了100年 我作为一名党员的时间是19年 在校园时代初入党的我稚气未脱 入党那时给我的感觉更多的是一种青年对比同龄人的自豪 入党让我又多了一些责任感 我成长在军人家庭 性格直率 爱憎分明 直言不讳 我喜欢的工作环境也是希望人人能够坦诚相待 关心彼此 </p>\n</blockquote>\n<blockquote>\n<p>那么多人拥护共产党 党最值得自豪的最成功地方就是让大多数普通党员保持了奉献服务的本色和初心 并且因此产生自豪感荣誉感 感染别人的上进心  党领导集体的另一个优点就是学习 能看到不足 能快速学习 能快速适应 不断进步</p>\n</blockquote>\n<blockquote>\n<p>党走过一些弯路 也有过灰暗的错误经历 最后实践出来一句话 实事求是 遇到事情 刨根问底弄清楚 不道听途说 不轻言轻信 相信每一个人 也直面每个问题 最终能够取得安心</p>\n</blockquote>\n<blockquote>\n<p>己欲立而立人 己欲达而达人 只有自己活明白 觉得自己明白 觉得自己正确 对别人的是非保持漠不关心 或者瞧不起别人就施以鄙视 我觉得都是一样的自私 因为不好的情绪和积极的情绪一样 都会传染 表达了负面情绪 并不会让这个世界变好 也许自己也不会因此舒服多久 正常人的内心都是很柔软的<br>最近公司人多了起来 我也确实听到了一些文化反馈 同件事 我问不同的人 反馈的看法不同 这是挺可怕的 我挺希望相关的同学能够多沟通 而不是彼此不沟通 但是心生疑虑 觉得提出来又恶心 如果你放在心里不舒服 何不把他讲出来 弄明白</p>\n</blockquote>\n<blockquote>\n<p>我前阵子发了一个运营中心成立的邮件 因为在出差途中 我用手机排版 但是忽略了很多人用pc收件 于是出现了落款和换行的不整齐 我发出去后 马上就有人提醒我 跟我说以后要注意 我觉得这就挺好 彼此关心 互相提醒</p>\n</blockquote>\n<blockquote>\n<p>但如果我们都觉得说了也白说 那彼此都不会变好了 </p>\n</blockquote>\n<blockquote>\n<p>每个人做事一定有原因 或者潜意识 如果造成别人不理解 不舒服 自己有责任了解 不舒服的对方也可以问出来你为什么要这样说这样做 问了 可能彼此就多一些了解 我曾经有很多不自觉不自知的缺点 都是在工作中一点点被指出来 我才意识到改进 我们各自的缺点 总是被爱的人纵容 但长久的爱不仅仅是忍耐 还有启示 叫醒他人的迷途 也是爱</p>\n</blockquote>\n<blockquote>\n<p>有话不直说绕弯子 旁敲侧击打听 对没有过错的人扣帽子 拿公司或者其他领导的话上纲上线的施压 用一些所谓的招数给别人使绊子 这些都是很差劲的行为 对于这些行为 在我这里不能包容 </p>\n</blockquote>\n<blockquote>\n<p>有疑问直接问 觉得不明白跟当事人或者负责人指出来 一件事情推动到底 推不动了可以坚持 比如去找彼此的上级讲明原因取得共识 不能被说服的事发起会议讨论 给我或者合伙人邮件或者微信 我们有许多方法让彼此晚上睡觉踏实 不要成为他人的毒药 尽可能温暖善良<br>党的一百年 酸甜苦辣都尝遍 这背后有许多付出和牺牲 有今天的发展成就和信心 也不是任何一两个人的单打独斗 这是集体主义的胜利 不需要每个人每天都是英雄 但是大家都尊重英雄 做好自己 都心向正念 日常累积善举 危难之际有人挺身而出而不会四顾无人…<br>总而言之 希望同行的同学 能够坚持善良 敢为 有所为</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>中国共产党走过了100年 我作为一名党员的时间是19年 在校园时代初入党的我稚气未脱 入党那时给我的感觉更多的是一种青年对比同龄人的自豪 入党让我又多了一些责任感 我成长在军人家庭 性格直率 爱憎分明 直言不讳 我喜欢的工作环境也是希望人人能够坦诚相待 关心彼此 </p>\n</blockquote>\n<blockquote>\n<p>那么多人拥护共产党 党最值得自豪的最成功地方就是让大多数普通党员保持了奉献服务的本色和初心 并且因此产生自豪感荣誉感 感染别人的上进心  党领导集体的另一个优点就是学习 能看到不足 能快速学习 能快速适应 不断进步</p>\n</blockquote>\n<blockquote>\n<p>党走过一些弯路 也有过灰暗的错误经历 最后实践出来一句话 实事求是 遇到事情 刨根问底弄清楚 不道听途说 不轻言轻信 相信每一个人 也直面每个问题 最终能够取得安心</p>\n</blockquote>\n<blockquote>\n<p>己欲立而立人 己欲达而达人 只有自己活明白 觉得自己明白 觉得自己正确 对别人的是非保持漠不关心 或者瞧不起别人就施以鄙视 我觉得都是一样的自私 因为不好的情绪和积极的情绪一样 都会传染 表达了负面情绪 并不会让这个世界变好 也许自己也不会因此舒服多久 正常人的内心都是很柔软的<br>最近公司人多了起来 我也确实听到了一些文化反馈 同件事 我问不同的人 反馈的看法不同 这是挺可怕的 我挺希望相关的同学能够多沟通 而不是彼此不沟通 但是心生疑虑 觉得提出来又恶心 如果你放在心里不舒服 何不把他讲出来 弄明白</p>\n</blockquote>\n<blockquote>\n<p>我前阵子发了一个运营中心成立的邮件 因为在出差途中 我用手机排版 但是忽略了很多人用pc收件 于是出现了落款和换行的不整齐 我发出去后 马上就有人提醒我 跟我说以后要注意 我觉得这就挺好 彼此关心 互相提醒</p>\n</blockquote>\n<blockquote>\n<p>但如果我们都觉得说了也白说 那彼此都不会变好了 </p>\n</blockquote>\n<blockquote>\n<p>每个人做事一定有原因 或者潜意识 如果造成别人不理解 不舒服 自己有责任了解 不舒服的对方也可以问出来你为什么要这样说这样做 问了 可能彼此就多一些了解 我曾经有很多不自觉不自知的缺点 都是在工作中一点点被指出来 我才意识到改进 我们各自的缺点 总是被爱的人纵容 但长久的爱不仅仅是忍耐 还有启示 叫醒他人的迷途 也是爱</p>\n</blockquote>\n<blockquote>\n<p>有话不直说绕弯子 旁敲侧击打听 对没有过错的人扣帽子 拿公司或者其他领导的话上纲上线的施压 用一些所谓的招数给别人使绊子 这些都是很差劲的行为 对于这些行为 在我这里不能包容 </p>\n</blockquote>\n<blockquote>\n<p>有疑问直接问 觉得不明白跟当事人或者负责人指出来 一件事情推动到底 推不动了可以坚持 比如去找彼此的上级讲明原因取得共识 不能被说服的事发起会议讨论 给我或者合伙人邮件或者微信 我们有许多方法让彼此晚上睡觉踏实 不要成为他人的毒药 尽可能温暖善良<br>党的一百年 酸甜苦辣都尝遍 这背后有许多付出和牺牲 有今天的发展成就和信心 也不是任何一两个人的单打独斗 这是集体主义的胜利 不需要每个人每天都是英雄 但是大家都尊重英雄 做好自己 都心向正念 日常累积善举 危难之际有人挺身而出而不会四顾无人…<br>总而言之 希望同行的同学 能够坚持善良 敢为 有所为</p>\n</blockquote>\n"},{"title":"开发排期及开发过程的一些思考","originContent":"","toc":false,"date":"2021-09-06T08:35:33.000Z","_content":"\n1. 项目经理评审后，大概知道要做什么，如果没有UEUI则可以直接给出工期，即使有也可以大概根据以往经验给一个大致工期；\n2. 如果有UEUI则需要等UEUI给出后，根据交互复杂度和UI复杂度调整工期；\n3. 根据UEUI给的排期结束时间点，结合自身情况给出准确排期；\n4. 联调的长短与合作的后端同事关系重大，不同的后端合作应适当调整联调的工期；\n5. 结合前后端排期相对靠后的时间点给出联调排期；\n6. 无论项目大小，最好能有思维导图对项目细节进行梳理，这时候主要是梳理产品文档中的逻辑细节，做到不遗漏；\n7. 最后通过项目管理工具（推荐OmniPlan）对项目工作点进行分类安排；\n8. 经过上述步骤以后，则可以按照项目管理工具的计划进行项目开发；\n9. 项目开发过程中需与后端进行沟通，尤其重点环节需要沟通技术方案，避免前后端实现思路不一致的问题；\n10. 前端需要求后端尽快提供接口文档（不需要实现），保证前后端对接思路的一致；\n11. 前端通过本地Mock数据，尽可能保证细节完整，保证后续联调能够节省时间。\n12. 开发过程中保持专注很重要，思考可能产生的任何风险，大部分风险都可以在开发过程中发现、提出并交给相应的人解决；\n13. 对于解决不了的技术问题，通过调整产品的设计思路绕过去也是一种不错的方法；\n14. 不提倡使用晚走和加班的方式来提高产出，需要不断总结和提高个人技能来提高工作效率；\n","source":"_posts/开发排期及开发过程的一些思考.md","raw":"---\ntitle: 开发排期及开发过程的一些思考\ntags:\n  - 知识点备忘\n  - Web开发\noriginContent: ''\ncategories:\n  - Web开发\n  - 项目总结\ntoc: false\ndate: 2021-09-06 16:35:33\n---\n\n1. 项目经理评审后，大概知道要做什么，如果没有UEUI则可以直接给出工期，即使有也可以大概根据以往经验给一个大致工期；\n2. 如果有UEUI则需要等UEUI给出后，根据交互复杂度和UI复杂度调整工期；\n3. 根据UEUI给的排期结束时间点，结合自身情况给出准确排期；\n4. 联调的长短与合作的后端同事关系重大，不同的后端合作应适当调整联调的工期；\n5. 结合前后端排期相对靠后的时间点给出联调排期；\n6. 无论项目大小，最好能有思维导图对项目细节进行梳理，这时候主要是梳理产品文档中的逻辑细节，做到不遗漏；\n7. 最后通过项目管理工具（推荐OmniPlan）对项目工作点进行分类安排；\n8. 经过上述步骤以后，则可以按照项目管理工具的计划进行项目开发；\n9. 项目开发过程中需与后端进行沟通，尤其重点环节需要沟通技术方案，避免前后端实现思路不一致的问题；\n10. 前端需要求后端尽快提供接口文档（不需要实现），保证前后端对接思路的一致；\n11. 前端通过本地Mock数据，尽可能保证细节完整，保证后续联调能够节省时间。\n12. 开发过程中保持专注很重要，思考可能产生的任何风险，大部分风险都可以在开发过程中发现、提出并交给相应的人解决；\n13. 对于解决不了的技术问题，通过调整产品的设计思路绕过去也是一种不错的方法；\n14. 不提倡使用晚走和加班的方式来提高产出，需要不断总结和提高个人技能来提高工作效率；\n","slug":"开发排期及开发过程的一些思考","published":1,"updated":"2021-09-06T08:35:33.385Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt8e2ru20000xybssfcmuhcr","content":"<ol>\n<li>项目经理评审后，大概知道要做什么，如果没有UEUI则可以直接给出工期，即使有也可以大概根据以往经验给一个大致工期；</li>\n<li>如果有UEUI则需要等UEUI给出后，根据交互复杂度和UI复杂度调整工期；</li>\n<li>根据UEUI给的排期结束时间点，结合自身情况给出准确排期；</li>\n<li>联调的长短与合作的后端同事关系重大，不同的后端合作应适当调整联调的工期；</li>\n<li>结合前后端排期相对靠后的时间点给出联调排期；</li>\n<li>无论项目大小，最好能有思维导图对项目细节进行梳理，这时候主要是梳理产品文档中的逻辑细节，做到不遗漏；</li>\n<li>最后通过项目管理工具（推荐OmniPlan）对项目工作点进行分类安排；</li>\n<li>经过上述步骤以后，则可以按照项目管理工具的计划进行项目开发；</li>\n<li>项目开发过程中需与后端进行沟通，尤其重点环节需要沟通技术方案，避免前后端实现思路不一致的问题；</li>\n<li>前端需要求后端尽快提供接口文档（不需要实现），保证前后端对接思路的一致；</li>\n<li>前端通过本地Mock数据，尽可能保证细节完整，保证后续联调能够节省时间。</li>\n<li>开发过程中保持专注很重要，思考可能产生的任何风险，大部分风险都可以在开发过程中发现、提出并交给相应的人解决；</li>\n<li>对于解决不了的技术问题，通过调整产品的设计思路绕过去也是一种不错的方法；</li>\n<li>不提倡使用晚走和加班的方式来提高产出，需要不断总结和提高个人技能来提高工作效率；</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>项目经理评审后，大概知道要做什么，如果没有UEUI则可以直接给出工期，即使有也可以大概根据以往经验给一个大致工期；</li>\n<li>如果有UEUI则需要等UEUI给出后，根据交互复杂度和UI复杂度调整工期；</li>\n<li>根据UEUI给的排期结束时间点，结合自身情况给出准确排期；</li>\n<li>联调的长短与合作的后端同事关系重大，不同的后端合作应适当调整联调的工期；</li>\n<li>结合前后端排期相对靠后的时间点给出联调排期；</li>\n<li>无论项目大小，最好能有思维导图对项目细节进行梳理，这时候主要是梳理产品文档中的逻辑细节，做到不遗漏；</li>\n<li>最后通过项目管理工具（推荐OmniPlan）对项目工作点进行分类安排；</li>\n<li>经过上述步骤以后，则可以按照项目管理工具的计划进行项目开发；</li>\n<li>项目开发过程中需与后端进行沟通，尤其重点环节需要沟通技术方案，避免前后端实现思路不一致的问题；</li>\n<li>前端需要求后端尽快提供接口文档（不需要实现），保证前后端对接思路的一致；</li>\n<li>前端通过本地Mock数据，尽可能保证细节完整，保证后续联调能够节省时间。</li>\n<li>开发过程中保持专注很重要，思考可能产生的任何风险，大部分风险都可以在开发过程中发现、提出并交给相应的人解决；</li>\n<li>对于解决不了的技术问题，通过调整产品的设计思路绕过去也是一种不错的方法；</li>\n<li>不提倡使用晚走和加班的方式来提高产出，需要不断总结和提高个人技能来提高工作效率；</li>\n</ol>\n"},{"title":"Cypress端到端自动化测试学习笔记","originContent":"","toc":false,"date":"2021-09-17T03:46:44.000Z","_content":"\n前言\n一直以来，端到端的测试都是前端开发最头疼的事情。如果没有好的测试工具，一旦需求发生改变，就需要手工测试，费时费力，还会有漏网的 bug。最近接触了一款开箱即用的端到端测试工具——Cypress，真心不错，Cypress可以对在浏览器中运行的任何东西进行快速、简单和可靠的测试。\n\nwindows环境安装\n1.安装node.js\n官网下载地址：\n\nhttps://nodejs.org/en/download/nodejs.org\n\n下载后一路傻瓜式安装，安装完成后，运行cmd，输入node –v查看版本号，然后输入npm -v 出现如下图说明安装成功\n![image.png](https://blogimage.houjiyi.com/Fg2xrY3zEEndo1ypZfjZcoyDQUHf)\n\n2.安装Cypress\n自己本地电脑新建一个目录Ui_test，cd 到目录，执行 npm 指令安装\n\ncd D:\\workspace\\Ui_test\n\nnpm install cypress  --save-dev (默认安装最新版)\n\nnpm install --save-dev cypress@4.5.0 （指定4.5.0版本）\n\n这里博主安装的是4.5.0版本，安装会很慢，耐心等待会。\n\n出现如下说明安装成功了\n![image.png](https://blogimage.houjiyi.com/FkrSmBk8N5LFiuv_l6YylCFGi3ZI)\n\n启动cypress\n首先在D:\\workspace\\UI_test目录下新建一个 package.json 文件配置如下内容\n```bash\n{\n  \"scripts\": {\n    \"cypress:open\": \"cypress open\"\n  }\n}\n```\n现在，您可以在D:\\workspace\\Ui_test目下用如下命令启动\n\nnpm run cypress:open或者npx cypress open\n\n启动成功展示：\n![image.png](https://blogimage.houjiyi.com/Fj-IVIG9QZONZpNZYavqx8zxHDuR)\n\n2.现在我们开始写第一个自动化示例程序：\n官方文档：\n\nhttps://docs.cypress.io/guidesdocs.cypress.io\n\n先说一下cypress的目录结构。cypress共有七个目录，还有一个cypress.json文件\n![image.png](https://blogimage.houjiyi.com/Ft4kgPU-46v5BCH2imu4efP3l4oI)\n\n编写测试case\n脚本实现功能：\n\n1.输入访问地址\n\n2.获取元素\n\n3.输入账号密码\n\n4.登陆\n\n5.断言\n\n在 integration 目录下新建你的工程目录，如demo，下面拿login.js文件为实例\n![image.png](https://blogimage.houjiyi.com/FgMS8UpmF9icCA9QDIQJ5pKnZUA8)\n\ndescribe 声明一个测试用例集\n\nbeforeEach 测试用例前置操作，相当于setup\n\nit声明了一个测试用例\n\ncy.get 定位元素，用css selector定位选择器\n\nshould 断言控件含有内容\n\ncy.visit(“/地址”)\n\ncase编写完切换到项目根目录执行命令npm run cypress:open或者npx cypress open\n![image.png](https://blogimage.houjiyi.com/FrJBEiXzhuuoWF67h7Jyug20xiaW)\n\n运行效果\n![image.png](https://blogimage.houjiyi.com/FgnOmLWCz0CwHNI64o7xjuN-dywa)\n\n生成测试报告\nnpm安装 npm install --save-dev mocha mochawesome mochawesome-merge mochawesome-report-generator\n\n在 cypress.json 设置相关参数：\n```bash\n{\n    \"env\": {\n        \"search\":\"Cypress e2e\"\n    },\n    \"reporter\": \"mochawesome\",\n    \"reporterOptions\": {\n        \"reportDir\": \"cypress/results\",\n        \"overwrite\": false,\n        \"html\": true,\n        \"json\": true\n    }\n}\n```\n执行 npx cypress run或者npm run cypress:open\n\n出现如下图说明执行成功了\n![image.png](https://blogimage.houjiyi.com/FooN1XsXEbVup7f2naYlN6rKAa5g)\n\n生成html测试报告\n![image.png](https://blogimage.houjiyi.com/FvK__kmZnKNn7UKG2M5KUdkR6VPj)\n\n生成xxx.mp4视频\n![image.png](https://blogimage.houjiyi.com/Fu4jcwq_BXgnOAbZbXu9l6kBbjmx)\n\n想转行做自动化测试的朋友们，想追求新技术助力公司成长的朋友们，未来5年弯道超车的机会，也许就在今天！\n\n推荐几个好的学习素材\n\nhttps://github.com/cypress-io/cypressgithub.com\n\nhttps://github.com/cypress-io/cypress-example-recipes/github.com\n\nhttps://github.com/cypress-io/cypress-example-kitchensink/github.com","source":"_posts/Cypress端到端自动化测试学习笔记.md","raw":"---\ntitle: Cypress端到端自动化测试学习笔记\ntags:\n  - Web开发\noriginContent: ''\ncategories:\n  - 自动化测试\ntoc: false\ndate: 2021-09-17 11:46:44\n---\n\n前言\n一直以来，端到端的测试都是前端开发最头疼的事情。如果没有好的测试工具，一旦需求发生改变，就需要手工测试，费时费力，还会有漏网的 bug。最近接触了一款开箱即用的端到端测试工具——Cypress，真心不错，Cypress可以对在浏览器中运行的任何东西进行快速、简单和可靠的测试。\n\nwindows环境安装\n1.安装node.js\n官网下载地址：\n\nhttps://nodejs.org/en/download/nodejs.org\n\n下载后一路傻瓜式安装，安装完成后，运行cmd，输入node –v查看版本号，然后输入npm -v 出现如下图说明安装成功\n![image.png](https://blogimage.houjiyi.com/Fg2xrY3zEEndo1ypZfjZcoyDQUHf)\n\n2.安装Cypress\n自己本地电脑新建一个目录Ui_test，cd 到目录，执行 npm 指令安装\n\ncd D:\\workspace\\Ui_test\n\nnpm install cypress  --save-dev (默认安装最新版)\n\nnpm install --save-dev cypress@4.5.0 （指定4.5.0版本）\n\n这里博主安装的是4.5.0版本，安装会很慢，耐心等待会。\n\n出现如下说明安装成功了\n![image.png](https://blogimage.houjiyi.com/FkrSmBk8N5LFiuv_l6YylCFGi3ZI)\n\n启动cypress\n首先在D:\\workspace\\UI_test目录下新建一个 package.json 文件配置如下内容\n```bash\n{\n  \"scripts\": {\n    \"cypress:open\": \"cypress open\"\n  }\n}\n```\n现在，您可以在D:\\workspace\\Ui_test目下用如下命令启动\n\nnpm run cypress:open或者npx cypress open\n\n启动成功展示：\n![image.png](https://blogimage.houjiyi.com/Fj-IVIG9QZONZpNZYavqx8zxHDuR)\n\n2.现在我们开始写第一个自动化示例程序：\n官方文档：\n\nhttps://docs.cypress.io/guidesdocs.cypress.io\n\n先说一下cypress的目录结构。cypress共有七个目录，还有一个cypress.json文件\n![image.png](https://blogimage.houjiyi.com/Ft4kgPU-46v5BCH2imu4efP3l4oI)\n\n编写测试case\n脚本实现功能：\n\n1.输入访问地址\n\n2.获取元素\n\n3.输入账号密码\n\n4.登陆\n\n5.断言\n\n在 integration 目录下新建你的工程目录，如demo，下面拿login.js文件为实例\n![image.png](https://blogimage.houjiyi.com/FgMS8UpmF9icCA9QDIQJ5pKnZUA8)\n\ndescribe 声明一个测试用例集\n\nbeforeEach 测试用例前置操作，相当于setup\n\nit声明了一个测试用例\n\ncy.get 定位元素，用css selector定位选择器\n\nshould 断言控件含有内容\n\ncy.visit(“/地址”)\n\ncase编写完切换到项目根目录执行命令npm run cypress:open或者npx cypress open\n![image.png](https://blogimage.houjiyi.com/FrJBEiXzhuuoWF67h7Jyug20xiaW)\n\n运行效果\n![image.png](https://blogimage.houjiyi.com/FgnOmLWCz0CwHNI64o7xjuN-dywa)\n\n生成测试报告\nnpm安装 npm install --save-dev mocha mochawesome mochawesome-merge mochawesome-report-generator\n\n在 cypress.json 设置相关参数：\n```bash\n{\n    \"env\": {\n        \"search\":\"Cypress e2e\"\n    },\n    \"reporter\": \"mochawesome\",\n    \"reporterOptions\": {\n        \"reportDir\": \"cypress/results\",\n        \"overwrite\": false,\n        \"html\": true,\n        \"json\": true\n    }\n}\n```\n执行 npx cypress run或者npm run cypress:open\n\n出现如下图说明执行成功了\n![image.png](https://blogimage.houjiyi.com/FooN1XsXEbVup7f2naYlN6rKAa5g)\n\n生成html测试报告\n![image.png](https://blogimage.houjiyi.com/FvK__kmZnKNn7UKG2M5KUdkR6VPj)\n\n生成xxx.mp4视频\n![image.png](https://blogimage.houjiyi.com/Fu4jcwq_BXgnOAbZbXu9l6kBbjmx)\n\n想转行做自动化测试的朋友们，想追求新技术助力公司成长的朋友们，未来5年弯道超车的机会，也许就在今天！\n\n推荐几个好的学习素材\n\nhttps://github.com/cypress-io/cypressgithub.com\n\nhttps://github.com/cypress-io/cypress-example-recipes/github.com\n\nhttps://github.com/cypress-io/cypress-example-kitchensink/github.com","slug":"Cypress端到端自动化测试学习笔记","published":1,"updated":"2021-09-17T03:46:44.502Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktntloct0000vrfy1j9jgges","content":"<p>前言<br>一直以来，端到端的测试都是前端开发最头疼的事情。如果没有好的测试工具，一旦需求发生改变，就需要手工测试，费时费力，还会有漏网的 bug。最近接触了一款开箱即用的端到端测试工具——Cypress，真心不错，Cypress可以对在浏览器中运行的任何东西进行快速、简单和可靠的测试。</p>\n<p>windows环境安装<br>1.安装node.js<br>官网下载地址：</p>\n<p><a href=\"https://nodejs.org/en/download/nodejs.org\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/download/nodejs.org</a></p>\n<p>下载后一路傻瓜式安装，安装完成后，运行cmd，输入node –v查看版本号，然后输入npm -v 出现如下图说明安装成功<br><img src=\"https://blogimage.houjiyi.com/Fg2xrY3zEEndo1ypZfjZcoyDQUHf\" alt=\"image.png\"></p>\n<p>2.安装Cypress<br>自己本地电脑新建一个目录Ui_test，cd 到目录，执行 npm 指令安装</p>\n<p>cd D:\\workspace\\Ui_test</p>\n<p>npm install cypress  –save-dev (默认安装最新版)</p>\n<p>npm install –save-dev <a href=\"mailto:cypress@4.5.0\" target=\"_blank\" rel=\"noopener\">cypress@4.5.0</a> （指定4.5.0版本）</p>\n<p>这里博主安装的是4.5.0版本，安装会很慢，耐心等待会。</p>\n<p>出现如下说明安装成功了<br><img src=\"https://blogimage.houjiyi.com/FkrSmBk8N5LFiuv_l6YylCFGi3ZI\" alt=\"image.png\"></p>\n<p>启动cypress<br>首先在D:\\workspace\\UI_test目录下新建一个 package.json 文件配置如下内容<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"cypress:open\"</span>: <span class=\"string\">\"cypress open\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>现在，您可以在D:\\workspace\\Ui_test目下用如下命令启动</p>\n<p>npm run cypress:open或者npx cypress open</p>\n<p>启动成功展示：<br><img src=\"https://blogimage.houjiyi.com/Fj-IVIG9QZONZpNZYavqx8zxHDuR\" alt=\"image.png\"></p>\n<p>2.现在我们开始写第一个自动化示例程序：<br>官方文档：</p>\n<p><a href=\"https://docs.cypress.io/guidesdocs.cypress.io\" target=\"_blank\" rel=\"noopener\">https://docs.cypress.io/guidesdocs.cypress.io</a></p>\n<p>先说一下cypress的目录结构。cypress共有七个目录，还有一个cypress.json文件<br><img src=\"https://blogimage.houjiyi.com/Ft4kgPU-46v5BCH2imu4efP3l4oI\" alt=\"image.png\"></p>\n<p>编写测试case<br>脚本实现功能：</p>\n<p>1.输入访问地址</p>\n<p>2.获取元素</p>\n<p>3.输入账号密码</p>\n<p>4.登陆</p>\n<p>5.断言</p>\n<p>在 integration 目录下新建你的工程目录，如demo，下面拿login.js文件为实例<br><img src=\"https://blogimage.houjiyi.com/FgMS8UpmF9icCA9QDIQJ5pKnZUA8\" alt=\"image.png\"></p>\n<p>describe 声明一个测试用例集</p>\n<p>beforeEach 测试用例前置操作，相当于setup</p>\n<p>it声明了一个测试用例</p>\n<p>cy.get 定位元素，用css selector定位选择器</p>\n<p>should 断言控件含有内容</p>\n<p>cy.visit(“/地址”)</p>\n<p>case编写完切换到项目根目录执行命令npm run cypress:open或者npx cypress open<br><img src=\"https://blogimage.houjiyi.com/FrJBEiXzhuuoWF67h7Jyug20xiaW\" alt=\"image.png\"></p>\n<p>运行效果<br><img src=\"https://blogimage.houjiyi.com/FgnOmLWCz0CwHNI64o7xjuN-dywa\" alt=\"image.png\"></p>\n<p>生成测试报告<br>npm安装 npm install –save-dev mocha mochawesome mochawesome-merge mochawesome-report-generator</p>\n<p>在 cypress.json 设置相关参数：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"env\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"search\"</span>:<span class=\"string\">\"Cypress e2e\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"reporter\"</span>: <span class=\"string\">\"mochawesome\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"reporterOptions\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"reportDir\"</span>: <span class=\"string\">\"cypress/results\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"overwrite\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"html\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">\"json\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>执行 npx cypress run或者npm run cypress:open</p>\n<p>出现如下图说明执行成功了<br><img src=\"https://blogimage.houjiyi.com/FooN1XsXEbVup7f2naYlN6rKAa5g\" alt=\"image.png\"></p>\n<p>生成html测试报告<br><img src=\"https://blogimage.houjiyi.com/FvK__kmZnKNn7UKG2M5KUdkR6VPj\" alt=\"image.png\"></p>\n<p>生成xxx.mp4视频<br><img src=\"https://blogimage.houjiyi.com/Fu4jcwq_BXgnOAbZbXu9l6kBbjmx\" alt=\"image.png\"></p>\n<p>想转行做自动化测试的朋友们，想追求新技术助力公司成长的朋友们，未来5年弯道超车的机会，也许就在今天！</p>\n<p>推荐几个好的学习素材</p>\n<p><a href=\"https://github.com/cypress-io/cypressgithub.com\" target=\"_blank\" rel=\"noopener\">https://github.com/cypress-io/cypressgithub.com</a></p>\n<p><a href=\"https://github.com/cypress-io/cypress-example-recipes/github.com\" target=\"_blank\" rel=\"noopener\">https://github.com/cypress-io/cypress-example-recipes/github.com</a></p>\n<p><a href=\"https://github.com/cypress-io/cypress-example-kitchensink/github.com\" target=\"_blank\" rel=\"noopener\">https://github.com/cypress-io/cypress-example-kitchensink/github.com</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>前言<br>一直以来，端到端的测试都是前端开发最头疼的事情。如果没有好的测试工具，一旦需求发生改变，就需要手工测试，费时费力，还会有漏网的 bug。最近接触了一款开箱即用的端到端测试工具——Cypress，真心不错，Cypress可以对在浏览器中运行的任何东西进行快速、简单和可靠的测试。</p>\n<p>windows环境安装<br>1.安装node.js<br>官网下载地址：</p>\n<p><a href=\"https://nodejs.org/en/download/nodejs.org\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/download/nodejs.org</a></p>\n<p>下载后一路傻瓜式安装，安装完成后，运行cmd，输入node –v查看版本号，然后输入npm -v 出现如下图说明安装成功<br><img src=\"https://blogimage.houjiyi.com/Fg2xrY3zEEndo1ypZfjZcoyDQUHf\" alt=\"image.png\"></p>\n<p>2.安装Cypress<br>自己本地电脑新建一个目录Ui_test，cd 到目录，执行 npm 指令安装</p>\n<p>cd D:\\workspace\\Ui_test</p>\n<p>npm install cypress  –save-dev (默认安装最新版)</p>\n<p>npm install –save-dev <a href=\"mailto:cypress@4.5.0\" target=\"_blank\" rel=\"noopener\">cypress@4.5.0</a> （指定4.5.0版本）</p>\n<p>这里博主安装的是4.5.0版本，安装会很慢，耐心等待会。</p>\n<p>出现如下说明安装成功了<br><img src=\"https://blogimage.houjiyi.com/FkrSmBk8N5LFiuv_l6YylCFGi3ZI\" alt=\"image.png\"></p>\n<p>启动cypress<br>首先在D:\\workspace\\UI_test目录下新建一个 package.json 文件配置如下内容<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"cypress:open\"</span>: <span class=\"string\">\"cypress open\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>现在，您可以在D:\\workspace\\Ui_test目下用如下命令启动</p>\n<p>npm run cypress:open或者npx cypress open</p>\n<p>启动成功展示：<br><img src=\"https://blogimage.houjiyi.com/Fj-IVIG9QZONZpNZYavqx8zxHDuR\" alt=\"image.png\"></p>\n<p>2.现在我们开始写第一个自动化示例程序：<br>官方文档：</p>\n<p><a href=\"https://docs.cypress.io/guidesdocs.cypress.io\" target=\"_blank\" rel=\"noopener\">https://docs.cypress.io/guidesdocs.cypress.io</a></p>\n<p>先说一下cypress的目录结构。cypress共有七个目录，还有一个cypress.json文件<br><img src=\"https://blogimage.houjiyi.com/Ft4kgPU-46v5BCH2imu4efP3l4oI\" alt=\"image.png\"></p>\n<p>编写测试case<br>脚本实现功能：</p>\n<p>1.输入访问地址</p>\n<p>2.获取元素</p>\n<p>3.输入账号密码</p>\n<p>4.登陆</p>\n<p>5.断言</p>\n<p>在 integration 目录下新建你的工程目录，如demo，下面拿login.js文件为实例<br><img src=\"https://blogimage.houjiyi.com/FgMS8UpmF9icCA9QDIQJ5pKnZUA8\" alt=\"image.png\"></p>\n<p>describe 声明一个测试用例集</p>\n<p>beforeEach 测试用例前置操作，相当于setup</p>\n<p>it声明了一个测试用例</p>\n<p>cy.get 定位元素，用css selector定位选择器</p>\n<p>should 断言控件含有内容</p>\n<p>cy.visit(“/地址”)</p>\n<p>case编写完切换到项目根目录执行命令npm run cypress:open或者npx cypress open<br><img src=\"https://blogimage.houjiyi.com/FrJBEiXzhuuoWF67h7Jyug20xiaW\" alt=\"image.png\"></p>\n<p>运行效果<br><img src=\"https://blogimage.houjiyi.com/FgnOmLWCz0CwHNI64o7xjuN-dywa\" alt=\"image.png\"></p>\n<p>生成测试报告<br>npm安装 npm install –save-dev mocha mochawesome mochawesome-merge mochawesome-report-generator</p>\n<p>在 cypress.json 设置相关参数：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"env\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"search\"</span>:<span class=\"string\">\"Cypress e2e\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"reporter\"</span>: <span class=\"string\">\"mochawesome\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"reporterOptions\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"reportDir\"</span>: <span class=\"string\">\"cypress/results\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"overwrite\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"html\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">\"json\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>执行 npx cypress run或者npm run cypress:open</p>\n<p>出现如下图说明执行成功了<br><img src=\"https://blogimage.houjiyi.com/FooN1XsXEbVup7f2naYlN6rKAa5g\" alt=\"image.png\"></p>\n<p>生成html测试报告<br><img src=\"https://blogimage.houjiyi.com/FvK__kmZnKNn7UKG2M5KUdkR6VPj\" alt=\"image.png\"></p>\n<p>生成xxx.mp4视频<br><img src=\"https://blogimage.houjiyi.com/Fu4jcwq_BXgnOAbZbXu9l6kBbjmx\" alt=\"image.png\"></p>\n<p>想转行做自动化测试的朋友们，想追求新技术助力公司成长的朋友们，未来5年弯道超车的机会，也许就在今天！</p>\n<p>推荐几个好的学习素材</p>\n<p><a href=\"https://github.com/cypress-io/cypressgithub.com\" target=\"_blank\" rel=\"noopener\">https://github.com/cypress-io/cypressgithub.com</a></p>\n<p><a href=\"https://github.com/cypress-io/cypress-example-recipes/github.com\" target=\"_blank\" rel=\"noopener\">https://github.com/cypress-io/cypress-example-recipes/github.com</a></p>\n<p><a href=\"https://github.com/cypress-io/cypress-example-kitchensink/github.com\" target=\"_blank\" rel=\"noopener\">https://github.com/cypress-io/cypress-example-kitchensink/github.com</a></p>\n"},{"title":"Cypress 页面元素基本操作方式","originContent":"","toc":false,"date":"2021-09-17T04:27:54.000Z","_content":"\n获取DOM元素基本方式\n1. .find(selector) 搜索定位元素\n2. .get(selector) 搜索定位元素\n3. .contains(selector) 搜索定位元素\n4. .children() 方法用来获取DON元素的子元素\n5. .parents() 用来获取DOM元素的所有父元素\n6. .parent() 用来获取DOM元素第一层元素\n7. .siblings() 用来获取DOM元素的所有同级元素\n8. .first() 用来获取指定DOM对象的第一个元素\n9. .last() 用来获取指定DOM对象的最后一个元素\n10. .next() 用来匹配DOM对象紧跟着的下一个同级元素\n11. .nextAll() 用来匹配给定的DOM对象的所有同级元素\n12. .nextUntil() 用来匹配给定DOM对象之后的所有同级元素直到遇到Until里定义的元素为止\n13. .prev() 用来匹配给定DOM对象紧跟着的上一个同级元素\n14. .prevAll() 用来匹配给定的DOM对象之前的所有同级元素\n15. .prevUntil() 用来匹配给定DOM对象之后的所有同级元素直到遇到Until里定义的元素为止\n16. .each() 用来遍历数组及其类似结果\n17. .eq() 用来在元素或者数组中的特定索引处获取DOM元素。类似于Jquery中nth:child()\n\n\n以上就是这篇文章的全部内容了，希望本文的内容对大家的学习或者工作具有一定的参考学习价值，如果有疑问大家可以留言交流，谢谢大家的支持。","source":"_posts/Cypress-页面元素基本操作方式.md","raw":"---\ntitle: Cypress 页面元素基本操作方式\ntags:\n  - Web开发\noriginContent: ''\ncategories:\n  - 自动化测试\ntoc: false\ndate: 2021-09-17 12:27:54\n---\n\n获取DOM元素基本方式\n1. .find(selector) 搜索定位元素\n2. .get(selector) 搜索定位元素\n3. .contains(selector) 搜索定位元素\n4. .children() 方法用来获取DON元素的子元素\n5. .parents() 用来获取DOM元素的所有父元素\n6. .parent() 用来获取DOM元素第一层元素\n7. .siblings() 用来获取DOM元素的所有同级元素\n8. .first() 用来获取指定DOM对象的第一个元素\n9. .last() 用来获取指定DOM对象的最后一个元素\n10. .next() 用来匹配DOM对象紧跟着的下一个同级元素\n11. .nextAll() 用来匹配给定的DOM对象的所有同级元素\n12. .nextUntil() 用来匹配给定DOM对象之后的所有同级元素直到遇到Until里定义的元素为止\n13. .prev() 用来匹配给定DOM对象紧跟着的上一个同级元素\n14. .prevAll() 用来匹配给定的DOM对象之前的所有同级元素\n15. .prevUntil() 用来匹配给定DOM对象之后的所有同级元素直到遇到Until里定义的元素为止\n16. .each() 用来遍历数组及其类似结果\n17. .eq() 用来在元素或者数组中的特定索引处获取DOM元素。类似于Jquery中nth:child()\n\n\n以上就是这篇文章的全部内容了，希望本文的内容对大家的学习或者工作具有一定的参考学习价值，如果有疑问大家可以留言交流，谢谢大家的支持。","slug":"Cypress-页面元素基本操作方式","published":1,"updated":"2021-09-17T04:27:54.238Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktnxcli20000qjs6rl9205a3","content":"<p>获取DOM元素基本方式</p>\n<ol>\n<li>.find(selector) 搜索定位元素</li>\n<li>.get(selector) 搜索定位元素</li>\n<li>.contains(selector) 搜索定位元素</li>\n<li>.children() 方法用来获取DON元素的子元素</li>\n<li>.parents() 用来获取DOM元素的所有父元素</li>\n<li>.parent() 用来获取DOM元素第一层元素</li>\n<li>.siblings() 用来获取DOM元素的所有同级元素</li>\n<li>.first() 用来获取指定DOM对象的第一个元素</li>\n<li>.last() 用来获取指定DOM对象的最后一个元素</li>\n<li>.next() 用来匹配DOM对象紧跟着的下一个同级元素</li>\n<li>.nextAll() 用来匹配给定的DOM对象的所有同级元素</li>\n<li>.nextUntil() 用来匹配给定DOM对象之后的所有同级元素直到遇到Until里定义的元素为止</li>\n<li>.prev() 用来匹配给定DOM对象紧跟着的上一个同级元素</li>\n<li>.prevAll() 用来匹配给定的DOM对象之前的所有同级元素</li>\n<li>.prevUntil() 用来匹配给定DOM对象之后的所有同级元素直到遇到Until里定义的元素为止</li>\n<li>.each() 用来遍历数组及其类似结果</li>\n<li>.eq() 用来在元素或者数组中的特定索引处获取DOM元素。类似于Jquery中nth:child()</li>\n</ol>\n<p>以上就是这篇文章的全部内容了，希望本文的内容对大家的学习或者工作具有一定的参考学习价值，如果有疑问大家可以留言交流，谢谢大家的支持。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>获取DOM元素基本方式</p>\n<ol>\n<li>.find(selector) 搜索定位元素</li>\n<li>.get(selector) 搜索定位元素</li>\n<li>.contains(selector) 搜索定位元素</li>\n<li>.children() 方法用来获取DON元素的子元素</li>\n<li>.parents() 用来获取DOM元素的所有父元素</li>\n<li>.parent() 用来获取DOM元素第一层元素</li>\n<li>.siblings() 用来获取DOM元素的所有同级元素</li>\n<li>.first() 用来获取指定DOM对象的第一个元素</li>\n<li>.last() 用来获取指定DOM对象的最后一个元素</li>\n<li>.next() 用来匹配DOM对象紧跟着的下一个同级元素</li>\n<li>.nextAll() 用来匹配给定的DOM对象的所有同级元素</li>\n<li>.nextUntil() 用来匹配给定DOM对象之后的所有同级元素直到遇到Until里定义的元素为止</li>\n<li>.prev() 用来匹配给定DOM对象紧跟着的上一个同级元素</li>\n<li>.prevAll() 用来匹配给定的DOM对象之前的所有同级元素</li>\n<li>.prevUntil() 用来匹配给定DOM对象之后的所有同级元素直到遇到Until里定义的元素为止</li>\n<li>.each() 用来遍历数组及其类似结果</li>\n<li>.eq() 用来在元素或者数组中的特定索引处获取DOM元素。类似于Jquery中nth:child()</li>\n</ol>\n<p>以上就是这篇文章的全部内容了，希望本文的内容对大家的学习或者工作具有一定的参考学习价值，如果有疑问大家可以留言交流，谢谢大家的支持。</p>\n"},{"title":"Cypress 元素定位","originContent":"","toc":false,"date":"2021-09-17T04:33:34.000Z","_content":"\n前言\nCypress含有多种定位方式我们无需担心因为定位导致测试失败，Cypress有独一无二的定位策略能使你摆脱元素定位的噩梦。\n\nCypress专有选择器\n\n- data-cy\n- data-test\n- data-testid\n\n\n举例：\n```html\n<button id='main' class = 'btn' data-cy = 'submit'>submit<button><button id='main' class = 'btn' data-test= 'submit'>submit<button><button id='main' class = 'btn' data-testid= 'submit'>submit<button>\n```\n获取元素方法：\n\n```javascript\ncy.get('[data-cy=submit]').click()\ncy.get('[data-test=submit]').click()\ncy.get('[data-testid=submit]').click()\n```\n\n举例：\n![image.png](https://blogimage.houjiyi.com/FsKusJefzm2L4lb709CcCjijV4ND)\n```html\n<tbody>\n    <tr>\n    <th>用户名</th>\n    <td><input class=\"form-control\" type=\"text\" name=\"account\" id=\"account\" autofocus=\"\"></td>\n    </tr>\n    <tr>\n    <th>密码</th>\n    <td><input class=\"form-control\" type=\"password\" name=\"password\"></td>\n    </tr>\n    <tr>\n    <th></th>\n    <td id=\"keeplogin\"><div class=\"checkbox-primary\"><input type=\"checkbox\" name=\"keepLogin[]\" value=\"on\" id=\"keepLoginon\"> <label for=\"keepLoginon\">保持登录</label></div></td>\n    </tr>\n    <tr>\n    <td></td>\n    <td class=\"form-actions\">\n    <button type=\"submit\" id=\"submit\" class=\"btn btn-primary\" data-loading=\"稍候...\">登录</button><input type=\"hidden\" name=\"referer\" id=\"referer\" value=\"/zentao/\"><input type=\"hidden\" name=\"verifyRand\" id=\"verifyRand\" value=\"1281275466\"><a href=\"/zentao/user-reset.html\">忘记密码</a>\n    </td>\n    </tr>\n</tbody>\n```\n\n- #d选择器\n\n#id选择器通过html元素id属性来获取DMO\n\n获取用户名input元素方法：\n\n```javascript\ncy.get('#account').click()\n```\n\n- class类选择器\n\n类选择器通过html元素class属性来获取DMO\n\n获取用户名input元素方法：\n\n```javascript\ncy.get('.form-control').click()\n```\n\n- attributes属性选择器\n\n类选择器通过html元素class属性来获取DMO\n\n获取用户名input元素方法：\n\n```javascript\ncy.get('[input[id = \"account\"]]').click()\n```\n\n- :nth-child(n)选择器\n\n\n:nth-child(n)选择器匹配属于其父元素的第n个子元素，不论元素的类型。\n\n获取用户名DOM元素方法：\n```javascript\ncy.get(tbody > tr:nth-child(1) > th')\n```\n\n- Cypress.$定位器\n\nCypress可以使用jQuery选择器定位\n\n```javascript\nCypress.$('#account') 等价于 cy.get('#account')\n```\n\n\n以上就是这篇文章的全部内容了，希望本文的内容对大家的学习或者工作具有一定的参考学习价值，如果有疑问大家可以留言交流，谢谢大家的支持。\n","source":"_posts/Cypress-元素定位.md","raw":"---\ntitle: Cypress 元素定位\ntags:\n  - Web开发\noriginContent: ''\ncategories:\n  - 自动化测试\ntoc: false\ndate: 2021-09-17 12:33:34\n---\n\n前言\nCypress含有多种定位方式我们无需担心因为定位导致测试失败，Cypress有独一无二的定位策略能使你摆脱元素定位的噩梦。\n\nCypress专有选择器\n\n- data-cy\n- data-test\n- data-testid\n\n\n举例：\n```html\n<button id='main' class = 'btn' data-cy = 'submit'>submit<button><button id='main' class = 'btn' data-test= 'submit'>submit<button><button id='main' class = 'btn' data-testid= 'submit'>submit<button>\n```\n获取元素方法：\n\n```javascript\ncy.get('[data-cy=submit]').click()\ncy.get('[data-test=submit]').click()\ncy.get('[data-testid=submit]').click()\n```\n\n举例：\n![image.png](https://blogimage.houjiyi.com/FsKusJefzm2L4lb709CcCjijV4ND)\n```html\n<tbody>\n    <tr>\n    <th>用户名</th>\n    <td><input class=\"form-control\" type=\"text\" name=\"account\" id=\"account\" autofocus=\"\"></td>\n    </tr>\n    <tr>\n    <th>密码</th>\n    <td><input class=\"form-control\" type=\"password\" name=\"password\"></td>\n    </tr>\n    <tr>\n    <th></th>\n    <td id=\"keeplogin\"><div class=\"checkbox-primary\"><input type=\"checkbox\" name=\"keepLogin[]\" value=\"on\" id=\"keepLoginon\"> <label for=\"keepLoginon\">保持登录</label></div></td>\n    </tr>\n    <tr>\n    <td></td>\n    <td class=\"form-actions\">\n    <button type=\"submit\" id=\"submit\" class=\"btn btn-primary\" data-loading=\"稍候...\">登录</button><input type=\"hidden\" name=\"referer\" id=\"referer\" value=\"/zentao/\"><input type=\"hidden\" name=\"verifyRand\" id=\"verifyRand\" value=\"1281275466\"><a href=\"/zentao/user-reset.html\">忘记密码</a>\n    </td>\n    </tr>\n</tbody>\n```\n\n- #d选择器\n\n#id选择器通过html元素id属性来获取DMO\n\n获取用户名input元素方法：\n\n```javascript\ncy.get('#account').click()\n```\n\n- class类选择器\n\n类选择器通过html元素class属性来获取DMO\n\n获取用户名input元素方法：\n\n```javascript\ncy.get('.form-control').click()\n```\n\n- attributes属性选择器\n\n类选择器通过html元素class属性来获取DMO\n\n获取用户名input元素方法：\n\n```javascript\ncy.get('[input[id = \"account\"]]').click()\n```\n\n- :nth-child(n)选择器\n\n\n:nth-child(n)选择器匹配属于其父元素的第n个子元素，不论元素的类型。\n\n获取用户名DOM元素方法：\n```javascript\ncy.get(tbody > tr:nth-child(1) > th')\n```\n\n- Cypress.$定位器\n\nCypress可以使用jQuery选择器定位\n\n```javascript\nCypress.$('#account') 等价于 cy.get('#account')\n```\n\n\n以上就是这篇文章的全部内容了，希望本文的内容对大家的学习或者工作具有一定的参考学习价值，如果有疑问大家可以留言交流，谢谢大家的支持。\n","slug":"Cypress-元素定位","published":1,"updated":"2021-09-17T04:33:34.523Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktnxclib0001qjs6no6c3yz3","content":"<p>前言<br>Cypress含有多种定位方式我们无需担心因为定位导致测试失败，Cypress有独一无二的定位策略能使你摆脱元素定位的噩梦。</p>\n<p>Cypress专有选择器</p>\n<ul>\n<li>data-cy</li>\n<li>data-test</li>\n<li>data-testid</li>\n</ul>\n<p>举例：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">'main'</span> <span class=\"attr\">class</span> = <span class=\"string\">'btn'</span> <span class=\"attr\">data-cy</span> = <span class=\"string\">'submit'</span>&gt;</span>submit<span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">'main'</span> <span class=\"attr\">class</span> = <span class=\"string\">'btn'</span> <span class=\"attr\">data-test</span>= <span class=\"string\">'submit'</span>&gt;</span>submit<span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">'main'</span> <span class=\"attr\">class</span> = <span class=\"string\">'btn'</span> <span class=\"attr\">data-testid</span>= <span class=\"string\">'submit'</span>&gt;</span>submit<span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>获取元素方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cy.get(<span class=\"string\">'[data-cy=submit]'</span>).click()</span><br><span class=\"line\">cy.get(<span class=\"string\">'[data-test=submit]'</span>).click()</span><br><span class=\"line\">cy.get(<span class=\"string\">'[data-testid=submit]'</span>).click()</span><br></pre></td></tr></table></figure>\n<p>举例：<br><img src=\"https://blogimage.houjiyi.com/FsKusJefzm2L4lb709CcCjijV4ND\" alt=\"image.png\"><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>用户名<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"account\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"account\"</span> <span class=\"attr\">autofocus</span>=<span class=\"string\">\"\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>密码<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">id</span>=<span class=\"string\">\"keeplogin\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"checkbox-primary\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"keepLogin[]\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"on\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"keepLoginon\"</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"keepLoginon\"</span>&gt;</span>保持登录<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-actions\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span> <span class=\"attr\">data-loading</span>=<span class=\"string\">\"稍候...\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"referer\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"referer\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"/zentao/\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"verifyRand\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"verifyRand\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1281275466\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/zentao/user-reset.html\"</span>&gt;</span>忘记密码<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>#d选择器</li>\n</ul>\n<p>#id选择器通过html元素id属性来获取DMO</p>\n<p>获取用户名input元素方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cy.get(<span class=\"string\">'#account'</span>).click()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>class类选择器</li>\n</ul>\n<p>类选择器通过html元素class属性来获取DMO</p>\n<p>获取用户名input元素方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cy.get(<span class=\"string\">'.form-control'</span>).click()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>attributes属性选择器</li>\n</ul>\n<p>类选择器通过html元素class属性来获取DMO</p>\n<p>获取用户名input元素方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cy.get(<span class=\"string\">'[input[id = \"account\"]]'</span>).click()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>:nth-child(n)选择器</li>\n</ul>\n<p>:nth-child(n)选择器匹配属于其父元素的第n个子元素，不论元素的类型。</p>\n<p>获取用户名DOM元素方法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cy.get(tbody &gt; tr:nth-child(<span class=\"number\">1</span>) &gt; th<span class=\"string\">')</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>Cypress.$定位器</li>\n</ul>\n<p>Cypress可以使用jQuery选择器定位</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cypress.$(<span class=\"string\">'#account'</span>) 等价于 cy.get(<span class=\"string\">'#account'</span>)</span><br></pre></td></tr></table></figure>\n<p>以上就是这篇文章的全部内容了，希望本文的内容对大家的学习或者工作具有一定的参考学习价值，如果有疑问大家可以留言交流，谢谢大家的支持。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>前言<br>Cypress含有多种定位方式我们无需担心因为定位导致测试失败，Cypress有独一无二的定位策略能使你摆脱元素定位的噩梦。</p>\n<p>Cypress专有选择器</p>\n<ul>\n<li>data-cy</li>\n<li>data-test</li>\n<li>data-testid</li>\n</ul>\n<p>举例：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">'main'</span> <span class=\"attr\">class</span> = <span class=\"string\">'btn'</span> <span class=\"attr\">data-cy</span> = <span class=\"string\">'submit'</span>&gt;</span>submit<span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">'main'</span> <span class=\"attr\">class</span> = <span class=\"string\">'btn'</span> <span class=\"attr\">data-test</span>= <span class=\"string\">'submit'</span>&gt;</span>submit<span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">'main'</span> <span class=\"attr\">class</span> = <span class=\"string\">'btn'</span> <span class=\"attr\">data-testid</span>= <span class=\"string\">'submit'</span>&gt;</span>submit<span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>获取元素方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cy.get(<span class=\"string\">'[data-cy=submit]'</span>).click()</span><br><span class=\"line\">cy.get(<span class=\"string\">'[data-test=submit]'</span>).click()</span><br><span class=\"line\">cy.get(<span class=\"string\">'[data-testid=submit]'</span>).click()</span><br></pre></td></tr></table></figure>\n<p>举例：<br><img src=\"https://blogimage.houjiyi.com/FsKusJefzm2L4lb709CcCjijV4ND\" alt=\"image.png\"><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>用户名<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"account\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"account\"</span> <span class=\"attr\">autofocus</span>=<span class=\"string\">\"\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>密码<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">id</span>=<span class=\"string\">\"keeplogin\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"checkbox-primary\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"keepLogin[]\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"on\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"keepLoginon\"</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"keepLoginon\"</span>&gt;</span>保持登录<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-actions\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span> <span class=\"attr\">data-loading</span>=<span class=\"string\">\"稍候...\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"referer\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"referer\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"/zentao/\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"verifyRand\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"verifyRand\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1281275466\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/zentao/user-reset.html\"</span>&gt;</span>忘记密码<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>#d选择器</li>\n</ul>\n<p>#id选择器通过html元素id属性来获取DMO</p>\n<p>获取用户名input元素方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cy.get(<span class=\"string\">'#account'</span>).click()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>class类选择器</li>\n</ul>\n<p>类选择器通过html元素class属性来获取DMO</p>\n<p>获取用户名input元素方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cy.get(<span class=\"string\">'.form-control'</span>).click()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>attributes属性选择器</li>\n</ul>\n<p>类选择器通过html元素class属性来获取DMO</p>\n<p>获取用户名input元素方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cy.get(<span class=\"string\">'[input[id = \"account\"]]'</span>).click()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>:nth-child(n)选择器</li>\n</ul>\n<p>:nth-child(n)选择器匹配属于其父元素的第n个子元素，不论元素的类型。</p>\n<p>获取用户名DOM元素方法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cy.get(tbody &gt; tr:nth-child(<span class=\"number\">1</span>) &gt; th<span class=\"string\">')</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>Cypress.$定位器</li>\n</ul>\n<p>Cypress可以使用jQuery选择器定位</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cypress.$(<span class=\"string\">'#account'</span>) 等价于 cy.get(<span class=\"string\">'#account'</span>)</span><br></pre></td></tr></table></figure>\n<p>以上就是这篇文章的全部内容了，希望本文的内容对大家的学习或者工作具有一定的参考学习价值，如果有疑问大家可以留言交流，谢谢大家的支持。</p>\n"},{"title":"Cypress 获取table内容动态tr和td","originContent":"","toc":false,"date":"2021-09-17T05:09:32.000Z","_content":"\n前言\n如何获取table内容动态tr和td的dom对象，今天给大家总结了方法。\n\n获取table中DOM元素方法总结\n```html\n<table id=\"projectstatus\" class=\"sortable pane bigtable stripped-odd\"><tbody><tr class=\"header\"><th tooltip=\"上次构建状态\" title=\"上次构建状态\"><a href=\"#\" class=\"sortheader\">&nbsp;&nbsp;S<span class=\"sortarrow\">&nbsp;&nbsp;&nbsp;</span></a></th><th tooltip=\"构建晴雨表\" title=\"构建晴雨表\"><a href=\"#\" class=\"sortheader\">&nbsp;&nbsp;W<span class=\"sortarrow\">&nbsp;&nbsp;&nbsp;</span></a></th><th initialsortdir=\"down\"><a href=\"#\" class=\"sortheader\">名称<span class=\"sortarrow\">&nbsp;&nbsp;↓</span></a></th><th><a href=\"#\" class=\"sortheader\">上次成功<span class=\"sortarrow\">&nbsp;&nbsp;&nbsp;</span></a></th><th><a href=\"#\" class=\"sortheader\">上次失败<span class=\"sortarrow\">&nbsp;&nbsp;&nbsp;</span></a></th><th><a href=\"#\" class=\"sortheader\">上次持续时间<span class=\"sortarrow\">&nbsp;&nbsp;&nbsp;</span></a></th><th width=\"1\"><a href=\"#\" class=\"sortheader\">&nbsp;<span class=\"sortarrow\">&nbsp;&nbsp;&nbsp;</span></a></th><th><a href=\"#\" class=\"sortheader\">&nbsp;<span class=\"sortarrow\">&nbsp;&nbsp;&nbsp;</span></a></th></tr><tr id=\"job_FCA玛莎拉蒂自动化测试\" class=\" job-status-blue\"><td data=\"4\"><img src=\"/static/ecc2f937/images/24x24/blue.png\" alt=\"成功\" tooltip=\"成功\" style=\"width: 24px; height: 24px; \" class=\"icon-blue icon-md\" title=\"成功\"></td><td data=\"100\" class=\"healthReport\" onmouseover=\"this.className='healthReport hover';return true;\n        \" onmouseout=\"this.className='healthReport';return true;\"><a href=\"job/FCA%E7%8E%9B%E8%8E%8E%E6%8B%89%E8%92%82%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/lastBuild\" class=\"build-health-link\"><img src=\"/static/ecc2f937/images/24x24/health-80plus.png\" alt=\"100%\" style=\"width: 24px; height: 24px; \" class=\"icon-health-80plus icon-md\"></a><div class=\"healthReportDetails\"><table border=\"0\"><thead><tr><th align=\"left\">W</th><th align=\"left\">描述</th><th align=\"right\">%</th></tr></thead><tbody><tr><td align=\"left\"><img src=\"/static/ecc2f937/images/16x16/health-80plus.png\" style=\"width: 16px; height: 16px; \" class=\"icon-health-80plus icon-sm\"></td><td>构建稳定性: 最近没有失败的构建。</td><td align=\"right\">100</td></tr></tbody></table></div></td><td><a href=\"job/FCA%E7%8E%9B%E8%8E%8E%E6%8B%89%E8%92%82%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/\" class=\"model-link inside\">1</a></td><td data=\"2020-07-17T02:00:14Z\">\n        2 小时 56 分\n        - <a href=\"job/FCA%E7%8E%9B%E8%8E%8E%E6%8B%89%E8%92%82%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/lastSuccessfulBuild/\" class=\"model-link inside\">#26</a></td><td data=\"2020-07-15T01:48:39Z\">\n        2 天 3 小时\n        - <a href=\"job/FCA%E7%8E%9B%E8%8E%8E%E6%8B%89%E8%92%82%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/lastFailedBuild/\" class=\"model-link inside\">#7</a></td><td data=\"1767243\">29 分</td><td><a href=\"job/FCA%E7%8E%9B%E8%8E%8E%E6%8B%89%E8%92%82%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/build?delay=0sec\"><img src=\"/static/ecc2f937/images/24x24/clock.png\" onclick=\"return build_id2549(this)\" alt=\"Schedule a 构建 for1\" style=\"width: 24px; height: 24px; \" title=\"Schedule a 构建 for FCA玛莎拉蒂自动化测试\" class=\"icon-clock icon-md\"></a><script>function build_id2549(img) {\n                  new Ajax.Request(img.parentNode.href);\n                  hoverNotification('构建 scheduled', img, -100);\n                  return false;\n                }</script></td><td>&nbsp;</td></tr><tr id=\"job_2\" class=\" job-status-blue\"><td data=\"4\"><img src=\"/static/ecc2f937/images/24x24/blue.png\" alt=\"成功\" tooltip=\"成功\" style=\"width: 24px; height: 24px; \" class=\"icon-blue icon-md\" title=\"成功\"></td><td data=\"40\" class=\"healthReport\" onmouseover=\"this.className='healthReport hover';return true;\n        \" onmouseout=\"this.className='healthReport';return true;\"><a href=\"job/%E4%B8%80%E6%B1%BD%E6%95%B0%E6%8D%AE%E8%BF%90%E8%90%A5%E6%8E%A5%E5%8F%A3/lastBuild\" class=\"build-health-link\"><img src=\"/static/ecc2f937/images/24x24/health-20to39.png\" alt=\"40%\" style=\"width: 24px; height: 24px; \" class=\"icon-health-20to39 icon-md\"></a><div class=\"healthReportDetails\"><table border=\"0\"><thead><tr><th align=\"left\">W</th><th align=\"left\">描述</th><th align=\"right\">%</th></tr></thead><tbody><tr><td align=\"left\"><img src=\"/static/ecc2f937/images/16x16/health-20to39.png\" style=\"width: 16px; height: 16px; \" class=\"icon-health-20to39 icon-sm\"></td><td>构建稳定性: 最近 5 次构建中有 3 次失败。</td><td align=\"right\">40</td></tr></tbody></table></div></td><td><a href=\"job/%E4%B8%80%E6%B1%BD%E6%95%B0%E6%8D%AE%E8%BF%90%E8%90%A5%E6%8E%A5%E5%8F%A3/\" class=\"model-link inside\">2</a></td><td data=\"2020-06-12T02:16:03Z\">\n        1 月 5 天\n        - <a href=\"job/%E4%B8%80%E6%B1%BD%E6%95%B0%E6%8D%AE%E8%BF%90%E8%90%A5%E6%8E%A5%E5%8F%A3/lastSuccessfulBuild/\" class=\"model-link inside\">#16</a></td><td data=\"2020-06-12T01:58:43Z\">\n        1 月 5 天\n        - <a href=\"job/%E4%B8%80%E6%B1%BD%E6%95%B0%E6%8D%AE%E8%BF%90%E8%90%A5%E6%8E%A5%E5%8F%A3/lastFailedBuild/\" class=\"model-link inside\">#14</a></td><td data=\"18773\">18 秒</td><td><a href=\"job/%E4%B8%80%E6%B1%BD%E6%95%B0%E6%8D%AE%E8%BF%90%E8%90%A5%E6%8E%A5%E5%8F%A3/build?delay=0sec\"><img src=\"/static/ecc2f937/images/24x24/clock.png\" onclick=\"return build_id2550(this)\" alt=\"Schedule a 构建 for 一汽数据运营接口\" style=\"width: 24px; height: 24px; \" title=\"Schedule a 构建 for 一2\" class=\"icon-clock icon-md\"></a><script>function build_id2550(img) {\n                  new Ajax.Request(img.parentNode.href);\n                  hoverNotification('构建 scheduled', img, -100);\n                  return false;\n                }</script></td><td>&nbsp;</td></tr><tr id=\"job_3\" class=\" job-status-blue\"><td data=\"4\"><img src=\"/static/ecc2f937/images/24x24/blue.png\" alt=\"成功\" tooltip=\"成功\" style=\"width: 24px; height: 24px; \" class=\"icon-blue icon-md\" title=\"成功\"></td><td data=\"100\" class=\"healthReport\" onmouseover=\"this.className='healthReport hover';return true;\n        \" onmouseout=\"this.className='healthReport';return true;\"><a href=\"job/%E9%95%BF%E5%9F%8E%E8%BD%A6%E4%B8%BB%E5%8D%A1%E4%B8%8A%E6%8A%A5%E6%A8%A1%E5%9D%97%E6%8E%A5%E5%8F%A3/lastBuild\" class=\"build-health-link\"><img src=\"/static/ecc2f937/images/24x24/health-80plus.png\" alt=\"100%\" style=\"width: 24px; height: 24px; \" class=\"icon-health-80plus icon-md\"></a><div class=\"healthReportDetails\"><table border=\"0\"><thead><tr><th align=\"left\">W</th><th align=\"left\">描述</th><th align=\"right\">%</th></tr></thead><tbody><tr><td align=\"left\"><img src=\"/static/ecc2f937/images/16x16/health-80plus.png\" style=\"width: 16px; height: 16px; \" class=\"icon-health-80plus icon-sm\"></td><td>构建稳定性: 最近没有失败的构建。</td><td align=\"right\">100</td></tr></tbody></table></div></td><td><a href=\"job/%E9%95%BF%E5%9F%8E%E8%BD%A6%E4%B8%BB%E5%8D%A1%E4%B8%8A%E6%8A%A5%E6%A8%A1%E5%9D%97%E6%8E%A5%E5%8F%A3/\" class=\"model-link inside\">3</a></td><td data=\"2020-07-17T02:30:49Z\">\n        2 小时 25 分\n        - <a href=\"job/%E9%95%BF%E5%9F%8E%E8%BD%A6%E4%B8%BB%E5%8D%A1%E4%B8%8A%E6%8A%A5%E6%A8%A1%E5%9D%97%E6%8E%A5%E5%8F%A3/lastSuccessfulBuild/\" class=\"model-link inside\">#55</a></td><td data=\"2020-07-14T08:29:55Z\">\n        2 天 20 小时\n        - <a href=\"job/%E9%95%BF%E5%9F%8E%E8%BD%A6%E4%B8%BB%E5%8D%A1%E4%B8%8A%E6%8A%A5%E6%A8%A1%E5%9D%97%E6%8E%A5%E5%8F%A3/lastFailedBuild/\" class=\"model-link inside\">#50</a></td><td data=\"26883\">26 秒</td><td><a href=\"job/%E9%95%BF%E5%9F%8E%E8%BD%A6%E4%B8%BB%E5%8D%A1%E4%B8%8A%E6%8A%A5%E6%A8%A1%E5%9D%97%E6%8E%A5%E5%8F%A3/build?delay=0sec\"><img src=\"/static/ecc2f937/images/24x24/clock.png\" onclick=\"return build_id2551(this)\" alt=\"Schedule a 构建 for 3\" style=\"width: 24px; height: 24px; \" title=\"Schedule a 构建 for3\" class=\"icon-clock icon-md\"></a><script>function build_id2551(img) {\n                  new Ajax.Request(img.parentNode.href);\n                  hoverNotification('构建 scheduled', img, -100);\n                  return false;\n                }</script></td><td>&nbsp;</td></tr></tbody></table>\n```\n![image.png](https://blogimage.houjiyi.com/Frp6LrxgnFrDQPbDrjYWfNkruSwW)\n1.获取动态tr个数\n```javascript\ndescribe('处理table方法总结', function () {\n    beforeEach(function () {\n        var username = \"admin\"\n        var password = \"\"\n        //登陆地址\n        cy.visit('http://xx.xx.xxx.xx:xxxx/login?from=%2F')\n        cy.get('#j_username').type(username)\n        cy.get('body > div > div > form > div:nth-child(2) > input').type(password)\n        cy.get('body > div > div > form > div.submit.formRow > input').click()\n\n    })\n    it('动态获取tr', function () {\n        cy.get('#projectstatus > tbody >tr').then(($el) => {\n            const tr_total = $el.length\n            cy.log(tr_total)\n        })\n    });})\n```\n![image.png](https://blogimage.houjiyi.com/FilWXH4zt8W2n0a29C72zQb8eJpQ)\n2.获取动态tr去断言td内容\n\n```javascript\ndescribe('处理table方法总结', function () {\n    beforeEach(function () {\n        var username = \"admin\"\n        var password = \"\"\n        //登陆地址\n        cy.visit('http://xx.xx.xxx.xx:xxxx/login?from=%2F')\n        cy.get('#j_username').type(username)\n        cy.get('body > div > div > form > div:nth-child(2) > input').type(password)\n        cy.get('body > div > div > form > div.submit.formRow > input').click()\n\n    })\n    it('动态获取tr', function () {\n        cy.get('#projectstatus > tbody >tr').then(($el) => {\n            const tr_total = $el.length\n            cy.log(tr_total)\n            var list =['29 分','18 秒',\"26 秒\"]\n             for (var i = 1; i < tr_total; i++) {\n                cy.get('#projectstatus > tbody >tr').eq(i).find('td:nth-child(6)')\n                    .should('contain', list[i-1])\n            }\n        })\n    });})\n```\n![image.png](https://blogimage.houjiyi.com/Fo_OZgN9gABXL9Ne5UfJd_dk9vuX)\n\n以上就是这篇文章的全部内容了，希望本文的内容对大家的学习或者工作具有一定的参考学习价值，如果有疑问大家可以留言交流，谢谢大家的支持。\n\n更多文章关注小编公众号：自动化测试 To share\n\n","source":"_posts/Cypress-获取table内容动态tr和td.md","raw":"---\ntitle: Cypress 获取table内容动态tr和td\ntags:\n  - Web开发\noriginContent: ''\ncategories:\n  - 自动化测试\ntoc: false\ndate: 2021-09-17 13:09:32\n---\n\n前言\n如何获取table内容动态tr和td的dom对象，今天给大家总结了方法。\n\n获取table中DOM元素方法总结\n```html\n<table id=\"projectstatus\" class=\"sortable pane bigtable stripped-odd\"><tbody><tr class=\"header\"><th tooltip=\"上次构建状态\" title=\"上次构建状态\"><a href=\"#\" class=\"sortheader\">&nbsp;&nbsp;S<span class=\"sortarrow\">&nbsp;&nbsp;&nbsp;</span></a></th><th tooltip=\"构建晴雨表\" title=\"构建晴雨表\"><a href=\"#\" class=\"sortheader\">&nbsp;&nbsp;W<span class=\"sortarrow\">&nbsp;&nbsp;&nbsp;</span></a></th><th initialsortdir=\"down\"><a href=\"#\" class=\"sortheader\">名称<span class=\"sortarrow\">&nbsp;&nbsp;↓</span></a></th><th><a href=\"#\" class=\"sortheader\">上次成功<span class=\"sortarrow\">&nbsp;&nbsp;&nbsp;</span></a></th><th><a href=\"#\" class=\"sortheader\">上次失败<span class=\"sortarrow\">&nbsp;&nbsp;&nbsp;</span></a></th><th><a href=\"#\" class=\"sortheader\">上次持续时间<span class=\"sortarrow\">&nbsp;&nbsp;&nbsp;</span></a></th><th width=\"1\"><a href=\"#\" class=\"sortheader\">&nbsp;<span class=\"sortarrow\">&nbsp;&nbsp;&nbsp;</span></a></th><th><a href=\"#\" class=\"sortheader\">&nbsp;<span class=\"sortarrow\">&nbsp;&nbsp;&nbsp;</span></a></th></tr><tr id=\"job_FCA玛莎拉蒂自动化测试\" class=\" job-status-blue\"><td data=\"4\"><img src=\"/static/ecc2f937/images/24x24/blue.png\" alt=\"成功\" tooltip=\"成功\" style=\"width: 24px; height: 24px; \" class=\"icon-blue icon-md\" title=\"成功\"></td><td data=\"100\" class=\"healthReport\" onmouseover=\"this.className='healthReport hover';return true;\n        \" onmouseout=\"this.className='healthReport';return true;\"><a href=\"job/FCA%E7%8E%9B%E8%8E%8E%E6%8B%89%E8%92%82%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/lastBuild\" class=\"build-health-link\"><img src=\"/static/ecc2f937/images/24x24/health-80plus.png\" alt=\"100%\" style=\"width: 24px; height: 24px; \" class=\"icon-health-80plus icon-md\"></a><div class=\"healthReportDetails\"><table border=\"0\"><thead><tr><th align=\"left\">W</th><th align=\"left\">描述</th><th align=\"right\">%</th></tr></thead><tbody><tr><td align=\"left\"><img src=\"/static/ecc2f937/images/16x16/health-80plus.png\" style=\"width: 16px; height: 16px; \" class=\"icon-health-80plus icon-sm\"></td><td>构建稳定性: 最近没有失败的构建。</td><td align=\"right\">100</td></tr></tbody></table></div></td><td><a href=\"job/FCA%E7%8E%9B%E8%8E%8E%E6%8B%89%E8%92%82%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/\" class=\"model-link inside\">1</a></td><td data=\"2020-07-17T02:00:14Z\">\n        2 小时 56 分\n        - <a href=\"job/FCA%E7%8E%9B%E8%8E%8E%E6%8B%89%E8%92%82%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/lastSuccessfulBuild/\" class=\"model-link inside\">#26</a></td><td data=\"2020-07-15T01:48:39Z\">\n        2 天 3 小时\n        - <a href=\"job/FCA%E7%8E%9B%E8%8E%8E%E6%8B%89%E8%92%82%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/lastFailedBuild/\" class=\"model-link inside\">#7</a></td><td data=\"1767243\">29 分</td><td><a href=\"job/FCA%E7%8E%9B%E8%8E%8E%E6%8B%89%E8%92%82%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/build?delay=0sec\"><img src=\"/static/ecc2f937/images/24x24/clock.png\" onclick=\"return build_id2549(this)\" alt=\"Schedule a 构建 for1\" style=\"width: 24px; height: 24px; \" title=\"Schedule a 构建 for FCA玛莎拉蒂自动化测试\" class=\"icon-clock icon-md\"></a><script>function build_id2549(img) {\n                  new Ajax.Request(img.parentNode.href);\n                  hoverNotification('构建 scheduled', img, -100);\n                  return false;\n                }</script></td><td>&nbsp;</td></tr><tr id=\"job_2\" class=\" job-status-blue\"><td data=\"4\"><img src=\"/static/ecc2f937/images/24x24/blue.png\" alt=\"成功\" tooltip=\"成功\" style=\"width: 24px; height: 24px; \" class=\"icon-blue icon-md\" title=\"成功\"></td><td data=\"40\" class=\"healthReport\" onmouseover=\"this.className='healthReport hover';return true;\n        \" onmouseout=\"this.className='healthReport';return true;\"><a href=\"job/%E4%B8%80%E6%B1%BD%E6%95%B0%E6%8D%AE%E8%BF%90%E8%90%A5%E6%8E%A5%E5%8F%A3/lastBuild\" class=\"build-health-link\"><img src=\"/static/ecc2f937/images/24x24/health-20to39.png\" alt=\"40%\" style=\"width: 24px; height: 24px; \" class=\"icon-health-20to39 icon-md\"></a><div class=\"healthReportDetails\"><table border=\"0\"><thead><tr><th align=\"left\">W</th><th align=\"left\">描述</th><th align=\"right\">%</th></tr></thead><tbody><tr><td align=\"left\"><img src=\"/static/ecc2f937/images/16x16/health-20to39.png\" style=\"width: 16px; height: 16px; \" class=\"icon-health-20to39 icon-sm\"></td><td>构建稳定性: 最近 5 次构建中有 3 次失败。</td><td align=\"right\">40</td></tr></tbody></table></div></td><td><a href=\"job/%E4%B8%80%E6%B1%BD%E6%95%B0%E6%8D%AE%E8%BF%90%E8%90%A5%E6%8E%A5%E5%8F%A3/\" class=\"model-link inside\">2</a></td><td data=\"2020-06-12T02:16:03Z\">\n        1 月 5 天\n        - <a href=\"job/%E4%B8%80%E6%B1%BD%E6%95%B0%E6%8D%AE%E8%BF%90%E8%90%A5%E6%8E%A5%E5%8F%A3/lastSuccessfulBuild/\" class=\"model-link inside\">#16</a></td><td data=\"2020-06-12T01:58:43Z\">\n        1 月 5 天\n        - <a href=\"job/%E4%B8%80%E6%B1%BD%E6%95%B0%E6%8D%AE%E8%BF%90%E8%90%A5%E6%8E%A5%E5%8F%A3/lastFailedBuild/\" class=\"model-link inside\">#14</a></td><td data=\"18773\">18 秒</td><td><a href=\"job/%E4%B8%80%E6%B1%BD%E6%95%B0%E6%8D%AE%E8%BF%90%E8%90%A5%E6%8E%A5%E5%8F%A3/build?delay=0sec\"><img src=\"/static/ecc2f937/images/24x24/clock.png\" onclick=\"return build_id2550(this)\" alt=\"Schedule a 构建 for 一汽数据运营接口\" style=\"width: 24px; height: 24px; \" title=\"Schedule a 构建 for 一2\" class=\"icon-clock icon-md\"></a><script>function build_id2550(img) {\n                  new Ajax.Request(img.parentNode.href);\n                  hoverNotification('构建 scheduled', img, -100);\n                  return false;\n                }</script></td><td>&nbsp;</td></tr><tr id=\"job_3\" class=\" job-status-blue\"><td data=\"4\"><img src=\"/static/ecc2f937/images/24x24/blue.png\" alt=\"成功\" tooltip=\"成功\" style=\"width: 24px; height: 24px; \" class=\"icon-blue icon-md\" title=\"成功\"></td><td data=\"100\" class=\"healthReport\" onmouseover=\"this.className='healthReport hover';return true;\n        \" onmouseout=\"this.className='healthReport';return true;\"><a href=\"job/%E9%95%BF%E5%9F%8E%E8%BD%A6%E4%B8%BB%E5%8D%A1%E4%B8%8A%E6%8A%A5%E6%A8%A1%E5%9D%97%E6%8E%A5%E5%8F%A3/lastBuild\" class=\"build-health-link\"><img src=\"/static/ecc2f937/images/24x24/health-80plus.png\" alt=\"100%\" style=\"width: 24px; height: 24px; \" class=\"icon-health-80plus icon-md\"></a><div class=\"healthReportDetails\"><table border=\"0\"><thead><tr><th align=\"left\">W</th><th align=\"left\">描述</th><th align=\"right\">%</th></tr></thead><tbody><tr><td align=\"left\"><img src=\"/static/ecc2f937/images/16x16/health-80plus.png\" style=\"width: 16px; height: 16px; \" class=\"icon-health-80plus icon-sm\"></td><td>构建稳定性: 最近没有失败的构建。</td><td align=\"right\">100</td></tr></tbody></table></div></td><td><a href=\"job/%E9%95%BF%E5%9F%8E%E8%BD%A6%E4%B8%BB%E5%8D%A1%E4%B8%8A%E6%8A%A5%E6%A8%A1%E5%9D%97%E6%8E%A5%E5%8F%A3/\" class=\"model-link inside\">3</a></td><td data=\"2020-07-17T02:30:49Z\">\n        2 小时 25 分\n        - <a href=\"job/%E9%95%BF%E5%9F%8E%E8%BD%A6%E4%B8%BB%E5%8D%A1%E4%B8%8A%E6%8A%A5%E6%A8%A1%E5%9D%97%E6%8E%A5%E5%8F%A3/lastSuccessfulBuild/\" class=\"model-link inside\">#55</a></td><td data=\"2020-07-14T08:29:55Z\">\n        2 天 20 小时\n        - <a href=\"job/%E9%95%BF%E5%9F%8E%E8%BD%A6%E4%B8%BB%E5%8D%A1%E4%B8%8A%E6%8A%A5%E6%A8%A1%E5%9D%97%E6%8E%A5%E5%8F%A3/lastFailedBuild/\" class=\"model-link inside\">#50</a></td><td data=\"26883\">26 秒</td><td><a href=\"job/%E9%95%BF%E5%9F%8E%E8%BD%A6%E4%B8%BB%E5%8D%A1%E4%B8%8A%E6%8A%A5%E6%A8%A1%E5%9D%97%E6%8E%A5%E5%8F%A3/build?delay=0sec\"><img src=\"/static/ecc2f937/images/24x24/clock.png\" onclick=\"return build_id2551(this)\" alt=\"Schedule a 构建 for 3\" style=\"width: 24px; height: 24px; \" title=\"Schedule a 构建 for3\" class=\"icon-clock icon-md\"></a><script>function build_id2551(img) {\n                  new Ajax.Request(img.parentNode.href);\n                  hoverNotification('构建 scheduled', img, -100);\n                  return false;\n                }</script></td><td>&nbsp;</td></tr></tbody></table>\n```\n![image.png](https://blogimage.houjiyi.com/Frp6LrxgnFrDQPbDrjYWfNkruSwW)\n1.获取动态tr个数\n```javascript\ndescribe('处理table方法总结', function () {\n    beforeEach(function () {\n        var username = \"admin\"\n        var password = \"\"\n        //登陆地址\n        cy.visit('http://xx.xx.xxx.xx:xxxx/login?from=%2F')\n        cy.get('#j_username').type(username)\n        cy.get('body > div > div > form > div:nth-child(2) > input').type(password)\n        cy.get('body > div > div > form > div.submit.formRow > input').click()\n\n    })\n    it('动态获取tr', function () {\n        cy.get('#projectstatus > tbody >tr').then(($el) => {\n            const tr_total = $el.length\n            cy.log(tr_total)\n        })\n    });})\n```\n![image.png](https://blogimage.houjiyi.com/FilWXH4zt8W2n0a29C72zQb8eJpQ)\n2.获取动态tr去断言td内容\n\n```javascript\ndescribe('处理table方法总结', function () {\n    beforeEach(function () {\n        var username = \"admin\"\n        var password = \"\"\n        //登陆地址\n        cy.visit('http://xx.xx.xxx.xx:xxxx/login?from=%2F')\n        cy.get('#j_username').type(username)\n        cy.get('body > div > div > form > div:nth-child(2) > input').type(password)\n        cy.get('body > div > div > form > div.submit.formRow > input').click()\n\n    })\n    it('动态获取tr', function () {\n        cy.get('#projectstatus > tbody >tr').then(($el) => {\n            const tr_total = $el.length\n            cy.log(tr_total)\n            var list =['29 分','18 秒',\"26 秒\"]\n             for (var i = 1; i < tr_total; i++) {\n                cy.get('#projectstatus > tbody >tr').eq(i).find('td:nth-child(6)')\n                    .should('contain', list[i-1])\n            }\n        })\n    });})\n```\n![image.png](https://blogimage.houjiyi.com/Fo_OZgN9gABXL9Ne5UfJd_dk9vuX)\n\n以上就是这篇文章的全部内容了，希望本文的内容对大家的学习或者工作具有一定的参考学习价值，如果有疑问大家可以留言交流，谢谢大家的支持。\n\n更多文章关注小编公众号：自动化测试 To share\n\n","slug":"Cypress-获取table内容动态tr和td","published":1,"updated":"2021-09-17T05:09:32.917Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktnxclie0003qjs69ouxsf9l","content":"<p>前言<br>如何获取table内容动态tr和td的dom对象，今天给大家总结了方法。</p>\n<p>获取table中DOM元素方法总结<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">id</span>=<span class=\"string\">\"projectstatus\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sortable pane bigtable stripped-odd\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">tooltip</span>=<span class=\"string\">\"上次构建状态\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"上次构建状态\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sortheader\"</span>&gt;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span>S<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sortarrow\"</span>&gt;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">tooltip</span>=<span class=\"string\">\"构建晴雨表\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"构建晴雨表\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sortheader\"</span>&gt;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span>W<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sortarrow\"</span>&gt;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">initialsortdir</span>=<span class=\"string\">\"down\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sortheader\"</span>&gt;</span>名称<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sortarrow\"</span>&gt;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span>↓<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sortheader\"</span>&gt;</span>上次成功<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sortarrow\"</span>&gt;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sortheader\"</span>&gt;</span>上次失败<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sortarrow\"</span>&gt;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sortheader\"</span>&gt;</span>上次持续时间<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sortarrow\"</span>&gt;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">width</span>=<span class=\"string\">\"1\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sortheader\"</span>&gt;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sortarrow\"</span>&gt;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sortheader\"</span>&gt;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sortarrow\"</span>&gt;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">id</span>=<span class=\"string\">\"job_FCA玛莎拉蒂自动化测试\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\" job-status-blue\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">data</span>=<span class=\"string\">\"4\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/static/ecc2f937/images/24x24/blue.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"成功\"</span> <span class=\"attr\">tooltip</span>=<span class=\"string\">\"成功\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 24px; height: 24px; \"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-blue icon-md\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"成功\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">data</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"healthReport\"</span> <span class=\"attr\">onmouseover</span>=<span class=\"string\">\"this.className='healthReport hover';return true;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        \"</span> <span class=\"attr\">onmouseout</span>=<span class=\"string\">\"this.className='healthReport';return true;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"job/FCA%E7%8E%9B%E8%8E%8E%E6%8B%89%E8%92%82%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/lastBuild\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"build-health-link\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/static/ecc2f937/images/24x24/health-80plus.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"100%\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 24px; height: 24px; \"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-health-80plus icon-md\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"healthReportDetails\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">border</span>=<span class=\"string\">\"0\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">align</span>=<span class=\"string\">\"left\"</span>&gt;</span>W<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">align</span>=<span class=\"string\">\"left\"</span>&gt;</span>描述<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">align</span>=<span class=\"string\">\"right\"</span>&gt;</span>%<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">align</span>=<span class=\"string\">\"left\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/static/ecc2f937/images/16x16/health-80plus.png\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 16px; height: 16px; \"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-health-80plus icon-sm\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>构建稳定性: 最近没有失败的构建。<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">align</span>=<span class=\"string\">\"right\"</span>&gt;</span>100<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"job/FCA%E7%8E%9B%E8%8E%8E%E6%8B%89%E8%92%82%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"model-link inside\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">data</span>=<span class=\"string\">\"2020-07-17T02:00:14Z\"</span>&gt;</span></span><br><span class=\"line\">        2 小时 56 分</span><br><span class=\"line\">        - <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"job/FCA%E7%8E%9B%E8%8E%8E%E6%8B%89%E8%92%82%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/lastSuccessfulBuild/\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"model-link inside\"</span>&gt;</span>#26<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">data</span>=<span class=\"string\">\"2020-07-15T01:48:39Z\"</span>&gt;</span></span><br><span class=\"line\">        2 天 3 小时</span><br><span class=\"line\">        - <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"job/FCA%E7%8E%9B%E8%8E%8E%E6%8B%89%E8%92%82%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/lastFailedBuild/\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"model-link inside\"</span>&gt;</span>#7<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">data</span>=<span class=\"string\">\"1767243\"</span>&gt;</span>29 分<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"job/FCA%E7%8E%9B%E8%8E%8E%E6%8B%89%E8%92%82%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/build?delay=0sec\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/static/ecc2f937/images/24x24/clock.png\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"return build_id2549(this)\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"Schedule a 构建 for1\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 24px; height: 24px; \"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Schedule a 构建 for FCA玛莎拉蒂自动化测试\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-clock icon-md\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">build_id2549</span>(<span class=\"params\">img</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                  <span class=\"keyword\">new</span> Ajax.Request(img.parentNode.href);</span></span><br><span class=\"line\"><span class=\"javascript\">                  hoverNotification(<span class=\"string\">'构建 scheduled'</span>, img, <span class=\"number\">-100</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">                  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span></span><br><span class=\"line\">                &#125;<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">id</span>=<span class=\"string\">\"job_2\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\" job-status-blue\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">data</span>=<span class=\"string\">\"4\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/static/ecc2f937/images/24x24/blue.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"成功\"</span> <span class=\"attr\">tooltip</span>=<span class=\"string\">\"成功\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 24px; height: 24px; \"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-blue icon-md\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"成功\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">data</span>=<span class=\"string\">\"40\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"healthReport\"</span> <span class=\"attr\">onmouseover</span>=<span class=\"string\">\"this.className='healthReport hover';return true;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        \"</span> <span class=\"attr\">onmouseout</span>=<span class=\"string\">\"this.className='healthReport';return true;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"job/%E4%B8%80%E6%B1%BD%E6%95%B0%E6%8D%AE%E8%BF%90%E8%90%A5%E6%8E%A5%E5%8F%A3/lastBuild\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"build-health-link\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/static/ecc2f937/images/24x24/health-20to39.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"40%\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 24px; height: 24px; \"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-health-20to39 icon-md\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"healthReportDetails\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">border</span>=<span class=\"string\">\"0\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">align</span>=<span class=\"string\">\"left\"</span>&gt;</span>W<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">align</span>=<span class=\"string\">\"left\"</span>&gt;</span>描述<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">align</span>=<span class=\"string\">\"right\"</span>&gt;</span>%<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">align</span>=<span class=\"string\">\"left\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/static/ecc2f937/images/16x16/health-20to39.png\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 16px; height: 16px; \"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-health-20to39 icon-sm\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>构建稳定性: 最近 5 次构建中有 3 次失败。<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">align</span>=<span class=\"string\">\"right\"</span>&gt;</span>40<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"job/%E4%B8%80%E6%B1%BD%E6%95%B0%E6%8D%AE%E8%BF%90%E8%90%A5%E6%8E%A5%E5%8F%A3/\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"model-link inside\"</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">data</span>=<span class=\"string\">\"2020-06-12T02:16:03Z\"</span>&gt;</span></span><br><span class=\"line\">        1 月 5 天</span><br><span class=\"line\">        - <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"job/%E4%B8%80%E6%B1%BD%E6%95%B0%E6%8D%AE%E8%BF%90%E8%90%A5%E6%8E%A5%E5%8F%A3/lastSuccessfulBuild/\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"model-link inside\"</span>&gt;</span>#16<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">data</span>=<span class=\"string\">\"2020-06-12T01:58:43Z\"</span>&gt;</span></span><br><span class=\"line\">        1 月 5 天</span><br><span class=\"line\">        - <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"job/%E4%B8%80%E6%B1%BD%E6%95%B0%E6%8D%AE%E8%BF%90%E8%90%A5%E6%8E%A5%E5%8F%A3/lastFailedBuild/\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"model-link inside\"</span>&gt;</span>#14<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">data</span>=<span class=\"string\">\"18773\"</span>&gt;</span>18 秒<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"job/%E4%B8%80%E6%B1%BD%E6%95%B0%E6%8D%AE%E8%BF%90%E8%90%A5%E6%8E%A5%E5%8F%A3/build?delay=0sec\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/static/ecc2f937/images/24x24/clock.png\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"return build_id2550(this)\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"Schedule a 构建 for 一汽数据运营接口\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 24px; height: 24px; \"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Schedule a 构建 for 一2\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-clock icon-md\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">build_id2550</span>(<span class=\"params\">img</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                  <span class=\"keyword\">new</span> Ajax.Request(img.parentNode.href);</span></span><br><span class=\"line\"><span class=\"javascript\">                  hoverNotification(<span class=\"string\">'构建 scheduled'</span>, img, <span class=\"number\">-100</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">                  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span></span><br><span class=\"line\">                &#125;<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">id</span>=<span class=\"string\">\"job_3\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\" job-status-blue\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">data</span>=<span class=\"string\">\"4\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/static/ecc2f937/images/24x24/blue.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"成功\"</span> <span class=\"attr\">tooltip</span>=<span class=\"string\">\"成功\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 24px; height: 24px; \"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-blue icon-md\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"成功\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">data</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"healthReport\"</span> <span class=\"attr\">onmouseover</span>=<span class=\"string\">\"this.className='healthReport hover';return true;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        \"</span> <span class=\"attr\">onmouseout</span>=<span class=\"string\">\"this.className='healthReport';return true;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"job/%E9%95%BF%E5%9F%8E%E8%BD%A6%E4%B8%BB%E5%8D%A1%E4%B8%8A%E6%8A%A5%E6%A8%A1%E5%9D%97%E6%8E%A5%E5%8F%A3/lastBuild\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"build-health-link\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/static/ecc2f937/images/24x24/health-80plus.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"100%\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 24px; height: 24px; \"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-health-80plus icon-md\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"healthReportDetails\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">border</span>=<span class=\"string\">\"0\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">align</span>=<span class=\"string\">\"left\"</span>&gt;</span>W<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">align</span>=<span class=\"string\">\"left\"</span>&gt;</span>描述<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">align</span>=<span class=\"string\">\"right\"</span>&gt;</span>%<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">align</span>=<span class=\"string\">\"left\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/static/ecc2f937/images/16x16/health-80plus.png\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 16px; height: 16px; \"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-health-80plus icon-sm\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>构建稳定性: 最近没有失败的构建。<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">align</span>=<span class=\"string\">\"right\"</span>&gt;</span>100<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"job/%E9%95%BF%E5%9F%8E%E8%BD%A6%E4%B8%BB%E5%8D%A1%E4%B8%8A%E6%8A%A5%E6%A8%A1%E5%9D%97%E6%8E%A5%E5%8F%A3/\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"model-link inside\"</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">data</span>=<span class=\"string\">\"2020-07-17T02:30:49Z\"</span>&gt;</span></span><br><span class=\"line\">        2 小时 25 分</span><br><span class=\"line\">        - <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"job/%E9%95%BF%E5%9F%8E%E8%BD%A6%E4%B8%BB%E5%8D%A1%E4%B8%8A%E6%8A%A5%E6%A8%A1%E5%9D%97%E6%8E%A5%E5%8F%A3/lastSuccessfulBuild/\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"model-link inside\"</span>&gt;</span>#55<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">data</span>=<span class=\"string\">\"2020-07-14T08:29:55Z\"</span>&gt;</span></span><br><span class=\"line\">        2 天 20 小时</span><br><span class=\"line\">        - <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"job/%E9%95%BF%E5%9F%8E%E8%BD%A6%E4%B8%BB%E5%8D%A1%E4%B8%8A%E6%8A%A5%E6%A8%A1%E5%9D%97%E6%8E%A5%E5%8F%A3/lastFailedBuild/\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"model-link inside\"</span>&gt;</span>#50<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">data</span>=<span class=\"string\">\"26883\"</span>&gt;</span>26 秒<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"job/%E9%95%BF%E5%9F%8E%E8%BD%A6%E4%B8%BB%E5%8D%A1%E4%B8%8A%E6%8A%A5%E6%A8%A1%E5%9D%97%E6%8E%A5%E5%8F%A3/build?delay=0sec\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/static/ecc2f937/images/24x24/clock.png\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"return build_id2551(this)\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"Schedule a 构建 for 3\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 24px; height: 24px; \"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Schedule a 构建 for3\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-clock icon-md\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">build_id2551</span>(<span class=\"params\">img</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                  <span class=\"keyword\">new</span> Ajax.Request(img.parentNode.href);</span></span><br><span class=\"line\"><span class=\"javascript\">                  hoverNotification(<span class=\"string\">'构建 scheduled'</span>, img, <span class=\"number\">-100</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">                  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span></span><br><span class=\"line\">                &#125;<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://blogimage.houjiyi.com/Frp6LrxgnFrDQPbDrjYWfNkruSwW\" alt=\"image.png\"><br>1.获取动态tr个数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">'处理table方法总结'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    beforeEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> username = <span class=\"string\">\"admin\"</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> password = <span class=\"string\">\"\"</span></span><br><span class=\"line\">        <span class=\"comment\">//登陆地址</span></span><br><span class=\"line\">        cy.visit(<span class=\"string\">'http://xx.xx.xxx.xx:xxxx/login?from=%2F'</span>)</span><br><span class=\"line\">        cy.get(<span class=\"string\">'#j_username'</span>).type(username)</span><br><span class=\"line\">        cy.get(<span class=\"string\">'body &gt; div &gt; div &gt; form &gt; div:nth-child(2) &gt; input'</span>).type(password)</span><br><span class=\"line\">        cy.get(<span class=\"string\">'body &gt; div &gt; div &gt; form &gt; div.submit.formRow &gt; input'</span>).click()</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    it(<span class=\"string\">'动态获取tr'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        cy.get(<span class=\"string\">'#projectstatus &gt; tbody &gt;tr'</span>).then(<span class=\"function\">(<span class=\"params\">$el</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> tr_total = $el.length</span><br><span class=\"line\">            cy.log(tr_total)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;);&#125;)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://blogimage.houjiyi.com/FilWXH4zt8W2n0a29C72zQb8eJpQ\" alt=\"image.png\"><br>2.获取动态tr去断言td内容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">'处理table方法总结'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    beforeEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> username = <span class=\"string\">\"admin\"</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> password = <span class=\"string\">\"\"</span></span><br><span class=\"line\">        <span class=\"comment\">//登陆地址</span></span><br><span class=\"line\">        cy.visit(<span class=\"string\">'http://xx.xx.xxx.xx:xxxx/login?from=%2F'</span>)</span><br><span class=\"line\">        cy.get(<span class=\"string\">'#j_username'</span>).type(username)</span><br><span class=\"line\">        cy.get(<span class=\"string\">'body &gt; div &gt; div &gt; form &gt; div:nth-child(2) &gt; input'</span>).type(password)</span><br><span class=\"line\">        cy.get(<span class=\"string\">'body &gt; div &gt; div &gt; form &gt; div.submit.formRow &gt; input'</span>).click()</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    it(<span class=\"string\">'动态获取tr'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        cy.get(<span class=\"string\">'#projectstatus &gt; tbody &gt;tr'</span>).then(<span class=\"function\">(<span class=\"params\">$el</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> tr_total = $el.length</span><br><span class=\"line\">            cy.log(tr_total)</span><br><span class=\"line\">            <span class=\"keyword\">var</span> list =[<span class=\"string\">'29 分'</span>,<span class=\"string\">'18 秒'</span>,<span class=\"string\">\"26 秒\"</span>]</span><br><span class=\"line\">             <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; tr_total; i++) &#123;</span><br><span class=\"line\">                cy.get(<span class=\"string\">'#projectstatus &gt; tbody &gt;tr'</span>).eq(i).find(<span class=\"string\">'td:nth-child(6)'</span>)</span><br><span class=\"line\">                    .should(<span class=\"string\">'contain'</span>, list[i<span class=\"number\">-1</span>])</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;);&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://blogimage.houjiyi.com/Fo_OZgN9gABXL9Ne5UfJd_dk9vuX\" alt=\"image.png\"></p>\n<p>以上就是这篇文章的全部内容了，希望本文的内容对大家的学习或者工作具有一定的参考学习价值，如果有疑问大家可以留言交流，谢谢大家的支持。</p>\n<p>更多文章关注小编公众号：自动化测试 To share</p>\n","site":{"data":{}},"excerpt":"","more":"<p>前言<br>如何获取table内容动态tr和td的dom对象，今天给大家总结了方法。</p>\n<p>获取table中DOM元素方法总结<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">id</span>=<span class=\"string\">\"projectstatus\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sortable pane bigtable stripped-odd\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">tooltip</span>=<span class=\"string\">\"上次构建状态\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"上次构建状态\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sortheader\"</span>&gt;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span>S<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sortarrow\"</span>&gt;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">tooltip</span>=<span class=\"string\">\"构建晴雨表\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"构建晴雨表\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sortheader\"</span>&gt;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span>W<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sortarrow\"</span>&gt;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">initialsortdir</span>=<span class=\"string\">\"down\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sortheader\"</span>&gt;</span>名称<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sortarrow\"</span>&gt;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span>↓<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sortheader\"</span>&gt;</span>上次成功<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sortarrow\"</span>&gt;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sortheader\"</span>&gt;</span>上次失败<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sortarrow\"</span>&gt;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sortheader\"</span>&gt;</span>上次持续时间<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sortarrow\"</span>&gt;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">width</span>=<span class=\"string\">\"1\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sortheader\"</span>&gt;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sortarrow\"</span>&gt;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sortheader\"</span>&gt;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sortarrow\"</span>&gt;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">id</span>=<span class=\"string\">\"job_FCA玛莎拉蒂自动化测试\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\" job-status-blue\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">data</span>=<span class=\"string\">\"4\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/static/ecc2f937/images/24x24/blue.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"成功\"</span> <span class=\"attr\">tooltip</span>=<span class=\"string\">\"成功\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 24px; height: 24px; \"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-blue icon-md\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"成功\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">data</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"healthReport\"</span> <span class=\"attr\">onmouseover</span>=<span class=\"string\">\"this.className='healthReport hover';return true;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        \"</span> <span class=\"attr\">onmouseout</span>=<span class=\"string\">\"this.className='healthReport';return true;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"job/FCA%E7%8E%9B%E8%8E%8E%E6%8B%89%E8%92%82%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/lastBuild\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"build-health-link\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/static/ecc2f937/images/24x24/health-80plus.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"100%\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 24px; height: 24px; \"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-health-80plus icon-md\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"healthReportDetails\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">border</span>=<span class=\"string\">\"0\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">align</span>=<span class=\"string\">\"left\"</span>&gt;</span>W<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">align</span>=<span class=\"string\">\"left\"</span>&gt;</span>描述<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">align</span>=<span class=\"string\">\"right\"</span>&gt;</span>%<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">align</span>=<span class=\"string\">\"left\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/static/ecc2f937/images/16x16/health-80plus.png\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 16px; height: 16px; \"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-health-80plus icon-sm\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>构建稳定性: 最近没有失败的构建。<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">align</span>=<span class=\"string\">\"right\"</span>&gt;</span>100<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"job/FCA%E7%8E%9B%E8%8E%8E%E6%8B%89%E8%92%82%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"model-link inside\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">data</span>=<span class=\"string\">\"2020-07-17T02:00:14Z\"</span>&gt;</span></span><br><span class=\"line\">        2 小时 56 分</span><br><span class=\"line\">        - <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"job/FCA%E7%8E%9B%E8%8E%8E%E6%8B%89%E8%92%82%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/lastSuccessfulBuild/\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"model-link inside\"</span>&gt;</span>#26<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">data</span>=<span class=\"string\">\"2020-07-15T01:48:39Z\"</span>&gt;</span></span><br><span class=\"line\">        2 天 3 小时</span><br><span class=\"line\">        - <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"job/FCA%E7%8E%9B%E8%8E%8E%E6%8B%89%E8%92%82%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/lastFailedBuild/\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"model-link inside\"</span>&gt;</span>#7<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">data</span>=<span class=\"string\">\"1767243\"</span>&gt;</span>29 分<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"job/FCA%E7%8E%9B%E8%8E%8E%E6%8B%89%E8%92%82%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/build?delay=0sec\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/static/ecc2f937/images/24x24/clock.png\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"return build_id2549(this)\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"Schedule a 构建 for1\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 24px; height: 24px; \"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Schedule a 构建 for FCA玛莎拉蒂自动化测试\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-clock icon-md\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">build_id2549</span>(<span class=\"params\">img</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                  <span class=\"keyword\">new</span> Ajax.Request(img.parentNode.href);</span></span><br><span class=\"line\"><span class=\"javascript\">                  hoverNotification(<span class=\"string\">'构建 scheduled'</span>, img, <span class=\"number\">-100</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">                  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span></span><br><span class=\"line\">                &#125;<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">id</span>=<span class=\"string\">\"job_2\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\" job-status-blue\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">data</span>=<span class=\"string\">\"4\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/static/ecc2f937/images/24x24/blue.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"成功\"</span> <span class=\"attr\">tooltip</span>=<span class=\"string\">\"成功\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 24px; height: 24px; \"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-blue icon-md\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"成功\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">data</span>=<span class=\"string\">\"40\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"healthReport\"</span> <span class=\"attr\">onmouseover</span>=<span class=\"string\">\"this.className='healthReport hover';return true;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        \"</span> <span class=\"attr\">onmouseout</span>=<span class=\"string\">\"this.className='healthReport';return true;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"job/%E4%B8%80%E6%B1%BD%E6%95%B0%E6%8D%AE%E8%BF%90%E8%90%A5%E6%8E%A5%E5%8F%A3/lastBuild\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"build-health-link\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/static/ecc2f937/images/24x24/health-20to39.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"40%\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 24px; height: 24px; \"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-health-20to39 icon-md\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"healthReportDetails\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">border</span>=<span class=\"string\">\"0\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">align</span>=<span class=\"string\">\"left\"</span>&gt;</span>W<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">align</span>=<span class=\"string\">\"left\"</span>&gt;</span>描述<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">align</span>=<span class=\"string\">\"right\"</span>&gt;</span>%<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">align</span>=<span class=\"string\">\"left\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/static/ecc2f937/images/16x16/health-20to39.png\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 16px; height: 16px; \"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-health-20to39 icon-sm\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>构建稳定性: 最近 5 次构建中有 3 次失败。<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">align</span>=<span class=\"string\">\"right\"</span>&gt;</span>40<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"job/%E4%B8%80%E6%B1%BD%E6%95%B0%E6%8D%AE%E8%BF%90%E8%90%A5%E6%8E%A5%E5%8F%A3/\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"model-link inside\"</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">data</span>=<span class=\"string\">\"2020-06-12T02:16:03Z\"</span>&gt;</span></span><br><span class=\"line\">        1 月 5 天</span><br><span class=\"line\">        - <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"job/%E4%B8%80%E6%B1%BD%E6%95%B0%E6%8D%AE%E8%BF%90%E8%90%A5%E6%8E%A5%E5%8F%A3/lastSuccessfulBuild/\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"model-link inside\"</span>&gt;</span>#16<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">data</span>=<span class=\"string\">\"2020-06-12T01:58:43Z\"</span>&gt;</span></span><br><span class=\"line\">        1 月 5 天</span><br><span class=\"line\">        - <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"job/%E4%B8%80%E6%B1%BD%E6%95%B0%E6%8D%AE%E8%BF%90%E8%90%A5%E6%8E%A5%E5%8F%A3/lastFailedBuild/\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"model-link inside\"</span>&gt;</span>#14<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">data</span>=<span class=\"string\">\"18773\"</span>&gt;</span>18 秒<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"job/%E4%B8%80%E6%B1%BD%E6%95%B0%E6%8D%AE%E8%BF%90%E8%90%A5%E6%8E%A5%E5%8F%A3/build?delay=0sec\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/static/ecc2f937/images/24x24/clock.png\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"return build_id2550(this)\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"Schedule a 构建 for 一汽数据运营接口\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 24px; height: 24px; \"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Schedule a 构建 for 一2\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-clock icon-md\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">build_id2550</span>(<span class=\"params\">img</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                  <span class=\"keyword\">new</span> Ajax.Request(img.parentNode.href);</span></span><br><span class=\"line\"><span class=\"javascript\">                  hoverNotification(<span class=\"string\">'构建 scheduled'</span>, img, <span class=\"number\">-100</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">                  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span></span><br><span class=\"line\">                &#125;<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">id</span>=<span class=\"string\">\"job_3\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\" job-status-blue\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">data</span>=<span class=\"string\">\"4\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/static/ecc2f937/images/24x24/blue.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"成功\"</span> <span class=\"attr\">tooltip</span>=<span class=\"string\">\"成功\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 24px; height: 24px; \"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-blue icon-md\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"成功\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">data</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"healthReport\"</span> <span class=\"attr\">onmouseover</span>=<span class=\"string\">\"this.className='healthReport hover';return true;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        \"</span> <span class=\"attr\">onmouseout</span>=<span class=\"string\">\"this.className='healthReport';return true;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"job/%E9%95%BF%E5%9F%8E%E8%BD%A6%E4%B8%BB%E5%8D%A1%E4%B8%8A%E6%8A%A5%E6%A8%A1%E5%9D%97%E6%8E%A5%E5%8F%A3/lastBuild\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"build-health-link\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/static/ecc2f937/images/24x24/health-80plus.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"100%\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 24px; height: 24px; \"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-health-80plus icon-md\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"healthReportDetails\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">border</span>=<span class=\"string\">\"0\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">align</span>=<span class=\"string\">\"left\"</span>&gt;</span>W<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">align</span>=<span class=\"string\">\"left\"</span>&gt;</span>描述<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">align</span>=<span class=\"string\">\"right\"</span>&gt;</span>%<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">align</span>=<span class=\"string\">\"left\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/static/ecc2f937/images/16x16/health-80plus.png\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 16px; height: 16px; \"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-health-80plus icon-sm\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>构建稳定性: 最近没有失败的构建。<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">align</span>=<span class=\"string\">\"right\"</span>&gt;</span>100<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"job/%E9%95%BF%E5%9F%8E%E8%BD%A6%E4%B8%BB%E5%8D%A1%E4%B8%8A%E6%8A%A5%E6%A8%A1%E5%9D%97%E6%8E%A5%E5%8F%A3/\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"model-link inside\"</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">data</span>=<span class=\"string\">\"2020-07-17T02:30:49Z\"</span>&gt;</span></span><br><span class=\"line\">        2 小时 25 分</span><br><span class=\"line\">        - <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"job/%E9%95%BF%E5%9F%8E%E8%BD%A6%E4%B8%BB%E5%8D%A1%E4%B8%8A%E6%8A%A5%E6%A8%A1%E5%9D%97%E6%8E%A5%E5%8F%A3/lastSuccessfulBuild/\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"model-link inside\"</span>&gt;</span>#55<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">data</span>=<span class=\"string\">\"2020-07-14T08:29:55Z\"</span>&gt;</span></span><br><span class=\"line\">        2 天 20 小时</span><br><span class=\"line\">        - <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"job/%E9%95%BF%E5%9F%8E%E8%BD%A6%E4%B8%BB%E5%8D%A1%E4%B8%8A%E6%8A%A5%E6%A8%A1%E5%9D%97%E6%8E%A5%E5%8F%A3/lastFailedBuild/\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"model-link inside\"</span>&gt;</span>#50<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">data</span>=<span class=\"string\">\"26883\"</span>&gt;</span>26 秒<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"job/%E9%95%BF%E5%9F%8E%E8%BD%A6%E4%B8%BB%E5%8D%A1%E4%B8%8A%E6%8A%A5%E6%A8%A1%E5%9D%97%E6%8E%A5%E5%8F%A3/build?delay=0sec\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/static/ecc2f937/images/24x24/clock.png\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"return build_id2551(this)\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"Schedule a 构建 for 3\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 24px; height: 24px; \"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Schedule a 构建 for3\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-clock icon-md\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">build_id2551</span>(<span class=\"params\">img</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                  <span class=\"keyword\">new</span> Ajax.Request(img.parentNode.href);</span></span><br><span class=\"line\"><span class=\"javascript\">                  hoverNotification(<span class=\"string\">'构建 scheduled'</span>, img, <span class=\"number\">-100</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">                  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span></span><br><span class=\"line\">                &#125;<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://blogimage.houjiyi.com/Frp6LrxgnFrDQPbDrjYWfNkruSwW\" alt=\"image.png\"><br>1.获取动态tr个数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">'处理table方法总结'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    beforeEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> username = <span class=\"string\">\"admin\"</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> password = <span class=\"string\">\"\"</span></span><br><span class=\"line\">        <span class=\"comment\">//登陆地址</span></span><br><span class=\"line\">        cy.visit(<span class=\"string\">'http://xx.xx.xxx.xx:xxxx/login?from=%2F'</span>)</span><br><span class=\"line\">        cy.get(<span class=\"string\">'#j_username'</span>).type(username)</span><br><span class=\"line\">        cy.get(<span class=\"string\">'body &gt; div &gt; div &gt; form &gt; div:nth-child(2) &gt; input'</span>).type(password)</span><br><span class=\"line\">        cy.get(<span class=\"string\">'body &gt; div &gt; div &gt; form &gt; div.submit.formRow &gt; input'</span>).click()</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    it(<span class=\"string\">'动态获取tr'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        cy.get(<span class=\"string\">'#projectstatus &gt; tbody &gt;tr'</span>).then(<span class=\"function\">(<span class=\"params\">$el</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> tr_total = $el.length</span><br><span class=\"line\">            cy.log(tr_total)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;);&#125;)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://blogimage.houjiyi.com/FilWXH4zt8W2n0a29C72zQb8eJpQ\" alt=\"image.png\"><br>2.获取动态tr去断言td内容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">'处理table方法总结'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    beforeEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> username = <span class=\"string\">\"admin\"</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> password = <span class=\"string\">\"\"</span></span><br><span class=\"line\">        <span class=\"comment\">//登陆地址</span></span><br><span class=\"line\">        cy.visit(<span class=\"string\">'http://xx.xx.xxx.xx:xxxx/login?from=%2F'</span>)</span><br><span class=\"line\">        cy.get(<span class=\"string\">'#j_username'</span>).type(username)</span><br><span class=\"line\">        cy.get(<span class=\"string\">'body &gt; div &gt; div &gt; form &gt; div:nth-child(2) &gt; input'</span>).type(password)</span><br><span class=\"line\">        cy.get(<span class=\"string\">'body &gt; div &gt; div &gt; form &gt; div.submit.formRow &gt; input'</span>).click()</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    it(<span class=\"string\">'动态获取tr'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        cy.get(<span class=\"string\">'#projectstatus &gt; tbody &gt;tr'</span>).then(<span class=\"function\">(<span class=\"params\">$el</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> tr_total = $el.length</span><br><span class=\"line\">            cy.log(tr_total)</span><br><span class=\"line\">            <span class=\"keyword\">var</span> list =[<span class=\"string\">'29 分'</span>,<span class=\"string\">'18 秒'</span>,<span class=\"string\">\"26 秒\"</span>]</span><br><span class=\"line\">             <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; tr_total; i++) &#123;</span><br><span class=\"line\">                cy.get(<span class=\"string\">'#projectstatus &gt; tbody &gt;tr'</span>).eq(i).find(<span class=\"string\">'td:nth-child(6)'</span>)</span><br><span class=\"line\">                    .should(<span class=\"string\">'contain'</span>, list[i<span class=\"number\">-1</span>])</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;);&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://blogimage.houjiyi.com/Fo_OZgN9gABXL9Ne5UfJd_dk9vuX\" alt=\"image.png\"></p>\n<p>以上就是这篇文章的全部内容了，希望本文的内容对大家的学习或者工作具有一定的参考学习价值，如果有疑问大家可以留言交流，谢谢大家的支持。</p>\n<p>更多文章关注小编公众号：自动化测试 To share</p>\n"},{"title":"Cypress 可操作事件","toc":false,"date":"2021-09-17T05:57:44.000Z","_content":"\n- click()\n![image.png](https://blogimage.houjiyi.com/FnGC0_r2pbgwf072BWHK8xhoYvjJ)\n\n单击DOM元素语法如下：\n\n```js\ncy.get('.action-btn').click()\n// clicking in the center of the element is the default\ncy.get('#action-canvas').click()\n\ncy.get('#action-canvas').click('topLeft')\ncy.get('#action-canvas').click('top')\ncy.get('#action-canvas').click('topRight')\ncy.get('#action-canvas').click('left')\ncy.get('#action-canvas').click('right')\ncy.get('#action-canvas').click('bottomLeft')\ncy.get('#action-canvas').click('bottom')\ncy.get('#action-canvas').click('bottomRight')\n\n// .click() accepts a an x and y coordinate\n// that controls where the click occurs :)\ncy.get('#action-canvas')\n  .click(80, 75)\n  .click(170, 75)\n  .click(80, 165)\n  .click(100, 185)\n  .click(125, 190)\n  .click(150, 185)\n  .click(170, 165)\n\n// click multiple elements by passing multiple: true\ncy.get('.action-labels>.label').click({ multiple: true })\n\n// Ignore error checking prior to clicking\ncy.get('.action-opacity>.btn').click({ force: true }\n```\n\n- dblclick()\n双击DoM元素语法如下:\n```js\n//双击DoM元素\ndblclick()\n//带参数的双击\ndblclick(options)\n```\n带参数跟上面click完全一致\n\n- rightclick()\n右击DoM元素语法如下:\n```js\n//右击DoM元素\nrightclick()\n//带参数的双击\nrightclick(options)\n```\n\n带参数跟上面click完全一致\n\n- type()\n\n往DOM元素中输入\n\ntype()语法如下:\n\n```js\n//输入文本\ntype(text)\n//输入文本带参数的\nrightclick(text,options)\n```\n\ntext参数支持的其他如下字符如下：\n\n1. {backspace} ：删除光标左侧的字符\n2. {det} : 删除光标右侧的字符\n3. {downarrow} : 向下移动光标\n4. {end} : 将光标移到行尾\n5. {enter} ：按enter建\n6. {esc} : 按esc建\n7. {home} ： 将光标移到行首\n8. {insert} ：在光标右侧插入字符\n9. {leftarrow} ：向左移动光标\n10. {pagedowm} ：向下滚动\n11. {pageup} ：向下滚动\n12. {rigtharrow} ：向右移动光标\n13. {selectall} ：通过选择范围来选择所有文本\n14. {uparrow} ：向上移动光标\n\n- clear()\nclear()清除输入或文本区域的值，语法如下：\n```js\n//清除\ncy.get().clear()\n```\n\n- check()\n针对\\<input\\>类型的输入框（radio button） 或者复选框（check box）Cypree提供了check和uncheck方法直接操作。语法如下：\n```js \n//选中\n.check()\n//选中一个选项，值value\n.check(value)\n//选中多个选项\n.check(values)\n```\n\n- uncheck()\n\nuncheck()和check用法相反用于取消单选框或者复选框语法参考check()\n\n- .selelct()\nselect()用来在\\<select\\>中选中一个\\<option\\>。语法如下\n```js\n.select(value)\n```\n\n- .trigger()\n用来在DOM元素上触发事件。用法如下：\n\n.trigger(evenName)\n\n```javascript\n//按下光标\ncy.button().trigger('mousedown')\n//移动光标到元素之上\ncy.button().trigger('mouseover')\n//抬起光标\ncy.button().trigger('mouseleave')\n```\n\n以上就是这篇文章的全部内容了，希望本文的内容对大家的学习或者工作具有一定的参考学习价值，如果有疑问大家可以留言交流，谢谢大家的支持。","source":"_posts/Cypress-可操作事件.md","raw":"---\ntitle: Cypress 可操作事件\ntags:\n  - Web开发\ncategories:\n  - 自动化测试\ntoc: false\ndate: 2021-09-17 13:57:44\n---\n\n- click()\n![image.png](https://blogimage.houjiyi.com/FnGC0_r2pbgwf072BWHK8xhoYvjJ)\n\n单击DOM元素语法如下：\n\n```js\ncy.get('.action-btn').click()\n// clicking in the center of the element is the default\ncy.get('#action-canvas').click()\n\ncy.get('#action-canvas').click('topLeft')\ncy.get('#action-canvas').click('top')\ncy.get('#action-canvas').click('topRight')\ncy.get('#action-canvas').click('left')\ncy.get('#action-canvas').click('right')\ncy.get('#action-canvas').click('bottomLeft')\ncy.get('#action-canvas').click('bottom')\ncy.get('#action-canvas').click('bottomRight')\n\n// .click() accepts a an x and y coordinate\n// that controls where the click occurs :)\ncy.get('#action-canvas')\n  .click(80, 75)\n  .click(170, 75)\n  .click(80, 165)\n  .click(100, 185)\n  .click(125, 190)\n  .click(150, 185)\n  .click(170, 165)\n\n// click multiple elements by passing multiple: true\ncy.get('.action-labels>.label').click({ multiple: true })\n\n// Ignore error checking prior to clicking\ncy.get('.action-opacity>.btn').click({ force: true }\n```\n\n- dblclick()\n双击DoM元素语法如下:\n```js\n//双击DoM元素\ndblclick()\n//带参数的双击\ndblclick(options)\n```\n带参数跟上面click完全一致\n\n- rightclick()\n右击DoM元素语法如下:\n```js\n//右击DoM元素\nrightclick()\n//带参数的双击\nrightclick(options)\n```\n\n带参数跟上面click完全一致\n\n- type()\n\n往DOM元素中输入\n\ntype()语法如下:\n\n```js\n//输入文本\ntype(text)\n//输入文本带参数的\nrightclick(text,options)\n```\n\ntext参数支持的其他如下字符如下：\n\n1. {backspace} ：删除光标左侧的字符\n2. {det} : 删除光标右侧的字符\n3. {downarrow} : 向下移动光标\n4. {end} : 将光标移到行尾\n5. {enter} ：按enter建\n6. {esc} : 按esc建\n7. {home} ： 将光标移到行首\n8. {insert} ：在光标右侧插入字符\n9. {leftarrow} ：向左移动光标\n10. {pagedowm} ：向下滚动\n11. {pageup} ：向下滚动\n12. {rigtharrow} ：向右移动光标\n13. {selectall} ：通过选择范围来选择所有文本\n14. {uparrow} ：向上移动光标\n\n- clear()\nclear()清除输入或文本区域的值，语法如下：\n```js\n//清除\ncy.get().clear()\n```\n\n- check()\n针对\\<input\\>类型的输入框（radio button） 或者复选框（check box）Cypree提供了check和uncheck方法直接操作。语法如下：\n```js \n//选中\n.check()\n//选中一个选项，值value\n.check(value)\n//选中多个选项\n.check(values)\n```\n\n- uncheck()\n\nuncheck()和check用法相反用于取消单选框或者复选框语法参考check()\n\n- .selelct()\nselect()用来在\\<select\\>中选中一个\\<option\\>。语法如下\n```js\n.select(value)\n```\n\n- .trigger()\n用来在DOM元素上触发事件。用法如下：\n\n.trigger(evenName)\n\n```javascript\n//按下光标\ncy.button().trigger('mousedown')\n//移动光标到元素之上\ncy.button().trigger('mouseover')\n//抬起光标\ncy.button().trigger('mouseleave')\n```\n\n以上就是这篇文章的全部内容了，希望本文的内容对大家的学习或者工作具有一定的参考学习价值，如果有疑问大家可以留言交流，谢谢大家的支持。","slug":"Cypress-可操作事件","published":1,"updated":"2021-09-22T06:40:06.266Z","_id":"ckto0818l00007cs69xmilih8","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li>click()<br><img src=\"https://blogimage.houjiyi.com/FnGC0_r2pbgwf072BWHK8xhoYvjJ\" alt=\"image.png\"></li>\n</ul>\n<p>单击DOM元素语法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cy.get(<span class=\"string\">'.action-btn'</span>).click()</span><br><span class=\"line\"><span class=\"comment\">// clicking in the center of the element is the default</span></span><br><span class=\"line\">cy.get(<span class=\"string\">'#action-canvas'</span>).click()</span><br><span class=\"line\"></span><br><span class=\"line\">cy.get(<span class=\"string\">'#action-canvas'</span>).click(<span class=\"string\">'topLeft'</span>)</span><br><span class=\"line\">cy.get(<span class=\"string\">'#action-canvas'</span>).click(<span class=\"string\">'top'</span>)</span><br><span class=\"line\">cy.get(<span class=\"string\">'#action-canvas'</span>).click(<span class=\"string\">'topRight'</span>)</span><br><span class=\"line\">cy.get(<span class=\"string\">'#action-canvas'</span>).click(<span class=\"string\">'left'</span>)</span><br><span class=\"line\">cy.get(<span class=\"string\">'#action-canvas'</span>).click(<span class=\"string\">'right'</span>)</span><br><span class=\"line\">cy.get(<span class=\"string\">'#action-canvas'</span>).click(<span class=\"string\">'bottomLeft'</span>)</span><br><span class=\"line\">cy.get(<span class=\"string\">'#action-canvas'</span>).click(<span class=\"string\">'bottom'</span>)</span><br><span class=\"line\">cy.get(<span class=\"string\">'#action-canvas'</span>).click(<span class=\"string\">'bottomRight'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// .click() accepts a an x and y coordinate</span></span><br><span class=\"line\"><span class=\"comment\">// that controls where the click occurs :)</span></span><br><span class=\"line\">cy.get(<span class=\"string\">'#action-canvas'</span>)</span><br><span class=\"line\">  .click(<span class=\"number\">80</span>, <span class=\"number\">75</span>)</span><br><span class=\"line\">  .click(<span class=\"number\">170</span>, <span class=\"number\">75</span>)</span><br><span class=\"line\">  .click(<span class=\"number\">80</span>, <span class=\"number\">165</span>)</span><br><span class=\"line\">  .click(<span class=\"number\">100</span>, <span class=\"number\">185</span>)</span><br><span class=\"line\">  .click(<span class=\"number\">125</span>, <span class=\"number\">190</span>)</span><br><span class=\"line\">  .click(<span class=\"number\">150</span>, <span class=\"number\">185</span>)</span><br><span class=\"line\">  .click(<span class=\"number\">170</span>, <span class=\"number\">165</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// click multiple elements by passing multiple: true</span></span><br><span class=\"line\">cy.get(<span class=\"string\">'.action-labels&gt;.label'</span>).click(&#123; <span class=\"attr\">multiple</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Ignore error checking prior to clicking</span></span><br><span class=\"line\">cy.get(<span class=\"string\">'.action-opacity&gt;.btn'</span>).click(&#123; <span class=\"attr\">force</span>: <span class=\"literal\">true</span> &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>dblclick()<br>双击DoM元素语法如下:<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//双击DoM元素</span></span><br><span class=\"line\">dblclick()</span><br><span class=\"line\"><span class=\"comment\">//带参数的双击</span></span><br><span class=\"line\">dblclick(options)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>带参数跟上面click完全一致</p>\n<ul>\n<li>rightclick()<br>右击DoM元素语法如下:<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//右击DoM元素</span></span><br><span class=\"line\">rightclick()</span><br><span class=\"line\"><span class=\"comment\">//带参数的双击</span></span><br><span class=\"line\">rightclick(options)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>带参数跟上面click完全一致</p>\n<ul>\n<li>type()</li>\n</ul>\n<p>往DOM元素中输入</p>\n<p>type()语法如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//输入文本</span></span><br><span class=\"line\">type(text)</span><br><span class=\"line\"><span class=\"comment\">//输入文本带参数的</span></span><br><span class=\"line\">rightclick(text,options)</span><br></pre></td></tr></table></figure>\n<p>text参数支持的其他如下字符如下：</p>\n<ol>\n<li>{backspace} ：删除光标左侧的字符</li>\n<li>{det} : 删除光标右侧的字符</li>\n<li>{downarrow} : 向下移动光标</li>\n<li>{end} : 将光标移到行尾</li>\n<li>{enter} ：按enter建</li>\n<li>{esc} : 按esc建</li>\n<li>{home} ： 将光标移到行首</li>\n<li>{insert} ：在光标右侧插入字符</li>\n<li>{leftarrow} ：向左移动光标</li>\n<li>{pagedowm} ：向下滚动</li>\n<li>{pageup} ：向下滚动</li>\n<li>{rigtharrow} ：向右移动光标</li>\n<li>{selectall} ：通过选择范围来选择所有文本</li>\n<li>{uparrow} ：向上移动光标</li>\n</ol>\n<ul>\n<li><p>clear()<br>clear()清除输入或文本区域的值，语法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//清除</span></span><br><span class=\"line\">cy.get().clear()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>check()<br>针对\\&lt;input>类型的输入框（radio button） 或者复选框（check box）Cypree提供了check和uncheck方法直接操作。语法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//选中</span></span><br><span class=\"line\">.check()</span><br><span class=\"line\"><span class=\"comment\">//选中一个选项，值value</span></span><br><span class=\"line\">.check(value)</span><br><span class=\"line\"><span class=\"comment\">//选中多个选项</span></span><br><span class=\"line\">.check(values)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>uncheck()</p>\n</li>\n</ul>\n<p>uncheck()和check用法相反用于取消单选框或者复选框语法参考check()</p>\n<ul>\n<li><p>.selelct()<br>select()用来在\\&lt;select>中选中一个\\&lt;option>。语法如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.select(value)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>.trigger()<br>用来在DOM元素上触发事件。用法如下：</p>\n</li>\n</ul>\n<p>.trigger(evenName)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//按下光标</span></span><br><span class=\"line\">cy.button().trigger(<span class=\"string\">'mousedown'</span>)</span><br><span class=\"line\"><span class=\"comment\">//移动光标到元素之上</span></span><br><span class=\"line\">cy.button().trigger(<span class=\"string\">'mouseover'</span>)</span><br><span class=\"line\"><span class=\"comment\">//抬起光标</span></span><br><span class=\"line\">cy.button().trigger(<span class=\"string\">'mouseleave'</span>)</span><br></pre></td></tr></table></figure>\n<p>以上就是这篇文章的全部内容了，希望本文的内容对大家的学习或者工作具有一定的参考学习价值，如果有疑问大家可以留言交流，谢谢大家的支持。</p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>click()<br><img src=\"https://blogimage.houjiyi.com/FnGC0_r2pbgwf072BWHK8xhoYvjJ\" alt=\"image.png\"></li>\n</ul>\n<p>单击DOM元素语法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cy.get(<span class=\"string\">'.action-btn'</span>).click()</span><br><span class=\"line\"><span class=\"comment\">// clicking in the center of the element is the default</span></span><br><span class=\"line\">cy.get(<span class=\"string\">'#action-canvas'</span>).click()</span><br><span class=\"line\"></span><br><span class=\"line\">cy.get(<span class=\"string\">'#action-canvas'</span>).click(<span class=\"string\">'topLeft'</span>)</span><br><span class=\"line\">cy.get(<span class=\"string\">'#action-canvas'</span>).click(<span class=\"string\">'top'</span>)</span><br><span class=\"line\">cy.get(<span class=\"string\">'#action-canvas'</span>).click(<span class=\"string\">'topRight'</span>)</span><br><span class=\"line\">cy.get(<span class=\"string\">'#action-canvas'</span>).click(<span class=\"string\">'left'</span>)</span><br><span class=\"line\">cy.get(<span class=\"string\">'#action-canvas'</span>).click(<span class=\"string\">'right'</span>)</span><br><span class=\"line\">cy.get(<span class=\"string\">'#action-canvas'</span>).click(<span class=\"string\">'bottomLeft'</span>)</span><br><span class=\"line\">cy.get(<span class=\"string\">'#action-canvas'</span>).click(<span class=\"string\">'bottom'</span>)</span><br><span class=\"line\">cy.get(<span class=\"string\">'#action-canvas'</span>).click(<span class=\"string\">'bottomRight'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// .click() accepts a an x and y coordinate</span></span><br><span class=\"line\"><span class=\"comment\">// that controls where the click occurs :)</span></span><br><span class=\"line\">cy.get(<span class=\"string\">'#action-canvas'</span>)</span><br><span class=\"line\">  .click(<span class=\"number\">80</span>, <span class=\"number\">75</span>)</span><br><span class=\"line\">  .click(<span class=\"number\">170</span>, <span class=\"number\">75</span>)</span><br><span class=\"line\">  .click(<span class=\"number\">80</span>, <span class=\"number\">165</span>)</span><br><span class=\"line\">  .click(<span class=\"number\">100</span>, <span class=\"number\">185</span>)</span><br><span class=\"line\">  .click(<span class=\"number\">125</span>, <span class=\"number\">190</span>)</span><br><span class=\"line\">  .click(<span class=\"number\">150</span>, <span class=\"number\">185</span>)</span><br><span class=\"line\">  .click(<span class=\"number\">170</span>, <span class=\"number\">165</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// click multiple elements by passing multiple: true</span></span><br><span class=\"line\">cy.get(<span class=\"string\">'.action-labels&gt;.label'</span>).click(&#123; <span class=\"attr\">multiple</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Ignore error checking prior to clicking</span></span><br><span class=\"line\">cy.get(<span class=\"string\">'.action-opacity&gt;.btn'</span>).click(&#123; <span class=\"attr\">force</span>: <span class=\"literal\">true</span> &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>dblclick()<br>双击DoM元素语法如下:<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//双击DoM元素</span></span><br><span class=\"line\">dblclick()</span><br><span class=\"line\"><span class=\"comment\">//带参数的双击</span></span><br><span class=\"line\">dblclick(options)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>带参数跟上面click完全一致</p>\n<ul>\n<li>rightclick()<br>右击DoM元素语法如下:<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//右击DoM元素</span></span><br><span class=\"line\">rightclick()</span><br><span class=\"line\"><span class=\"comment\">//带参数的双击</span></span><br><span class=\"line\">rightclick(options)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>带参数跟上面click完全一致</p>\n<ul>\n<li>type()</li>\n</ul>\n<p>往DOM元素中输入</p>\n<p>type()语法如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//输入文本</span></span><br><span class=\"line\">type(text)</span><br><span class=\"line\"><span class=\"comment\">//输入文本带参数的</span></span><br><span class=\"line\">rightclick(text,options)</span><br></pre></td></tr></table></figure>\n<p>text参数支持的其他如下字符如下：</p>\n<ol>\n<li>{backspace} ：删除光标左侧的字符</li>\n<li>{det} : 删除光标右侧的字符</li>\n<li>{downarrow} : 向下移动光标</li>\n<li>{end} : 将光标移到行尾</li>\n<li>{enter} ：按enter建</li>\n<li>{esc} : 按esc建</li>\n<li>{home} ： 将光标移到行首</li>\n<li>{insert} ：在光标右侧插入字符</li>\n<li>{leftarrow} ：向左移动光标</li>\n<li>{pagedowm} ：向下滚动</li>\n<li>{pageup} ：向下滚动</li>\n<li>{rigtharrow} ：向右移动光标</li>\n<li>{selectall} ：通过选择范围来选择所有文本</li>\n<li>{uparrow} ：向上移动光标</li>\n</ol>\n<ul>\n<li><p>clear()<br>clear()清除输入或文本区域的值，语法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//清除</span></span><br><span class=\"line\">cy.get().clear()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>check()<br>针对\\&lt;input>类型的输入框（radio button） 或者复选框（check box）Cypree提供了check和uncheck方法直接操作。语法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//选中</span></span><br><span class=\"line\">.check()</span><br><span class=\"line\"><span class=\"comment\">//选中一个选项，值value</span></span><br><span class=\"line\">.check(value)</span><br><span class=\"line\"><span class=\"comment\">//选中多个选项</span></span><br><span class=\"line\">.check(values)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>uncheck()</p>\n</li>\n</ul>\n<p>uncheck()和check用法相反用于取消单选框或者复选框语法参考check()</p>\n<ul>\n<li><p>.selelct()<br>select()用来在\\&lt;select>中选中一个\\&lt;option>。语法如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.select(value)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>.trigger()<br>用来在DOM元素上触发事件。用法如下：</p>\n</li>\n</ul>\n<p>.trigger(evenName)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//按下光标</span></span><br><span class=\"line\">cy.button().trigger(<span class=\"string\">'mousedown'</span>)</span><br><span class=\"line\"><span class=\"comment\">//移动光标到元素之上</span></span><br><span class=\"line\">cy.button().trigger(<span class=\"string\">'mouseover'</span>)</span><br><span class=\"line\"><span class=\"comment\">//抬起光标</span></span><br><span class=\"line\">cy.button().trigger(<span class=\"string\">'mouseleave'</span>)</span><br></pre></td></tr></table></figure>\n<p>以上就是这篇文章的全部内容了，希望本文的内容对大家的学习或者工作具有一定的参考学习价值，如果有疑问大家可以留言交流，谢谢大家的支持。</p>\n"},{"title":"Cypress 常见操作","toc":false,"date":"2021-09-17T05:52:36.000Z","_content":"\n- 访问某个link\n```javascript\n//访问百度\ncy.visit('httpf://www.baidu.com)\n```\n\n- 获取当前页面URL\n```javascript\n//获取页面地址\ncy.url()\ncy.url().should('contain','link')\n```\n\n- 刷新页面\n```javascript\n// 等同于F5\ncy.reaload()\n// 等同于ctrl+F5强制刷新\ncy.radload(true)\n```\n\n- 设置窗口\n```javascript\n//在cypress.json中添加\n{ \n   'viewportWidth':'1000',\n   'viewportHeight':'600'\n}\n//运行中设置\ncy.viewpoint(1024,768)\n```\n\n- 前进后退\n```js\n//后退\ncy.go('back)\ncy.go(-1)\n//前进\ncy.go('forward)\ncy.go(1)\n```\n\n- 判断元素是否存在\n```js\n//判断check-box是否可见\ncy.get('.check-box).should('be.visible')\n//判断元素存在\ncy.get('.check-box).should('exist')\n//判断元素不存在\ncy.get('.check-box).should('no exist')\n```\n\n- 条件判断\n```js\n//利用jquery来判断元素是否存在\nconst btn = '#btn'\nCypress.$(btn).length>0{\n cy.get(btn).click()\n}\n```\n\n- 获取元素属性值\n```js\n//获取元素btn的文本\ncy.get('#btn').then(function(){\n   const btnTxt = $btn.text()\n   cy.log(btnTxt)\n})\n```\n\n- 清除文本\n```js\n//清除input输入的值\ncy.get('div>a').clear()\ncycy.get('div>a').clear().type()\n```\n\n- 操作单选/多选按钮\n```js\n//选中\ncy.get('radio').check('us)\n//取消选中\ncy.get('radio').uncheck('us)\n```\n\n- 操作下拉菜单\n```js\ncy.get('select').select('下拉选项的值')\ncy.get('li').eq(0).click()\n```\n\n- 操作弹出框\n```js\ncy.get('iframe')\n    .then(function($iframe){\n     //定义要查找的元素\n     const $body = $iframe.contents().find('body')\n     //在查找到的元素中查找btn并单击\n     cy.wrap($body).find('#bin').click()\n})\n```\n\n- 操作被覆盖带元素\n```js\ncy.get('#btn').click({force:true})\n```\n\n- 模拟键盘操作\n```js\ncy.get('input').type('111')\ncy.get('input').type('{enter}')\n```\n\n以上就是这篇文章的全部内容了，希望本文的内容对大家的学习或者工作具有一定的参考学习价值，如果有疑问大家可以留言交流，谢谢大家的支持。","source":"_posts/Cypress-常见操作.md","raw":"---\ntitle: Cypress 常见操作\ntags:\n  - Web开发\ncategories:\n  - 自动化测试\ntoc: false\ndate: 2021-09-17 13:52:36\n---\n\n- 访问某个link\n```javascript\n//访问百度\ncy.visit('httpf://www.baidu.com)\n```\n\n- 获取当前页面URL\n```javascript\n//获取页面地址\ncy.url()\ncy.url().should('contain','link')\n```\n\n- 刷新页面\n```javascript\n// 等同于F5\ncy.reaload()\n// 等同于ctrl+F5强制刷新\ncy.radload(true)\n```\n\n- 设置窗口\n```javascript\n//在cypress.json中添加\n{ \n   'viewportWidth':'1000',\n   'viewportHeight':'600'\n}\n//运行中设置\ncy.viewpoint(1024,768)\n```\n\n- 前进后退\n```js\n//后退\ncy.go('back)\ncy.go(-1)\n//前进\ncy.go('forward)\ncy.go(1)\n```\n\n- 判断元素是否存在\n```js\n//判断check-box是否可见\ncy.get('.check-box).should('be.visible')\n//判断元素存在\ncy.get('.check-box).should('exist')\n//判断元素不存在\ncy.get('.check-box).should('no exist')\n```\n\n- 条件判断\n```js\n//利用jquery来判断元素是否存在\nconst btn = '#btn'\nCypress.$(btn).length>0{\n cy.get(btn).click()\n}\n```\n\n- 获取元素属性值\n```js\n//获取元素btn的文本\ncy.get('#btn').then(function(){\n   const btnTxt = $btn.text()\n   cy.log(btnTxt)\n})\n```\n\n- 清除文本\n```js\n//清除input输入的值\ncy.get('div>a').clear()\ncycy.get('div>a').clear().type()\n```\n\n- 操作单选/多选按钮\n```js\n//选中\ncy.get('radio').check('us)\n//取消选中\ncy.get('radio').uncheck('us)\n```\n\n- 操作下拉菜单\n```js\ncy.get('select').select('下拉选项的值')\ncy.get('li').eq(0).click()\n```\n\n- 操作弹出框\n```js\ncy.get('iframe')\n    .then(function($iframe){\n     //定义要查找的元素\n     const $body = $iframe.contents().find('body')\n     //在查找到的元素中查找btn并单击\n     cy.wrap($body).find('#bin').click()\n})\n```\n\n- 操作被覆盖带元素\n```js\ncy.get('#btn').click({force:true})\n```\n\n- 模拟键盘操作\n```js\ncy.get('input').type('111')\ncy.get('input').type('{enter}')\n```\n\n以上就是这篇文章的全部内容了，希望本文的内容对大家的学习或者工作具有一定的参考学习价值，如果有疑问大家可以留言交流，谢谢大家的支持。","slug":"Cypress-常见操作","published":1,"updated":"2021-09-22T06:41:06.149Z","_id":"ckto0818o00017cs6qqlkhu81","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><p>访问某个link</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//访问百度</span></span><br><span class=\"line\">cy.visit(<span class=\"string\">'httpf://www.baidu.com)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取当前页面URL</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取页面地址</span></span><br><span class=\"line\">cy.url()</span><br><span class=\"line\">cy.url().should(<span class=\"string\">'contain'</span>,<span class=\"string\">'link'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>刷新页面</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 等同于F5</span></span><br><span class=\"line\">cy.reaload()</span><br><span class=\"line\"><span class=\"comment\">// 等同于ctrl+F5强制刷新</span></span><br><span class=\"line\">cy.radload(<span class=\"literal\">true</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置窗口</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在cypress.json中添加</span></span><br><span class=\"line\">&#123; </span><br><span class=\"line\">   <span class=\"string\">'viewportWidth'</span>:<span class=\"string\">'1000'</span>,</span><br><span class=\"line\">   <span class=\"string\">'viewportHeight'</span>:<span class=\"string\">'600'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//运行中设置</span></span><br><span class=\"line\">cy.viewpoint(<span class=\"number\">1024</span>,<span class=\"number\">768</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>前进后退</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//后退</span></span><br><span class=\"line\">cy.go(<span class=\"string\">'back)</span></span><br><span class=\"line\"><span class=\"string\">cy.go(-1)</span></span><br><span class=\"line\"><span class=\"string\">//前进</span></span><br><span class=\"line\"><span class=\"string\">cy.go('</span>forward)</span><br><span class=\"line\">cy.go(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>判断元素是否存在</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//判断check-box是否可见</span></span><br><span class=\"line\">cy.get(<span class=\"string\">'.check-box).should('</span>be.visible<span class=\"string\">')</span></span><br><span class=\"line\"><span class=\"string\">//判断元素存在</span></span><br><span class=\"line\"><span class=\"string\">cy.get('</span>.check-box).should(<span class=\"string\">'exist'</span>)</span><br><span class=\"line\"><span class=\"comment\">//判断元素不存在</span></span><br><span class=\"line\">cy.get(<span class=\"string\">'.check-box).should('</span>no exist<span class=\"string\">')</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>条件判断</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//利用jquery来判断元素是否存在</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> btn = <span class=\"string\">'#btn'</span></span><br><span class=\"line\">Cypress.$(btn).length&gt;<span class=\"number\">0</span>&#123;</span><br><span class=\"line\"> cy.get(btn).click()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取元素属性值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取元素btn的文本</span></span><br><span class=\"line\">cy.get(<span class=\"string\">'#btn'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> btnTxt = $btn.text()</span><br><span class=\"line\">   cy.log(btnTxt)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>清除文本</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//清除input输入的值</span></span><br><span class=\"line\">cy.get(<span class=\"string\">'div&gt;a'</span>).clear()</span><br><span class=\"line\">cycy.get(<span class=\"string\">'div&gt;a'</span>).clear().type()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>操作单选/多选按钮</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//选中</span></span><br><span class=\"line\">cy.get(<span class=\"string\">'radio'</span>).check(<span class=\"string\">'us)</span></span><br><span class=\"line\"><span class=\"string\">//取消选中</span></span><br><span class=\"line\"><span class=\"string\">cy.get('</span>radio<span class=\"string\">').uncheck('</span>us)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>操作下拉菜单</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cy.get(<span class=\"string\">'select'</span>).select(<span class=\"string\">'下拉选项的值'</span>)</span><br><span class=\"line\">cy.get(<span class=\"string\">'li'</span>).eq(<span class=\"number\">0</span>).click()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>操作弹出框</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cy.get(<span class=\"string\">'iframe'</span>)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$iframe</span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//定义要查找的元素</span></span><br><span class=\"line\">     <span class=\"keyword\">const</span> $body = $iframe.contents().find(<span class=\"string\">'body'</span>)</span><br><span class=\"line\">     <span class=\"comment\">//在查找到的元素中查找btn并单击</span></span><br><span class=\"line\">     cy.wrap($body).find(<span class=\"string\">'#bin'</span>).click()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>操作被覆盖带元素</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cy.get(<span class=\"string\">'#btn'</span>).click(&#123;<span class=\"attr\">force</span>:<span class=\"literal\">true</span>&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>模拟键盘操作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cy.get(<span class=\"string\">'input'</span>).type(<span class=\"string\">'111'</span>)</span><br><span class=\"line\">cy.get(<span class=\"string\">'input'</span>).type(<span class=\"string\">'&#123;enter&#125;'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>以上就是这篇文章的全部内容了，希望本文的内容对大家的学习或者工作具有一定的参考学习价值，如果有疑问大家可以留言交流，谢谢大家的支持。</p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>访问某个link</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//访问百度</span></span><br><span class=\"line\">cy.visit(<span class=\"string\">'httpf://www.baidu.com)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取当前页面URL</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取页面地址</span></span><br><span class=\"line\">cy.url()</span><br><span class=\"line\">cy.url().should(<span class=\"string\">'contain'</span>,<span class=\"string\">'link'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>刷新页面</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 等同于F5</span></span><br><span class=\"line\">cy.reaload()</span><br><span class=\"line\"><span class=\"comment\">// 等同于ctrl+F5强制刷新</span></span><br><span class=\"line\">cy.radload(<span class=\"literal\">true</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置窗口</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在cypress.json中添加</span></span><br><span class=\"line\">&#123; </span><br><span class=\"line\">   <span class=\"string\">'viewportWidth'</span>:<span class=\"string\">'1000'</span>,</span><br><span class=\"line\">   <span class=\"string\">'viewportHeight'</span>:<span class=\"string\">'600'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//运行中设置</span></span><br><span class=\"line\">cy.viewpoint(<span class=\"number\">1024</span>,<span class=\"number\">768</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>前进后退</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//后退</span></span><br><span class=\"line\">cy.go(<span class=\"string\">'back)</span></span><br><span class=\"line\"><span class=\"string\">cy.go(-1)</span></span><br><span class=\"line\"><span class=\"string\">//前进</span></span><br><span class=\"line\"><span class=\"string\">cy.go('</span>forward)</span><br><span class=\"line\">cy.go(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>判断元素是否存在</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//判断check-box是否可见</span></span><br><span class=\"line\">cy.get(<span class=\"string\">'.check-box).should('</span>be.visible<span class=\"string\">')</span></span><br><span class=\"line\"><span class=\"string\">//判断元素存在</span></span><br><span class=\"line\"><span class=\"string\">cy.get('</span>.check-box).should(<span class=\"string\">'exist'</span>)</span><br><span class=\"line\"><span class=\"comment\">//判断元素不存在</span></span><br><span class=\"line\">cy.get(<span class=\"string\">'.check-box).should('</span>no exist<span class=\"string\">')</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>条件判断</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//利用jquery来判断元素是否存在</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> btn = <span class=\"string\">'#btn'</span></span><br><span class=\"line\">Cypress.$(btn).length&gt;<span class=\"number\">0</span>&#123;</span><br><span class=\"line\"> cy.get(btn).click()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取元素属性值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取元素btn的文本</span></span><br><span class=\"line\">cy.get(<span class=\"string\">'#btn'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> btnTxt = $btn.text()</span><br><span class=\"line\">   cy.log(btnTxt)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>清除文本</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//清除input输入的值</span></span><br><span class=\"line\">cy.get(<span class=\"string\">'div&gt;a'</span>).clear()</span><br><span class=\"line\">cycy.get(<span class=\"string\">'div&gt;a'</span>).clear().type()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>操作单选/多选按钮</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//选中</span></span><br><span class=\"line\">cy.get(<span class=\"string\">'radio'</span>).check(<span class=\"string\">'us)</span></span><br><span class=\"line\"><span class=\"string\">//取消选中</span></span><br><span class=\"line\"><span class=\"string\">cy.get('</span>radio<span class=\"string\">').uncheck('</span>us)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>操作下拉菜单</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cy.get(<span class=\"string\">'select'</span>).select(<span class=\"string\">'下拉选项的值'</span>)</span><br><span class=\"line\">cy.get(<span class=\"string\">'li'</span>).eq(<span class=\"number\">0</span>).click()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>操作弹出框</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cy.get(<span class=\"string\">'iframe'</span>)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$iframe</span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//定义要查找的元素</span></span><br><span class=\"line\">     <span class=\"keyword\">const</span> $body = $iframe.contents().find(<span class=\"string\">'body'</span>)</span><br><span class=\"line\">     <span class=\"comment\">//在查找到的元素中查找btn并单击</span></span><br><span class=\"line\">     cy.wrap($body).find(<span class=\"string\">'#bin'</span>).click()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>操作被覆盖带元素</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cy.get(<span class=\"string\">'#btn'</span>).click(&#123;<span class=\"attr\">force</span>:<span class=\"literal\">true</span>&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>模拟键盘操作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cy.get(<span class=\"string\">'input'</span>).type(<span class=\"string\">'111'</span>)</span><br><span class=\"line\">cy.get(<span class=\"string\">'input'</span>).type(<span class=\"string\">'&#123;enter&#125;'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>以上就是这篇文章的全部内容了，希望本文的内容对大家的学习或者工作具有一定的参考学习价值，如果有疑问大家可以留言交流，谢谢大家的支持。</p>\n"},{"title":"Cypress执行测试并邮寄发送测试报告","originContent":"","toc":false,"date":"2021-09-17T05:36:49.000Z","_content":"\n前言\n为了高质量的软件交付，组织必须转向自动化流程，手动流程太容易出错，效率低下。对于执行CD和devops的团队来说，自动化变得越来越重要，大家只需要专注在code和review中，其它过程都尽可能的自动化。\n\nJenkins执行python脚本运行测试并邮件发送报告\n```bash\n\"\"\"\n * Create by dell on 2020/9/16\n * Author ：wencheng\n * 微信公众 ：自动化测试 To share\n\n\"\"\"\n\n# coding=gbk\nimport mimetypes\nimport smtplib\nfrom email import encoders\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.base import MIMEBase\nfrom email.mime.text import MIMEText\nimport time\nimport zipfile\nimport os\nimport shutil\n\n\ndef move_file():\n    origin_path = r\"D:\\workspace\\test\\cypress\\screenshots\"\n    origin_path3 = r\"D:\\workspace\\test\\test-report.json\"\n    new_file_name = r\"D:\\workspace\\test\\mochawesome-report\"\n    shutil.move(origin_path, new_file_name)\n    shutil.move(origin_path3, new_file_name)\n\n\ndef npx_bulid():\n    command = r\"cd D:\\workspace\\test &&\n                npx mochawesome-merge cypress/results/*.json >\n                 test-report.json\" \\\n              r\"&&npx mochawesome-report-generator \n              test-report.json\"\n    os.system(command)\n\n\ndef clearfile():\n    shutil.rmtree(r\"D:\\workspace\\test\\cypress\\results\")\n    shutil.rmtree(r\"D:\\workspace\\test\\mochawesome-report\")\n\n\ndef file_tozip():\n    startdir = \"mochawesome-report\"  # 要压缩的文件夹路径\n    file_news = 'mochawesome-report.zip'  # 压缩后文件夹的名字\n    z = zipfile.ZipFile(file_news, 'w', zipfile.ZIP_DEFLATED)  # 参数一：文件夹名\n    for dirpath, dirnames, filenames in os.walk(startdir):\n        fpath = dirpath.replace(startdir, '')  # 这一句很重要，不replace的话，就从根目录开始复制\n        fpath = fpath and fpath + os.sep or ''  # 这句话理解我也点郁闷，实现当前文件夹以及包含的所有文件的压缩\n        for filename in filenames:\n            z.write(os.path.join(dirpath, filename), \n            fpath + filename)\n    print('压缩成功')\n    z.close()\n\n\ndef send_report():\n    filepath = \"mochawesome-report.zip\"\n    smtp_server = \"smtp.exmail.qq.com\"\n    username = \"xxxxxxx \"\n    password = \"xxxxxxx\"\n    sender = 'xxxxxxx'\n    # receivers = [\"xxxxxxx\",\"xxxxxxx\",\"xxxxxxx\"]  # 接收人\n    receivers = ['xxxxxxx']\n    current_time = time.strftime('%Y-%m-%d-%H-%M-%S',\n                 time.localtime(time.time()))\n    msg = MIMEMultipart()\n    # 邮件正文\n    msg.attach(MIMEText(\"Hi，All：\"\n                        \"\\n  test运营系统的自动化脚本测试工具 {}\n                        已经完成测试报告见附件\"\n                        \"\\n  脚本构建地址：http://xx.xx.xxx.xx:xxxx/\"\n                        \"\\n  账号：admin 密码：123456\"\n                        \"\\n  目前以实现测试环境xx\n                        条数,.\".format(current_time), 'plain', 'utf-8'\n                        ))\n    msg['From'] = sender\n    msg['To'] = \";\".join(receivers)  # 多个收件人list转str\n\n    subject = \"{}的自动化测试报告\".format(current_time)\n    msg['Subject'] = subject\n\n    data = open(filepath, 'rb')\n    ctype, encoding = mimetypes.guess_type(filepath)\n    if ctype is None or encoding is not None:\n        ctype = 'application/octet-stream'\n    maintype, subtype = ctype.split('/', 1)\n    file_msg = MIMEBase(maintype, subtype)\n    file_msg.set_payload(data.read())\n    data.close()\n    encoders.encode_base64(file_msg)  # 把附件编码\n    file_msg.add_header('Content-Disposition', 'attachment',\n     filename=\"test.zip\")  # 修改邮件头\n    msg.attach(file_msg)\n    try:\n        server = smtplib.SMTP(smtp_server, 25)\n        server.login(username, password)\n        server.sendmail(sender, receivers, msg.as_string())\n        server.quit()\n        print(\"发送成功\")\n    except Exception as err:\n        print(\"发送失败\")\n        print(err)\n\n\nif __name__ == '__main__':\n    npx_bulid()\n    move_file()\n    file_tozip()\n    send_report()\n    clearfile()\n```\n","source":"_posts/Cypress执行测试并邮寄发送测试报告.md","raw":"---\ntitle: Cypress执行测试并邮寄发送测试报告\ntags:\n  - Web开发\noriginContent: ''\ncategories:\n  - 自动化测试\ntoc: false\ndate: 2021-09-17 13:36:49\n---\n\n前言\n为了高质量的软件交付，组织必须转向自动化流程，手动流程太容易出错，效率低下。对于执行CD和devops的团队来说，自动化变得越来越重要，大家只需要专注在code和review中，其它过程都尽可能的自动化。\n\nJenkins执行python脚本运行测试并邮件发送报告\n```bash\n\"\"\"\n * Create by dell on 2020/9/16\n * Author ：wencheng\n * 微信公众 ：自动化测试 To share\n\n\"\"\"\n\n# coding=gbk\nimport mimetypes\nimport smtplib\nfrom email import encoders\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.base import MIMEBase\nfrom email.mime.text import MIMEText\nimport time\nimport zipfile\nimport os\nimport shutil\n\n\ndef move_file():\n    origin_path = r\"D:\\workspace\\test\\cypress\\screenshots\"\n    origin_path3 = r\"D:\\workspace\\test\\test-report.json\"\n    new_file_name = r\"D:\\workspace\\test\\mochawesome-report\"\n    shutil.move(origin_path, new_file_name)\n    shutil.move(origin_path3, new_file_name)\n\n\ndef npx_bulid():\n    command = r\"cd D:\\workspace\\test &&\n                npx mochawesome-merge cypress/results/*.json >\n                 test-report.json\" \\\n              r\"&&npx mochawesome-report-generator \n              test-report.json\"\n    os.system(command)\n\n\ndef clearfile():\n    shutil.rmtree(r\"D:\\workspace\\test\\cypress\\results\")\n    shutil.rmtree(r\"D:\\workspace\\test\\mochawesome-report\")\n\n\ndef file_tozip():\n    startdir = \"mochawesome-report\"  # 要压缩的文件夹路径\n    file_news = 'mochawesome-report.zip'  # 压缩后文件夹的名字\n    z = zipfile.ZipFile(file_news, 'w', zipfile.ZIP_DEFLATED)  # 参数一：文件夹名\n    for dirpath, dirnames, filenames in os.walk(startdir):\n        fpath = dirpath.replace(startdir, '')  # 这一句很重要，不replace的话，就从根目录开始复制\n        fpath = fpath and fpath + os.sep or ''  # 这句话理解我也点郁闷，实现当前文件夹以及包含的所有文件的压缩\n        for filename in filenames:\n            z.write(os.path.join(dirpath, filename), \n            fpath + filename)\n    print('压缩成功')\n    z.close()\n\n\ndef send_report():\n    filepath = \"mochawesome-report.zip\"\n    smtp_server = \"smtp.exmail.qq.com\"\n    username = \"xxxxxxx \"\n    password = \"xxxxxxx\"\n    sender = 'xxxxxxx'\n    # receivers = [\"xxxxxxx\",\"xxxxxxx\",\"xxxxxxx\"]  # 接收人\n    receivers = ['xxxxxxx']\n    current_time = time.strftime('%Y-%m-%d-%H-%M-%S',\n                 time.localtime(time.time()))\n    msg = MIMEMultipart()\n    # 邮件正文\n    msg.attach(MIMEText(\"Hi，All：\"\n                        \"\\n  test运营系统的自动化脚本测试工具 {}\n                        已经完成测试报告见附件\"\n                        \"\\n  脚本构建地址：http://xx.xx.xxx.xx:xxxx/\"\n                        \"\\n  账号：admin 密码：123456\"\n                        \"\\n  目前以实现测试环境xx\n                        条数,.\".format(current_time), 'plain', 'utf-8'\n                        ))\n    msg['From'] = sender\n    msg['To'] = \";\".join(receivers)  # 多个收件人list转str\n\n    subject = \"{}的自动化测试报告\".format(current_time)\n    msg['Subject'] = subject\n\n    data = open(filepath, 'rb')\n    ctype, encoding = mimetypes.guess_type(filepath)\n    if ctype is None or encoding is not None:\n        ctype = 'application/octet-stream'\n    maintype, subtype = ctype.split('/', 1)\n    file_msg = MIMEBase(maintype, subtype)\n    file_msg.set_payload(data.read())\n    data.close()\n    encoders.encode_base64(file_msg)  # 把附件编码\n    file_msg.add_header('Content-Disposition', 'attachment',\n     filename=\"test.zip\")  # 修改邮件头\n    msg.attach(file_msg)\n    try:\n        server = smtplib.SMTP(smtp_server, 25)\n        server.login(username, password)\n        server.sendmail(sender, receivers, msg.as_string())\n        server.quit()\n        print(\"发送成功\")\n    except Exception as err:\n        print(\"发送失败\")\n        print(err)\n\n\nif __name__ == '__main__':\n    npx_bulid()\n    move_file()\n    file_tozip()\n    send_report()\n    clearfile()\n```\n","slug":"Cypress执行测试并邮寄发送测试报告","published":1,"updated":"2021-09-17T05:36:49.927Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckto0818r00037cs64vgi008j","content":"<p>前言<br>为了高质量的软件交付，组织必须转向自动化流程，手动流程太容易出错，效率低下。对于执行CD和devops的团队来说，自动化变得越来越重要，大家只需要专注在code和review中，其它过程都尽可能的自动化。</p>\n<p>Jenkins执行python脚本运行测试并邮件发送报告<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"</span><span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\"> * Create by dell on 2020/9/16</span></span><br><span class=\"line\"><span class=\"string\"> * Author ：wencheng</span></span><br><span class=\"line\"><span class=\"string\"> * 微信公众 ：自动化测试 To share</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\"</span><span class=\"string\">\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># coding=gbk</span></span><br><span class=\"line\">import mimetypes</span><br><span class=\"line\">import smtplib</span><br><span class=\"line\">from email import encoders</span><br><span class=\"line\">from email.mime.multipart import MIMEMultipart</span><br><span class=\"line\">from email.mime.base import MIMEBase</span><br><span class=\"line\">from email.mime.text import MIMEText</span><br><span class=\"line\">import time</span><br><span class=\"line\">import zipfile</span><br><span class=\"line\">import os</span><br><span class=\"line\">import shutil</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def move_file():</span><br><span class=\"line\">    origin_path = r<span class=\"string\">\"D:\\workspace\\test\\cypress\\screenshots\"</span></span><br><span class=\"line\">    origin_path3 = r<span class=\"string\">\"D:\\workspace\\test\\test-report.json\"</span></span><br><span class=\"line\">    new_file_name = r<span class=\"string\">\"D:\\workspace\\test\\mochawesome-report\"</span></span><br><span class=\"line\">    shutil.move(origin_path, new_file_name)</span><br><span class=\"line\">    shutil.move(origin_path3, new_file_name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def npx_bulid():</span><br><span class=\"line\">    <span class=\"built_in\">command</span> = r<span class=\"string\">\"cd D:\\workspace\\test &amp;&amp;</span></span><br><span class=\"line\"><span class=\"string\">                npx mochawesome-merge cypress/results/*.json &gt;</span></span><br><span class=\"line\"><span class=\"string\">                 test-report.json\"</span> \\</span><br><span class=\"line\">              r<span class=\"string\">\"&amp;&amp;npx mochawesome-report-generator </span></span><br><span class=\"line\"><span class=\"string\">              test-report.json\"</span></span><br><span class=\"line\">    os.system(<span class=\"built_in\">command</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def clearfile():</span><br><span class=\"line\">    shutil.rmtree(r<span class=\"string\">\"D:\\workspace\\test\\cypress\\results\"</span>)</span><br><span class=\"line\">    shutil.rmtree(r<span class=\"string\">\"D:\\workspace\\test\\mochawesome-report\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def file_tozip():</span><br><span class=\"line\">    startdir = <span class=\"string\">\"mochawesome-report\"</span>  <span class=\"comment\"># 要压缩的文件夹路径</span></span><br><span class=\"line\">    file_news = <span class=\"string\">'mochawesome-report.zip'</span>  <span class=\"comment\"># 压缩后文件夹的名字</span></span><br><span class=\"line\">    z = zipfile.ZipFile(file_news, <span class=\"string\">'w'</span>, zipfile.ZIP_DEFLATED)  <span class=\"comment\"># 参数一：文件夹名</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> dirpath, dirnames, filenames <span class=\"keyword\">in</span> os.walk(startdir):</span><br><span class=\"line\">        fpath = dirpath.replace(startdir, <span class=\"string\">''</span>)  <span class=\"comment\"># 这一句很重要，不replace的话，就从根目录开始复制</span></span><br><span class=\"line\">        fpath = fpath and fpath + os.sep or <span class=\"string\">''</span>  <span class=\"comment\"># 这句话理解我也点郁闷，实现当前文件夹以及包含的所有文件的压缩</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> filenames:</span><br><span class=\"line\">            z.write(os.path.join(dirpath, filename), </span><br><span class=\"line\">            fpath + filename)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">'压缩成功'</span>)</span><br><span class=\"line\">    z.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def send_report():</span><br><span class=\"line\">    filepath = <span class=\"string\">\"mochawesome-report.zip\"</span></span><br><span class=\"line\">    smtp_server = <span class=\"string\">\"smtp.exmail.qq.com\"</span></span><br><span class=\"line\">    username = <span class=\"string\">\"xxxxxxx \"</span></span><br><span class=\"line\">    password = <span class=\"string\">\"xxxxxxx\"</span></span><br><span class=\"line\">    sender = <span class=\"string\">'xxxxxxx'</span></span><br><span class=\"line\">    <span class=\"comment\"># receivers = [\"xxxxxxx\",\"xxxxxxx\",\"xxxxxxx\"]  # 接收人</span></span><br><span class=\"line\">    receivers = [<span class=\"string\">'xxxxxxx'</span>]</span><br><span class=\"line\">    current_time = time.strftime(<span class=\"string\">'%Y-%m-%d-%H-%M-%S'</span>,</span><br><span class=\"line\">                 time.localtime(time.time()))</span><br><span class=\"line\">    msg = MIMEMultipart()</span><br><span class=\"line\">    <span class=\"comment\"># 邮件正文</span></span><br><span class=\"line\">    msg.attach(MIMEText(<span class=\"string\">\"Hi，All：\"</span></span><br><span class=\"line\">                        <span class=\"string\">\"\\n  test运营系统的自动化脚本测试工具 &#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\">                        已经完成测试报告见附件\"</span></span><br><span class=\"line\">                        <span class=\"string\">\"\\n  脚本构建地址：http://xx.xx.xxx.xx:xxxx/\"</span></span><br><span class=\"line\">                        <span class=\"string\">\"\\n  账号：admin 密码：123456\"</span></span><br><span class=\"line\">                        <span class=\"string\">\"\\n  目前以实现测试环境xx</span></span><br><span class=\"line\"><span class=\"string\">                        条数,.\"</span>.format(current_time), <span class=\"string\">'plain'</span>, <span class=\"string\">'utf-8'</span></span><br><span class=\"line\">                        ))</span><br><span class=\"line\">    msg[<span class=\"string\">'From'</span>] = sender</span><br><span class=\"line\">    msg[<span class=\"string\">'To'</span>] = <span class=\"string\">\";\"</span>.join(receivers)  <span class=\"comment\"># 多个收件人list转str</span></span><br><span class=\"line\"></span><br><span class=\"line\">    subject = <span class=\"string\">\"&#123;&#125;的自动化测试报告\"</span>.format(current_time)</span><br><span class=\"line\">    msg[<span class=\"string\">'Subject'</span>] = subject</span><br><span class=\"line\"></span><br><span class=\"line\">    data = open(filepath, <span class=\"string\">'rb'</span>)</span><br><span class=\"line\">    ctype, encoding = mimetypes.guess_type(filepath)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ctype is None or encoding is not None:</span><br><span class=\"line\">        ctype = <span class=\"string\">'application/octet-stream'</span></span><br><span class=\"line\">    maintype, subtype = ctype.split(<span class=\"string\">'/'</span>, 1)</span><br><span class=\"line\">    file_msg = MIMEBase(maintype, subtype)</span><br><span class=\"line\">    file_msg.set_payload(data.read())</span><br><span class=\"line\">    data.close()</span><br><span class=\"line\">    encoders.encode_base64(file_msg)  <span class=\"comment\"># 把附件编码</span></span><br><span class=\"line\">    file_msg.add_header(<span class=\"string\">'Content-Disposition'</span>, <span class=\"string\">'attachment'</span>,</span><br><span class=\"line\">     filename=<span class=\"string\">\"test.zip\"</span>)  <span class=\"comment\"># 修改邮件头</span></span><br><span class=\"line\">    msg.attach(file_msg)</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        server = smtplib.SMTP(smtp_server, 25)</span><br><span class=\"line\">        server.login(username, password)</span><br><span class=\"line\">        server.sendmail(sender, receivers, msg.as_string())</span><br><span class=\"line\">        server.quit()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"发送成功\"</span>)</span><br><span class=\"line\">    except Exception as err:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"发送失败\"</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(err)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    npx_bulid()</span><br><span class=\"line\">    move_file()</span><br><span class=\"line\">    file_tozip()</span><br><span class=\"line\">    send_report()</span><br><span class=\"line\">    clearfile()</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>前言<br>为了高质量的软件交付，组织必须转向自动化流程，手动流程太容易出错，效率低下。对于执行CD和devops的团队来说，自动化变得越来越重要，大家只需要专注在code和review中，其它过程都尽可能的自动化。</p>\n<p>Jenkins执行python脚本运行测试并邮件发送报告<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"</span><span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\"> * Create by dell on 2020/9/16</span></span><br><span class=\"line\"><span class=\"string\"> * Author ：wencheng</span></span><br><span class=\"line\"><span class=\"string\"> * 微信公众 ：自动化测试 To share</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\"</span><span class=\"string\">\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># coding=gbk</span></span><br><span class=\"line\">import mimetypes</span><br><span class=\"line\">import smtplib</span><br><span class=\"line\">from email import encoders</span><br><span class=\"line\">from email.mime.multipart import MIMEMultipart</span><br><span class=\"line\">from email.mime.base import MIMEBase</span><br><span class=\"line\">from email.mime.text import MIMEText</span><br><span class=\"line\">import time</span><br><span class=\"line\">import zipfile</span><br><span class=\"line\">import os</span><br><span class=\"line\">import shutil</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def move_file():</span><br><span class=\"line\">    origin_path = r<span class=\"string\">\"D:\\workspace\\test\\cypress\\screenshots\"</span></span><br><span class=\"line\">    origin_path3 = r<span class=\"string\">\"D:\\workspace\\test\\test-report.json\"</span></span><br><span class=\"line\">    new_file_name = r<span class=\"string\">\"D:\\workspace\\test\\mochawesome-report\"</span></span><br><span class=\"line\">    shutil.move(origin_path, new_file_name)</span><br><span class=\"line\">    shutil.move(origin_path3, new_file_name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def npx_bulid():</span><br><span class=\"line\">    <span class=\"built_in\">command</span> = r<span class=\"string\">\"cd D:\\workspace\\test &amp;&amp;</span></span><br><span class=\"line\"><span class=\"string\">                npx mochawesome-merge cypress/results/*.json &gt;</span></span><br><span class=\"line\"><span class=\"string\">                 test-report.json\"</span> \\</span><br><span class=\"line\">              r<span class=\"string\">\"&amp;&amp;npx mochawesome-report-generator </span></span><br><span class=\"line\"><span class=\"string\">              test-report.json\"</span></span><br><span class=\"line\">    os.system(<span class=\"built_in\">command</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def clearfile():</span><br><span class=\"line\">    shutil.rmtree(r<span class=\"string\">\"D:\\workspace\\test\\cypress\\results\"</span>)</span><br><span class=\"line\">    shutil.rmtree(r<span class=\"string\">\"D:\\workspace\\test\\mochawesome-report\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def file_tozip():</span><br><span class=\"line\">    startdir = <span class=\"string\">\"mochawesome-report\"</span>  <span class=\"comment\"># 要压缩的文件夹路径</span></span><br><span class=\"line\">    file_news = <span class=\"string\">'mochawesome-report.zip'</span>  <span class=\"comment\"># 压缩后文件夹的名字</span></span><br><span class=\"line\">    z = zipfile.ZipFile(file_news, <span class=\"string\">'w'</span>, zipfile.ZIP_DEFLATED)  <span class=\"comment\"># 参数一：文件夹名</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> dirpath, dirnames, filenames <span class=\"keyword\">in</span> os.walk(startdir):</span><br><span class=\"line\">        fpath = dirpath.replace(startdir, <span class=\"string\">''</span>)  <span class=\"comment\"># 这一句很重要，不replace的话，就从根目录开始复制</span></span><br><span class=\"line\">        fpath = fpath and fpath + os.sep or <span class=\"string\">''</span>  <span class=\"comment\"># 这句话理解我也点郁闷，实现当前文件夹以及包含的所有文件的压缩</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> filenames:</span><br><span class=\"line\">            z.write(os.path.join(dirpath, filename), </span><br><span class=\"line\">            fpath + filename)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">'压缩成功'</span>)</span><br><span class=\"line\">    z.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def send_report():</span><br><span class=\"line\">    filepath = <span class=\"string\">\"mochawesome-report.zip\"</span></span><br><span class=\"line\">    smtp_server = <span class=\"string\">\"smtp.exmail.qq.com\"</span></span><br><span class=\"line\">    username = <span class=\"string\">\"xxxxxxx \"</span></span><br><span class=\"line\">    password = <span class=\"string\">\"xxxxxxx\"</span></span><br><span class=\"line\">    sender = <span class=\"string\">'xxxxxxx'</span></span><br><span class=\"line\">    <span class=\"comment\"># receivers = [\"xxxxxxx\",\"xxxxxxx\",\"xxxxxxx\"]  # 接收人</span></span><br><span class=\"line\">    receivers = [<span class=\"string\">'xxxxxxx'</span>]</span><br><span class=\"line\">    current_time = time.strftime(<span class=\"string\">'%Y-%m-%d-%H-%M-%S'</span>,</span><br><span class=\"line\">                 time.localtime(time.time()))</span><br><span class=\"line\">    msg = MIMEMultipart()</span><br><span class=\"line\">    <span class=\"comment\"># 邮件正文</span></span><br><span class=\"line\">    msg.attach(MIMEText(<span class=\"string\">\"Hi，All：\"</span></span><br><span class=\"line\">                        <span class=\"string\">\"\\n  test运营系统的自动化脚本测试工具 &#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\">                        已经完成测试报告见附件\"</span></span><br><span class=\"line\">                        <span class=\"string\">\"\\n  脚本构建地址：http://xx.xx.xxx.xx:xxxx/\"</span></span><br><span class=\"line\">                        <span class=\"string\">\"\\n  账号：admin 密码：123456\"</span></span><br><span class=\"line\">                        <span class=\"string\">\"\\n  目前以实现测试环境xx</span></span><br><span class=\"line\"><span class=\"string\">                        条数,.\"</span>.format(current_time), <span class=\"string\">'plain'</span>, <span class=\"string\">'utf-8'</span></span><br><span class=\"line\">                        ))</span><br><span class=\"line\">    msg[<span class=\"string\">'From'</span>] = sender</span><br><span class=\"line\">    msg[<span class=\"string\">'To'</span>] = <span class=\"string\">\";\"</span>.join(receivers)  <span class=\"comment\"># 多个收件人list转str</span></span><br><span class=\"line\"></span><br><span class=\"line\">    subject = <span class=\"string\">\"&#123;&#125;的自动化测试报告\"</span>.format(current_time)</span><br><span class=\"line\">    msg[<span class=\"string\">'Subject'</span>] = subject</span><br><span class=\"line\"></span><br><span class=\"line\">    data = open(filepath, <span class=\"string\">'rb'</span>)</span><br><span class=\"line\">    ctype, encoding = mimetypes.guess_type(filepath)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ctype is None or encoding is not None:</span><br><span class=\"line\">        ctype = <span class=\"string\">'application/octet-stream'</span></span><br><span class=\"line\">    maintype, subtype = ctype.split(<span class=\"string\">'/'</span>, 1)</span><br><span class=\"line\">    file_msg = MIMEBase(maintype, subtype)</span><br><span class=\"line\">    file_msg.set_payload(data.read())</span><br><span class=\"line\">    data.close()</span><br><span class=\"line\">    encoders.encode_base64(file_msg)  <span class=\"comment\"># 把附件编码</span></span><br><span class=\"line\">    file_msg.add_header(<span class=\"string\">'Content-Disposition'</span>, <span class=\"string\">'attachment'</span>,</span><br><span class=\"line\">     filename=<span class=\"string\">\"test.zip\"</span>)  <span class=\"comment\"># 修改邮件头</span></span><br><span class=\"line\">    msg.attach(file_msg)</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        server = smtplib.SMTP(smtp_server, 25)</span><br><span class=\"line\">        server.login(username, password)</span><br><span class=\"line\">        server.sendmail(sender, receivers, msg.as_string())</span><br><span class=\"line\">        server.quit()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"发送成功\"</span>)</span><br><span class=\"line\">    except Exception as err:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"发送失败\"</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(err)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    npx_bulid()</span><br><span class=\"line\">    move_file()</span><br><span class=\"line\">    file_tozip()</span><br><span class=\"line\">    send_report()</span><br><span class=\"line\">    clearfile()</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Cypress测试断言的使用","originContent":"","toc":false,"date":"2021-09-17T06:12:35.000Z","_content":"\n## 前言\n\n断言是测用例的必要组成部分，Cypress支持多种断言，其中包括BDD（expect/should）和TDD（assert）格式断言。\n\n### 常见的断言方式\n\n- 针对长度（length）的断言\n```js\n//重试,直到找到3个匹配的<li.selected>\ncy.get('li.selected').should('have.length',3)\n```\n\n- 针对对类（Class）的断言\n```js\n//重试,直到input元素没有类被disabled为止（或者超时为止）\ncy.get('from').fijd('input').should('not.have.class','disabled')\n```\n\n- 针对值（Value）断言\n```js\n//重试,直到textarea的值为‘iTesting’\ncy.get('textarea').should('have.value','iTesting')\n```\n\n- 针对文本内容（Text Content）的断言\n```js\n//重试,直到这个span不包含“click me”字样\ncy.get('a').parent('span.help').should('not.contain','click me')\n//重试,直到这个span包含“click me”字样\ncy.get('a').parent('span.help').should('contain','click me')\n```\n\n- 针对元素可见与否（Visibility）的断言\n```js\n//重试,直到这个button是可为止\ncy.get('button').should('be.visible')\n```\n\n- 针对元素存在与否（Existence）的断言\n```js\n//重试,直到id为loading的spinner不在存在\ncy.get('#loading').should('not.exist')\n```\n\n- 针对元素状态的（State）的断言\n```js\n//重试,直到这个radio button是选中状态\ncy.get('：radio').should('be.checked')\n```\n\n- 针对CSS的断言\n```js\n//重试,直到completed这个类有匹配的css为止\ncy.get('.completed').should('have.css','text-decoration','line-through')\n```\n更多的断言库及其用法，请参考如下网站：\n\nhttps://github.com/chaijs/chai​github.com\n\nhttps://github.com/domenic/sinon-chai​github.com\n\nhttps://github.com/chaijs/chai-jquery​github.com\n\nAssert - Chai​www.chaijs.com","source":"_posts/Cypress测试断言的使用.md","raw":"---\ntitle: Cypress测试断言的使用\ntags:\n  - Web开发\noriginContent: ''\ncategories:\n  - 自动化测试\ntoc: false\ndate: 2021-09-17 14:12:35\n---\n\n## 前言\n\n断言是测用例的必要组成部分，Cypress支持多种断言，其中包括BDD（expect/should）和TDD（assert）格式断言。\n\n### 常见的断言方式\n\n- 针对长度（length）的断言\n```js\n//重试,直到找到3个匹配的<li.selected>\ncy.get('li.selected').should('have.length',3)\n```\n\n- 针对对类（Class）的断言\n```js\n//重试,直到input元素没有类被disabled为止（或者超时为止）\ncy.get('from').fijd('input').should('not.have.class','disabled')\n```\n\n- 针对值（Value）断言\n```js\n//重试,直到textarea的值为‘iTesting’\ncy.get('textarea').should('have.value','iTesting')\n```\n\n- 针对文本内容（Text Content）的断言\n```js\n//重试,直到这个span不包含“click me”字样\ncy.get('a').parent('span.help').should('not.contain','click me')\n//重试,直到这个span包含“click me”字样\ncy.get('a').parent('span.help').should('contain','click me')\n```\n\n- 针对元素可见与否（Visibility）的断言\n```js\n//重试,直到这个button是可为止\ncy.get('button').should('be.visible')\n```\n\n- 针对元素存在与否（Existence）的断言\n```js\n//重试,直到id为loading的spinner不在存在\ncy.get('#loading').should('not.exist')\n```\n\n- 针对元素状态的（State）的断言\n```js\n//重试,直到这个radio button是选中状态\ncy.get('：radio').should('be.checked')\n```\n\n- 针对CSS的断言\n```js\n//重试,直到completed这个类有匹配的css为止\ncy.get('.completed').should('have.css','text-decoration','line-through')\n```\n更多的断言库及其用法，请参考如下网站：\n\nhttps://github.com/chaijs/chai​github.com\n\nhttps://github.com/domenic/sinon-chai​github.com\n\nhttps://github.com/chaijs/chai-jquery​github.com\n\nAssert - Chai​www.chaijs.com","slug":"Cypress测试断言的使用","published":1,"updated":"2021-09-17T06:12:35.574Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckto0818s00057cs6wz4wpak4","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>断言是测用例的必要组成部分，Cypress支持多种断言，其中包括BDD（expect/should）和TDD（assert）格式断言。</p>\n<h3 id=\"常见的断言方式\"><a href=\"#常见的断言方式\" class=\"headerlink\" title=\"常见的断言方式\"></a>常见的断言方式</h3><ul>\n<li><p>针对长度（length）的断言</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//重试,直到找到3个匹配的&lt;li.selected&gt;</span></span><br><span class=\"line\">cy.get(<span class=\"string\">'li.selected'</span>).should(<span class=\"string\">'have.length'</span>,<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>针对对类（Class）的断言</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//重试,直到input元素没有类被disabled为止（或者超时为止）</span></span><br><span class=\"line\">cy.get(<span class=\"string\">'from'</span>).fijd(<span class=\"string\">'input'</span>).should(<span class=\"string\">'not.have.class'</span>,<span class=\"string\">'disabled'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>针对值（Value）断言</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//重试,直到textarea的值为‘iTesting’</span></span><br><span class=\"line\">cy.get(<span class=\"string\">'textarea'</span>).should(<span class=\"string\">'have.value'</span>,<span class=\"string\">'iTesting'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>针对文本内容（Text Content）的断言</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//重试,直到这个span不包含“click me”字样</span></span><br><span class=\"line\">cy.get(<span class=\"string\">'a'</span>).parent(<span class=\"string\">'span.help'</span>).should(<span class=\"string\">'not.contain'</span>,<span class=\"string\">'click me'</span>)</span><br><span class=\"line\"><span class=\"comment\">//重试,直到这个span包含“click me”字样</span></span><br><span class=\"line\">cy.get(<span class=\"string\">'a'</span>).parent(<span class=\"string\">'span.help'</span>).should(<span class=\"string\">'contain'</span>,<span class=\"string\">'click me'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>针对元素可见与否（Visibility）的断言</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//重试,直到这个button是可为止</span></span><br><span class=\"line\">cy.get(<span class=\"string\">'button'</span>).should(<span class=\"string\">'be.visible'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>针对元素存在与否（Existence）的断言</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//重试,直到id为loading的spinner不在存在</span></span><br><span class=\"line\">cy.get(<span class=\"string\">'#loading'</span>).should(<span class=\"string\">'not.exist'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>针对元素状态的（State）的断言</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//重试,直到这个radio button是选中状态</span></span><br><span class=\"line\">cy.get(<span class=\"string\">'：radio'</span>).should(<span class=\"string\">'be.checked'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>针对CSS的断言</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//重试,直到completed这个类有匹配的css为止</span></span><br><span class=\"line\">cy.get(<span class=\"string\">'.completed'</span>).should(<span class=\"string\">'have.css'</span>,<span class=\"string\">'text-decoration'</span>,<span class=\"string\">'line-through'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>更多的断言库及其用法，请参考如下网站：</p>\n<p><a href=\"https://github.com/chaijs/chai​github.com\" target=\"_blank\" rel=\"noopener\">https://github.com/chaijs/chai​github.com</a></p>\n<p><a href=\"https://github.com/domenic/sinon-chai​github.com\" target=\"_blank\" rel=\"noopener\">https://github.com/domenic/sinon-chai​github.com</a></p>\n<p><a href=\"https://github.com/chaijs/chai-jquery​github.com\" target=\"_blank\" rel=\"noopener\">https://github.com/chaijs/chai-jquery​github.com</a></p>\n<p>Assert - Chai​<a href=\"http://www.chaijs.com\" target=\"_blank\" rel=\"noopener\">www.chaijs.com</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>断言是测用例的必要组成部分，Cypress支持多种断言，其中包括BDD（expect/should）和TDD（assert）格式断言。</p>\n<h3 id=\"常见的断言方式\"><a href=\"#常见的断言方式\" class=\"headerlink\" title=\"常见的断言方式\"></a>常见的断言方式</h3><ul>\n<li><p>针对长度（length）的断言</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//重试,直到找到3个匹配的&lt;li.selected&gt;</span></span><br><span class=\"line\">cy.get(<span class=\"string\">'li.selected'</span>).should(<span class=\"string\">'have.length'</span>,<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>针对对类（Class）的断言</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//重试,直到input元素没有类被disabled为止（或者超时为止）</span></span><br><span class=\"line\">cy.get(<span class=\"string\">'from'</span>).fijd(<span class=\"string\">'input'</span>).should(<span class=\"string\">'not.have.class'</span>,<span class=\"string\">'disabled'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>针对值（Value）断言</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//重试,直到textarea的值为‘iTesting’</span></span><br><span class=\"line\">cy.get(<span class=\"string\">'textarea'</span>).should(<span class=\"string\">'have.value'</span>,<span class=\"string\">'iTesting'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>针对文本内容（Text Content）的断言</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//重试,直到这个span不包含“click me”字样</span></span><br><span class=\"line\">cy.get(<span class=\"string\">'a'</span>).parent(<span class=\"string\">'span.help'</span>).should(<span class=\"string\">'not.contain'</span>,<span class=\"string\">'click me'</span>)</span><br><span class=\"line\"><span class=\"comment\">//重试,直到这个span包含“click me”字样</span></span><br><span class=\"line\">cy.get(<span class=\"string\">'a'</span>).parent(<span class=\"string\">'span.help'</span>).should(<span class=\"string\">'contain'</span>,<span class=\"string\">'click me'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>针对元素可见与否（Visibility）的断言</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//重试,直到这个button是可为止</span></span><br><span class=\"line\">cy.get(<span class=\"string\">'button'</span>).should(<span class=\"string\">'be.visible'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>针对元素存在与否（Existence）的断言</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//重试,直到id为loading的spinner不在存在</span></span><br><span class=\"line\">cy.get(<span class=\"string\">'#loading'</span>).should(<span class=\"string\">'not.exist'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>针对元素状态的（State）的断言</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//重试,直到这个radio button是选中状态</span></span><br><span class=\"line\">cy.get(<span class=\"string\">'：radio'</span>).should(<span class=\"string\">'be.checked'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>针对CSS的断言</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//重试,直到completed这个类有匹配的css为止</span></span><br><span class=\"line\">cy.get(<span class=\"string\">'.completed'</span>).should(<span class=\"string\">'have.css'</span>,<span class=\"string\">'text-decoration'</span>,<span class=\"string\">'line-through'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>更多的断言库及其用法，请参考如下网站：</p>\n<p><a href=\"https://github.com/chaijs/chai​github.com\" target=\"_blank\" rel=\"noopener\">https://github.com/chaijs/chai​github.com</a></p>\n<p><a href=\"https://github.com/domenic/sinon-chai​github.com\" target=\"_blank\" rel=\"noopener\">https://github.com/domenic/sinon-chai​github.com</a></p>\n<p><a href=\"https://github.com/chaijs/chai-jquery​github.com\" target=\"_blank\" rel=\"noopener\">https://github.com/chaijs/chai-jquery​github.com</a></p>\n<p>Assert - Chai​<a href=\"http://www.chaijs.com\" target=\"_blank\" rel=\"noopener\">www.chaijs.com</a></p>\n"},{"title":"cypress 自动化测试（文件上传）","originContent":"","toc":false,"date":"2021-09-17T06:52:04.000Z","_content":"\n前言\ncypress-file-upload插件使得文件上传测试变得简单。这个包添加了一个定制的Cypress命令，允许您对如何通过HTML控件上传文件进行抽象，并将重点放在测试用户工作流上。\n\n1.官方地址\n下载地址:\n\n https://github.com/abramenal/cypress-file-upload \n\n插件使用详情可查考：\n\nhttps://www.npmjs.com/package/cypress-file-upload#it-isnt-working-what-else-can-i-try\n\n2.安装插件\nnpm\n```bash\nnpm install --save-dev cypress-file-upload\n```\n\n3.导入插件\n您需要将其添加`cypress/support/commands.js`如下\n```js\nimport 'cypress-file-upload';\n```\n\n然后，确保将commands.js导入`cypress/support/index.js`（可能会被注释）：\n```js\nimport  './commands' ;\n```\n\n4.使用方法\n通常的做法是将Cypress测试所需的所有文件放在`Cypress/fixtures`文件夹中。\n\n例如:新建test.txt文件\n\n\n测试demo\n```js\n/**\n * Create by dell on 2021/3/20\n * Author ：wencheng\n * 微信公众 ：自动化测试 To share\n * */\n\ndescribe('file_upload_test',function () {\n    beforeEach(() => {\n        cy.login_auto()\n    })\n    it('upload', function() {\n        /* ==== Generated with Cypress Studio ==== */\n        cy.visit('/zentao/qa/');\n        cy.get('[data-id=\"bug\"] > a').click();\n        cy.get('p > .btn').click();\n        /* ==== End Cypress Studio ==== */\n        cy.get(\"input[type='file']\").attachFile('test.txt');\n    });\n})\n```\n\n运行结果上传成功\n![image.png](https://blogimage.houjiyi.com/Fp23dAS_B3cGKYKTDm9X0B1AgVyo)\n\n5.注意事项\n1.定位上传文件的dom\n切记定位的是 `input[type='file']\n![image.png](https://blogimage.houjiyi.com/Fp0NLcvG_-mmCFta1wZ67BvrgukW)\n\n2.上传文件内容不能为空\n当上传文件内容为空时，文件上传失败我们通过debug看下。\n![image.png](https://blogimage.houjiyi.com/Fqg_9-1t-yOSY-En31giVhmatAmN)\n\n未触发文件上传\n![image.png](https://blogimage.houjiyi.com/FnU3iJoTDn5l90PBKA8pFWRsN7SX)\n\n触发文件上传会预加载file内容\n![image.png](https://blogimage.houjiyi.com/FuG6gDoBMYMgFP-WPIlhmyQuiVx3)\n\n以上就是这篇文章的全部内容了，希望本文的内容对大家的学习或者工作具有一定的参考学习价值.","source":"_posts/cypress-自动化测试（文件上传）.md","raw":"---\ntitle: cypress 自动化测试（文件上传）\ntags:\n  - Web开发\noriginContent: ''\ncategories:\n  - 自动化测试\ntoc: false\ndate: 2021-09-17 14:52:04\n---\n\n前言\ncypress-file-upload插件使得文件上传测试变得简单。这个包添加了一个定制的Cypress命令，允许您对如何通过HTML控件上传文件进行抽象，并将重点放在测试用户工作流上。\n\n1.官方地址\n下载地址:\n\n https://github.com/abramenal/cypress-file-upload \n\n插件使用详情可查考：\n\nhttps://www.npmjs.com/package/cypress-file-upload#it-isnt-working-what-else-can-i-try\n\n2.安装插件\nnpm\n```bash\nnpm install --save-dev cypress-file-upload\n```\n\n3.导入插件\n您需要将其添加`cypress/support/commands.js`如下\n```js\nimport 'cypress-file-upload';\n```\n\n然后，确保将commands.js导入`cypress/support/index.js`（可能会被注释）：\n```js\nimport  './commands' ;\n```\n\n4.使用方法\n通常的做法是将Cypress测试所需的所有文件放在`Cypress/fixtures`文件夹中。\n\n例如:新建test.txt文件\n\n\n测试demo\n```js\n/**\n * Create by dell on 2021/3/20\n * Author ：wencheng\n * 微信公众 ：自动化测试 To share\n * */\n\ndescribe('file_upload_test',function () {\n    beforeEach(() => {\n        cy.login_auto()\n    })\n    it('upload', function() {\n        /* ==== Generated with Cypress Studio ==== */\n        cy.visit('/zentao/qa/');\n        cy.get('[data-id=\"bug\"] > a').click();\n        cy.get('p > .btn').click();\n        /* ==== End Cypress Studio ==== */\n        cy.get(\"input[type='file']\").attachFile('test.txt');\n    });\n})\n```\n\n运行结果上传成功\n![image.png](https://blogimage.houjiyi.com/Fp23dAS_B3cGKYKTDm9X0B1AgVyo)\n\n5.注意事项\n1.定位上传文件的dom\n切记定位的是 `input[type='file']\n![image.png](https://blogimage.houjiyi.com/Fp0NLcvG_-mmCFta1wZ67BvrgukW)\n\n2.上传文件内容不能为空\n当上传文件内容为空时，文件上传失败我们通过debug看下。\n![image.png](https://blogimage.houjiyi.com/Fqg_9-1t-yOSY-En31giVhmatAmN)\n\n未触发文件上传\n![image.png](https://blogimage.houjiyi.com/FnU3iJoTDn5l90PBKA8pFWRsN7SX)\n\n触发文件上传会预加载file内容\n![image.png](https://blogimage.houjiyi.com/FuG6gDoBMYMgFP-WPIlhmyQuiVx3)\n\n以上就是这篇文章的全部内容了，希望本文的内容对大家的学习或者工作具有一定的参考学习价值.","slug":"cypress-自动化测试（文件上传）","published":1,"updated":"2021-09-17T06:52:04.841Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckto0818u00087cs6invrrp63","content":"<p>前言<br>cypress-file-upload插件使得文件上传测试变得简单。这个包添加了一个定制的Cypress命令，允许您对如何通过HTML控件上传文件进行抽象，并将重点放在测试用户工作流上。</p>\n<p>1.官方地址<br>下载地址:</p>\n<p> <a href=\"https://github.com/abramenal/cypress-file-upload\" target=\"_blank\" rel=\"noopener\">https://github.com/abramenal/cypress-file-upload</a> </p>\n<p>插件使用详情可查考：</p>\n<p><a href=\"https://www.npmjs.com/package/cypress-file-upload#it-isnt-working-what-else-can-i-try\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/cypress-file-upload#it-isnt-working-what-else-can-i-try</a></p>\n<p>2.安装插件<br>npm<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev cypress-file-upload</span><br></pre></td></tr></table></figure></p>\n<p>3.导入插件<br>您需要将其添加<code>cypress/support/commands.js</code>如下<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'cypress-file-upload'</span>;</span><br></pre></td></tr></table></figure></p>\n<p>然后，确保将commands.js导入<code>cypress/support/index.js</code>（可能会被注释）：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>  <span class=\"string\">'./commands'</span> ;</span><br></pre></td></tr></table></figure></p>\n<p>4.使用方法<br>通常的做法是将Cypress测试所需的所有文件放在<code>Cypress/fixtures</code>文件夹中。</p>\n<p>例如:新建test.txt文件</p>\n<p>测试demo<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Create by dell on 2021/3/20</span></span><br><span class=\"line\"><span class=\"comment\"> * Author ：wencheng</span></span><br><span class=\"line\"><span class=\"comment\"> * 微信公众 ：自动化测试 To share</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'file_upload_test'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    beforeEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        cy.login_auto()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    it(<span class=\"string\">'upload'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/* ==== Generated with Cypress Studio ==== */</span></span><br><span class=\"line\">        cy.visit(<span class=\"string\">'/zentao/qa/'</span>);</span><br><span class=\"line\">        cy.get(<span class=\"string\">'[data-id=\"bug\"] &gt; a'</span>).click();</span><br><span class=\"line\">        cy.get(<span class=\"string\">'p &gt; .btn'</span>).click();</span><br><span class=\"line\">        <span class=\"comment\">/* ==== End Cypress Studio ==== */</span></span><br><span class=\"line\">        cy.get(<span class=\"string\">\"input[type='file']\"</span>).attachFile(<span class=\"string\">'test.txt'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>运行结果上传成功<br><img src=\"https://blogimage.houjiyi.com/Fp23dAS_B3cGKYKTDm9X0B1AgVyo\" alt=\"image.png\"></p>\n<p>5.注意事项<br>1.定位上传文件的dom<br>切记定位的是 `input[type=’file’]<br><img src=\"https://blogimage.houjiyi.com/Fp0NLcvG_-mmCFta1wZ67BvrgukW\" alt=\"image.png\"></p>\n<p>2.上传文件内容不能为空<br>当上传文件内容为空时，文件上传失败我们通过debug看下。<br><img src=\"https://blogimage.houjiyi.com/Fqg_9-1t-yOSY-En31giVhmatAmN\" alt=\"image.png\"></p>\n<p>未触发文件上传<br><img src=\"https://blogimage.houjiyi.com/FnU3iJoTDn5l90PBKA8pFWRsN7SX\" alt=\"image.png\"></p>\n<p>触发文件上传会预加载file内容<br><img src=\"https://blogimage.houjiyi.com/FuG6gDoBMYMgFP-WPIlhmyQuiVx3\" alt=\"image.png\"></p>\n<p>以上就是这篇文章的全部内容了，希望本文的内容对大家的学习或者工作具有一定的参考学习价值.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>前言<br>cypress-file-upload插件使得文件上传测试变得简单。这个包添加了一个定制的Cypress命令，允许您对如何通过HTML控件上传文件进行抽象，并将重点放在测试用户工作流上。</p>\n<p>1.官方地址<br>下载地址:</p>\n<p> <a href=\"https://github.com/abramenal/cypress-file-upload\" target=\"_blank\" rel=\"noopener\">https://github.com/abramenal/cypress-file-upload</a> </p>\n<p>插件使用详情可查考：</p>\n<p><a href=\"https://www.npmjs.com/package/cypress-file-upload#it-isnt-working-what-else-can-i-try\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/cypress-file-upload#it-isnt-working-what-else-can-i-try</a></p>\n<p>2.安装插件<br>npm<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev cypress-file-upload</span><br></pre></td></tr></table></figure></p>\n<p>3.导入插件<br>您需要将其添加<code>cypress/support/commands.js</code>如下<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'cypress-file-upload'</span>;</span><br></pre></td></tr></table></figure></p>\n<p>然后，确保将commands.js导入<code>cypress/support/index.js</code>（可能会被注释）：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>  <span class=\"string\">'./commands'</span> ;</span><br></pre></td></tr></table></figure></p>\n<p>4.使用方法<br>通常的做法是将Cypress测试所需的所有文件放在<code>Cypress/fixtures</code>文件夹中。</p>\n<p>例如:新建test.txt文件</p>\n<p>测试demo<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Create by dell on 2021/3/20</span></span><br><span class=\"line\"><span class=\"comment\"> * Author ：wencheng</span></span><br><span class=\"line\"><span class=\"comment\"> * 微信公众 ：自动化测试 To share</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'file_upload_test'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    beforeEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        cy.login_auto()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    it(<span class=\"string\">'upload'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/* ==== Generated with Cypress Studio ==== */</span></span><br><span class=\"line\">        cy.visit(<span class=\"string\">'/zentao/qa/'</span>);</span><br><span class=\"line\">        cy.get(<span class=\"string\">'[data-id=\"bug\"] &gt; a'</span>).click();</span><br><span class=\"line\">        cy.get(<span class=\"string\">'p &gt; .btn'</span>).click();</span><br><span class=\"line\">        <span class=\"comment\">/* ==== End Cypress Studio ==== */</span></span><br><span class=\"line\">        cy.get(<span class=\"string\">\"input[type='file']\"</span>).attachFile(<span class=\"string\">'test.txt'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>运行结果上传成功<br><img src=\"https://blogimage.houjiyi.com/Fp23dAS_B3cGKYKTDm9X0B1AgVyo\" alt=\"image.png\"></p>\n<p>5.注意事项<br>1.定位上传文件的dom<br>切记定位的是 `input[type=’file’]<br><img src=\"https://blogimage.houjiyi.com/Fp0NLcvG_-mmCFta1wZ67BvrgukW\" alt=\"image.png\"></p>\n<p>2.上传文件内容不能为空<br>当上传文件内容为空时，文件上传失败我们通过debug看下。<br><img src=\"https://blogimage.houjiyi.com/Fqg_9-1t-yOSY-En31giVhmatAmN\" alt=\"image.png\"></p>\n<p>未触发文件上传<br><img src=\"https://blogimage.houjiyi.com/FnU3iJoTDn5l90PBKA8pFWRsN7SX\" alt=\"image.png\"></p>\n<p>触发文件上传会预加载file内容<br><img src=\"https://blogimage.houjiyi.com/FuG6gDoBMYMgFP-WPIlhmyQuiVx3\" alt=\"image.png\"></p>\n<p>以上就是这篇文章的全部内容了，希望本文的内容对大家的学习或者工作具有一定的参考学习价值.</p>\n"},{"title":"Cypress录制自动化脚本","toc":false,"date":"2021-09-17T06:37:58.000Z","_content":"\n# 1. 前言\nCypress Studio提供了一种在测试运行程序中生成测试的可视化方法，通过记录与被测应用程序的交互。支持.click（）、.type（）、.check（）、.uncheck（）和.select（）Cypress命令，这些命令将在与Cypress Studio内部的DOM交互时生成测试代码。\n\n# 2. 使用Cypress Studio\nCypress Studio是一个实验性功能，可以通过向配置文件添加experimentalStudio属性来启用(塞浦路斯.json默认情况下）。\n```json\n{\n  \"experimentalStudio\": true\n}\n```\n\n我们以登录案例，以演示Cypress测试方法、模式和工作流的真实使用。它将用于演示下面Cypress Studio的功能。\n\n# 3.扩展测试\n您可以扩展任何先前存在的测试，也可以使用以下测试支架在您的默认情况下`integrationFolder`（`cypress/integration`在默认情况下）创建一个新测试来开始。\n```js\ndescribe('第一个录制脚本从禅道登录开始', function () {\n    beforeEach(() => {\n        cy.visit('http://localhost:8080/zentao/user-login.html')\n    })\n    it(\"登录输入框功能\", function () {\n    })\n})\n```\n\n## 1. 运行规范\n我们将使用Cypress Studio执行“新事务”用户旅程。首先，启动测试运行程序并运行在上一步中创建的规范。\n![image.png](https://blogimage.houjiyi.com/FsuEGRfK4OXzF8LWcJCH3xd93O8w)\n\n测试完成运行后，将鼠标悬停在命令日志中的测试上方，以显示“将命令添加到测试”按钮。单击“添加要测试的命令”将启动Cypress Studio。\n![image.png](https://blogimage.houjiyi.com/FvmapFIa7x1YhSDOpAIlYtH9sVQU)\n\n## 2. 启动Cypress Studio\n![image.png](https://blogimage.houjiyi.com/FkhCu1daUFlpDuVabCFJV5JNNxOA)\n现在，我们可以开始更新测试以在用户之间创建新事务。\n\n## 3.应用程式互动\n要记录操作，请开始与应用程序进行交互。在这里，我们将单击账号密码输入框，结果将看到单击记录在命令日志中。\n![image.png](https://blogimage.houjiyi.com/FmIfiFLXAaRQMwNFaxxo2HaUlZab)\n\n要放弃交互，请单击“取消”按钮退出Cypress Studio。如果对与应用程序的交互感到满意，请单击“保存命令”，测试代码将保存到spec文件中。\n\n## 4. 生成的测试代码\n查看我们的测试代码，我们可以看到单击“ Save Commands”（保存命令）后更新了测试，并使用了我们在Cypress Studio中记录的操作。\n\n```js\ndescribe('第一个录制脚本从禅道登录开始', function () {\n    it(\"登录输入框功能\", function () {\n        cy.visit('http://localhost:8080/zentao/user-login.html')\n\n        /* ==== Generated with Cypress Studio ==== */\n        cy.get('#account').type('admin');\n        cy.get('.col-8').click();\n        cy.get(':nth-child(2) > td > .form-control').type('longshi@2020');\n        cy.get('.form-actions').click();\n        cy.get('#submit').click();\n        /* ==== End Cypress Studio ==== */\n    })\n})\n```\n\n## 5. 添加新测试\n您可以通过在我们定义的块上单击“添加新测试”，将新测试添加到任何现有describe或块中。context``describe\n![image.png](https://blogimage.houjiyi.com/Fl5x0MTiuC2GeZ4OeMVS1KGWIBEp)\n\n保存后，该文件将在cypress中再次运行。\n![image.png](https://blogimage.houjiyi.com/FiPk98lQwZvtFWVkCqaIZa6AgioG)\n\n最后，查看我们的测试代码，我们可以看到单击“ Save Commands”（保存命令）后更新了测试，并使用了我们在Cypress Studio中记录的操作。\n\n```js\ndescribe('第一个录制脚本从禅道登录开始', function () {\n    it(\"登录输入框功能\", function () {\n        cy.visit('http://localhost:8080/zentao/user-login.html')\n\n        /* ==== Generated with Cypress Studio ==== */\n        cy.get('#account').type('admin');\n        cy.get('.col-8').click();\n        cy.get(':nth-child(2) > td > .form-control').type('longshi@2020');\n        cy.get('.form-actions').click();\n        cy.get('#submit').click();\n        /* ==== End Cypress Studio ==== */\n    })\n\n    /* === Test Created with Cypress Studio === */\n    it('TestDemo', function() {\n        /* ==== Generated with Cypress Studio ==== */\n        cy.visit('http://localhost：8080/zentao/user-login.html');\n        cy.get('#account').type('admin');\n        cy.get('#login').click();\n        cy.get(':nth-child(2) > td > .form-control').type('longshi@2020');\n        cy.get('#submit').click();\n        cy.get('[data-id=\"product\"] > a').click();\n        /* ==== End Cypress Studio ==== */\n    });\n})\n```\n\n## 4. 插件Cypress Recorder\n通过Cypress Recorder也可以实现录制脚本\n百度网盘下载：\n\n> 链接: https://pan.baidu.com/s/1_e-Js8vEugsmNiajOySvXg  \n> 提取码: 5mse \n\n### 1. Cypress Recorder安装\n将下载的zip解压本地，加入到chrome浏览器扩展程序中\n![image.png](https://blogimage.houjiyi.com/Fmeh_C7RTAK2zYaVj3QOw3TQ-6FV)\n\n### 2.启动Cypress Recorder\n![image.png](https://blogimage.houjiyi.com/Fnl69j3WCagkMALTwDt4AII6cY38)\n\n### 3.点击 Start Recording\n![image.png](https://blogimage.houjiyi.com/FukM0wMgFKRvzi2yX1H1U6hvxTor)\n\n```js\ncy.visit('https://www.baidu.com/');\ncy.get('#lg').click();\ncy.get('#kw').click();\ncy.get('#kw').type('博客园');\ncy.get('#su').click();\ncy.get('#form').submit();\n```\n\n以上就是这篇文章的全部内容了，希望本文的内容对大家的学习或者工作具有一定的参考学习价值，如果有疑问大家可以留言交流，谢谢大家的支持。","source":"_posts/Cypress录制自动化脚本.md","raw":"---\ntitle: Cypress录制自动化脚本\ntags:\n  - Web开发\ncategories:\n  - 自动化测试\ntoc: false\ndate: 2021-09-17 14:37:58\n---\n\n# 1. 前言\nCypress Studio提供了一种在测试运行程序中生成测试的可视化方法，通过记录与被测应用程序的交互。支持.click（）、.type（）、.check（）、.uncheck（）和.select（）Cypress命令，这些命令将在与Cypress Studio内部的DOM交互时生成测试代码。\n\n# 2. 使用Cypress Studio\nCypress Studio是一个实验性功能，可以通过向配置文件添加experimentalStudio属性来启用(塞浦路斯.json默认情况下）。\n```json\n{\n  \"experimentalStudio\": true\n}\n```\n\n我们以登录案例，以演示Cypress测试方法、模式和工作流的真实使用。它将用于演示下面Cypress Studio的功能。\n\n# 3.扩展测试\n您可以扩展任何先前存在的测试，也可以使用以下测试支架在您的默认情况下`integrationFolder`（`cypress/integration`在默认情况下）创建一个新测试来开始。\n```js\ndescribe('第一个录制脚本从禅道登录开始', function () {\n    beforeEach(() => {\n        cy.visit('http://localhost:8080/zentao/user-login.html')\n    })\n    it(\"登录输入框功能\", function () {\n    })\n})\n```\n\n## 1. 运行规范\n我们将使用Cypress Studio执行“新事务”用户旅程。首先，启动测试运行程序并运行在上一步中创建的规范。\n![image.png](https://blogimage.houjiyi.com/FsuEGRfK4OXzF8LWcJCH3xd93O8w)\n\n测试完成运行后，将鼠标悬停在命令日志中的测试上方，以显示“将命令添加到测试”按钮。单击“添加要测试的命令”将启动Cypress Studio。\n![image.png](https://blogimage.houjiyi.com/FvmapFIa7x1YhSDOpAIlYtH9sVQU)\n\n## 2. 启动Cypress Studio\n![image.png](https://blogimage.houjiyi.com/FkhCu1daUFlpDuVabCFJV5JNNxOA)\n现在，我们可以开始更新测试以在用户之间创建新事务。\n\n## 3.应用程式互动\n要记录操作，请开始与应用程序进行交互。在这里，我们将单击账号密码输入框，结果将看到单击记录在命令日志中。\n![image.png](https://blogimage.houjiyi.com/FmIfiFLXAaRQMwNFaxxo2HaUlZab)\n\n要放弃交互，请单击“取消”按钮退出Cypress Studio。如果对与应用程序的交互感到满意，请单击“保存命令”，测试代码将保存到spec文件中。\n\n## 4. 生成的测试代码\n查看我们的测试代码，我们可以看到单击“ Save Commands”（保存命令）后更新了测试，并使用了我们在Cypress Studio中记录的操作。\n\n```js\ndescribe('第一个录制脚本从禅道登录开始', function () {\n    it(\"登录输入框功能\", function () {\n        cy.visit('http://localhost:8080/zentao/user-login.html')\n\n        /* ==== Generated with Cypress Studio ==== */\n        cy.get('#account').type('admin');\n        cy.get('.col-8').click();\n        cy.get(':nth-child(2) > td > .form-control').type('longshi@2020');\n        cy.get('.form-actions').click();\n        cy.get('#submit').click();\n        /* ==== End Cypress Studio ==== */\n    })\n})\n```\n\n## 5. 添加新测试\n您可以通过在我们定义的块上单击“添加新测试”，将新测试添加到任何现有describe或块中。context``describe\n![image.png](https://blogimage.houjiyi.com/Fl5x0MTiuC2GeZ4OeMVS1KGWIBEp)\n\n保存后，该文件将在cypress中再次运行。\n![image.png](https://blogimage.houjiyi.com/FiPk98lQwZvtFWVkCqaIZa6AgioG)\n\n最后，查看我们的测试代码，我们可以看到单击“ Save Commands”（保存命令）后更新了测试，并使用了我们在Cypress Studio中记录的操作。\n\n```js\ndescribe('第一个录制脚本从禅道登录开始', function () {\n    it(\"登录输入框功能\", function () {\n        cy.visit('http://localhost:8080/zentao/user-login.html')\n\n        /* ==== Generated with Cypress Studio ==== */\n        cy.get('#account').type('admin');\n        cy.get('.col-8').click();\n        cy.get(':nth-child(2) > td > .form-control').type('longshi@2020');\n        cy.get('.form-actions').click();\n        cy.get('#submit').click();\n        /* ==== End Cypress Studio ==== */\n    })\n\n    /* === Test Created with Cypress Studio === */\n    it('TestDemo', function() {\n        /* ==== Generated with Cypress Studio ==== */\n        cy.visit('http://localhost：8080/zentao/user-login.html');\n        cy.get('#account').type('admin');\n        cy.get('#login').click();\n        cy.get(':nth-child(2) > td > .form-control').type('longshi@2020');\n        cy.get('#submit').click();\n        cy.get('[data-id=\"product\"] > a').click();\n        /* ==== End Cypress Studio ==== */\n    });\n})\n```\n\n## 4. 插件Cypress Recorder\n通过Cypress Recorder也可以实现录制脚本\n百度网盘下载：\n\n> 链接: https://pan.baidu.com/s/1_e-Js8vEugsmNiajOySvXg  \n> 提取码: 5mse \n\n### 1. Cypress Recorder安装\n将下载的zip解压本地，加入到chrome浏览器扩展程序中\n![image.png](https://blogimage.houjiyi.com/Fmeh_C7RTAK2zYaVj3QOw3TQ-6FV)\n\n### 2.启动Cypress Recorder\n![image.png](https://blogimage.houjiyi.com/Fnl69j3WCagkMALTwDt4AII6cY38)\n\n### 3.点击 Start Recording\n![image.png](https://blogimage.houjiyi.com/FukM0wMgFKRvzi2yX1H1U6hvxTor)\n\n```js\ncy.visit('https://www.baidu.com/');\ncy.get('#lg').click();\ncy.get('#kw').click();\ncy.get('#kw').type('博客园');\ncy.get('#su').click();\ncy.get('#form').submit();\n```\n\n以上就是这篇文章的全部内容了，希望本文的内容对大家的学习或者工作具有一定的参考学习价值，如果有疑问大家可以留言交流，谢谢大家的支持。","slug":"Cypress录制自动化脚本","published":1,"updated":"2021-09-22T03:27:32.065Z","_id":"ckto0818x000b7cs684qdjiry","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h1><p>Cypress Studio提供了一种在测试运行程序中生成测试的可视化方法，通过记录与被测应用程序的交互。支持.click（）、.type（）、.check（）、.uncheck（）和.select（）Cypress命令，这些命令将在与Cypress Studio内部的DOM交互时生成测试代码。</p>\n<h1 id=\"2-使用Cypress-Studio\"><a href=\"#2-使用Cypress-Studio\" class=\"headerlink\" title=\"2. 使用Cypress Studio\"></a>2. 使用Cypress Studio</h1><p>Cypress Studio是一个实验性功能，可以通过向配置文件添加experimentalStudio属性来启用(塞浦路斯.json默认情况下）。<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"experimentalStudio\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们以登录案例，以演示Cypress测试方法、模式和工作流的真实使用。它将用于演示下面Cypress Studio的功能。</p>\n<h1 id=\"3-扩展测试\"><a href=\"#3-扩展测试\" class=\"headerlink\" title=\"3.扩展测试\"></a>3.扩展测试</h1><p>您可以扩展任何先前存在的测试，也可以使用以下测试支架在您的默认情况下<code>integrationFolder</code>（<code>cypress/integration</code>在默认情况下）创建一个新测试来开始。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">'第一个录制脚本从禅道登录开始'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    beforeEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        cy.visit(<span class=\"string\">'http://localhost:8080/zentao/user-login.html'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    it(<span class=\"string\">\"登录输入框功能\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"1-运行规范\"><a href=\"#1-运行规范\" class=\"headerlink\" title=\"1. 运行规范\"></a>1. 运行规范</h2><p>我们将使用Cypress Studio执行“新事务”用户旅程。首先，启动测试运行程序并运行在上一步中创建的规范。<br><img src=\"https://blogimage.houjiyi.com/FsuEGRfK4OXzF8LWcJCH3xd93O8w\" alt=\"image.png\"></p>\n<p>测试完成运行后，将鼠标悬停在命令日志中的测试上方，以显示“将命令添加到测试”按钮。单击“添加要测试的命令”将启动Cypress Studio。<br><img src=\"https://blogimage.houjiyi.com/FvmapFIa7x1YhSDOpAIlYtH9sVQU\" alt=\"image.png\"></p>\n<h2 id=\"2-启动Cypress-Studio\"><a href=\"#2-启动Cypress-Studio\" class=\"headerlink\" title=\"2. 启动Cypress Studio\"></a>2. 启动Cypress Studio</h2><p><img src=\"https://blogimage.houjiyi.com/FkhCu1daUFlpDuVabCFJV5JNNxOA\" alt=\"image.png\"><br>现在，我们可以开始更新测试以在用户之间创建新事务。</p>\n<h2 id=\"3-应用程式互动\"><a href=\"#3-应用程式互动\" class=\"headerlink\" title=\"3.应用程式互动\"></a>3.应用程式互动</h2><p>要记录操作，请开始与应用程序进行交互。在这里，我们将单击账号密码输入框，结果将看到单击记录在命令日志中。<br><img src=\"https://blogimage.houjiyi.com/FmIfiFLXAaRQMwNFaxxo2HaUlZab\" alt=\"image.png\"></p>\n<p>要放弃交互，请单击“取消”按钮退出Cypress Studio。如果对与应用程序的交互感到满意，请单击“保存命令”，测试代码将保存到spec文件中。</p>\n<h2 id=\"4-生成的测试代码\"><a href=\"#4-生成的测试代码\" class=\"headerlink\" title=\"4. 生成的测试代码\"></a>4. 生成的测试代码</h2><p>查看我们的测试代码，我们可以看到单击“ Save Commands”（保存命令）后更新了测试，并使用了我们在Cypress Studio中记录的操作。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">'第一个录制脚本从禅道登录开始'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    it(<span class=\"string\">\"登录输入框功能\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        cy.visit(<span class=\"string\">'http://localhost:8080/zentao/user-login.html'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* ==== Generated with Cypress Studio ==== */</span></span><br><span class=\"line\">        cy.get(<span class=\"string\">'#account'</span>).type(<span class=\"string\">'admin'</span>);</span><br><span class=\"line\">        cy.get(<span class=\"string\">'.col-8'</span>).click();</span><br><span class=\"line\">        cy.get(<span class=\"string\">':nth-child(2) &gt; td &gt; .form-control'</span>).type(<span class=\"string\">'longshi@2020'</span>);</span><br><span class=\"line\">        cy.get(<span class=\"string\">'.form-actions'</span>).click();</span><br><span class=\"line\">        cy.get(<span class=\"string\">'#submit'</span>).click();</span><br><span class=\"line\">        <span class=\"comment\">/* ==== End Cypress Studio ==== */</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-添加新测试\"><a href=\"#5-添加新测试\" class=\"headerlink\" title=\"5. 添加新测试\"></a>5. 添加新测试</h2><p>您可以通过在我们定义的块上单击“添加新测试”，将新测试添加到任何现有describe或块中。context<code></code>describe<br><img src=\"https://blogimage.houjiyi.com/Fl5x0MTiuC2GeZ4OeMVS1KGWIBEp\" alt=\"image.png\"></p>\n<p>保存后，该文件将在cypress中再次运行。<br><img src=\"https://blogimage.houjiyi.com/FiPk98lQwZvtFWVkCqaIZa6AgioG\" alt=\"image.png\"></p>\n<p>最后，查看我们的测试代码，我们可以看到单击“ Save Commands”（保存命令）后更新了测试，并使用了我们在Cypress Studio中记录的操作。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">'第一个录制脚本从禅道登录开始'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    it(<span class=\"string\">\"登录输入框功能\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        cy.visit(<span class=\"string\">'http://localhost:8080/zentao/user-login.html'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* ==== Generated with Cypress Studio ==== */</span></span><br><span class=\"line\">        cy.get(<span class=\"string\">'#account'</span>).type(<span class=\"string\">'admin'</span>);</span><br><span class=\"line\">        cy.get(<span class=\"string\">'.col-8'</span>).click();</span><br><span class=\"line\">        cy.get(<span class=\"string\">':nth-child(2) &gt; td &gt; .form-control'</span>).type(<span class=\"string\">'longshi@2020'</span>);</span><br><span class=\"line\">        cy.get(<span class=\"string\">'.form-actions'</span>).click();</span><br><span class=\"line\">        cy.get(<span class=\"string\">'#submit'</span>).click();</span><br><span class=\"line\">        <span class=\"comment\">/* ==== End Cypress Studio ==== */</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* === Test Created with Cypress Studio === */</span></span><br><span class=\"line\">    it(<span class=\"string\">'TestDemo'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/* ==== Generated with Cypress Studio ==== */</span></span><br><span class=\"line\">        cy.visit(<span class=\"string\">'http://localhost：8080/zentao/user-login.html'</span>);</span><br><span class=\"line\">        cy.get(<span class=\"string\">'#account'</span>).type(<span class=\"string\">'admin'</span>);</span><br><span class=\"line\">        cy.get(<span class=\"string\">'#login'</span>).click();</span><br><span class=\"line\">        cy.get(<span class=\"string\">':nth-child(2) &gt; td &gt; .form-control'</span>).type(<span class=\"string\">'longshi@2020'</span>);</span><br><span class=\"line\">        cy.get(<span class=\"string\">'#submit'</span>).click();</span><br><span class=\"line\">        cy.get(<span class=\"string\">'[data-id=\"product\"] &gt; a'</span>).click();</span><br><span class=\"line\">        <span class=\"comment\">/* ==== End Cypress Studio ==== */</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-插件Cypress-Recorder\"><a href=\"#4-插件Cypress-Recorder\" class=\"headerlink\" title=\"4. 插件Cypress Recorder\"></a>4. 插件Cypress Recorder</h2><p>通过Cypress Recorder也可以实现录制脚本<br>百度网盘下载：</p>\n<blockquote>\n<p>链接: <a href=\"https://pan.baidu.com/s/1_e-Js8vEugsmNiajOySvXg\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1_e-Js8vEugsmNiajOySvXg</a><br>提取码: 5mse </p>\n</blockquote>\n<h3 id=\"1-Cypress-Recorder安装\"><a href=\"#1-Cypress-Recorder安装\" class=\"headerlink\" title=\"1. Cypress Recorder安装\"></a>1. Cypress Recorder安装</h3><p>将下载的zip解压本地，加入到chrome浏览器扩展程序中<br><img src=\"https://blogimage.houjiyi.com/Fmeh_C7RTAK2zYaVj3QOw3TQ-6FV\" alt=\"image.png\"></p>\n<h3 id=\"2-启动Cypress-Recorder\"><a href=\"#2-启动Cypress-Recorder\" class=\"headerlink\" title=\"2.启动Cypress Recorder\"></a>2.启动Cypress Recorder</h3><p><img src=\"https://blogimage.houjiyi.com/Fnl69j3WCagkMALTwDt4AII6cY38\" alt=\"image.png\"></p>\n<h3 id=\"3-点击-Start-Recording\"><a href=\"#3-点击-Start-Recording\" class=\"headerlink\" title=\"3.点击 Start Recording\"></a>3.点击 Start Recording</h3><p><img src=\"https://blogimage.houjiyi.com/FukM0wMgFKRvzi2yX1H1U6hvxTor\" alt=\"image.png\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cy.visit(<span class=\"string\">'https://www.baidu.com/'</span>);</span><br><span class=\"line\">cy.get(<span class=\"string\">'#lg'</span>).click();</span><br><span class=\"line\">cy.get(<span class=\"string\">'#kw'</span>).click();</span><br><span class=\"line\">cy.get(<span class=\"string\">'#kw'</span>).type(<span class=\"string\">'博客园'</span>);</span><br><span class=\"line\">cy.get(<span class=\"string\">'#su'</span>).click();</span><br><span class=\"line\">cy.get(<span class=\"string\">'#form'</span>).submit();</span><br></pre></td></tr></table></figure>\n<p>以上就是这篇文章的全部内容了，希望本文的内容对大家的学习或者工作具有一定的参考学习价值，如果有疑问大家可以留言交流，谢谢大家的支持。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h1><p>Cypress Studio提供了一种在测试运行程序中生成测试的可视化方法，通过记录与被测应用程序的交互。支持.click（）、.type（）、.check（）、.uncheck（）和.select（）Cypress命令，这些命令将在与Cypress Studio内部的DOM交互时生成测试代码。</p>\n<h1 id=\"2-使用Cypress-Studio\"><a href=\"#2-使用Cypress-Studio\" class=\"headerlink\" title=\"2. 使用Cypress Studio\"></a>2. 使用Cypress Studio</h1><p>Cypress Studio是一个实验性功能，可以通过向配置文件添加experimentalStudio属性来启用(塞浦路斯.json默认情况下）。<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"experimentalStudio\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们以登录案例，以演示Cypress测试方法、模式和工作流的真实使用。它将用于演示下面Cypress Studio的功能。</p>\n<h1 id=\"3-扩展测试\"><a href=\"#3-扩展测试\" class=\"headerlink\" title=\"3.扩展测试\"></a>3.扩展测试</h1><p>您可以扩展任何先前存在的测试，也可以使用以下测试支架在您的默认情况下<code>integrationFolder</code>（<code>cypress/integration</code>在默认情况下）创建一个新测试来开始。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">'第一个录制脚本从禅道登录开始'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    beforeEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        cy.visit(<span class=\"string\">'http://localhost:8080/zentao/user-login.html'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    it(<span class=\"string\">\"登录输入框功能\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"1-运行规范\"><a href=\"#1-运行规范\" class=\"headerlink\" title=\"1. 运行规范\"></a>1. 运行规范</h2><p>我们将使用Cypress Studio执行“新事务”用户旅程。首先，启动测试运行程序并运行在上一步中创建的规范。<br><img src=\"https://blogimage.houjiyi.com/FsuEGRfK4OXzF8LWcJCH3xd93O8w\" alt=\"image.png\"></p>\n<p>测试完成运行后，将鼠标悬停在命令日志中的测试上方，以显示“将命令添加到测试”按钮。单击“添加要测试的命令”将启动Cypress Studio。<br><img src=\"https://blogimage.houjiyi.com/FvmapFIa7x1YhSDOpAIlYtH9sVQU\" alt=\"image.png\"></p>\n<h2 id=\"2-启动Cypress-Studio\"><a href=\"#2-启动Cypress-Studio\" class=\"headerlink\" title=\"2. 启动Cypress Studio\"></a>2. 启动Cypress Studio</h2><p><img src=\"https://blogimage.houjiyi.com/FkhCu1daUFlpDuVabCFJV5JNNxOA\" alt=\"image.png\"><br>现在，我们可以开始更新测试以在用户之间创建新事务。</p>\n<h2 id=\"3-应用程式互动\"><a href=\"#3-应用程式互动\" class=\"headerlink\" title=\"3.应用程式互动\"></a>3.应用程式互动</h2><p>要记录操作，请开始与应用程序进行交互。在这里，我们将单击账号密码输入框，结果将看到单击记录在命令日志中。<br><img src=\"https://blogimage.houjiyi.com/FmIfiFLXAaRQMwNFaxxo2HaUlZab\" alt=\"image.png\"></p>\n<p>要放弃交互，请单击“取消”按钮退出Cypress Studio。如果对与应用程序的交互感到满意，请单击“保存命令”，测试代码将保存到spec文件中。</p>\n<h2 id=\"4-生成的测试代码\"><a href=\"#4-生成的测试代码\" class=\"headerlink\" title=\"4. 生成的测试代码\"></a>4. 生成的测试代码</h2><p>查看我们的测试代码，我们可以看到单击“ Save Commands”（保存命令）后更新了测试，并使用了我们在Cypress Studio中记录的操作。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">'第一个录制脚本从禅道登录开始'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    it(<span class=\"string\">\"登录输入框功能\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        cy.visit(<span class=\"string\">'http://localhost:8080/zentao/user-login.html'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* ==== Generated with Cypress Studio ==== */</span></span><br><span class=\"line\">        cy.get(<span class=\"string\">'#account'</span>).type(<span class=\"string\">'admin'</span>);</span><br><span class=\"line\">        cy.get(<span class=\"string\">'.col-8'</span>).click();</span><br><span class=\"line\">        cy.get(<span class=\"string\">':nth-child(2) &gt; td &gt; .form-control'</span>).type(<span class=\"string\">'longshi@2020'</span>);</span><br><span class=\"line\">        cy.get(<span class=\"string\">'.form-actions'</span>).click();</span><br><span class=\"line\">        cy.get(<span class=\"string\">'#submit'</span>).click();</span><br><span class=\"line\">        <span class=\"comment\">/* ==== End Cypress Studio ==== */</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-添加新测试\"><a href=\"#5-添加新测试\" class=\"headerlink\" title=\"5. 添加新测试\"></a>5. 添加新测试</h2><p>您可以通过在我们定义的块上单击“添加新测试”，将新测试添加到任何现有describe或块中。context<code></code>describe<br><img src=\"https://blogimage.houjiyi.com/Fl5x0MTiuC2GeZ4OeMVS1KGWIBEp\" alt=\"image.png\"></p>\n<p>保存后，该文件将在cypress中再次运行。<br><img src=\"https://blogimage.houjiyi.com/FiPk98lQwZvtFWVkCqaIZa6AgioG\" alt=\"image.png\"></p>\n<p>最后，查看我们的测试代码，我们可以看到单击“ Save Commands”（保存命令）后更新了测试，并使用了我们在Cypress Studio中记录的操作。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">'第一个录制脚本从禅道登录开始'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    it(<span class=\"string\">\"登录输入框功能\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        cy.visit(<span class=\"string\">'http://localhost:8080/zentao/user-login.html'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* ==== Generated with Cypress Studio ==== */</span></span><br><span class=\"line\">        cy.get(<span class=\"string\">'#account'</span>).type(<span class=\"string\">'admin'</span>);</span><br><span class=\"line\">        cy.get(<span class=\"string\">'.col-8'</span>).click();</span><br><span class=\"line\">        cy.get(<span class=\"string\">':nth-child(2) &gt; td &gt; .form-control'</span>).type(<span class=\"string\">'longshi@2020'</span>);</span><br><span class=\"line\">        cy.get(<span class=\"string\">'.form-actions'</span>).click();</span><br><span class=\"line\">        cy.get(<span class=\"string\">'#submit'</span>).click();</span><br><span class=\"line\">        <span class=\"comment\">/* ==== End Cypress Studio ==== */</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* === Test Created with Cypress Studio === */</span></span><br><span class=\"line\">    it(<span class=\"string\">'TestDemo'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/* ==== Generated with Cypress Studio ==== */</span></span><br><span class=\"line\">        cy.visit(<span class=\"string\">'http://localhost：8080/zentao/user-login.html'</span>);</span><br><span class=\"line\">        cy.get(<span class=\"string\">'#account'</span>).type(<span class=\"string\">'admin'</span>);</span><br><span class=\"line\">        cy.get(<span class=\"string\">'#login'</span>).click();</span><br><span class=\"line\">        cy.get(<span class=\"string\">':nth-child(2) &gt; td &gt; .form-control'</span>).type(<span class=\"string\">'longshi@2020'</span>);</span><br><span class=\"line\">        cy.get(<span class=\"string\">'#submit'</span>).click();</span><br><span class=\"line\">        cy.get(<span class=\"string\">'[data-id=\"product\"] &gt; a'</span>).click();</span><br><span class=\"line\">        <span class=\"comment\">/* ==== End Cypress Studio ==== */</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-插件Cypress-Recorder\"><a href=\"#4-插件Cypress-Recorder\" class=\"headerlink\" title=\"4. 插件Cypress Recorder\"></a>4. 插件Cypress Recorder</h2><p>通过Cypress Recorder也可以实现录制脚本<br>百度网盘下载：</p>\n<blockquote>\n<p>链接: <a href=\"https://pan.baidu.com/s/1_e-Js8vEugsmNiajOySvXg\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1_e-Js8vEugsmNiajOySvXg</a><br>提取码: 5mse </p>\n</blockquote>\n<h3 id=\"1-Cypress-Recorder安装\"><a href=\"#1-Cypress-Recorder安装\" class=\"headerlink\" title=\"1. Cypress Recorder安装\"></a>1. Cypress Recorder安装</h3><p>将下载的zip解压本地，加入到chrome浏览器扩展程序中<br><img src=\"https://blogimage.houjiyi.com/Fmeh_C7RTAK2zYaVj3QOw3TQ-6FV\" alt=\"image.png\"></p>\n<h3 id=\"2-启动Cypress-Recorder\"><a href=\"#2-启动Cypress-Recorder\" class=\"headerlink\" title=\"2.启动Cypress Recorder\"></a>2.启动Cypress Recorder</h3><p><img src=\"https://blogimage.houjiyi.com/Fnl69j3WCagkMALTwDt4AII6cY38\" alt=\"image.png\"></p>\n<h3 id=\"3-点击-Start-Recording\"><a href=\"#3-点击-Start-Recording\" class=\"headerlink\" title=\"3.点击 Start Recording\"></a>3.点击 Start Recording</h3><p><img src=\"https://blogimage.houjiyi.com/FukM0wMgFKRvzi2yX1H1U6hvxTor\" alt=\"image.png\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cy.visit(<span class=\"string\">'https://www.baidu.com/'</span>);</span><br><span class=\"line\">cy.get(<span class=\"string\">'#lg'</span>).click();</span><br><span class=\"line\">cy.get(<span class=\"string\">'#kw'</span>).click();</span><br><span class=\"line\">cy.get(<span class=\"string\">'#kw'</span>).type(<span class=\"string\">'博客园'</span>);</span><br><span class=\"line\">cy.get(<span class=\"string\">'#su'</span>).click();</span><br><span class=\"line\">cy.get(<span class=\"string\">'#form'</span>).submit();</span><br></pre></td></tr></table></figure>\n<p>以上就是这篇文章的全部内容了，希望本文的内容对大家的学习或者工作具有一定的参考学习价值，如果有疑问大家可以留言交流，谢谢大家的支持。</p>\n"},{"title":"Cypress测试用例的编写学习笔记","originContent":"","toc":false,"date":"2021-09-17T06:29:37.000Z","_content":"\n## 前言\n\n> cypress 底层依赖于很多优秀的开源框架，其中包含Mocha。mocha是一个适用于Node.js和浏览器的测试框架。它使用异步测试变得简单、灵活和有趣。\n\n## 在Cypress中基于mocha提供的如下基本功能模块\n- describe()\n- context()\n- in()\n- before()\n- beforeEach()\n- afterEach()\n- after()\n- .only()\n- .skip()\n\n## 下面我们来说下每个函数\n- describe()\ndescribe(name, function(){}) 可以理解为一个模块，在模块内可以下嵌套多个it() 参数name为字符串可以理解为测试用例集描述，function（）用于执行步骤。\n\n- it()\n用于声明一个测试用例，describe()套件中必须至少含有一个it()。\n\n## 钩子函数用法\n\n- before(）初始化执行所有用例之前运行，执行一次\n- beforeEach() 每条用例执行之前都执行\n- afterEach() 每条用例执行之后都执行\n- after() 初始化执行所有用例完之后运行，执行一次\n\n```js\n/**\n * Create by dell on 2020/6/6\n * 作者 ：wencheng\n * */\n\n\ndescribe('登陆web网站案列', function () {\n\tbefore(function () {\n\t\t//初始化执行所有用例之前运行，执行一次\n\t\tcy.log(\"我是before\")\n\t})\n\tafter(function () {\n\t\t//初始化执行所有用例完之后运行，执行一次\n\t\tcy.log(\"我是after\")\n\t})\n\tbeforeEach(function () {\n\t\t//每条用例执行之前都执行\n\t\tcy.log(\"我是beforeEach\")\n\t})\n\tafterEach(function () {\n\t\t//每条用例执行之后都执行\n\t\tcy.log(\"我是afterEach\")\n\t})\n\tit('钩子函数测试01', function () {\n\t\tcy.log(\"hello cypress\")\n\t})\n\tit('钩子函数测试02', function () {\n\t\tcy.log(\"hello cypress\")\n\t\t\n\t})\n})\n```\n执行结果：\n\n![image.png](https://blogimage.houjiyi.com/FvXUrth1k_niae2GG6KNFYw1WJ29)\n\n## .skip()用于跳过不需要执行的测试集合describe()或者测试用例it()\n\n跳过describe()\n\n```js\n/**\n * Create by dell on 2020/6/6\n * 作者 ：wencheng\n * */\n\n\n\ndescribe.skip('skip1', function () {\n\tit('skip函数测试01', function () {\n\t\tcy.log(\"hello cypress\")\n\t})\n})\n\ndescribe('skip12', function () {\n\tit('skip函数测试01', function () {\n\t\tcy.log(\"hello cypress\")\n\t})\n})\n```\n\n执行结果可以看出第一个describe()被忽略了\n\n![image.png](https://blogimage.houjiyi.com/FnF47D1mfNmvaeWBL18vZrEWHzPk)\n\n跳过it()\n\n```js\n/**\n * Create by dell on 2020/6/6\n * 作者 ：wencheng\n * */\n\ndescribe('skip3', function () {\n\tit.skip('skip函数测试01', function () {\n\t\tcy.log(\"hello cypress\")\n\t})\n\tit('skip函数测试02', function () {\n\t\tcy.log(\"hello cypress\")\n\t})\n})\n```\n\n执行结果可以看出第一个it()被忽略了\n\n\n.only指定要运行的测试模块describe()和测试用例it()\n\n指定要执行的测试模块describe.only()\n\n```js\n/**\n * Create by dell on 2020/6/6\n * 作者 ：wencheng\n * */\n\n\ndescribe.only('only1', function () {\n\tit('only函数测试01', function () {\n\t\tcy.log(\"hello cypress\")\n\t})\n})\n\ndescribe('only2', function () {\n\tit('only函数测试02', function () {\n\t\tcy.log(\"hello cypress\")\n\t})\n})\n```\n\n执行结果可以看到只有第一个测试用例集被执行了，第二个没执行。\n![image.png](https://blogimage.houjiyi.com/Fv0IQJ2pMHTzzPG3oQuF5TGhthzx)\n\n指定要执行的测试用例it().only()\n\n```js\n/**\n * Create by dell on 2020/6/6\n * 作者 ：wencheng\n * */\n\n\ndescribe('only3', function () {\n\tit.only('only函数测试01', function () {\n\t\tcy.log(\"hello cypress\")\n\t})\n\tit('only函数测试02', function () {\n\t\tcy.log(\"hello cypress\")\n\t})\n})\n```\n\n执行结果可以看到只有第一个测试用例被执行了，第二个没执行。\n\n![image.png](https://blogimage.houjiyi.com/FgYKvlEHDZgUpmIJPQVWJHs9NhvE)\n\n- 动态使用.skip函数跳过用例\n\n根据判断来进行\n\n```js\n/**\n * Create by dell on 2020/6/6\n * 作者 ：wencheng\n * */\n\n\ndescribe('skip_Dynamic', function () {\n\tconst a = 1\n\tit('skip函数测试', function () {\n\t\tif (a == 1) {\n\t\t\tcy.log(\"hello cypress\")\n\t\t} else {\n\t\t\tcy.log(\"skip cypress\")\n\t\t\tthis.skip()\n\t\t}\n\t})\n\tit('skip函数测试', function () {\n\t\tif (a == 0) {\n\t\t\tcy.log(\"hello cypress\")\n\t\t} else {\n\t\t\tcy.log(\"skip cypress\")\n\t\t\tthis.skip()\n\t\t}\n\t})\n})\n```\n执行结果\n![image.png](https://blogimage.houjiyi.com/FsoBcB0m7YJdCJ3LXNsPXkwJiPgU)\n\n以上就是这篇文章的全部内容了，希望本文的内容对大家的学习或者工作具有一定的参考学习价值，如果有疑问大家可以留言交流，谢谢大家的支持。","source":"_posts/Cypress测试用例的编写学习笔记.md","raw":"---\ntitle: Cypress测试用例的编写学习笔记\ntags:\n  - Web开发\noriginContent: ''\ncategories:\n  - 自动化测试\ntoc: false\ndate: 2021-09-17 14:29:37\n---\n\n## 前言\n\n> cypress 底层依赖于很多优秀的开源框架，其中包含Mocha。mocha是一个适用于Node.js和浏览器的测试框架。它使用异步测试变得简单、灵活和有趣。\n\n## 在Cypress中基于mocha提供的如下基本功能模块\n- describe()\n- context()\n- in()\n- before()\n- beforeEach()\n- afterEach()\n- after()\n- .only()\n- .skip()\n\n## 下面我们来说下每个函数\n- describe()\ndescribe(name, function(){}) 可以理解为一个模块，在模块内可以下嵌套多个it() 参数name为字符串可以理解为测试用例集描述，function（）用于执行步骤。\n\n- it()\n用于声明一个测试用例，describe()套件中必须至少含有一个it()。\n\n## 钩子函数用法\n\n- before(）初始化执行所有用例之前运行，执行一次\n- beforeEach() 每条用例执行之前都执行\n- afterEach() 每条用例执行之后都执行\n- after() 初始化执行所有用例完之后运行，执行一次\n\n```js\n/**\n * Create by dell on 2020/6/6\n * 作者 ：wencheng\n * */\n\n\ndescribe('登陆web网站案列', function () {\n\tbefore(function () {\n\t\t//初始化执行所有用例之前运行，执行一次\n\t\tcy.log(\"我是before\")\n\t})\n\tafter(function () {\n\t\t//初始化执行所有用例完之后运行，执行一次\n\t\tcy.log(\"我是after\")\n\t})\n\tbeforeEach(function () {\n\t\t//每条用例执行之前都执行\n\t\tcy.log(\"我是beforeEach\")\n\t})\n\tafterEach(function () {\n\t\t//每条用例执行之后都执行\n\t\tcy.log(\"我是afterEach\")\n\t})\n\tit('钩子函数测试01', function () {\n\t\tcy.log(\"hello cypress\")\n\t})\n\tit('钩子函数测试02', function () {\n\t\tcy.log(\"hello cypress\")\n\t\t\n\t})\n})\n```\n执行结果：\n\n![image.png](https://blogimage.houjiyi.com/FvXUrth1k_niae2GG6KNFYw1WJ29)\n\n## .skip()用于跳过不需要执行的测试集合describe()或者测试用例it()\n\n跳过describe()\n\n```js\n/**\n * Create by dell on 2020/6/6\n * 作者 ：wencheng\n * */\n\n\n\ndescribe.skip('skip1', function () {\n\tit('skip函数测试01', function () {\n\t\tcy.log(\"hello cypress\")\n\t})\n})\n\ndescribe('skip12', function () {\n\tit('skip函数测试01', function () {\n\t\tcy.log(\"hello cypress\")\n\t})\n})\n```\n\n执行结果可以看出第一个describe()被忽略了\n\n![image.png](https://blogimage.houjiyi.com/FnF47D1mfNmvaeWBL18vZrEWHzPk)\n\n跳过it()\n\n```js\n/**\n * Create by dell on 2020/6/6\n * 作者 ：wencheng\n * */\n\ndescribe('skip3', function () {\n\tit.skip('skip函数测试01', function () {\n\t\tcy.log(\"hello cypress\")\n\t})\n\tit('skip函数测试02', function () {\n\t\tcy.log(\"hello cypress\")\n\t})\n})\n```\n\n执行结果可以看出第一个it()被忽略了\n\n\n.only指定要运行的测试模块describe()和测试用例it()\n\n指定要执行的测试模块describe.only()\n\n```js\n/**\n * Create by dell on 2020/6/6\n * 作者 ：wencheng\n * */\n\n\ndescribe.only('only1', function () {\n\tit('only函数测试01', function () {\n\t\tcy.log(\"hello cypress\")\n\t})\n})\n\ndescribe('only2', function () {\n\tit('only函数测试02', function () {\n\t\tcy.log(\"hello cypress\")\n\t})\n})\n```\n\n执行结果可以看到只有第一个测试用例集被执行了，第二个没执行。\n![image.png](https://blogimage.houjiyi.com/Fv0IQJ2pMHTzzPG3oQuF5TGhthzx)\n\n指定要执行的测试用例it().only()\n\n```js\n/**\n * Create by dell on 2020/6/6\n * 作者 ：wencheng\n * */\n\n\ndescribe('only3', function () {\n\tit.only('only函数测试01', function () {\n\t\tcy.log(\"hello cypress\")\n\t})\n\tit('only函数测试02', function () {\n\t\tcy.log(\"hello cypress\")\n\t})\n})\n```\n\n执行结果可以看到只有第一个测试用例被执行了，第二个没执行。\n\n![image.png](https://blogimage.houjiyi.com/FgYKvlEHDZgUpmIJPQVWJHs9NhvE)\n\n- 动态使用.skip函数跳过用例\n\n根据判断来进行\n\n```js\n/**\n * Create by dell on 2020/6/6\n * 作者 ：wencheng\n * */\n\n\ndescribe('skip_Dynamic', function () {\n\tconst a = 1\n\tit('skip函数测试', function () {\n\t\tif (a == 1) {\n\t\t\tcy.log(\"hello cypress\")\n\t\t} else {\n\t\t\tcy.log(\"skip cypress\")\n\t\t\tthis.skip()\n\t\t}\n\t})\n\tit('skip函数测试', function () {\n\t\tif (a == 0) {\n\t\t\tcy.log(\"hello cypress\")\n\t\t} else {\n\t\t\tcy.log(\"skip cypress\")\n\t\t\tthis.skip()\n\t\t}\n\t})\n})\n```\n执行结果\n![image.png](https://blogimage.houjiyi.com/FsoBcB0m7YJdCJ3LXNsPXkwJiPgU)\n\n以上就是这篇文章的全部内容了，希望本文的内容对大家的学习或者工作具有一定的参考学习价值，如果有疑问大家可以留言交流，谢谢大家的支持。","slug":"Cypress测试用例的编写学习笔记","published":1,"updated":"2021-09-17T06:29:37.847Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckto0818y000e7cs68g4dwn8k","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>cypress 底层依赖于很多优秀的开源框架，其中包含Mocha。mocha是一个适用于Node.js和浏览器的测试框架。它使用异步测试变得简单、灵活和有趣。</p>\n</blockquote>\n<h2 id=\"在Cypress中基于mocha提供的如下基本功能模块\"><a href=\"#在Cypress中基于mocha提供的如下基本功能模块\" class=\"headerlink\" title=\"在Cypress中基于mocha提供的如下基本功能模块\"></a>在Cypress中基于mocha提供的如下基本功能模块</h2><ul>\n<li>describe()</li>\n<li>context()</li>\n<li>in()</li>\n<li>before()</li>\n<li>beforeEach()</li>\n<li>afterEach()</li>\n<li>after()</li>\n<li>.only()</li>\n<li>.skip()</li>\n</ul>\n<h2 id=\"下面我们来说下每个函数\"><a href=\"#下面我们来说下每个函数\" class=\"headerlink\" title=\"下面我们来说下每个函数\"></a>下面我们来说下每个函数</h2><ul>\n<li><p>describe()<br>describe(name, function(){}) 可以理解为一个模块，在模块内可以下嵌套多个it() 参数name为字符串可以理解为测试用例集描述，function（）用于执行步骤。</p>\n</li>\n<li><p>it()<br>用于声明一个测试用例，describe()套件中必须至少含有一个it()。</p>\n</li>\n</ul>\n<h2 id=\"钩子函数用法\"><a href=\"#钩子函数用法\" class=\"headerlink\" title=\"钩子函数用法\"></a>钩子函数用法</h2><ul>\n<li>before(）初始化执行所有用例之前运行，执行一次</li>\n<li>beforeEach() 每条用例执行之前都执行</li>\n<li>afterEach() 每条用例执行之后都执行</li>\n<li>after() 初始化执行所有用例完之后运行，执行一次</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Create by dell on 2020/6/6</span></span><br><span class=\"line\"><span class=\"comment\"> * 作者 ：wencheng</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'登陆web网站案列'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\tbefore(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//初始化执行所有用例之前运行，执行一次</span></span><br><span class=\"line\">\t\tcy.log(<span class=\"string\">\"我是before\"</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tafter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//初始化执行所有用例完之后运行，执行一次</span></span><br><span class=\"line\">\t\tcy.log(<span class=\"string\">\"我是after\"</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tbeforeEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//每条用例执行之前都执行</span></span><br><span class=\"line\">\t\tcy.log(<span class=\"string\">\"我是beforeEach\"</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tafterEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//每条用例执行之后都执行</span></span><br><span class=\"line\">\t\tcy.log(<span class=\"string\">\"我是afterEach\"</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tit(<span class=\"string\">'钩子函数测试01'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\tcy.log(<span class=\"string\">\"hello cypress\"</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tit(<span class=\"string\">'钩子函数测试02'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\tcy.log(<span class=\"string\">\"hello cypress\"</span>)</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<p><img src=\"https://blogimage.houjiyi.com/FvXUrth1k_niae2GG6KNFYw1WJ29\" alt=\"image.png\"></p>\n<h2 id=\"skip-用于跳过不需要执行的测试集合describe-或者测试用例it\"><a href=\"#skip-用于跳过不需要执行的测试集合describe-或者测试用例it\" class=\"headerlink\" title=\".skip()用于跳过不需要执行的测试集合describe()或者测试用例it()\"></a>.skip()用于跳过不需要执行的测试集合describe()或者测试用例it()</h2><p>跳过describe()</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Create by dell on 2020/6/6</span></span><br><span class=\"line\"><span class=\"comment\"> * 作者 ：wencheng</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">describe.skip(<span class=\"string\">'skip1'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\tit(<span class=\"string\">'skip函数测试01'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\tcy.log(<span class=\"string\">\"hello cypress\"</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'skip12'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\tit(<span class=\"string\">'skip函数测试01'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\tcy.log(<span class=\"string\">\"hello cypress\"</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>执行结果可以看出第一个describe()被忽略了</p>\n<p><img src=\"https://blogimage.houjiyi.com/FnF47D1mfNmvaeWBL18vZrEWHzPk\" alt=\"image.png\"></p>\n<p>跳过it()</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Create by dell on 2020/6/6</span></span><br><span class=\"line\"><span class=\"comment\"> * 作者 ：wencheng</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'skip3'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\tit.skip(<span class=\"string\">'skip函数测试01'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\tcy.log(<span class=\"string\">\"hello cypress\"</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tit(<span class=\"string\">'skip函数测试02'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\tcy.log(<span class=\"string\">\"hello cypress\"</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>执行结果可以看出第一个it()被忽略了</p>\n<p>.only指定要运行的测试模块describe()和测试用例it()</p>\n<p>指定要执行的测试模块describe.only()</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Create by dell on 2020/6/6</span></span><br><span class=\"line\"><span class=\"comment\"> * 作者 ：wencheng</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">describe.only(<span class=\"string\">'only1'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\tit(<span class=\"string\">'only函数测试01'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\tcy.log(<span class=\"string\">\"hello cypress\"</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'only2'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\tit(<span class=\"string\">'only函数测试02'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\tcy.log(<span class=\"string\">\"hello cypress\"</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>执行结果可以看到只有第一个测试用例集被执行了，第二个没执行。<br><img src=\"https://blogimage.houjiyi.com/Fv0IQJ2pMHTzzPG3oQuF5TGhthzx\" alt=\"image.png\"></p>\n<p>指定要执行的测试用例it().only()</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Create by dell on 2020/6/6</span></span><br><span class=\"line\"><span class=\"comment\"> * 作者 ：wencheng</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'only3'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\tit.only(<span class=\"string\">'only函数测试01'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\tcy.log(<span class=\"string\">\"hello cypress\"</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tit(<span class=\"string\">'only函数测试02'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\tcy.log(<span class=\"string\">\"hello cypress\"</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>执行结果可以看到只有第一个测试用例被执行了，第二个没执行。</p>\n<p><img src=\"https://blogimage.houjiyi.com/FgYKvlEHDZgUpmIJPQVWJHs9NhvE\" alt=\"image.png\"></p>\n<ul>\n<li>动态使用.skip函数跳过用例</li>\n</ul>\n<p>根据判断来进行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Create by dell on 2020/6/6</span></span><br><span class=\"line\"><span class=\"comment\"> * 作者 ：wencheng</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'skip_Dynamic'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">\tit(<span class=\"string\">'skip函数测试'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (a == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\tcy.log(<span class=\"string\">\"hello cypress\"</span>)</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tcy.log(<span class=\"string\">\"skip cypress\"</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.skip()</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tit(<span class=\"string\">'skip函数测试'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (a == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tcy.log(<span class=\"string\">\"hello cypress\"</span>)</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tcy.log(<span class=\"string\">\"skip cypress\"</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.skip()</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>执行结果<br><img src=\"https://blogimage.houjiyi.com/FsoBcB0m7YJdCJ3LXNsPXkwJiPgU\" alt=\"image.png\"></p>\n<p>以上就是这篇文章的全部内容了，希望本文的内容对大家的学习或者工作具有一定的参考学习价值，如果有疑问大家可以留言交流，谢谢大家的支持。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>cypress 底层依赖于很多优秀的开源框架，其中包含Mocha。mocha是一个适用于Node.js和浏览器的测试框架。它使用异步测试变得简单、灵活和有趣。</p>\n</blockquote>\n<h2 id=\"在Cypress中基于mocha提供的如下基本功能模块\"><a href=\"#在Cypress中基于mocha提供的如下基本功能模块\" class=\"headerlink\" title=\"在Cypress中基于mocha提供的如下基本功能模块\"></a>在Cypress中基于mocha提供的如下基本功能模块</h2><ul>\n<li>describe()</li>\n<li>context()</li>\n<li>in()</li>\n<li>before()</li>\n<li>beforeEach()</li>\n<li>afterEach()</li>\n<li>after()</li>\n<li>.only()</li>\n<li>.skip()</li>\n</ul>\n<h2 id=\"下面我们来说下每个函数\"><a href=\"#下面我们来说下每个函数\" class=\"headerlink\" title=\"下面我们来说下每个函数\"></a>下面我们来说下每个函数</h2><ul>\n<li><p>describe()<br>describe(name, function(){}) 可以理解为一个模块，在模块内可以下嵌套多个it() 参数name为字符串可以理解为测试用例集描述，function（）用于执行步骤。</p>\n</li>\n<li><p>it()<br>用于声明一个测试用例，describe()套件中必须至少含有一个it()。</p>\n</li>\n</ul>\n<h2 id=\"钩子函数用法\"><a href=\"#钩子函数用法\" class=\"headerlink\" title=\"钩子函数用法\"></a>钩子函数用法</h2><ul>\n<li>before(）初始化执行所有用例之前运行，执行一次</li>\n<li>beforeEach() 每条用例执行之前都执行</li>\n<li>afterEach() 每条用例执行之后都执行</li>\n<li>after() 初始化执行所有用例完之后运行，执行一次</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Create by dell on 2020/6/6</span></span><br><span class=\"line\"><span class=\"comment\"> * 作者 ：wencheng</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'登陆web网站案列'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\tbefore(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//初始化执行所有用例之前运行，执行一次</span></span><br><span class=\"line\">\t\tcy.log(<span class=\"string\">\"我是before\"</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tafter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//初始化执行所有用例完之后运行，执行一次</span></span><br><span class=\"line\">\t\tcy.log(<span class=\"string\">\"我是after\"</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tbeforeEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//每条用例执行之前都执行</span></span><br><span class=\"line\">\t\tcy.log(<span class=\"string\">\"我是beforeEach\"</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tafterEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//每条用例执行之后都执行</span></span><br><span class=\"line\">\t\tcy.log(<span class=\"string\">\"我是afterEach\"</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tit(<span class=\"string\">'钩子函数测试01'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\tcy.log(<span class=\"string\">\"hello cypress\"</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tit(<span class=\"string\">'钩子函数测试02'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\tcy.log(<span class=\"string\">\"hello cypress\"</span>)</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<p><img src=\"https://blogimage.houjiyi.com/FvXUrth1k_niae2GG6KNFYw1WJ29\" alt=\"image.png\"></p>\n<h2 id=\"skip-用于跳过不需要执行的测试集合describe-或者测试用例it\"><a href=\"#skip-用于跳过不需要执行的测试集合describe-或者测试用例it\" class=\"headerlink\" title=\".skip()用于跳过不需要执行的测试集合describe()或者测试用例it()\"></a>.skip()用于跳过不需要执行的测试集合describe()或者测试用例it()</h2><p>跳过describe()</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Create by dell on 2020/6/6</span></span><br><span class=\"line\"><span class=\"comment\"> * 作者 ：wencheng</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">describe.skip(<span class=\"string\">'skip1'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\tit(<span class=\"string\">'skip函数测试01'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\tcy.log(<span class=\"string\">\"hello cypress\"</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'skip12'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\tit(<span class=\"string\">'skip函数测试01'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\tcy.log(<span class=\"string\">\"hello cypress\"</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>执行结果可以看出第一个describe()被忽略了</p>\n<p><img src=\"https://blogimage.houjiyi.com/FnF47D1mfNmvaeWBL18vZrEWHzPk\" alt=\"image.png\"></p>\n<p>跳过it()</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Create by dell on 2020/6/6</span></span><br><span class=\"line\"><span class=\"comment\"> * 作者 ：wencheng</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'skip3'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\tit.skip(<span class=\"string\">'skip函数测试01'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\tcy.log(<span class=\"string\">\"hello cypress\"</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tit(<span class=\"string\">'skip函数测试02'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\tcy.log(<span class=\"string\">\"hello cypress\"</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>执行结果可以看出第一个it()被忽略了</p>\n<p>.only指定要运行的测试模块describe()和测试用例it()</p>\n<p>指定要执行的测试模块describe.only()</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Create by dell on 2020/6/6</span></span><br><span class=\"line\"><span class=\"comment\"> * 作者 ：wencheng</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">describe.only(<span class=\"string\">'only1'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\tit(<span class=\"string\">'only函数测试01'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\tcy.log(<span class=\"string\">\"hello cypress\"</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'only2'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\tit(<span class=\"string\">'only函数测试02'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\tcy.log(<span class=\"string\">\"hello cypress\"</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>执行结果可以看到只有第一个测试用例集被执行了，第二个没执行。<br><img src=\"https://blogimage.houjiyi.com/Fv0IQJ2pMHTzzPG3oQuF5TGhthzx\" alt=\"image.png\"></p>\n<p>指定要执行的测试用例it().only()</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Create by dell on 2020/6/6</span></span><br><span class=\"line\"><span class=\"comment\"> * 作者 ：wencheng</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'only3'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\tit.only(<span class=\"string\">'only函数测试01'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\tcy.log(<span class=\"string\">\"hello cypress\"</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tit(<span class=\"string\">'only函数测试02'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\tcy.log(<span class=\"string\">\"hello cypress\"</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>执行结果可以看到只有第一个测试用例被执行了，第二个没执行。</p>\n<p><img src=\"https://blogimage.houjiyi.com/FgYKvlEHDZgUpmIJPQVWJHs9NhvE\" alt=\"image.png\"></p>\n<ul>\n<li>动态使用.skip函数跳过用例</li>\n</ul>\n<p>根据判断来进行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Create by dell on 2020/6/6</span></span><br><span class=\"line\"><span class=\"comment\"> * 作者 ：wencheng</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'skip_Dynamic'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">\tit(<span class=\"string\">'skip函数测试'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (a == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\tcy.log(<span class=\"string\">\"hello cypress\"</span>)</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tcy.log(<span class=\"string\">\"skip cypress\"</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.skip()</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tit(<span class=\"string\">'skip函数测试'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (a == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tcy.log(<span class=\"string\">\"hello cypress\"</span>)</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tcy.log(<span class=\"string\">\"skip cypress\"</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.skip()</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>执行结果<br><img src=\"https://blogimage.houjiyi.com/FsoBcB0m7YJdCJ3LXNsPXkwJiPgU\" alt=\"image.png\"></p>\n<p>以上就是这篇文章的全部内容了，希望本文的内容对大家的学习或者工作具有一定的参考学习价值，如果有疑问大家可以留言交流，谢谢大家的支持。</p>\n"},{"title":"通过scp上传文件/文件夹到服务器","originContent":"","toc":false,"date":"2021-09-29T05:56:03.000Z","_content":"\n```bash\n// 上传\nscp 文件 username@ip:/目录\nscp -r 文件夹 username@ip:/目录\n\n// 下载\nscp username@ip:/目录  本地目录\n\n通过ssh username@ip 可连接服务器查看\n```","source":"_posts/通过scp上传文件-文件夹到服务器.md","raw":"---\ntitle: 通过scp上传文件/文件夹到服务器\ntags:\n  - linux\n  - 知识点备忘\noriginContent: ''\ncategories:\n  - Web开发\ntoc: false\ndate: 2021-09-29 13:56:03\n---\n\n```bash\n// 上传\nscp 文件 username@ip:/目录\nscp -r 文件夹 username@ip:/目录\n\n// 下载\nscp username@ip:/目录  本地目录\n\n通过ssh username@ip 可连接服务器查看\n```","slug":"通过scp上传文件-文件夹到服务器","published":1,"updated":"2021-09-29T05:56:03.473Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cku53i79400007qfychpb1lh3","content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 上传</span><br><span class=\"line\">scp 文件 username@ip:/目录</span><br><span class=\"line\">scp -r 文件夹 username@ip:/目录</span><br><span class=\"line\"></span><br><span class=\"line\">// 下载</span><br><span class=\"line\">scp username@ip:/目录  本地目录</span><br><span class=\"line\"></span><br><span class=\"line\">通过ssh username@ip 可连接服务器查看</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 上传</span><br><span class=\"line\">scp 文件 username@ip:/目录</span><br><span class=\"line\">scp -r 文件夹 username@ip:/目录</span><br><span class=\"line\"></span><br><span class=\"line\">// 下载</span><br><span class=\"line\">scp username@ip:/目录  本地目录</span><br><span class=\"line\"></span><br><span class=\"line\">通过ssh username@ip 可连接服务器查看</span><br></pre></td></tr></table></figure>"},{"title":"VSCode 配置上传与下载","originContent":"","toc":false,"date":"2021-10-13T06:44:13.000Z","_content":"\n```dash\n上传：shift+option+U\n下载：shift+option+D\n```\n","source":"_posts/VSCode-配置上传与下载.md","raw":"---\ntitle: VSCode 配置上传与下载\ntags:\n  - Web开发\noriginContent: ''\ncategories:\n  - Web开发\ntoc: false\ndate: 2021-10-13 14:44:13\n---\n\n```dash\n上传：shift+option+U\n下载：shift+option+D\n```\n","slug":"VSCode-配置上传与下载","published":1,"updated":"2021-10-13T06:44:13.753Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckup5e1w700003qs6l2qsbwoq","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">上传：shift+option+U</span><br><span class=\"line\">下载：shift+option+D</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">上传：shift+option+U</span><br><span class=\"line\">下载：shift+option+D</span><br></pre></td></tr></table></figure>\n"},{"title":"浅谈Vue中的虚拟DOM","originContent":"","toc":false,"date":"2021-10-21T07:24:36.000Z","_content":"\n## 前言\nVue2.0引入了虚拟DOM，比Vue1.0的初始渲染速度提升了2～4倍，并大大降低了内存消耗。目前主流的前端框架Vue、React核心技术也都使用了虚拟DOM，你是否好奇为什么要提出虚拟DOM，虚拟DOM是什么，它有什么优势？这一切的问题，都将在本篇揭晓。\n\n## 为什么要提出虚拟DOM\n在Web早期，页面的交互比较简单，没有复杂的状态需要管理，也不太需要频繁的操作DOM，随着时代的发展，页面上的功能越来越多，我们需要实现的需求也越来越复杂，DOM的操作也越来越频繁。通过js操作DOM的代价很高，因为会引起页面的重排重绘，增加浏览器的性能开销，降低页面渲染速度，既然操作dom的代价很高那么有没有那种方式可以减少对dom的操作？这就是为什么提出虚拟dom一个很重要的原因。\n\n## 模版转换成视图的过程\n在正式介绍Virtual DOM之前，我们有必要先了解下模版转换成视图的整个过程(如下图)：\n- Vue.js通过编译将模版转换成渲染函数(render)，执行渲染函数就可以得到一个虚拟DOM\n- 在对模型进行操作的时候，会触发对应的Dep中的Watcher对象。Watcher对象会调用对应的update来修改视图。这个过程主要是将新旧虚拟DOM进行差异对比，然后根据结果进行对比。\n简单点讲，在Vue的实现上，Vue讲模版编译成虚拟DOM渲染函数。结合Vue自带的响应系统，在状态改变时，Vue能够智能地计算出重新渲染组件的最小代价并应用到DOM操作上。\n![image.png](https://blogimage.houjiyi.com/Fl12e31OgbTL-xnjXd_Yyr0ofZmW)\n\n我们先对上图几个概念嵌入解释：\n\n- 渲染函数：渲染函数是用来生成虚拟DOM的。Vue推荐使用模版来构建我们的应用界面，在实现中Vue布局模版编译成渲染函数，当然我们也可以不写模版，直接写渲染函数，这样子更接近编译后的模版。\n- vnode虚拟节点：它可以代表一个真实的DOM节点通过createElement方法能将vnode渲染成DOM节点，简单地说，虚拟节点可以理解成节点描述对象，它描述了应该怎样去创建真实的DOM节点。\n- patch(也称为patching算法)：虚拟DOM最核心的部分，它可以将vnode渲染成真实的DOM，这个过程是对比新旧虚拟节点之间有哪些不同，然后根据对比结果找出需要更新的的节点进行更新。这点我们从单词含义就可以看出， patch本身就有补丁、修补的意思，其实际作用是在现有DOM上进行修改来实现更新视图的目的。Vue的Virtual DOM Patching算法是基于Snabbdom的实现，并在些基础上作了很多的调整和改进。\n\n## Virtual DOM 是什么？\nVirtual DOM 其实就是一棵以 JavaScript 对象( VNode 节点)作为基础的树，用对象属性来描述节点，实际上它只是一层对真实 DOM 的抽象。最终可以通过一系列操作使这棵树映射到真实环境上。\n\n  简单来说，可以把Virtual DOM 理解为一个简单的JS对象，并且最少包含标签名( tag)、属性(attrs)和子元素对象( children)三个属性。不同的框架对这三个属性的命名会有点差别。\n\n对于虚拟DOM，咱们来看一个简单的实例，就是下图所示的这个，详细的阐述了模板 → 渲染函数 → 虚拟DOM树 → 真实DOM的一个过程\n\n![image.png](https://blogimage.houjiyi.com/FkAtIjsxjASDIO_lxH_aD_ZABlLX)\n\n## 为什么虚拟DOM可以提高渲染速度\n\n传统方式用js操作DOM会有很多额外的DOM操作，例如，一个ul标签下有很多个li标签，其中只有一个li有变化，这种情况下如果使用新的ul去替代旧的ul，其实除了那个发生变化的li节点之外，其他节点都不需要重新渲染。由于DOM操作比较慢，所以这些DOM操作在性能上会有一定的浪费，避免这些不必要的DOM操作会提升很大一部分性能(减少重排重绘从而节省浏览器的性能开销)。\n  为了避免不必要的DOM操作，虚拟DOM在虚拟节点映射到视图的过程中，将虚拟节点与上一次渲染视图所使用的虚拟节点(oldVnode)做对比，找出真正需要更新的节点来进行DOM操作，从而避免操作其他无任何改动的DOM。\n其实虚拟DOM在Vue.js中主要做了两件事：\n- 提供与真实DOM节点所对应的虚拟节点vnode\n- 将虚拟节点vnode和旧虚拟节点oldVnode进行比对，然后更新视图\n对两个虚拟节点进行对比是虚拟DOM中最核心的算法即patch，patch算法的核心是diff算法，它可以判断出哪些节点发生了变化，从而只对发生了变化的节点进行更新操作。\n\n## diff算法\n![image.png](https://blogimage.houjiyi.com/FhrRWops52b2yTl2OoF52MLf60r3)\n\nVue的diff算法是基于snabbdom改造过来的，仅在同级的vnode间做diff，递归地进行同级vnode的diff，最终实现整个DOM树的更新。因为跨层级的操作是非常少的，忽略不计，这样时间复杂度就从O(n3)变成O(n)。\n\ndiff 算法包括几个步骤：\n\n- 用 JavaScript 对象结构表示 DOM 树的结构；然后用这个树构建一个真正的 DOM 树，插到文档当中\n- 当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较，记录两棵树差异\n- 把所记录的差异应用到所构建的真正的DOM树上，视图就更新了\n\n![image.png](https://blogimage.houjiyi.com/Fra1xRvFBjNvLWoOV5ou2TlZMRfA)\n\n## diff算法的实现过程\ndiff 算法本身非常复杂，实现难度很大。本文去繁就简，粗略介绍以下两个核心函数实现流程：\npatch(container,vnode) :初次渲染的时候，将VDOM渲染成真正的DOM然后插入到容器里面。\npatch(vnode,newVnode):再次渲染的时候，将新的vnode和旧的vnode相对比，然后之间差异应用到所构建的真正的DOM树上。\n\n## patch(container,vnode)\n通过这个函数可以让VNode渲染成真正的DOM，我们通过以下模拟代码，可以了解大致过程：\n```javascript\nfunction createElement(vnode) {    \n  var tag = vnode.tag  \n  var attrs = vnode.attrs || {}    \n  var children = vnode.children || []    \n  if (!tag) {       \n   return null  \n  }    \n  // 创建真实的 DOM 元素    \n  var elem = document.createElement(tag)   \n  // 属性    \n  var attrName    \n  for (attrName in attrs) {    \n    if (attrs.hasOwnProperty(attrName)) { \n           // 给 elem 添加属性\n           elem.setAttribute(attrName, attrs[attrName])\n        }\n    }\n    // 子元素\n    children.forEach(function (childVnode) {\n        // 给 elem 添加子元素，如果还有子节点，则递归的生成子节点。\n        elem.appendChild(createElement(childVnode))  // 递归\n    })    // 返回真实的 DOM 元素   \n return elem\n}\n```\n\n## patch(vnode,newVnode)\n这里我们只考虑vnode与newVnode如何对比的情况：\n```javascript\nfunction updateChildren(vnode, newVnode) {\n    var children = vnode.children || []\n    var newChildren = newVnode.children || []\n    // 遍历现有的children\n    children.forEach(function (childVnode, index) {\n        var newChildVnode = newChildren[index]\n        // 两者tag一样\n        if (childVnode.tag === newChildVnode.tag) {\n            // 深层次对比，递归\n            updateChildren(childVnode, newChildVnode)\n        } else { \n           // 两者tag不一样\n           replaceNode(childVnode, newChildVnode) \n       }\n    }\n)}\n```\n\n## Virtual DOM的优势\n- 具备跨平台的优势\n由于 Virtual DOM 是以 JavaScript 对象为基础而不依赖真实平台环境，所以使它具有了跨平台的能力，比如说浏览器平台、Weex、Node 等。\n\n- 操作 DOM 慢，js运行效率高。我们可以将DOM对比操作放在JS层，提高效率。\n因为DOM操作的执行速度远不如Javascript的运算速度快，因此，把大量的DOM操作搬运到Javascript中，运用patching算法来计算出真正需要更新的节点，最大限度地减少DOM操作，从而显著提高性能。\n\nVirtual DOM 本质上就是在 JS 和 DOM 之间做了一个缓存。可以类比 CPU 和硬盘，既然硬盘这么慢，我们就在它们之间加个缓存：既然 DOM 这么慢，我们就在它们 JS 和 DOM 之间加个缓存。CPU（JS）只操作内存（Virtual DOM），最后的时候再把变更写入硬盘（DOM）\n\n- 提升渲染性能\nVirtual DOM的优势不在于单次的操作，而是在大量、频繁的数据更新下，能够对视图进行合理、高效的更新。\n\n> 总结：Vue.js通过编译将模版转换成渲染函数(render)，执行渲染函数就可以得到一个虚拟节点树(虚拟DOM)，虚拟节点树(虚拟DOM)提供虚拟节点vnode和对新旧两个vnode进行比对并根据比对结果进行DOM操作来更新视图，达到减少对DOM的目的，从而减少浏览器的开销，提高渲染速度，改善用户体验。\n\n参考文章：\nhttps://github.com/ljianshu/Blog/issues/69\nhttps://book.douban.com/subject/32581281/\n\n原文地址：https://www.jianshu.com/p/4dbb3712ced7","source":"_posts/浅谈Vue中的虚拟DOM.md","raw":"---\ntitle: 浅谈Vue中的虚拟DOM\ntags:\n  - 知识点备忘\noriginContent: ''\ncategories:\n  - Web开发\ntoc: false\ndate: 2021-10-21 15:24:36\n---\n\n## 前言\nVue2.0引入了虚拟DOM，比Vue1.0的初始渲染速度提升了2～4倍，并大大降低了内存消耗。目前主流的前端框架Vue、React核心技术也都使用了虚拟DOM，你是否好奇为什么要提出虚拟DOM，虚拟DOM是什么，它有什么优势？这一切的问题，都将在本篇揭晓。\n\n## 为什么要提出虚拟DOM\n在Web早期，页面的交互比较简单，没有复杂的状态需要管理，也不太需要频繁的操作DOM，随着时代的发展，页面上的功能越来越多，我们需要实现的需求也越来越复杂，DOM的操作也越来越频繁。通过js操作DOM的代价很高，因为会引起页面的重排重绘，增加浏览器的性能开销，降低页面渲染速度，既然操作dom的代价很高那么有没有那种方式可以减少对dom的操作？这就是为什么提出虚拟dom一个很重要的原因。\n\n## 模版转换成视图的过程\n在正式介绍Virtual DOM之前，我们有必要先了解下模版转换成视图的整个过程(如下图)：\n- Vue.js通过编译将模版转换成渲染函数(render)，执行渲染函数就可以得到一个虚拟DOM\n- 在对模型进行操作的时候，会触发对应的Dep中的Watcher对象。Watcher对象会调用对应的update来修改视图。这个过程主要是将新旧虚拟DOM进行差异对比，然后根据结果进行对比。\n简单点讲，在Vue的实现上，Vue讲模版编译成虚拟DOM渲染函数。结合Vue自带的响应系统，在状态改变时，Vue能够智能地计算出重新渲染组件的最小代价并应用到DOM操作上。\n![image.png](https://blogimage.houjiyi.com/Fl12e31OgbTL-xnjXd_Yyr0ofZmW)\n\n我们先对上图几个概念嵌入解释：\n\n- 渲染函数：渲染函数是用来生成虚拟DOM的。Vue推荐使用模版来构建我们的应用界面，在实现中Vue布局模版编译成渲染函数，当然我们也可以不写模版，直接写渲染函数，这样子更接近编译后的模版。\n- vnode虚拟节点：它可以代表一个真实的DOM节点通过createElement方法能将vnode渲染成DOM节点，简单地说，虚拟节点可以理解成节点描述对象，它描述了应该怎样去创建真实的DOM节点。\n- patch(也称为patching算法)：虚拟DOM最核心的部分，它可以将vnode渲染成真实的DOM，这个过程是对比新旧虚拟节点之间有哪些不同，然后根据对比结果找出需要更新的的节点进行更新。这点我们从单词含义就可以看出， patch本身就有补丁、修补的意思，其实际作用是在现有DOM上进行修改来实现更新视图的目的。Vue的Virtual DOM Patching算法是基于Snabbdom的实现，并在些基础上作了很多的调整和改进。\n\n## Virtual DOM 是什么？\nVirtual DOM 其实就是一棵以 JavaScript 对象( VNode 节点)作为基础的树，用对象属性来描述节点，实际上它只是一层对真实 DOM 的抽象。最终可以通过一系列操作使这棵树映射到真实环境上。\n\n  简单来说，可以把Virtual DOM 理解为一个简单的JS对象，并且最少包含标签名( tag)、属性(attrs)和子元素对象( children)三个属性。不同的框架对这三个属性的命名会有点差别。\n\n对于虚拟DOM，咱们来看一个简单的实例，就是下图所示的这个，详细的阐述了模板 → 渲染函数 → 虚拟DOM树 → 真实DOM的一个过程\n\n![image.png](https://blogimage.houjiyi.com/FkAtIjsxjASDIO_lxH_aD_ZABlLX)\n\n## 为什么虚拟DOM可以提高渲染速度\n\n传统方式用js操作DOM会有很多额外的DOM操作，例如，一个ul标签下有很多个li标签，其中只有一个li有变化，这种情况下如果使用新的ul去替代旧的ul，其实除了那个发生变化的li节点之外，其他节点都不需要重新渲染。由于DOM操作比较慢，所以这些DOM操作在性能上会有一定的浪费，避免这些不必要的DOM操作会提升很大一部分性能(减少重排重绘从而节省浏览器的性能开销)。\n  为了避免不必要的DOM操作，虚拟DOM在虚拟节点映射到视图的过程中，将虚拟节点与上一次渲染视图所使用的虚拟节点(oldVnode)做对比，找出真正需要更新的节点来进行DOM操作，从而避免操作其他无任何改动的DOM。\n其实虚拟DOM在Vue.js中主要做了两件事：\n- 提供与真实DOM节点所对应的虚拟节点vnode\n- 将虚拟节点vnode和旧虚拟节点oldVnode进行比对，然后更新视图\n对两个虚拟节点进行对比是虚拟DOM中最核心的算法即patch，patch算法的核心是diff算法，它可以判断出哪些节点发生了变化，从而只对发生了变化的节点进行更新操作。\n\n## diff算法\n![image.png](https://blogimage.houjiyi.com/FhrRWops52b2yTl2OoF52MLf60r3)\n\nVue的diff算法是基于snabbdom改造过来的，仅在同级的vnode间做diff，递归地进行同级vnode的diff，最终实现整个DOM树的更新。因为跨层级的操作是非常少的，忽略不计，这样时间复杂度就从O(n3)变成O(n)。\n\ndiff 算法包括几个步骤：\n\n- 用 JavaScript 对象结构表示 DOM 树的结构；然后用这个树构建一个真正的 DOM 树，插到文档当中\n- 当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较，记录两棵树差异\n- 把所记录的差异应用到所构建的真正的DOM树上，视图就更新了\n\n![image.png](https://blogimage.houjiyi.com/Fra1xRvFBjNvLWoOV5ou2TlZMRfA)\n\n## diff算法的实现过程\ndiff 算法本身非常复杂，实现难度很大。本文去繁就简，粗略介绍以下两个核心函数实现流程：\npatch(container,vnode) :初次渲染的时候，将VDOM渲染成真正的DOM然后插入到容器里面。\npatch(vnode,newVnode):再次渲染的时候，将新的vnode和旧的vnode相对比，然后之间差异应用到所构建的真正的DOM树上。\n\n## patch(container,vnode)\n通过这个函数可以让VNode渲染成真正的DOM，我们通过以下模拟代码，可以了解大致过程：\n```javascript\nfunction createElement(vnode) {    \n  var tag = vnode.tag  \n  var attrs = vnode.attrs || {}    \n  var children = vnode.children || []    \n  if (!tag) {       \n   return null  \n  }    \n  // 创建真实的 DOM 元素    \n  var elem = document.createElement(tag)   \n  // 属性    \n  var attrName    \n  for (attrName in attrs) {    \n    if (attrs.hasOwnProperty(attrName)) { \n           // 给 elem 添加属性\n           elem.setAttribute(attrName, attrs[attrName])\n        }\n    }\n    // 子元素\n    children.forEach(function (childVnode) {\n        // 给 elem 添加子元素，如果还有子节点，则递归的生成子节点。\n        elem.appendChild(createElement(childVnode))  // 递归\n    })    // 返回真实的 DOM 元素   \n return elem\n}\n```\n\n## patch(vnode,newVnode)\n这里我们只考虑vnode与newVnode如何对比的情况：\n```javascript\nfunction updateChildren(vnode, newVnode) {\n    var children = vnode.children || []\n    var newChildren = newVnode.children || []\n    // 遍历现有的children\n    children.forEach(function (childVnode, index) {\n        var newChildVnode = newChildren[index]\n        // 两者tag一样\n        if (childVnode.tag === newChildVnode.tag) {\n            // 深层次对比，递归\n            updateChildren(childVnode, newChildVnode)\n        } else { \n           // 两者tag不一样\n           replaceNode(childVnode, newChildVnode) \n       }\n    }\n)}\n```\n\n## Virtual DOM的优势\n- 具备跨平台的优势\n由于 Virtual DOM 是以 JavaScript 对象为基础而不依赖真实平台环境，所以使它具有了跨平台的能力，比如说浏览器平台、Weex、Node 等。\n\n- 操作 DOM 慢，js运行效率高。我们可以将DOM对比操作放在JS层，提高效率。\n因为DOM操作的执行速度远不如Javascript的运算速度快，因此，把大量的DOM操作搬运到Javascript中，运用patching算法来计算出真正需要更新的节点，最大限度地减少DOM操作，从而显著提高性能。\n\nVirtual DOM 本质上就是在 JS 和 DOM 之间做了一个缓存。可以类比 CPU 和硬盘，既然硬盘这么慢，我们就在它们之间加个缓存：既然 DOM 这么慢，我们就在它们 JS 和 DOM 之间加个缓存。CPU（JS）只操作内存（Virtual DOM），最后的时候再把变更写入硬盘（DOM）\n\n- 提升渲染性能\nVirtual DOM的优势不在于单次的操作，而是在大量、频繁的数据更新下，能够对视图进行合理、高效的更新。\n\n> 总结：Vue.js通过编译将模版转换成渲染函数(render)，执行渲染函数就可以得到一个虚拟节点树(虚拟DOM)，虚拟节点树(虚拟DOM)提供虚拟节点vnode和对新旧两个vnode进行比对并根据比对结果进行DOM操作来更新视图，达到减少对DOM的目的，从而减少浏览器的开销，提高渲染速度，改善用户体验。\n\n参考文章：\nhttps://github.com/ljianshu/Blog/issues/69\nhttps://book.douban.com/subject/32581281/\n\n原文地址：https://www.jianshu.com/p/4dbb3712ced7","slug":"浅谈Vue中的虚拟DOM","published":1,"updated":"2021-10-21T07:24:36.788Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv0mcvam0000cxfyz9u8pysk","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Vue2.0引入了虚拟DOM，比Vue1.0的初始渲染速度提升了2～4倍，并大大降低了内存消耗。目前主流的前端框架Vue、React核心技术也都使用了虚拟DOM，你是否好奇为什么要提出虚拟DOM，虚拟DOM是什么，它有什么优势？这一切的问题，都将在本篇揭晓。</p>\n<h2 id=\"为什么要提出虚拟DOM\"><a href=\"#为什么要提出虚拟DOM\" class=\"headerlink\" title=\"为什么要提出虚拟DOM\"></a>为什么要提出虚拟DOM</h2><p>在Web早期，页面的交互比较简单，没有复杂的状态需要管理，也不太需要频繁的操作DOM，随着时代的发展，页面上的功能越来越多，我们需要实现的需求也越来越复杂，DOM的操作也越来越频繁。通过js操作DOM的代价很高，因为会引起页面的重排重绘，增加浏览器的性能开销，降低页面渲染速度，既然操作dom的代价很高那么有没有那种方式可以减少对dom的操作？这就是为什么提出虚拟dom一个很重要的原因。</p>\n<h2 id=\"模版转换成视图的过程\"><a href=\"#模版转换成视图的过程\" class=\"headerlink\" title=\"模版转换成视图的过程\"></a>模版转换成视图的过程</h2><p>在正式介绍Virtual DOM之前，我们有必要先了解下模版转换成视图的整个过程(如下图)：</p>\n<ul>\n<li>Vue.js通过编译将模版转换成渲染函数(render)，执行渲染函数就可以得到一个虚拟DOM</li>\n<li>在对模型进行操作的时候，会触发对应的Dep中的Watcher对象。Watcher对象会调用对应的update来修改视图。这个过程主要是将新旧虚拟DOM进行差异对比，然后根据结果进行对比。<br>简单点讲，在Vue的实现上，Vue讲模版编译成虚拟DOM渲染函数。结合Vue自带的响应系统，在状态改变时，Vue能够智能地计算出重新渲染组件的最小代价并应用到DOM操作上。<br><img src=\"https://blogimage.houjiyi.com/Fl12e31OgbTL-xnjXd_Yyr0ofZmW\" alt=\"image.png\"></li>\n</ul>\n<p>我们先对上图几个概念嵌入解释：</p>\n<ul>\n<li>渲染函数：渲染函数是用来生成虚拟DOM的。Vue推荐使用模版来构建我们的应用界面，在实现中Vue布局模版编译成渲染函数，当然我们也可以不写模版，直接写渲染函数，这样子更接近编译后的模版。</li>\n<li>vnode虚拟节点：它可以代表一个真实的DOM节点通过createElement方法能将vnode渲染成DOM节点，简单地说，虚拟节点可以理解成节点描述对象，它描述了应该怎样去创建真实的DOM节点。</li>\n<li>patch(也称为patching算法)：虚拟DOM最核心的部分，它可以将vnode渲染成真实的DOM，这个过程是对比新旧虚拟节点之间有哪些不同，然后根据对比结果找出需要更新的的节点进行更新。这点我们从单词含义就可以看出， patch本身就有补丁、修补的意思，其实际作用是在现有DOM上进行修改来实现更新视图的目的。Vue的Virtual DOM Patching算法是基于Snabbdom的实现，并在些基础上作了很多的调整和改进。</li>\n</ul>\n<h2 id=\"Virtual-DOM-是什么？\"><a href=\"#Virtual-DOM-是什么？\" class=\"headerlink\" title=\"Virtual DOM 是什么？\"></a>Virtual DOM 是什么？</h2><p>Virtual DOM 其实就是一棵以 JavaScript 对象( VNode 节点)作为基础的树，用对象属性来描述节点，实际上它只是一层对真实 DOM 的抽象。最终可以通过一系列操作使这棵树映射到真实环境上。</p>\n<p>  简单来说，可以把Virtual DOM 理解为一个简单的JS对象，并且最少包含标签名( tag)、属性(attrs)和子元素对象( children)三个属性。不同的框架对这三个属性的命名会有点差别。</p>\n<p>对于虚拟DOM，咱们来看一个简单的实例，就是下图所示的这个，详细的阐述了模板 → 渲染函数 → 虚拟DOM树 → 真实DOM的一个过程</p>\n<p><img src=\"https://blogimage.houjiyi.com/FkAtIjsxjASDIO_lxH_aD_ZABlLX\" alt=\"image.png\"></p>\n<h2 id=\"为什么虚拟DOM可以提高渲染速度\"><a href=\"#为什么虚拟DOM可以提高渲染速度\" class=\"headerlink\" title=\"为什么虚拟DOM可以提高渲染速度\"></a>为什么虚拟DOM可以提高渲染速度</h2><p>传统方式用js操作DOM会有很多额外的DOM操作，例如，一个ul标签下有很多个li标签，其中只有一个li有变化，这种情况下如果使用新的ul去替代旧的ul，其实除了那个发生变化的li节点之外，其他节点都不需要重新渲染。由于DOM操作比较慢，所以这些DOM操作在性能上会有一定的浪费，避免这些不必要的DOM操作会提升很大一部分性能(减少重排重绘从而节省浏览器的性能开销)。<br>  为了避免不必要的DOM操作，虚拟DOM在虚拟节点映射到视图的过程中，将虚拟节点与上一次渲染视图所使用的虚拟节点(oldVnode)做对比，找出真正需要更新的节点来进行DOM操作，从而避免操作其他无任何改动的DOM。<br>其实虚拟DOM在Vue.js中主要做了两件事：</p>\n<ul>\n<li>提供与真实DOM节点所对应的虚拟节点vnode</li>\n<li>将虚拟节点vnode和旧虚拟节点oldVnode进行比对，然后更新视图<br>对两个虚拟节点进行对比是虚拟DOM中最核心的算法即patch，patch算法的核心是diff算法，它可以判断出哪些节点发生了变化，从而只对发生了变化的节点进行更新操作。</li>\n</ul>\n<h2 id=\"diff算法\"><a href=\"#diff算法\" class=\"headerlink\" title=\"diff算法\"></a>diff算法</h2><p><img src=\"https://blogimage.houjiyi.com/FhrRWops52b2yTl2OoF52MLf60r3\" alt=\"image.png\"></p>\n<p>Vue的diff算法是基于snabbdom改造过来的，仅在同级的vnode间做diff，递归地进行同级vnode的diff，最终实现整个DOM树的更新。因为跨层级的操作是非常少的，忽略不计，这样时间复杂度就从O(n3)变成O(n)。</p>\n<p>diff 算法包括几个步骤：</p>\n<ul>\n<li>用 JavaScript 对象结构表示 DOM 树的结构；然后用这个树构建一个真正的 DOM 树，插到文档当中</li>\n<li>当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较，记录两棵树差异</li>\n<li>把所记录的差异应用到所构建的真正的DOM树上，视图就更新了</li>\n</ul>\n<p><img src=\"https://blogimage.houjiyi.com/Fra1xRvFBjNvLWoOV5ou2TlZMRfA\" alt=\"image.png\"></p>\n<h2 id=\"diff算法的实现过程\"><a href=\"#diff算法的实现过程\" class=\"headerlink\" title=\"diff算法的实现过程\"></a>diff算法的实现过程</h2><p>diff 算法本身非常复杂，实现难度很大。本文去繁就简，粗略介绍以下两个核心函数实现流程：<br>patch(container,vnode) :初次渲染的时候，将VDOM渲染成真正的DOM然后插入到容器里面。<br>patch(vnode,newVnode):再次渲染的时候，将新的vnode和旧的vnode相对比，然后之间差异应用到所构建的真正的DOM树上。</p>\n<h2 id=\"patch-container-vnode\"><a href=\"#patch-container-vnode\" class=\"headerlink\" title=\"patch(container,vnode)\"></a>patch(container,vnode)</h2><p>通过这个函数可以让VNode渲染成真正的DOM，我们通过以下模拟代码，可以了解大致过程：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createElement</span>(<span class=\"params\">vnode</span>) </span>&#123;    </span><br><span class=\"line\">  <span class=\"keyword\">var</span> tag = vnode.tag  </span><br><span class=\"line\">  <span class=\"keyword\">var</span> attrs = vnode.attrs || &#123;&#125;    </span><br><span class=\"line\">  <span class=\"keyword\">var</span> children = vnode.children || []    </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!tag) &#123;       </span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"literal\">null</span>  </span><br><span class=\"line\">  &#125;    </span><br><span class=\"line\">  <span class=\"comment\">// 创建真实的 DOM 元素    </span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> elem = <span class=\"built_in\">document</span>.createElement(tag)   </span><br><span class=\"line\">  <span class=\"comment\">// 属性    </span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> attrName    </span><br><span class=\"line\">  <span class=\"keyword\">for</span> (attrName <span class=\"keyword\">in</span> attrs) &#123;    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (attrs.hasOwnProperty(attrName)) &#123; </span><br><span class=\"line\">           <span class=\"comment\">// 给 elem 添加属性</span></span><br><span class=\"line\">           elem.setAttribute(attrName, attrs[attrName])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 子元素</span></span><br><span class=\"line\">    children.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">childVnode</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 给 elem 添加子元素，如果还有子节点，则递归的生成子节点。</span></span><br><span class=\"line\">        elem.appendChild(createElement(childVnode))  <span class=\"comment\">// 递归</span></span><br><span class=\"line\">    &#125;)    <span class=\"comment\">// 返回真实的 DOM 元素   </span></span><br><span class=\"line\"> <span class=\"keyword\">return</span> elem</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"patch-vnode-newVnode\"><a href=\"#patch-vnode-newVnode\" class=\"headerlink\" title=\"patch(vnode,newVnode)\"></a>patch(vnode,newVnode)</h2><p>这里我们只考虑vnode与newVnode如何对比的情况：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateChildren</span>(<span class=\"params\">vnode, newVnode</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> children = vnode.children || []</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newChildren = newVnode.children || []</span><br><span class=\"line\">    <span class=\"comment\">// 遍历现有的children</span></span><br><span class=\"line\">    children.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">childVnode, index</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> newChildVnode = newChildren[index]</span><br><span class=\"line\">        <span class=\"comment\">// 两者tag一样</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childVnode.tag === newChildVnode.tag) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 深层次对比，递归</span></span><br><span class=\"line\">            updateChildren(childVnode, newChildVnode)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\">           <span class=\"comment\">// 两者tag不一样</span></span><br><span class=\"line\">           replaceNode(childVnode, newChildVnode) </span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">)&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Virtual-DOM的优势\"><a href=\"#Virtual-DOM的优势\" class=\"headerlink\" title=\"Virtual DOM的优势\"></a>Virtual DOM的优势</h2><ul>\n<li><p>具备跨平台的优势<br>由于 Virtual DOM 是以 JavaScript 对象为基础而不依赖真实平台环境，所以使它具有了跨平台的能力，比如说浏览器平台、Weex、Node 等。</p>\n</li>\n<li><p>操作 DOM 慢，js运行效率高。我们可以将DOM对比操作放在JS层，提高效率。<br>因为DOM操作的执行速度远不如Javascript的运算速度快，因此，把大量的DOM操作搬运到Javascript中，运用patching算法来计算出真正需要更新的节点，最大限度地减少DOM操作，从而显著提高性能。</p>\n</li>\n</ul>\n<p>Virtual DOM 本质上就是在 JS 和 DOM 之间做了一个缓存。可以类比 CPU 和硬盘，既然硬盘这么慢，我们就在它们之间加个缓存：既然 DOM 这么慢，我们就在它们 JS 和 DOM 之间加个缓存。CPU（JS）只操作内存（Virtual DOM），最后的时候再把变更写入硬盘（DOM）</p>\n<ul>\n<li>提升渲染性能<br>Virtual DOM的优势不在于单次的操作，而是在大量、频繁的数据更新下，能够对视图进行合理、高效的更新。</li>\n</ul>\n<blockquote>\n<p>总结：Vue.js通过编译将模版转换成渲染函数(render)，执行渲染函数就可以得到一个虚拟节点树(虚拟DOM)，虚拟节点树(虚拟DOM)提供虚拟节点vnode和对新旧两个vnode进行比对并根据比对结果进行DOM操作来更新视图，达到减少对DOM的目的，从而减少浏览器的开销，提高渲染速度，改善用户体验。</p>\n</blockquote>\n<p>参考文章：<br><a href=\"https://github.com/ljianshu/Blog/issues/69\" target=\"_blank\" rel=\"noopener\">https://github.com/ljianshu/Blog/issues/69</a><br><a href=\"https://book.douban.com/subject/32581281/\" target=\"_blank\" rel=\"noopener\">https://book.douban.com/subject/32581281/</a></p>\n<p>原文地址：<a href=\"https://www.jianshu.com/p/4dbb3712ced7\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/4dbb3712ced7</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Vue2.0引入了虚拟DOM，比Vue1.0的初始渲染速度提升了2～4倍，并大大降低了内存消耗。目前主流的前端框架Vue、React核心技术也都使用了虚拟DOM，你是否好奇为什么要提出虚拟DOM，虚拟DOM是什么，它有什么优势？这一切的问题，都将在本篇揭晓。</p>\n<h2 id=\"为什么要提出虚拟DOM\"><a href=\"#为什么要提出虚拟DOM\" class=\"headerlink\" title=\"为什么要提出虚拟DOM\"></a>为什么要提出虚拟DOM</h2><p>在Web早期，页面的交互比较简单，没有复杂的状态需要管理，也不太需要频繁的操作DOM，随着时代的发展，页面上的功能越来越多，我们需要实现的需求也越来越复杂，DOM的操作也越来越频繁。通过js操作DOM的代价很高，因为会引起页面的重排重绘，增加浏览器的性能开销，降低页面渲染速度，既然操作dom的代价很高那么有没有那种方式可以减少对dom的操作？这就是为什么提出虚拟dom一个很重要的原因。</p>\n<h2 id=\"模版转换成视图的过程\"><a href=\"#模版转换成视图的过程\" class=\"headerlink\" title=\"模版转换成视图的过程\"></a>模版转换成视图的过程</h2><p>在正式介绍Virtual DOM之前，我们有必要先了解下模版转换成视图的整个过程(如下图)：</p>\n<ul>\n<li>Vue.js通过编译将模版转换成渲染函数(render)，执行渲染函数就可以得到一个虚拟DOM</li>\n<li>在对模型进行操作的时候，会触发对应的Dep中的Watcher对象。Watcher对象会调用对应的update来修改视图。这个过程主要是将新旧虚拟DOM进行差异对比，然后根据结果进行对比。<br>简单点讲，在Vue的实现上，Vue讲模版编译成虚拟DOM渲染函数。结合Vue自带的响应系统，在状态改变时，Vue能够智能地计算出重新渲染组件的最小代价并应用到DOM操作上。<br><img src=\"https://blogimage.houjiyi.com/Fl12e31OgbTL-xnjXd_Yyr0ofZmW\" alt=\"image.png\"></li>\n</ul>\n<p>我们先对上图几个概念嵌入解释：</p>\n<ul>\n<li>渲染函数：渲染函数是用来生成虚拟DOM的。Vue推荐使用模版来构建我们的应用界面，在实现中Vue布局模版编译成渲染函数，当然我们也可以不写模版，直接写渲染函数，这样子更接近编译后的模版。</li>\n<li>vnode虚拟节点：它可以代表一个真实的DOM节点通过createElement方法能将vnode渲染成DOM节点，简单地说，虚拟节点可以理解成节点描述对象，它描述了应该怎样去创建真实的DOM节点。</li>\n<li>patch(也称为patching算法)：虚拟DOM最核心的部分，它可以将vnode渲染成真实的DOM，这个过程是对比新旧虚拟节点之间有哪些不同，然后根据对比结果找出需要更新的的节点进行更新。这点我们从单词含义就可以看出， patch本身就有补丁、修补的意思，其实际作用是在现有DOM上进行修改来实现更新视图的目的。Vue的Virtual DOM Patching算法是基于Snabbdom的实现，并在些基础上作了很多的调整和改进。</li>\n</ul>\n<h2 id=\"Virtual-DOM-是什么？\"><a href=\"#Virtual-DOM-是什么？\" class=\"headerlink\" title=\"Virtual DOM 是什么？\"></a>Virtual DOM 是什么？</h2><p>Virtual DOM 其实就是一棵以 JavaScript 对象( VNode 节点)作为基础的树，用对象属性来描述节点，实际上它只是一层对真实 DOM 的抽象。最终可以通过一系列操作使这棵树映射到真实环境上。</p>\n<p>  简单来说，可以把Virtual DOM 理解为一个简单的JS对象，并且最少包含标签名( tag)、属性(attrs)和子元素对象( children)三个属性。不同的框架对这三个属性的命名会有点差别。</p>\n<p>对于虚拟DOM，咱们来看一个简单的实例，就是下图所示的这个，详细的阐述了模板 → 渲染函数 → 虚拟DOM树 → 真实DOM的一个过程</p>\n<p><img src=\"https://blogimage.houjiyi.com/FkAtIjsxjASDIO_lxH_aD_ZABlLX\" alt=\"image.png\"></p>\n<h2 id=\"为什么虚拟DOM可以提高渲染速度\"><a href=\"#为什么虚拟DOM可以提高渲染速度\" class=\"headerlink\" title=\"为什么虚拟DOM可以提高渲染速度\"></a>为什么虚拟DOM可以提高渲染速度</h2><p>传统方式用js操作DOM会有很多额外的DOM操作，例如，一个ul标签下有很多个li标签，其中只有一个li有变化，这种情况下如果使用新的ul去替代旧的ul，其实除了那个发生变化的li节点之外，其他节点都不需要重新渲染。由于DOM操作比较慢，所以这些DOM操作在性能上会有一定的浪费，避免这些不必要的DOM操作会提升很大一部分性能(减少重排重绘从而节省浏览器的性能开销)。<br>  为了避免不必要的DOM操作，虚拟DOM在虚拟节点映射到视图的过程中，将虚拟节点与上一次渲染视图所使用的虚拟节点(oldVnode)做对比，找出真正需要更新的节点来进行DOM操作，从而避免操作其他无任何改动的DOM。<br>其实虚拟DOM在Vue.js中主要做了两件事：</p>\n<ul>\n<li>提供与真实DOM节点所对应的虚拟节点vnode</li>\n<li>将虚拟节点vnode和旧虚拟节点oldVnode进行比对，然后更新视图<br>对两个虚拟节点进行对比是虚拟DOM中最核心的算法即patch，patch算法的核心是diff算法，它可以判断出哪些节点发生了变化，从而只对发生了变化的节点进行更新操作。</li>\n</ul>\n<h2 id=\"diff算法\"><a href=\"#diff算法\" class=\"headerlink\" title=\"diff算法\"></a>diff算法</h2><p><img src=\"https://blogimage.houjiyi.com/FhrRWops52b2yTl2OoF52MLf60r3\" alt=\"image.png\"></p>\n<p>Vue的diff算法是基于snabbdom改造过来的，仅在同级的vnode间做diff，递归地进行同级vnode的diff，最终实现整个DOM树的更新。因为跨层级的操作是非常少的，忽略不计，这样时间复杂度就从O(n3)变成O(n)。</p>\n<p>diff 算法包括几个步骤：</p>\n<ul>\n<li>用 JavaScript 对象结构表示 DOM 树的结构；然后用这个树构建一个真正的 DOM 树，插到文档当中</li>\n<li>当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较，记录两棵树差异</li>\n<li>把所记录的差异应用到所构建的真正的DOM树上，视图就更新了</li>\n</ul>\n<p><img src=\"https://blogimage.houjiyi.com/Fra1xRvFBjNvLWoOV5ou2TlZMRfA\" alt=\"image.png\"></p>\n<h2 id=\"diff算法的实现过程\"><a href=\"#diff算法的实现过程\" class=\"headerlink\" title=\"diff算法的实现过程\"></a>diff算法的实现过程</h2><p>diff 算法本身非常复杂，实现难度很大。本文去繁就简，粗略介绍以下两个核心函数实现流程：<br>patch(container,vnode) :初次渲染的时候，将VDOM渲染成真正的DOM然后插入到容器里面。<br>patch(vnode,newVnode):再次渲染的时候，将新的vnode和旧的vnode相对比，然后之间差异应用到所构建的真正的DOM树上。</p>\n<h2 id=\"patch-container-vnode\"><a href=\"#patch-container-vnode\" class=\"headerlink\" title=\"patch(container,vnode)\"></a>patch(container,vnode)</h2><p>通过这个函数可以让VNode渲染成真正的DOM，我们通过以下模拟代码，可以了解大致过程：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createElement</span>(<span class=\"params\">vnode</span>) </span>&#123;    </span><br><span class=\"line\">  <span class=\"keyword\">var</span> tag = vnode.tag  </span><br><span class=\"line\">  <span class=\"keyword\">var</span> attrs = vnode.attrs || &#123;&#125;    </span><br><span class=\"line\">  <span class=\"keyword\">var</span> children = vnode.children || []    </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!tag) &#123;       </span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"literal\">null</span>  </span><br><span class=\"line\">  &#125;    </span><br><span class=\"line\">  <span class=\"comment\">// 创建真实的 DOM 元素    </span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> elem = <span class=\"built_in\">document</span>.createElement(tag)   </span><br><span class=\"line\">  <span class=\"comment\">// 属性    </span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> attrName    </span><br><span class=\"line\">  <span class=\"keyword\">for</span> (attrName <span class=\"keyword\">in</span> attrs) &#123;    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (attrs.hasOwnProperty(attrName)) &#123; </span><br><span class=\"line\">           <span class=\"comment\">// 给 elem 添加属性</span></span><br><span class=\"line\">           elem.setAttribute(attrName, attrs[attrName])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 子元素</span></span><br><span class=\"line\">    children.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">childVnode</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 给 elem 添加子元素，如果还有子节点，则递归的生成子节点。</span></span><br><span class=\"line\">        elem.appendChild(createElement(childVnode))  <span class=\"comment\">// 递归</span></span><br><span class=\"line\">    &#125;)    <span class=\"comment\">// 返回真实的 DOM 元素   </span></span><br><span class=\"line\"> <span class=\"keyword\">return</span> elem</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"patch-vnode-newVnode\"><a href=\"#patch-vnode-newVnode\" class=\"headerlink\" title=\"patch(vnode,newVnode)\"></a>patch(vnode,newVnode)</h2><p>这里我们只考虑vnode与newVnode如何对比的情况：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateChildren</span>(<span class=\"params\">vnode, newVnode</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> children = vnode.children || []</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newChildren = newVnode.children || []</span><br><span class=\"line\">    <span class=\"comment\">// 遍历现有的children</span></span><br><span class=\"line\">    children.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">childVnode, index</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> newChildVnode = newChildren[index]</span><br><span class=\"line\">        <span class=\"comment\">// 两者tag一样</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childVnode.tag === newChildVnode.tag) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 深层次对比，递归</span></span><br><span class=\"line\">            updateChildren(childVnode, newChildVnode)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\">           <span class=\"comment\">// 两者tag不一样</span></span><br><span class=\"line\">           replaceNode(childVnode, newChildVnode) </span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">)&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Virtual-DOM的优势\"><a href=\"#Virtual-DOM的优势\" class=\"headerlink\" title=\"Virtual DOM的优势\"></a>Virtual DOM的优势</h2><ul>\n<li><p>具备跨平台的优势<br>由于 Virtual DOM 是以 JavaScript 对象为基础而不依赖真实平台环境，所以使它具有了跨平台的能力，比如说浏览器平台、Weex、Node 等。</p>\n</li>\n<li><p>操作 DOM 慢，js运行效率高。我们可以将DOM对比操作放在JS层，提高效率。<br>因为DOM操作的执行速度远不如Javascript的运算速度快，因此，把大量的DOM操作搬运到Javascript中，运用patching算法来计算出真正需要更新的节点，最大限度地减少DOM操作，从而显著提高性能。</p>\n</li>\n</ul>\n<p>Virtual DOM 本质上就是在 JS 和 DOM 之间做了一个缓存。可以类比 CPU 和硬盘，既然硬盘这么慢，我们就在它们之间加个缓存：既然 DOM 这么慢，我们就在它们 JS 和 DOM 之间加个缓存。CPU（JS）只操作内存（Virtual DOM），最后的时候再把变更写入硬盘（DOM）</p>\n<ul>\n<li>提升渲染性能<br>Virtual DOM的优势不在于单次的操作，而是在大量、频繁的数据更新下，能够对视图进行合理、高效的更新。</li>\n</ul>\n<blockquote>\n<p>总结：Vue.js通过编译将模版转换成渲染函数(render)，执行渲染函数就可以得到一个虚拟节点树(虚拟DOM)，虚拟节点树(虚拟DOM)提供虚拟节点vnode和对新旧两个vnode进行比对并根据比对结果进行DOM操作来更新视图，达到减少对DOM的目的，从而减少浏览器的开销，提高渲染速度，改善用户体验。</p>\n</blockquote>\n<p>参考文章：<br><a href=\"https://github.com/ljianshu/Blog/issues/69\" target=\"_blank\" rel=\"noopener\">https://github.com/ljianshu/Blog/issues/69</a><br><a href=\"https://book.douban.com/subject/32581281/\" target=\"_blank\" rel=\"noopener\">https://book.douban.com/subject/32581281/</a></p>\n<p>原文地址：<a href=\"https://www.jianshu.com/p/4dbb3712ced7\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/4dbb3712ced7</a></p>\n"},{"title":"解决Electron 安装慢问题","originContent":"","toc":false,"date":"2021-10-26T11:00:50.000Z","_content":"\n安装Electron时会判断缓存中是否有要下载的zip包，如果没有的话就去下载这个zip包。但是往往下载这个zip包时非常慢，总是下载不成功。下面给出我的解决办法：\n\n首先要知道缓存位置在哪，根据 electron-download的描述,缓存的位置取决于操作系统，默认值为：\n\n> Linux：$XDG_CACHE_HOME或~/.cache/electron/\n> 苹果系统：~/Library/Caches/electron/\n> Windows：$LOCALAPPDATA/electron/Cache或~/AppData/Local/electron/Cache/\n\n然后，[下载](下载)需要的zip版本的包,放到上面提到的缓存地址中。\n\n最后，在命令窗口中执行npm install electron -g,执行成功\n\n![image.png](https://blogimage.houjiyi.com/Fh0vqiZD8HtNUziLZRNzjMc_EhYQ)","source":"_posts/解决Electron-安装慢问题.md","raw":"---\ntitle: 解决Electron 安装慢问题\ntags:\n  - 开发调试\noriginContent: ''\ncategories:\n  - Web开发\ntoc: false\ndate: 2021-10-26 19:00:50\n---\n\n安装Electron时会判断缓存中是否有要下载的zip包，如果没有的话就去下载这个zip包。但是往往下载这个zip包时非常慢，总是下载不成功。下面给出我的解决办法：\n\n首先要知道缓存位置在哪，根据 electron-download的描述,缓存的位置取决于操作系统，默认值为：\n\n> Linux：$XDG_CACHE_HOME或~/.cache/electron/\n> 苹果系统：~/Library/Caches/electron/\n> Windows：$LOCALAPPDATA/electron/Cache或~/AppData/Local/electron/Cache/\n\n然后，[下载](下载)需要的zip版本的包,放到上面提到的缓存地址中。\n\n最后，在命令窗口中执行npm install electron -g,执行成功\n\n![image.png](https://blogimage.houjiyi.com/Fh0vqiZD8HtNUziLZRNzjMc_EhYQ)","slug":"解决Electron-安装慢问题","published":1,"updated":"2021-10-26T11:00:50.152Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv7za5120000j3fy9ro431ls","content":"<p>安装Electron时会判断缓存中是否有要下载的zip包，如果没有的话就去下载这个zip包。但是往往下载这个zip包时非常慢，总是下载不成功。下面给出我的解决办法：</p>\n<p>首先要知道缓存位置在哪，根据 electron-download的描述,缓存的位置取决于操作系统，默认值为：</p>\n<blockquote>\n<p>Linux：$XDG_CACHE_HOME或~/.cache/electron/<br>苹果系统：~/Library/Caches/electron/<br>Windows：$LOCALAPPDATA/electron/Cache或~/AppData/Local/electron/Cache/</p>\n</blockquote>\n<p>然后，<a href=\"下载\">下载</a>需要的zip版本的包,放到上面提到的缓存地址中。</p>\n<p>最后，在命令窗口中执行npm install electron -g,执行成功</p>\n<p><img src=\"https://blogimage.houjiyi.com/Fh0vqiZD8HtNUziLZRNzjMc_EhYQ\" alt=\"image.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>安装Electron时会判断缓存中是否有要下载的zip包，如果没有的话就去下载这个zip包。但是往往下载这个zip包时非常慢，总是下载不成功。下面给出我的解决办法：</p>\n<p>首先要知道缓存位置在哪，根据 electron-download的描述,缓存的位置取决于操作系统，默认值为：</p>\n<blockquote>\n<p>Linux：$XDG_CACHE_HOME或~/.cache/electron/<br>苹果系统：~/Library/Caches/electron/<br>Windows：$LOCALAPPDATA/electron/Cache或~/AppData/Local/electron/Cache/</p>\n</blockquote>\n<p>然后，<a href=\"下载\">下载</a>需要的zip版本的包,放到上面提到的缓存地址中。</p>\n<p>最后，在命令窗口中执行npm install electron -g,执行成功</p>\n<p><img src=\"https://blogimage.houjiyi.com/Fh0vqiZD8HtNUziLZRNzjMc_EhYQ\" alt=\"image.png\"></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckockznvx0000h5s6ysyvcv2i","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockznwg000ch5s6lu8f7maj"},{"post_id":"ckockznwc000ah5s6534xil43","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockznwl000ih5s618kvtaac"},{"post_id":"ckockznw10001h5s6plye6q0v","category_id":"ckockznwb0007h5s648ulx6wk","_id":"ckockznwq000nh5s6xsekf7gd"},{"post_id":"ckockznw60004h5s68hw6tmmi","category_id":"ckockznwh000dh5s6d1tozxg4","_id":"ckockznwt000qh5s6ptjzn7t7"},{"post_id":"ckockznwa0006h5s6i0vm8std","category_id":"ckockznwb0007h5s648ulx6wk","_id":"ckockznww000wh5s63r11k1xs"},{"post_id":"ckockznwr000oh5s63zg2bxlc","category_id":"ckockznwb0007h5s648ulx6wk","_id":"ckockznwx0010h5s6sam1e4tr"},{"post_id":"ckockznwu000sh5s6hvy3p4sf","category_id":"ckockznwb0007h5s648ulx6wk","_id":"ckockznwy0012h5s68xwz2jh0"},{"post_id":"ckockznwe000bh5s6mgvbltxl","category_id":"ckockznwh000dh5s6d1tozxg4","_id":"ckockznx10016h5s6v2mqlmk1"},{"post_id":"ckockznwv000uh5s6ugzb20kq","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockznx20019h5s6216y2jkr"},{"post_id":"ckockznww000yh5s65hq8lc1e","category_id":"ckockznwb0007h5s648ulx6wk","_id":"ckockznx4001dh5s6sjigo2im"},{"post_id":"ckockznwx0011h5s6vx017zbh","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockznx7001hh5s6xzq3g001"},{"post_id":"ckockznwz0014h5s6kuej9zvn","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockznxa001lh5s6v00lb7pf"},{"post_id":"ckockznx10018h5s6wnkoz22n","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockznxc001ph5s6x5exgh59"},{"post_id":"ckockznwj000hh5s6djcy5oel","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockznxe001sh5s64fnu7006"},{"post_id":"ckockznwj000hh5s6djcy5oel","category_id":"ckockznwy0013h5s69seti2lh","_id":"ckockznxf001wh5s6gc0as301"},{"post_id":"ckockznx3001bh5s6bhc0i8i5","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockznxi001zh5s67n2djytg"},{"post_id":"ckockznx5001gh5s6447cg23w","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockznxj0023h5s6bkshx30o"},{"post_id":"ckockznwp000mh5s6a7ge8nb9","category_id":"ckockznx4001ch5s6teu9vbs0","_id":"ckockznxk0026h5s6zwiys1v3"},{"post_id":"ckockznx8001jh5s6c2tbo3yj","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockznxl002ah5s6yux5ogsw"},{"post_id":"ckockznxb001oh5s6g5kdu457","category_id":"ckockznx4001ch5s6teu9vbs0","_id":"ckockznxn002dh5s680vnqajp"},{"post_id":"ckockznwh000fh5s6m099rc6w","category_id":"ckockznww000vh5s6doox1bqs","_id":"ckockznxr002hh5s6ib1w8vep"},{"post_id":"ckockznwh000fh5s6m099rc6w","category_id":"ckockznxa001kh5s6obf5aicu","_id":"ckockznxs002kh5s6p5zjc6um"},{"post_id":"ckockznxd001rh5s6qutkxvmh","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockznxu002oh5s627dzxipx"},{"post_id":"ckockznxf001vh5s6jqksk7if","category_id":"ckockznx4001ch5s6teu9vbs0","_id":"ckockznxw002rh5s6k07g9et4"},{"post_id":"ckockznxg001yh5s6s4pijtvi","category_id":"ckockznx4001ch5s6teu9vbs0","_id":"ckockznxy002uh5s63ghomzec"},{"post_id":"ckockznxi0022h5s6bjgjfy6b","category_id":"ckockznx4001ch5s6teu9vbs0","_id":"ckockzny0002zh5s6htoi2u0y"},{"post_id":"ckockznxj0025h5s6z9ljq8kb","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockzny10032h5s6uw9mrxwh"},{"post_id":"ckockznxk0029h5s6ziza8hll","category_id":"ckockznx4001ch5s6teu9vbs0","_id":"ckockzny20037h5s6glo3mzxg"},{"post_id":"ckockznxl002ch5s6347voydl","category_id":"ckockznx4001ch5s6teu9vbs0","_id":"ckockzny5003ah5s60ohiol61"},{"post_id":"ckockznxn002fh5s6905nr8db","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockzny8003eh5s68nhq7e4b"},{"post_id":"ckockznxr002jh5s67smh80uc","category_id":"ckockznwh000dh5s6d1tozxg4","_id":"ckockzny9003hh5s68civ8spi"},{"post_id":"ckockznxs002mh5s6pidu4bx5","category_id":"ckockznx4001ch5s6teu9vbs0","_id":"ckockznyc003lh5s6ix7vaklk"},{"post_id":"ckockznxx002th5s6tjhy2j14","category_id":"ckockznx4001ch5s6teu9vbs0","_id":"ckockznyd003oh5s6g4y4t7ec"},{"post_id":"ckockzny00031h5s6q5s9spic","category_id":"ckockznxz002wh5s6xpbkrcw8","_id":"ckockznyg003sh5s6uk1t78ws"},{"post_id":"ckockznxv002qh5s6egfv4sth","category_id":"ckockznxz002wh5s6xpbkrcw8","_id":"ckockznyh003vh5s67kgsgjs3"},{"post_id":"ckockzny10035h5s6l4csmebs","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockznyi003yh5s63w062qgp"},{"post_id":"ckockzny30039h5s6u33nu83k","category_id":"ckockznxz002wh5s6xpbkrcw8","_id":"ckockznym0042h5s696rnelno"},{"post_id":"ckockznxz002yh5s6964dgkn1","category_id":"ckockznxz002wh5s6xpbkrcw8","_id":"ckockznyo0045h5s6wa70cfos"},{"post_id":"ckockzny6003ch5s6v7ur91k6","category_id":"ckockznx4001ch5s6teu9vbs0","_id":"ckockznyq0049h5s66fk5n5mr"},{"post_id":"ckockzny8003gh5s6dcah1jxg","category_id":"ckockznx4001ch5s6teu9vbs0","_id":"ckockznys004ch5s6ukov5u9p"},{"post_id":"ckockznya003jh5s6zzupw8x0","category_id":"ckockznx4001ch5s6teu9vbs0","_id":"ckockznyu004gh5s68lfxy1vu"},{"post_id":"ckockznyc003nh5s6v5qnvbph","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockznyw004jh5s6s446ow0w"},{"post_id":"ckockznye003qh5s6948jsczo","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockznyy004nh5s6horr0x9a"},{"post_id":"ckockznyg003th5s6dyq7s66z","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockznyz004qh5s6h94o459d"},{"post_id":"ckockznyh003wh5s62uwuf93w","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockznz4004uh5s6a6dg3p8i"},{"post_id":"ckockznyj0040h5s6fnogsp1q","category_id":"ckockznx4001ch5s6teu9vbs0","_id":"ckockznz8004xh5s6rx9hbwud"},{"post_id":"ckockznyn0043h5s6q3aepnin","category_id":"ckockznx4001ch5s6teu9vbs0","_id":"ckockznzc0050h5s6wyi8i8kh"},{"post_id":"ckockznyp0047h5s6n3ihq5sh","category_id":"ckockznxz002wh5s6xpbkrcw8","_id":"ckockznze0054h5s6d7qcv8xd"},{"post_id":"ckockznyq004ah5s6qbrgl9tk","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockznzg0057h5s6pgh31hw4"},{"post_id":"ckockznys004dh5s69uinlj17","category_id":"ckockznwh000dh5s6d1tozxg4","_id":"ckockznzj005bh5s6iiyjb2sm"},{"post_id":"ckockznyv004hh5s6qeb35luo","category_id":"ckockznx4001ch5s6teu9vbs0","_id":"ckockznzl005eh5s6cf1yysy6"},{"post_id":"ckockznyw004kh5s6uoasoqmm","category_id":"ckockznx4001ch5s6teu9vbs0","_id":"ckockznzm005ih5s6jmo3ghdz"},{"post_id":"ckockznyy004oh5s64ewjyrka","category_id":"ckockznx4001ch5s6teu9vbs0","_id":"ckockznzn005lh5s6yen80e8w"},{"post_id":"ckockznz0004rh5s61hgxhsej","category_id":"ckockznww000vh5s6doox1bqs","_id":"ckockznzq005ph5s69b38ttv1"},{"post_id":"ckockznz4004vh5s6fm7qffml","category_id":"ckockznx4001ch5s6teu9vbs0","_id":"ckockznzr005sh5s6rxmb3l0o"},{"post_id":"ckockznz8004yh5s630apni4e","category_id":"ckockznxz002wh5s6xpbkrcw8","_id":"ckockznzt005wh5s6hw3005kr"},{"post_id":"ckockznzd0052h5s68r3jqyfa","category_id":"ckockznxz002wh5s6xpbkrcw8","_id":"ckockznzu005zh5s6fsym7k9c"},{"post_id":"ckockznze0055h5s6641xcpds","category_id":"ckockznxz002wh5s6xpbkrcw8","_id":"ckockznzv0063h5s6bi0fip8u"},{"post_id":"ckockznzi0059h5s6q9t4b20y","category_id":"ckockznxz002wh5s6xpbkrcw8","_id":"ckockznzx0066h5s65n8ojceo"},{"post_id":"ckockznzj005ch5s6r9ulyqgl","category_id":"ckockznxz002wh5s6xpbkrcw8","_id":"ckockzo00006ah5s64hh5nxb9"},{"post_id":"ckockznzl005gh5s6b26dpim8","category_id":"ckockznx4001ch5s6teu9vbs0","_id":"ckockzo01006dh5s6zg6huuqc"},{"post_id":"ckockznzn005jh5s6p4mbzcc9","category_id":"ckockznxz002wh5s6xpbkrcw8","_id":"ckockzo04006hh5s60ui40v9v"},{"post_id":"ckockznzo005nh5s6958nhpjn","category_id":"ckockznx4001ch5s6teu9vbs0","_id":"ckockzo06006kh5s67d5ivbjl"},{"post_id":"ckockznzq005qh5s6rb7il4nj","category_id":"ckockznx4001ch5s6teu9vbs0","_id":"ckockzo07006oh5s69qk0bsyc"},{"post_id":"ckockznzs005uh5s65bzf4ghw","category_id":"ckockznx4001ch5s6teu9vbs0","_id":"ckockzo09006rh5s67jjppf5h"},{"post_id":"ckockznzt005xh5s69uo5sj09","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockzo0a006vh5s6p6gp924e"},{"post_id":"ckockznzu0061h5s631jnl58q","category_id":"ckockznx4001ch5s6teu9vbs0","_id":"ckockzo0b006zh5s6w28g34z4"},{"post_id":"ckockznzv0064h5s6p1zfng06","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockzo0c0073h5s6f80ub48p"},{"post_id":"ckockznzx0068h5s68pvgor0p","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockzo0f0077h5s60u42m603"},{"post_id":"ckockzo00006bh5s6gi5732zf","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockzo0h007bh5s60942jsg2"},{"post_id":"ckockzo02006fh5s6nkltdkl4","category_id":"ckockznx4001ch5s6teu9vbs0","_id":"ckockzo0i007eh5s6s8r671n4"},{"post_id":"ckockzo04006ih5s6avf5k1bu","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockzo0j007ih5s6qbgevo2g"},{"post_id":"ckockzo06006lh5s6nyv8nz45","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockzo0l007lh5s61tqbu97p"},{"post_id":"ckockzo0a006xh5s63eeumhbn","category_id":"ckockznwb0007h5s648ulx6wk","_id":"ckockzo0m007oh5s6yh5f5fqj"},{"post_id":"ckockzo0b0070h5s6khiz6lwj","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockzo0o007sh5s6bkq3p6le"},{"post_id":"ckockzo07006ph5s61xav5662","category_id":"ckockzo0a006wh5s69vqthxj4","_id":"ckockzo0p007vh5s6u96a9t26"},{"post_id":"ckockzo0d0074h5s67t7py0bn","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockzo0q007zh5s6718f2ij9"},{"post_id":"ckockzo0f0078h5s6gosnmq1k","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockzo0s0082h5s6jek7i3sp"},{"post_id":"ckockzo09006sh5s63dxjatbd","category_id":"ckockzo0a006wh5s69vqthxj4","_id":"ckockzo0v0086h5s6kubftrql"},{"post_id":"ckockzo0h007ch5s6ord8zt77","category_id":"ckockznwb0007h5s648ulx6wk","_id":"ckockzo0x0089h5s6qzxd816f"},{"post_id":"ckockzo0i007fh5s6gyuxbbcl","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockzo0z008dh5s6b1l87jfv"},{"post_id":"ckockzo0j007jh5s6o9sfkhxd","category_id":"ckockznwb0007h5s648ulx6wk","_id":"ckockzo11008gh5s6z5s0fmxy"},{"post_id":"ckockzo0n007qh5s6vjm2xlcx","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockzo13008lh5s6gucwzygd"},{"post_id":"ckockzo0o007th5s6o51mhi2h","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockzo14008oh5s6hpnbwz5u"},{"post_id":"ckockzo0q007xh5s6qga7dkbl","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockzo16008sh5s6c3s4nvbw"},{"post_id":"ckockzo0q0080h5s6bg5cm650","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockzo19008vh5s68p8p7nc6"},{"post_id":"ckockzo0t0084h5s6vb5wutjc","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockzo1a008yh5s6tn6cbyvq"},{"post_id":"ckockzo0v0087h5s6djs1iae7","category_id":"ckockznx4001ch5s6teu9vbs0","_id":"ckockzo1d0092h5s6e0942z2f"},{"post_id":"ckockzo0z008eh5s6nivrgu63","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockzo1e0095h5s6l0gr6m53"},{"post_id":"ckockzo12008hh5s6nmuh9e8u","category_id":"ckockznx4001ch5s6teu9vbs0","_id":"ckockzo1h0099h5s6nw4m7vkv"},{"post_id":"ckockzo14008mh5s63uqyix0l","category_id":"ckockznx4001ch5s6teu9vbs0","_id":"ckockzo1i009ch5s6yg5qq2pc"},{"post_id":"ckockzo0x008ah5s6f50qy7yj","category_id":"ckockznwh000dh5s6d1tozxg4","_id":"ckockzo1j009fh5s6d9w56gj1"},{"post_id":"ckockzo0x008ah5s6f50qy7yj","category_id":"ckockzo13008ih5s6estkkb0m","_id":"ckockzo1k009ih5s669kwiunq"},{"post_id":"ckockzo15008ph5s6nf8t3wwk","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockzo1l009lh5s6jyqfcuz1"},{"post_id":"ckockzo16008th5s68edj3r72","category_id":"ckockznx4001ch5s6teu9vbs0","_id":"ckockzo1n009oh5s6ktdzycu0"},{"post_id":"ckockzo19008wh5s6rptm8ac0","category_id":"ckockznx4001ch5s6teu9vbs0","_id":"ckockzo1n009rh5s6whff0xt9"},{"post_id":"ckockzo1a0090h5s6fns5uadt","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockzo1p009vh5s6dsnoylvy"},{"post_id":"ckockzo1d0093h5s67g23e51m","category_id":"ckockznwb0007h5s648ulx6wk","_id":"ckockzo1q009yh5s6zt1s6r9i"},{"post_id":"ckockzo1e0097h5s6z28mskiy","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockzo1r00a2h5s63c0grvpe"},{"post_id":"ckockzo1h009ah5s68y1p5xg9","category_id":"ckockzo0a006wh5s69vqthxj4","_id":"ckockzo1t00a5h5s6ju8oyg50"},{"post_id":"ckockzo1i009dh5s63wpjn75p","category_id":"ckockznx4001ch5s6teu9vbs0","_id":"ckockzo1v00a9h5s63saqvlhh"},{"post_id":"ckockzo1j009gh5s69kvicylq","category_id":"ckockznx4001ch5s6teu9vbs0","_id":"ckockzo1w00ach5s6eljhg58m"},{"post_id":"ckockzo1k009jh5s6rgbz5nyr","category_id":"ckockznx4001ch5s6teu9vbs0","_id":"ckockzo1x00afh5s6ebvnk8to"},{"post_id":"ckockzo1l009mh5s6rzydbzsj","category_id":"ckockzo0a006wh5s69vqthxj4","_id":"ckockzo1y00aih5s67f7wzl99"},{"post_id":"ckockzo1n009ph5s6apzlkwnf","category_id":"ckockznwb0007h5s648ulx6wk","_id":"ckockzo1z00amh5s6pqloo3jn"},{"post_id":"ckockzo1o009th5s6ann8w1m6","category_id":"ckockzo0a006wh5s69vqthxj4","_id":"ckockzo2000aph5s6r7x9ydaj"},{"post_id":"ckockzo1p009wh5s6h2760nsz","category_id":"ckockzo0a006wh5s69vqthxj4","_id":"ckockzo2100ash5s6lr5ll1km"},{"post_id":"ckockzo1q009zh5s634a2p787","category_id":"ckockznwb0007h5s648ulx6wk","_id":"ckockzo2300avh5s67uf34ncm"},{"post_id":"ckockzo1s00a3h5s6aohorqj8","category_id":"ckockznwb0007h5s648ulx6wk","_id":"ckockzo2400ayh5s6qeodv4ou"},{"post_id":"ckockzo1t00a6h5s6k5pft9em","category_id":"ckockznww000vh5s6doox1bqs","_id":"ckockzo2500b1h5s6lgaxok7n"},{"post_id":"ckockzo1v00aah5s6kvboqlu1","category_id":"ckockzo0a006wh5s69vqthxj4","_id":"ckockzo2700b4h5s6bgvxkcv5"},{"post_id":"ckockzo1x00agh5s60qcr35g2","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockzo2900b7h5s6kyv2h450"},{"post_id":"ckockzo1y00ajh5s64tngacad","category_id":"ckockzo0a006wh5s69vqthxj4","_id":"ckockzo2a00bah5s6zuvmnifh"},{"post_id":"ckockzo1z00anh5s6dubi933d","category_id":"ckockznx4001ch5s6teu9vbs0","_id":"ckockzo2b00bdh5s65q3ohdgw"},{"post_id":"ckockzo1w00adh5s6ns36ke15","category_id":"ckockznwh000dh5s6d1tozxg4","_id":"ckockzo2c00bgh5s6jbdmaqwt"},{"post_id":"ckockzo1w00adh5s6ns36ke15","category_id":"ckockzo1z00akh5s6g19vv8c6","_id":"ckockzo2e00bjh5s6qevckga3"},{"post_id":"ckockzo2000aqh5s6sfmvfpef","category_id":"ckockznx4001ch5s6teu9vbs0","_id":"ckockzo2f00bmh5s6hxfwqkrf"},{"post_id":"ckockzo2100ath5s6kce5nez4","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockzo2g00bph5s65btzvyrb"},{"post_id":"ckockzo2300awh5s6rrn82swa","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockzo2i00bsh5s6kw7aeauh"},{"post_id":"ckockzo2500azh5s6qufyftjs","category_id":"ckockznx4001ch5s6teu9vbs0","_id":"ckockzo2k00bvh5s6gz7sg024"},{"post_id":"ckockzo2600b2h5s6th5tw2h0","category_id":"ckockznx4001ch5s6teu9vbs0","_id":"ckockzo2m00byh5s6tnjhzcv0"},{"post_id":"ckockzo2700b5h5s6jot9a6f2","category_id":"ckockznx4001ch5s6teu9vbs0","_id":"ckockzo2n00c1h5s657rzjaks"},{"post_id":"ckockzo2900b8h5s6y5sx05oo","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockzo2o00c4h5s6oohvn39m"},{"post_id":"ckockzo2900b8h5s6y5sx05oo","category_id":"ckockznwy0013h5s69seti2lh","_id":"ckockzo2r00c7h5s6mb8fo75d"},{"post_id":"ckockzo2a00bbh5s6ojvic448","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockzo2s00cah5s66ufolde0"},{"post_id":"ckockzo2b00beh5s6osj0scbc","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockzo2t00cdh5s6jvtj79vm"},{"post_id":"ckockzo2d00bhh5s6xpzzo33q","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockzo2t00cfh5s6e4d3sl3j"},{"post_id":"ckockzo2e00bkh5s6tt22tk5s","category_id":"ckockznx4001ch5s6teu9vbs0","_id":"ckockzo2t00chh5s6hnkqk3z5"},{"post_id":"ckockzo2f00bnh5s6fq348sa1","category_id":"ckockznx4001ch5s6teu9vbs0","_id":"ckockzo2t00cjh5s6ke3q4cdj"},{"post_id":"ckockzo2g00bqh5s6vevpcv9b","category_id":"ckockznx4001ch5s6teu9vbs0","_id":"ckockzo2t00clh5s6sdd698ho"},{"post_id":"ckockzo2i00bth5s6lhwhjidu","category_id":"ckockznx4001ch5s6teu9vbs0","_id":"ckockzo2t00cnh5s6y06yaw2l"},{"post_id":"ckockzo2k00bwh5s6d4fl3htf","category_id":"ckockznx4001ch5s6teu9vbs0","_id":"ckockzo2u00cph5s6dqtisf09"},{"post_id":"ckockzo2m00bzh5s6zh37x1rg","category_id":"ckockznw30002h5s64mesxmim","_id":"ckockzo2u00crh5s6w56twyww"},{"post_id":"ckockzo2n00c2h5s61e86vlru","category_id":"ckockzo0a006wh5s69vqthxj4","_id":"ckockzo2u00cth5s6ec1uvi45"},{"post_id":"ckockzo2r00c8h5s6xtymfu1b","category_id":"ckockznwh000dh5s6d1tozxg4","_id":"ckockzo2w00cvh5s64t3cgg7x"},{"post_id":"ckockzo2o00c5h5s6sxq24wsy","category_id":"ckockzo2s00cbh5s6p0o3ryy7","_id":"ckockzo2w00cxh5s67qhcj2yk"},{"post_id":"ckoe2d2q500007qs6807vbwbz","category_id":"ckockznw30002h5s64mesxmim","_id":"ckoe2d2qb00037qs6phren2pp"},{"post_id":"ckp3gplxw0000zgs6b2xl4uv5","category_id":"ckockznw30002h5s64mesxmim","_id":"ckp3gply20003zgs6gugqbst3"},{"post_id":"ckq3vx9zk0000crs6u27arpf7","category_id":"ckockznw30002h5s64mesxmim","_id":"ckq3vx9zp0003crs6hcwl2nj5"},{"post_id":"ckqkdk1rf0000hafyy2c7aj9q","category_id":"ckockznw30002h5s64mesxmim","_id":"ckqkdk1rx0003hafym61zmz8b"},{"post_id":"ckr33fv3u0000tqs6k2wuiara","category_id":"ckockznwb0007h5s648ulx6wk","_id":"ckr33fv410002tqs6ys7cxbv4"},{"post_id":"ckr32yjog0000efs6zkbbcfya","category_id":"ckockznw30002h5s64mesxmim","_id":"ckr33fv4g0004tqs6dtpbpd65"},{"post_id":"ckt8e2ru20000xybssfcmuhcr","category_id":"ckockznw30002h5s64mesxmim","_id":"ckt8e2rut0004xybsbju71x15"},{"post_id":"ckt8e2ru20000xybssfcmuhcr","category_id":"ckt8e2rua0002xybsa7ijkbdy","_id":"ckt8e2rut0005xybs5w50n94m"},{"post_id":"cktntloct0000vrfy1j9jgges","category_id":"cktntlocy0001vrfy60z25db3","_id":"cktntlodi0003vrfye59mn0wv"},{"post_id":"cktnxcli20000qjs6rl9205a3","category_id":"cktntlocy0001vrfy60z25db3","_id":"cktnxclih0005qjs605xbxxc2"},{"post_id":"cktnxclib0001qjs6no6c3yz3","category_id":"cktntlocy0001vrfy60z25db3","_id":"cktnxclih0007qjs6nn6hwaif"},{"post_id":"cktnxclie0003qjs69ouxsf9l","category_id":"cktntlocy0001vrfy60z25db3","_id":"cktnxclii0008qjs6bfoi1snh"},{"post_id":"ckto0818l00007cs69xmilih8","category_id":"cktntlocy0001vrfy60z25db3","_id":"ckto0818t00067cs60ztgpeqi"},{"post_id":"ckto0818o00017cs6qqlkhu81","category_id":"cktntlocy0001vrfy60z25db3","_id":"ckto0818v00097cs6do0ylhc2"},{"post_id":"ckto0818r00037cs64vgi008j","category_id":"cktntlocy0001vrfy60z25db3","_id":"ckto0818y000c7cs6jzk6iqo3"},{"post_id":"ckto0818s00057cs6wz4wpak4","category_id":"cktntlocy0001vrfy60z25db3","_id":"ckto0818z000f7cs6q5lnrfyp"},{"post_id":"ckto0818u00087cs6invrrp63","category_id":"cktntlocy0001vrfy60z25db3","_id":"ckto08190000h7cs6mtlwbauo"},{"post_id":"ckto0818x000b7cs684qdjiry","category_id":"cktntlocy0001vrfy60z25db3","_id":"ckto08191000j7cs6lbnhsxxf"},{"post_id":"ckto0818y000e7cs68g4dwn8k","category_id":"cktntlocy0001vrfy60z25db3","_id":"ckto08192000k7cs61urla60x"},{"post_id":"cku53i79400007qfychpb1lh3","category_id":"ckockznw30002h5s64mesxmim","_id":"cku53i79k00037qfyv8cg4gb2"},{"post_id":"ckup5e1w700003qs6l2qsbwoq","category_id":"ckockznw30002h5s64mesxmim","_id":"ckup5e1wd00023qs6pbxd2dh7"},{"post_id":"ckv0mcvam0000cxfyz9u8pysk","category_id":"ckockznw30002h5s64mesxmim","_id":"ckv0mcvav0002cxfy3lt004cz"},{"post_id":"ckv7za5120000j3fy9ro431ls","category_id":"ckockznw30002h5s64mesxmim","_id":"ckv7za51f0002j3fyducpok5f"}],"PostTag":[{"post_id":"ckockznvx0000h5s6ysyvcv2i","tag_id":"ckockznw50003h5s67tbkeul9","_id":"ckockznwc0009h5s64fnzzzvd"},{"post_id":"ckockznw10001h5s6plye6q0v","tag_id":"ckockznwb0008h5s6mqmsu70p","_id":"ckockznwi000gh5s6hg4v37nw"},{"post_id":"ckockznwe000bh5s6mgvbltxl","tag_id":"ckockznw50003h5s67tbkeul9","_id":"ckockznwl000jh5s6n15sd8g2"},{"post_id":"ckockznw60004h5s68hw6tmmi","tag_id":"ckockznwh000eh5s6hk105oef","_id":"ckockznwv000th5s6030wmdsj"},{"post_id":"ckockznw60004h5s68hw6tmmi","tag_id":"ckockznwn000lh5s6pi48ucs3","_id":"ckockznww000xh5s6sx5menud"},{"post_id":"ckockznwx0011h5s6vx017zbh","tag_id":"ckockznw50003h5s67tbkeul9","_id":"ckockznx10017h5s61tkw8b1d"},{"post_id":"ckockznw80005h5s6t6yetmah","tag_id":"ckockznwu000rh5s6d34fgpad","_id":"ckockznx3001ah5s6y5ztbg7r"},{"post_id":"ckockznw80005h5s6t6yetmah","tag_id":"ckockznwx000zh5s6cpp2mvxc","_id":"ckockznx5001fh5s6f0o8f3ep"},{"post_id":"ckockznwz0014h5s6kuej9zvn","tag_id":"ckockznwu000rh5s6d34fgpad","_id":"ckockznx7001ih5s6nuyconsz"},{"post_id":"ckockznx10018h5s6wnkoz22n","tag_id":"ckockznw50003h5s67tbkeul9","_id":"ckockznxb001nh5s6hua7vpj3"},{"post_id":"ckockznwa0006h5s6i0vm8std","tag_id":"ckockznx00015h5s6bx3oyw89","_id":"ckockznxc001qh5s6qxlrlvfx"},{"post_id":"ckockznx3001bh5s6bhc0i8i5","tag_id":"ckockznw50003h5s67tbkeul9","_id":"ckockznxe001uh5s6ycf9sn0i"},{"post_id":"ckockznx3001bh5s6bhc0i8i5","tag_id":"ckockznwu000rh5s6d34fgpad","_id":"ckockznxg001xh5s61ecw3gyz"},{"post_id":"ckockznx5001gh5s6447cg23w","tag_id":"ckockznwu000rh5s6d34fgpad","_id":"ckockznxi0021h5s632dlmgoe"},{"post_id":"ckockznwc000ah5s6534xil43","tag_id":"ckockznx00015h5s6bx3oyw89","_id":"ckockznxj0024h5s64ch4k1m1"},{"post_id":"ckockznwh000fh5s6m099rc6w","tag_id":"ckockznw50003h5s67tbkeul9","_id":"ckockznxk0027h5s682dpjil6"},{"post_id":"ckockznwh000fh5s6m099rc6w","tag_id":"ckockznwn000lh5s6pi48ucs3","_id":"ckockznxl002bh5s6rsgknj1q"},{"post_id":"ckockznxd001rh5s6qutkxvmh","tag_id":"ckockznw50003h5s67tbkeul9","_id":"ckockznxn002eh5s6tttbukl7"},{"post_id":"ckockznxg001yh5s6s4pijtvi","tag_id":"ckockznwb0008h5s6mqmsu70p","_id":"ckockznxr002ih5s64m7u32sr"},{"post_id":"ckockznwj000hh5s6djcy5oel","tag_id":"ckockznwx000zh5s6cpp2mvxc","_id":"ckockznxs002lh5s6aaqen0q5"},{"post_id":"ckockznwj000hh5s6djcy5oel","tag_id":"ckockznxi0020h5s6kgt3roxs","_id":"ckockznxv002ph5s6yqkc7p58"},{"post_id":"ckockznwp000mh5s6a7ge8nb9","tag_id":"ckockznxk0028h5s6wdvfkg1y","_id":"ckockznxx002sh5s6s5avyndr"},{"post_id":"ckockznxn002fh5s6905nr8db","tag_id":"ckockznwu000rh5s6d34fgpad","_id":"ckockznxz002xh5s6tzlmd5c0"},{"post_id":"ckockznxr002jh5s67smh80uc","tag_id":"ckockznwh000eh5s6hk105oef","_id":"ckockzny00030h5s63i3xgwse"},{"post_id":"ckockznwr000oh5s63zg2bxlc","tag_id":"ckockznxq002gh5s6ugc52faq","_id":"ckockzny10033h5s6x0m94c7f"},{"post_id":"ckockznxs002mh5s6pidu4bx5","tag_id":"ckockznwb0008h5s6mqmsu70p","_id":"ckockzny30038h5s6kiph8gvd"},{"post_id":"ckockznwu000sh5s6hvy3p4sf","tag_id":"ckockznxt002nh5s6cv418evc","_id":"ckockzny6003bh5s6gej67en9"},{"post_id":"ckockznwv000uh5s6ugzb20kq","tag_id":"ckockznxy002vh5s6v45jnwhv","_id":"ckockzny8003fh5s62g9rkvsi"},{"post_id":"ckockznww000yh5s65hq8lc1e","tag_id":"ckockzny10034h5s6tc1ivvg1","_id":"ckockznya003ih5s6etlsbs78"},{"post_id":"ckockznx8001jh5s6c2tbo3yj","tag_id":"ckockznxy002vh5s6v45jnwhv","_id":"ckockznyc003mh5s6bgghwy1k"},{"post_id":"ckockznya003jh5s6zzupw8x0","tag_id":"ckockznxk0028h5s6wdvfkg1y","_id":"ckockznye003ph5s67mfrabln"},{"post_id":"ckockznxb001oh5s6g5kdu457","tag_id":"ckockznyb003kh5s6rhx9rdhw","_id":"ckockznyh003uh5s6kokmp8di"},{"post_id":"ckockznye003qh5s6948jsczo","tag_id":"ckockznw50003h5s67tbkeul9","_id":"ckockznyi003xh5s6atq08e4v"},{"post_id":"ckockznyg003th5s6dyq7s66z","tag_id":"ckockznwu000rh5s6d34fgpad","_id":"ckockznym0041h5s69ilg39hn"},{"post_id":"ckockznxf001vh5s6jqksk7if","tag_id":"ckockznyg003rh5s6rx32suli","_id":"ckockznyo0044h5s6axn2pd6l"},{"post_id":"ckockznyj0040h5s6fnogsp1q","tag_id":"ckockznxk0028h5s6wdvfkg1y","_id":"ckockznyq0048h5s6pddlnku1"},{"post_id":"ckockznxi0022h5s6bjgjfy6b","tag_id":"ckockznyj003zh5s6n9fgy2p5","_id":"ckockznyr004bh5s6dvnbcxz8"},{"post_id":"ckockznyn0043h5s6q3aepnin","tag_id":"ckockznyb003kh5s6rhx9rdhw","_id":"ckockznyt004fh5s6kahum6wy"},{"post_id":"ckockznxj0025h5s6z9ljq8kb","tag_id":"ckockznyp0046h5s62rfnhd3u","_id":"ckockznyw004ih5s6a4a3unx5"},{"post_id":"ckockznxj0025h5s6z9ljq8kb","tag_id":"ckockznw50003h5s67tbkeul9","_id":"ckockznyx004mh5s6j2oehyog"},{"post_id":"ckockznys004dh5s69uinlj17","tag_id":"ckockznwh000eh5s6hk105oef","_id":"ckockznyz004ph5s6t4j07wmt"},{"post_id":"ckockznyv004hh5s6qeb35luo","tag_id":"ckockznyb003kh5s6rhx9rdhw","_id":"ckockznz3004sh5s6j31ok7s5"},{"post_id":"ckockznxk0029h5s6ziza8hll","tag_id":"ckockznyg003rh5s6rx32suli","_id":"ckockznz7004wh5s623kqyw1t"},{"post_id":"ckockznyw004kh5s6uoasoqmm","tag_id":"ckockznyb003kh5s6rhx9rdhw","_id":"ckockznza004zh5s6l1gj62e3"},{"post_id":"ckockznyy004oh5s64ewjyrka","tag_id":"ckockznwb0008h5s6mqmsu70p","_id":"ckockznze0053h5s6rvn7d9xw"},{"post_id":"ckockznxl002ch5s6347voydl","tag_id":"ckockznyx004lh5s6as8050kz","_id":"ckockznzf0056h5s6ll6ucdp3"},{"post_id":"ckockznz0004rh5s61hgxhsej","tag_id":"ckockznwx000zh5s6cpp2mvxc","_id":"ckockznzj005ah5s62j6lm2jd"},{"post_id":"ckockznz4004vh5s6fm7qffml","tag_id":"ckockznwb0008h5s6mqmsu70p","_id":"ckockznzk005dh5s6qgfigbbf"},{"post_id":"ckockznxv002qh5s6egfv4sth","tag_id":"ckockznz3004th5s65t84xyj5","_id":"ckockznzm005hh5s6adqx7wcv"},{"post_id":"ckockznz8004yh5s630apni4e","tag_id":"ckockznz3004th5s65t84xyj5","_id":"ckockznzn005kh5s6kyipvrx7"},{"post_id":"ckockznzd0052h5s68r3jqyfa","tag_id":"ckockznz3004th5s65t84xyj5","_id":"ckockznzp005oh5s6clawxfsc"},{"post_id":"ckockznxx002th5s6tjhy2j14","tag_id":"ckockznyb003kh5s6rhx9rdhw","_id":"ckockznzr005rh5s6i3cj7soo"},{"post_id":"ckockznze0055h5s6641xcpds","tag_id":"ckockznz3004th5s65t84xyj5","_id":"ckockznzt005vh5s66z6kevfv"},{"post_id":"ckockznzi0059h5s6q9t4b20y","tag_id":"ckockznzh0058h5s6vzglc1a5","_id":"ckockznzt005yh5s6c8rf0lyi"},{"post_id":"ckockznxz002yh5s6964dgkn1","tag_id":"ckockznzh0058h5s6vzglc1a5","_id":"ckockznzv0062h5s6v27zrxy4"},{"post_id":"ckockznzj005ch5s6r9ulyqgl","tag_id":"ckockznz3004th5s65t84xyj5","_id":"ckockznzw0065h5s64xqh6zkl"},{"post_id":"ckockzny00031h5s6q5s9spic","tag_id":"ckockznzh0058h5s6vzglc1a5","_id":"ckockznzz0069h5s60t2c2lig"},{"post_id":"ckockznzn005jh5s6p4mbzcc9","tag_id":"ckockznz3004th5s65t84xyj5","_id":"ckockzo01006ch5s61j2tp3sf"},{"post_id":"ckockzny10035h5s6l4csmebs","tag_id":"ckockznyb003kh5s6rhx9rdhw","_id":"ckockzo03006gh5s624dedtta"},{"post_id":"ckockzny10035h5s6l4csmebs","tag_id":"ckockznxy002vh5s6v45jnwhv","_id":"ckockzo05006jh5s654uf8rqo"},{"post_id":"ckockzny10035h5s6l4csmebs","tag_id":"ckockznw50003h5s67tbkeul9","_id":"ckockzo07006nh5s6dsbizzur"},{"post_id":"ckockznzs005uh5s65bzf4ghw","tag_id":"ckockznyb003kh5s6rhx9rdhw","_id":"ckockzo08006qh5s616thx2zz"},{"post_id":"ckockzny30039h5s6u33nu83k","tag_id":"ckockznz3004th5s65t84xyj5","_id":"ckockzo09006uh5s6d25q4k8b"},{"post_id":"ckockznzt005xh5s69uo5sj09","tag_id":"ckockznw50003h5s67tbkeul9","_id":"ckockzo0b006yh5s63ac7nnmd"},{"post_id":"ckockznzu0061h5s631jnl58q","tag_id":"ckockznyb003kh5s6rhx9rdhw","_id":"ckockzo0c0072h5s6llbxgmyz"},{"post_id":"ckockzny6003ch5s6v7ur91k6","tag_id":"ckockznyb003kh5s6rhx9rdhw","_id":"ckockzo0e0076h5s6hlcrp7kg"},{"post_id":"ckockznzv0064h5s6p1zfng06","tag_id":"ckockznw50003h5s67tbkeul9","_id":"ckockzo0g007ah5s693snx2z7"},{"post_id":"ckockznzx0068h5s68pvgor0p","tag_id":"ckockznw50003h5s67tbkeul9","_id":"ckockzo0i007dh5s6w9h3ihb5"},{"post_id":"ckockzny8003gh5s6dcah1jxg","tag_id":"ckockznyb003kh5s6rhx9rdhw","_id":"ckockzo0j007gh5s67kdlzqxe"},{"post_id":"ckockzo00006bh5s6gi5732zf","tag_id":"ckockznw50003h5s67tbkeul9","_id":"ckockzo0k007kh5s67v59e1ov"},{"post_id":"ckockzo02006fh5s6nkltdkl4","tag_id":"ckockznyb003kh5s6rhx9rdhw","_id":"ckockzo0m007nh5s6c1cld2gr"},{"post_id":"ckockznyc003nh5s6v5qnvbph","tag_id":"ckockzo02006eh5s6q1fqna0p","_id":"ckockzo0o007rh5s60ggjk0xo"},{"post_id":"ckockzo06006lh5s6nyv8nz45","tag_id":"ckockznwu000rh5s6d34fgpad","_id":"ckockzo0p007uh5s66qg1fjkx"},{"post_id":"ckockznyh003wh5s62uwuf93w","tag_id":"ckockzo02006eh5s6q1fqna0p","_id":"ckockzo0q007yh5s6oe7k3fzo"},{"post_id":"ckockzo0a006xh5s63eeumhbn","tag_id":"ckockznxt002nh5s6cv418evc","_id":"ckockzo0s0081h5s6nrpg6fhy"},{"post_id":"ckockznyp0047h5s6n3ihq5sh","tag_id":"ckockznz3004th5s65t84xyj5","_id":"ckockzo0v0085h5s6aphv6nst"},{"post_id":"ckockzo0b0070h5s6khiz6lwj","tag_id":"ckockznwu000rh5s6d34fgpad","_id":"ckockzo0w0088h5s64lapjfvb"},{"post_id":"ckockzo0d0074h5s67t7py0bn","tag_id":"ckockznw50003h5s67tbkeul9","_id":"ckockzo0y008ch5s6aiat3y1n"},{"post_id":"ckockznyq004ah5s6qbrgl9tk","tag_id":"ckockznz3004th5s65t84xyj5","_id":"ckockzo10008fh5s6ycqecz7k"},{"post_id":"ckockzo0f0078h5s6gosnmq1k","tag_id":"ckockznwu000rh5s6d34fgpad","_id":"ckockzo13008kh5s6oaoi84xt"},{"post_id":"ckockzo0h007ch5s6ord8zt77","tag_id":"ckockzny10034h5s6tc1ivvg1","_id":"ckockzo14008nh5s6ecgb0c51"},{"post_id":"ckockznzl005gh5s6b26dpim8","tag_id":"ckockzo0g0079h5s6zhugscj4","_id":"ckockzo16008qh5s616k4nixn"},{"post_id":"ckockzo0i007fh5s6gyuxbbcl","tag_id":"ckockznw50003h5s67tbkeul9","_id":"ckockzo18008uh5s6qx71yfwo"},{"post_id":"ckockzo0j007jh5s6o9sfkhxd","tag_id":"ckockzny10034h5s6tc1ivvg1","_id":"ckockzo1a008xh5s6aii2bjaa"},{"post_id":"ckockznzo005nh5s6958nhpjn","tag_id":"ckockzo0j007hh5s6wo4w6dn3","_id":"ckockzo1c0091h5s62nxa09i7"},{"post_id":"ckockznzq005qh5s6rb7il4nj","tag_id":"ckockzo0g0079h5s6zhugscj4","_id":"ckockzo1e0094h5s651ioar9x"},{"post_id":"ckockzo0o007th5s6o51mhi2h","tag_id":"ckockznwu000rh5s6d34fgpad","_id":"ckockzo1f0098h5s6dds3403m"},{"post_id":"ckockzo0q007xh5s6qga7dkbl","tag_id":"ckockznw50003h5s67tbkeul9","_id":"ckockzo1i009bh5s6woelvbld"},{"post_id":"ckockzo04006ih5s6avf5k1bu","tag_id":"ckockzo0p007wh5s6z5an3s3q","_id":"ckockzo1j009eh5s6zil0m1f4"},{"post_id":"ckockzo0q0080h5s6bg5cm650","tag_id":"ckockznw50003h5s67tbkeul9","_id":"ckockzo1j009hh5s6cgujd0gh"},{"post_id":"ckockzo07006ph5s61xav5662","tag_id":"ckockzo0s0083h5s6x3zh6gij","_id":"ckockzo1l009kh5s66s0yd4sn"},{"post_id":"ckockzo0x008ah5s6f50qy7yj","tag_id":"ckockznw50003h5s67tbkeul9","_id":"ckockzo1m009nh5s60dz1ebdh"},{"post_id":"ckockzo0z008eh5s6nivrgu63","tag_id":"ckockznxt002nh5s6cv418evc","_id":"ckockzo1n009qh5s6ih9zfewu"},{"post_id":"ckockzo09006sh5s63dxjatbd","tag_id":"ckockzo0s0083h5s6x3zh6gij","_id":"ckockzo1o009uh5s6r1sydvdh"},{"post_id":"ckockzo14008mh5s63uqyix0l","tag_id":"ckockznyj003zh5s6n9fgy2p5","_id":"ckockzo1p009xh5s6wgy3mn0h"},{"post_id":"ckockzo0n007qh5s6vjm2xlcx","tag_id":"ckockzo13008jh5s681wiip1u","_id":"ckockzo1q00a1h5s6zg02af2a"},{"post_id":"ckockzo15008ph5s6nf8t3wwk","tag_id":"ckockzo02006eh5s6q1fqna0p","_id":"ckockzo1s00a4h5s6shkfufyw"},{"post_id":"ckockzo16008th5s68edj3r72","tag_id":"ckockznyb003kh5s6rhx9rdhw","_id":"ckockzo1u00a8h5s67sayy7rs"},{"post_id":"ckockzo0t0084h5s6vb5wutjc","tag_id":"ckockzo16008rh5s6okjbu6xk","_id":"ckockzo1v00abh5s69re4qoj9"},{"post_id":"ckockzo0t0084h5s6vb5wutjc","tag_id":"ckockznwx000zh5s6cpp2mvxc","_id":"ckockzo1w00aeh5s6tm7vu7p0"},{"post_id":"ckockzo19008wh5s6rptm8ac0","tag_id":"ckockzo0g0079h5s6zhugscj4","_id":"ckockzo1y00ahh5s6wsdk21gb"},{"post_id":"ckockzo1a0090h5s6fns5uadt","tag_id":"ckockznxt002nh5s6cv418evc","_id":"ckockzo1z00alh5s65bhduu4a"},{"post_id":"ckockzo0v0087h5s6djs1iae7","tag_id":"ckockznxy002vh5s6v45jnwhv","_id":"ckockzo2000aoh5s6fxe14irm"},{"post_id":"ckockzo0v0087h5s6djs1iae7","tag_id":"ckockzo1a008zh5s6yieisyx7","_id":"ckockzo2100arh5s670zganee"},{"post_id":"ckockzo1d0093h5s67g23e51m","tag_id":"ckockznw50003h5s67tbkeul9","_id":"ckockzo2200auh5s6m3nlivpy"},{"post_id":"ckockzo1e0097h5s6z28mskiy","tag_id":"ckockznxy002vh5s6v45jnwhv","_id":"ckockzo2400axh5s66cvia6qc"},{"post_id":"ckockzo1h009ah5s68y1p5xg9","tag_id":"ckockzo0s0083h5s6x3zh6gij","_id":"ckockzo2500b0h5s6gj4zyi4j"},{"post_id":"ckockzo12008hh5s6nmuh9e8u","tag_id":"ckockzo1e0096h5s65b16m3f5","_id":"ckockzo2700b3h5s6pf9a2nem"},{"post_id":"ckockzo1i009dh5s63wpjn75p","tag_id":"ckockznwb0008h5s6mqmsu70p","_id":"ckockzo2800b6h5s63j84tz53"},{"post_id":"ckockzo1j009gh5s69kvicylq","tag_id":"ckockznyg003rh5s6rx32suli","_id":"ckockzo2a00b9h5s6o0nrtre0"},{"post_id":"ckockzo1j009gh5s69kvicylq","tag_id":"ckockzo0j007hh5s6wo4w6dn3","_id":"ckockzo2b00bch5s6zpq8navl"},{"post_id":"ckockzo1k009jh5s6rgbz5nyr","tag_id":"ckockzo0g0079h5s6zhugscj4","_id":"ckockzo2c00bfh5s6vuwu7mu4"},{"post_id":"ckockzo1n009ph5s6apzlkwnf","tag_id":"ckockznwx000zh5s6cpp2mvxc","_id":"ckockzo2d00bih5s6jjg3l0tj"},{"post_id":"ckockzo1p009wh5s6h2760nsz","tag_id":"ckockzo1n009sh5s6j1sin8c8","_id":"ckockzo2f00blh5s6onelb0t6"},{"post_id":"ckockzo1l009mh5s6rzydbzsj","tag_id":"ckockzo1n009sh5s6j1sin8c8","_id":"ckockzo2g00boh5s6yq25xnka"},{"post_id":"ckockzo1s00a3h5s6aohorqj8","tag_id":"ckockzo1e0096h5s65b16m3f5","_id":"ckockzo2i00brh5s6znvfxdmv"},{"post_id":"ckockzo1o009th5s6ann8w1m6","tag_id":"ckockzo1n009sh5s6j1sin8c8","_id":"ckockzo2k00buh5s6idiq27pn"},{"post_id":"ckockzo1t00a6h5s6k5pft9em","tag_id":"ckockzo16008rh5s6okjbu6xk","_id":"ckockzo2l00bxh5s6lqry2ogg"},{"post_id":"ckockzo1v00aah5s6kvboqlu1","tag_id":"ckockzo0s0083h5s6x3zh6gij","_id":"ckockzo2n00c0h5s6s01gq4b5"},{"post_id":"ckockzo1q009zh5s634a2p787","tag_id":"ckockzo1u00a7h5s6x4o0k1kx","_id":"ckockzo2o00c3h5s6nj3tmk0w"},{"post_id":"ckockzo1w00adh5s6ns36ke15","tag_id":"ckockznw50003h5s67tbkeul9","_id":"ckockzo2r00c6h5s6rqiiar2a"},{"post_id":"ckockzo1x00agh5s60qcr35g2","tag_id":"ckockznxk0028h5s6wdvfkg1y","_id":"ckockzo2s00c9h5s66scvr80g"},{"post_id":"ckockzo1y00ajh5s64tngacad","tag_id":"ckockznx00015h5s6bx3oyw89","_id":"ckockzo2t00cch5s621zgm5my"},{"post_id":"ckockzo1z00anh5s6dubi933d","tag_id":"ckockznwb0008h5s6mqmsu70p","_id":"ckockzo2t00ceh5s6mcqrot1s"},{"post_id":"ckockzo2000aqh5s6sfmvfpef","tag_id":"ckockznwb0008h5s6mqmsu70p","_id":"ckockzo2t00cgh5s6o9z2wdye"},{"post_id":"ckockzo2100ath5s6kce5nez4","tag_id":"ckockznxy002vh5s6v45jnwhv","_id":"ckockzo2t00cih5s6q7izk8kn"},{"post_id":"ckockzo2300awh5s6rrn82swa","tag_id":"ckockzo16008rh5s6okjbu6xk","_id":"ckockzo2t00ckh5s6a74udiao"},{"post_id":"ckockzo2500azh5s6qufyftjs","tag_id":"ckockznwb0008h5s6mqmsu70p","_id":"ckockzo2t00cmh5s6gbrwpcik"},{"post_id":"ckockzo2600b2h5s6th5tw2h0","tag_id":"ckockznyb003kh5s6rhx9rdhw","_id":"ckockzo2t00coh5s6goetcuc1"},{"post_id":"ckockzo2700b5h5s6jot9a6f2","tag_id":"ckockznwb0008h5s6mqmsu70p","_id":"ckockzo2u00cqh5s6jv639iyu"},{"post_id":"ckockzo2900b8h5s6y5sx05oo","tag_id":"ckockznwu000rh5s6d34fgpad","_id":"ckockzo2u00csh5s61236rb26"},{"post_id":"ckockzo2a00bbh5s6ojvic448","tag_id":"ckockznx00015h5s6bx3oyw89","_id":"ckockzo2v00cuh5s6259y3ywc"},{"post_id":"ckockzo2b00beh5s6osj0scbc","tag_id":"ckockznw50003h5s67tbkeul9","_id":"ckockzo2w00cwh5s6tju3i97v"},{"post_id":"ckockzo2d00bhh5s6xpzzo33q","tag_id":"ckockznwu000rh5s6d34fgpad","_id":"ckockzo2w00cyh5s6esv5afbj"},{"post_id":"ckockzo2e00bkh5s6tt22tk5s","tag_id":"ckockznwb0008h5s6mqmsu70p","_id":"ckockzo2w00czh5s606hmiyoz"},{"post_id":"ckockzo2f00bnh5s6fq348sa1","tag_id":"ckockznwb0008h5s6mqmsu70p","_id":"ckockzo2w00d0h5s61fg8sh76"},{"post_id":"ckockzo2g00bqh5s6vevpcv9b","tag_id":"ckockznwb0008h5s6mqmsu70p","_id":"ckockzo2w00d1h5s6dzz3pngx"},{"post_id":"ckockzo2i00bth5s6lhwhjidu","tag_id":"ckockznwb0008h5s6mqmsu70p","_id":"ckockzo2w00d2h5s64cr5ccp2"},{"post_id":"ckockzo2k00bwh5s6d4fl3htf","tag_id":"ckockznwb0008h5s6mqmsu70p","_id":"ckockzo2w00d3h5s651s33jhz"},{"post_id":"ckockzo2m00bzh5s6zh37x1rg","tag_id":"ckockznw50003h5s67tbkeul9","_id":"ckockzo2w00d4h5s698owsla4"},{"post_id":"ckockzo2n00c2h5s61e86vlru","tag_id":"ckockzo1n009sh5s6j1sin8c8","_id":"ckockzo2w00d5h5s62wgwel42"},{"post_id":"ckockzo2o00c5h5s6sxq24wsy","tag_id":"ckockznwu000rh5s6d34fgpad","_id":"ckockzo2w00d6h5s6q0xu7s3j"},{"post_id":"ckockzo2r00c8h5s6xtymfu1b","tag_id":"ckockznw50003h5s67tbkeul9","_id":"ckockzo2w00d7h5s6nzl0umz3"},{"post_id":"ckoe2d2q500007qs6807vbwbz","tag_id":"ckockznw50003h5s67tbkeul9","_id":"ckoe2d2qa00017qs6hetn3ne4"},{"post_id":"ckoe2d2q500007qs6807vbwbz","tag_id":"ckockznwu000rh5s6d34fgpad","_id":"ckoe2d2qa00027qs6zlvuk0rp"},{"post_id":"ckoe2d2q500007qs6807vbwbz","tag_id":"ckockznxi0020h5s6kgt3roxs","_id":"ckoe2d2qb00047qs6sk5gdqqn"},{"post_id":"ckoe2d2q500007qs6807vbwbz","tag_id":"ckockznwn000lh5s6pi48ucs3","_id":"ckoe2d2qb00057qs6l4ee2mhq"},{"post_id":"ckp3gplxw0000zgs6b2xl4uv5","tag_id":"ckockznw50003h5s67tbkeul9","_id":"ckp3gply20001zgs64qxpmc25"},{"post_id":"ckp3gplxw0000zgs6b2xl4uv5","tag_id":"ckockzo0s0083h5s6x3zh6gij","_id":"ckp3gply20002zgs6f2ibz3jk"},{"post_id":"ckq3vx9zk0000crs6u27arpf7","tag_id":"ckockznw50003h5s67tbkeul9","_id":"ckq3vx9zo0001crs6prrlz7j8"},{"post_id":"ckq3vx9zk0000crs6u27arpf7","tag_id":"ckockznwx000zh5s6cpp2mvxc","_id":"ckq3vx9zp0002crs652nem585"},{"post_id":"ckq3vx9zk0000crs6u27arpf7","tag_id":"ckockznxi0020h5s6kgt3roxs","_id":"ckq3vx9zp0004crs6gz4eis11"},{"post_id":"ckqkdk1rf0000hafyy2c7aj9q","tag_id":"ckockznw50003h5s67tbkeul9","_id":"ckqkdk1rw0001hafyyqm1wb9e"},{"post_id":"ckqkdk1rf0000hafyy2c7aj9q","tag_id":"ckockznwx000zh5s6cpp2mvxc","_id":"ckqkdk1rx0002hafyyakoqgci"},{"post_id":"ckr33fv3u0000tqs6k2wuiara","tag_id":"ckockzo0s0083h5s6x3zh6gij","_id":"ckr33fv400001tqs63nhrjv42"},{"post_id":"ckr32yjog0000efs6zkbbcfya","tag_id":"ckockzo1a008zh5s6yieisyx7","_id":"ckr33fv4g0003tqs6lv17jq0j"},{"post_id":"ckt8e2ru20000xybssfcmuhcr","tag_id":"ckockznw50003h5s67tbkeul9","_id":"ckt8e2ru90001xybsqxzg6rrs"},{"post_id":"ckt8e2ru20000xybssfcmuhcr","tag_id":"ckockznwx000zh5s6cpp2mvxc","_id":"ckt8e2rus0003xybsltgzzhgo"},{"post_id":"cktntloct0000vrfy1j9jgges","tag_id":"ckockznwx000zh5s6cpp2mvxc","_id":"cktntlodh0002vrfybn3d0ykn"},{"post_id":"cktnxcli20000qjs6rl9205a3","tag_id":"ckockznwx000zh5s6cpp2mvxc","_id":"cktnxclie0002qjs6x2sici2w"},{"post_id":"cktnxclib0001qjs6no6c3yz3","tag_id":"ckockznwx000zh5s6cpp2mvxc","_id":"cktnxclig0004qjs6na41widt"},{"post_id":"cktnxclie0003qjs69ouxsf9l","tag_id":"ckockznwx000zh5s6cpp2mvxc","_id":"cktnxclih0006qjs6603ykg61"},{"post_id":"ckto0818l00007cs69xmilih8","tag_id":"ckockznwx000zh5s6cpp2mvxc","_id":"ckto0818q00027cs6p68sppmj"},{"post_id":"ckto0818o00017cs6qqlkhu81","tag_id":"ckockznwx000zh5s6cpp2mvxc","_id":"ckto0818s00047cs6ia0v7f6y"},{"post_id":"ckto0818r00037cs64vgi008j","tag_id":"ckockznwx000zh5s6cpp2mvxc","_id":"ckto0818u00077cs6ievxn86x"},{"post_id":"ckto0818s00057cs6wz4wpak4","tag_id":"ckockznwx000zh5s6cpp2mvxc","_id":"ckto0818v000a7cs6fn3thtmj"},{"post_id":"ckto0818u00087cs6invrrp63","tag_id":"ckockznwx000zh5s6cpp2mvxc","_id":"ckto0818y000d7cs6l9k4iqlf"},{"post_id":"ckto0818x000b7cs684qdjiry","tag_id":"ckockznwx000zh5s6cpp2mvxc","_id":"ckto08190000g7cs6urj1fk9t"},{"post_id":"ckto0818y000e7cs68g4dwn8k","tag_id":"ckockznwx000zh5s6cpp2mvxc","_id":"ckto08191000i7cs6x45231ng"},{"post_id":"cku53i79400007qfychpb1lh3","tag_id":"ckockznyb003kh5s6rhx9rdhw","_id":"cku53i79j00017qfyk53mtpbm"},{"post_id":"cku53i79400007qfychpb1lh3","tag_id":"ckockznw50003h5s67tbkeul9","_id":"cku53i79k00027qfyu89o9def"},{"post_id":"ckup5e1w700003qs6l2qsbwoq","tag_id":"ckockznwx000zh5s6cpp2mvxc","_id":"ckup5e1wd00013qs6zseo1a8c"},{"post_id":"ckv0mcvam0000cxfyz9u8pysk","tag_id":"ckockznw50003h5s67tbkeul9","_id":"ckv0mcvau0001cxfyajkz0hm2"},{"post_id":"ckv7za5120000j3fy9ro431ls","tag_id":"ckockzo16008rh5s6okjbu6xk","_id":"ckv7za51e0001j3fyh7831ihm"}],"Tag":[{"name":"知识点备忘","_id":"ckockznw50003h5s67tbkeul9"},{"name":"nginx","_id":"ckockznwb0008h5s6mqmsu70p"},{"name":"apicloud","_id":"ckockznwh000eh5s6hk105oef"},{"name":"vue","_id":"ckockznwn000lh5s6pi48ucs3"},{"name":"javascript","_id":"ckockznwu000rh5s6d34fgpad"},{"name":"Web开发","_id":"ckockznwx000zh5s6cpp2mvxc"},{"name":"计划","_id":"ckockznx00015h5s6bx3oyw89"},{"name":"微前端","_id":"ckockznxi0020h5s6kgt3roxs"},{"name":"运维","_id":"ckockznxk0028h5s6wdvfkg1y"},{"name":"git迁移","_id":"ckockznxq002gh5s6ugc52faq"},{"name":"基本知识","_id":"ckockznxt002nh5s6cv418evc"},{"name":"jenkins","_id":"ckockznxy002vh5s6v45jnwhv"},{"name":"广告","_id":"ckockzny10034h5s6tc1ivvg1"},{"name":"linux","_id":"ckockznyb003kh5s6rhx9rdhw"},{"name":"mysql","_id":"ckockznyg003rh5s6rx32suli"},{"name":"域名","_id":"ckockznyj003zh5s6n9fgy2p5"},{"name":"PWA","_id":"ckockznyp0046h5s62rfnhd3u"},{"name":"java","_id":"ckockznyx004lh5s6as8050kz"},{"name":"nodejs","_id":"ckockznz3004th5s65t84xyj5"},{"name":"redis","_id":"ckockznzh0058h5s6vzglc1a5"},{"name":"electron","_id":"ckockzo02006eh5s6q1fqna0p"},{"name":"pomelo","_id":"ckockzo0g0079h5s6zhugscj4"},{"name":"vagrant","_id":"ckockzo0j007hh5s6wo4w6dn3"},{"name":"websocket","_id":"ckockzo0p007wh5s6z5an3s3q"},{"name":"意义","_id":"ckockzo0s0083h5s6x3zh6gij"},{"name":"全景","_id":"ckockzo13008jh5s681wiip1u"},{"name":"开发调试","_id":"ckockzo16008rh5s6okjbu6xk"},{"name":"docker","_id":"ckockzo1a008zh5s6yieisyx7"},{"name":"科学上网","_id":"ckockzo1e0096h5s65b16m3f5"},{"name":"plan","_id":"ckockzo1n009sh5s6j1sin8c8"},{"name":"UML","_id":"ckockzo1u00a7h5s6x4o0k1kx"}]}}